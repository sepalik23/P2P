
Image.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:

const piniod_t __input_pins [] = INPUT_PIN_LIST;

void pin_sensor_init () { __pinsen_setedge_irq; }

void pin_sensor_read (word st, const byte *junk, address val) {
       0:	20005000 	andcs	r5, r0, r0

	const piniod_t *p;
	word i;
	byte v;

	if (val == NULL) {
       4:	00001c05 	andeq	r1, r0, r5, lsl #24
		// Called to issue a wait request
		if (st == WNONE)
       8:	00001bff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
       c:	00001c01 	andeq	r1, r0, r1, lsl #24
			// Make sure this is not WNONE
			return;
		cli;
		__pinsen_clear_and_enable;
      10:	00001c03 	andeq	r1, r0, r3, lsl #24
      14:	00001c03 	andeq	r1, r0, r3, lsl #24
		when (&__input_pins, st);
      18:	00001c03 	andeq	r1, r0, r3, lsl #24
	...
	}

	*val = 0;
	for (i = 0, p = __input_pins;
	    	    i < sizeof (__input_pins) / sizeof (piniod_t); i++, p++)
		*val |= __port_in_value (p) << i;
      2c:	00001c03 	andeq	r1, r0, r3, lsl #24
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Return the input value from the specified DIO.
    //
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      30:	00001c03 	andeq	r1, r0, r3, lsl #24
      34:	00000000 	andeq	r0, r0, r0
      38:	00001c03 	andeq	r1, r0, r3, lsl #24
      3c:	00001c03 	andeq	r1, r0, r3, lsl #24
      40:	00000979 	andeq	r0, r0, r9, ror r9
	for (i = 0, p = __input_pins;
      44:	00001c03 	andeq	r1, r0, r3, lsl #24
      48:	00001c03 	andeq	r1, r0, r3, lsl #24
      4c:	00001c03 	andeq	r1, r0, r3, lsl #24
}
      50:	00000551 	andeq	r0, r0, r1, asr r5
      54:	00000839 	andeq	r0, r0, r9, lsr r8
	if (!button_still_pressed (__button_list [pbutton]))
		goto Done;

	if (BUTTON_REPEAT (__button_list [pbutton])) {
		// Wait for repeat
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      58:	00001c03 	andeq	r1, r0, r3, lsl #24
		release;
      5c:	00001c03 	andeq	r1, r0, r3, lsl #24
	    pbutton++) {
      60:	00001c03 	andeq	r1, r0, r3, lsl #24
	if (!button_still_pressed (__button_list [pbutton]))
      64:	000025e9 	andeq	r2, r0, r9, ror #11
      68:	00001c03 	andeq	r1, r0, r3, lsl #24
      6c:	00001c03 	andeq	r1, r0, r3, lsl #24
      70:	00001c03 	andeq	r1, r0, r3, lsl #24
      74:	00001c03 	andeq	r1, r0, r3, lsl #24
      78:	00001c03 	andeq	r1, r0, r3, lsl #24
	if (BUTTON_REPEAT (__button_list [pbutton])) {
      7c:	00001c03 	andeq	r1, r0, r3, lsl #24
      80:	00001c03 	andeq	r1, r0, r3, lsl #24
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      84:	00001c03 	andeq	r1, r0, r3, lsl #24
      88:	00001c03 	andeq	r1, r0, r3, lsl #24
	} else
		goto Debounce;

  entry (BU_LOOP)

	if (!button_still_pressed (__button_list [pbutton]))
      8c:	00001c03 	andeq	r1, r0, r3, lsl #24
      90:	00001c03 	andeq	r1, r0, r3, lsl #24
      94:	00001c03 	andeq	r1, r0, r3, lsl #24
      98:	00001c03 	andeq	r1, r0, r3, lsl #24
      9c:	00001c03 	andeq	r1, r0, r3, lsl #24
      a0:	00001c03 	andeq	r1, r0, r3, lsl #24
		goto Done;

	if (baction == NULL)
      a4:	00001c03 	andeq	r1, r0, r3, lsl #24
      a8:	00001c03 	andeq	r1, r0, r3, lsl #24
		goto Term;

	(*baction) (pbutton);

	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00001c03 	andeq	r1, r0, r3, lsl #24

endthread
      b0:	00001c03 	andeq	r1, r0, r3, lsl #24
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      b4:	00001c03 	andeq	r1, r0, r3, lsl #24
      b8:	00001c03 	andeq	r1, r0, r3, lsl #24
endthread
      bc:	00001c03 	andeq	r1, r0, r3, lsl #24
      c0:	00001c03 	andeq	r1, r0, r3, lsl #24
      c4:	00001c03 	andeq	r1, r0, r3, lsl #24

000000c8 <receiver>:
int sfd;

/* 
 *  Purpose: Define a finiste state machine for receiving and processing messages.
*/
fsm receiver {
      c8:	b507      	push	{r0, r1, r2, lr}
      ca:	2804      	cmp	r0, #4
      cc:	d840      	bhi.n	150 <_Min_Stack_Size+0x50>
      ce:	e8df f000 	tbb	[pc, r0]
      d2:	211a0a03 	tstcs	sl, r3, lsl #20
      d6:	4b200025 	blmi	800172 <__ccfg+0x7e01ca>
    /*
     * Purpose: State for waiting to receive a packet
    */
    state Receiving:
        // Receive a packet
        packet = tcv_rnp(Receiving, sfd);
      da:	2000      	movs	r0, #0
      dc:	6819      	ldr	r1, [r3, #0]
      de:	f001 fba5 	bl	182c <tcv_rnp>
      e2:	4b1f      	ldr	r3, [pc, #124]	; (160 <_Min_Stack_Size+0x60>)
      e4:	6018      	str	r0, [r3, #0]
    /*
     * Purpose:  State for processing a received message.
    */
    state Receive_Msg:
        //Get the pointer to the received message
        receivedPtr = (struct msg *)(packet + 1);
      e6:	4b1e      	ldr	r3, [pc, #120]	; (160 <_Min_Stack_Size+0x60>)
      e8:	4a1e      	ldr	r2, [pc, #120]	; (164 <_Min_Stack_Size+0x64>)
      ea:	681b      	ldr	r3, [r3, #0]
      ec:	1c99      	adds	r1, r3, #2
      ee:	6011      	str	r1, [r2, #0]

        // Check if the message is directed to this node
        if(receivedPtr->receiverId == nodeId) {
      f0:	4a1d      	ldr	r2, [pc, #116]	; (168 <_Min_Stack_Size+0x68>)
      f2:	78db      	ldrb	r3, [r3, #3]
      f4:	7812      	ldrb	r2, [r2, #0]
      f6:	429a      	cmp	r2, r3
      f8:	d124      	bne.n	144 <_Min_Stack_Size+0x44>
            proceed Direct; // Proceed to handling direct message
      fa:	2002      	movs	r0, #2
        } else if (receivedPtr->receiverId == '0' || receivedPtr->receiverId == 0) {
            proceed Broadcast; // Proceed to handling broadcast message
      fc:	f000 ffc4 	bl	1088 <proceed>
        }
        // Continue receiving if message is not for this node
        proceed Receiving;
     100:	2000      	movs	r0, #0
     102:	f000 ffc1 	bl	1088 <proceed>
    
    /*
     * Purpose: State for handling a direct message.
    */
    state Direct:
        ser_outf(Receive_Msg, "Message ");
     106:	2001      	movs	r0, #1
     108:	4918      	ldr	r1, [pc, #96]	; (16c <_Min_Stack_Size+0x6c>)
     10a:	f001 fe57 	bl	1dbc <ser_outf>
        proceed Show_Message;
     10e:	2004      	movs	r0, #4
     110:	f000 ffba 	bl	1088 <proceed>
    
    /*
     * Purpose: State for handling a broadcast message.
    */
    state Broadcast:
        ser_outf(Broadcast, "Broadcast ");
     114:	2003      	movs	r0, #3
     116:	4916      	ldr	r1, [pc, #88]	; (170 <_Min_Stack_Size+0x70>)
     118:	f001 fe50 	bl	1dbc <ser_outf>

    /*
     * Purpose: State for displaying the received message.
    */
    state Show_Message:
        ser_outf(Show_Message, "Message from node %d (Seq %d): %s\n\r", receivedPtr->senderId, receivedPtr->sequenceNumber, receivedPtr->payload);
     11c:	4b11      	ldr	r3, [pc, #68]	; (164 <_Min_Stack_Size+0x64>)
     11e:	2004      	movs	r0, #4
     120:	6819      	ldr	r1, [r3, #0]
     122:	788b      	ldrb	r3, [r1, #2]
     124:	f811 2b03 	ldrb.w	r2, [r1], #3
     128:	9100      	str	r1, [sp, #0]
     12a:	4912      	ldr	r1, [pc, #72]	; (174 <_Min_Stack_Size+0x74>)
     12c:	f001 fe46 	bl	1dbc <ser_outf>
        tcv_endp(packet);
     130:	4b0b      	ldr	r3, [pc, #44]	; (160 <_Min_Stack_Size+0x60>)
     132:	6818      	ldr	r0, [r3, #0]
     134:	f001 fad0 	bl	16d8 <tcv_endp>
        // Return to receiving state for more messages
        proceed Receiving;
     138:	2000      	movs	r0, #0
}
     13a:	b003      	add	sp, #12
     13c:	f85d eb04 	ldr.w	lr, [sp], #4
        proceed Receiving;
     140:	f000 bfa2 	b.w	1088 <proceed>
        } else if (receivedPtr->receiverId == '0' || receivedPtr->receiverId == 0) {
     144:	2b30      	cmp	r3, #48	; 0x30
     146:	d001      	beq.n	14c <_Min_Stack_Size+0x4c>
     148:	2b00      	cmp	r3, #0
     14a:	d1d9      	bne.n	100 <_Min_Stack_Size>
            proceed Broadcast; // Proceed to handling broadcast message
     14c:	2003      	movs	r0, #3
     14e:	e7d5      	b.n	fc <receiver+0x34>
}
     150:	b003      	add	sp, #12
     152:	f85d eb04 	ldr.w	lr, [sp], #4
     156:	f000 bf0f 	b.w	f78 <__pi_badstate>
     15a:	bf00      	nop
     15c:	20000120 	andcs	r0, r0, r0, lsr #2
     160:	2000010c 	andcs	r0, r0, ip, lsl #2
     164:	20000114 	andcs	r0, r0, r4, lsl r1
     168:	20000108 	andcs	r0, r0, r8, lsl #2
     16c:	0000415c 	andeq	r4, r0, ip, asr r1
     170:	00004165 	andeq	r4, r0, r5, ror #2
     174:	00004170 	andeq	r4, r0, r0, ror r1

00000178 <send>:

/*
 * Purpose: Finite state machine for sending messages.
*/
fsm send(struct msg * ptr) {
     178:	b570      	push	{r4, r5, r6, lr}
     17a:	4605      	mov	r5, r0
     17c:	bb30      	cbnz	r0, 1cc <send+0x54>
     17e:	4b15      	ldr	r3, [pc, #84]	; (1d4 <send+0x5c>)
    /*
     * Purpose: State for sending a message.
    */
    state Send_Msg:
        // Create a new packet to send
        address spkt = tcv_wnp(Send_Msg, sfd, sizeof(struct msg) + 4);
     180:	4915      	ldr	r1, [pc, #84]	; (1d8 <send+0x60>)
fsm send(struct msg * ptr) {
     182:	681b      	ldr	r3, [r3, #0]
        address spkt = tcv_wnp(Send_Msg, sfd, sizeof(struct msg) + 4);
     184:	2222      	movs	r2, #34	; 0x22
fsm send(struct msg * ptr) {
     186:	689e      	ldr	r6, [r3, #8]
        address spkt = tcv_wnp(Send_Msg, sfd, sizeof(struct msg) + 4);
     188:	6809      	ldr	r1, [r1, #0]
     18a:	4603      	mov	r3, r0
     18c:	f001 fb8e 	bl	18ac <tcv_wnps>
     190:	4604      	mov	r4, r0
        
        // Initialize the packet
        spkt [0] = 0;
     192:	8005      	strh	r5, [r0, #0]
        byte * p = (byte*)(spkt + 1);

        // Populate the packet with message data
        *p = ptr->senderId; p++;
     194:	7833      	ldrb	r3, [r6, #0]
        *p = ptr->receiverId; p++;
        *p = ptr->sequenceNumber; p++;
        strcpy(p, ptr->payload);
     196:	1cf1      	adds	r1, r6, #3
        *p = ptr->senderId; p++;
     198:	7083      	strb	r3, [r0, #2]
        *p = ptr->receiverId; p++;
     19a:	7873      	ldrb	r3, [r6, #1]
        strcpy(p, ptr->payload);
     19c:	3005      	adds	r0, #5
        *p = ptr->receiverId; p++;
     19e:	f800 3c02 	strb.w	r3, [r0, #-2]
        *p = ptr->sequenceNumber; p++;
     1a2:	78b3      	ldrb	r3, [r6, #2]
     1a4:	f800 3c01 	strb.w	r3, [r0, #-1]
        strcpy(p, ptr->payload);
     1a8:	f000 fff3 	bl	1192 <__pi_strcpy>

        // Increment the message sequence number
        sequence++;
     1ac:	4a0b      	ldr	r2, [pc, #44]	; (1dc <send+0x64>)

        // Output a confirmation message
        tcv_endp (spkt);
     1ae:	4620      	mov	r0, r4
        sequence++;
     1b0:	6813      	ldr	r3, [r2, #0]
     1b2:	3301      	adds	r3, #1
     1b4:	6013      	str	r3, [r2, #0]
        tcv_endp (spkt);
     1b6:	f001 fa8f 	bl	16d8 <tcv_endp>
        ser_outf(Send_Msg, "\n\rMessage Sent\n\r");
     1ba:	4628      	mov	r0, r5
     1bc:	4908      	ldr	r1, [pc, #32]	; (1e0 <send+0x68>)
     1be:	f001 fdfd 	bl	1dbc <ser_outf>

        // Finish the state machine
        finish;
     1c2:	4628      	mov	r0, r5
}
     1c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        finish;
     1c8:	f001 b8a4 	b.w	1314 <kill>
}
     1cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     1d0:	f000 bed2 	b.w	f78 <__pi_badstate>
     1d4:	2000013c 	andcs	r0, r0, ip, lsr r1
     1d8:	20000120 	andcs	r0, r0, r0, lsr #2
     1dc:	2000011c 	andcs	r0, r0, ip, lsl r1
     1e0:	00004194 	muleq	r0, r4, r1

000001e4 <root>:

/*
 * Purpose:  Root state machine for managing the P2P chat application.
*/
fsm root {
     1e4:	b513      	push	{r0, r1, r4, lr}
     1e6:	2809      	cmp	r0, #9
     1e8:	f200 80b1 	bhi.w	34e <root+0x16a>
     1ec:	e8df f000 	tbb	[pc, r0]
     1f0:	523a3105 	eorspl	r3, sl, #1073741825	; 0x40000001
     1f4:	7f6e6a56 	svcvc	0x006e6a56
     1f8:	22019383 	andcs	r9, r1, #201326594	; 0xc000002
     * Purpose: Initialization state to set up the application.
    */
    state INIT:
        // Set node ID to default value and reset sequence
        nodeId = 1;
        sequence = 0;
     1fc:	2400      	movs	r4, #0
        nodeId = 1;
     1fe:	4b57      	ldr	r3, [pc, #348]	; (35c <root+0x178>)
        // Allocate memory for the message
        ptr = (struct Message *) umalloc(sizeof(struct msg));
     200:	201e      	movs	r0, #30
        nodeId = 1;
     202:	701a      	strb	r2, [r3, #0]
        sequence = 0;
     204:	4b56      	ldr	r3, [pc, #344]	; (360 <root+0x17c>)
     206:	601c      	str	r4, [r3, #0]
        ptr = (struct Message *) umalloc(sizeof(struct msg));
     208:	f001 f8ac 	bl	1364 <__pi_malloc>
     20c:	4b55      	ldr	r3, [pc, #340]	; (364 <root+0x180>)
        // Set up cc1350 board
        phys_cc1350(0, CC1350_BUF_SZ);
     20e:	21fa      	movs	r1, #250	; 0xfa
        ptr = (struct Message *) umalloc(sizeof(struct msg));
     210:	6018      	str	r0, [r3, #0]
        phys_cc1350(0, CC1350_BUF_SZ);
     212:	4620      	mov	r0, r4
     214:	f002 fa1e 	bl	2654 <phys_cc1350>

        // Load null plug-in
        tcv_plug(0, &plug_null);
     218:	4953      	ldr	r1, [pc, #332]	; (368 <root+0x184>)
     21a:	4620      	mov	r0, r4
     21c:	f001 faf4 	bl	1808 <tcv_plug>

        // Open the TCV session
        sfd = tcv_open(NONE, 0, 0);
     220:	4622      	mov	r2, r4
     222:	4621      	mov	r1, r4
     224:	f64f 70ff 	movw	r0, #65535	; 0xffff
     228:	f001 fa8e 	bl	1748 <tcv_open>
     22c:	4a4f      	ldr	r2, [pc, #316]	; (36c <root+0x188>)
		
        // Check if the session opened successfully
        if (sfd < 0) {
     22e:	42a0      	cmp	r0, r4
        sfd = tcv_open(NONE, 0, 0);
     230:	6010      	str	r0, [r2, #0]
        if (sfd < 0) {
     232:	da06      	bge.n	242 <root+0x5e>
            diag("unable to open TCV session");
     234:	484e      	ldr	r0, [pc, #312]	; (370 <root+0x18c>)
     236:	f001 f90f 	bl	1458 <diag>
            syserror(EASSERT, "no session");
     23a:	200a      	movs	r0, #10
     23c:	494d      	ldr	r1, [pc, #308]	; (374 <root+0x190>)
     23e:	f000 f925 	bl	48c <__pi_syserror>
        }

        // Enable physical options and run receiver state machine
        tcv_control(sfd, PHYSOPT_ON, NULL);
     242:	2104      	movs	r1, #4
     244:	4622      	mov	r2, r4
     246:	f001 fba5 	bl	1994 <tcv_control>
        runfsm receiver;
     24a:	4621      	mov	r1, r4
     24c:	484a      	ldr	r0, [pc, #296]	; (378 <root+0x194>)
     24e:	f001 f8dd 	bl	140c <__pi_fork>
    /*
     * Purpose: State to display the main menu.
    */
    state Menu:
        // Reset receiver ID
        receiverId = 0;
     252:	2200      	movs	r2, #0
     254:	4b49      	ldr	r3, [pc, #292]	; (37c <root+0x198>)
        // Display the menu
        ser_outf(Menu, "\n\rP2P Chat (Node #%d)\n\r"
     256:	2001      	movs	r0, #1
        receiverId = 0;
     258:	701a      	strb	r2, [r3, #0]
        ser_outf(Menu, "\n\rP2P Chat (Node #%d)\n\r"
     25a:	4b40      	ldr	r3, [pc, #256]	; (35c <root+0x178>)
     25c:	4948      	ldr	r1, [pc, #288]	; (380 <root+0x19c>)
     25e:	781a      	ldrb	r2, [r3, #0]
     260:	f001 fdac 	bl	1dbc <ser_outf>
     * Purpose: State to handle user input choice.
    */
    state Choice:
        // Get user choice
        char choice;
        ser_inf(Choice, "%c", &choice);
     264:	4947      	ldr	r1, [pc, #284]	; (384 <root+0x1a0>)
     266:	f10d 0207 	add.w	r2, sp, #7
     26a:	2002      	movs	r0, #2
     26c:	f001 fdd0 	bl	1e10 <ser_inf>
        choice = toupper((unsigned char)choice);
     270:	f89d 0007 	ldrb.w	r0, [sp, #7]
     274:	f003 ff68 	bl	4148 <toupper>
     278:	b2c0      	uxtb	r0, r0
     27a:	2843      	cmp	r0, #67	; 0x43
     27c:	f88d 0007 	strb.w	r0, [sp, #7]

        switch (choice) {
     280:	d005      	beq.n	28e <root+0xaa>
     282:	2844      	cmp	r0, #68	; 0x44
     284:	d05b      	beq.n	33e <root+0x15a>
     286:	2842      	cmp	r0, #66	; 0x42
     288:	d15b      	bne.n	342 <root+0x15e>
                proceed Direct_Transmission;
                break;
            
            // Broadcast transmission
            case 'B':
                proceed Broadcast_Transmission;
     28a:	2007      	movs	r0, #7
     28c:	e000      	b.n	290 <root+0xac>
                proceed Change_ID;
     28e:	2003      	movs	r0, #3
                break;
            // Display error message for incorrect option
            default:
                ser_outf(Choice, "\n\rIncorrect Option.");
                // Return to the main menu
                proceed Menu;
     290:	f000 fefa 	bl	1088 <proceed>
        }
    /*
     * Purpose: State to prompt user to enter a new node ID.
    */
    state Change_ID:
        ser_outf(Change_ID, "\n\rNew node ID (1-25):");
     294:	2003      	movs	r0, #3
     296:	493c      	ldr	r1, [pc, #240]	; (388 <root+0x1a4>)
     298:	f001 fd90 	bl	1dbc <ser_outf>

    /*
     * Purpose: State to get and validate the new node ID entered by the user.
    */
    state Get_ChangeID:
        ser_inf(Get_ChangeID, "%d", &nodeId);
     29c:	4c2f      	ldr	r4, [pc, #188]	; (35c <root+0x178>)
     29e:	2004      	movs	r0, #4
     2a0:	4622      	mov	r2, r4
     2a2:	493a      	ldr	r1, [pc, #232]	; (38c <root+0x1a8>)
     2a4:	f001 fdb4 	bl	1e10 <ser_inf>
            // Check if the entered node ID is valid
            if (nodeId < 1 || nodeId > 25) {
     2a8:	7823      	ldrb	r3, [r4, #0]
     2aa:	3b01      	subs	r3, #1
     2ac:	2b18      	cmp	r3, #24
     2ae:	d906      	bls.n	2be <root+0xda>
                ser_outf(Get_ChangeID, "\n\rInvalid ID");
     2b0:	2004      	movs	r0, #4
     2b2:	4937      	ldr	r1, [pc, #220]	; (390 <root+0x1ac>)
     2b4:	f001 fd82 	bl	1dbc <ser_outf>
                // Retry getting a valid ID
                proceed Change_ID;
     2b8:	2003      	movs	r0, #3
     2ba:	f000 fee5 	bl	1088 <proceed>
            }
            // Return to the main menu after successful ID change
            proceed Menu;
     2be:	2001      	movs	r0, #1
     2c0:	f000 fee2 	bl	1088 <proceed>

    /*
     * Purpose: State to prompt user to enter the receiver node ID for direct transmission.
    */
    state Direct_Transmission:
        ser_outf(Direct_Transmission, "\n\rReceiver node ID (1-25):");
     2c4:	2005      	movs	r0, #5
     2c6:	4933      	ldr	r1, [pc, #204]	; (394 <root+0x1b0>)
     2c8:	f001 fd78 	bl	1dbc <ser_outf>
    
    /*
     * Purpose: State to get and validate the receiver node ID entered by the user.
    */
    state Get_ReceiverID:
        ser_inf(Get_ReceiverID, "%d", &receiverId);
     2cc:	4c2b      	ldr	r4, [pc, #172]	; (37c <root+0x198>)
     2ce:	2006      	movs	r0, #6
     2d0:	4622      	mov	r2, r4
     2d2:	492e      	ldr	r1, [pc, #184]	; (38c <root+0x1a8>)
     2d4:	f001 fd9c 	bl	1e10 <ser_inf>
            // Check if the entered receiver ID is valid
            if (receiverId < 1 || receiverId > 25) {
     2d8:	7823      	ldrb	r3, [r4, #0]
     2da:	3b01      	subs	r3, #1
     2dc:	2b18      	cmp	r3, #24
     2de:	d906      	bls.n	2ee <root+0x10a>
                // Display error message for invalid ID
                ser_outf(Get_ReceiverID, "\n\rInvalid ID");
     2e0:	2006      	movs	r0, #6
     2e2:	492b      	ldr	r1, [pc, #172]	; (390 <root+0x1ac>)
     2e4:	f001 fd6a 	bl	1dbc <ser_outf>
                // Retry getting a valid receiver ID
                proceed Direct_Transmission;
     2e8:	2005      	movs	r0, #5
     2ea:	f000 fecd 	bl	1088 <proceed>

    /*
     * Purpose: State to prompt user to enter the message for broadcast transmission.
    */
    state Broadcast_Transmission:
        ser_outf(Broadcast_Transmission, "\n\rMessage: ");
     2ee:	2007      	movs	r0, #7
     2f0:	4929      	ldr	r1, [pc, #164]	; (398 <root+0x1b4>)
     2f2:	f001 fd63 	bl	1dbc <ser_outf>
    
    /*
     * Purpose: State to receive and process the message entered by the user.
    */
    state Receive_Msg:
        ser_in(Receive_Msg, ptr->payload, 27);
     2f6:	4c1b      	ldr	r4, [pc, #108]	; (364 <root+0x180>)
     2f8:	221b      	movs	r2, #27
     2fa:	6821      	ldr	r1, [r4, #0]
     2fc:	2008      	movs	r0, #8
     2fe:	3103      	adds	r1, #3
     300:	f001 fdb6 	bl	1e70 <ser_in>
        if(strlen(ptr->payload) >= 27) {
     304:	6820      	ldr	r0, [r4, #0]
     306:	3003      	adds	r0, #3
     308:	f000 ff3c 	bl	1184 <__pi_strlen>
     30c:	281a      	cmp	r0, #26
            // Ensure message is null-terminated
            ptr->payload[26] = '\0';
     30e:	bfc2      	ittt	gt
     310:	2200      	movgt	r2, #0
     312:	6823      	ldrgt	r3, [r4, #0]
     314:	775a      	strbgt	r2, [r3, #29]
    /*
     * Purpose: State to send the message after receiving input and validating receiver ID.
    */
    state Sending:
        // Set sender ID
        ptr->senderId = nodeId;
     316:	4b13      	ldr	r3, [pc, #76]	; (364 <root+0x180>)
        // Set receiver ID
        ptr->receiverId = receiverId;
        // Set sequence number
        ptr->sequenceNumber = (byte)sequence;
        // Call send finite state machine to transmit the message
        call send(ptr, Menu);
     318:	4820      	ldr	r0, [pc, #128]	; (39c <root+0x1b8>)
        ptr->senderId = nodeId;
     31a:	6819      	ldr	r1, [r3, #0]
     31c:	4b0f      	ldr	r3, [pc, #60]	; (35c <root+0x178>)
     31e:	781b      	ldrb	r3, [r3, #0]
     320:	700b      	strb	r3, [r1, #0]
        ptr->receiverId = receiverId;
     322:	4b16      	ldr	r3, [pc, #88]	; (37c <root+0x198>)
     324:	781b      	ldrb	r3, [r3, #0]
     326:	704b      	strb	r3, [r1, #1]
        ptr->sequenceNumber = (byte)sequence;
     328:	4b0d      	ldr	r3, [pc, #52]	; (360 <root+0x17c>)
     32a:	681b      	ldr	r3, [r3, #0]
     32c:	708b      	strb	r3, [r1, #2]
        call send(ptr, Menu);
     32e:	f001 f86d 	bl	140c <__pi_fork>
     332:	2101      	movs	r1, #1
     334:	f000 fee6 	bl	1104 <__pi_join>
     338:	b170      	cbz	r0, 358 <root+0x174>
     33a:	f000 fc4f 	bl	bdc <__pi_release>
                proceed Direct_Transmission;
     33e:	2005      	movs	r0, #5
     340:	e7a6      	b.n	290 <root+0xac>
                ser_outf(Choice, "\n\rIncorrect Option.");
     342:	2002      	movs	r0, #2
     344:	4916      	ldr	r1, [pc, #88]	; (3a0 <root+0x1bc>)
     346:	f001 fd39 	bl	1dbc <ser_outf>
                proceed Menu;
     34a:	2001      	movs	r0, #1
     34c:	e7a0      	b.n	290 <root+0xac>
}
     34e:	b002      	add	sp, #8
     350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     354:	f000 be10 	b.w	f78 <__pi_badstate>
     358:	b002      	add	sp, #8
     35a:	bd10      	pop	{r4, pc}
     35c:	20000108 	andcs	r0, r0, r8, lsl #2
     360:	2000011c 	andcs	r0, r0, ip, lsl r1
     364:	20000110 	andcs	r0, r0, r0, lsl r1
     368:	00004e0c 	andeq	r4, r0, ip, lsl #28
     36c:	20000120 	andcs	r0, r0, r0, lsr #2
     370:	000041a5 	andeq	r4, r0, r5, lsr #3
     374:	000041c0 	andeq	r4, r0, r0, asr #3
     378:	000000c9 	andeq	r0, r0, r9, asr #1
     37c:	20000118 	andcs	r0, r0, r8, lsl r1
     380:	000041cb 	andeq	r4, r0, fp, asr #3
     384:	00004231 	andeq	r4, r0, r1, lsr r2
     388:	00004248 	andeq	r4, r0, r8, asr #4
     38c:	00004493 	muleq	r0, r3, r4
     390:	0000425e 	andeq	r4, r0, lr, asr r2
     394:	0000426b 	andeq	r4, r0, fp, ror #4
     398:	00004286 	andeq	r4, r0, r6, lsl #5
     39c:	00000179 	andeq	r0, r0, r9, ror r1
     3a0:	00004234 	andeq	r4, r0, r4, lsr r2

000003a4 <devinit_uart>:
			/* No return */
			return 0;
	}
}

static void devinit_uart (int devnum) {
     3a4:	4601      	mov	r1, r0

	adddevfunc (ioreq_uart_a, devnum);
     3a6:	4801      	ldr	r0, [pc, #4]	; (3ac <devinit_uart+0x8>)
     3a8:	f000 bf08 	b.w	11bc <adddevfunc>
     3ac:	00000739 	andeq	r0, r0, r9, lsr r7

000003b0 <udelay>:
void udelay (volatile word n) {
     3b0:	b082      	sub	sp, #8
     3b2:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     3b6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     3ba:	b29b      	uxth	r3, r3
     3bc:	b90b      	cbnz	r3, 3c2 <udelay+0x12>
}
     3be:	b002      	add	sp, #8
     3c0:	4770      	bx	lr
		_gdelay (__USEC_DELAY);
     3c2:	2304      	movs	r3, #4
	while (n--);
     3c4:	461a      	mov	r2, r3
     3c6:	3b01      	subs	r3, #1
     3c8:	b29b      	uxth	r3, r3
     3ca:	2a00      	cmp	r2, #0
     3cc:	d1fa      	bne.n	3c4 <udelay+0x14>
		n--;
     3ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     3d2:	3b01      	subs	r3, #1
     3d4:	b29b      	uxth	r3, r3
     3d6:	f8ad 3006 	strh.w	r3, [sp, #6]
     3da:	e7ec      	b.n	3b6 <udelay+0x6>

000003dc <mdelay>:
void mdelay (volatile word n) {
     3dc:	b507      	push	{r0, r1, r2, lr}
     3de:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     3e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     3e6:	b29b      	uxth	r3, r3
     3e8:	b913      	cbnz	r3, 3f0 <mdelay+0x14>
}
     3ea:	b003      	add	sp, #12
     3ec:	f85d fb04 	ldr.w	pc, [sp], #4
		udelay (999);
     3f0:	f240 30e7 	movw	r0, #999	; 0x3e7
     3f4:	f7ff ffdc 	bl	3b0 <udelay>
		n--;
     3f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     3fc:	3b01      	subs	r3, #1
     3fe:	b29b      	uxth	r3, r3
     400:	f8ad 3006 	strh.w	r3, [sp, #6]
     404:	e7ed      	b.n	3e2 <mdelay+0x6>
	...

00000408 <__pi_ondomain>:
void __pi_ondomain (lword d) {
     408:	b538      	push	{r3, r4, r5, lr}
	if (d & PRCM_DOMAIN_RFCORE) {
     40a:	07c3      	lsls	r3, r0, #31
void __pi_ondomain (lword d) {
     40c:	4604      	mov	r4, r0
	if (d & PRCM_DOMAIN_RFCORE) {
     40e:	d505      	bpl.n	41c <__pi_ondomain+0x14>
		if (__pi_systat.effpdm > 1)
     410:	4b0c      	ldr	r3, [pc, #48]	; (444 <__pi_ondomain+0x3c>)
     412:	78da      	ldrb	r2, [r3, #3]
     414:	2a01      	cmp	r2, #1
			__pi_systat.effpdm = 1;
     416:	bf84      	itt	hi
     418:	2201      	movhi	r2, #1
     41a:	70da      	strbhi	r2, [r3, #3]
	PRCMPowerDomainOn (d);
     41c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     420:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
     424:	4620      	mov	r0, r4
     426:	695b      	ldr	r3, [r3, #20]
     428:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     42a:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
     42e:	4620      	mov	r0, r4
     430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     432:	4798      	blx	r3
     434:	2801      	cmp	r0, #1
     436:	d1f8      	bne.n	42a <__pi_ondomain+0x22>
	__pi_systat.ondmns |= d;
     438:	4b02      	ldr	r3, [pc, #8]	; (444 <__pi_ondomain+0x3c>)
     43a:	6858      	ldr	r0, [r3, #4]
     43c:	4304      	orrs	r4, r0
     43e:	605c      	str	r4, [r3, #4]
}
     440:	bd38      	pop	{r3, r4, r5, pc}
     442:	bf00      	nop
     444:	20000148 	andcs	r0, r0, r8, asr #2

00000448 <__pi_offdomain>:
void __pi_offdomain (lword d) {
     448:	b538      	push	{r3, r4, r5, lr}
	PRCMPowerDomainOff (d);
     44a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     44e:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
void __pi_offdomain (lword d) {
     452:	4604      	mov	r4, r0
	PRCMPowerDomainOff (d);
     454:	699b      	ldr	r3, [r3, #24]
     456:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     458:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
     45c:	4620      	mov	r0, r4
     45e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     460:	4798      	blx	r3
     462:	2802      	cmp	r0, #2
     464:	d1f8      	bne.n	458 <__pi_offdomain+0x10>
	if (d & PRCM_DOMAIN_RFCORE) {
     466:	f014 0f01 	tst.w	r4, #1
     46a:	4b07      	ldr	r3, [pc, #28]	; (488 <__pi_offdomain+0x40>)
     46c:	d006      	beq.n	47c <__pi_offdomain+0x34>
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     46e:	7899      	ldrb	r1, [r3, #2]
     470:	78da      	ldrb	r2, [r3, #3]
     472:	4291      	cmp	r1, r2
			__pi_systat.effpdm = __pi_systat.reqpdm;
     474:	bf82      	ittt	hi
     476:	789a      	ldrbhi	r2, [r3, #2]
     478:	b2d2      	uxtbhi	r2, r2
     47a:	70da      	strbhi	r2, [r3, #3]
	__pi_systat.ondmns &= ~d;
     47c:	6858      	ldr	r0, [r3, #4]
     47e:	ea20 0404 	bic.w	r4, r0, r4
     482:	605c      	str	r4, [r3, #4]
}
     484:	bd38      	pop	{r3, r4, r5, pc}
     486:	bf00      	nop
     488:	20000148 	andcs	r0, r0, r8, asr #2

0000048c <__pi_syserror>:
void __pi_syserror (word ec, const char *m) {
     48c:	460a      	mov	r2, r1
     48e:	b508      	push	{r3, lr}
	diag ("SYSERR: %x, %s", ec, m);
     490:	4601      	mov	r1, r0
     492:	4810      	ldr	r0, [pc, #64]	; (4d4 <__pi_syserror+0x48>)
     494:	f000 ffe0 	bl	1458 <diag>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     498:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Set the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     49a:	2640      	movs	r6, #64	; 0x40
     49c:	4c0e      	ldr	r4, [pc, #56]	; (4d8 <__pi_syserror+0x4c>)
     49e:	2580      	movs	r5, #128	; 0x80
		all_leds_blink;
     4a0:	490e      	ldr	r1, [pc, #56]	; (4dc <__pi_syserror+0x50>)
     4a2:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
     4a6:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
     4aa:	780b      	ldrb	r3, [r1, #0]
     4ac:	780b      	ldrb	r3, [r1, #0]
     4ae:	20c8      	movs	r0, #200	; 0xc8
     4b0:	f36f 1307 	bfc	r3, #4, #4
     4b4:	700b      	strb	r3, [r1, #0]
     4b6:	f7ff ff91 	bl	3dc <mdelay>
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4ba:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
     4be:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
     4c2:	780b      	ldrb	r3, [r1, #0]
     4c4:	780b      	ldrb	r3, [r1, #0]
     4c6:	20c8      	movs	r0, #200	; 0xc8
     4c8:	f36f 1307 	bfc	r3, #4, #4
     4cc:	700b      	strb	r3, [r1, #0]
     4ce:	f7ff ff85 	bl	3dc <mdelay>
	while (1) {
     4d2:	e7e4      	b.n	49e <__pi_syserror+0x12>
     4d4:	00004292 	muleq	r0, r2, r2
     4d8:	40022000 	andmi	r2, r2, r0
     4dc:	20000148 	andcs	r0, r0, r8, asr #2

000004e0 <tci_run_delay_timer>:
void tci_run_delay_timer () {
     4e0:	b510      	push	{r4, lr}
	setdel = __pi_mintk - __pi_old;
     4e2:	4b0b      	ldr	r3, [pc, #44]	; (510 <tci_run_delay_timer+0x30>)
     4e4:	881c      	ldrh	r4, [r3, #0]
     4e6:	4b0b      	ldr	r3, [pc, #44]	; (514 <tci_run_delay_timer+0x34>)
     4e8:	8818      	ldrh	r0, [r3, #0]
     4ea:	4b0b      	ldr	r3, [pc, #44]	; (518 <tci_run_delay_timer+0x38>)
     4ec:	1b00      	subs	r0, r0, r4
     4ee:	b284      	uxth	r4, r0
     4f0:	801c      	strh	r4, [r3, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4f2:	f002 fdcf 	bl	3094 <NOROM_AONRTCCurrent64BitValueGet>
	sti_tim;
     4f6:	2201      	movs	r2, #1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4f8:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     4fa:	4b08      	ldr	r3, [pc, #32]	; (51c <tci_run_delay_timer+0x3c>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4fc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     500:	eb00 1084 	add.w	r0, r0, r4, lsl #6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     504:	6198      	str	r0, [r3, #24]
	sti_tim;
     506:	4b06      	ldr	r3, [pc, #24]	; (520 <tci_run_delay_timer+0x40>)
     508:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
}
     50c:	bd10      	pop	{r4, pc}
     50e:	bf00      	nop
     510:	20000144 	andcs	r0, r0, r4, asr #2
     514:	20000140 	andcs	r0, r0, r0, asr #2
     518:	2000012c 	andcs	r0, r0, ip, lsr #2
     51c:	40092000 	andmi	r2, r9, r0
     520:	43240000 			; <UNDEFINED> instruction: 0x43240000

00000524 <tci_run_auxiliary_timer>:
	cli_aux;
     524:	2300      	movs	r3, #0
void tci_run_auxiliary_timer () {
     526:	b510      	push	{r4, lr}
	cli_aux;
     528:	4c07      	ldr	r4, [pc, #28]	; (548 <tci_run_auxiliary_timer+0x24>)
     52a:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     52e:	f002 fdb1 	bl	3094 <NOROM_AONRTCCurrent64BitValueGet>
     532:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     534:	4b05      	ldr	r3, [pc, #20]	; (54c <tci_run_auxiliary_timer+0x28>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     536:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     53a:	3040      	adds	r0, #64	; 0x40
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     53c:	6218      	str	r0, [r3, #32]
	sti_aux;
     53e:	2301      	movs	r3, #1
     540:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
}
     544:	bd10      	pop	{r4, pc}
     546:	bf00      	nop
     548:	43240000 			; <UNDEFINED> instruction: 0x43240000
     54c:	40092000 	andmi	r2, r9, r0

00000550 <AONRTCIntHandler>:
void AONRTCIntHandler () {
     550:	b510      	push	{r4, lr}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     552:	4b3e      	ldr	r3, [pc, #248]	; (64c <AONRTCIntHandler+0xfc>)
     554:	6858      	ldr	r0, [r3, #4]
     556:	f000 1201 	and.w	r2, r0, #65537	; 0x10001
	if (events & AON_RTC_EVFLAGS_CH2) {
     55a:	03c4      	lsls	r4, r0, #15
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     55c:	605a      	str	r2, [r3, #4]
	if (events & AON_RTC_EVFLAGS_CH2) {
     55e:	d544      	bpl.n	5ea <AONRTCIntHandler+0x9a>
		if (__pi_utims [0] == 0)
     560:	4b3b      	ldr	r3, [pc, #236]	; (650 <AONRTCIntHandler+0x100>)
     562:	6819      	ldr	r1, [r3, #0]
     564:	2900      	cmp	r1, #0
     566:	d056      	beq.n	616 <AONRTCIntHandler+0xc6>
		if (*(__pi_utims [0])) {
     568:	880a      	ldrh	r2, [r1, #0]
     56a:	2a00      	cmp	r2, #0
     56c:	d051      	beq.n	612 <AONRTCIntHandler+0xc2>
			(*(__pi_utims [0]))--;
     56e:	3a01      	subs	r2, #1
     570:	800a      	strh	r2, [r1, #0]
			aux_timer_inactive = 0;
     572:	2200      	movs	r2, #0
		if (__pi_utims [1] == 0)
     574:	685c      	ldr	r4, [r3, #4]
     576:	b194      	cbz	r4, 59e <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [1])) {
     578:	8821      	ldrh	r1, [r4, #0]
     57a:	b111      	cbz	r1, 582 <AONRTCIntHandler+0x32>
			aux_timer_inactive = 0;
     57c:	2200      	movs	r2, #0
			(*(__pi_utims [1]))--;
     57e:	3901      	subs	r1, #1
     580:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [2] == 0)
     582:	689c      	ldr	r4, [r3, #8]
     584:	b15c      	cbz	r4, 59e <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [2])) {
     586:	8821      	ldrh	r1, [r4, #0]
     588:	b111      	cbz	r1, 590 <AONRTCIntHandler+0x40>
			aux_timer_inactive = 0;
     58a:	2200      	movs	r2, #0
			(*(__pi_utims [2]))--;
     58c:	3901      	subs	r1, #1
     58e:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [3] != 0) {
     590:	68d9      	ldr	r1, [r3, #12]
     592:	b121      	cbz	r1, 59e <AONRTCIntHandler+0x4e>
			if (*(__pi_utims [3])) {
     594:	880b      	ldrh	r3, [r1, #0]
     596:	b113      	cbz	r3, 59e <AONRTCIntHandler+0x4e>
				aux_timer_inactive = 0;
     598:	2200      	movs	r2, #0
				(*(__pi_utims [3]))--;
     59a:	3b01      	subs	r3, #1
     59c:	800b      	strh	r3, [r1, #0]
/* ==================================================================== */
/* Copyright (C) Olsonet Communications, 2002 - 2006                    */
/* All rights reserved.                                                 */
/* ==================================================================== */

	if (__pi_systat.ledsts) {
     59e:	4b2d      	ldr	r3, [pc, #180]	; (654 <AONRTCIntHandler+0x104>)
     5a0:	7819      	ldrb	r1, [r3, #0]
     5a2:	0909      	lsrs	r1, r1, #4
     5a4:	d04c      	beq.n	640 <AONRTCIntHandler+0xf0>
		// Some leds are supposed to blink
		if (__pi_systat.ledblc++ == 0) {
     5a6:	7859      	ldrb	r1, [r3, #1]
     5a8:	1c4a      	adds	r2, r1, #1
     5aa:	b2d2      	uxtb	r2, r2
     5ac:	705a      	strb	r2, [r3, #1]
     5ae:	b9e1      	cbnz	r1, 5ea <AONRTCIntHandler+0x9a>
			if (__pi_systat.ledblk) {
     5b0:	781a      	ldrb	r2, [r3, #0]
     5b2:	f012 0f08 	tst.w	r2, #8
				if (__pi_systat.ledsts & 0x1)
     5b6:	781a      	ldrb	r2, [r3, #0]
			if (__pi_systat.ledblk) {
     5b8:	d02f      	beq.n	61a <AONRTCIntHandler+0xca>
				if (__pi_systat.ledsts & 0x1)
     5ba:	06d1      	lsls	r1, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     5bc:	bf42      	ittt	mi
     5be:	2140      	movmi	r1, #64	; 0x40
     5c0:	4a25      	ldrmi	r2, [pc, #148]	; (658 <AONRTCIntHandler+0x108>)
     5c2:	f8c2 1090 	strmi.w	r1, [r2, #144]	; 0x90
					LED0_ON;
				if (__pi_systat.ledsts & 0x2)
     5c6:	781a      	ldrb	r2, [r3, #0]
     5c8:	0692      	lsls	r2, r2, #26
     5ca:	bf42      	ittt	mi
     5cc:	2180      	movmi	r1, #128	; 0x80
     5ce:	4a22      	ldrmi	r2, [pc, #136]	; (658 <AONRTCIntHandler+0x108>)
     5d0:	f8c2 1090 	strmi.w	r1, [r2, #144]	; 0x90
					LED1_ON;
				if (__pi_systat.ledsts & 0x4)
     5d4:	781a      	ldrb	r2, [r3, #0]
					LED2_ON;
				if (__pi_systat.ledsts & 0x8)
     5d6:	781a      	ldrb	r2, [r3, #0]
					LED3_ON;
				__pi_systat.ledblk = 0;
     5d8:	781a      	ldrb	r2, [r3, #0]
     5da:	f36f 02c3 	bfc	r2, #3, #1
					LED1_OFF;
				if (__pi_systat.ledsts & 0x4)
					LED2_OFF;
				if (__pi_systat.ledsts & 0x8)
					LED3_OFF;
				__pi_systat.ledblk = 1;
     5de:	701a      	strb	r2, [r3, #0]
			}
			if (__pi_systat.fstblk)
     5e0:	781a      	ldrb	r2, [r3, #0]
     5e2:	0752      	lsls	r2, r2, #29
     5e4:	d501      	bpl.n	5ea <AONRTCIntHandler+0x9a>
				__pi_systat.ledblc = 200;
     5e6:	22c8      	movs	r2, #200	; 0xc8
     5e8:	705a      	strb	r2, [r3, #1]
	if (events & AON_RTC_EVFLAGS_CH0) {
     5ea:	07c3      	lsls	r3, r0, #31
     5ec:	d510      	bpl.n	610 <AONRTCIntHandler+0xc0>
		cli_tim;
     5ee:	2100      	movs	r1, #0
     5f0:	4b1a      	ldr	r3, [pc, #104]	; (65c <AONRTCIntHandler+0x10c>)
		__pi_new += setdel;
     5f2:	4a1b      	ldr	r2, [pc, #108]	; (660 <AONRTCIntHandler+0x110>)
     5f4:	481b      	ldr	r0, [pc, #108]	; (664 <AONRTCIntHandler+0x114>)
		cli_tim;
     5f6:	f8c3 1280 	str.w	r1, [r3, #640]	; 0x280
		__pi_new += setdel;
     5fa:	8803      	ldrh	r3, [r0, #0]
     5fc:	8814      	ldrh	r4, [r2, #0]
		setdel = 0;
     5fe:	8011      	strh	r1, [r2, #0]
		__pi_new += setdel;
     600:	4423      	add	r3, r4
		RISE_N_SHINE;
     602:	4a14      	ldr	r2, [pc, #80]	; (654 <AONRTCIntHandler+0x104>)
		__pi_new += setdel;
     604:	b29b      	uxth	r3, r3
     606:	8003      	strh	r3, [r0, #0]
		RISE_N_SHINE;
     608:	7813      	ldrb	r3, [r2, #0]
     60a:	f043 0302 	orr.w	r3, r3, #2
     60e:	7013      	strb	r3, [r2, #0]
}
     610:	bd10      	pop	{r4, pc}
		aux_timer_inactive = 1;
     612:	2201      	movs	r2, #1
     614:	e7ae      	b.n	574 <AONRTCIntHandler+0x24>
     616:	2201      	movs	r2, #1
     618:	e7c1      	b.n	59e <AONRTCIntHandler+0x4e>
				if (__pi_systat.ledsts & 0x1)
     61a:	06d4      	lsls	r4, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     61c:	bf42      	ittt	mi
     61e:	2140      	movmi	r1, #64	; 0x40
     620:	4a0d      	ldrmi	r2, [pc, #52]	; (658 <AONRTCIntHandler+0x108>)
     622:	f8c2 10a0 	strmi.w	r1, [r2, #160]	; 0xa0
				if (__pi_systat.ledsts & 0x2)
     626:	781a      	ldrb	r2, [r3, #0]
     628:	0691      	lsls	r1, r2, #26
     62a:	bf42      	ittt	mi
     62c:	2180      	movmi	r1, #128	; 0x80
     62e:	4a0a      	ldrmi	r2, [pc, #40]	; (658 <AONRTCIntHandler+0x108>)
     630:	f8c2 10a0 	strmi.w	r1, [r2, #160]	; 0xa0
				if (__pi_systat.ledsts & 0x4)
     634:	781a      	ldrb	r2, [r3, #0]
				if (__pi_systat.ledsts & 0x8)
     636:	781a      	ldrb	r2, [r3, #0]
				__pi_systat.ledblk = 1;
     638:	781a      	ldrb	r2, [r3, #0]
     63a:	f042 0208 	orr.w	r2, r2, #8
     63e:	e7ce      	b.n	5de <AONRTCIntHandler+0x8e>
		if (aux_timer_inactive) {
     640:	2a00      	cmp	r2, #0
     642:	d0d2      	beq.n	5ea <AONRTCIntHandler+0x9a>
			cli_aux;
     644:	4b05      	ldr	r3, [pc, #20]	; (65c <AONRTCIntHandler+0x10c>)
     646:	f8c3 12c0 	str.w	r1, [r3, #704]	; 0x2c0
     64a:	e7ce      	b.n	5ea <AONRTCIntHandler+0x9a>
     64c:	40092000 	andmi	r2, r9, r0
     650:	20000150 	andcs	r0, r0, r0, asr r1
     654:	20000148 	andcs	r0, r0, r8, asr #2
     658:	40022000 	andmi	r2, r2, r0
     65c:	43240000 			; <UNDEFINED> instruction: 0x43240000
     660:	2000012c 	andcs	r0, r0, ip, lsr #2
     664:	20000142 	andcs	r0, r0, r2, asr #2

00000668 <tci_update_delay_ticks>:
word tci_update_delay_ticks (Boolean force) {
     668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cli_tim;
     66a:	2600      	movs	r6, #0
     66c:	4b0f      	ldr	r3, [pc, #60]	; (6ac <tci_update_delay_ticks+0x44>)
	if (setdel) {
     66e:	4f10      	ldr	r7, [pc, #64]	; (6b0 <tci_update_delay_ticks+0x48>)
	cli_tim;
     670:	f8c3 6280 	str.w	r6, [r3, #640]	; 0x280
	if (setdel) {
     674:	883d      	ldrh	r5, [r7, #0]
     676:	b19d      	cbz	r5, 6a0 <tci_update_delay_ticks+0x38>
		if (force) {
     678:	b1a0      	cbz	r0, 6a4 <tci_update_delay_ticks+0x3c>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     67a:	4b0e      	ldr	r3, [pc, #56]	; (6b4 <tci_update_delay_ticks+0x4c>)
     67c:	699c      	ldr	r4, [r3, #24]
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     67e:	f002 fd09 	bl	3094 <NOROM_AONRTCCurrent64BitValueGet>
     682:	0d80      	lsrs	r0, r0, #22
     684:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     688:	f3c4 148f 	ubfx	r4, r4, #6, #16
				AON_RTC_O_CH0CMP)) - gettav ());
     68c:	b280      	uxth	r0, r0
     68e:	1a24      	subs	r4, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     690:	1b2c      	subs	r4, r5, r4
	return NO;
     692:	4635      	mov	r5, r6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     694:	4b08      	ldr	r3, [pc, #32]	; (6b8 <tci_update_delay_ticks+0x50>)
			setdel = 0;
     696:	803e      	strh	r6, [r7, #0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     698:	881a      	ldrh	r2, [r3, #0]
     69a:	4414      	add	r4, r2
     69c:	b2a4      	uxth	r4, r4
     69e:	801c      	strh	r4, [r3, #0]
}
     6a0:	4628      	mov	r0, r5
     6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sti_tim;
     6a4:	2501      	movs	r5, #1
     6a6:	f8c3 5280 	str.w	r5, [r3, #640]	; 0x280
		return YES;
     6aa:	e7f9      	b.n	6a0 <tci_update_delay_ticks+0x38>
     6ac:	43240000 			; <UNDEFINED> instruction: 0x43240000
     6b0:	2000012c 	andcs	r0, r0, ip, lsr #2
     6b4:	40092000 	andmi	r2, r9, r0
     6b8:	20000142 	andcs	r0, r0, r2, asr #2

000006bc <__pi_uart_setrate>:
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6bc:	b570      	push	{r4, r5, r6, lr}
	UARTDisable (UART0_BASE);
     6be:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
     6c2:	4c0f      	ldr	r4, [pc, #60]	; (700 <__pi_uart_setrate+0x44>)
     6c4:	f8d6 31d0 	ldr.w	r3, [r6, #464]	; 0x1d0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6c8:	4605      	mov	r5, r0
	UARTDisable (UART0_BASE);
     6ca:	68db      	ldr	r3, [r3, #12]
     6cc:	4620      	mov	r0, r4
     6ce:	4798      	blx	r3
	UARTConfigSetExpClk (UART0_BASE,
     6d0:	2264      	movs	r2, #100	; 0x64
     6d2:	f8d6 31d0 	ldr.w	r3, [r6, #464]	; 0x1d0
     6d6:	4620      	mov	r0, r4
     6d8:	685e      	ldr	r6, [r3, #4]
     6da:	436a      	muls	r2, r5
     6dc:	2360      	movs	r3, #96	; 0x60
     6de:	4909      	ldr	r1, [pc, #36]	; (704 <__pi_uart_setrate+0x48>)
     6e0:	47b0      	blx	r6
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
}
     6e4:	2001      	movs	r0, #1
     6e6:	f043 0310 	orr.w	r3, r3, #16
     6ea:	62e3      	str	r3, [r4, #44]	; 0x2c

    //
    // Enable RX, TX, and the UART.
    //
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     6ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
     6ee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     6f2:	f043 0301 	orr.w	r3, r3, #1
     6f6:	6323      	str	r3, [r4, #48]	; 0x30
	urates [0] = rate;
     6f8:	4b03      	ldr	r3, [pc, #12]	; (708 <__pi_uart_setrate+0x4c>)
     6fa:	801d      	strh	r5, [r3, #0]
}
     6fc:	bd70      	pop	{r4, r5, r6, pc}
     6fe:	bf00      	nop
     700:	40001000 	andmi	r1, r0, r0
     704:	02dc6c00 	sbcseq	r6, ip, #0, 24
     708:	20000134 	andcs	r0, r0, r4, lsr r1

0000070c <reinit_uart>:
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     70c:	4b07      	ldr	r3, [pc, #28]	; (72c <reinit_uart+0x20>)
	__pi_uart_setrate (urates [0], __pi_uart);
     70e:	4908      	ldr	r1, [pc, #32]	; (730 <reinit_uart+0x24>)
     710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     712:	f042 0210 	orr.w	r2, r2, #16
     716:	62da      	str	r2, [r3, #44]	; 0x2c
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     718:	2212      	movs	r2, #18
     71a:	635a      	str	r2, [r3, #52]	; 0x34
    //
    // Check the arguments.
    //
    ASSERT( UARTBaseValid( ui32Base ));

    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     71c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
     71e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
     722:	631a      	str	r2, [r3, #48]	; 0x30
     724:	4b03      	ldr	r3, [pc, #12]	; (734 <reinit_uart+0x28>)
     726:	8818      	ldrh	r0, [r3, #0]
     728:	f7ff bfc8 	b.w	6bc <__pi_uart_setrate>
     72c:	40001000 	andmi	r1, r0, r0
     730:	20000124 	andcs	r0, r0, r4, lsr #2
     734:	20000134 	andcs	r0, r0, r4, lsr r1

00000738 <ioreq_uart_a>:
	switch (operation) {
     738:	3001      	adds	r0, #1
static int ioreq_uart_a (int operation, char *buf, int len) {
     73a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     73e:	460d      	mov	r5, r1
     740:	4614      	mov	r4, r2
	switch (operation) {
     742:	2803      	cmp	r0, #3
     744:	d86a      	bhi.n	81c <ioreq_uart_a+0xe4>
     746:	e8df f000 	tbb	[pc, r0]
     74a:	5643104d 	strbpl	r1, [r3], -sp, asr #32
				*buf++ = uart_a_read;
     74e:	683b      	ldr	r3, [r7, #0]
				len--;
     750:	3e01      	subs	r6, #1
				*buf++ = uart_a_read;
     752:	f805 3b01 	strb.w	r3, [r5], #1
			while (len && uart_a_char_available) {
     756:	b116      	cbz	r6, 75e <ioreq_uart_a+0x26>
     758:	69bb      	ldr	r3, [r7, #24]
     75a:	06d8      	lsls	r0, r3, #27
     75c:	d5f7      	bpl.n	74e <ioreq_uart_a+0x16>
			if (len != operation) {
     75e:	42a6      	cmp	r6, r4
     760:	d008      	beq.n	774 <ioreq_uart_a+0x3c>
				return operation - len;
     762:	1ba4      	subs	r4, r4, r6
}
     764:	4620      	mov	r0, r4
     766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (operation) {
     76a:	4616      	mov	r6, r2
			uart_a_disable_int;
     76c:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
			if (uart_a_char_available) {
     770:	4f2c      	ldr	r7, [pc, #176]	; (824 <ioreq_uart_a+0xec>)
     772:	e7f0      	b.n	756 <ioreq_uart_a+0x1e>
			uart_a_disable_int;
     774:	f8d8 31b0 	ldr.w	r3, [r8, #432]	; 0x1b0
     778:	2015      	movs	r0, #21
     77a:	695b      	ldr	r3, [r3, #20]
     77c:	4798      	blx	r3
			if (uart_a_char_available) {
     77e:	69bb      	ldr	r3, [r7, #24]
     780:	06d9      	lsls	r1, r3, #27
     782:	d405      	bmi.n	790 <ioreq_uart_a+0x58>
				uart_a_enable_int;
     784:	f8d8 31b0 	ldr.w	r3, [r8, #432]	; 0x1b0
     788:	2015      	movs	r0, #21
     78a:	691b      	ldr	r3, [r3, #16]
     78c:	4798      	blx	r3
				goto Redo_rx;
     78e:	e7e2      	b.n	756 <ioreq_uart_a+0x1e>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     790:	4a25      	ldr	r2, [pc, #148]	; (828 <ioreq_uart_a+0xf0>)
     792:	7993      	ldrb	r3, [r2, #6]
     794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			return -2;
     798:	f06f 0401 	mvn.w	r4, #1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     79c:	7193      	strb	r3, [r2, #6]
			return -2;
     79e:	e7e1      	b.n	764 <ioreq_uart_a+0x2c>
				uart_a_write (*buf);
     7a0:	f815 3b01 	ldrb.w	r3, [r5], #1
				len--;
     7a4:	3e01      	subs	r6, #1
				uart_a_write (*buf);
     7a6:	603b      	str	r3, [r7, #0]
			while (len && uart_a_room_in_tx) {
     7a8:	b116      	cbz	r6, 7b0 <ioreq_uart_a+0x78>
     7aa:	69bb      	ldr	r3, [r7, #24]
     7ac:	069a      	lsls	r2, r3, #26
     7ae:	d5f7      	bpl.n	7a0 <ioreq_uart_a+0x68>
			if (len != operation) {
     7b0:	42a6      	cmp	r6, r4
     7b2:	d1d6      	bne.n	762 <ioreq_uart_a+0x2a>
			uart_a_disable_int;
     7b4:	f8d8 31b0 	ldr.w	r3, [r8, #432]	; 0x1b0
     7b8:	2015      	movs	r0, #21
     7ba:	695b      	ldr	r3, [r3, #20]
     7bc:	4798      	blx	r3
			if (uart_a_room_in_tx) {
     7be:	69bb      	ldr	r3, [r7, #24]
     7c0:	069b      	lsls	r3, r3, #26
     7c2:	d40a      	bmi.n	7da <ioreq_uart_a+0xa2>
				uart_a_enable_int;
     7c4:	f8d8 31b0 	ldr.w	r3, [r8, #432]	; 0x1b0
     7c8:	2015      	movs	r0, #21
     7ca:	691b      	ldr	r3, [r3, #16]
     7cc:	4798      	blx	r3
				goto Redo_tx;
     7ce:	e7eb      	b.n	7a8 <ioreq_uart_a+0x70>
	switch (operation) {
     7d0:	4616      	mov	r6, r2
			uart_a_disable_int;
     7d2:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
			if (uart_a_room_in_tx) {
     7d6:	4f13      	ldr	r7, [pc, #76]	; (824 <ioreq_uart_a+0xec>)
     7d8:	e7e6      	b.n	7a8 <ioreq_uart_a+0x70>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7da:	4a13      	ldr	r2, [pc, #76]	; (828 <ioreq_uart_a+0xf0>)
     7dc:	7993      	ldrb	r3, [r2, #6]
     7de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     7e2:	e7d9      	b.n	798 <ioreq_uart_a+0x60>
			uart_a_enable_int;
     7e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     7e8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
     7ec:	2015      	movs	r0, #21
     7ee:	691b      	ldr	r3, [r3, #16]
     7f0:	4798      	blx	r3
			return 0;
     7f2:	2400      	movs	r4, #0
     7f4:	e7b6      	b.n	764 <ioreq_uart_a+0x2c>
			if (len == UART_CNTRL_SETRATE) {
     7f6:	2a01      	cmp	r2, #1
     7f8:	d109      	bne.n	80e <ioreq_uart_a+0xd6>
				if (__pi_uart_setrate (*((word*)buf),
     7fa:	490b      	ldr	r1, [pc, #44]	; (828 <ioreq_uart_a+0xf0>)
     7fc:	8828      	ldrh	r0, [r5, #0]
     7fe:	f7ff ff5d 	bl	6bc <__pi_uart_setrate>
     802:	2800      	cmp	r0, #0
     804:	d1ae      	bne.n	764 <ioreq_uart_a+0x2c>
				syserror (EREQPAR, "uar");
     806:	2003      	movs	r0, #3
     808:	4908      	ldr	r1, [pc, #32]	; (82c <ioreq_uart_a+0xf4>)
			syserror (ENOOPER, "uai");
     80a:	f7ff fe3f 	bl	48c <__pi_syserror>
			if (len == UART_CNTRL_GETRATE) {
     80e:	2a02      	cmp	r2, #2
     810:	d104      	bne.n	81c <ioreq_uart_a+0xe4>
	return urates [0];
     812:	4b07      	ldr	r3, [pc, #28]	; (830 <ioreq_uart_a+0xf8>)
				return 1;
     814:	2401      	movs	r4, #1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     816:	881b      	ldrh	r3, [r3, #0]
     818:	800b      	strh	r3, [r1, #0]
				return 1;
     81a:	e7a3      	b.n	764 <ioreq_uart_a+0x2c>
			syserror (ENOOPER, "uai");
     81c:	2002      	movs	r0, #2
     81e:	4905      	ldr	r1, [pc, #20]	; (834 <ioreq_uart_a+0xfc>)
     820:	e7f3      	b.n	80a <ioreq_uart_a+0xd2>
     822:	bf00      	nop
     824:	40001000 	andmi	r1, r0, r0
     828:	20000124 	andcs	r0, r0, r4, lsr #2
     82c:	000042a1 	andeq	r4, r0, r1, lsr #5
     830:	20000134 	andcs	r0, r0, r4, lsr r1
     834:	000042a5 	andeq	r4, r0, r5, lsr #5

00000838 <UART0IntHandler>:
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     838:	f240 72f2 	movw	r2, #2034	; 0x7f2
}

void UART0IntHandler () {
     83c:	b530      	push	{r4, r5, lr}
     83e:	4b29      	ldr	r3, [pc, #164]	; (8e4 <UART0IntHandler+0xac>)
     840:	645a      	str	r2, [r3, #68]	; 0x44

	uart_a_clear_interrupts;

	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     842:	699b      	ldr	r3, [r3, #24]
     844:	06dc      	lsls	r4, r3, #27
     846:	d423      	bmi.n	890 <UART0IntHandler+0x58>
     848:	4b27      	ldr	r3, [pc, #156]	; (8e8 <UART0IntHandler+0xb0>)
     84a:	799a      	ldrb	r2, [r3, #6]
     84c:	0610      	lsls	r0, r2, #24
     84e:	d51f      	bpl.n	890 <UART0IntHandler+0x58>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     850:	799a      	ldrb	r2, [r3, #6]
     852:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     856:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     858:	4a24      	ldr	r2, [pc, #144]	; (8ec <UART0IntHandler+0xb4>)
     85a:	7813      	ldrb	r3, [r2, #0]
     85c:	f043 0302 	orr.w	r3, r3, #2
     860:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, READ));
     862:	4b23      	ldr	r3, [pc, #140]	; (8f0 <UART0IntHandler+0xb8>)
     864:	681a      	ldr	r2, [r3, #0]
     866:	b19a      	cbz	r2, 890 <UART0IntHandler+0x58>
     868:	4610      	mov	r0, r2
     86a:	2300      	movs	r3, #0
     86c:	f830 1b10 	ldrh.w	r1, [r0], #16
     870:	f001 0107 	and.w	r1, r1, #7
     874:	4299      	cmp	r1, r3
     876:	dd09      	ble.n	88c <UART0IntHandler+0x54>
     878:	f850 4033 	ldr.w	r4, [r0, r3, lsl #3]
     87c:	3301      	adds	r3, #1
     87e:	f514 7f81 	cmn.w	r4, #258	; 0x102
     882:	d1f7      	bne.n	874 <UART0IntHandler+0x3c>
     884:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     888:	889b      	ldrh	r3, [r3, #4]
     88a:	8013      	strh	r3, [r2, #0]
     88c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     88e:	e7ea      	b.n	866 <UART0IntHandler+0x2e>
	}

	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     890:	4b14      	ldr	r3, [pc, #80]	; (8e4 <UART0IntHandler+0xac>)
     892:	699b      	ldr	r3, [r3, #24]
     894:	0699      	lsls	r1, r3, #26
     896:	d424      	bmi.n	8e2 <UART0IntHandler+0xaa>
     898:	4b13      	ldr	r3, [pc, #76]	; (8e8 <UART0IntHandler+0xb0>)
     89a:	799a      	ldrb	r2, [r3, #6]
     89c:	0652      	lsls	r2, r2, #25
     89e:	d520      	bpl.n	8e2 <UART0IntHandler+0xaa>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
		RISE_N_SHINE;
		i_trigger (devevent (UART_A, WRITE));
     8a0:	f46f 7480 	mvn.w	r4, #256	; 0x100
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     8a4:	799a      	ldrb	r2, [r3, #6]
     8a6:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
     8aa:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     8ac:	4a0f      	ldr	r2, [pc, #60]	; (8ec <UART0IntHandler+0xb4>)
     8ae:	7813      	ldrb	r3, [r2, #0]
     8b0:	f043 0302 	orr.w	r3, r3, #2
     8b4:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, WRITE));
     8b6:	4b0e      	ldr	r3, [pc, #56]	; (8f0 <UART0IntHandler+0xb8>)
     8b8:	681a      	ldr	r2, [r3, #0]
     8ba:	b192      	cbz	r2, 8e2 <UART0IntHandler+0xaa>
     8bc:	4610      	mov	r0, r2
     8be:	2300      	movs	r3, #0
     8c0:	f830 1b10 	ldrh.w	r1, [r0], #16
     8c4:	f001 0107 	and.w	r1, r1, #7
     8c8:	4299      	cmp	r1, r3
     8ca:	dd08      	ble.n	8de <UART0IntHandler+0xa6>
     8cc:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     8d0:	3301      	adds	r3, #1
     8d2:	42a5      	cmp	r5, r4
     8d4:	d1f8      	bne.n	8c8 <UART0IntHandler+0x90>
     8d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     8da:	889b      	ldrh	r3, [r3, #4]
     8dc:	8013      	strh	r3, [r2, #0]
     8de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     8e0:	e7eb      	b.n	8ba <UART0IntHandler+0x82>
	}

	RTNI;
}
     8e2:	bd30      	pop	{r4, r5, pc}
     8e4:	40001000 	andmi	r1, r0, r0
     8e8:	20000124 	andcs	r0, r0, r4, lsr #2
     8ec:	20000148 	andcs	r0, r0, r8, asr #2
     8f0:	20000138 	andcs	r0, r0, r8, lsr r1

000008f4 <__buttons_setirq>:

// ============================================================================

#ifdef	BUTTON_LIST

void __buttons_setirq (int val) {
     8f4:	b570      	push	{r4, r5, r6, lr}
     8f6:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the event status for the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     8f8:	2101      	movs	r1, #1
	int i;
	lword bn;

	cli;
	for (i = 0; i < N_BUTTONS; i++) {
		bn = BUTTON_GPIO (__button_list [i]);
     8fa:	4e0d      	ldr	r6, [pc, #52]	; (930 <__buttons_setirq+0x3c>)
     8fc:	4d0d      	ldr	r5, [pc, #52]	; (934 <__buttons_setirq+0x40>)
     8fe:	8833      	ldrh	r3, [r6, #0]
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     900:	4c0d      	ldr	r4, [pc, #52]	; (938 <__buttons_setirq+0x44>)
		bn = BUTTON_GPIO (__button_list [i]);
     902:	0a1b      	lsrs	r3, r3, #8
     904:	fa01 f203 	lsl.w	r2, r1, r3
     908:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     90c:	01da      	lsls	r2, r3, #7
		bn = BUTTON_GPIO (__button_list [i]);
     90e:	8873      	ldrh	r3, [r6, #2]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     910:	f102 7281 	add.w	r2, r2, #16908288	; 0x1020000
		bn = BUTTON_GPIO (__button_list [i]);
     914:	0a1b      	lsrs	r3, r3, #8
     916:	4099      	lsls	r1, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     918:	01db      	lsls	r3, r3, #7
     91a:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     91e:	4322      	orrs	r2, r4
     920:	4323      	orrs	r3, r4
     922:	6010      	str	r0, [r2, #0]
     924:	f8c5 10e0 	str.w	r1, [r5, #224]	; 0xe0
     928:	6018      	str	r0, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
     92a:	b662      	cpsie	i
			val;
	}
	sti;
}
     92c:	bd70      	pop	{r4, r5, r6, pc}
     92e:	bf00      	nop
     930:	0000442e 	andeq	r4, r0, lr, lsr #8
     934:	40022000 	andmi	r2, r2, r0
     938:	42000048 	andmi	r0, r0, #72	; 0x48

0000093c <__pinlist_setirq>:

#endif

#ifdef	INPUT_PIN_LIST

void __pinlist_setirq (int val) {
     93c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
     93e:	b672      	cpsid	i

	int i;
	lword bn;

	cli;
	for (i = 0; i < N_PINLIST; i++) {
     940:	2200      	movs	r2, #0
     942:	2601      	movs	r6, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     944:	4f09      	ldr	r7, [pc, #36]	; (96c <__pinlist_setirq+0x30>)
     946:	4c0a      	ldr	r4, [pc, #40]	; (970 <__pinlist_setirq+0x34>)
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     948:	490a      	ldr	r1, [pc, #40]	; (974 <__pinlist_setirq+0x38>)
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     94a:	5cbb      	ldrb	r3, [r7, r2]
	for (i = 0; i < N_PINLIST; i++) {
     94c:	3201      	adds	r2, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     94e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     952:	fa06 f503 	lsl.w	r5, r6, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     956:	01db      	lsls	r3, r3, #7
     958:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     95c:	430b      	orrs	r3, r1
	for (i = 0; i < N_PINLIST; i++) {
     95e:	2a04      	cmp	r2, #4
     960:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     964:	6018      	str	r0, [r3, #0]
	for (i = 0; i < N_PINLIST; i++) {
     966:	d1f0      	bne.n	94a <__pinlist_setirq+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
     968:	b662      	cpsie	i
			val;
	}
	sti;
}
     96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     96c:	00004429 	andeq	r4, r0, r9, lsr #8
     970:	40022000 	andmi	r2, r2, r0
     974:	42000048 	andmi	r0, r0, #72	; 0x48

00000978 <GPIOIntHandler>:
void GPIOIntHandler () {
     978:	b538      	push	{r3, r4, r5, lr}
if (buttons_int) {
     97a:	4b25      	ldr	r3, [pc, #148]	; (a10 <GPIOIntHandler+0x98>)
     97c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
     980:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
     984:	d01e      	beq.n	9c4 <GPIOIntHandler+0x4c>
	buttons_disable ();
     986:	2000      	movs	r0, #0
     988:	f7ff ffb4 	bl	8f4 <__buttons_setirq>
	i_trigger ((aword)&__button_list);
     98c:	4b21      	ldr	r3, [pc, #132]	; (a14 <GPIOIntHandler+0x9c>)
     98e:	4c22      	ldr	r4, [pc, #136]	; (a18 <GPIOIntHandler+0xa0>)
     990:	681a      	ldr	r2, [r3, #0]
     992:	b192      	cbz	r2, 9ba <GPIOIntHandler+0x42>
     994:	4610      	mov	r0, r2
     996:	2300      	movs	r3, #0
     998:	f830 1b10 	ldrh.w	r1, [r0], #16
     99c:	f001 0107 	and.w	r1, r1, #7
     9a0:	4299      	cmp	r1, r3
     9a2:	dd08      	ble.n	9b6 <GPIOIntHandler+0x3e>
     9a4:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     9a8:	3301      	adds	r3, #1
     9aa:	42a5      	cmp	r5, r4
     9ac:	d1f8      	bne.n	9a0 <GPIOIntHandler+0x28>
     9ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     9b2:	889b      	ldrh	r3, [r3, #4]
     9b4:	8013      	strh	r3, [r2, #0]
     9b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     9b8:	e7eb      	b.n	992 <GPIOIntHandler+0x1a>
	RISE_N_SHINE;
     9ba:	4a18      	ldr	r2, [pc, #96]	; (a1c <GPIOIntHandler+0xa4>)
     9bc:	7813      	ldrb	r3, [r2, #0]
     9be:	f043 0302 	orr.w	r3, r3, #2
     9c2:	7013      	strb	r3, [r2, #0]
if (pin_sensor_int) {
     9c4:	4b12      	ldr	r3, [pc, #72]	; (a10 <GPIOIntHandler+0x98>)
     9c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
     9ca:	f013 5ff0 	tst.w	r3, #503316480	; 0x1e000000
     9ce:	d01d      	beq.n	a0c <GPIOIntHandler+0x94>
	i_trigger ((aword)(&__input_pins));
     9d0:	4b10      	ldr	r3, [pc, #64]	; (a14 <GPIOIntHandler+0x9c>)
     9d2:	4c13      	ldr	r4, [pc, #76]	; (a20 <GPIOIntHandler+0xa8>)
     9d4:	6818      	ldr	r0, [r3, #0]
     9d6:	b190      	cbz	r0, 9fe <GPIOIntHandler+0x86>
     9d8:	4601      	mov	r1, r0
     9da:	2300      	movs	r3, #0
     9dc:	f831 2b10 	ldrh.w	r2, [r1], #16
     9e0:	f002 0207 	and.w	r2, r2, #7
     9e4:	429a      	cmp	r2, r3
     9e6:	dd08      	ble.n	9fa <GPIOIntHandler+0x82>
     9e8:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
     9ec:	3301      	adds	r3, #1
     9ee:	42a5      	cmp	r5, r4
     9f0:	d1f8      	bne.n	9e4 <GPIOIntHandler+0x6c>
     9f2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
     9f6:	889b      	ldrh	r3, [r3, #4]
     9f8:	8003      	strh	r3, [r0, #0]
     9fa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     9fc:	e7eb      	b.n	9d6 <GPIOIntHandler+0x5e>
	__pinsen_disable_and_clear;
     9fe:	f7ff ff9d 	bl	93c <__pinlist_setirq>
	RISE_N_SHINE;
     a02:	4a06      	ldr	r2, [pc, #24]	; (a1c <GPIOIntHandler+0xa4>)
     a04:	7813      	ldrb	r3, [r2, #0]
     a06:	f043 0302 	orr.w	r3, r3, #2
     a0a:	7013      	strb	r3, [r2, #0]
}
     a0c:	bd38      	pop	{r3, r4, r5, pc}
     a0e:	bf00      	nop
     a10:	40022000 	andmi	r2, r2, r0
     a14:	20000138 	andcs	r0, r0, r8, lsr r1
     a18:	0000442e 	andeq	r4, r0, lr, lsr #8
     a1c:	20000148 	andcs	r0, r0, r8, asr #2
     a20:	00004429 	andeq	r4, r0, r9, lsr #8

00000a24 <system_init>:
#endif

// ============================================================================
// ============================================================================

void system_init () {
     a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	__pi_ondomain (PRCM_DOMAIN_PERIPH);

	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a28:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a2c:	2004      	movs	r0, #4
     a2e:	f7ff fceb 	bl	408 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a32:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
     a36:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     a3a:	69db      	ldr	r3, [r3, #28]
     a3c:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a3e:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
     a42:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     a48:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a4a:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
     a4e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
PRCMLoadSet(void)
{
    //
    // Enable the update of all load related registers.
    //
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a54:	2501      	movs	r5, #1
     a56:	4798      	blx	r3
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a58:	2000      	movs	r0, #0
     a5a:	4b50      	ldr	r3, [pc, #320]	; (b9c <system_init+0x178>)
     a5c:	4f50      	ldr	r7, [pc, #320]	; (ba0 <system_init+0x17c>)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a5e:	f8df c144 	ldr.w	ip, [pc, #324]	; ba4 <system_init+0x180>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a62:	f8df e144 	ldr.w	lr, [pc, #324]	; ba8 <system_init+0x184>
     a66:	4c51      	ldr	r4, [pc, #324]	; (bac <system_init+0x188>)
     a68:	629d      	str	r5, [r3, #40]	; 0x28
		pin = (port_confs [i] >> 19) & 0x1f;
     a6a:	f857 2b04 	ldr.w	r2, [r7], #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a6e:	3001      	adds	r0, #1
		pin = (port_confs [i] >> 19) & 0x1f;
     a70:	f3c2 43c4 	ubfx	r3, r2, #19, #5
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a74:	0099      	lsls	r1, r3, #2
     a76:	f101 4680 	add.w	r6, r1, #1073741824	; 0x40000000
     a7a:	f506 2601 	add.w	r6, r6, #528384	; 0x81000
     a7e:	ea02 080c 	and.w	r8, r2, ip
     a82:	f8c6 8000 	str.w	r8, [r6]
		if (port_confs [i] & 0x80)
     a86:	0616      	lsls	r6, r2, #24
     a88:	bf44      	itt	mi
     a8a:	ea41 010e 	orrmi.w	r1, r1, lr
     a8e:	600d      	strmi	r5, [r1, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a90:	fa05 f303 	lsl.w	r3, r5, r3
		if (port_confs [i] & 0x40)
     a94:	0652      	lsls	r2, r2, #25
     a96:	bf4c      	ite	mi
     a98:	f8c4 3090 	strmi.w	r3, [r4, #144]	; 0x90
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a9c:	f8c4 30a0 	strpl.w	r3, [r4, #160]	; 0xa0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     aa0:	2811      	cmp	r0, #17
     aa2:	d1e2      	bne.n	a6a <system_init+0x46>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     aa4:	2540      	movs	r5, #64	; 0x40
     aa6:	2680      	movs	r6, #128	; 0x80

	// Initialize DIO ports
	port_config ();

#if	LEDS_DRIVER
	all_leds_blink;
     aa8:	4941      	ldr	r1, [pc, #260]	; (bb0 <system_init+0x18c>)
     aaa:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
     aae:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
     ab2:	780b      	ldrb	r3, [r1, #0]
     ab4:	780b      	ldrb	r3, [r1, #0]
     ab6:	20c8      	movs	r0, #200	; 0xc8
     ab8:	f36f 1307 	bfc	r3, #4, #4
     abc:	700b      	strb	r3, [r1, #0]
     abe:	f7ff fc8d 	bl	3dc <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac2:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
     ac6:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
     aca:	780b      	ldrb	r3, [r1, #0]
     acc:	780b      	ldrb	r3, [r1, #0]
//
//*****************************************************************************
__STATIC_INLINE void
AONRTCIncValueCh2Set(uint32_t ui32IncValue)
{
    HWREG(AON_RTC_BASE + AON_RTC_O_CH2CMPINC) = ui32IncValue;
     ace:	4e39      	ldr	r6, [pc, #228]	; (bb4 <system_init+0x190>)
     ad0:	f36f 1307 	bfc	r3, #4, #4
     ad4:	20c8      	movs	r0, #200	; 0xc8
     ad6:	700b      	strb	r3, [r1, #0]
     ad8:	f7ff fc80 	bl	3dc <mdelay>
     adc:	6275      	str	r5, [r6, #36]	; 0x24

	// The autoincrement value on channel 2 set to 1 msec
	AONRTCIncValueCh2Set (TCI_TINCR (1));
	// Enable continuous operation of channel 2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CHCTL,
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ade:	2501      	movs	r5, #1
		// For the radio
		AON_RTC_CTL_RTC_UPD_EN |
		AON_RTC_CTL_EN;

	// Enable RTC interrupts
	IntEnable (INT_AON_RTC_COMB);
     ae0:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ae4:	4b34      	ldr	r3, [pc, #208]	; (bb8 <system_init+0x194>)
	IntEnable (INT_AON_RTC_COMB);
     ae6:	2014      	movs	r0, #20
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ae8:	f8c3 52c8 	str.w	r5, [r3, #712]	; 0x2c8
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     aec:	4b33      	ldr	r3, [pc, #204]	; (bbc <system_init+0x198>)
     aee:	6033      	str	r3, [r6, #0]
	IntEnable (INT_AON_RTC_COMB);
     af0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     af4:	691b      	ldr	r3, [r3, #16]
     af6:	4798      	blx	r3

	// Initialize the memory allocator
	__pi_malloc_init ();
     af8:	f000 fbc0 	bl	127c <__pi_malloc_init>

	// Enable GPIO interrupts
	IntEnable (INT_AON_GPIO_EDGE);
     afc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     b00:	2010      	movs	r0, #16
     b02:	691b      	ldr	r3, [r3, #16]
     b04:	4798      	blx	r3
		EMERGENCY_STARTUP_ACTION;
	}
#endif

#ifdef	NEED_SERIAL_DOMAIN
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b06:	2002      	movs	r0, #2
     b08:	f7ff fc7e 	bl	408 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b0c:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
     b10:	f44f 7000 	mov.w	r0, #512	; 0x200
     b14:	69db      	ldr	r3, [r3, #28]
     b16:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b18:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
     b1c:	f44f 7000 	mov.w	r0, #512	; 0x200
     b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     b22:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b24:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
     b28:	f44f 7000 	mov.w	r0, #512	; 0x200
     b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     b2e:	4798      	blx	r3
	urates [0] = UART_RATE / 100;
     b30:	2260      	movs	r2, #96	; 0x60
     b32:	4b1a      	ldr	r3, [pc, #104]	; (b9c <system_init+0x178>)
     b34:	629d      	str	r5, [r3, #40]	; 0x28
     b36:	4b22      	ldr	r3, [pc, #136]	; (bc0 <system_init+0x19c>)
     b38:	801a      	strh	r2, [r3, #0]
	reinit_uart ();
     b3a:	f7ff fde7 	bl	70c <reinit_uart>
	__pi_init_actuators ();
#endif

#ifdef	EXTRA_INITIALIZERS
	// Extra initialization
	EXTRA_INITIALIZERS;
     b3e:	f001 f929 	bl	1d94 <ee_open>
     b42:	f001 f931 	bl	1da8 <ee_close>
#endif
	// If waking from shutdown, unfreeze the I/O
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b46:	f003 f9c7 	bl	3ed8 <NOROM_SysCtrlResetSourceGet>
     b4a:	2808      	cmp	r0, #8
     b4c:	d118      	bne.n	b80 <system_init+0x15c>
AONIOCFreezeDisable(void)
{
    //
    // Set the AON IOC latches as transparent.
    //
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     b4e:	4b1d      	ldr	r3, [pc, #116]	; (bc4 <system_init+0x1a0>)
     b50:	60dd      	str	r5, [r3, #12]
{
    //
    // Open the IO latches at AON_IOC level and in the padring
    //
    AONIOCFreezeDisable();
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b52:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     b56:	609d      	str	r5, [r3, #8]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b58:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	}

#if	MAX_DEVICES
	for (int i = UART; i < MAX_DEVICES; i++)
		if (devinit [i] . init != NULL)
			devinit [i] . init (devinit [i] . param);
     b5a:	2000      	movs	r0, #0
     b5c:	f7ff fc22 	bl	3a4 <devinit_uart>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b60:	4a19      	ldr	r2, [pc, #100]	; (bc8 <system_init+0x1a4>)
#endif

#ifdef	N_UARTS
	// The same for UART_DRIVER and UART_TCV
	enable_uart_interrupts ();
	IntEnable (INT_UART0_COMB);
     b62:	2015      	movs	r0, #21
     b64:	6b93      	ldr	r3, [r2, #56]	; 0x38
     b66:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     b6a:	6393      	str	r3, [r2, #56]	; 0x38
     b6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     b70:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
     b74:	691b      	ldr	r3, [r3, #16]
     b76:	4798      	blx	r3
#endif
	// Kick the auxiliary timer in case something is needed by the
	// drivers
	tci_run_auxiliary_timer ();
}
     b78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	tci_run_auxiliary_timer ();
     b7c:	f7ff bcd2 	b.w	524 <tci_run_auxiliary_timer>
		diag ("");
     b80:	4812      	ldr	r0, [pc, #72]	; (bcc <system_init+0x1a8>)
     b82:	f000 fc69 	bl	1458 <diag>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     b86:	4812      	ldr	r0, [pc, #72]	; (bd0 <system_init+0x1ac>)
     b88:	f000 fc66 	bl	1458 <diag>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     b8c:	4911      	ldr	r1, [pc, #68]	; (bd4 <system_init+0x1b0>)
		diag ("Leftover RAM: %d bytes",
     b8e:	4812      	ldr	r0, [pc, #72]	; (bd8 <system_init+0x1b4>)
     b90:	f5c1 4198 	rsb	r1, r1, #19456	; 0x4c00
     b94:	b289      	uxth	r1, r1
     b96:	f000 fc5f 	bl	1458 <diag>
     b9a:	e7de      	b.n	b5a <system_init+0x136>
     b9c:	60082000 	andvs	r2, r8, r0
     ba0:	00004310 	andeq	r4, r0, r0, lsl r3
     ba4:	7f077f3f 	svcvc	0x00077f3f
     ba8:	42441a00 	submi	r1, r4, #0, 20
     bac:	40022000 	andmi	r2, r2, r0
     bb0:	20000148 	andcs	r0, r0, r8, asr #2
     bb4:	40092000 	andmi	r2, r9, r0
     bb8:	43240000 			; <UNDEFINED> instruction: 0x43240000
     bbc:	00050003 	andeq	r0, r5, r3
     bc0:	20000134 	andcs	r0, r0, r4, lsr r1
     bc4:	40094000 	andmi	r4, r9, r0
     bc8:	40001000 	andmi	r1, r0, r0
     bcc:	00004193 	muleq	r0, r3, r1
     bd0:	000042a9 	andeq	r4, r0, r9, lsr #5
     bd4:	2000023c 	andcs	r0, r0, ip, lsr r2
     bd8:	000042f5 	strdeq	r4, [r0], -r5

00000bdc <__pi_release>:
	return sc;
}

#endif

__attribute__ ((noreturn)) void __pi_release () {
     bdc:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     be0:	4b87      	ldr	r3, [pc, #540]	; (e00 <__pi_release+0x224>)
     be2:	af00      	add	r7, sp, #0
     be4:	f383 8808 	msr	MSP, r3

	__set_MSP ((lword)(STACK_START));

	check_stack_overflow;
     be8:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     bec:	f8d3 2bfc 	ldr.w	r2, [r3, #3068]	; 0xbfc
     bf0:	4b84      	ldr	r3, [pc, #528]	; (e04 <__pi_release+0x228>)
     bf2:	429a      	cmp	r2, r3
     bf4:	d12a      	bne.n	c4c <__pi_release+0x70>
#endif
	// Catch up with time
	update_n_wake (MAX_WORD, NO);

	// Run the first ready process
	for_all_tasks (__pi_curr) {
     bf6:	f8df 8210 	ldr.w	r8, [pc, #528]	; e08 <__pi_release+0x22c>
	update_n_wake (MAX_WORD, NO);
     bfa:	2100      	movs	r1, #0
     bfc:	f64f 70ff 	movw	r0, #65535	; 0xffff
     c00:	f000 f9dc 	bl	fbc <update_n_wake>
	for_all_tasks (__pi_curr) {
     c04:	4b81      	ldr	r3, [pc, #516]	; (e0c <__pi_release+0x230>)
     c06:	681b      	ldr	r3, [r3, #0]
     c08:	f8c8 3000 	str.w	r3, [r8]
     c0c:	f8d8 3000 	ldr.w	r3, [r8]
     c10:	bb03      	cbnz	r3, c54 <__pi_release+0x78>
	entropy++;
#endif

#else	/* NOT SPIN_WHEN_HALTED */

	__SLEEP;
     c12:	4c7f      	ldr	r4, [pc, #508]	; (e10 <__pi_release+0x234>)
	system_event_count ++;
     c14:	f8df a1fc 	ldr.w	sl, [pc, #508]	; e14 <__pi_release+0x238>
  __ASM volatile ("cpsid i" : : : "memory");
     c18:	b672      	cpsid	i
     c1a:	7823      	ldrb	r3, [r4, #0]
     c1c:	0798      	lsls	r0, r3, #30
     c1e:	f3c3 0540 	ubfx	r5, r3, #1, #1
     c22:	f100 80e7 	bmi.w	df4 <__pi_release+0x218>
     c26:	f8da 3000 	ldr.w	r3, [sl]
	switch (__pi_systat.effpdm) {
     c2a:	78e2      	ldrb	r2, [r4, #3]
	system_event_count ++;
     c2c:	3301      	adds	r3, #1
	switch (__pi_systat.effpdm) {
     c2e:	2a01      	cmp	r2, #1
	system_event_count ++;
     c30:	f8ca 3000 	str.w	r3, [sl]
	switch (__pi_systat.effpdm) {
     c34:	b2d3      	uxtb	r3, r2
     c36:	d017      	beq.n	c68 <__pi_release+0x8c>
     c38:	2b02      	cmp	r3, #2
     c3a:	d03d      	beq.n	cb8 <__pi_release+0xdc>
     c3c:	2b00      	cmp	r3, #0
     c3e:	f040 80ab 	bne.w	d98 <__pi_release+0x1bc>
			__WFI ();
     c42:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
     c44:	b662      	cpsie	i
     c46:	bf00      	nop
     c48:	bf00      	nop
     c4a:	e7e5      	b.n	c18 <__pi_release+0x3c>
	check_stack_overflow;
     c4c:	200b      	movs	r0, #11
     c4e:	4972      	ldr	r1, [pc, #456]	; (e18 <__pi_release+0x23c>)
     c50:	f7ff fc1c 	bl	48c <__pi_syserror>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c54:	685a      	ldr	r2, [r3, #4]
     c56:	b12a      	cbz	r2, c64 <__pi_release+0x88>
     c58:	8818      	ldrh	r0, [r3, #0]
     c5a:	0704      	lsls	r4, r0, #28
     c5c:	d102      	bne.n	c64 <__pi_release+0x88>
			(__pi_curr->code) (tstate (__pi_curr));
     c5e:	0900      	lsrs	r0, r0, #4
     c60:	4790      	blx	r2
			goto Redo;
     c62:	e7ca      	b.n	bfa <__pi_release+0x1e>
	for_all_tasks (__pi_curr) {
     c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     c66:	e7cf      	b.n	c08 <__pi_release+0x2c>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c68:	4b6c      	ldr	r3, [pc, #432]	; (e1c <__pi_release+0x240>)
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c6a:	2020      	movs	r0, #32
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c6c:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
     c70:	f042 0201 	orr.w	r2, r2, #1
     c74:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionEnable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c78:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
     c7c:	f042 0203 	orr.w	r2, r2, #3
     c80:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     c88:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
     c8c:	699b      	ldr	r3, [r3, #24]
     c8e:	4798      	blx	r3
SysCtrlAonSync(void)
{
    //
    // Sync the AON interface
    //
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     c90:	4b63      	ldr	r3, [pc, #396]	; (e20 <__pi_release+0x244>)
     c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c94:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     c98:	f8d3 2d10 	ldr.w	r2, [r3, #3344]	; 0xd10
     c9c:	f042 0204 	orr.w	r2, r2, #4
     ca0:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
			__WFI ();
     ca4:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ca6:	f8d3 2d10 	ldr.w	r2, [r3, #3344]	; 0xd10
     caa:	f022 0204 	bic.w	r2, r2, #4
     cae:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
     cb2:	4b5b      	ldr	r3, [pc, #364]	; (e20 <__pi_release+0x244>)
     cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
     cb6:	e7c5      	b.n	c44 <__pi_release+0x68>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cb8:	2601      	movs	r6, #1
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cba:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cbe:	4b59      	ldr	r3, [pc, #356]	; (e24 <__pi_release+0x248>)
    // Check the arguments.
    ASSERT((ui32Mode == AONWUC_AUX_WAKEUP) ||
           (ui32Mode == AONWUC_AUX_ALLOW_SLEEP));

    // Wake up the AUX domain.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cc0:	f8df b164 	ldr.w	fp, [pc, #356]	; e28 <__pi_release+0x24c>
     cc4:	60dd      	str	r5, [r3, #12]
     cc6:	f8cb 5200 	str.w	r5, [fp, #512]	; 0x200
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     cca:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
     cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     cd0:	4a56      	ldr	r2, [pc, #344]	; (e2c <__pi_release+0x250>)
     cd2:	6296      	str	r6, [r2, #40]	; 0x28
     cd4:	6860      	ldr	r0, [r4, #4]
     cd6:	f8d9 21b8 	ldr.w	r2, [r9, #440]	; 0x1b8
     cda:	f040 0020 	orr.w	r0, r0, #32
     cde:	6992      	ldr	r2, [r2, #24]
     ce0:	4790      	blx	r2
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     ce2:	4a53      	ldr	r2, [pc, #332]	; (e30 <__pi_release+0x254>)
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionDisable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ce4:	4b4d      	ldr	r3, [pc, #308]	; (e1c <__pi_release+0x240>)
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     ce6:	f8c2 6180 	str.w	r6, [r2, #384]	; 0x180
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cea:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     cee:	2103      	movs	r1, #3
     cf0:	f022 0203 	bic.w	r2, r2, #3
     cf4:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
     cf8:	f8d9 21d8 	ldr.w	r2, [r9, #472]	; 0x1d8
     cfc:	484d      	ldr	r0, [pc, #308]	; (e34 <__pi_release+0x258>)
     cfe:	6852      	ldr	r2, [r2, #4]
     d00:	4790      	blx	r2
			SysCtrlSetRechargeBeforePowerDown
     d02:	4628      	mov	r0, r5
     d04:	f002 ffa8 	bl	3c58 <NOROM_SysCtrlSetRechargeBeforePowerDown>
     d08:	4b45      	ldr	r3, [pc, #276]	; (e20 <__pi_release+0x244>)
     d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d0c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     d10:	f8d3 2d10 	ldr.w	r2, [r3, #3344]	; 0xd10
     d14:	f042 0204 	orr.w	r2, r2, #4
     d18:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
			__WFI ();
     d1c:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d1e:	f8d3 2d10 	ldr.w	r2, [r3, #3344]	; 0xd10
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d22:	4631      	mov	r1, r6
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d24:	f022 0204 	bic.w	r2, r2, #4
     d28:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d2c:	f8d9 31d8 	ldr.w	r3, [r9, #472]	; 0x1d8
     d30:	4840      	ldr	r0, [pc, #256]	; (e34 <__pi_release+0x258>)
     d32:	685b      	ldr	r3, [r3, #4]
     d34:	4798      	blx	r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d36:	4a39      	ldr	r2, [pc, #228]	; (e1c <__pi_release+0x240>)
     d38:	f8d2 3224 	ldr.w	r3, [r2, #548]	; 0x224
     d3c:	f043 0303 	orr.w	r3, r3, #3
     d40:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
     d44:	f8cb 6200 	str.w	r6, [fp, #512]	; 0x200
AONWUCPowerStatusGet(void)
{
    //
    // Return the power status.
    //
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d48:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
     d4c:	6953      	ldr	r3, [r2, #20]
			while (!(AONWUCPowerStatusGet () &
     d4e:	0699      	lsls	r1, r3, #26
     d50:	d5fc      	bpl.n	d4c <__pi_release+0x170>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d52:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     d56:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
     d5a:	6860      	ldr	r0, [r4, #4]
     d5c:	695b      	ldr	r3, [r3, #20]
     d5e:	4798      	blx	r3
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d60:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
     d64:	6860      	ldr	r0, [r4, #4]
     d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     d68:	4798      	blx	r3
     d6a:	2801      	cmp	r0, #1
     d6c:	d1f8      	bne.n	d60 <__pi_release+0x184>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d6e:	2200      	movs	r2, #0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d70:	4b2e      	ldr	r3, [pc, #184]	; (e2c <__pi_release+0x250>)
     d72:	6298      	str	r0, [r3, #40]	; 0x28
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d74:	4b2e      	ldr	r3, [pc, #184]	; (e30 <__pi_release+0x254>)
     d76:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d7a:	4b2a      	ldr	r3, [pc, #168]	; (e24 <__pi_release+0x248>)
     d7c:	60d8      	str	r0, [r3, #12]
     d7e:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
     d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			SysCtrlAdjustRechargeAfterPowerDown ();
     d84:	f003 f878 	bl	3e78 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>
			reinit_uart ();
     d88:	f7ff fcc0 	bl	70c <reinit_uart>
     d8c:	4a2a      	ldr	r2, [pc, #168]	; (e38 <__pi_release+0x25c>)
     d8e:	6b93      	ldr	r3, [r2, #56]	; 0x38
     d90:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     d94:	6393      	str	r3, [r2, #56]	; 0x38
}
     d96:	e755      	b.n	c44 <__pi_release+0x68>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     d9c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
     da0:	2001      	movs	r0, #1
     da2:	68db      	ldr	r3, [r3, #12]
     da4:	4798      	blx	r3
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     da6:	f04f 313f 	mov.w	r1, #1061109567	; 0x3f3f3f3f
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     daa:	4b24      	ldr	r3, [pc, #144]	; (e3c <__pi_release+0x260>)
     dac:	691a      	ldr	r2, [r3, #16]
     dae:	f022 0201 	bic.w	r2, r2, #1
     db2:	611a      	str	r2, [r3, #16]
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     db6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
     dba:	641a      	str	r2, [r3, #64]	; 0x40
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     dbc:	4a20      	ldr	r2, [pc, #128]	; (e40 <__pi_release+0x264>)
     dbe:	6011      	str	r1, [r2, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     dc0:	6051      	str	r1, [r2, #4]
     dc2:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
     dc6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    // Ensure the JTAG domain is turned off;
    // otherwise MCU domain can't be turned off.
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;

    // Enable shutdown of the device.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     dc8:	4917      	ldr	r1, [pc, #92]	; (e28 <__pi_release+0x24c>)
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     dca:	641d      	str	r5, [r3, #64]	; 0x40
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     dcc:	f8c1 5420 	str.w	r5, [r1, #1056]	; 0x420
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     dd0:	2101      	movs	r1, #1
     dd2:	6199      	str	r1, [r3, #24]
     dd4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     dd6:	695a      	ldr	r2, [r3, #20]
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     dd8:	0692      	lsls	r2, r2, #26
     dda:	d4fc      	bmi.n	dd6 <__pi_release+0x1fa>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     ddc:	2201      	movs	r2, #1
     dde:	4b14      	ldr	r3, [pc, #80]	; (e30 <__pi_release+0x254>)
			PRCMPowerDomainOff (
     de0:	2037      	movs	r0, #55	; 0x37
     de2:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
     de6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     dea:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
     dee:	699b      	ldr	r3, [r3, #24]
     df0:	4798      	blx	r3
			goto DeepSleep;
     df2:	e74f      	b.n	c94 <__pi_release+0xb8>
	__SLEEP;
     df4:	7823      	ldrb	r3, [r4, #0]
     df6:	f36f 0341 	bfc	r3, #1, #1
     dfa:	7023      	strb	r3, [r4, #0]
     dfc:	b662      	cpsie	i

#endif	/* SPIN_WHEN_HALTED */

	goto Redo;
     dfe:	e6fc      	b.n	bfa <__pi_release+0x1e>
     e00:	20005000 	andcs	r5, r0, r0
     e04:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     e08:	2000013c 	andcs	r0, r0, ip, lsr r1
     e0c:	20000138 	andcs	r0, r0, r8, lsr r1
     e10:	20000148 	andcs	r0, r0, r8, asr #2
     e14:	20000130 	andcs	r0, r0, r0, lsr r1
     e18:	0000430c 	andeq	r4, r0, ip, lsl #6
     e1c:	40082000 	andmi	r2, r8, r0
     e20:	40092000 	andmi	r2, r9, r0
     e24:	40094000 	andmi	r4, r9, r0
     e28:	43220000 			; <UNDEFINED> instruction: 0x43220000
     e2c:	60082000 	andvs	r2, r8, r0
     e30:	43040000 	movwmi	r0, #16384	; 0x4000
     e34:	40034000 	andmi	r4, r3, r0
     e38:	40001000 	andmi	r1, r0, r0
     e3c:	40091000 	andmi	r1, r9, r0
     e40:	40093000 	andmi	r3, r9, r0

00000e44 <main>:

#include "scheduler.h"

}

int main (void) {
     e44:	b510      	push	{r4, lr}
     e46:	4b13      	ldr	r3, [pc, #76]	; (e94 <main+0x50>)

#if	STACK_GUARD
	{
		register sint i;
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e48:	4913      	ldr	r1, [pc, #76]	; (e98 <main+0x54>)
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e4a:	4a14      	ldr	r2, [pc, #80]	; (e9c <main+0x58>)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e4c:	f843 1b04 	str.w	r1, [r3], #4
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e50:	4293      	cmp	r3, r2
     e52:	d1fb      	bne.n	e4c <main+0x8>
#if	TCV_PRESENT
	tcv_init ();
#endif

	// For standby mode wakeup on timer
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e54:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
	system_init ();
     e58:	f7ff fde4 	bl	a24 <system_init>
	tcv_init ();
     e5c:	f000 fece 	bl	1bfc <tcv_init>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e60:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
     e64:	2129      	movs	r1, #41	; 0x29
     e66:	2000      	movs	r0, #0
     e68:	681b      	ldr	r3, [r3, #0]
     e6a:	4798      	blx	r3
	// Edge on any I/O, will it take care of UART? No, of course not!
	// But it does work for buttons.
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e6c:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
     e70:	2120      	movs	r1, #32
     e72:	681b      	ldr	r3, [r3, #0]
     e74:	2001      	movs	r0, #1
     e76:	4798      	blx	r3

	// Assume root process identity
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e78:	2100      	movs	r1, #0
     e7a:	4809      	ldr	r0, [pc, #36]	; (ea0 <main+0x5c>)
     e7c:	f000 fac6 	bl	140c <__pi_fork>
     e80:	4b08      	ldr	r3, [pc, #32]	; (ea4 <main+0x60>)
	// Delay root startup for 16 msec to make sure that the drivers go
	// first
	delay (16, 0);
     e82:	2100      	movs	r1, #0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e84:	6018      	str	r0, [r3, #0]
	delay (16, 0);
     e86:	2010      	movs	r0, #16
     e88:	f000 f94e 	bl	1128 <delay>
     e8c:	b662      	cpsie	i

	sti;

	__pi_release ();
     e8e:	f7ff fea5 	bl	bdc <__pi_release>
     e92:	bf00      	nop
     e94:	20004bfc 	strdcs	r4, [r0], -ip
     e98:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     e9c:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
     ea0:	000001e5 	andeq	r0, r0, r5, ror #3
     ea4:	2000013c 	andcs	r0, r0, ip, lsr r1

00000ea8 <killev>:
	}

	return i->Timer - __pi_old;
}

static void killev (__pi_pcb_t *pid) {
     ea8:	b570      	push	{r4, r5, r6, lr}
	aword wfun;
	int j;
	__pi_pcb_t *i;

	wfun = (aword)(pid->code);
	for_all_tasks (i) {
     eaa:	4b0d      	ldr	r3, [pc, #52]	; (ee0 <killev+0x38>)
	wfun = (aword)(pid->code);
     eac:	6846      	ldr	r6, [r0, #4]
	for_all_tasks (i) {
     eae:	681a      	ldr	r2, [r3, #0]
     eb0:	b1aa      	cbz	r2, ede <killev+0x36>
		for (j = 0; j < nevents (i); j++) {
     eb2:	4614      	mov	r4, r2
     eb4:	f834 1b10 	ldrh.w	r1, [r4], #16
     eb8:	2300      	movs	r3, #0
     eba:	f001 0107 	and.w	r1, r1, #7
     ebe:	e001      	b.n	ec4 <killev+0x1c>
			if (i->Events [j] . Event == (aword)pid
			    || i->Events [j] . Event == wfun
     ec0:	42b5      	cmp	r5, r6
     ec2:	d006      	beq.n	ed2 <killev+0x2a>
		for (j = 0; j < nevents (i); j++) {
     ec4:	4299      	cmp	r1, r3
     ec6:	dd08      	ble.n	eda <killev+0x32>
			if (i->Events [j] . Event == (aword)pid
     ec8:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
     ecc:	3301      	adds	r3, #1
     ece:	42a8      	cmp	r0, r5
     ed0:	d1f6      	bne.n	ec0 <killev+0x18>
			    ) {
				wakeupev (i, j);
     ed2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     ed6:	889b      	ldrh	r3, [r3, #4]
     ed8:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
     eda:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     edc:	e7e8      	b.n	eb0 <killev+0x8>
				break;
			}
		}
	}
}
     ede:	bd70      	pop	{r4, r5, r6, pc}
     ee0:	20000138 	andcs	r0, r0, r8, lsr r1

00000ee4 <qfree>:
	// volatile
#endif
	aword *chunk, *cc;

	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     ee4:	4a1d      	ldr	r2, [pc, #116]	; (f5c <qfree+0x78>)
static void qfree (aword *ch) {
     ee6:	b530      	push	{r4, r5, lr}
     ee8:	4614      	mov	r4, r2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     eea:	6813      	ldr	r3, [r2, #0]
     eec:	b93b      	cbnz	r3, efe <qfree+0x1a>
		}
	}

	/* Insert */
	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     eee:	6823      	ldr	r3, [r4, #0]
	cc = (aword*)(mpools + MA_NP);
     ef0:	4a1a      	ldr	r2, [pc, #104]	; (f5c <qfree+0x78>)
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     ef2:	bb53      	cbnz	r3, f4a <qfree+0x66>
		chunk = m_nextp (chunk))
			if (m_size (chunk) >= m_size (ch))
				break;

	m_setnextp (ch, chunk);
     ef4:	6003      	str	r3, [r0, #0]
	m_setnextp (cc, ch);

#if	MALLOC_SAFE
	m_magic (ch) = MALLOC_MAGIC;
     ef6:	4b1a      	ldr	r3, [pc, #104]	; (f60 <qfree+0x7c>)
	m_setnextp (cc, ch);
     ef8:	6010      	str	r0, [r2, #0]
	m_magic (ch) = MALLOC_MAGIC;
     efa:	6043      	str	r3, [r0, #4]
#endif

#undef	MA_NP
}
     efc:	bd30      	pop	{r4, r5, pc}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     efe:	e953 1501 	ldrd	r1, r5, [r3, #-4]
     f02:	3101      	adds	r1, #1
     f04:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     f08:	4288      	cmp	r0, r1
     f0a:	d10b      	bne.n	f24 <qfree+0x40>
			m_setnextp (cc, m_nextp (chunk));
     f0c:	6015      	str	r5, [r2, #0]
			m_size (chunk) += m_hdrlen + m_size (ch);
     f0e:	f850 0c04 	ldr.w	r0, [r0, #-4]
     f12:	f853 1c04 	ldr.w	r1, [r3, #-4]
     f16:	4401      	add	r1, r0
     f18:	4618      	mov	r0, r3
     f1a:	3101      	adds	r1, #1
     f1c:	f843 1c04 	str.w	r1, [r3, #-4]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f20:	681b      	ldr	r3, [r3, #0]
     f22:	e7e3      	b.n	eec <qfree+0x8>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f24:	f850 1c04 	ldr.w	r1, [r0, #-4]
     f28:	3101      	adds	r1, #1
     f2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
     f2e:	428b      	cmp	r3, r1
			m_setnextp (cc, m_nextp (chunk));
     f30:	bf03      	ittte	eq
     f32:	6015      	streq	r5, [r2, #0]
			m_size (ch) += m_hdrlen + m_size (chunk);
     f34:	f850 1c04 	ldreq.w	r1, [r0, #-4]
     f38:	f853 5c04 	ldreq.w	r5, [r3, #-4]
     f3c:	461a      	movne	r2, r3
     f3e:	bf02      	ittt	eq
     f40:	1949      	addeq	r1, r1, r5
     f42:	3101      	addeq	r1, #1
     f44:	f840 1c04 	streq.w	r1, [r0, #-4]
     f48:	e7ea      	b.n	f20 <qfree+0x3c>
			if (m_size (chunk) >= m_size (ch))
     f4a:	f853 4c04 	ldr.w	r4, [r3, #-4]
     f4e:	f850 1c04 	ldr.w	r1, [r0, #-4]
     f52:	428c      	cmp	r4, r1
     f54:	d2ce      	bcs.n	ef4 <qfree+0x10>
		chunk = m_nextp (chunk))
     f56:	461a      	mov	r2, r3
     f58:	681b      	ldr	r3, [r3, #0]
     f5a:	e7ca      	b.n	ef2 <qfree+0xe>
     f5c:	20000174 	andcs	r0, r0, r4, ror r1
     f60:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}

00000f64 <dgout>:
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f64:	4b03      	ldr	r3, [pc, #12]	; (f74 <dgout+0x10>)
     f66:	699a      	ldr	r2, [r3, #24]

#if	dbg_level != 0 || DIAG_MESSAGES

static void dgout (word c) {

	diag_wait (a);
     f68:	0712      	lsls	r2, r2, #28
     f6a:	d4fc      	bmi.n	f66 <dgout+0x2>
	diag_wchar (c, a);
     f6c:	b2c0      	uxtb	r0, r0
     f6e:	6018      	str	r0, [r3, #0]
}
     f70:	4770      	bx	lr
     f72:	bf00      	nop
     f74:	40001000 	andmi	r1, r0, r0

00000f78 <__pi_badstate>:
	syserror (ESTATE, "state");
     f78:	2007      	movs	r0, #7
void __pi_badstate (void) {
     f7a:	b508      	push	{r3, lr}
	syserror (ESTATE, "state");
     f7c:	4901      	ldr	r1, [pc, #4]	; (f84 <__pi_badstate+0xc>)
     f7e:	f7ff fa85 	bl	48c <__pi_syserror>
     f82:	bf00      	nop
     f84:	00004354 	andeq	r4, r0, r4, asr r3

00000f88 <utimer_add>:
	for (i = 0; i < MAX_UTIMERS; i++)
     f88:	4a08      	ldr	r2, [pc, #32]	; (fac <utimer_add+0x24>)
void utimer_add (address ut) {
     f8a:	4603      	mov	r3, r0
     f8c:	4611      	mov	r1, r2
	for (i = 0; i < MAX_UTIMERS; i++)
     f8e:	2000      	movs	r0, #0
void utimer_add (address ut) {
     f90:	b510      	push	{r4, lr}
		if (__pi_utims [i] == NULL)
     f92:	f852 4b04 	ldr.w	r4, [r2], #4
     f96:	b12c      	cbz	r4, fa4 <utimer_add+0x1c>
	for (i = 0; i < MAX_UTIMERS; i++)
     f98:	3001      	adds	r0, #1
     f9a:	2804      	cmp	r0, #4
     f9c:	d1f9      	bne.n	f92 <utimer_add+0xa>
		syserror (ERESOURCE, "ut a");
     f9e:	4904      	ldr	r1, [pc, #16]	; (fb0 <utimer_add+0x28>)
     fa0:	f7ff fa74 	bl	48c <__pi_syserror>
	__pi_utims [i] = ut;
     fa4:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
     fa8:	bd10      	pop	{r4, pc}
     faa:	bf00      	nop
     fac:	20000150 	andcs	r0, r0, r0, asr r1
     fb0:	0000435a 	andeq	r4, r0, sl, asr r3

00000fb4 <__pi_utimer_set>:
	*t = v;
     fb4:	8001      	strh	r1, [r0, #0]
	TCI_RUN_AUXILIARY_TIMER;
     fb6:	f7ff bab5 	b.w	524 <tci_run_auxiliary_timer>
	...

00000fbc <update_n_wake>:
void update_n_wake (word min, Boolean force) {
     fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fbe:	4604      	mov	r4, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
     fc0:	4608      	mov	r0, r1
     fc2:	f7ff fb51 	bl	668 <tci_update_delay_ticks>
     fc6:	2800      	cmp	r0, #0
     fc8:	d154      	bne.n	1074 <update_n_wake+0xb8>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fca:	4b2b      	ldr	r3, [pc, #172]	; (1078 <update_n_wake+0xbc>)
     fcc:	4e2b      	ldr	r6, [pc, #172]	; (107c <update_n_wake+0xc0>)
     fce:	8819      	ldrh	r1, [r3, #0]
     fd0:	8832      	ldrh	r2, [r6, #0]
     fd2:	b289      	uxth	r1, r1
     fd4:	428a      	cmp	r2, r1
     fd6:	492a      	ldr	r1, [pc, #168]	; (1080 <update_n_wake+0xc4>)
     fd8:	d803      	bhi.n	fe2 <update_n_wake+0x26>
     fda:	8808      	ldrh	r0, [r1, #0]
     fdc:	b280      	uxth	r0, r0
     fde:	4282      	cmp	r2, r0
     fe0:	d20d      	bcs.n	ffe <update_n_wake+0x42>
     fe2:	881d      	ldrh	r5, [r3, #0]
     fe4:	8808      	ldrh	r0, [r1, #0]
     fe6:	b2ad      	uxth	r5, r5
     fe8:	b280      	uxth	r0, r0
     fea:	4285      	cmp	r5, r0
     fec:	d236      	bcs.n	105c <update_n_wake+0xa0>
     fee:	8818      	ldrh	r0, [r3, #0]
     ff0:	b280      	uxth	r0, r0
     ff2:	4282      	cmp	r2, r0
     ff4:	d903      	bls.n	ffe <update_n_wake+0x42>
     ff6:	8808      	ldrh	r0, [r1, #0]
     ff8:	b280      	uxth	r0, r0
     ffa:	4282      	cmp	r2, r0
     ffc:	d32e      	bcc.n	105c <update_n_wake+0xa0>
		for_all_tasks (i) {
     ffe:	4a21      	ldr	r2, [pc, #132]	; (1084 <update_n_wake+0xc8>)
    1000:	6810      	ldr	r0, [r2, #0]
    1002:	b918      	cbnz	r0, 100c <update_n_wake+0x50>
	__pi_mintk = znew + min;
    1004:	8818      	ldrh	r0, [r3, #0]
    1006:	4404      	add	r4, r0
    1008:	8034      	strh	r4, [r6, #0]
    100a:	e02c      	b.n	1066 <update_n_wake+0xaa>
			if (!twaiting (i))
    100c:	8805      	ldrh	r5, [r0, #0]
    100e:	072a      	lsls	r2, r5, #28
    1010:	d51b      	bpl.n	104a <update_n_wake+0x8e>
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1012:	881f      	ldrh	r7, [r3, #0]
    1014:	8842      	ldrh	r2, [r0, #2]
    1016:	b2bf      	uxth	r7, r7
    1018:	42ba      	cmp	r2, r7
    101a:	d803      	bhi.n	1024 <update_n_wake+0x68>
    101c:	880f      	ldrh	r7, [r1, #0]
    101e:	b2bf      	uxth	r7, r7
    1020:	42ba      	cmp	r2, r7
    1022:	d20f      	bcs.n	1044 <update_n_wake+0x88>
    1024:	f8b3 c000 	ldrh.w	ip, [r3]
    1028:	880f      	ldrh	r7, [r1, #0]
    102a:	fa1f fc8c 	uxth.w	ip, ip
    102e:	b2bf      	uxth	r7, r7
    1030:	45bc      	cmp	ip, r7
    1032:	d20c      	bcs.n	104e <update_n_wake+0x92>
    1034:	881f      	ldrh	r7, [r3, #0]
    1036:	b2bf      	uxth	r7, r7
    1038:	42ba      	cmp	r2, r7
    103a:	d903      	bls.n	1044 <update_n_wake+0x88>
    103c:	880f      	ldrh	r7, [r1, #0]
    103e:	b2bf      	uxth	r7, r7
    1040:	42ba      	cmp	r2, r7
    1042:	d304      	bcc.n	104e <update_n_wake+0x92>
				wakeuptm (i);
    1044:	f025 050f 	bic.w	r5, r5, #15
    1048:	8005      	strh	r5, [r0, #0]
		for_all_tasks (i) {
    104a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    104c:	e7d9      	b.n	1002 <update_n_wake+0x46>
				d = i->Timer - znew;
    104e:	881d      	ldrh	r5, [r3, #0]
    1050:	1b52      	subs	r2, r2, r5
    1052:	b292      	uxth	r2, r2
    1054:	4294      	cmp	r4, r2
    1056:	bf28      	it	cs
    1058:	4614      	movcs	r4, r2
    105a:	e7f6      	b.n	104a <update_n_wake+0x8e>
		if ((word)(__pi_mintk - znew) < min) 
    105c:	8818      	ldrh	r0, [r3, #0]
    105e:	1a12      	subs	r2, r2, r0
    1060:	b292      	uxth	r2, r2
    1062:	4294      	cmp	r4, r2
    1064:	d9ce      	bls.n	1004 <update_n_wake+0x48>
	__pi_old = znew;
    1066:	881b      	ldrh	r3, [r3, #0]
    1068:	b29b      	uxth	r3, r3
    106a:	800b      	strh	r3, [r1, #0]
}
    106c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TCI_RUN_DELAY_TIMER;
    1070:	f7ff ba36 	b.w	4e0 <tci_run_delay_timer>
}
    1074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1076:	bf00      	nop
    1078:	20000142 	andcs	r0, r0, r2, asr #2
    107c:	20000140 	andcs	r0, r0, r0, asr #2
    1080:	20000144 	andcs	r0, r0, r4, asr #2
    1084:	20000138 	andcs	r0, r0, r8, lsr r1

00001088 <proceed>:
void proceed (word state) {
    1088:	b508      	push	{r3, lr}
	prcdstate (__pi_curr, state);
    108a:	4b03      	ldr	r3, [pc, #12]	; (1098 <proceed+0x10>)
    108c:	0100      	lsls	r0, r0, #4
    108e:	681b      	ldr	r3, [r3, #0]
    1090:	8018      	strh	r0, [r3, #0]
	release;
    1092:	f7ff fda3 	bl	bdc <__pi_release>
    1096:	bf00      	nop
    1098:	2000013c 	andcs	r0, r0, ip, lsr r1

0000109c <__pi_wait>:
void __pi_wait (aword event, word state) {
    109c:	b510      	push	{r4, lr}
	sint j = nevents (__pi_curr);
    109e:	4b0a      	ldr	r3, [pc, #40]	; (10c8 <__pi_wait+0x2c>)
    10a0:	681c      	ldr	r4, [r3, #0]
    10a2:	8823      	ldrh	r3, [r4, #0]
	if (j >= MAX_EVENTS_PER_TASK)
    10a4:	f013 0f04 	tst.w	r3, #4
    10a8:	f003 0207 	and.w	r2, r3, #7
    10ac:	d003      	beq.n	10b6 <__pi_wait+0x1a>
		syserror (ENEVENTS, "sw");
    10ae:	2005      	movs	r0, #5
    10b0:	4906      	ldr	r1, [pc, #24]	; (10cc <__pi_wait+0x30>)
    10b2:	f7ff f9eb 	bl	48c <__pi_syserror>
	setestate (__pi_curr->Events [j], state, event);
    10b6:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    10ba:	0109      	lsls	r1, r1, #4
	incwait (__pi_curr);
    10bc:	3301      	adds	r3, #1
	setestate (__pi_curr->Events [j], state, event);
    10be:	8191      	strh	r1, [r2, #12]
    10c0:	6110      	str	r0, [r2, #16]
	incwait (__pi_curr);
    10c2:	8023      	strh	r3, [r4, #0]
}
    10c4:	bd10      	pop	{r4, pc}
    10c6:	bf00      	nop
    10c8:	2000013c 	andcs	r0, r0, ip, lsr r1
    10cc:	0000435f 	andeq	r4, r0, pc, asr r3

000010d0 <__pi_trigger>:
void __pi_trigger (aword event) {
    10d0:	b530      	push	{r4, r5, lr}
	for_all_tasks (i) {
    10d2:	4b0b      	ldr	r3, [pc, #44]	; (1100 <__pi_trigger+0x30>)
    10d4:	681a      	ldr	r2, [r3, #0]
    10d6:	b192      	cbz	r2, 10fe <__pi_trigger+0x2e>
		for (j = 0; j < nevents (i); j++) {
    10d8:	4614      	mov	r4, r2
    10da:	2300      	movs	r3, #0
    10dc:	f834 1b10 	ldrh.w	r1, [r4], #16
    10e0:	f001 0107 	and.w	r1, r1, #7
    10e4:	4299      	cmp	r1, r3
    10e6:	dd08      	ble.n	10fa <__pi_trigger+0x2a>
			if (i->Events [j] . Event == event) {
    10e8:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
    10ec:	3301      	adds	r3, #1
    10ee:	4285      	cmp	r5, r0
    10f0:	d1f8      	bne.n	10e4 <__pi_trigger+0x14>
				wakeupev (i, j);
    10f2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    10f6:	889b      	ldrh	r3, [r3, #4]
    10f8:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
    10fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    10fc:	e7eb      	b.n	10d6 <__pi_trigger+0x6>
}
    10fe:	bd30      	pop	{r4, r5, pc}
    1100:	20000138 	andcs	r0, r0, r8, lsr r1

00001104 <__pi_join>:
aword __pi_join (aword pid, word st) {
    1104:	b510      	push	{r4, lr}
    1106:	4604      	mov	r4, r0
	for_all_tasks (i) {
    1108:	4b06      	ldr	r3, [pc, #24]	; (1124 <__pi_join+0x20>)
    110a:	681b      	ldr	r3, [r3, #0]
    110c:	b90b      	cbnz	r3, 1112 <__pi_join+0xe>
	return 0;
    110e:	461c      	mov	r4, r3
    1110:	e004      	b.n	111c <__pi_join+0x18>
		if ((aword)i == pid) {
    1112:	42a3      	cmp	r3, r4
    1114:	d104      	bne.n	1120 <__pi_join+0x1c>
			__pi_wait (pid, st);
    1116:	4620      	mov	r0, r4
    1118:	f7ff ffc0 	bl	109c <__pi_wait>
}
    111c:	4620      	mov	r0, r4
    111e:	bd10      	pop	{r4, pc}
	for_all_tasks (i) {
    1120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1122:	e7f3      	b.n	110c <__pi_join+0x8>
    1124:	20000138 	andcs	r0, r0, r8, lsr r1

00001128 <delay>:
void delay (word d, word state) {
    1128:	b538      	push	{r3, r4, r5, lr}
    112a:	4604      	mov	r4, r0
	settstate (__pi_curr, state);
    112c:	4d0a      	ldr	r5, [pc, #40]	; (1158 <delay+0x30>)
    112e:	682a      	ldr	r2, [r5, #0]
    1130:	8813      	ldrh	r3, [r2, #0]
    1132:	f003 0307 	and.w	r3, r3, #7
    1136:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    113a:	8013      	strh	r3, [r2, #0]
	update_n_wake (d, YES);
    113c:	2101      	movs	r1, #1
    113e:	f7ff ff3d 	bl	fbc <update_n_wake>
	__pi_curr->Timer = __pi_old + d;
    1142:	4b06      	ldr	r3, [pc, #24]	; (115c <delay+0x34>)
    1144:	8818      	ldrh	r0, [r3, #0]
    1146:	682b      	ldr	r3, [r5, #0]
    1148:	4404      	add	r4, r0
    114a:	805c      	strh	r4, [r3, #2]
	inctimer (__pi_curr);
    114c:	682a      	ldr	r2, [r5, #0]
    114e:	8813      	ldrh	r3, [r2, #0]
    1150:	f043 0308 	orr.w	r3, r3, #8
    1154:	8013      	strh	r3, [r2, #0]
}
    1156:	bd38      	pop	{r3, r4, r5, pc}
    1158:	2000013c 	andcs	r0, r0, ip, lsr r1
    115c:	20000144 	andcs	r0, r0, r4, asr #2

00001160 <running>:
	if (fun == NULL)
    1160:	4603      	mov	r3, r0
    1162:	b910      	cbnz	r0, 116a <running+0xa>
		return (int) __pi_curr;
    1164:	4b05      	ldr	r3, [pc, #20]	; (117c <running+0x1c>)
    1166:	6818      	ldr	r0, [r3, #0]
    1168:	4770      	bx	lr
	for_all_tasks (i)
    116a:	4a05      	ldr	r2, [pc, #20]	; (1180 <running+0x20>)
    116c:	6810      	ldr	r0, [r2, #0]
    116e:	b900      	cbnz	r0, 1172 <running+0x12>
}
    1170:	4770      	bx	lr
		if (i->code == fun)
    1172:	6842      	ldr	r2, [r0, #4]
    1174:	429a      	cmp	r2, r3
    1176:	d0fb      	beq.n	1170 <running+0x10>
	for_all_tasks (i)
    1178:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    117a:	e7f8      	b.n	116e <running+0xe>
    117c:	2000013c 	andcs	r0, r0, ip, lsr r1
    1180:	20000138 	andcs	r0, r0, r8, lsr r1

00001184 <__pi_strlen>:
int __pi_strlen (const char *s) {
    1184:	4603      	mov	r3, r0
	for (i = 0; *(s+i) != '\0'; i++);
    1186:	2000      	movs	r0, #0
    1188:	5c1a      	ldrb	r2, [r3, r0]
    118a:	b902      	cbnz	r2, 118e <__pi_strlen+0xa>
}
    118c:	4770      	bx	lr
	for (i = 0; *(s+i) != '\0'; i++);
    118e:	3001      	adds	r0, #1
    1190:	e7fa      	b.n	1188 <__pi_strlen+0x4>

00001192 <__pi_strcpy>:
	while ((Boolean)(*d++ = *s++));
    1192:	3801      	subs	r0, #1
    1194:	f811 3b01 	ldrb.w	r3, [r1], #1
    1198:	f800 3f01 	strb.w	r3, [r0, #1]!
    119c:	2b00      	cmp	r3, #0
    119e:	d1f9      	bne.n	1194 <__pi_strcpy+0x2>
}
    11a0:	4770      	bx	lr

000011a2 <__pi_memcpy>:
	while (n--)
    11a2:	3801      	subs	r0, #1
    11a4:	440a      	add	r2, r1
    11a6:	4291      	cmp	r1, r2
    11a8:	d100      	bne.n	11ac <__pi_memcpy+0xa>
}
    11aa:	4770      	bx	lr
		*dest++ = *src++;
    11ac:	f811 3b01 	ldrb.w	r3, [r1], #1
    11b0:	f800 3f01 	strb.w	r3, [r0, #1]!
    11b4:	e7f7      	b.n	11a6 <__pi_memcpy+0x4>

000011b6 <__pi_memset>:
		*dest++ = c;
    11b6:	f002 bf6f 	b.w	4098 <memset>
	...

000011bc <adddevfunc>:
void adddevfunc (devreqfun_t rf, int loc) {
    11bc:	b508      	push	{r3, lr}
	if (loc < 0 || loc >= MAX_DEVICES)
    11be:	b119      	cbz	r1, 11c8 <adddevfunc+0xc>
		syserror (EREQPAR, "addv");
    11c0:	2003      	movs	r0, #3
    11c2:	4905      	ldr	r1, [pc, #20]	; (11d8 <adddevfunc+0x1c>)
		syserror (ERESOURCE, "addv");
    11c4:	f7ff f962 	bl	48c <__pi_syserror>
	if (ioreq [loc] != NULL)
    11c8:	4b04      	ldr	r3, [pc, #16]	; (11dc <adddevfunc+0x20>)
    11ca:	681a      	ldr	r2, [r3, #0]
    11cc:	b112      	cbz	r2, 11d4 <adddevfunc+0x18>
		syserror (ERESOURCE, "addv");
    11ce:	2004      	movs	r0, #4
    11d0:	4901      	ldr	r1, [pc, #4]	; (11d8 <adddevfunc+0x1c>)
    11d2:	e7f7      	b.n	11c4 <adddevfunc+0x8>
	ioreq [loc] = rf;
    11d4:	6018      	str	r0, [r3, #0]
}
    11d6:	bd08      	pop	{r3, pc}
    11d8:	00004362 	andeq	r4, r0, r2, ror #6
    11dc:	20000164 	andcs	r0, r0, r4, ror #2

000011e0 <io>:
sint io (word retry, word dev, word operation, char *buf, word len) {
    11e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    11e4:	4604      	mov	r4, r0
    11e6:	4616      	mov	r6, r2
    11e8:	461d      	mov	r5, r3
    11ea:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11ee:	b921      	cbnz	r1, 11fa <io+0x1a>
    11f0:	f8df 9080 	ldr.w	r9, [pc, #128]	; 1274 <io+0x94>
    11f4:	f8d9 3000 	ldr.w	r3, [r9]
    11f8:	b91b      	cbnz	r3, 1202 <io+0x22>
		syserror (ENODEVICE, "io");
    11fa:	2001      	movs	r0, #1
    11fc:	491e      	ldr	r1, [pc, #120]	; (1278 <io+0x98>)
    11fe:	f7ff f945 	bl	48c <__pi_syserror>
	if (len == 0)
    1202:	f1b8 0f00 	cmp.w	r8, #0
    1206:	d028      	beq.n	125a <io+0x7a>
	ret = (ioreq [dev]) (operation, buf, len);
    1208:	4642      	mov	r2, r8
    120a:	4629      	mov	r1, r5
    120c:	4630      	mov	r0, r6
    120e:	4798      	blx	r3
	if (ret >= 0)
    1210:	2800      	cmp	r0, #0
    1212:	da23      	bge.n	125c <io+0x7c>
	if (ret == -1) {
    1214:	1c41      	adds	r1, r0, #1
    1216:	f64f 73ff 	movw	r3, #65535	; 0xffff
    121a:	d108      	bne.n	122e <io+0x4e>
		if (retry == WNONE)
    121c:	429c      	cmp	r4, r3
    121e:	d01c      	beq.n	125a <io+0x7a>
		iowait (dev, operation, retry);
    1220:	4621      	mov	r1, r4
    1222:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    1226:	f7ff ff39 	bl	109c <__pi_wait>
			release;
    122a:	f7ff fcd7 	bl	bdc <__pi_release>
	if (ret == -2) {
    122e:	1c82      	adds	r2, r0, #2
    1230:	d116      	bne.n	1260 <io+0x80>
		if (retry != WNONE) {
    1232:	429c      	cmp	r4, r3
			(ioreq [dev]) (NONE, buf, len);
    1234:	f8d9 9000 	ldr.w	r9, [r9]
		if (retry != WNONE) {
    1238:	d00a      	beq.n	1250 <io+0x70>
			iowait (dev, operation, retry);
    123a:	4621      	mov	r1, r4
    123c:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    1240:	f7ff ff2c 	bl	109c <__pi_wait>
			(ioreq [dev]) (NONE, buf, len);
    1244:	4642      	mov	r2, r8
    1246:	4629      	mov	r1, r5
    1248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    124c:	47c8      	blx	r9
    124e:	e7ec      	b.n	122a <io+0x4a>
		(ioreq [dev]) (NONE, buf, len);
    1250:	4642      	mov	r2, r8
    1252:	4629      	mov	r1, r5
    1254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1258:	47c8      	blx	r9
		return 0;
    125a:	2000      	movs	r0, #0
}
    125c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (retry != WNONE) {
    1260:	429c      	cmp	r4, r3
    1262:	d0fa      	beq.n	125a <io+0x7a>
		delay (-ret - 2, retry);
    1264:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    1268:	30fe      	adds	r0, #254	; 0xfe
    126a:	4621      	mov	r1, r4
    126c:	b280      	uxth	r0, r0
    126e:	f7ff ff5b 	bl	1128 <delay>
		release;
    1272:	e7da      	b.n	122a <io+0x4a>
    1274:	20000164 	andcs	r0, r0, r4, ror #2
    1278:	00004367 	andeq	r4, r0, r7, ror #6

0000127c <__pi_malloc_init>:
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    127c:	4a0d      	ldr	r2, [pc, #52]	; (12b4 <__pi_malloc_init+0x38>)
void __pi_malloc_init () {
    127e:	b508      	push	{r3, lr}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1280:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
    1284:	f503 4398 	add.w	r3, r3, #19456	; 0x4c00
    1288:	089b      	lsrs	r3, r3, #2
    128a:	1e59      	subs	r1, r3, #1
    128c:	29ff      	cmp	r1, #255	; 0xff
    128e:	d803      	bhi.n	1298 <__pi_malloc_init+0x1c>
		syserror (ERESOURCE, "mal1");
    1290:	2004      	movs	r0, #4
    1292:	4909      	ldr	r1, [pc, #36]	; (12b8 <__pi_malloc_init+0x3c>)
    1294:	f7ff f8fa 	bl	48c <__pi_syserror>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1298:	4908      	ldr	r1, [pc, #32]	; (12bc <__pi_malloc_init+0x40>)
    129a:	1d10      	adds	r0, r2, #4
    129c:	6008      	str	r0, [r1, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    129e:	2000      	movs	r0, #0
    12a0:	4907      	ldr	r1, [pc, #28]	; (12c0 <__pi_malloc_init+0x44>)
	m_size (mpools [0]) = mlen - m_hdrlen;
    12a2:	3b02      	subs	r3, #2
    12a4:	6013      	str	r3, [r2, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12a6:	e9c2 0101 	strd	r0, r1, [r2, #4]
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12aa:	4a06      	ldr	r2, [pc, #24]	; (12c4 <__pi_malloc_init+0x48>)
    12ac:	6013      	str	r3, [r2, #0]
    12ae:	4a06      	ldr	r2, [pc, #24]	; (12c8 <__pi_malloc_init+0x4c>)
    12b0:	6013      	str	r3, [r2, #0]
}
    12b2:	bd08      	pop	{r3, pc}
    12b4:	2000023c 	andcs	r0, r0, ip, lsr r2
    12b8:	0000436a 	andeq	r4, r0, sl, ror #6
    12bc:	20000174 	andcs	r0, r0, r4, ror r1
    12c0:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    12c4:	20000168 	andcs	r0, r0, r8, ror #2
    12c8:	20000170 	andcs	r0, r0, r0, ror r1

000012cc <__pi_free>:
void __pi_free (aword *ch) {
    12cc:	b508      	push	{r3, lr}
	if (ch == NULL)
    12ce:	b1c8      	cbz	r0, 1304 <__pi_free+0x38>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12d0:	f850 3c04 	ldr.w	r3, [r0, #-4]
    12d4:	2b00      	cmp	r3, #0
    12d6:	db03      	blt.n	12e0 <__pi_free+0x14>
		syserror (EMALLOC, "malg");
    12d8:	2006      	movs	r0, #6
    12da:	490b      	ldr	r1, [pc, #44]	; (1308 <__pi_free+0x3c>)
    12dc:	f7ff f8d6 	bl	48c <__pi_syserror>
	mcfree [MA_NP] += m_size (ch);
    12e0:	490a      	ldr	r1, [pc, #40]	; (130c <__pi_free+0x40>)
		m_size (ch) ^= MALLOC_UMASK;
    12e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
	mcfree [MA_NP] += m_size (ch);
    12e6:	680a      	ldr	r2, [r1, #0]
		m_size (ch) ^= MALLOC_UMASK;
    12e8:	f840 3c04 	str.w	r3, [r0, #-4]
	mcfree [MA_NP] += m_size (ch);
    12ec:	4413      	add	r3, r2
    12ee:	600b      	str	r3, [r1, #0]
	QFREE;
    12f0:	f7ff fdf8 	bl	ee4 <qfree>
	if (mevent [MA_NP] . nwait) {
    12f4:	4806      	ldr	r0, [pc, #24]	; (1310 <__pi_free+0x44>)
    12f6:	7803      	ldrb	r3, [r0, #0]
    12f8:	b123      	cbz	r3, 1304 <__pi_free+0x38>
		trigger ((aword)(&(mevent [MA_NP])));
    12fa:	f7ff fee9 	bl	10d0 <__pi_trigger>
		mevent [MA_NP] . nwait --;
    12fe:	7803      	ldrb	r3, [r0, #0]
    1300:	3b01      	subs	r3, #1
    1302:	7003      	strb	r3, [r0, #0]
}
    1304:	bd08      	pop	{r3, pc}
    1306:	bf00      	nop
    1308:	0000436f 	andeq	r4, r0, pc, ror #6
    130c:	20000168 	andcs	r0, r0, r8, ror #2
    1310:	2000016c 	andcs	r0, r0, ip, ror #2

00001314 <kill>:
void kill (aword pid) {
    1314:	b510      	push	{r4, lr}
	if (pid == 0)
    1316:	b908      	cbnz	r0, 131c <kill+0x8>
		pid = (aword) __pi_curr;
    1318:	4b0f      	ldr	r3, [pc, #60]	; (1358 <kill+0x44>)
    131a:	6818      	ldr	r0, [r3, #0]
	j = NULL;
    131c:	2300      	movs	r3, #0
	for_all_tasks (i) {
    131e:	490f      	ldr	r1, [pc, #60]	; (135c <kill+0x48>)
    1320:	680c      	ldr	r4, [r1, #0]
    1322:	b91c      	cbnz	r4, 132c <kill+0x18>
	syserror (EREQPAR, "kpi");
    1324:	2003      	movs	r0, #3
    1326:	490e      	ldr	r1, [pc, #56]	; (1360 <kill+0x4c>)
    1328:	f7ff f8b0 	bl	48c <__pi_syserror>
		if ((aword)i == pid) {
    132c:	4284      	cmp	r4, r0
				__PCB = i->Next;
    132e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		if ((aword)i == pid) {
    1330:	d10e      	bne.n	1350 <kill+0x3c>
			if (j == NULL)
    1332:	b95b      	cbnz	r3, 134c <kill+0x38>
				__PCB = i->Next;
    1334:	600a      	str	r2, [r1, #0]
			killev (i);
    1336:	4620      	mov	r0, r4
    1338:	f7ff fdb6 	bl	ea8 <killev>
			ufree (i);
    133c:	f7ff ffc6 	bl	12cc <__pi_free>
			if (i == __pi_curr)
    1340:	4b05      	ldr	r3, [pc, #20]	; (1358 <kill+0x44>)
    1342:	681b      	ldr	r3, [r3, #0]
    1344:	42a3      	cmp	r3, r4
    1346:	d106      	bne.n	1356 <kill+0x42>
				release;
    1348:	f7ff fc48 	bl	bdc <__pi_release>
				j->Next = i->Next;
    134c:	62da      	str	r2, [r3, #44]	; 0x2c
    134e:	e7f2      	b.n	1336 <kill+0x22>
    1350:	4623      	mov	r3, r4
				__PCB = i->Next;
    1352:	4614      	mov	r4, r2
    1354:	e7e5      	b.n	1322 <kill+0xe>
}
    1356:	bd10      	pop	{r4, pc}
    1358:	2000013c 	andcs	r0, r0, ip, lsr r1
    135c:	20000138 	andcs	r0, r0, r8, lsr r1
    1360:	00004374 	andeq	r4, r0, r4, ror r3

00001364 <__pi_malloc>:
	if (size < 8)
    1364:	2807      	cmp	r0, #7
		_size = 2;
    1366:	bf98      	it	ls
    1368:	2002      	movls	r0, #2
aword *__pi_malloc (word size) {
    136a:	b538      	push	{r3, r4, r5, lr}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    136c:	4b21      	ldr	r3, [pc, #132]	; (13f4 <__pi_malloc+0x90>)
		_size = (((aword)size) + 3) >> 2;
    136e:	bf88      	it	hi
    1370:	3003      	addhi	r0, #3
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1372:	681c      	ldr	r4, [r3, #0]
		if (m_magic (chunk) != MALLOC_MAGIC)
    1374:	4920      	ldr	r1, [pc, #128]	; (13f8 <__pi_malloc+0x94>)
		_size = (((aword)size) + 3) >> 2;
    1376:	bf88      	it	hi
    1378:	0880      	lsrhi	r0, r0, #2
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    137a:	b94c      	cbnz	r4, 1390 <__pi_malloc+0x2c>
		if (mevent [MA_NP] . nfail != 255)
    137c:	4a1f      	ldr	r2, [pc, #124]	; (13fc <__pi_malloc+0x98>)
    137e:	7853      	ldrb	r3, [r2, #1]
    1380:	2bff      	cmp	r3, #255	; 0xff
    1382:	d001      	beq.n	1388 <__pi_malloc+0x24>
			mevent [MA_NP] . nfail ++;
    1384:	3301      	adds	r3, #1
    1386:	7053      	strb	r3, [r2, #1]
		mnfree [MA_NP] = 0;
    1388:	2200      	movs	r2, #0
    138a:	4b1d      	ldr	r3, [pc, #116]	; (1400 <__pi_malloc+0x9c>)
    138c:	601a      	str	r2, [r3, #0]
	return chunk;
    138e:	e02f      	b.n	13f0 <__pi_malloc+0x8c>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1390:	6862      	ldr	r2, [r4, #4]
    1392:	428a      	cmp	r2, r1
    1394:	d003      	beq.n	139e <__pi_malloc+0x3a>
			syserror (EMALLOC, "malc");
    1396:	2006      	movs	r0, #6
    1398:	491a      	ldr	r1, [pc, #104]	; (1404 <__pi_malloc+0xa0>)
    139a:	f7ff f877 	bl	48c <__pi_syserror>
		if (m_size (chunk) >= _size)
    139e:	e954 5201 	ldrd	r5, r2, [r4, #-4]
    13a2:	4285      	cmp	r5, r0
    13a4:	d202      	bcs.n	13ac <__pi_malloc+0x48>
		chunk = m_nextp (chunk)) {
    13a6:	4623      	mov	r3, r4
    13a8:	4614      	mov	r4, r2
    13aa:	e7e6      	b.n	137a <__pi_malloc+0x16>
		m_setnextp (cc, m_nextp (chunk));
    13ac:	601a      	str	r2, [r3, #0]
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    13ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
    13b2:	1a1b      	subs	r3, r3, r0
    13b4:	2b08      	cmp	r3, #8
    13b6:	d909      	bls.n	13cc <__pi_malloc+0x68>
			m_size (chunk) = _size;
    13b8:	f844 0c04 	str.w	r0, [r4, #-4]
			cc = chunk + _size + m_hdrlen;
    13bc:	3001      	adds	r0, #1
    13be:	eb04 0080 	add.w	r0, r4, r0, lsl #2
			m_size (cc) = waste - m_hdrlen;
    13c2:	3b01      	subs	r3, #1
    13c4:	f840 3c04 	str.w	r3, [r0, #-4]
			QFREE;
    13c8:	f7ff fd8c 	bl	ee4 <qfree>
		mevent [MA_NP] . nfail = 0;
    13cc:	2200      	movs	r2, #0
    13ce:	4b0b      	ldr	r3, [pc, #44]	; (13fc <__pi_malloc+0x98>)
		mcfree [MA_NP] -= m_size (chunk);
    13d0:	490d      	ldr	r1, [pc, #52]	; (1408 <__pi_malloc+0xa4>)
		mevent [MA_NP] . nfail = 0;
    13d2:	705a      	strb	r2, [r3, #1]
		mcfree [MA_NP] -= m_size (chunk);
    13d4:	f854 2c04 	ldr.w	r2, [r4, #-4]
    13d8:	680b      	ldr	r3, [r1, #0]
    13da:	1a9b      	subs	r3, r3, r2
    13dc:	600b      	str	r3, [r1, #0]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    13de:	4908      	ldr	r1, [pc, #32]	; (1400 <__pi_malloc+0x9c>)
		m_size (chunk) |= MALLOC_UMASK;
    13e0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		if (mnfree [MA_NP] > mcfree [MA_NP])
    13e4:	6808      	ldr	r0, [r1, #0]
		m_size (chunk) |= MALLOC_UMASK;
    13e6:	f844 2c04 	str.w	r2, [r4, #-4]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    13ea:	4283      	cmp	r3, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    13ec:	bf38      	it	cc
    13ee:	600b      	strcc	r3, [r1, #0]
}
    13f0:	4620      	mov	r0, r4
    13f2:	bd38      	pop	{r3, r4, r5, pc}
    13f4:	20000174 	andcs	r0, r0, r4, ror r1
    13f8:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    13fc:	2000016c 	andcs	r0, r0, ip, ror #2
    1400:	20000170 	andcs	r0, r0, r0, ror r1
    1404:	00004378 	andeq	r4, r0, r8, ror r3
    1408:	20000168 	andcs	r0, r0, r8, ror #2

0000140c <__pi_fork>:
aword __pi_fork (fsmcode func, aword data) {
    140c:	b538      	push	{r3, r4, r5, lr}
    140e:	4605      	mov	r5, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1410:	2030      	movs	r0, #48	; 0x30
aword __pi_fork (fsmcode func, aword data) {
    1412:	460c      	mov	r4, r1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1414:	f7ff ffa6 	bl	1364 <__pi_malloc>
    1418:	2300      	movs	r3, #0
    141a:	b138      	cbz	r0, 142c <__pi_fork+0x20>
		if ((j = __PCB) == NULL)
    141c:	4a07      	ldr	r2, [pc, #28]	; (143c <__pi_fork+0x30>)
	i->Status = 0;
    141e:	8003      	strh	r3, [r0, #0]
	i->Next = NULL;
    1420:	62c3      	str	r3, [r0, #44]	; 0x2c
		if ((j = __PCB) == NULL)
    1422:	6813      	ldr	r3, [r2, #0]
	i->data = data;
    1424:	e9c0 5401 	strd	r5, r4, [r0, #4]
		if ((j = __PCB) == NULL)
    1428:	b90b      	cbnz	r3, 142e <__pi_fork+0x22>
			__PCB = i;
    142a:	6010      	str	r0, [r2, #0]
}
    142c:	bd38      	pop	{r3, r4, r5, pc}
			for (; j->Next != NULL; j = j->Next);
    142e:	461a      	mov	r2, r3
    1430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1432:	2b00      	cmp	r3, #0
    1434:	d1fb      	bne.n	142e <__pi_fork+0x22>
			j->Next = i;
    1436:	62d0      	str	r0, [r2, #44]	; 0x2c
	return (aword) i;
    1438:	e7f8      	b.n	142c <__pi_fork+0x20>
    143a:	bf00      	nop
    143c:	20000138 	andcs	r0, r0, r8, lsr r1

00001440 <__pi_waitmem>:
	if (mevent [MA_NP] . nwait != 255)
    1440:	4a04      	ldr	r2, [pc, #16]	; (1454 <__pi_waitmem+0x14>)
void __pi_waitmem (word state) {
    1442:	4601      	mov	r1, r0
	if (mevent [MA_NP] . nwait != 255)
    1444:	7813      	ldrb	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    1446:	4803      	ldr	r0, [pc, #12]	; (1454 <__pi_waitmem+0x14>)
	if (mevent [MA_NP] . nwait != 255)
    1448:	2bff      	cmp	r3, #255	; 0xff
		mevent [MA_NP] . nwait ++;
    144a:	bf1c      	itt	ne
    144c:	3301      	addne	r3, #1
    144e:	7013      	strbne	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    1450:	f7ff be24 	b.w	109c <__pi_wait>
    1454:	2000016c 	andcs	r0, r0, ip, ror #2

00001458 <diag>:

#endif	/* dbg_level */

#if	DIAG_MESSAGES

void diag (const char *mess, ...) {
    1458:	b40f      	push	{r0, r1, r2, r3}
    145a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    145e:	ab0a      	add	r3, sp, #40	; 0x28
    1460:	f853 5b04 	ldr.w	r5, [r3], #4
	sint bc;
	word v;
	byte is;

	va_start (ap, mess);
	diag_disable_int (a, is);
    1464:	2015      	movs	r0, #21
	va_start (ap, mess);
    1466:	9301      	str	r3, [sp, #4]
	diag_disable_int (a, is);
    1468:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    146c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
				d = (bc == 16) ? 10000 : 1000000000;
				while (1) {
					// Strip initial zeros
					v = (word) (val / d);
					if (v || d == 1) break;
					d /= 10;
    1470:	270a      	movs	r7, #10
	diag_disable_int (a, is);
    1472:	695b      	ldr	r3, [r3, #20]
    1474:	4798      	blx	r3
				d = (bc == 16) ? 10000 : 1000000000;
    1476:	f8df 8118 	ldr.w	r8, [pc, #280]	; 1590 <diag+0x138>
	while (*mess != '\0') {
    147a:	7828      	ldrb	r0, [r5, #0]
    147c:	b9a8      	cbnz	r0, 14aa <diag+0x52>
		} else {
			dgout (*mess++);
		}
	}

	dgout ('\r');
    147e:	200d      	movs	r0, #13
    1480:	f7ff fd70 	bl	f64 <dgout>
	dgout ('\n');
    1484:	200a      	movs	r0, #10
    1486:	f7ff fd6d 	bl	f64 <dgout>
    148a:	4a42      	ldr	r2, [pc, #264]	; (1594 <diag+0x13c>)
    148c:	6993      	ldr	r3, [r2, #24]
	diag_wait (a);
    148e:	071b      	lsls	r3, r3, #28
    1490:	d4fc      	bmi.n	148c <diag+0x34>
	diag_enable_int (a, is);
    1492:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1496:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
    149a:	2015      	movs	r0, #21
    149c:	691b      	ldr	r3, [r3, #16]
    149e:	4798      	blx	r3
}
    14a0:	b003      	add	sp, #12
    14a2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    14a6:	b004      	add	sp, #16
    14a8:	4770      	bx	lr
		if (*mess == '%') {
    14aa:	2825      	cmp	r0, #37	; 0x25
			mess++;
    14ac:	f105 0601 	add.w	r6, r5, #1
		if (*mess == '%') {
    14b0:	d16b      	bne.n	158a <diag+0x132>
			if (*mess == 'l') {
    14b2:	786b      	ldrb	r3, [r5, #1]
    14b4:	2b6c      	cmp	r3, #108	; 0x6c
    14b6:	9b01      	ldr	r3, [sp, #4]
				mess++;
    14b8:	bf08      	it	eq
    14ba:	1cae      	addeq	r6, r5, #2
    14bc:	f853 1b04 	ldr.w	r1, [r3], #4
				bc = 32;
    14c0:	bf08      	it	eq
    14c2:	2520      	moveq	r5, #32
				val = va_arg (ap, lword);
    14c4:	9301      	str	r3, [sp, #4]
			switch (*mess) {
    14c6:	7833      	ldrb	r3, [r6, #0]
				bc = 16;
    14c8:	bf18      	it	ne
    14ca:	2510      	movne	r5, #16
			switch (*mess) {
    14cc:	2b75      	cmp	r3, #117	; 0x75
				val = va_arg (ap, lword);
    14ce:	460c      	mov	r4, r1
			switch (*mess) {
    14d0:	d04e      	beq.n	1570 <diag+0x118>
    14d2:	d80a      	bhi.n	14ea <diag+0x92>
    14d4:	2b64      	cmp	r3, #100	; 0x64
    14d6:	d01c      	beq.n	1512 <diag+0xba>
    14d8:	2b73      	cmp	r3, #115	; 0x73
    14da:	d052      	beq.n	1582 <diag+0x12a>
				dgout ('%');
    14dc:	2025      	movs	r0, #37	; 0x25
    14de:	f7ff fd41 	bl	f64 <dgout>
				dgout (*mess);
    14e2:	7830      	ldrb	r0, [r6, #0]
    14e4:	f7ff fd3e 	bl	f64 <dgout>
    14e8:	e010      	b.n	150c <diag+0xb4>
			switch (*mess) {
    14ea:	2b78      	cmp	r3, #120	; 0x78
    14ec:	d1f6      	bne.n	14dc <diag+0x84>
    14ee:	2400      	movs	r4, #0
					v = __pi_hex_enc_table [
    14f0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 1598 <diag+0x140>
					i += 4;
    14f4:	3404      	adds	r4, #4
					(val >> (bc - i)) & 0xf];
    14f6:	1b2b      	subs	r3, r5, r4
    14f8:	fa21 f303 	lsr.w	r3, r1, r3
    14fc:	f003 030f 	and.w	r3, r3, #15
					dgout (v);
    1500:	f819 0003 	ldrb.w	r0, [r9, r3]
    1504:	f7ff fd2e 	bl	f64 <dgout>
				while (i < bc) {
    1508:	42a5      	cmp	r5, r4
    150a:	dcf3      	bgt.n	14f4 <diag+0x9c>
			mess++;
    150c:	3601      	adds	r6, #1
					d /= 10;
    150e:	4635      	mov	r5, r6
    1510:	e7b3      	b.n	147a <diag+0x22>
				if ((val >> (bc - 1)) & 1) {
    1512:	1e6b      	subs	r3, r5, #1
    1514:	fa21 f303 	lsr.w	r3, r1, r3
    1518:	07da      	lsls	r2, r3, #31
    151a:	d509      	bpl.n	1530 <diag+0xd8>
					dgout ('-');
    151c:	202d      	movs	r0, #45	; 0x2d
    151e:	f7ff fd21 	bl	f64 <dgout>
					if (bc == 16)
    1522:	2d10      	cmp	r5, #16
						val |= 0xffff0000;
    1524:	bf04      	itt	eq
    1526:	ea6f 4401 	mvneq.w	r4, r1, lsl #16
    152a:	ea6f 4414 	mvneq.w	r4, r4, lsr #16
					val = ~val + 1;
    152e:	4264      	negs	r4, r4
				d = (bc == 16) ? 10000 : 1000000000;
    1530:	f242 7110 	movw	r1, #10000	; 0x2710
    1534:	2d10      	cmp	r5, #16
    1536:	bf18      	it	ne
    1538:	4641      	movne	r1, r8
					v = (word) (val / d);
    153a:	fbb4 f5f1 	udiv	r5, r4, r1
    153e:	b2ad      	uxth	r5, r5
					if (v || d == 1) break;
    1540:	b935      	cbnz	r5, 1550 <diag+0xf8>
    1542:	2901      	cmp	r1, #1
    1544:	d004      	beq.n	1550 <diag+0xf8>
					d /= 10;
    1546:	fbb1 f1f7 	udiv	r1, r1, r7
					v = (word) (val / d);
    154a:	e7f6      	b.n	153a <diag+0xe2>
				d = (bc == 16) ? 10000 : 1000000000;
    154c:	4910      	ldr	r1, [pc, #64]	; (1590 <diag+0x138>)
    154e:	e7f4      	b.n	153a <diag+0xe2>
					dgout (v + '0');
    1550:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1554:	b280      	uxth	r0, r0
    1556:	f7ff fd05 	bl	f64 <dgout>
					if (d == 0) break;
    155a:	2909      	cmp	r1, #9
					d /= 10;
    155c:	fbb1 f3f7 	udiv	r3, r1, r7
					val = val - (v * d);
    1560:	fb01 4415 	mls	r4, r1, r5, r4
					if (d == 0) break;
    1564:	d9d2      	bls.n	150c <diag+0xb4>
					v = (word) (val / d);
    1566:	fbb4 f5f3 	udiv	r5, r4, r3
					d /= 10;
    156a:	4619      	mov	r1, r3
					v = (word) (val / d);
    156c:	b2ad      	uxth	r5, r5
					dgout (v + '0');
    156e:	e7ef      	b.n	1550 <diag+0xf8>
				if (bc == 16)
    1570:	2d10      	cmp	r5, #16
    1572:	d1eb      	bne.n	154c <diag+0xf4>
					val &= 0xffff;
    1574:	b28c      	uxth	r4, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1576:	f242 7110 	movw	r1, #10000	; 0x2710
    157a:	e7de      	b.n	153a <diag+0xe2>
					dgout (*s);
    157c:	f7ff fcf2 	bl	f64 <dgout>
					s++;
    1580:	3101      	adds	r1, #1
				while (*s != '\0') {
    1582:	7808      	ldrb	r0, [r1, #0]
    1584:	2800      	cmp	r0, #0
    1586:	d1f9      	bne.n	157c <diag+0x124>
    1588:	e7c0      	b.n	150c <diag+0xb4>
			dgout (*mess++);
    158a:	f7ff fceb 	bl	f64 <dgout>
    158e:	e7be      	b.n	150e <diag+0xb6>
    1590:	3b9aca00 	blcc	fe6b3d98 <_estack+0xde6aed98>
    1594:	40001000 	andmi	r1, r0, r0
    1598:	0000437d 	andeq	r4, r0, sp, ror r3

0000159c <lrnd>:
// ============================================================================
// High-quality RNG (oh, well, as high as we can afford) ======================
// ============================================================================
#if RANDOM_NUMBER_GENERATOR > 1
lword lrnd () {
	__pi_seed = __pi_seed * 1103515245 + 12345;
    159c:	f243 0339 	movw	r3, #12345	; 0x3039
    15a0:	4a04      	ldr	r2, [pc, #16]	; (15b4 <lrnd+0x18>)
    15a2:	4905      	ldr	r1, [pc, #20]	; (15b8 <lrnd+0x1c>)
    15a4:	6810      	ldr	r0, [r2, #0]
    15a6:	fb01 3300 	mla	r3, r1, r0, r3
    15aa:	6013      	str	r3, [r2, #0]
	return __pi_seed
#if ENTROPY_COLLECTION
	^ entropy
    15ac:	4a03      	ldr	r2, [pc, #12]	; (15bc <lrnd+0x20>)
    15ae:	6810      	ldr	r0, [r2, #0]
#endif
	;
}
    15b0:	4058      	eors	r0, r3
    15b2:	4770      	bx	lr
    15b4:	20000000 	andcs	r0, r0, r0
    15b8:	41c64e6d 	bicmi	r4, r6, sp, ror #28
    15bc:	20000160 	andcs	r0, r0, r0, ror #2

000015c0 <enq>:
#define	deqhk(a)	CNOP
#endif

// ============================================================================

__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    15c0:	b538      	push	{r3, r4, r5, lr}
/*
 * Inserts a buffer into a queue
 */
	sysassert (p->attributes.b.queued == 0, "tcv01");
    15c2:	7a8b      	ldrb	r3, [r1, #10]
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    15c4:	4605      	mov	r5, r0
	sysassert (p->attributes.b.queued == 0, "tcv01");
    15c6:	07da      	lsls	r2, r3, #31
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    15c8:	460c      	mov	r4, r1
	sysassert (p->attributes.b.queued == 0, "tcv01");
    15ca:	d503      	bpl.n	15d4 <enq+0x14>
    15cc:	200a      	movs	r0, #10
    15ce:	490e      	ldr	r1, [pc, #56]	; (1608 <enq+0x48>)
    15d0:	f7fe ff5c 	bl	48c <__pi_syserror>
	if (q_empty (q))
    15d4:	6803      	ldr	r3, [r0, #0]
    15d6:	4283      	cmp	r3, r0
    15d8:	d101      	bne.n	15de <enq+0x1e>
		trigger (q);
    15da:	f7ff fd79 	bl	10d0 <__pi_trigger>
	if (p->attributes.b.urgent) {
    15de:	7aa3      	ldrb	r3, [r4, #10]
    15e0:	075b      	lsls	r3, r3, #29
    15e2:	d50a      	bpl.n	15fa <enq+0x3a>
		// At the front
		p->u.bqueue.next = q->next;
    15e4:	682b      	ldr	r3, [r5, #0]
		p->u.bqueue.prev = q;
    15e6:	e9c4 3500 	strd	r3, r5, [r4]
		q->next->prev = (qitem_t*) p;
    15ea:	682b      	ldr	r3, [r5, #0]
    15ec:	605c      	str	r4, [r3, #4]
		q->next = (qitem_t*) p;
    15ee:	602c      	str	r4, [r5, #0]
		p->u.bqueue.next = q;
		p->u.bqueue.prev = q->prev;
		q->prev->next = (qitem_t*) p;
		q->prev = (qitem_t*) p;
	}
	p->attributes.b.queued = 1;
    15f0:	7aa3      	ldrb	r3, [r4, #10]
    15f2:	f043 0301 	orr.w	r3, r3, #1
    15f6:	72a3      	strb	r3, [r4, #10]
}
    15f8:	bd38      	pop	{r3, r4, r5, pc}
		p->u.bqueue.next = q;
    15fa:	6025      	str	r5, [r4, #0]
		p->u.bqueue.prev = q->prev;
    15fc:	686b      	ldr	r3, [r5, #4]
    15fe:	6063      	str	r3, [r4, #4]
		q->prev->next = (qitem_t*) p;
    1600:	601c      	str	r4, [r3, #0]
		q->prev = (qitem_t*) p;
    1602:	606c      	str	r4, [r5, #4]
    1604:	e7f4      	b.n	15f0 <enq+0x30>
    1606:	bf00      	nop
    1608:	0000438d 	andeq	r4, r0, sp, lsl #7

0000160c <apb>:
/*
 * Forced implicit packet dropping removed. Plugins will have to drop
 * packets explicitly (if they really want to).
 */

__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    160c:	b510      	push	{r4, lr}
    160e:	4604      	mov	r4, r0
/* ========================================= */
/* Allocates a packet buffer size bytes long */
/* ========================================= */

	hblock_t *p;
	word cs = size + hblenb;
    1610:	300c      	adds	r0, #12

	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1612:	b280      	uxth	r0, r0
    1614:	f7ff fea6 	bl	1364 <__pi_malloc>
    1618:	b110      	cbz	r0, 1620 <apb+0x14>

#if	TCV_HOOKS
	p -> hptr = NULL;
#endif
	p -> length = size;
	p -> attributes . value = 0;
    161a:	2300      	movs	r3, #0
	p -> length = size;
    161c:	8104      	strh	r4, [r0, #8]
	p -> attributes . value = 0;
    161e:	8143      	strh	r3, [r0, #10]
#endif
	return p;
	/*
	 * Note that this doesn't initialize the plugin/phys/session stuff.
	 */
}
    1620:	bd10      	pop	{r4, pc}

00001622 <deq>:
	if (p->attributes.b.queued) {
    1622:	7a83      	ldrb	r3, [r0, #10]
    1624:	07db      	lsls	r3, r3, #31
    1626:	d508      	bpl.n	163a <deq+0x18>
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1628:	e9d0 2300 	ldrd	r2, r3, [r0]
    162c:	6053      	str	r3, [r2, #4]
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    162e:	6802      	ldr	r2, [r0, #0]
    1630:	601a      	str	r2, [r3, #0]
		p->attributes.b.queued = 0;
    1632:	7a83      	ldrb	r3, [r0, #10]
    1634:	f36f 0300 	bfc	r3, #0, #1
    1638:	7283      	strb	r3, [r0, #10]
}
    163a:	4770      	bx	lr

0000163c <rlp>:
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    163c:	b508      	push	{r3, lr}
	deq (p);	// Remove from queue
    163e:	f7ff fff0 	bl	1622 <deq>
}
    1642:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tfree ((address)p);
    1646:	f7ff be41 	b.w	12cc <__pi_free>
	...

0000164c <dispose>:
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    164c:	b510      	push	{r4, lr}
	switch (dv) {
    164e:	3901      	subs	r1, #1
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1650:	4604      	mov	r4, r0
	deq (p);	// Soft dequeue, timer and hook left intact
    1652:	f7ff ffe6 	bl	1622 <deq>
	switch (dv) {
    1656:	2904      	cmp	r1, #4
    1658:	d832      	bhi.n	16c0 <dispose+0x74>
    165a:	e8df f001 	tbb	[pc, r1]
    165e:	1d03072d 	stcne	7, cr0, [r3, #-180]	; 0xffffff4c
    1662:	7a830019 	bvc	fe0c16ce <_estack+0xde0bc6ce>
			p->attributes.b.urgent = 1;
    1666:	f043 0304 	orr.w	r3, r3, #4
    166a:	7283      	strb	r3, [r0, #10]
			verify_ses (p, "dispose ses");
    166c:	8963      	ldrh	r3, [r4, #10]
    166e:	f3c3 03c6 	ubfx	r3, r3, #3, #7
    1672:	2b07      	cmp	r3, #7
    1674:	d803      	bhi.n	167e <dispose+0x32>
    1676:	4a13      	ldr	r2, [pc, #76]	; (16c4 <dispose+0x78>)
    1678:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    167c:	b918      	cbnz	r0, 1686 <dispose+0x3a>
    167e:	4912      	ldr	r1, [pc, #72]	; (16c8 <dispose+0x7c>)
			verify_phy (p, "dispose phy");
    1680:	200a      	movs	r0, #10
    1682:	f7fe ff03 	bl	48c <__pi_syserror>
			enq (&(descriptors [p->attributes.b.session]->rqueue),
    1686:	4621      	mov	r1, r4
}
    1688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			enq (oqueues [p->attributes.b.phys], p);
    168c:	f7ff bf98 	b.w	15c0 <enq>
			p->attributes.b.urgent = 1;
    1690:	7a83      	ldrb	r3, [r0, #10]
    1692:	f043 0304 	orr.w	r3, r3, #4
    1696:	7283      	strb	r3, [r0, #10]
			verify_phy (p, "dispose phy");
    1698:	7ae2      	ldrb	r2, [r4, #11]
    169a:	2a5f      	cmp	r2, #95	; 0x5f
    169c:	ea4f 1352 	mov.w	r3, r2, lsr #5
    16a0:	d803      	bhi.n	16aa <dispose+0x5e>
    16a2:	4a0a      	ldr	r2, [pc, #40]	; (16cc <dispose+0x80>)
    16a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    16a8:	b90a      	cbnz	r2, 16ae <dispose+0x62>
    16aa:	4909      	ldr	r1, [pc, #36]	; (16d0 <dispose+0x84>)
    16ac:	e7e8      	b.n	1680 <dispose+0x34>
			enq (oqueues [p->attributes.b.phys], p);
    16ae:	4a09      	ldr	r2, [pc, #36]	; (16d4 <dispose+0x88>)
    16b0:	4621      	mov	r1, r4
    16b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    16b6:	e7e7      	b.n	1688 <dispose+0x3c>
}
    16b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			rlp (p);
    16bc:	f7ff bfbe 	b.w	163c <rlp>
}
    16c0:	bd10      	pop	{r4, pc}
    16c2:	bf00      	nop
    16c4:	20000178 	andcs	r0, r0, r8, ror r1
    16c8:	00004393 	muleq	r0, r3, r3
    16cc:	200001a4 	andcs	r0, r0, r4, lsr #3
    16d0:	0000439f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
    16d4:	20000198 	mulcs	r0, r8, r1

000016d8 <tcv_endp>:
		/* ===================================== */
		/* Functions callable by the application */
		/* ===================================== */
/* ---------------------------------------------------------------------- */

__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    16d8:	b510      	push	{r4, lr}
 * somewhere or deallocated.
 */
	hblock_t *b;

	b = header (p);
	if (b->attributes.b.outgoing) {
    16da:	f810 2c02 	ldrb.w	r2, [r0, #-2]
	b = header (p);
    16de:	f1a0 040c 	sub.w	r4, r0, #12
	if (b->attributes.b.outgoing) {
    16e2:	0792      	lsls	r2, r2, #30
    16e4:	d522      	bpl.n	172c <tcv_endp+0x54>
		verify_ses (b, "tcv02");
    16e6:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    16ea:	f3c2 02c6 	ubfx	r2, r2, #3, #7
    16ee:	2a07      	cmp	r2, #7
    16f0:	d803      	bhi.n	16fa <tcv_endp+0x22>
    16f2:	4911      	ldr	r1, [pc, #68]	; (1738 <tcv_endp+0x60>)
    16f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    16f8:	b91a      	cbnz	r2, 1702 <tcv_endp+0x2a>
    16fa:	4910      	ldr	r1, [pc, #64]	; (173c <tcv_endp+0x64>)
		verify_plg (b, tcv_out, "tcv03");
    16fc:	200a      	movs	r0, #10
    16fe:	f7fe fec5 	bl	48c <__pi_syserror>
    1702:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    1706:	f3c3 0382 	ubfx	r3, r3, #2, #3
    170a:	2b02      	cmp	r3, #2
    170c:	d805      	bhi.n	171a <tcv_endp+0x42>
    170e:	4a0c      	ldr	r2, [pc, #48]	; (1740 <tcv_endp+0x68>)
    1710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1714:	b10b      	cbz	r3, 171a <tcv_endp+0x42>
    1716:	691b      	ldr	r3, [r3, #16]
    1718:	b90b      	cbnz	r3, 171e <tcv_endp+0x46>
    171a:	490a      	ldr	r1, [pc, #40]	; (1744 <tcv_endp+0x6c>)
    171c:	e7ee      	b.n	16fc <tcv_endp+0x24>
		dispose (b, plugins [b->attributes.b.plugin] ->
    171e:	4798      	blx	r3
    1720:	4601      	mov	r1, r0
    1722:	4620      	mov	r0, r4
		 * This is a received packet - just drop it, no need to verify
		 * session, can be legitimately invoked after the session has
		 * been closed,
		 */
		rlp (b);
}
    1724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dispose (b, plugins [b->attributes.b.plugin] ->
    1728:	f7ff bf90 	b.w	164c <dispose>
		rlp (b);
    172c:	4620      	mov	r0, r4
}
    172e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rlp (b);
    1732:	f7ff bf83 	b.w	163c <rlp>
    1736:	bf00      	nop
    1738:	20000178 	andcs	r0, r0, r8, ror r1
    173c:	000043ab 	andeq	r4, r0, fp, lsr #7
    1740:	200001bc 			; <UNDEFINED> instruction: 0x200001bc
    1744:	000043b1 			; <UNDEFINED> instruction: 0x000043b1

00001748 <tcv_open>:
#else
// ============================================================================

// Non-blocking open and close

__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1748:	b40c      	push	{r2, r3}
    174a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    174e:	ab0a      	add	r3, sp, #40	; 0x28
    1750:	f853 8b04 	ldr.w	r8, [r3], #4
	va_list		ap;
	va_start (ap, plid);

#if DIAG_MESSAGES > 1
	/* Check if we have the plugin and the phy */
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1754:	2902      	cmp	r1, #2
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1756:	460f      	mov	r7, r1
	va_start (ap, plid);
    1758:	9301      	str	r3, [sp, #4]
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    175a:	d80b      	bhi.n	1774 <tcv_open+0x2c>
    175c:	4b24      	ldr	r3, [pc, #144]	; (17f0 <tcv_open+0xa8>)
    175e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    1762:	b13b      	cbz	r3, 1774 <tcv_open+0x2c>
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1764:	f1b8 0f02 	cmp.w	r8, #2
    1768:	d804      	bhi.n	1774 <tcv_open+0x2c>
    176a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 17f4 <tcv_open+0xac>
    176e:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
    1772:	b91b      	cbnz	r3, 177c <tcv_open+0x34>
			syserror (ENODEVICE, "tcv04");
    1774:	2001      	movs	r0, #1
    1776:	4920      	ldr	r1, [pc, #128]	; (17f8 <tcv_open+0xb0>)
	if (fd == TCV_MAX_DESC)
		return ERROR;

	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
	if (s == NULL)
		syserror (EMALLOC, "tcv05");
    1778:	f7fe fe88 	bl	48c <__pi_syserror>
	attp.b.outgoing = 1;
    177c:	f008 0307 	and.w	r3, r8, #7
    1780:	029b      	lsls	r3, r3, #10
    1782:	f043 0302 	orr.w	r3, r3, #2
    1786:	ea43 3541 	orr.w	r5, r3, r1, lsl #13
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    178a:	4b1c      	ldr	r3, [pc, #112]	; (17fc <tcv_open+0xb4>)
    178c:	2600      	movs	r6, #0
    178e:	469a      	mov	sl, r3
		if (descriptors [fd] == NULL)
    1790:	f853 2b04 	ldr.w	r2, [r3], #4
    1794:	b312      	cbz	r2, 17dc <tcv_open+0x94>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1796:	3601      	adds	r6, #1
    1798:	2e08      	cmp	r6, #8
    179a:	d1f9      	bne.n	1790 <tcv_open+0x48>
		return ERROR;
    179c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		return ERROR;
	}

	descriptors [fd] = s;
	return fd;
}
    17a0:	4630      	mov	r0, r6
    17a2:	b002      	add	sp, #8
    17a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    17a8:	b002      	add	sp, #8
    17aa:	4770      	bx	lr
	s->attpattern.b.session = fd;
    17ac:	462b      	mov	r3, r5
    17ae:	f366 03c9 	bfi	r3, r6, #3, #7
	descriptors [fd] = s;
    17b2:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
	s->attpattern.b.session = fd;
    17b6:	8123      	strh	r3, [r4, #8]
	q_init (&(s->rqueue));
    17b8:	e9c4 4400 	strd	r4, r4, [r4]
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    17bc:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
    17c0:	681b      	ldr	r3, [r3, #0]
    17c2:	b913      	cbnz	r3, 17ca <tcv_open+0x82>
    17c4:	200a      	movs	r0, #10
    17c6:	490e      	ldr	r1, [pc, #56]	; (1800 <tcv_open+0xb8>)
    17c8:	e7d6      	b.n	1778 <tcv_open+0x30>
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    17ca:	4631      	mov	r1, r6
    17cc:	4638      	mov	r0, r7
    17ce:	9a01      	ldr	r2, [sp, #4]
    17d0:	4798      	blx	r3
    17d2:	2800      	cmp	r0, #0
    17d4:	d1e2      	bne.n	179c <tcv_open+0x54>
	descriptors [fd] = s;
    17d6:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
	return fd;
    17da:	e7e1      	b.n	17a0 <tcv_open+0x58>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    17dc:	200c      	movs	r0, #12
    17de:	f7ff fdc1 	bl	1364 <__pi_malloc>
	if (s == NULL)
    17e2:	4604      	mov	r4, r0
    17e4:	2800      	cmp	r0, #0
    17e6:	d1e1      	bne.n	17ac <tcv_open+0x64>
		syserror (EMALLOC, "tcv05");
    17e8:	2006      	movs	r0, #6
    17ea:	4906      	ldr	r1, [pc, #24]	; (1804 <tcv_open+0xbc>)
    17ec:	e7c4      	b.n	1778 <tcv_open+0x30>
    17ee:	bf00      	nop
    17f0:	20000198 	mulcs	r0, r8, r1
    17f4:	200001bc 			; <UNDEFINED> instruction: 0x200001bc
    17f8:	000043b7 			; <UNDEFINED> instruction: 0x000043b7
    17fc:	20000178 	andcs	r0, r0, r8, ror r1
    1800:	000043c3 	andeq	r4, r0, r3, asr #7
    1804:	000043bd 			; <UNDEFINED> instruction: 0x000043bd

00001808 <tcv_plug>:

__PUBLF (PicOSNode, int, tcv_plug) (int ord, const tcvplug_t *pl) {
/*
 * This is one way now. Later we may implement switching plugs on the fly.
 */
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1808:	2802      	cmp	r0, #2
    180a:	d809      	bhi.n	1820 <tcv_plug+0x18>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    180c:	4b06      	ldr	r3, [pc, #24]	; (1828 <tcv_plug+0x20>)
    180e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1812:	b10a      	cbz	r2, 1818 <tcv_plug+0x10>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1814:	428a      	cmp	r2, r1
    1816:	d103      	bne.n	1820 <tcv_plug+0x18>
		return ERROR;

	plugins [ord] = pl;
    1818:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return 0;
    181c:	2000      	movs	r0, #0
    181e:	4770      	bx	lr
		return ERROR;
    1820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1824:	4770      	bx	lr
    1826:	bf00      	nop
    1828:	200001bc 			; <UNDEFINED> instruction: 0x200001bc

0000182c <tcv_rnp>:
 */
	address p;
	hblock_t *b;
	qhead_t *rq;

	verify_fds (fd, "tcv10");
    182c:	2908      	cmp	r1, #8
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    182e:	b538      	push	{r3, r4, r5, lr}
    1830:	4603      	mov	r3, r0
	verify_fds (fd, "tcv10");
    1832:	d803      	bhi.n	183c <tcv_rnp+0x10>
    1834:	4a19      	ldr	r2, [pc, #100]	; (189c <tcv_rnp+0x70>)
    1836:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    183a:	b918      	cbnz	r0, 1844 <tcv_rnp+0x18>
    183c:	4918      	ldr	r1, [pc, #96]	; (18a0 <tcv_rnp+0x74>)
	deqtm (b);	// ... and clear its timer

	/* Packet pointer */
	p = ((address)(b + 1));
	/* Set the pointers to application data */
	verify_plg (b, tcv_frm, "tcv11");
    183e:	200a      	movs	r0, #10
    1840:	f7fe fe24 	bl	48c <__pi_syserror>
	b = q_first (rq);
    1844:	6804      	ldr	r4, [r0, #0]
	if (q_end (b, rq)) {
    1846:	42a0      	cmp	r0, r4
    1848:	d108      	bne.n	185c <tcv_rnp+0x30>
		if (state != WNONE) {
    184a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    184e:	4293      	cmp	r3, r2
    1850:	d021      	beq.n	1896 <tcv_rnp+0x6a>
			when (rq, state);
    1852:	4619      	mov	r1, r3
    1854:	f7ff fc22 	bl	109c <__pi_wait>
			release;
    1858:	f7ff f9c0 	bl	bdc <__pi_release>
	deq (b);	// Dequeue the packet ...
    185c:	4620      	mov	r0, r4
    185e:	f7ff fee0 	bl	1622 <deq>
	verify_plg (b, tcv_frm, "tcv11");
    1862:	7ae3      	ldrb	r3, [r4, #11]
	p = ((address)(b + 1));
    1864:	f104 050c 	add.w	r5, r4, #12
	verify_plg (b, tcv_frm, "tcv11");
    1868:	f3c3 0382 	ubfx	r3, r3, #2, #3
    186c:	2b02      	cmp	r3, #2
    186e:	d805      	bhi.n	187c <tcv_rnp+0x50>
    1870:	4a0c      	ldr	r2, [pc, #48]	; (18a4 <tcv_rnp+0x78>)
    1872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1876:	b10b      	cbz	r3, 187c <tcv_rnp+0x50>
    1878:	68db      	ldr	r3, [r3, #12]
    187a:	b90b      	cbnz	r3, 1880 <tcv_rnp+0x54>
    187c:	490a      	ldr	r1, [pc, #40]	; (18a8 <tcv_rnp+0x7c>)
    187e:	e7de      	b.n	183e <tcv_rnp+0x12>
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    1880:	4621      	mov	r1, r4
    1882:	4628      	mov	r0, r5
    1884:	4798      	blx	r3
	/* Adjust the second pointer to look like the length */
	b->u.pointers.tail =
		b->length - b->u.pointers.head - b->u.pointers.tail;
    1886:	8823      	ldrh	r3, [r4, #0]
    1888:	8862      	ldrh	r2, [r4, #2]
    188a:	441a      	add	r2, r3
    188c:	8923      	ldrh	r3, [r4, #8]
    188e:	1a9b      	subs	r3, r3, r2
	b->u.pointers.tail =
    1890:	8063      	strh	r3, [r4, #2]
	/* OK, it seems that we are set */
	return p;
}
    1892:	4628      	mov	r0, r5
    1894:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    1896:	2500      	movs	r5, #0
    1898:	e7fb      	b.n	1892 <tcv_rnp+0x66>
    189a:	bf00      	nop
    189c:	20000178 	andcs	r0, r0, r8, ror r1
    18a0:	000043c9 	andeq	r4, r0, r9, asr #7
    18a4:	200001bc 			; <UNDEFINED> instruction: 0x200001bc
    18a8:	000043cf 	andeq	r4, r0, pc, asr #7

000018ac <tcv_wnps>:
	hblock_t *b;
	tcvadp_t ptrs;
	sesdesc_t *s;
	int eid;

	verify_fds (fd, "tcv16");
    18ac:	2908      	cmp	r1, #8
								Boolean urg) {
    18ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    18b0:	4605      	mov	r5, r0
    18b2:	4614      	mov	r4, r2
    18b4:	461e      	mov	r6, r3
	verify_fds (fd, "tcv16");
    18b6:	d803      	bhi.n	18c0 <tcv_wnps+0x14>
    18b8:	4b26      	ldr	r3, [pc, #152]	; (1954 <tcv_wnps+0xa8>)
    18ba:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    18be:	b91f      	cbnz	r7, 18c8 <tcv_wnps+0x1c>
    18c0:	4925      	ldr	r1, [pc, #148]	; (1958 <tcv_wnps+0xac>)

	s = descriptors [fd];

	verify_pld (s, tcv_frm, "tcv17");
    18c2:	200a      	movs	r0, #10
    18c4:	f7fe fde2 	bl	48c <__pi_syserror>
    18c8:	7a7b      	ldrb	r3, [r7, #9]
    18ca:	f3c3 0382 	ubfx	r3, r3, #2, #3
    18ce:	2b02      	cmp	r3, #2
    18d0:	d805      	bhi.n	18de <tcv_wnps+0x32>
    18d2:	4a22      	ldr	r2, [pc, #136]	; (195c <tcv_wnps+0xb0>)
    18d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    18d8:	b10b      	cbz	r3, 18de <tcv_wnps+0x32>
    18da:	68db      	ldr	r3, [r3, #12]
    18dc:	b90b      	cbnz	r3, 18e2 <tcv_wnps+0x36>
    18de:	4920      	ldr	r1, [pc, #128]	; (1960 <tcv_wnps+0xb4>)
    18e0:	e7ef      	b.n	18c2 <tcv_wnps+0x16>

	// tcv_frm invoked with packet == NULL, pass in the frame parameters
	// the session and urgent flag
	ptrs.head = (word) fd;
    18e2:	f8ad 1004 	strh.w	r1, [sp, #4]
	ptrs.tail = (word) urg;

	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    18e6:	2000      	movs	r0, #0
	ptrs.tail = (word) urg;
    18e8:	f8ad 6006 	strh.w	r6, [sp, #6]
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    18ec:	a901      	add	r1, sp, #4
    18ee:	4798      	blx	r3
    18f0:	b158      	cbz	r0, 190a <tcv_wnps+0x5e>
		// Blocked by the plugin
		if (state != WNONE) {
    18f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    18f6:	429d      	cmp	r5, r3
    18f8:	d102      	bne.n	1900 <tcv_wnps+0x54>
			when (eid, state);
			release;
		}
		return NULL;
    18fa:	2000      	movs	r0, #0
		b->attributes.b.urgent = 1;
	b->u.pointers.head = ptrs.head;
	b->u.pointers.tail = length;

	return (address) (b + 1);
}
    18fc:	b003      	add	sp, #12
    18fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			when (eid, state);
    1900:	4629      	mov	r1, r5
    1902:	f7ff fbcb 	bl	109c <__pi_wait>
			release;
    1906:	f7ff f969 	bl	bdc <__pi_release>
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    190a:	7a3b      	ldrb	r3, [r7, #8]
    190c:	07db      	lsls	r3, r3, #31
    190e:	d501      	bpl.n	1914 <tcv_wnps+0x68>
    1910:	4914      	ldr	r1, [pc, #80]	; (1964 <tcv_wnps+0xb8>)
    1912:	e7d6      	b.n	18c2 <tcv_wnps+0x16>
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    1914:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    1918:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    191c:	b2a4      	uxth	r4, r4
    191e:	4418      	add	r0, r3
    1920:	4420      	add	r0, r4
    1922:	b280      	uxth	r0, r0
    1924:	f7ff fe72 	bl	160c <apb>
    1928:	b938      	cbnz	r0, 193a <tcv_wnps+0x8e>
		if (state != WNONE) {
    192a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    192e:	429d      	cmp	r5, r3
    1930:	d0e3      	beq.n	18fa <tcv_wnps+0x4e>
			tmwait (state);
    1932:	4628      	mov	r0, r5
    1934:	f7ff fd84 	bl	1440 <__pi_waitmem>
    1938:	e7e5      	b.n	1906 <tcv_wnps+0x5a>
	b->attributes = s->attpattern;
    193a:	893b      	ldrh	r3, [r7, #8]
    193c:	8143      	strh	r3, [r0, #10]
	if (urg)
    193e:	b11e      	cbz	r6, 1948 <tcv_wnps+0x9c>
		b->attributes.b.urgent = 1;
    1940:	7a83      	ldrb	r3, [r0, #10]
    1942:	f043 0304 	orr.w	r3, r3, #4
    1946:	7283      	strb	r3, [r0, #10]
	b->u.pointers.head = ptrs.head;
    1948:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	b->u.pointers.tail = length;
    194c:	8044      	strh	r4, [r0, #2]
	b->u.pointers.head = ptrs.head;
    194e:	8003      	strh	r3, [r0, #0]
	return (address) (b + 1);
    1950:	300c      	adds	r0, #12
    1952:	e7d3      	b.n	18fc <tcv_wnps+0x50>
    1954:	20000178 	andcs	r0, r0, r8, ror r1
    1958:	000043d5 	ldrdeq	r4, [r0], -r5
    195c:	200001bc 			; <UNDEFINED> instruction: 0x200001bc
    1960:	000043db 	ldrdeq	r4, [r0], -fp
    1964:	000043e1 	andeq	r4, r0, r1, ror #7

00001968 <tcvp_control>:
	           /* ================================ */
	           /* Functions callable by the plugin */
	           /* ================================ */
/* ---------------------------------------------------------------------- */

__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1968:	4603      	mov	r3, r0
/*
 * Plugin version of interface control
 */
	verify_fph (phy, "tcv23");
    196a:	2b03      	cmp	r3, #3
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    196c:	4608      	mov	r0, r1
    196e:	b510      	push	{r4, lr}
    1970:	4611      	mov	r1, r2
	verify_fph (phy, "tcv23");
    1972:	d803      	bhi.n	197c <tcvp_control+0x14>
    1974:	4a05      	ldr	r2, [pc, #20]	; (198c <tcvp_control+0x24>)
    1976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    197a:	b91b      	cbnz	r3, 1984 <tcvp_control+0x1c>
    197c:	200a      	movs	r0, #10
    197e:	4904      	ldr	r1, [pc, #16]	; (1990 <tcvp_control+0x28>)
    1980:	f7fe fd84 	bl	48c <__pi_syserror>
	return (physical [phy]) (opt, arg);
}
    1984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return (physical [phy]) (opt, arg);
    1988:	4718      	bx	r3
    198a:	bf00      	nop
    198c:	200001a4 	andcs	r0, r0, r4, lsr #3
    1990:	000043e7 	andeq	r4, r0, r7, ror #7

00001994 <tcv_control>:
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    1994:	b508      	push	{r3, lr}
	if (opt < 0) {
    1996:	1e0b      	subs	r3, r1, #0
    1998:	da11      	bge.n	19be <tcv_control+0x2a>
		if (fd < 0)
    199a:	2800      	cmp	r0, #0
    199c:	db1f      	blt.n	19de <tcv_control+0x4a>
		if (opt == PHYSOPT_PLUGINFO) {
    199e:	3301      	adds	r3, #1
    19a0:	d107      	bne.n	19b2 <tcv_control+0x1e>
			if (fd >= TCV_MAX_PLUGS)
    19a2:	2802      	cmp	r0, #2
    19a4:	dc1b      	bgt.n	19de <tcv_control+0x4a>
			if ((p = plugins [fd]) == NULL)
    19a6:	4b0f      	ldr	r3, [pc, #60]	; (19e4 <tcv_control+0x50>)
    19a8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    19ac:	b100      	cbz	r0, 19b0 <tcv_control+0x1c>
			return p->tcv_info;
    19ae:	69c0      	ldr	r0, [r0, #28]
}
    19b0:	bd08      	pop	{r3, pc}
		if (fd >= TCV_MAX_PHYS)
    19b2:	2802      	cmp	r0, #2
    19b4:	dc13      	bgt.n	19de <tcv_control+0x4a>
		return physinfo [fd];
    19b6:	4b0c      	ldr	r3, [pc, #48]	; (19e8 <tcv_control+0x54>)
    19b8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    19bc:	e7f8      	b.n	19b0 <tcv_control+0x1c>
	verify_fds (fd, "tcv22");
    19be:	2808      	cmp	r0, #8
    19c0:	d803      	bhi.n	19ca <tcv_control+0x36>
    19c2:	4b0a      	ldr	r3, [pc, #40]	; (19ec <tcv_control+0x58>)
    19c4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    19c8:	b91b      	cbnz	r3, 19d2 <tcv_control+0x3e>
    19ca:	200a      	movs	r0, #10
    19cc:	4908      	ldr	r1, [pc, #32]	; (19f0 <tcv_control+0x5c>)
    19ce:	f7fe fd5d 	bl	48c <__pi_syserror>
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    19d2:	7a58      	ldrb	r0, [r3, #9]
}
    19d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    19d8:	0940      	lsrs	r0, r0, #5
    19da:	f7ff bfc5 	b.w	1968 <tcvp_control>
			return 0;
    19de:	2000      	movs	r0, #0
    19e0:	e7e6      	b.n	19b0 <tcv_control+0x1c>
    19e2:	bf00      	nop
    19e4:	200001bc 			; <UNDEFINED> instruction: 0x200001bc
    19e8:	200001b0 			; <UNDEFINED> instruction: 0x200001b0
    19ec:	20000178 	andcs	r0, r0, r8, ror r1
    19f0:	000043ed 	andeq	r4, r0, sp, ror #7

000019f4 <tcvp_new>:
 * Plugin-visible dispose
 */
	dispose (header (p), dsp);
}

__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    19f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19f6:	b280      	uxth	r0, r0
    19f8:	4615      	mov	r5, r2
/*
 * Create a new packet with attributes inherited from the session
 */
	hblock_t *p;

	if (dsp != TCV_DSP_PASS) {
    19fa:	460e      	mov	r6, r1
    19fc:	b309      	cbz	r1, 1a42 <tcvp_new+0x4e>

		/* Session must be defined for that */
		if (ses == NONE)
    19fe:	1c53      	adds	r3, r2, #1
    1a00:	d103      	bne.n	1a0a <tcvp_new+0x16>
			syserror (EREQPAR, "tcv26");
    1a02:	2003      	movs	r0, #3
    1a04:	4912      	ldr	r1, [pc, #72]	; (1a50 <tcvp_new+0x5c>)
		verify_fds (ses, "tcv27");
    1a06:	f7fe fd41 	bl	48c <__pi_syserror>
    1a0a:	2a08      	cmp	r2, #8
    1a0c:	d803      	bhi.n	1a16 <tcvp_new+0x22>
    1a0e:	4f11      	ldr	r7, [pc, #68]	; (1a54 <tcvp_new+0x60>)
    1a10:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    1a14:	b913      	cbnz	r3, 1a1c <tcvp_new+0x28>
    1a16:	200a      	movs	r0, #10
    1a18:	490f      	ldr	r1, [pc, #60]	; (1a58 <tcvp_new+0x64>)
    1a1a:	e7f4      	b.n	1a06 <tcvp_new+0x12>
			TCV_LIMIT_XMT)) {
		       		// Drop
		    	   	return NULL;
		}
#endif
		if ((p = apb (size)) != NULL) {
    1a1c:	f7ff fdf6 	bl	160c <apb>
    1a20:	4604      	mov	r4, r0
    1a22:	b908      	cbnz	r0, 1a28 <tcvp_new+0x34>
			/* If you accidentally call tcv_endp on it */
			p->attributes.b.outgoing = 0;
			dispose (p, dsp);
			return (address)(p + 1);
		}
		return NULL;
    1a24:	2000      	movs	r0, #0

	if ((p = apb (size)) != NULL)
		return (address)(p + 1);
	else
		return NULL;
}
    1a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p->attributes = descriptors [ses] -> attpattern;
    1a28:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
			dispose (p, dsp);
    1a2c:	4631      	mov	r1, r6
			p->attributes = descriptors [ses] -> attpattern;
    1a2e:	891b      	ldrh	r3, [r3, #8]
    1a30:	8143      	strh	r3, [r0, #10]
			p->attributes.b.outgoing = 0;
    1a32:	f36f 0341 	bfc	r3, #1, #1
    1a36:	7283      	strb	r3, [r0, #10]
			dispose (p, dsp);
    1a38:	f7ff fe08 	bl	164c <dispose>
			return (address)(p + 1);
    1a3c:	f104 000c 	add.w	r0, r4, #12
    1a40:	e7f1      	b.n	1a26 <tcvp_new+0x32>
	if ((p = apb (size)) != NULL)
    1a42:	f7ff fde3 	bl	160c <apb>
    1a46:	2800      	cmp	r0, #0
    1a48:	d0ec      	beq.n	1a24 <tcvp_new+0x30>
		return (address)(p + 1);
    1a4a:	300c      	adds	r0, #12
    1a4c:	e7eb      	b.n	1a26 <tcvp_new+0x32>
    1a4e:	bf00      	nop
    1a50:	000043f3 	strdeq	r4, [r0], -r3
    1a54:	20000178 	andcs	r0, r0, r8, ror r1
    1a58:	000043f9 	strdeq	r4, [r0], -r9

00001a5c <tcvphy_reg>:
 * points to a function that controls (i.e., changes the options of) the
 * interface.
 */
	qhead_t *q;

	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a5c:	2802      	cmp	r0, #2
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1a5e:	b510      	push	{r4, lr}
    1a60:	4604      	mov	r4, r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a62:	d803      	bhi.n	1a6c <tcvphy_reg+0x10>
    1a64:	4b0c      	ldr	r3, [pc, #48]	; (1a98 <tcvphy_reg+0x3c>)
    1a66:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1a6a:	b118      	cbz	r0, 1a74 <tcvphy_reg+0x18>
		syserror (EREQPAR, "tcv28");
    1a6c:	2003      	movs	r0, #3
    1a6e:	490b      	ldr	r1, [pc, #44]	; (1a9c <tcvphy_reg+0x40>)
	physical [phy] = ps;
	physinfo [phy] = info;

	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
	if (q == NULL)
		syserror (EMALLOC, "tcv29");
    1a70:	f7fe fd0c 	bl	48c <__pi_syserror>
	physical [phy] = ps;
    1a74:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	physinfo [phy] = info;
    1a78:	4b09      	ldr	r3, [pc, #36]	; (1aa0 <tcvphy_reg+0x44>)
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1a7a:	2008      	movs	r0, #8
	physinfo [phy] = info;
    1a7c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1a80:	f7ff fc70 	bl	1364 <__pi_malloc>
    1a84:	4a07      	ldr	r2, [pc, #28]	; (1aa4 <tcvphy_reg+0x48>)
    1a86:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
	if (q == NULL)
    1a8a:	b910      	cbnz	r0, 1a92 <tcvphy_reg+0x36>
		syserror (EMALLOC, "tcv29");
    1a8c:	2006      	movs	r0, #6
    1a8e:	4906      	ldr	r1, [pc, #24]	; (1aa8 <tcvphy_reg+0x4c>)
    1a90:	e7ee      	b.n	1a70 <tcvphy_reg+0x14>
	q_init (q);
    1a92:	e9c0 0000 	strd	r0, r0, [r0]
	/*
	 * Queue event identifier (which happens to be the queue pointer
	 * in disguise).
	 */
	return ptrtoint (q);
}
    1a96:	bd10      	pop	{r4, pc}
    1a98:	200001a4 	andcs	r0, r0, r4, lsr #3
    1a9c:	000043ff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
    1aa0:	200001b0 			; <UNDEFINED> instruction: 0x200001b0
    1aa4:	20000198 	mulcs	r0, r8, r1
    1aa8:	00004405 	andeq	r4, r0, r5, lsl #8

00001aac <tcvphy_rcv>:

__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
	int plg, dsp, ses;
	tcvadp_t ap;
	address c;

	verify_fph (phy, "tcv30");
    1ab0:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ab2:	4605      	mov	r5, r0
    1ab4:	460e      	mov	r6, r1
    1ab6:	4614      	mov	r4, r2
    1ab8:	b085      	sub	sp, #20
	verify_fph (phy, "tcv30");
    1aba:	d803      	bhi.n	1ac4 <tcvphy_rcv+0x18>
    1abc:	4b1f      	ldr	r3, [pc, #124]	; (1b3c <tcvphy_rcv+0x90>)
    1abe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1ac2:	b91b      	cbnz	r3, 1acc <tcvphy_rcv+0x20>
    1ac4:	491e      	ldr	r1, [pc, #120]	; (1b40 <tcvphy_rcv+0x94>)
		 * (or fall back) plugins to be used when none of the
		 * "specific" plugins claims the packet.
		 */
		if (plugins [plg] == NULL)
			continue;
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1ac6:	200a      	movs	r0, #10
    1ac8:	f7fe fce0 	bl	48c <__pi_syserror>
    1acc:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1b44 <tcvphy_rcv+0x98>
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1ad0:	f10d 090c 	add.w	r9, sp, #12
    1ad4:	f108 0708 	add.w	r7, r8, #8
		if (plugins [plg] == NULL)
    1ad8:	683b      	ldr	r3, [r7, #0]
    1ada:	46ba      	mov	sl, r7
    1adc:	3f04      	subs	r7, #4
    1ade:	b92b      	cbnz	r3, 1aec <tcvphy_rcv+0x40>
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1ae0:	45d0      	cmp	r8, sl
    1ae2:	d1f9      	bne.n	1ad8 <tcvphy_rcv+0x2c>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
		/*
		 * Either no one is claiming the packet or the claimant says
		 * we should drop it.
		 */
		return 0;
    1ae4:	2000      	movs	r0, #0
		return 0;

	memcpy ((char*)c, ((char*)p) + ap.head, len);

	return 1;
}
    1ae6:	b005      	add	sp, #20
    1ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1aec:	f8d3 b008 	ldr.w	fp, [r3, #8]
    1af0:	f1bb 0f00 	cmp.w	fp, #0
    1af4:	d101      	bne.n	1afa <tcvphy_rcv+0x4e>
    1af6:	4914      	ldr	r1, [pc, #80]	; (1b48 <tcvphy_rcv+0x9c>)
    1af8:	e7e5      	b.n	1ac6 <tcvphy_rcv+0x1a>
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1afa:	4631      	mov	r1, r6
    1afc:	4622      	mov	r2, r4
    1afe:	4628      	mov	r0, r5
    1b00:	f8cd 9000 	str.w	r9, [sp]
    1b04:	ab02      	add	r3, sp, #8
    1b06:	47d8      	blx	fp
    1b08:	4601      	mov	r1, r0
    1b0a:	2800      	cmp	r0, #0
    1b0c:	d0e8      	beq.n	1ae0 <tcvphy_rcv+0x34>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1b0e:	2801      	cmp	r0, #1
    1b10:	d0e8      	beq.n	1ae4 <tcvphy_rcv+0x38>
	len -= (ap.head + ap.tail);
    1b12:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    1b16:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1b1a:	441a      	add	r2, r3
    1b1c:	1aa4      	subs	r4, r4, r2
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1b1e:	4620      	mov	r0, r4
    1b20:	9a02      	ldr	r2, [sp, #8]
    1b22:	f7ff ff67 	bl	19f4 <tcvp_new>
    1b26:	2800      	cmp	r0, #0
    1b28:	d0dc      	beq.n	1ae4 <tcvphy_rcv+0x38>
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1b2a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    1b2e:	4622      	mov	r2, r4
    1b30:	4431      	add	r1, r6
    1b32:	f7ff fb36 	bl	11a2 <__pi_memcpy>
	return 1;
    1b36:	2001      	movs	r0, #1
    1b38:	e7d5      	b.n	1ae6 <tcvphy_rcv+0x3a>
    1b3a:	bf00      	nop
    1b3c:	200001a4 	andcs	r0, r0, r4, lsr #3
    1b40:	0000440b 	andeq	r4, r0, fp, lsl #8
    1b44:	200001bc 			; <UNDEFINED> instruction: 0x200001bc
    1b48:	00004411 	andeq	r4, r0, r1, lsl r4

00001b4c <tcvphy_get>:
 * Returns the packet pointer and its length.
 */
	qhead_t	*oq;
	hblock_t *b;

	verify_fph (phy, "tcv32");
    1b4c:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, address, tcvphy_get) (int phy, int *len) {
    1b4e:	b508      	push	{r3, lr}
	verify_fph (phy, "tcv32");
    1b50:	d803      	bhi.n	1b5a <tcvphy_get+0xe>
    1b52:	4b0b      	ldr	r3, [pc, #44]	; (1b80 <tcvphy_get+0x34>)
    1b54:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1b58:	b91b      	cbnz	r3, 1b62 <tcvphy_get+0x16>
    1b5a:	200a      	movs	r0, #10
    1b5c:	4909      	ldr	r1, [pc, #36]	; (1b84 <tcvphy_get+0x38>)
    1b5e:	f7fe fc95 	bl	48c <__pi_syserror>

	oq = oqueues [phy];
    1b62:	4b09      	ldr	r3, [pc, #36]	; (1b88 <tcvphy_get+0x3c>)
    1b64:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	b = q_first (oq);
    1b68:	6818      	ldr	r0, [r3, #0]
	if (q_end (b, oq)) {
    1b6a:	4283      	cmp	r3, r0
    1b6c:	d005      	beq.n	1b7a <tcvphy_get+0x2e>
		/* The queue is empty */
		return NULL;
	}

	*len = b->length;
    1b6e:	8903      	ldrh	r3, [r0, #8]
    1b70:	600b      	str	r3, [r1, #0]
	deq (b);	// Dequeue the packet ...
    1b72:	f7ff fd56 	bl	1622 <deq>
	deqtm (b);	// ... and clear its timer
	return (address) (b + 1);
    1b76:	300c      	adds	r0, #12
}
    1b78:	bd08      	pop	{r3, pc}
		return NULL;
    1b7a:	2000      	movs	r0, #0
    1b7c:	e7fc      	b.n	1b78 <tcvphy_get+0x2c>
    1b7e:	bf00      	nop
    1b80:	200001a4 	andcs	r0, r0, r4, lsr #3
    1b84:	00004417 	andeq	r4, r0, r7, lsl r4
    1b88:	20000198 	mulcs	r0, r8, r1

00001b8c <tcvphy_top>:
 * Returns the pointer to the first outgoing packet.
 */
	qhead_t *oq;
	hblock_t *b;

	verify_fph (phy, "tcv33");
    1b8c:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, address, tcvphy_top) (int phy) {
    1b8e:	b508      	push	{r3, lr}
	verify_fph (phy, "tcv33");
    1b90:	d803      	bhi.n	1b9a <tcvphy_top+0xe>
    1b92:	4b08      	ldr	r3, [pc, #32]	; (1bb4 <tcvphy_top+0x28>)
    1b94:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1b98:	b91b      	cbnz	r3, 1ba2 <tcvphy_top+0x16>
    1b9a:	200a      	movs	r0, #10
    1b9c:	4906      	ldr	r1, [pc, #24]	; (1bb8 <tcvphy_top+0x2c>)
    1b9e:	f7fe fc75 	bl	48c <__pi_syserror>

	oq = oqueues [phy];
    1ba2:	4b06      	ldr	r3, [pc, #24]	; (1bbc <tcvphy_top+0x30>)
    1ba4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	b = q_first (oq);
    1ba8:	6818      	ldr	r0, [r3, #0]
	if (q_end (b, oq))
    1baa:	4283      	cmp	r3, r0
		return NULL;
    1bac:	bf0c      	ite	eq
    1bae:	2000      	moveq	r0, #0

	return (address)(b + 1);
    1bb0:	300c      	addne	r0, #12
}
    1bb2:	bd08      	pop	{r3, pc}
    1bb4:	200001a4 	andcs	r0, r0, r4, lsr #3
    1bb8:	0000441d 	andeq	r4, r0, sp, lsl r4
    1bbc:	20000198 	mulcs	r0, r8, r1

00001bc0 <tcvphy_end>:

__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1bc0:	b510      	push	{r4, lr}
/*
 * Marks the end of packet transmission
 */
	hblock_t *b = header (pkt);

	verify_plg (b, tcv_xmt, "tcv34");
    1bc2:	f810 3c01 	ldrb.w	r3, [r0, #-1]
	hblock_t *b = header (pkt);
    1bc6:	f1a0 040c 	sub.w	r4, r0, #12
	verify_plg (b, tcv_xmt, "tcv34");
    1bca:	f3c3 0382 	ubfx	r3, r3, #2, #3
    1bce:	2b02      	cmp	r3, #2
    1bd0:	d805      	bhi.n	1bde <tcvphy_end+0x1e>
    1bd2:	4a08      	ldr	r2, [pc, #32]	; (1bf4 <tcvphy_end+0x34>)
    1bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1bd8:	b10b      	cbz	r3, 1bde <tcvphy_end+0x1e>
    1bda:	695b      	ldr	r3, [r3, #20]
    1bdc:	b91b      	cbnz	r3, 1be6 <tcvphy_end+0x26>
    1bde:	200a      	movs	r0, #10
    1be0:	4905      	ldr	r1, [pc, #20]	; (1bf8 <tcvphy_end+0x38>)
    1be2:	f7fe fc53 	bl	48c <__pi_syserror>
	dispose (b, plugins [b->attributes.b.plugin] ->
    1be6:	4798      	blx	r3
    1be8:	4601      	mov	r1, r0
    1bea:	4620      	mov	r0, r4
		tcv_xmt (pkt));
}
    1bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dispose (b, plugins [b->attributes.b.plugin] ->
    1bf0:	f7ff bd2c 	b.w	164c <dispose>
    1bf4:	200001bc 			; <UNDEFINED> instruction: 0x200001bc
    1bf8:	00004423 	andeq	r4, r0, r3, lsr #8

00001bfc <tcv_init>:
	tcv_tservice = create TCVTimerService;
	tcv_tservice -> _pp_apid_ ();
#endif	/* __SMURPH__ */

#endif	/* TCV_TIMERS */
}
    1bfc:	4770      	bx	lr

00001bfe <NmiSR>:
NmiSRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    1bfe:	e7fe      	b.n	1bfe <NmiSR>

00001c00 <FaultISR>:
FaultISRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    1c00:	e7fe      	b.n	1c00 <FaultISR>

00001c02 <AONIntHandler>:
IntDefaultHandler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    1c02:	e7fe      	b.n	1c02 <AONIntHandler>

00001c04 <ResetISR>:
{
    1c04:	b508      	push	{r3, lr}
    SetupTrimDevice();
    1c06:	f001 fce9 	bl	35dc <NOROM_SetupTrimDevice>
        *pui32Dest++ = *pui32Src++;
    1c0a:	4b0d      	ldr	r3, [pc, #52]	; (1c40 <zero_loop+0x14>)
    1c0c:	480d      	ldr	r0, [pc, #52]	; (1c44 <zero_loop+0x18>)
    1c0e:	1cda      	adds	r2, r3, #3
    1c10:	1a12      	subs	r2, r2, r0
    1c12:	1ec1      	subs	r1, r0, #3
    1c14:	f022 0203 	bic.w	r2, r2, #3
    1c18:	4299      	cmp	r1, r3
    1c1a:	bf88      	it	hi
    1c1c:	2200      	movhi	r2, #0
    1c1e:	490a      	ldr	r1, [pc, #40]	; (1c48 <zero_loop+0x1c>)
    1c20:	f002 f9e6 	bl	3ff0 <memcpy>
    __asm("    ldr     r0, =_bss\n"
    1c24:	4809      	ldr	r0, [pc, #36]	; (1c4c <zero_loop+0x20>)
    1c26:	490a      	ldr	r1, [pc, #40]	; (1c50 <zero_loop+0x24>)
    1c28:	f04f 0200 	mov.w	r2, #0

00001c2c <zero_loop>:
    1c2c:	4288      	cmp	r0, r1
    1c2e:	bfb8      	it	lt
    1c30:	f840 2b04 	strlt.w	r2, [r0], #4
    1c34:	dbfa      	blt.n	1c2c <zero_loop>
   main();
    1c36:	f7ff f905 	bl	e44 <main>
    FaultISR();
    1c3a:	f7ff ffe1 	bl	1c00 <FaultISR>
}
    1c3e:	bd08      	pop	{r3, pc}
    1c40:	20000108 	andcs	r0, r0, r8, lsl #2
    1c44:	20000000 	andcs	r0, r0, r0
    1c48:	00004f2d 	andeq	r4, r0, sp, lsr #30
    1c4c:	20000108 	andcs	r0, r0, r8, lsl #2
    1c50:	2000023c 	andcs	r0, r0, ip, lsr r2

00001c54 <get_byte>:

static word	left;

// ============================================================================

static byte get_byte () {
    1c54:	2308      	movs	r3, #8

	int i;
	byte b;

	for (b = 0, i = 0; i < 8; i++) {
    1c56:	2000      	movs	r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c58:	f44f 6180 	mov.w	r1, #1024	; 0x400
static byte get_byte () {
    1c5c:	b510      	push	{r4, lr}
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c5e:	4a08      	ldr	r2, [pc, #32]	; (1c80 <get_byte+0x2c>)
    1c60:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
		b <<= 1;
    1c64:	0040      	lsls	r0, r0, #1
		if (ee_inp)
    1c66:	05e4      	lsls	r4, r4, #23
		b <<= 1;
    1c68:	b2c0      	uxtb	r0, r0
			b |= 1;
    1c6a:	bf48      	it	mi
    1c6c:	f040 0001 	orrmi.w	r0, r0, #1
	for (b = 0, i = 0; i < 8; i++) {
    1c70:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c72:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1c76:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    1c7a:	d1f1      	bne.n	1c60 <get_byte+0xc>
		ee_clkh;
		ee_clkl;
	}

	return b;
}
    1c7c:	bd10      	pop	{r4, pc}
    1c7e:	bf00      	nop
    1c80:	40022000 	andmi	r2, r2, r0

00001c84 <put_byte>:

static void put_byte (byte b) {
    1c84:	b510      	push	{r4, lr}
    1c86:	2208      	movs	r2, #8
    1c88:	f44f 7400 	mov.w	r4, #512	; 0x200
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1c90:	4b08      	ldr	r3, [pc, #32]	; (1cb4 <put_byte+0x30>)

	int i;

	for (i = 0; i < 8; i++) {
		if (b & 0x80)
    1c92:	f010 0f80 	tst.w	r0, #128	; 0x80
    1c96:	bf14      	ite	ne
    1c98:	f8c3 4090 	strne.w	r4, [r3, #144]	; 0x90
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1c9c:	f8c3 40a0 	streq.w	r4, [r3, #160]	; 0xa0
			ee_outh;
		else
			ee_outl;
		ee_clkh;
		ee_clkl;
		b <<= 1;
    1ca0:	0040      	lsls	r0, r0, #1
	for (i = 0; i < 8; i++) {
    1ca2:	3a01      	subs	r2, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1ca4:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		b <<= 1;
    1ca8:	b2c0      	uxtb	r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1caa:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
	for (i = 0; i < 8; i++) {
    1cae:	d1f0      	bne.n	1c92 <put_byte+0xe>
	}
}
    1cb0:	bd10      	pop	{r4, pc}
    1cb2:	bf00      	nop
    1cb4:	40022000 	andmi	r2, r2, r0

00001cb8 <cmd_0>:
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1cb8:	2301      	movs	r3, #1

// ============================================================================

static void cmd_0 (byte cmd) {
    1cba:	b510      	push	{r4, lr}
    1cbc:	4c04      	ldr	r4, [pc, #16]	; (1cd0 <cmd_0+0x18>)
    1cbe:	f8c4 3a50 	str.w	r3, [r4, #2640]	; 0xa50

	ee_start;
	put_byte (cmd);
    1cc2:	f7ff ffdf 	bl	1c84 <put_byte>
    1cc6:	2300      	movs	r3, #0
    1cc8:	f8c4 3a50 	str.w	r3, [r4, #2640]	; 0xa50
	ee_stop;
}
    1ccc:	bd10      	pop	{r4, pc}
    1cce:	bf00      	nop
    1cd0:	42441000 	submi	r1, r4, #0

00001cd4 <wwait>:
	r = get_byte ();
	ee_stop;
	return r;
}

static void wwait (word st, word del) {
    1cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1cd8:	4604      	mov	r4, r0
    1cda:	460d      	mov	r5, r1
    1cdc:	2701      	movs	r7, #1
//
// Wait for write to complete
//
	while (dopen && (rdsr () & 1)) {
    1cde:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1d24 <wwait+0x50>
    1ce2:	4e11      	ldr	r6, [pc, #68]	; (1d28 <wwait+0x54>)
    1ce4:	f898 3000 	ldrb.w	r3, [r8]
    1ce8:	b15b      	cbz	r3, 1d02 <wwait+0x2e>
	put_byte (CMD_RDSR);
    1cea:	2005      	movs	r0, #5
    1cec:	f8c6 7a50 	str.w	r7, [r6, #2640]	; 0xa50
    1cf0:	f7ff ffc8 	bl	1c84 <put_byte>
	r = get_byte ();
    1cf4:	f7ff ffae 	bl	1c54 <get_byte>
    1cf8:	2300      	movs	r3, #0
    1cfa:	f8c6 3a50 	str.w	r3, [r6, #2640]	; 0xa50
	while (dopen && (rdsr () & 1)) {
    1cfe:	07c3      	lsls	r3, r0, #31
    1d00:	d401      	bmi.n	1d06 <wwait+0x32>
		else {
			delay (del, st);
			release;
		}
	}
}
    1d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (st == WNONE)
    1d06:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1d0a:	429c      	cmp	r4, r3
    1d0c:	d103      	bne.n	1d16 <wwait+0x42>
			mdelay (1);
    1d0e:	2001      	movs	r0, #1
    1d10:	f7fe fb64 	bl	3dc <mdelay>
    1d14:	e7e6      	b.n	1ce4 <wwait+0x10>
			delay (del, st);
    1d16:	4621      	mov	r1, r4
    1d18:	4628      	mov	r0, r5
    1d1a:	f7ff fa05 	bl	1128 <delay>
			release;
    1d1e:	f7fe ff5d 	bl	bdc <__pi_release>
    1d22:	bf00      	nop
    1d24:	200001c8 	andcs	r0, r0, r8, asr #3
    1d28:	42441000 	submi	r1, r4, #0

00001d2c <ready>:
		dopen = 0;
		ee_bring_down;
	}
}

static void ready () {
    1d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//
// Called before a new operation to make sure the chip is ready
//
	if (dopen) {
    1d2e:	4d0d      	ldr	r5, [pc, #52]	; (1d64 <ready+0x38>)
    1d30:	782f      	ldrb	r7, [r5, #0]
    1d32:	b147      	cbz	r7, 1d46 <ready+0x1a>
		// The device is open
		wwait (WNONE, 1);
    1d34:	2101      	movs	r1, #1
    1d36:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1d3a:	f7ff ffcb 	bl	1cd4 <wwait>
	} else {
		copen ();
		dopen = DOPEN_TEMP;
	}

	dstat = 0;
    1d3e:	2200      	movs	r2, #0
    1d40:	4b09      	ldr	r3, [pc, #36]	; (1d68 <ready+0x3c>)
    1d42:	701a      	strb	r2, [r3, #0]
}
    1d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d46:	2401      	movs	r4, #1
    1d48:	4e08      	ldr	r6, [pc, #32]	; (1d6c <ready+0x40>)
	udelay (1);
    1d4a:	4620      	mov	r0, r4
    1d4c:	f8c6 4a50 	str.w	r4, [r6, #2640]	; 0xa50
    1d50:	f7fe fb2e 	bl	3b0 <udelay>
	udelay (1);
    1d54:	4620      	mov	r0, r4
    1d56:	f8c6 7a50 	str.w	r7, [r6, #2640]	; 0xa50
    1d5a:	f7fe fb29 	bl	3b0 <udelay>
		dopen = DOPEN_TEMP;
    1d5e:	2302      	movs	r3, #2
    1d60:	702b      	strb	r3, [r5, #0]
    1d62:	e7ec      	b.n	1d3e <ready+0x12>
    1d64:	200001c8 	andcs	r0, r0, r8, asr #3
    1d68:	200001c9 	andcs	r0, r0, r9, asr #3
    1d6c:	42441000 	submi	r1, r4, #0

00001d70 <cclose>:
static void cclose () {
    1d70:	b510      	push	{r4, lr}
	if (dopen == DOPEN_TEMP) {
    1d72:	4c07      	ldr	r4, [pc, #28]	; (1d90 <cclose+0x20>)
    1d74:	7823      	ldrb	r3, [r4, #0]
    1d76:	2b02      	cmp	r3, #2
    1d78:	d109      	bne.n	1d8e <cclose+0x1e>
		wwait (WNONE, 1);
    1d7a:	2101      	movs	r1, #1
    1d7c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1d80:	f7ff ffa8 	bl	1cd4 <wwait>
	cmd_0 (CMD_DP);
    1d84:	20b9      	movs	r0, #185	; 0xb9
    1d86:	f7ff ff97 	bl	1cb8 <cmd_0>
		dopen = 0;
    1d8a:	2300      	movs	r3, #0
    1d8c:	7023      	strb	r3, [r4, #0]
}
    1d8e:	bd10      	pop	{r4, pc}
    1d90:	200001c8 	andcs	r0, r0, r8, asr #3

00001d94 <ee_open>:

// ============================================================================

word ee_open () {
    1d94:	b508      	push	{r3, lr}
//
// Open (for more than one operation)
//
	ready ();
    1d96:	f7ff ffc9 	bl	1d2c <ready>
	dopen = DOPEN_PERM;
    1d9a:	2201      	movs	r2, #1
    1d9c:	4b01      	ldr	r3, [pc, #4]	; (1da4 <ee_open+0x10>)
		ee_stop;
		diag ("ID: %x %x %x", r [0], r [1], r [2]);
	}
#endif
	return 0;
}
    1d9e:	2000      	movs	r0, #0
	dopen = DOPEN_PERM;
    1da0:	701a      	strb	r2, [r3, #0]
}
    1da2:	bd08      	pop	{r3, pc}
    1da4:	200001c8 	andcs	r0, r0, r8, asr #3

00001da8 <ee_close>:

void ee_close () {

	if (dopen) {
    1da8:	4b03      	ldr	r3, [pc, #12]	; (1db8 <ee_close+0x10>)
    1daa:	781a      	ldrb	r2, [r3, #0]
    1dac:	b11a      	cbz	r2, 1db6 <ee_close+0xe>
		dopen = DOPEN_TEMP;
    1dae:	2202      	movs	r2, #2
    1db0:	701a      	strb	r2, [r3, #0]
		cclose ();
    1db2:	f7ff bfdd 	b.w	1d70 <cclose>
	}
}
    1db6:	4770      	bx	lr
    1db8:	200001c8 	andcs	r0, r0, r8, asr #3

00001dbc <ser_outf>:

//+++ "__outserial.c"

procname (__outserial);

int ser_outf (word st, const char *m, ...) {
    1dbc:	b40e      	push	{r1, r2, r3}
    1dbe:	b577      	push	{r0, r1, r2, r4, r5, r6, lr}
    1dc0:	4604      	mov	r4, r0

	int prcs;
	char *buf;
	va_list ap;

	if ((prcs = running (__outserial)) != 0) {
    1dc2:	4812      	ldr	r0, [pc, #72]	; (1e0c <ser_outf+0x50>)
    1dc4:	f7ff f9cc 	bl	1160 <running>
    1dc8:	4606      	mov	r6, r0
    1dca:	b120      	cbz	r0, 1dd6 <ser_outf+0x1a>
		/* We have to wait */
		join (prcs, st);
    1dcc:	4621      	mov	r1, r4
    1dce:	f7ff f999 	bl	1104 <__pi_join>
	if ((buf = vform (NULL, m, ap)) == NULL) {
		/*
		 * This means that we are out of memory
		 */
		umwait (st);
		release;
    1dd2:	f7fe ff03 	bl	bdc <__pi_release>
	va_start (ap, m);
    1dd6:	aa08      	add	r2, sp, #32
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1dd8:	9907      	ldr	r1, [sp, #28]
	va_start (ap, m);
    1dda:	9201      	str	r2, [sp, #4]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1ddc:	f000 fe66 	bl	2aac <vform>
    1de0:	4605      	mov	r5, r0
    1de2:	b918      	cbnz	r0, 1dec <ser_outf+0x30>
		umwait (st);
    1de4:	4620      	mov	r0, r4
    1de6:	f7ff fb2b 	bl	1440 <__pi_waitmem>
    1dea:	e7f2      	b.n	1dd2 <ser_outf+0x16>
	}

	if (runstrand (__outserial, buf) == 0) {
    1dec:	4601      	mov	r1, r0
    1dee:	4807      	ldr	r0, [pc, #28]	; (1e0c <ser_outf+0x50>)
    1df0:	f7ff fb0c 	bl	140c <__pi_fork>
    1df4:	b918      	cbnz	r0, 1dfe <ser_outf+0x42>
		ufree (buf);
    1df6:	4628      	mov	r0, r5
    1df8:	f7ff fa68 	bl	12cc <__pi_free>
		npwait (st);
    1dfc:	e7f2      	b.n	1de4 <ser_outf+0x28>
		release;
	}

	return 0;
}
    1dfe:	4630      	mov	r0, r6
    1e00:	b003      	add	sp, #12
    1e02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1e06:	b003      	add	sp, #12
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop
    1e0c:	00002e91 	muleq	r0, r1, lr

00001e10 <ser_inf>:

extern char *__inpline;

procname (__inserial);

int ser_inf (word st, const char *fmt, ...) {
    1e10:	b40e      	push	{r1, r2, r3}
    1e12:	b533      	push	{r0, r1, r4, r5, lr}
    1e14:	9905      	ldr	r1, [sp, #20]
    1e16:	4604      	mov	r4, r0
/* ========= */

	int prcs;
	va_list	ap;

	if (fmt == NULL)
    1e18:	b321      	cbz	r1, 1e64 <ser_inf+0x54>
		return 0;

	if (__inpline == NULL) {
    1e1a:	4d13      	ldr	r5, [pc, #76]	; (1e68 <ser_inf+0x58>)
    1e1c:	6828      	ldr	r0, [r5, #0]
    1e1e:	b988      	cbnz	r0, 1e44 <ser_inf+0x34>
		if ((prcs = running (__inserial)) == 0) {
    1e20:	4812      	ldr	r0, [pc, #72]	; (1e6c <ser_inf+0x5c>)
    1e22:	f7ff f99d 	bl	1160 <running>
    1e26:	b948      	cbnz	r0, 1e3c <ser_inf+0x2c>
			prcs = runthread (__inserial);
    1e28:	4601      	mov	r1, r0
    1e2a:	4810      	ldr	r0, [pc, #64]	; (1e6c <ser_inf+0x5c>)
    1e2c:	f7ff faee 	bl	140c <__pi_fork>
			if (prcs == 0) {
    1e30:	b920      	cbnz	r0, 1e3c <ser_inf+0x2c>
				npwait (st);
    1e32:	4620      	mov	r0, r4
    1e34:	f7ff fb04 	bl	1440 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    1e38:	f7fe fed0 	bl	bdc <__pi_release>
		join (prcs, st);
    1e3c:	4621      	mov	r1, r4
    1e3e:	f7ff f961 	bl	1104 <__pi_join>
    1e42:	e7f9      	b.n	1e38 <ser_inf+0x28>
	}

	/* Input available */
	va_start (ap, fmt);
    1e44:	aa06      	add	r2, sp, #24
    1e46:	9201      	str	r2, [sp, #4]

	prcs = vscan (__inpline, fmt, ap);
    1e48:	f000 fe58 	bl	2afc <vscan>
    1e4c:	4604      	mov	r4, r0

	ufree (__inpline);
    1e4e:	6828      	ldr	r0, [r5, #0]
    1e50:	f7ff fa3c 	bl	12cc <__pi_free>
	__inpline = NULL;
    1e54:	2300      	movs	r3, #0
    1e56:	602b      	str	r3, [r5, #0]

	return prcs;
}
    1e58:	4620      	mov	r0, r4
    1e5a:	b002      	add	sp, #8
    1e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    1e60:	b003      	add	sp, #12
    1e62:	4770      	bx	lr
		return 0;
    1e64:	460c      	mov	r4, r1
    1e66:	e7f7      	b.n	1e58 <ser_inf+0x48>
    1e68:	20000214 	andcs	r0, r0, r4, lsl r2
    1e6c:	00002f01 	andeq	r2, r0, r1, lsl #30

00001e70 <ser_in>:

extern char *__inpline;

procname (__inserial);

int ser_in (word st, char *buf, int len) {
    1e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e72:	4604      	mov	r4, r0
    1e74:	460e      	mov	r6, r1
/* ======= */
/* Direct */
/* ====== */
	int prcs;

	if (len == 0)
    1e76:	4615      	mov	r5, r2
    1e78:	b37a      	cbz	r2, 1eda <ser_in+0x6a>
		// Just in case
		return 0;

	if (__inpline == NULL) {
    1e7a:	4f19      	ldr	r7, [pc, #100]	; (1ee0 <ser_in+0x70>)
    1e7c:	6838      	ldr	r0, [r7, #0]
    1e7e:	b988      	cbnz	r0, 1ea4 <ser_in+0x34>
		if ((prcs = running (__inserial)) == 0) {
    1e80:	4818      	ldr	r0, [pc, #96]	; (1ee4 <ser_in+0x74>)
    1e82:	f7ff f96d 	bl	1160 <running>
    1e86:	b948      	cbnz	r0, 1e9c <ser_in+0x2c>
			prcs = runthread (__inserial);
    1e88:	4601      	mov	r1, r0
    1e8a:	4816      	ldr	r0, [pc, #88]	; (1ee4 <ser_in+0x74>)
    1e8c:	f7ff fabe 	bl	140c <__pi_fork>
			if (prcs == 0) {
    1e90:	b920      	cbnz	r0, 1e9c <ser_in+0x2c>
				npwait (st);
    1e92:	4620      	mov	r0, r4
    1e94:	f7ff fad4 	bl	1440 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    1e98:	f7fe fea0 	bl	bdc <__pi_release>
		join (prcs, st);
    1e9c:	4621      	mov	r1, r4
    1e9e:	f7ff f931 	bl	1104 <__pi_join>
    1ea2:	e7f9      	b.n	1e98 <ser_in+0x28>
	}

	/* Input available */
	if (*__inpline == NULL) // bin cmd
    1ea4:	7803      	ldrb	r3, [r0, #0]
    1ea6:	b9a3      	cbnz	r3, 1ed2 <ser_in+0x62>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1ea8:	7844      	ldrb	r4, [r0, #1]
    1eaa:	3403      	adds	r4, #3
	else
		prcs = strlen (__inpline);

	if (prcs >= len)
    1eac:	42ac      	cmp	r4, r5
		prcs = len-1;
    1eae:	bfa8      	it	ge
    1eb0:	f105 34ff 	addge.w	r4, r5, #4294967295	; 0xffffffff

	memcpy (buf, __inpline, prcs);
    1eb4:	4622      	mov	r2, r4
    1eb6:	4630      	mov	r0, r6
    1eb8:	6839      	ldr	r1, [r7, #0]
    1eba:	f7ff f972 	bl	11a2 <__pi_memcpy>
	ufree (__inpline);
    1ebe:	6838      	ldr	r0, [r7, #0]
    1ec0:	f7ff fa04 	bl	12cc <__pi_free>
	__inpline = NULL;
    1ec4:	2300      	movs	r3, #0
    1ec6:	603b      	str	r3, [r7, #0]
	if (*buf) // if it's NULL, it's a bin cmd
    1ec8:	7832      	ldrb	r2, [r6, #0]
    1eca:	b102      	cbz	r2, 1ece <ser_in+0x5e>
		buf [prcs] = '\0';
    1ecc:	5533      	strb	r3, [r6, r4]
	return prcs;
}
    1ece:	4620      	mov	r0, r4
    1ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prcs = strlen (__inpline);
    1ed2:	f7ff f957 	bl	1184 <__pi_strlen>
    1ed6:	4604      	mov	r4, r0
    1ed8:	e7e8      	b.n	1eac <ser_in+0x3c>
		return 0;
    1eda:	4614      	mov	r4, r2
    1edc:	e7f7      	b.n	1ece <ser_in+0x5e>
    1ede:	bf00      	nop
    1ee0:	20000214 	andcs	r0, r0, r4, lsl r2
    1ee4:	00002f01 	andeq	r2, r0, r1, lsl #30

00001ee8 <plugch>:
//
// Insert the channel number as the right frequency in the proper place
//
	RF_cmdFs.frequency = 
		// Channel number is just the megahertz increment
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    1ee8:	4b04      	ldr	r3, [pc, #16]	; (1efc <plugch+0x14>)
    1eea:	4a05      	ldr	r2, [pc, #20]	; (1f00 <plugch+0x18>)
    1eec:	781b      	ldrb	r3, [r3, #0]
    1eee:	f503 7359 	add.w	r3, r3, #868	; 0x364
    1ef2:	8413      	strh	r3, [r2, #32]
	RF_cmdFs.frequency = 
    1ef4:	4a03      	ldr	r2, [pc, #12]	; (1f04 <plugch+0x1c>)
    1ef6:	81d3      	strh	r3, [r2, #14]
}
    1ef8:	4770      	bx	lr
    1efa:	bf00      	nop
    1efc:	200001cc 	andcs	r0, r0, ip, asr #3
    1f00:	20000050 	andcs	r0, r0, r0, asr r0
    1f04:	20000038 	andcs	r0, r0, r8, lsr r0

00001f08 <option>:

	// Make rbuffl exactly equal to max payload length
	rbuffl -= 2;
}

static int option (int opt, address val) {
    1f08:	b570      	push	{r4, r5, r6, lr}
    1f0a:	460c      	mov	r4, r1

	int ret = 0;

	switch (opt) {
    1f0c:	281a      	cmp	r0, #26
    1f0e:	f200 80a4 	bhi.w	205a <option+0x152>
    1f12:	e8df f000 	tbb	[pc, r0]
    1f16:	3939390e 	ldmdbcc	r9!, {r1, r2, r3, r8, fp, ip, sp}
    1f1a:	674f3014 	smlaldvs	r3, pc, r4, r0	; <UNPREDICTABLE>
    1f1e:	3b35445b 	blcc	d53092 <__ccfg+0xd330ea>
    1f22:	a2a2a2a2 	adcge	sl, r2, #536870922	; 0x2000000a
    1f26:	777aa2a2 	ldrbvc	sl, [sl, -r2, lsr #5]!
    1f2a:	898ba2a2 	stmibhi	fp, {r1, r5, r7, r9, sp, pc}
    1f2e:	009aa241 	addseq	sl, sl, r1, asr #4

		case PHYSOPT_STATUS:

			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    1f32:	4b4c      	ldr	r3, [pc, #304]	; (2064 <option+0x15c>)
    1f34:	7818      	ldrb	r0, [r3, #0]
    1f36:	f000 0001 	and.w	r0, r0, #1
			ret = (int) statid;
			goto RVal;

		case PHYSOPT_GETMAXPL:

			ret = rbuffl + 2;
    1f3a:	3002      	adds	r0, #2
			goto RVal;
    1f3c:	e028      	b.n	1f90 <option+0x88>
			_BIS (dstate, DSTATE_RXON);
    1f3e:	4a49      	ldr	r2, [pc, #292]	; (2064 <option+0x15c>)
    1f40:	7813      	ldrb	r3, [r2, #0]
    1f42:	f043 0301 	orr.w	r3, r3, #1
    1f46:	7013      	strb	r3, [r2, #0]
	int ret = 0;
    1f48:	2000      	movs	r0, #0
			p_trigger (drvprcs, qevent);
    1f4a:	4b47      	ldr	r3, [pc, #284]	; (2068 <option+0x160>)
    1f4c:	6819      	ldr	r1, [r3, #0]
    1f4e:	4b47      	ldr	r3, [pc, #284]	; (206c <option+0x164>)
    1f50:	460c      	mov	r4, r1
    1f52:	681d      	ldr	r5, [r3, #0]
    1f54:	2300      	movs	r3, #0
    1f56:	f834 2b10 	ldrh.w	r2, [r4], #16
    1f5a:	f002 0207 	and.w	r2, r2, #7
    1f5e:	429a      	cmp	r2, r3
    1f60:	dd08      	ble.n	1f74 <option+0x6c>
    1f62:	f854 6033 	ldr.w	r6, [r4, r3, lsl #3]
    1f66:	3301      	adds	r3, #1
    1f68:	42ae      	cmp	r6, r5
    1f6a:	d1f8      	bne.n	1f5e <option+0x56>
    1f6c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1f70:	889b      	ldrh	r3, [r3, #4]
    1f72:	800b      	strh	r3, [r1, #0]
	return ret;
RVal:
	if (val != NULL)
		*val = ret;
	goto RRet;
}
    1f74:	bd70      	pop	{r4, r5, r6, pc}
			_BIC (dstate, DSTATE_RXON);
    1f76:	4a3b      	ldr	r2, [pc, #236]	; (2064 <option+0x15c>)
    1f78:	7813      	ldrb	r3, [r2, #0]
    1f7a:	f023 0301 	bic.w	r3, r3, #1
    1f7e:	e7e2      	b.n	1f46 <option+0x3e>
			statid = (val == NULL) ? 0 : *val;
    1f80:	b101      	cbz	r1, 1f84 <option+0x7c>
    1f82:	880c      	ldrh	r4, [r1, #0]
    1f84:	4b3a      	ldr	r3, [pc, #232]	; (2070 <option+0x168>)
    1f86:	801c      	strh	r4, [r3, #0]
	int ret = 0;
    1f88:	2000      	movs	r0, #0
    1f8a:	e7f3      	b.n	1f74 <option+0x6c>
			ret = (int) statid;
    1f8c:	4b38      	ldr	r3, [pc, #224]	; (2070 <option+0x168>)
    1f8e:	8818      	ldrh	r0, [r3, #0]
	if (val != NULL)
    1f90:	2c00      	cmp	r4, #0
    1f92:	d0ef      	beq.n	1f74 <option+0x6c>
		*val = ret;
    1f94:	8020      	strh	r0, [r4, #0]
	return ret;
    1f96:	e7ed      	b.n	1f74 <option+0x6c>
			ret = rbuffl + 2;
    1f98:	4b36      	ldr	r3, [pc, #216]	; (2074 <option+0x16c>)
    1f9a:	7818      	ldrb	r0, [r3, #0]
    1f9c:	e7cd      	b.n	1f3a <option+0x32>
				memcpy (val, &rxstat,
    1f9e:	220c      	movs	r2, #12
			if (val != NULL) {
    1fa0:	b121      	cbz	r1, 1fac <option+0xa4>
				memcpy (val, &rxstat,
    1fa2:	4620      	mov	r0, r4
    1fa4:	4934      	ldr	r1, [pc, #208]	; (2078 <option+0x170>)
    1fa6:	f7ff f8fc 	bl	11a2 <__pi_memcpy>
    1faa:	e7ed      	b.n	1f88 <option+0x80>
				memset (&rxstat, 0, 
    1fac:	4832      	ldr	r0, [pc, #200]	; (2078 <option+0x170>)
    1fae:	f7ff f902 	bl	11b6 <__pi_memset>
    1fb2:	e7e9      	b.n	1f88 <option+0x80>
			if (val == NULL)
    1fb4:	b941      	cbnz	r1, 1fc8 <option+0xc0>
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    1fb6:	f7ff faf1 	bl	159c <lrnd>
    1fba:	f3c0 4105 	ubfx	r1, r0, #16, #6
    1fbe:	3102      	adds	r1, #2
				utimer_set (bckf_timer, *val);
    1fc0:	482e      	ldr	r0, [pc, #184]	; (207c <option+0x174>)
    1fc2:	f7fe fff7 	bl	fb4 <__pi_utimer_set>
    1fc6:	e7bf      	b.n	1f48 <option+0x40>
    1fc8:	8809      	ldrh	r1, [r1, #0]
    1fca:	e7f9      	b.n	1fc0 <option+0xb8>
			for (ret = 0; ret < 8; ret++)
    1fcc:	2000      	movs	r0, #0
				if (RF_cmdPropRadioDivSetup.txPower
    1fce:	4b2c      	ldr	r3, [pc, #176]	; (2080 <option+0x178>)
    1fd0:	8b5a      	ldrh	r2, [r3, #26]
    1fd2:	4b2c      	ldr	r3, [pc, #176]	; (2084 <option+0x17c>)
					== patable [ret])
    1fd4:	f833 1b02 	ldrh.w	r1, [r3], #2
				if (RF_cmdPropRadioDivSetup.txPower
    1fd8:	428a      	cmp	r2, r1
    1fda:	d0d9      	beq.n	1f90 <option+0x88>
			for (ret = 0; ret < 8; ret++)
    1fdc:	3001      	adds	r0, #1
    1fde:	2808      	cmp	r0, #8
    1fe0:	d1f8      	bne.n	1fd4 <option+0xcc>
    1fe2:	e7d5      	b.n	1f90 <option+0x88>
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    1fe4:	b119      	cbz	r1, 1fee <option+0xe6>
				(*val > 7) ? 7 : *val;
    1fe6:	8808      	ldrh	r0, [r1, #0]
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    1fe8:	2807      	cmp	r0, #7
    1fea:	bf28      	it	cs
    1fec:	2007      	movcs	r0, #7
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    1fee:	4b25      	ldr	r3, [pc, #148]	; (2084 <option+0x17c>)
    1ff0:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    1ff4:	4b22      	ldr	r3, [pc, #136]	; (2080 <option+0x178>)
    1ff6:	835a      	strh	r2, [r3, #26]
			_BIS (dstate, DSTATE_IRST);
    1ff8:	4a1a      	ldr	r2, [pc, #104]	; (2064 <option+0x15c>)
    1ffa:	7813      	ldrb	r3, [r2, #0]
    1ffc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2000:	7013      	strb	r3, [r2, #0]
			goto OREvnt;
    2002:	e7a2      	b.n	1f4a <option+0x42>
			ret = (int) channel;
    2004:	4b20      	ldr	r3, [pc, #128]	; (2088 <option+0x180>)
			ret = (int) vrate;
    2006:	7818      	ldrb	r0, [r3, #0]
			goto RVal;
    2008:	e7c2      	b.n	1f90 <option+0x88>
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    200a:	b121      	cbz	r1, 2016 <option+0x10e>
				(*val > 7) ? 7 : *val;
    200c:	880c      	ldrh	r4, [r1, #0]
    200e:	2c07      	cmp	r4, #7
    2010:	bf28      	it	cs
    2012:	2407      	movcs	r4, #7
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2014:	b2e4      	uxtb	r4, r4
    2016:	4b1c      	ldr	r3, [pc, #112]	; (2088 <option+0x180>)
    2018:	701c      	strb	r4, [r3, #0]
			plugch ();
    201a:	f7ff ff65 	bl	1ee8 <plugch>
			_BIS (dstate, DSTATE_IRST);
    201e:	4a11      	ldr	r2, [pc, #68]	; (2064 <option+0x15c>)
    2020:	7813      	ldrb	r3, [r2, #0]
    2022:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2026:	e78e      	b.n	1f46 <option+0x3e>
			ret = (int) vrate;
    2028:	4b18      	ldr	r3, [pc, #96]	; (208c <option+0x184>)
    202a:	e7ec      	b.n	2006 <option+0xfe>
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    202c:	b139      	cbz	r1, 203e <option+0x136>
				(*val > 3) ? 3 : (*val < 1) ? 1 : *val;
    202e:	880b      	ldrh	r3, [r1, #0]
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2030:	2b03      	cmp	r3, #3
    2032:	d806      	bhi.n	2042 <option+0x13a>
    2034:	b13b      	cbz	r3, 2046 <option+0x13e>
    2036:	b2db      	uxtb	r3, r3
    2038:	4a14      	ldr	r2, [pc, #80]	; (208c <option+0x184>)
    203a:	7013      	strb	r3, [r2, #0]
    203c:	e7ed      	b.n	201a <option+0x112>
    203e:	2302      	movs	r3, #2
    2040:	e7fa      	b.n	2038 <option+0x130>
    2042:	2303      	movs	r3, #3
    2044:	e7f8      	b.n	2038 <option+0x130>
    2046:	2301      	movs	r3, #1
    2048:	e7f6      	b.n	2038 <option+0x130>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    204a:	b119      	cbz	r1, 2054 <option+0x14c>
    204c:	880b      	ldrh	r3, [r1, #0]
    204e:	4a10      	ldr	r2, [pc, #64]	; (2090 <option+0x188>)
    2050:	8013      	strh	r3, [r2, #0]
			goto RRet;
    2052:	e799      	b.n	1f88 <option+0x80>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2054:	f44f 7380 	mov.w	r3, #256	; 0x100
    2058:	e7f9      	b.n	204e <option+0x146>
			syserror (EREQPAR, "cc13 op");
    205a:	2003      	movs	r0, #3
    205c:	490d      	ldr	r1, [pc, #52]	; (2094 <option+0x18c>)
    205e:	f7fe fa15 	bl	48c <__pi_syserror>
    2062:	bf00      	nop
    2064:	200001d4 	ldrdcs	r0, [r0], -r4
    2068:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    206c:	200001e0 	andcs	r0, r0, r0, ror #3
    2070:	20000204 	andcs	r0, r0, r4, lsl #4
    2074:	200001e4 	andcs	r0, r0, r4, ror #3
    2078:	200001f8 	strdcs	r0, [r0], -r8
    207c:	200001ca 	andcs	r0, r0, sl, asr #3
    2080:	20000050 	andcs	r0, r0, r0, asr r0
    2084:	00004496 	muleq	r0, r6, r4
    2088:	200001cc 	andcs	r0, r0, ip, asr #3
    208c:	20000036 	andcs	r0, r0, r6, lsr r0
    2090:	20000034 	andcs	r0, r0, r4, lsr r0
    2094:	00004432 	andeq	r4, r0, r2, lsr r4

00002098 <issue_cmd>:
static void issue_cmd (lword cmd) {
    2098:	b538      	push	{r3, r4, r5, lr}
    209a:	4604      	mov	r4, r0
    209c:	4d0c      	ldr	r5, [pc, #48]	; (20d0 <issue_cmd+0x38>)
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    209e:	4620      	mov	r0, r4
    20a0:	f001 f8a6 	bl	31f0 <NOROM_RFCDoorbellSendTo>
    20a4:	b2c2      	uxtb	r2, r0
    20a6:	2a01      	cmp	r2, #1
    20a8:	d011      	beq.n	20ce <issue_cmd+0x36>
		if (res != 0x86)
    20aa:	2a86      	cmp	r2, #134	; 0x86
    20ac:	d003      	beq.n	20b6 <issue_cmd+0x1e>
			syserror (EHARDWARE, "rt1");
    20ae:	4909      	ldr	r1, [pc, #36]	; (20d4 <issue_cmd+0x3c>)
			syserror (EHARDWARE, "hang ic0");
    20b0:	2008      	movs	r0, #8
    20b2:	f7fe f9eb 	bl	48c <__pi_syserror>
		if (cnt-- == 0) {
    20b6:	3d01      	subs	r5, #1
    20b8:	d105      	bne.n	20c6 <issue_cmd+0x2e>
			diag ("HUP %lx %lx", cmd, res);
    20ba:	4621      	mov	r1, r4
    20bc:	4806      	ldr	r0, [pc, #24]	; (20d8 <issue_cmd+0x40>)
    20be:	f7ff f9cb 	bl	1458 <diag>
			syserror (EHARDWARE, "hang ic0");
    20c2:	4906      	ldr	r1, [pc, #24]	; (20dc <issue_cmd+0x44>)
    20c4:	e7f4      	b.n	20b0 <issue_cmd+0x18>
		udelay (1);
    20c6:	2001      	movs	r0, #1
    20c8:	f7fe f972 	bl	3b0 <udelay>
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20cc:	e7e7      	b.n	209e <issue_cmd+0x6>
}
    20ce:	bd38      	pop	{r3, r4, r5, pc}
    20d0:	00015f91 	muleq	r1, r1, pc	; <UNPREDICTABLE>
    20d4:	0000443a 	andeq	r4, r0, sl, lsr r4
    20d8:	0000443e 	andeq	r4, r0, lr, lsr r4
    20dc:	0000444a 	andeq	r4, r0, sl, asr #8

000020e0 <rx_de>:
static void rx_de () {
    20e0:	b510      	push	{r4, lr}
	if ((dstate & DSTATE_RXAC) == 0)
    20e2:	4c06      	ldr	r4, [pc, #24]	; (20fc <rx_de+0x1c>)
    20e4:	7823      	ldrb	r3, [r4, #0]
    20e6:	079b      	lsls	r3, r3, #30
    20e8:	d506      	bpl.n	20f8 <rx_de+0x18>
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    20ea:	4805      	ldr	r0, [pc, #20]	; (2100 <rx_de+0x20>)
    20ec:	f7ff ffd4 	bl	2098 <issue_cmd>
	_BIC (dstate, DSTATE_RXAC);
    20f0:	7823      	ldrb	r3, [r4, #0]
    20f2:	f023 0302 	bic.w	r3, r3, #2
    20f6:	7023      	strb	r3, [r4, #0]
}
    20f8:	bd10      	pop	{r4, pc}
    20fa:	bf00      	nop
    20fc:	200001d4 	ldrdcs	r0, [r0], -r4
    2100:	04010001 	streq	r0, [r1], #-1

00002104 <rf_off>:
static void rf_off () {
    2104:	b538      	push	{r3, r4, r5, lr}
	if ((dstate & DSTATE_RFON) == 0)
    2106:	4c13      	ldr	r4, [pc, #76]	; (2154 <rf_off+0x50>)
    2108:	7823      	ldrb	r3, [r4, #0]
    210a:	06db      	lsls	r3, r3, #27
    210c:	d521      	bpl.n	2152 <rf_off+0x4e>
	IntDisable (INT_RFC_CPE_0);
    210e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
RFCClockDisable(void)
{
    //
    // Disable all clocks
    //
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2112:	2500      	movs	r5, #0
    2114:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
    2118:	2019      	movs	r0, #25
    211a:	695b      	ldr	r3, [r3, #20]
    211c:	4798      	blx	r3
	RFCAdi3VcoLdoVoltageMode (false);
    211e:	2000      	movs	r0, #0
    2120:	f001 f9e4 	bl	34ec <NOROM_RFCAdi3VcoLdoVoltageMode>
	RFCSynthPowerDown ();
    2124:	f001 f878 	bl	3218 <NOROM_RFCSynthPowerDown>
    2128:	4b0b      	ldr	r3, [pc, #44]	; (2158 <rf_off+0x54>)
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    212a:	2001      	movs	r0, #1
    212c:	601d      	str	r5, [r3, #0]
    212e:	f7fe f98b 	bl	448 <__pi_offdomain>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2132:	4b0a      	ldr	r3, [pc, #40]	; (215c <rf_off+0x58>)
    2134:	605d      	str	r5, [r3, #4]
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2136:	f001 f841 	bl	31bc <NOROM_OSCHF_SwitchToRcOscTurnOffXosc>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    213a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    213e:	4b08      	ldr	r3, [pc, #32]	; (2160 <rf_off+0x5c>)
    2140:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    2144:	2202      	movs	r2, #2
    2146:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	_BIC (dstate, DSTATE_RFON);
    214a:	7823      	ldrb	r3, [r4, #0]
    214c:	f023 0310 	bic.w	r3, r3, #16
    2150:	7023      	strb	r3, [r4, #0]
}
    2152:	bd38      	pop	{r3, r4, r5, pc}
    2154:	200001d4 	ldrdcs	r0, [r0], -r4
    2158:	60040000 	andvs	r0, r4, r0
    215c:	43240000 			; <UNDEFINED> instruction: 0x43240000
    2160:	40022000 	andmi	r2, r2, r0

00002164 <wait_cmd.constprop.0>:
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2164:	b570      	push	{r4, r5, r6, lr}
    2166:	4604      	mov	r4, r0
    2168:	460d      	mov	r5, r1
    216a:	f242 7611 	movw	r6, #10001	; 0x2711
		if (cmd->status == tstat)
    216e:	8862      	ldrh	r2, [r4, #2]
    2170:	42aa      	cmp	r2, r5
    2172:	d00e      	beq.n	2192 <wait_cmd.constprop.0+0x2e>
		if (timeout-- == 0) {
    2174:	3e01      	subs	r6, #1
    2176:	d108      	bne.n	218a <wait_cmd.constprop.0+0x26>
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2178:	8821      	ldrh	r1, [r4, #0]
    217a:	4806      	ldr	r0, [pc, #24]	; (2194 <wait_cmd.constprop.0+0x30>)
    217c:	462b      	mov	r3, r5
    217e:	f7ff f96b 	bl	1458 <diag>
			syserror (EHARDWARE, "rt2");
    2182:	2008      	movs	r0, #8
    2184:	4904      	ldr	r1, [pc, #16]	; (2198 <wait_cmd.constprop.0+0x34>)
    2186:	f7fe f981 	bl	48c <__pi_syserror>
		udelay (1);
    218a:	2001      	movs	r0, #1
    218c:	f7fe f910 	bl	3b0 <udelay>
		if (cmd->status == tstat)
    2190:	e7ed      	b.n	216e <wait_cmd.constprop.0+0xa>
}
    2192:	bd70      	pop	{r4, r5, r6, pc}
    2194:	00004453 	andeq	r4, r0, r3, asr r4
    2198:	00004463 	andeq	r4, r0, r3, ror #8

0000219c <rf_on>:
static void rf_on () {
    219c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (dstate & DSTATE_RFON)
    21a0:	4c51      	ldr	r4, [pc, #324]	; (22e8 <rf_on+0x14c>)
    21a2:	7823      	ldrb	r3, [r4, #0]
    21a4:	06db      	lsls	r3, r3, #27
    21a6:	f100 809c 	bmi.w	22e2 <rf_on+0x146>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    21aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    21ae:	4b4f      	ldr	r3, [pc, #316]	; (22ec <rf_on+0x150>)
    21b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    21b4:	2202      	movs	r2, #2
    21b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	OSCHF_TurnOnXosc();
    21ba:	f000 ffc3 	bl	3144 <NOROM_OSCHF_TurnOnXosc>
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    21be:	200a      	movs	r0, #10
    21c0:	f7fe f8f6 	bl	3b0 <udelay>
    21c4:	f000 ffca 	bl	315c <NOROM_OSCHF_AttemptToSwitchToXosc>
    21c8:	2800      	cmp	r0, #0
    21ca:	d0f8      	beq.n	21be <rf_on+0x22>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21cc:	2501      	movs	r5, #1
    21ce:	4b48      	ldr	r3, [pc, #288]	; (22f0 <rf_on+0x154>)
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21d0:	4628      	mov	r0, r5
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21d2:	605d      	str	r5, [r3, #4]
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21d4:	f7fe f918 	bl	408 <__pi_ondomain>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    21d8:	f240 72ff 	movw	r2, #2047	; 0x7ff
    21dc:	4b45      	ldr	r3, [pc, #276]	; (22f4 <rf_on+0x158>)
	issue_cmd (
    21de:	4846      	ldr	r0, [pc, #280]	; (22f8 <rf_on+0x15c>)
    21e0:	601a      	str	r2, [r3, #0]
    21e2:	f7ff ff59 	bl	2098 <issue_cmd>
PATCH_FUN_SPEC void enterGenfskCpePatch(void)
{
   uint32_t *pPatchVec = (uint32_t *) (_GENFSK_CPERAM_START + _GENFSK_PATCH_VEC_OFFSET);

#if (_NWORD_PATCHIMAGE_GENFSK > 0)
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    21e6:	f44f 7223 	mov.w	r2, #652	; 0x28c
    21ea:	4944      	ldr	r1, [pc, #272]	; (22fc <rf_on+0x160>)
    21ec:	4844      	ldr	r0, [pc, #272]	; (2300 <rf_on+0x164>)
    21ee:	f001 feff 	bl	3ff0 <memcpy>
{
   uint8_t *pPatchTab = (uint8_t *) (_GENFSK_CPERAM_START + _GENFSK_PATCH_TAB_OFFSET);
   uint32_t *pIrqPatch = (uint32_t *) (_GENFSK_CPERAM_START + _GENFSK_IRQPATCH_OFFSET);


   pPatchTab[80] = 0;
    21f2:	2200      	movs	r2, #0
    21f4:	4b43      	ldr	r3, [pc, #268]	; (2304 <rf_on+0x168>)
      *pD++ = t4;
      *pD++ = t5;
      *pD++ = t6;
      *pD++ = t7;
      *pD++ = t8;
   } while (--nIterations);
    21f6:	4844      	ldr	r0, [pc, #272]	; (2308 <rf_on+0x16c>)
    21f8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
   pPatchTab[57] = 1;
   pPatchTab[53] = 2;
    21fc:	2202      	movs	r2, #2
    21fe:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
   pPatchTab[55] = 3;
    2202:	2203      	movs	r2, #3
    2204:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
   pPatchTab[110] = 4;
    2208:	2204      	movs	r2, #4
    220a:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
   pPatchTab[107] = 5;
    220e:	2205      	movs	r2, #5
    2210:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
   pPatchTab[65] = 6;
    2214:	2206      	movs	r2, #6
   pPatchTab[57] = 1;
    2216:	f883 5079 	strb.w	r5, [r3, #121]	; 0x79
   pPatchTab[65] = 6;
    221a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

   pIrqPatch[1] = _IRQ_PATCH_0;
    221e:	f04f 5304 	mov.w	r3, #553648128	; 0x21000000
    2222:	4a3a      	ldr	r2, [pc, #232]	; (230c <rf_on+0x170>)
    2224:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
   const uint32_t *pS = patchGenfskRfe;
    2228:	4a39      	ldr	r2, [pc, #228]	; (2310 <rf_on+0x174>)
   volatile unsigned long *pD = &HWREG(RFC_RFERAM_BASE);
    222a:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
      t7 = *pS++;
    222e:	6991      	ldr	r1, [r2, #24]
      t2 = *pS++;
    2230:	e9d2 9800 	ldrd	r9, r8, [r2]
      t4 = *pS++;
    2234:	e9d2 ec02 	ldrd	lr, ip, [r2, #8]
      t6 = *pS++;
    2238:	e9d2 7604 	ldrd	r7, r6, [r2, #16]
      t8 = *pS++;
    223c:	69d5      	ldr	r5, [r2, #28]
      *pD++ = t1;
    223e:	f8c3 9000 	str.w	r9, [r3]
      *pD++ = t2;
    2242:	f8c3 8004 	str.w	r8, [r3, #4]
      *pD++ = t3;
    2246:	f8c3 e008 	str.w	lr, [r3, #8]
      *pD++ = t4;
    224a:	f8c3 c00c 	str.w	ip, [r3, #12]
      *pD++ = t5;
    224e:	611f      	str	r7, [r3, #16]
      *pD++ = t6;
    2250:	615e      	str	r6, [r3, #20]
      *pD++ = t7;
    2252:	6199      	str	r1, [r3, #24]
    2254:	4619      	mov	r1, r3
   } while (--nIterations);
    2256:	4281      	cmp	r1, r0
    2258:	f102 0220 	add.w	r2, r2, #32
      *pD++ = t8;
    225c:	f103 0320 	add.w	r3, r3, #32
    2260:	61cd      	str	r5, [r1, #28]
   } while (--nIterations);
    2262:	d1e4      	bne.n	222e <rf_on+0x92>
   t1 = *pS++;
   t2 = *pS++;
   t3 = *pS++;
   t4 = *pS++;
   t5 = *pS++;
   *pD++ = t1;
    2264:	4b2b      	ldr	r3, [pc, #172]	; (2314 <rf_on+0x178>)
    2266:	4a2c      	ldr	r2, [pc, #176]	; (2318 <rf_on+0x17c>)
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2268:	482c      	ldr	r0, [pc, #176]	; (231c <rf_on+0x180>)
    226a:	f8c3 26a0 	str.w	r2, [r3, #1696]	; 0x6a0
   *pD++ = t2;
    226e:	4a2c      	ldr	r2, [pc, #176]	; (2320 <rf_on+0x184>)
    2270:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
   *pD++ = t3;
    2274:	4a2b      	ldr	r2, [pc, #172]	; (2324 <rf_on+0x188>)
    2276:	f8c3 26a8 	str.w	r2, [r3, #1704]	; 0x6a8
   *pD++ = t4;
    227a:	4a2b      	ldr	r2, [pc, #172]	; (2328 <rf_on+0x18c>)
    227c:	f8c3 26ac 	str.w	r2, [r3, #1708]	; 0x6ac
   *pD++ = t5;
    2280:	4a2a      	ldr	r2, [pc, #168]	; (232c <rf_on+0x190>)
    2282:	f8c3 26b0 	str.w	r2, [r3, #1712]	; 0x6b0
    2286:	f7ff ff07 	bl	2098 <issue_cmd>
	RFCAdi3VcoLdoVoltageMode (true);
    228a:	2001      	movs	r0, #1
    228c:	f001 f92e 	bl	34ec <NOROM_RFCAdi3VcoLdoVoltageMode>
       	RFCRfTrimSet (&rfTrim);
    2290:	4827      	ldr	r0, [pc, #156]	; (2330 <rf_on+0x194>)
    2292:	f001 f91b 	bl	34cc <NOROM_RFCRfTrimSet>
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2296:	4827      	ldr	r0, [pc, #156]	; (2334 <rf_on+0x198>)
    2298:	f7ff fefe 	bl	2098 <issue_cmd>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    229c:	f44f 5150 	mov.w	r1, #13312	; 0x3400
    22a0:	4824      	ldr	r0, [pc, #144]	; (2334 <rf_on+0x198>)
    22a2:	f7ff ff5f 	bl	2164 <wait_cmd.constprop.0>
	issue_cmd ((lword)&cmd_srt);
    22a6:	4824      	ldr	r0, [pc, #144]	; (2338 <rf_on+0x19c>)
    22a8:	f7ff fef6 	bl	2098 <issue_cmd>
	issue_cmd ((lword)&RF_cmdFs);
    22ac:	4823      	ldr	r0, [pc, #140]	; (233c <rf_on+0x1a0>)
    22ae:	f7ff fef3 	bl	2098 <issue_cmd>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    22b2:	4822      	ldr	r0, [pc, #136]	; (233c <rf_on+0x1a0>)
    22b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    22b8:	f7ff ff54 	bl	2164 <wait_cmd.constprop.0>
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22bc:	2200      	movs	r2, #0
	_BIC (dstate, DSTATE_IRST);
    22be:	7823      	ldrb	r3, [r4, #0]
	IntEnable (INT_RFC_CPE_0);
    22c0:	2019      	movs	r0, #25
	_BIC (dstate, DSTATE_IRST);
    22c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    22c6:	f043 0310 	orr.w	r3, r3, #16
    22ca:	7023      	strb	r3, [r4, #0]
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22cc:	4b1c      	ldr	r3, [pc, #112]	; (2340 <rf_on+0x1a4>)
    22ce:	615a      	str	r2, [r3, #20]
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22d0:	611a      	str	r2, [r3, #16]
	IntEnable (INT_RFC_CPE_0);
    22d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
}
    22d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	IntEnable (INT_RFC_CPE_0);
    22da:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
    22de:	691b      	ldr	r3, [r3, #16]
    22e0:	4718      	bx	r3
}
    22e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    22e6:	bf00      	nop
    22e8:	200001d4 	ldrdcs	r0, [r0], -r4
    22ec:	40022000 	andmi	r2, r2, r0
    22f0:	43240000 			; <UNDEFINED> instruction: 0x43240000
    22f4:	60040000 	andvs	r0, r4, r0
    22f8:	06070051 			; <UNDEFINED> instruction: 0x06070051
    22fc:	00004b5c 	andeq	r4, r0, ip, asr fp
    2300:	2100041c 	tstcs	r0, ip, lsl r4
    2304:	21000300 	mrscs	r0, LR_irq
    2308:	2100c680 	smlabbcs	r0, r0, r6, ip
    230c:	210005bd 			; <UNDEFINED> instruction: 0x210005bd
    2310:	000044a8 	andeq	r4, r0, r8, lsr #9
    2314:	2100c000 	mrscs	ip, (UNDEF: 0)
    2318:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    231c:	06070001 	streq	r0, [r7], -r1
    2320:	1a101020 	bne	4063a8 <__ccfg+0x3e6400>
    2324:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    2328:	16121611 			; <UNDEFINED> instruction: 0x16121611
    232c:	70006b54 	andvc	r6, r0, r4, asr fp
    2330:	200001e8 	andcs	r0, r0, r8, ror #3
    2334:	20000050 	andcs	r0, r0, r0, asr r0
    2338:	20000020 	andcs	r0, r0, r0, lsr #32
    233c:	20000038 	andcs	r0, r0, r8, lsr r0
    2340:	40041000 	andmi	r1, r4, r0

00002344 <rx_int_enable>:
static void rx_int_enable () {
    2344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
RFCCpe0IntEnable(uint32_t ui32Mask)
{
  //
  // Multiplex RF Core interrupts to CPE0 IRQ.
  //
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2348:	4b29      	ldr	r3, [pc, #164]	; (23f0 <rx_int_enable+0xac>)
    234a:	699a      	ldr	r2, [r3, #24]
    234c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    2350:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    2354:	619a      	str	r2, [r3, #24]
  do
  {
    //
    // Clear any pending interrupts.
    //
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2356:	2200      	movs	r2, #0
    2358:	611a      	str	r2, [r3, #16]
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    235a:	691d      	ldr	r5, [r3, #16]
    235c:	2d00      	cmp	r5, #0
    235e:	d1fb      	bne.n	2358 <rx_int_enable+0x14>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2360:	2602      	movs	r6, #2

  //
  //  Enable the masked interrupts
  //
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2362:	695a      	ldr	r2, [r3, #20]
				diag ("BAD RX");
    2364:	4f23      	ldr	r7, [pc, #140]	; (23f4 <rx_int_enable+0xb0>)
    2366:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    236a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    236e:	615a      	str	r2, [r3, #20]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2370:	4b21      	ldr	r3, [pc, #132]	; (23f8 <rx_int_enable+0xb4>)
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2372:	f8df 8088 	ldr.w	r8, [pc, #136]	; 23fc <rx_int_enable+0xb8>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2376:	69db      	ldr	r3, [r3, #28]
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2378:	f8df 9084 	ldr.w	r9, [pc, #132]	; 2400 <rx_int_enable+0xbc>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    237c:	681c      	ldr	r4, [r3, #0]
		if (db->status == DATA_ENTRY_FINISHED) {
    237e:	7923      	ldrb	r3, [r4, #4]
    2380:	2b03      	cmp	r3, #3
    2382:	d11e      	bne.n	23c2 <rx_int_enable+0x7e>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2384:	7a63      	ldrb	r3, [r4, #9]
    2386:	7a21      	ldrb	r1, [r4, #8]
    2388:	1cda      	adds	r2, r3, #3
    238a:	4291      	cmp	r1, r2
			nr++;
    238c:	f105 0501 	add.w	r5, r5, #1
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2390:	d11c      	bne.n	23cc <rx_int_enable+0x88>
    2392:	f898 2000 	ldrb.w	r2, [r8]
    2396:	429a      	cmp	r2, r3
    2398:	d318      	bcc.n	23cc <rx_int_enable+0x88>
    239a:	f013 0c01 	ands.w	ip, r3, #1
    239e:	d115      	bne.n	23cc <rx_int_enable+0x88>
				__dp [pl + 1] = __dp [pl] - 128;
    23a0:	f104 0108 	add.w	r1, r4, #8
				pl = __dp [1] + 2;
    23a4:	1c9a      	adds	r2, r3, #2
				__dp [pl + 1] = __dp [pl] - 128;
    23a6:	5c88      	ldrb	r0, [r1, r2]
    23a8:	440b      	add	r3, r1
    23aa:	3880      	subs	r0, #128	; 0x80
    23ac:	70d8      	strb	r0, [r3, #3]
				__dp [pl] = 0;
    23ae:	f801 c002 	strb.w	ip, [r1, r2]
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    23b2:	f8b9 0000 	ldrh.w	r0, [r9]
    23b6:	f104 010a 	add.w	r1, r4, #10
    23ba:	f7ff fb77 	bl	1aac <tcvphy_rcv>
			db->status = DATA_ENTRY_PENDING;
    23be:	2300      	movs	r3, #0
    23c0:	7123      	strb	r3, [r4, #4]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    23c2:	2e01      	cmp	r6, #1
    23c4:	d006      	beq.n	23d4 <rx_int_enable+0x90>
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    23c6:	2601      	movs	r6, #1
    23c8:	6824      	ldr	r4, [r4, #0]
    23ca:	e7d8      	b.n	237e <rx_int_enable+0x3a>
				diag ("BAD RX");
    23cc:	4638      	mov	r0, r7
    23ce:	f7ff f843 	bl	1458 <diag>
    23d2:	e7f4      	b.n	23be <rx_int_enable+0x7a>
	if (nr) {
    23d4:	b14d      	cbz	r5, 23ea <rx_int_enable+0xa6>
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23d6:	f7ff f8e1 	bl	159c <lrnd>
}
    23da:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23de:	f3c0 4102 	ubfx	r1, r0, #16, #3
    23e2:	3102      	adds	r1, #2
    23e4:	4807      	ldr	r0, [pc, #28]	; (2404 <rx_int_enable+0xc0>)
    23e6:	f7fe bde5 	b.w	fb4 <__pi_utimer_set>
}
    23ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    23ee:	bf00      	nop
    23f0:	40041000 	andmi	r1, r4, r0
    23f4:	00004467 	andeq	r4, r0, r7, ror #8
    23f8:	20000078 	andcs	r0, r0, r8, ror r0
    23fc:	200001e4 	andcs	r0, r0, r4, ror #3
    2400:	200001dc 	ldrdcs	r0, [r0], -ip
    2404:	200001ca 	andcs	r0, r0, sl, asr #3

00002408 <cc1350_driver>:
thread (cc1350_driver)
    2408:	2801      	cmp	r0, #1
    240a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    240c:	f000 8083 	beq.w	2516 <cc1350_driver+0x10e>
    2410:	2802      	cmp	r0, #2
    2412:	f000 80b5 	beq.w	2580 <cc1350_driver+0x178>
    2416:	2800      	cmp	r0, #0
    2418:	f040 80c6 	bne.w	25a8 <cc1350_driver+0x1a0>
		if (dstate & DSTATE_IRST) {
    241c:	4c64      	ldr	r4, [pc, #400]	; (25b0 <cc1350_driver+0x1a8>)
    241e:	f994 3000 	ldrsb.w	r3, [r4]
    2422:	2b00      	cmp	r3, #0
    2424:	da05      	bge.n	2432 <cc1350_driver+0x2a>
			rf_off ();
    2426:	f7ff fe6d 	bl	2104 <rf_off>
			_BIC (dstate,
    242a:	7823      	ldrb	r3, [r4, #0]
    242c:	f003 0369 	and.w	r3, r3, #105	; 0x69
    2430:	7023      	strb	r3, [r4, #0]
		if (dstate & DSTATE_RXAC) {
    2432:	7822      	ldrb	r2, [r4, #0]
    2434:	f002 0301 	and.w	r3, r2, #1
    2438:	0792      	lsls	r2, r2, #30
    243a:	d51d      	bpl.n	2478 <cc1350_driver+0x70>
			if ((dstate & DSTATE_RXON) == 0)
    243c:	b90b      	cbnz	r3, 2442 <cc1350_driver+0x3a>
				rx_de ();
    243e:	f7ff fe4f 	bl	20e0 <rx_de>
		if (paylen == 0) {
    2442:	4d5c      	ldr	r5, [pc, #368]	; (25b4 <cc1350_driver+0x1ac>)
    2444:	4e5c      	ldr	r6, [pc, #368]	; (25b8 <cc1350_driver+0x1b0>)
    2446:	682b      	ldr	r3, [r5, #0]
    2448:	2b00      	cmp	r3, #0
    244a:	d148      	bne.n	24de <cc1350_driver+0xd6>
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    244c:	4b5b      	ldr	r3, [pc, #364]	; (25bc <cc1350_driver+0x1b4>)
    244e:	4629      	mov	r1, r5
    2450:	8818      	ldrh	r0, [r3, #0]
    2452:	f7ff fb7b 	bl	1b4c <tcvphy_get>
    2456:	6170      	str	r0, [r6, #20]
    2458:	b360      	cbz	r0, 24b4 <cc1350_driver+0xac>
				sysassert (paylen <= rbuffl && paylen > 0 &&
    245a:	4a59      	ldr	r2, [pc, #356]	; (25c0 <cc1350_driver+0x1b8>)
				paylen -= 2;
    245c:	682b      	ldr	r3, [r5, #0]
				sysassert (paylen <= rbuffl && paylen > 0 &&
    245e:	7812      	ldrb	r2, [r2, #0]
				paylen -= 2;
    2460:	3b02      	subs	r3, #2
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2462:	4293      	cmp	r3, r2
				paylen -= 2;
    2464:	602b      	str	r3, [r5, #0]
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2466:	dc03      	bgt.n	2470 <cc1350_driver+0x68>
    2468:	2b00      	cmp	r3, #0
    246a:	dd01      	ble.n	2470 <cc1350_driver+0x68>
    246c:	07df      	lsls	r7, r3, #31
    246e:	d518      	bpl.n	24a2 <cc1350_driver+0x9a>
    2470:	200a      	movs	r0, #10
    2472:	4954      	ldr	r1, [pc, #336]	; (25c4 <cc1350_driver+0x1bc>)
    2474:	f7fe f80a 	bl	48c <__pi_syserror>
		} else if (dstate & DSTATE_RXON) {
    2478:	2b00      	cmp	r3, #0
    247a:	d0e2      	beq.n	2442 <cc1350_driver+0x3a>
			rf_on ();
    247c:	f7ff fe8e 	bl	219c <rf_on>
	if (dstate & DSTATE_RXAC)
    2480:	7823      	ldrb	r3, [r4, #0]
    2482:	f013 0302 	ands.w	r3, r3, #2
    2486:	d1dc      	bne.n	2442 <cc1350_driver+0x3a>
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2488:	484f      	ldr	r0, [pc, #316]	; (25c8 <cc1350_driver+0x1c0>)
    248a:	69c2      	ldr	r2, [r0, #28]
    248c:	6812      	ldr	r2, [r2, #0]
		re->status = DATA_ENTRY_PENDING;
    248e:	7113      	strb	r3, [r2, #4]
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2490:	6812      	ldr	r2, [r2, #0]
		re->status = DATA_ENTRY_PENDING;
    2492:	7113      	strb	r3, [r2, #4]
	issue_cmd ((lword)&RF_cmdPropRx);
    2494:	f7ff fe00 	bl	2098 <issue_cmd>
	_BIS (dstate, DSTATE_RXAC);
    2498:	7823      	ldrb	r3, [r4, #0]
    249a:	f043 0302 	orr.w	r3, r3, #2
    249e:	7023      	strb	r3, [r4, #0]
    24a0:	e7cf      	b.n	2442 <cc1350_driver+0x3a>
				if (statid != 0xffff)
    24a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    24a6:	4b49      	ldr	r3, [pc, #292]	; (25cc <cc1350_driver+0x1c4>)
    24a8:	881b      	ldrh	r3, [r3, #0]
    24aa:	4293      	cmp	r3, r2
					((address)(RF_cmdPropTx.pPkt)) [0] =
    24ac:	bf18      	it	ne
    24ae:	8003      	strhne	r3, [r0, #0]
				RF_cmdPropTx.pktLen = (byte) paylen;
    24b0:	682b      	ldr	r3, [r5, #0]
    24b2:	73f3      	strb	r3, [r6, #15]
		if (paylen == 0) {
    24b4:	6829      	ldr	r1, [r5, #0]
    24b6:	b991      	cbnz	r1, 24de <cc1350_driver+0xd6>
			wait (qevent, DR_LOOP);
    24b8:	4b45      	ldr	r3, [pc, #276]	; (25d0 <cc1350_driver+0x1c8>)
    24ba:	6818      	ldr	r0, [r3, #0]
    24bc:	f7fe fdee 	bl	109c <__pi_wait>
			if (dstate & DSTATE_RXAC) {
    24c0:	7823      	ldrb	r3, [r4, #0]
    24c2:	079c      	lsls	r4, r3, #30
    24c4:	d503      	bpl.n	24ce <cc1350_driver+0xc6>
				rx_int_enable ();
    24c6:	f7ff ff3d 	bl	2344 <rx_int_enable>
			release;
    24ca:	f7fe fb87 	bl	bdc <__pi_release>
			} else if (dstate & DSTATE_RFON) {
    24ce:	06d8      	lsls	r0, r3, #27
    24d0:	d5fb      	bpl.n	24ca <cc1350_driver+0xc2>
				delay (offdelay, DR_GOOF);
    24d2:	2102      	movs	r1, #2
    24d4:	4b3f      	ldr	r3, [pc, #252]	; (25d4 <cc1350_driver+0x1cc>)
    24d6:	8818      	ldrh	r0, [r3, #0]
    24d8:	f7fe fe26 	bl	1128 <delay>
    24dc:	e7f5      	b.n	24ca <cc1350_driver+0xc2>
		if (bckf_timer) {
    24de:	4f3e      	ldr	r7, [pc, #248]	; (25d8 <cc1350_driver+0x1d0>)
    24e0:	883d      	ldrh	r5, [r7, #0]
    24e2:	b165      	cbz	r5, 24fe <cc1350_driver+0xf6>
			wait (qevent, DR_LOOP);
    24e4:	4b3a      	ldr	r3, [pc, #232]	; (25d0 <cc1350_driver+0x1c8>)
    24e6:	2100      	movs	r1, #0
    24e8:	6818      	ldr	r0, [r3, #0]
    24ea:	f7fe fdd7 	bl	109c <__pi_wait>
			delay (bckf_timer, DR_LOOP);
    24ee:	2100      	movs	r1, #0
    24f0:	8838      	ldrh	r0, [r7, #0]
    24f2:	f7fe fe19 	bl	1128 <delay>
			if (dstate & DSTATE_RXAC)
    24f6:	7823      	ldrb	r3, [r4, #0]
    24f8:	0799      	lsls	r1, r3, #30
    24fa:	d5e6      	bpl.n	24ca <cc1350_driver+0xc2>
    24fc:	e7e3      	b.n	24c6 <cc1350_driver+0xbe>
		rf_on ();
    24fe:	f7ff fe4d 	bl	219c <rf_on>
		rx_de ();
    2502:	f7ff fded 	bl	20e0 <rx_de>
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2506:	f06f 0202 	mvn.w	r2, #2
    250a:	4b34      	ldr	r3, [pc, #208]	; (25dc <cc1350_driver+0x1d4>)
		RF_cmdPropTx . status = 0;
    250c:	8075      	strh	r5, [r6, #2]
		issue_cmd ((lword)&cmd_cs);
    250e:	4834      	ldr	r0, [pc, #208]	; (25e0 <cc1350_driver+0x1d8>)
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2510:	611a      	str	r2, [r3, #16]
		issue_cmd ((lword)&cmd_cs);
    2512:	f7ff fdc1 	bl	2098 <issue_cmd>
		if (dstate & DSTATE_IRST)
    2516:	4b26      	ldr	r3, [pc, #152]	; (25b0 <cc1350_driver+0x1a8>)
    2518:	f993 3000 	ldrsb.w	r3, [r3]
    251c:	2b00      	cmp	r3, #0
    251e:	f6ff af7d 	blt.w	241c <cc1350_driver+0x14>
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2522:	4b2e      	ldr	r3, [pc, #184]	; (25dc <cc1350_driver+0x1d4>)
    2524:	691a      	ldr	r2, [r3, #16]
    2526:	0792      	lsls	r2, r2, #30
    2528:	d402      	bmi.n	2530 <cc1350_driver+0x128>
			delay (1, DR_XMIT);
    252a:	2101      	movs	r1, #1
    252c:	4608      	mov	r0, r1
    252e:	e7d3      	b.n	24d8 <cc1350_driver+0xd0>
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2530:	4821      	ldr	r0, [pc, #132]	; (25b8 <cc1350_driver+0x1b0>)
    2532:	4c2c      	ldr	r4, [pc, #176]	; (25e4 <cc1350_driver+0x1dc>)
    2534:	8842      	ldrh	r2, [r0, #2]
    2536:	f5b2 5f50 	cmp.w	r2, #13312	; 0x3400
    253a:	d018      	beq.n	256e <cc1350_driver+0x166>
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    253c:	7822      	ldrb	r2, [r4, #0]
    253e:	2a0f      	cmp	r2, #15
    2540:	d909      	bls.n	2556 <cc1350_driver+0x14e>
				RF_cmdPropTx . status = 0;
    2542:	2200      	movs	r2, #0
    2544:	8042      	strh	r2, [r0, #2]
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2546:	f06f 0202 	mvn.w	r2, #2
    254a:	611a      	str	r2, [r3, #16]
				issue_cmd ((lword)&RF_cmdPropTx);
    254c:	f7ff fda4 	bl	2098 <issue_cmd>
				proceed (DR_XMIT);
    2550:	2001      	movs	r0, #1
    2552:	f7fe fd99 	bl	1088 <proceed>
			txtries++;
    2556:	7823      	ldrb	r3, [r4, #0]
    2558:	3301      	adds	r3, #1
    255a:	7023      	strb	r3, [r4, #0]
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    255c:	f7ff f81e 	bl	159c <lrnd>
    2560:	f3c0 4105 	ubfx	r1, r0, #16, #6
    2564:	3102      	adds	r1, #2
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2566:	481c      	ldr	r0, [pc, #112]	; (25d8 <cc1350_driver+0x1d0>)
    2568:	f7fe fd24 	bl	fb4 <__pi_utimer_set>
		goto DR_LOOP__;
    256c:	e756      	b.n	241c <cc1350_driver+0x14>
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    256e:	6940      	ldr	r0, [r0, #20]
    2570:	f7ff fb26 	bl	1bc0 <tcvphy_end>
		paylen = 0;
    2574:	2300      	movs	r3, #0
    2576:	4a0f      	ldr	r2, [pc, #60]	; (25b4 <cc1350_driver+0x1ac>)
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2578:	2102      	movs	r1, #2
		paylen = 0;
    257a:	6013      	str	r3, [r2, #0]
		txtries = 0;
    257c:	7023      	strb	r3, [r4, #0]
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    257e:	e7f2      	b.n	2566 <cc1350_driver+0x15e>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2580:	4b0b      	ldr	r3, [pc, #44]	; (25b0 <cc1350_driver+0x1a8>)
    2582:	781a      	ldrb	r2, [r3, #0]
    2584:	f993 3000 	ldrsb.w	r3, [r3]
    2588:	2b00      	cmp	r3, #0
    258a:	f6ff af47 	blt.w	241c <cc1350_driver+0x14>
    258e:	07d3      	lsls	r3, r2, #31
    2590:	f53f af44 	bmi.w	241c <cc1350_driver+0x14>
		    tcvphy_top (physid) == NULL)
    2594:	4b09      	ldr	r3, [pc, #36]	; (25bc <cc1350_driver+0x1b4>)
    2596:	8818      	ldrh	r0, [r3, #0]
    2598:	f7ff faf8 	bl	1b8c <tcvphy_top>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    259c:	2800      	cmp	r0, #0
    259e:	f47f af3d 	bne.w	241c <cc1350_driver+0x14>
			rf_off ();
    25a2:	f7ff fdaf 	bl	2104 <rf_off>
    25a6:	e739      	b.n	241c <cc1350_driver+0x14>
endthread
    25a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    25ac:	f7fe bce4 	b.w	f78 <__pi_badstate>
    25b0:	200001d4 	ldrdcs	r0, [r0], -r4
    25b4:	200001d8 	ldrdcs	r0, [r0], -r8
    25b8:	2000009c 	mulcs	r0, ip, r0
    25bc:	200001dc 	ldrdcs	r0, [r0], -ip
    25c0:	200001e4 	andcs	r0, r0, r4, ror #3
    25c4:	0000446e 	andeq	r4, r0, lr, ror #8
    25c8:	20000078 	andcs	r0, r0, r8, ror r0
    25cc:	20000204 	andcs	r0, r0, r4, lsl #4
    25d0:	200001e0 	andcs	r0, r0, r0, ror #3
    25d4:	20000034 	andcs	r0, r0, r4, lsr r0
    25d8:	200001ca 	andcs	r0, r0, sl, asr #3
    25dc:	40041000 	andmi	r1, r4, r0
    25e0:	20000004 	andcs	r0, r0, r4
    25e4:	20000206 	andcs	r0, r0, r6, lsl #4

000025e8 <RFCCPE0IntHandler>:
void RFCCPE0IntHandler (void) {
    25e8:	b530      	push	{r4, r5, lr}
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    25ea:	4a15      	ldr	r2, [pc, #84]	; (2640 <RFCCPE0IntHandler+0x58>)
    25ec:	6913      	ldr	r3, [r2, #16]
    25ee:	2b00      	cmp	r3, #0
		_BIS (dstate, DSTATE_IRST);
    25f0:	bfbf      	itttt	lt
    25f2:	4914      	ldrlt	r1, [pc, #80]	; (2644 <RFCCPE0IntHandler+0x5c>)
    25f4:	780b      	ldrblt	r3, [r1, #0]
    25f6:	f063 037f 	ornlt	r3, r3, #127	; 0x7f
    25fa:	700b      	strblt	r3, [r1, #0]
  do
  {
    //
    // Clear interrupts that may now be pending
    //
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    25fc:	2100      	movs	r1, #0
    25fe:	6111      	str	r1, [r2, #16]
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2600:	6913      	ldr	r3, [r2, #16]
    2602:	2b00      	cmp	r3, #0
    2604:	d1fb      	bne.n	25fe <RFCCPE0IntHandler+0x16>
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2606:	6951      	ldr	r1, [r2, #20]
    2608:	6153      	str	r3, [r2, #20]
	p_trigger (drvprcs, qevent);
    260a:	4a0f      	ldr	r2, [pc, #60]	; (2648 <RFCCPE0IntHandler+0x60>)
    260c:	4c0f      	ldr	r4, [pc, #60]	; (264c <RFCCPE0IntHandler+0x64>)
    260e:	6811      	ldr	r1, [r2, #0]
    2610:	6824      	ldr	r4, [r4, #0]
    2612:	4608      	mov	r0, r1
    2614:	f830 2b10 	ldrh.w	r2, [r0], #16
    2618:	f002 0207 	and.w	r2, r2, #7
    261c:	429a      	cmp	r2, r3
    261e:	dd08      	ble.n	2632 <RFCCPE0IntHandler+0x4a>
    2620:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
    2624:	3301      	adds	r3, #1
    2626:	42a5      	cmp	r5, r4
    2628:	d1f8      	bne.n	261c <RFCCPE0IntHandler+0x34>
    262a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    262e:	889b      	ldrh	r3, [r3, #4]
    2630:	800b      	strh	r3, [r1, #0]
	RISE_N_SHINE;
    2632:	4a07      	ldr	r2, [pc, #28]	; (2650 <RFCCPE0IntHandler+0x68>)
    2634:	7813      	ldrb	r3, [r2, #0]
    2636:	f043 0302 	orr.w	r3, r3, #2
    263a:	7013      	strb	r3, [r2, #0]
}
    263c:	bd30      	pop	{r4, r5, pc}
    263e:	bf00      	nop
    2640:	40041000 	andmi	r1, r4, r0
    2644:	200001d4 	ldrdcs	r0, [r0], -r4
    2648:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    264c:	200001e0 	andcs	r0, r0, r0, ror #3
    2650:	20000148 	andcs	r0, r0, r8, asr #2

00002654 <phys_cc1350>:

// ============================================================================

void phys_cc1350 (int phy, int mbs) {
    2654:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
// packet length is (and I have reasons not to trust the manual), so let me
// assume it is 255 - 4 - 1 = 250. We shall be careful.
//

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (rbuffl != 0)
    2658:	4c49      	ldr	r4, [pc, #292]	; (2780 <phys_cc1350+0x12c>)
void phys_cc1350 (int phy, int mbs) {
    265a:	4606      	mov	r6, r0
	if (rbuffl != 0)
    265c:	7822      	ldrb	r2, [r4, #0]
    265e:	b11a      	cbz	r2, 2668 <phys_cc1350+0x14>
		/* We are allowed to do it only once */
		syserror (ETOOMANY, "cc13");
    2660:	2009      	movs	r0, #9
    2662:	4948      	ldr	r1, [pc, #288]	; (2784 <phys_cc1350+0x130>)
		mbs = CC1350_MAXPLEN;

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
		/* We are allowed to do it only once */
		syserror (EREQPAR, "cc13 mb");
    2664:	f7fd ff12 	bl	48c <__pi_syserror>
	if (mbs == 0)
    2668:	b129      	cbz	r1, 2676 <phys_cc1350+0x22>
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    266a:	1f8a      	subs	r2, r1, #6
    266c:	2af4      	cmp	r2, #244	; 0xf4
    266e:	d903      	bls.n	2678 <phys_cc1350+0x24>
		syserror (EREQPAR, "cc13 mb");
    2670:	2003      	movs	r0, #3
    2672:	4945      	ldr	r1, [pc, #276]	; (2788 <phys_cc1350+0x134>)
    2674:	e7f6      	b.n	2664 <phys_cc1350+0x10>
		mbs = CC1350_MAXPLEN;
    2676:	21fa      	movs	r1, #250	; 0xfa
	i = 0;
    2678:	2700      	movs	r7, #0
#endif

	rbuffl = (byte) mbs;
    267a:	f04f 0802 	mov.w	r8, #2
		db->status = DATA_ENTRY_PENDING;
    267e:	46ba      	mov	sl, r7
		db->config.type = 0;	// General (data in structure)
    2680:	f04f 0904 	mov.w	r9, #4
	rbuffl = (byte) mbs;
    2684:	7021      	strb	r1, [r4, #0]
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2686:	7820      	ldrb	r0, [r4, #0]
    2688:	469b      	mov	fp, r3
    268a:	300d      	adds	r0, #13
    268c:	f7fe fe6a 	bl	1364 <__pi_malloc>
		if (db == NULL)
    2690:	4603      	mov	r3, r0
    2692:	b920      	cbnz	r0, 269e <phys_cc1350+0x4a>
			syserror (EMALLOC, "cc13");
    2694:	2006      	movs	r0, #6
    2696:	493b      	ldr	r1, [pc, #236]	; (2784 <phys_cc1350+0x130>)
    2698:	e7e4      	b.n	2664 <phys_cc1350+0x10>
    269a:	46b8      	mov	r8, r7
    269c:	e7f3      	b.n	2686 <phys_cc1350+0x32>
		db->status = DATA_ENTRY_PENDING;
    269e:	f880 a004 	strb.w	sl, [r0, #4]
		if (i)
    26a2:	2f00      	cmp	r7, #0
    26a4:	d03e      	beq.n	2724 <phys_cc1350+0xd0>
			da->pNextEntry = (byte*) db;
    26a6:	f8cb 0000 	str.w	r0, [fp]
		if (++i == NRBUFFS)
    26aa:	2701      	movs	r7, #1
		db->length = rbuffl + 2;
    26ac:	7822      	ldrb	r2, [r4, #0]
		if (++i == NRBUFFS)
    26ae:	45b8      	cmp	r8, r7
		db->length = rbuffl + 2;
    26b0:	f102 0202 	add.w	r2, r2, #2
		db->config.type = 0;	// General (data in structure)
    26b4:	f883 9005 	strb.w	r9, [r3, #5]
		db->length = rbuffl + 2;
    26b8:	80da      	strh	r2, [r3, #6]
		if (++i == NRBUFFS)
    26ba:	d1ee      	bne.n	269a <phys_cc1350+0x46>
	db->pNextEntry = (byte*) re;
    26bc:	601d      	str	r5, [r3, #0]
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    26be:	2008      	movs	r0, #8
    26c0:	f7fe fe50 	bl	1364 <__pi_malloc>
    26c4:	4b31      	ldr	r3, [pc, #196]	; (278c <phys_cc1350+0x138>)
    26c6:	61d8      	str	r0, [r3, #28]
	if (rbuffs == NULL)
    26c8:	2800      	cmp	r0, #0
    26ca:	d0e3      	beq.n	2694 <phys_cc1350+0x40>
	rbuffs->pCurrEntry = (byte*) re;
    26cc:	6005      	str	r5, [r0, #0]
	rbuffs->pLastEntry = NULL;
    26ce:	2500      	movs	r5, #0
    26d0:	69da      	ldr	r2, [r3, #28]
	init_rbuffs ();

	physid = phy;

	// Register the phy
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26d2:	492f      	ldr	r1, [pc, #188]	; (2790 <phys_cc1350+0x13c>)
	rbuffs->pLastEntry = NULL;
    26d4:	6055      	str	r5, [r2, #4]
	RF_cmdPropRx . pOutput = (byte*) &rxstat;
    26d6:	4a2f      	ldr	r2, [pc, #188]	; (2794 <phys_cc1350+0x140>)
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26d8:	4630      	mov	r0, r6
	RF_cmdPropRx . pOutput = (byte*) &rxstat;
    26da:	621a      	str	r2, [r3, #32]
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    26dc:	89da      	ldrh	r2, [r3, #14]
    26de:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
    26e2:	f042 0206 	orr.w	r2, r2, #6
    26e6:	81da      	strh	r2, [r3, #14]
	rbuffl -= 2;
    26e8:	7823      	ldrb	r3, [r4, #0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26ea:	f44f 6210 	mov.w	r2, #2304	; 0x900
	rbuffl -= 2;
    26ee:	3b02      	subs	r3, #2
    26f0:	7023      	strb	r3, [r4, #0]
	physid = phy;
    26f2:	4b29      	ldr	r3, [pc, #164]	; (2798 <phys_cc1350+0x144>)
    26f4:	801e      	strh	r6, [r3, #0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26f6:	f7ff f9b1 	bl	1a5c <tcvphy_reg>
    26fa:	4b28      	ldr	r3, [pc, #160]	; (279c <phys_cc1350+0x148>)
	LEDI (0, 0);
	LEDI (1, 0);
	LEDI (2, 0);

#if DIAG_MESSAGES
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26fc:	2207      	movs	r2, #7
    26fe:	2102      	movs	r1, #2
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2700:	6018      	str	r0, [r3, #0]
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2702:	462b      	mov	r3, r5
    2704:	4826      	ldr	r0, [pc, #152]	; (27a0 <phys_cc1350+0x14c>)
    2706:	f7fe fea7 	bl	1458 <diag>
		RADIO_DEFAULT_CHANNEL);
#endif

	// Install the backoff timer
	utimer_add (&bckf_timer);
    270a:	4826      	ldr	r0, [pc, #152]	; (27a4 <phys_cc1350+0x150>)
    270c:	f7fe fc3c 	bl	f88 <utimer_add>

	// Start the driver process
	drvprcs = runthread (cc1350_driver);
    2710:	4629      	mov	r1, r5
    2712:	4825      	ldr	r0, [pc, #148]	; (27a8 <phys_cc1350+0x154>)
    2714:	f7fe fe7a 	bl	140c <__pi_fork>
    2718:	4b24      	ldr	r3, [pc, #144]	; (27ac <phys_cc1350+0x158>)
    271a:	6018      	str	r0, [r3, #0]

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (drvprcs == 0)
    271c:	b920      	cbnz	r0, 2728 <phys_cc1350+0xd4>
		syserror (ERESOURCE, "cc13");
    271e:	2004      	movs	r0, #4
    2720:	4918      	ldr	r1, [pc, #96]	; (2784 <phys_cc1350+0x130>)
    2722:	e79f      	b.n	2664 <phys_cc1350+0x10>
    2724:	4605      	mov	r5, r0
    2726:	e7c0      	b.n	26aa <phys_cc1350+0x56>

#if RADIO_DEFAULT_POWER <= 7
#if (RADIO_OPTIONS & RADIO_OPTION_PXOPTIONS)
	cmd_sp.txPower =
#endif
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2728:	f64b 432b 	movw	r3, #48171	; 0xbc2b
    272c:	4c20      	ldr	r4, [pc, #128]	; (27b0 <phys_cc1350+0x15c>)
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    272e:	4921      	ldr	r1, [pc, #132]	; (27b4 <phys_cc1350+0x160>)
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2730:	8363      	strh	r3, [r4, #26]
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2732:	4b21      	ldr	r3, [pc, #132]	; (27b8 <phys_cc1350+0x164>)
    2734:	781a      	ldrb	r2, [r3, #0]
    2736:	3a01      	subs	r2, #1
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2738:	eb01 0382 	add.w	r3, r1, r2, lsl #2
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    273c:	8858      	ldrh	r0, [r3, #2]
    273e:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
    2742:	6922      	ldr	r2, [r4, #16]
    2744:	f003 030f 	and.w	r3, r3, #15
    2748:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
    274c:	f422 12ff 	bic.w	r2, r2, #2088960	; 0x1fe000
    2750:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    2754:	f022 020f 	bic.w	r2, r2, #15
    2758:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    275c:	4313      	orrs	r3, r2
    275e:	6123      	str	r3, [r4, #16]
#endif

#if RADIO_BITRATE_INDEX > 0
	plugrt ();
#endif
	plugch ();
    2760:	f7ff fbc2 	bl	1ee8 <plugch>

	// Make sure, prop mode is selected in PRCM (this is supposed to be
	// the default)
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2764:	4b15      	ldr	r3, [pc, #84]	; (27bc <phys_cc1350+0x168>)

	// Precompute the Trim
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2766:	4620      	mov	r0, r4
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2768:	f8c3 51d0 	str.w	r5, [r3, #464]	; 0x1d0
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    276c:	f000 fe22 	bl	33b4 <NOROM_RFCRTrim>
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2770:	4620      	mov	r0, r4
    2772:	4913      	ldr	r1, [pc, #76]	; (27c0 <phys_cc1350+0x16c>)
    2774:	f000 fd76 	bl	3264 <NOROM_RFCRfTrimRead>
			(rfTrim_t*)&rfTrim);

	// Direct all doorbell interrupts permanently to CPE0
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2778:	4b12      	ldr	r3, [pc, #72]	; (27c4 <phys_cc1350+0x170>)
    277a:	619d      	str	r5, [r3, #24]
}
    277c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2780:	200001e4 	andcs	r0, r0, r4, ror #3
    2784:	00004476 	andeq	r4, r0, r6, ror r4
    2788:	0000447b 	andeq	r4, r0, fp, ror r4
    278c:	20000078 	andcs	r0, r0, r8, ror r0
    2790:	00001f09 	andeq	r1, r0, r9, lsl #30
    2794:	200001f8 	strdcs	r0, [r0], -r8
    2798:	200001dc 	ldrdcs	r0, [r0], -ip
    279c:	200001e0 	andcs	r0, r0, r0, ror #3
    27a0:	00004483 	andeq	r4, r0, r3, lsl #9
    27a4:	200001ca 	andcs	r0, r0, sl, asr #3
    27a8:	00002409 	andeq	r2, r0, r9, lsl #8
    27ac:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    27b0:	20000050 	andcs	r0, r0, r0, asr r0
    27b4:	00004de8 	andeq	r4, r0, r8, ror #27
    27b8:	20000036 	andcs	r0, r0, r6, lsr r0
    27bc:	40082000 	andmi	r2, r8, r0
    27c0:	200001e8 	andcs	r0, r0, r8, ror #3
    27c4:	40041000 	andmi	r1, r4, r0

000027c8 <tcv_clo_null>:
    27c8:	b510      	push	{r4, lr}
    27ca:	4a07      	ldr	r2, [pc, #28]	; (27e8 <tcv_clo_null+0x20>)
    27cc:	4603      	mov	r3, r0
    27ce:	6812      	ldr	r2, [r2, #0]
    27d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    27d4:	b132      	cbz	r2, 27e4 <tcv_clo_null+0x1c>
    27d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    27da:	428c      	cmp	r4, r1
    27dc:	bf04      	itt	eq
    27de:	f842 0023 	streq.w	r0, [r2, r3, lsl #2]
    27e2:	2000      	moveq	r0, #0
    27e4:	bd10      	pop	{r4, pc}
    27e6:	bf00      	nop
    27e8:	20000208 	andcs	r0, r0, r8, lsl #4

000027ec <tcv_rcv_null>:
    27ec:	4907      	ldr	r1, [pc, #28]	; (280c <tcv_rcv_null+0x20>)
    27ee:	9a00      	ldr	r2, [sp, #0]
    27f0:	6809      	ldr	r1, [r1, #0]
    27f2:	b909      	cbnz	r1, 27f8 <tcv_rcv_null+0xc>
    27f4:	2000      	movs	r0, #0
    27f6:	4770      	bx	lr
    27f8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    27fc:	6019      	str	r1, [r3, #0]
    27fe:	3101      	adds	r1, #1
    2800:	d0f8      	beq.n	27f4 <tcv_rcv_null+0x8>
    2802:	2300      	movs	r3, #0
    2804:	2002      	movs	r0, #2
    2806:	8053      	strh	r3, [r2, #2]
    2808:	8013      	strh	r3, [r2, #0]
    280a:	4770      	bx	lr
    280c:	20000208 	andcs	r0, r0, r8, lsl #4

00002810 <tcv_frm_null>:
    2810:	2000      	movs	r0, #0
    2812:	8048      	strh	r0, [r1, #2]
    2814:	8008      	strh	r0, [r1, #0]
    2816:	4770      	bx	lr

00002818 <tcv_out_null>:
    2818:	2004      	movs	r0, #4
    281a:	4770      	bx	lr

0000281c <tcv_xmt_null>:
    281c:	2001      	movs	r0, #1
    281e:	4770      	bx	lr

00002820 <tcv_ope_null>:
    2820:	b570      	push	{r4, r5, r6, lr}
    2822:	4e0f      	ldr	r6, [pc, #60]	; (2860 <tcv_ope_null+0x40>)
    2824:	4604      	mov	r4, r0
    2826:	6833      	ldr	r3, [r6, #0]
    2828:	460d      	mov	r5, r1
    282a:	b94b      	cbnz	r3, 2840 <tcv_ope_null+0x20>
    282c:	200c      	movs	r0, #12
    282e:	f7fe fd99 	bl	1364 <__pi_malloc>
    2832:	6030      	str	r0, [r6, #0]
    2834:	b178      	cbz	r0, 2856 <tcv_ope_null+0x36>
    2836:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    283a:	e9c0 3300 	strd	r3, r3, [r0]
    283e:	6083      	str	r3, [r0, #8]
    2840:	6833      	ldr	r3, [r6, #0]
    2842:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    2846:	3201      	adds	r2, #1
    2848:	bf06      	itte	eq
    284a:	f843 5024 	streq.w	r5, [r3, r4, lsl #2]
    284e:	2000      	moveq	r0, #0
    2850:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    2854:	bd70      	pop	{r4, r5, r6, pc}
    2856:	2006      	movs	r0, #6
    2858:	4902      	ldr	r1, [pc, #8]	; (2864 <tcv_ope_null+0x44>)
    285a:	f7fd fe17 	bl	48c <__pi_syserror>
    285e:	bf00      	nop
    2860:	20000208 	andcs	r0, r0, r8, lsl #4
    2864:	00004df4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>

00002868 <outc.0>:

	char c;
	word d;

	void outc (word c) {
		if (res && (d < n))
    2868:	f8dc 2000 	ldr.w	r2, [ip]
    286c:	b132      	cbz	r2, 287c <outc.0+0x14>
    286e:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    2872:	f8bc 1004 	ldrh.w	r1, [ip, #4]
    2876:	4299      	cmp	r1, r3
			// Store if there is a buffer ...
			res [d] = (char) c;
    2878:	bf88      	it	hi
    287a:	54d0      	strbhi	r0, [r2, r3]
		// ... otherwise just count
		d++;
    287c:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    2880:	3301      	adds	r3, #1
    2882:	f8ac 3006 	strh.w	r3, [ip, #6]
	};
    2886:	4770      	bx	lr

00002888 <__pi_vfparse>:
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    288c:	461c      	mov	r4, r3
    288e:	ab0c      	add	r3, sp, #48	; 0x30
    2890:	9303      	str	r3, [sp, #12]
			if (i == 0) \
				break; \
			c = (char) (val / i); \
		}

	d = 0;
    2892:	2300      	movs	r3, #0
				if (c == 'd' && (val & 0x8000) != 0) {
					/* Minus */
					outc ('-');
					val = (~val) + 1;
				}
				enci (10000);
    2894:	260a      	movs	r6, #10
						[ (val >> i) & 0xf ]);
    2896:	4f83      	ldr	r7, [pc, #524]	; (2aa4 <__pi_vfparse+0x21c>)
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2898:	9001      	str	r0, [sp, #4]
    289a:	f8ad 1008 	strh.w	r1, [sp, #8]
	d = 0;
    289e:	f8ad 300a 	strh.w	r3, [sp, #10]
		c = *fm++;
    28a2:	f892 9000 	ldrb.w	r9, [r2]
		if (c == '\\') {
    28a6:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    28aa:	d113      	bne.n	28d4 <__pi_vfparse+0x4c>
			if ((c = *fm++) == '\0') {
    28ac:	f892 9001 	ldrb.w	r9, [r2, #1]
    28b0:	1c95      	adds	r5, r2, #2
				outc ('\\');
    28b2:	f10d 0c04 	add.w	ip, sp, #4
			if ((c = *fm++) == '\0') {
    28b6:	f1b9 0f00 	cmp.w	r9, #0
    28ba:	d106      	bne.n	28ca <__pi_vfparse+0x42>
				outc ('\\');
    28bc:	205c      	movs	r0, #92	; 0x5c
    28be:	f7ff ffd3 	bl	2868 <outc.0>
					goto Ret;
			}
		} else {
			// Regular character
Eol:
			outc (c);
    28c2:	4648      	mov	r0, r9
    28c4:	f10d 0c04 	add.w	ip, sp, #4
    28c8:	e022      	b.n	2910 <__pi_vfparse+0x88>
			outc (c);
    28ca:	4648      	mov	r0, r9
				outc (val);
    28cc:	f7ff ffcc 	bl	2868 <outc.0>
				val = (word) va_arg (ap, aword);
    28d0:	462a      	mov	r2, r5
    28d2:	e7e6      	b.n	28a2 <__pi_vfparse+0x1a>
		if (c == '%') {
    28d4:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    28d8:	f040 80e1 	bne.w	2a9e <__pi_vfparse+0x216>
			c = *fm++;
    28dc:	f892 8001 	ldrb.w	r8, [r2, #1]
    28e0:	1c95      	adds	r5, r2, #2
			switch (c) {
    28e2:	f1b8 0f73 	cmp.w	r8, #115	; 0x73
    28e6:	f000 80cc 	beq.w	2a82 <__pi_vfparse+0x1fa>
    28ea:	d81a      	bhi.n	2922 <__pi_vfparse+0x9a>
    28ec:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
    28f0:	d032      	beq.n	2958 <__pi_vfparse+0xd0>
    28f2:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    28f6:	d066      	beq.n	29c6 <__pi_vfparse+0x13e>
    28f8:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
    28fc:	f000 80bb 	beq.w	2a76 <__pi_vfparse+0x1ee>
				outc ('%');
    2900:	2025      	movs	r0, #37	; 0x25
    2902:	f10d 0c04 	add.w	ip, sp, #4
    2906:	f7ff ffaf 	bl	2868 <outc.0>
				outc (c);
    290a:	4640      	mov	r0, r8
    290c:	f10d 0c04 	add.w	ip, sp, #4
			outc (c);
    2910:	f7ff ffaa 	bl	2868 <outc.0>
			if (c == '\0')
    2914:	2800      	cmp	r0, #0
    2916:	d1db      	bne.n	28d0 <__pi_vfparse+0x48>
Ret:
				return d;
    2918:	f8bd 000a 	ldrh.w	r0, [sp, #10]
		}
	}
}
    291c:	b004      	add	sp, #16
    291e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch (c) {
    2922:	f1b8 0f75 	cmp.w	r8, #117	; 0x75
    2926:	d017      	beq.n	2958 <__pi_vfparse+0xd0>
    2928:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
    292c:	d1e8      	bne.n	2900 <__pi_vfparse+0x78>
				for (i = 12; ; i -= 4) {
    292e:	f04f 080c 	mov.w	r8, #12
				val = (word) va_arg (ap, aword);
    2932:	f854 3b04 	ldr.w	r3, [r4], #4
						[ (val >> i) & 0xf ]);
    2936:	fa1f f983 	uxth.w	r9, r3
    293a:	fa49 f308 	asr.w	r3, r9, r8
    293e:	f003 030f 	and.w	r3, r3, #15
					outc (__pi_hex_enc_table
    2942:	5cf8      	ldrb	r0, [r7, r3]
    2944:	f10d 0c04 	add.w	ip, sp, #4
    2948:	f7ff ff8e 	bl	2868 <outc.0>
					if (i == 0)
    294c:	f1b8 0f00 	cmp.w	r8, #0
    2950:	d0be      	beq.n	28d0 <__pi_vfparse+0x48>
				for (i = 12; ; i -= 4) {
    2952:	f1a8 0804 	sub.w	r8, r8, #4
					outc (__pi_hex_enc_table
    2956:	e7f0      	b.n	293a <__pi_vfparse+0xb2>
				val = (word) va_arg (ap, aword);
    2958:	f854 3b04 	ldr.w	r3, [r4], #4
				if (c == 'd' && (val & 0x8000) != 0) {
    295c:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
				val = (word) va_arg (ap, aword);
    2960:	fa1f f983 	uxth.w	r9, r3
				if (c == 'd' && (val & 0x8000) != 0) {
    2964:	d10a      	bne.n	297c <__pi_vfparse+0xf4>
    2966:	041b      	lsls	r3, r3, #16
    2968:	d508      	bpl.n	297c <__pi_vfparse+0xf4>
					outc ('-');
    296a:	202d      	movs	r0, #45	; 0x2d
    296c:	f10d 0c04 	add.w	ip, sp, #4
    2970:	f7ff ff7a 	bl	2868 <outc.0>
					val = (~val) + 1;
    2974:	f1c9 0900 	rsb	r9, r9, #0
    2978:	fa1f f989 	uxth.w	r9, r9
				for (i = 12; ; i -= 4) {
    297c:	2305      	movs	r3, #5
				enci (10000);
    297e:	f242 7810 	movw	r8, #10000	; 0x2710
    2982:	fbb9 f0f8 	udiv	r0, r9, r8
    2986:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    298a:	d103      	bne.n	2994 <__pi_vfparse+0x10c>
    298c:	3b01      	subs	r3, #1
    298e:	d117      	bne.n	29c0 <__pi_vfparse+0x138>
    2990:	f04f 0801 	mov.w	r8, #1
    2994:	fa1f fa80 	uxth.w	sl, r0
    2998:	f10d 0c04 	add.w	ip, sp, #4
    299c:	3030      	adds	r0, #48	; 0x30
    299e:	f7ff ff63 	bl	2868 <outc.0>
    29a2:	fbb8 f3f6 	udiv	r3, r8, r6
    29a6:	fb08 991a 	mls	r9, r8, sl, r9
    29aa:	f1b8 0f09 	cmp.w	r8, #9
    29ae:	fa1f f989 	uxth.w	r9, r9
    29b2:	b29b      	uxth	r3, r3
    29b4:	d98c      	bls.n	28d0 <__pi_vfparse+0x48>
    29b6:	fbb9 f0f3 	udiv	r0, r9, r3
    29ba:	4698      	mov	r8, r3
    29bc:	b2c0      	uxtb	r0, r0
    29be:	e7e9      	b.n	2994 <__pi_vfparse+0x10c>
    29c0:	fbb8 f8f6 	udiv	r8, r8, r6
    29c4:	e7dd      	b.n	2982 <__pi_vfparse+0xfa>
				c = *fm;
    29c6:	7893      	ldrb	r3, [r2, #2]
				if (c == 'd' || c == 'u') {
    29c8:	2b64      	cmp	r3, #100	; 0x64
    29ca:	d001      	beq.n	29d0 <__pi_vfparse+0x148>
    29cc:	2b75      	cmp	r3, #117	; 0x75
    29ce:	d132      	bne.n	2a36 <__pi_vfparse+0x1ae>
					if (c == 'd' &&
    29d0:	2b64      	cmp	r3, #100	; 0x64
					val = va_arg (ap, lword);
    29d2:	f854 ab04 	ldr.w	sl, [r4], #4
					fm++;
    29d6:	f102 0503 	add.w	r5, r2, #3
					if (c == 'd' &&
    29da:	d109      	bne.n	29f0 <__pi_vfparse+0x168>
    29dc:	f1ba 0f00 	cmp.w	sl, #0
    29e0:	da06      	bge.n	29f0 <__pi_vfparse+0x168>
						outc ('-');
    29e2:	202d      	movs	r0, #45	; 0x2d
    29e4:	f10d 0c04 	add.w	ip, sp, #4
    29e8:	f7ff ff3e 	bl	2868 <outc.0>
						val = (~val) + 1;
    29ec:	f1ca 0a00 	rsb	sl, sl, #0
				enci (10000);
    29f0:	230a      	movs	r3, #10
					enci (1000000000UL);
    29f2:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 2aa8 <__pi_vfparse+0x220>
    29f6:	fbba f9f8 	udiv	r9, sl, r8
    29fa:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    29fe:	d103      	bne.n	2a08 <__pi_vfparse+0x180>
    2a00:	3b01      	subs	r3, #1
    2a02:	d115      	bne.n	2a30 <__pi_vfparse+0x1a8>
    2a04:	f04f 0801 	mov.w	r8, #1
    2a08:	f10d 0c04 	add.w	ip, sp, #4
    2a0c:	f109 0030 	add.w	r0, r9, #48	; 0x30
    2a10:	f7ff ff2a 	bl	2868 <outc.0>
    2a14:	f1b8 0f09 	cmp.w	r8, #9
    2a18:	fbb8 f3f6 	udiv	r3, r8, r6
    2a1c:	fb08 aa19 	mls	sl, r8, r9, sl
    2a20:	f67f af56 	bls.w	28d0 <__pi_vfparse+0x48>
    2a24:	fbba f9f3 	udiv	r9, sl, r3
    2a28:	4698      	mov	r8, r3
    2a2a:	fa5f f989 	uxtb.w	r9, r9
    2a2e:	e7eb      	b.n	2a08 <__pi_vfparse+0x180>
    2a30:	fbb8 f8f6 	udiv	r8, r8, r6
    2a34:	e7df      	b.n	29f6 <__pi_vfparse+0x16e>
				} else if (c == 'x') {
    2a36:	2b78      	cmp	r3, #120	; 0x78
    2a38:	d114      	bne.n	2a64 <__pi_vfparse+0x1dc>
					for (i = 28; ; i -= 4) {
    2a3a:	f04f 081c 	mov.w	r8, #28
					val = va_arg (ap, lword);
    2a3e:	f854 9b04 	ldr.w	r9, [r4], #4
					fm++;
    2a42:	1cd5      	adds	r5, r2, #3
							[ (val >> i) & 0xf ]);
    2a44:	fa29 f308 	lsr.w	r3, r9, r8
    2a48:	f003 030f 	and.w	r3, r3, #15
						outc (__pi_hex_enc_table
    2a4c:	5cf8      	ldrb	r0, [r7, r3]
    2a4e:	f10d 0c04 	add.w	ip, sp, #4
    2a52:	f7ff ff09 	bl	2868 <outc.0>
						if (i == 0)
    2a56:	f1b8 0f00 	cmp.w	r8, #0
    2a5a:	f43f af39 	beq.w	28d0 <__pi_vfparse+0x48>
					for (i = 28; ; i -= 4) {
    2a5e:	f1a8 0804 	sub.w	r8, r8, #4
						outc (__pi_hex_enc_table
    2a62:	e7ef      	b.n	2a44 <__pi_vfparse+0x1bc>
					outc ('%');
    2a64:	4648      	mov	r0, r9
    2a66:	f10d 0c04 	add.w	ip, sp, #4
    2a6a:	f7ff fefd 	bl	2868 <outc.0>
					outc ('l');
    2a6e:	4640      	mov	r0, r8
    2a70:	f10d 0c04 	add.w	ip, sp, #4
    2a74:	e72a      	b.n	28cc <__pi_vfparse+0x44>
				val = (word) va_arg (ap, aword);
    2a76:	f854 0b04 	ldr.w	r0, [r4], #4
				outc (val);
    2a7a:	f10d 0c04 	add.w	ip, sp, #4
    2a7e:	b280      	uxth	r0, r0
    2a80:	e724      	b.n	28cc <__pi_vfparse+0x44>
				while (*st != '\0') {
    2a82:	f854 3b04 	ldr.w	r3, [r4], #4
    2a86:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    2a8a:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    2a8e:	2800      	cmp	r0, #0
    2a90:	f43f af1e 	beq.w	28d0 <__pi_vfparse+0x48>
					outc (*st);
    2a94:	f10d 0c04 	add.w	ip, sp, #4
    2a98:	f7ff fee6 	bl	2868 <outc.0>
					st++;
    2a9c:	e7f5      	b.n	2a8a <__pi_vfparse+0x202>
		c = *fm++;
    2a9e:	1c55      	adds	r5, r2, #1
    2aa0:	e70f      	b.n	28c2 <__pi_vfparse+0x3a>
    2aa2:	bf00      	nop
    2aa4:	0000437d 	andeq	r4, r0, sp, ror r3
    2aa8:	3b9aca00 	blcc	fe6b52b0 <_estack+0xde6b02b0>

00002aac <vform>:

char *vform (char *res, const char *fm, va_list aq) {
    2aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ab0:	460e      	mov	r6, r1
    2ab2:	4617      	mov	r7, r2

	word fml, d;

	if (res != NULL) {
    2ab4:	4604      	mov	r4, r0
    2ab6:	b140      	cbz	r0, 2aca <vform+0x1e>
		// We trust the caller
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2ab8:	4613      	mov	r3, r2
    2aba:	460a      	mov	r2, r1
    2abc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2ac0:	f7ff fee2 	bl	2888 <__pi_vfparse>
		ufree (res);
		fml = d;
		goto Again;
	}
	return res;
}
    2ac4:	4620      	mov	r0, r4
    2ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fml = strlen (fm) + 17;
    2aca:	4608      	mov	r0, r1
    2acc:	f7fe fb5a 	bl	1184 <__pi_strlen>
    2ad0:	f100 0511 	add.w	r5, r0, #17
    2ad4:	b2ad      	uxth	r5, r5
	if ((res = (char*) umalloc (fml)) == NULL)
    2ad6:	4628      	mov	r0, r5
    2ad8:	f7fe fc44 	bl	1364 <__pi_malloc>
    2adc:	4604      	mov	r4, r0
    2ade:	2800      	cmp	r0, #0
    2ae0:	d0f0      	beq.n	2ac4 <vform+0x18>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2ae2:	463b      	mov	r3, r7
    2ae4:	4632      	mov	r2, r6
    2ae6:	4629      	mov	r1, r5
    2ae8:	f7ff fece 	bl	2888 <__pi_vfparse>
    2aec:	4285      	cmp	r5, r0
    2aee:	4680      	mov	r8, r0
    2af0:	d2e8      	bcs.n	2ac4 <vform+0x18>
		ufree (res);
    2af2:	4620      	mov	r0, r4
    2af4:	f7fe fbea 	bl	12cc <__pi_free>
		goto Again;
    2af8:	4645      	mov	r5, r8
    2afa:	e7ec      	b.n	2ad6 <vform+0x2a>

00002afc <vscan>:
					c -= (char) ('A' - 10); \
				*vap = ((*vap) << 4) | (at) c; \
			} \
			}

	if (buf == NULL || fmt == NULL)
    2afc:	4603      	mov	r3, r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    2afe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf == NULL || fmt == NULL)
    2b02:	2800      	cmp	r0, #0
    2b04:	f000 81b8 	beq.w	2e78 <vscan+0x37c>
    2b08:	2900      	cmp	r1, #0
    2b0a:	f000 81b7 	beq.w	2e7c <vscan+0x380>
		// A safety hatch
		return 0;

	nc = 0;
    2b0e:	2400      	movs	r4, #0
#if	CODE_LONG_INTS
		    case 'l':
			switch (*fmt++) {
			    case '\0':	return nc;
		    	    case 'd': scani (lword); break;
		    	    case 'u': scanu (lword); break;
    2b10:	270a      	movs	r7, #10
    2b12:	4625      	mov	r5, r4
			*sap = c;
			break;
		    }
		    case 's': {
			char *sap;
			while (isspace (*buf)) buf++;
    2b14:	f8df c2d8 	ldr.w	ip, [pc, #728]	; 2df0 <vscan+0x2f4>
    2b18:	460e      	mov	r6, r1
	while (*fmt != '\0') {
    2b1a:	f811 0b01 	ldrb.w	r0, [r1], #1
    2b1e:	b170      	cbz	r0, 2b3e <vscan+0x42>
		if (*fmt++ != '%')
    2b20:	2825      	cmp	r0, #37	; 0x25
    2b22:	d1f9      	bne.n	2b18 <vscan+0x1c>
		switch (*fmt++) {
    2b24:	7870      	ldrb	r0, [r6, #1]
    2b26:	1cb1      	adds	r1, r6, #2
    2b28:	286c      	cmp	r0, #108	; 0x6c
    2b2a:	f000 80e1 	beq.w	2cf0 <vscan+0x1f4>
    2b2e:	d809      	bhi.n	2b44 <vscan+0x48>
    2b30:	2863      	cmp	r0, #99	; 0x63
    2b32:	f000 8187 	beq.w	2e44 <vscan+0x348>
    2b36:	2864      	cmp	r0, #100	; 0x64
    2b38:	d043      	beq.n	2bc2 <vscan+0xc6>
    2b3a:	2800      	cmp	r0, #0
    2b3c:	d1ec      	bne.n	2b18 <vscan+0x1c>
			break;
		    }
		}
	}
	return nc;
}
    2b3e:	4620      	mov	r0, r4
    2b40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		switch (*fmt++) {
    2b44:	2875      	cmp	r0, #117	; 0x75
    2b46:	d074      	beq.n	2c32 <vscan+0x136>
    2b48:	2878      	cmp	r0, #120	; 0x78
    2b4a:	f000 8098 	beq.w	2c7e <vscan+0x182>
    2b4e:	2873      	cmp	r0, #115	; 0x73
    2b50:	d1e2      	bne.n	2b18 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    2b52:	7818      	ldrb	r0, [r3, #0]
    2b54:	461e      	mov	r6, r3
    2b56:	f1a0 0e09 	sub.w	lr, r0, #9
    2b5a:	fa5f fe8e 	uxtb.w	lr, lr
    2b5e:	f1be 0f17 	cmp.w	lr, #23
    2b62:	4698      	mov	r8, r3
    2b64:	f103 0301 	add.w	r3, r3, #1
    2b68:	f240 8176 	bls.w	2e58 <vscan+0x35c>
			if (*buf == '\0')
    2b6c:	2800      	cmp	r0, #0
    2b6e:	d0e6      	beq.n	2b3e <vscan+0x42>
			if (*buf != ',') {
    2b70:	282c      	cmp	r0, #44	; 0x2c
			sap = va_arg (ap, char*);
    2b72:	f852 eb04 	ldr.w	lr, [r2], #4
			nc++;
    2b76:	f104 0401 	add.w	r4, r4, #1
			if (*buf != ',') {
    2b7a:	d00e      	beq.n	2b9a <vscan+0x9e>
    2b7c:	4646      	mov	r6, r8
				while (!isspace (*buf) && *buf != ',' &&
    2b7e:	f818 3b01 	ldrb.w	r3, [r8], #1
    2b82:	f1a3 0009 	sub.w	r0, r3, #9
    2b86:	2801      	cmp	r0, #1
    2b88:	d907      	bls.n	2b9a <vscan+0x9e>
    2b8a:	2b0d      	cmp	r3, #13
    2b8c:	d005      	beq.n	2b9a <vscan+0x9e>
    2b8e:	2b2c      	cmp	r3, #44	; 0x2c
    2b90:	d003      	beq.n	2b9a <vscan+0x9e>
    2b92:	f013 0fdf 	tst.w	r3, #223	; 0xdf
    2b96:	f040 8166 	bne.w	2e66 <vscan+0x36a>
			while (isspace (*buf)) buf++;
    2b9a:	f896 8000 	ldrb.w	r8, [r6]
    2b9e:	4633      	mov	r3, r6
    2ba0:	f1a8 0009 	sub.w	r0, r8, #9
    2ba4:	b2c0      	uxtb	r0, r0
    2ba6:	2817      	cmp	r0, #23
    2ba8:	f106 0601 	add.w	r6, r6, #1
    2bac:	f240 815e 	bls.w	2e6c <vscan+0x370>
			if (*buf == ',') buf++;
    2bb0:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
    2bb4:	bf08      	it	eq
    2bb6:	4633      	moveq	r3, r6
			*sap = '\0';
    2bb8:	f88e 5000 	strb.w	r5, [lr]
			break;
    2bbc:	e7ac      	b.n	2b18 <vscan+0x1c>
		    case 'd': scani (word); break;
    2bbe:	2e00      	cmp	r6, #0
    2bc0:	d0bd      	beq.n	2b3e <vscan+0x42>
    2bc2:	469e      	mov	lr, r3
    2bc4:	f813 6b01 	ldrb.w	r6, [r3], #1
    2bc8:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    2bcc:	2809      	cmp	r0, #9
    2bce:	d923      	bls.n	2c18 <vscan+0x11c>
    2bd0:	2e2d      	cmp	r6, #45	; 0x2d
    2bd2:	d001      	beq.n	2bd8 <vscan+0xdc>
    2bd4:	2e2b      	cmp	r6, #43	; 0x2b
    2bd6:	d1f2      	bne.n	2bbe <vscan+0xc2>
    2bd8:	7818      	ldrb	r0, [r3, #0]
    2bda:	469e      	mov	lr, r3
    2bdc:	3830      	subs	r0, #48	; 0x30
    2bde:	2809      	cmp	r0, #9
    2be0:	d8ef      	bhi.n	2bc2 <vscan+0xc6>
    2be2:	f1a6 092d 	sub.w	r9, r6, #45	; 0x2d
    2be6:	f1d9 0800 	rsbs	r8, r9, #0
    2bea:	eb48 0809 	adc.w	r8, r8, r9
    2bee:	f852 6b04 	ldr.w	r6, [r2], #4
    2bf2:	3401      	adds	r4, #1
    2bf4:	8035      	strh	r5, [r6, #0]
    2bf6:	f89e 0000 	ldrb.w	r0, [lr]
    2bfa:	4673      	mov	r3, lr
    2bfc:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
    2c00:	f1b9 0f09 	cmp.w	r9, #9
    2c04:	f10e 0e01 	add.w	lr, lr, #1
    2c08:	d909      	bls.n	2c1e <vscan+0x122>
    2c0a:	f1b8 0f00 	cmp.w	r8, #0
    2c0e:	d183      	bne.n	2b18 <vscan+0x1c>
    2c10:	8830      	ldrh	r0, [r6, #0]
    2c12:	4240      	negs	r0, r0
    2c14:	8030      	strh	r0, [r6, #0]
    2c16:	e77f      	b.n	2b18 <vscan+0x1c>
    2c18:	f04f 0800 	mov.w	r8, #0
    2c1c:	e7e7      	b.n	2bee <vscan+0xf2>
    2c1e:	8833      	ldrh	r3, [r6, #0]
    2c20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2c24:	ebc0 0043 	rsb	r0, r0, r3, lsl #1
    2c28:	3030      	adds	r0, #48	; 0x30
    2c2a:	8030      	strh	r0, [r6, #0]
    2c2c:	e7e3      	b.n	2bf6 <vscan+0xfa>
		    case 'u': scanu (word); break;
    2c2e:	2800      	cmp	r0, #0
    2c30:	d085      	beq.n	2b3e <vscan+0x42>
    2c32:	7818      	ldrb	r0, [r3, #0]
    2c34:	461e      	mov	r6, r3
    2c36:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    2c3a:	f1be 0f09 	cmp.w	lr, #9
    2c3e:	f103 0301 	add.w	r3, r3, #1
    2c42:	d8f4      	bhi.n	2c2e <vscan+0x132>
    2c44:	f852 eb04 	ldr.w	lr, [r2], #4
    2c48:	3401      	adds	r4, #1
    2c4a:	f8ae 5000 	strh.w	r5, [lr]
    2c4e:	7830      	ldrb	r0, [r6, #0]
    2c50:	4633      	mov	r3, r6
    2c52:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
    2c56:	f1b8 0f09 	cmp.w	r8, #9
    2c5a:	f106 0601 	add.w	r6, r6, #1
    2c5e:	f63f af5b 	bhi.w	2b18 <vscan+0x1c>
    2c62:	f8be 3000 	ldrh.w	r3, [lr]
    2c66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2c6a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    2c6e:	3830      	subs	r0, #48	; 0x30
    2c70:	f8ae 0000 	strh.w	r0, [lr]
    2c74:	e7eb      	b.n	2c4e <vscan+0x152>
		    case 'x': scanx (word); break;
    2c76:	f1be 0f00 	cmp.w	lr, #0
    2c7a:	f43f af60 	beq.w	2b3e <vscan+0x42>
    2c7e:	f893 e000 	ldrb.w	lr, [r3]
    2c82:	461e      	mov	r6, r3
    2c84:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    2c88:	2809      	cmp	r0, #9
    2c8a:	f103 0301 	add.w	r3, r3, #1
    2c8e:	d904      	bls.n	2c9a <vscan+0x19e>
    2c90:	f02e 0020 	bic.w	r0, lr, #32
    2c94:	3841      	subs	r0, #65	; 0x41
    2c96:	2805      	cmp	r0, #5
    2c98:	d8ed      	bhi.n	2c76 <vscan+0x17a>
    2c9a:	f852 eb04 	ldr.w	lr, [r2], #4
    2c9e:	3401      	adds	r4, #1
    2ca0:	f8ae 5000 	strh.w	r5, [lr]
    2ca4:	f106 0805 	add.w	r8, r6, #5
    2ca8:	f896 9000 	ldrb.w	r9, [r6]
    2cac:	4633      	mov	r3, r6
    2cae:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    2cb2:	b2c0      	uxtb	r0, r0
    2cb4:	2809      	cmp	r0, #9
    2cb6:	f106 0601 	add.w	r6, r6, #1
    2cba:	f240 80e1 	bls.w	2e80 <vscan+0x384>
    2cbe:	f029 0020 	bic.w	r0, r9, #32
    2cc2:	3841      	subs	r0, #65	; 0x41
    2cc4:	2805      	cmp	r0, #5
    2cc6:	f63f af27 	bhi.w	2b18 <vscan+0x1c>
    2cca:	4546      	cmp	r6, r8
    2ccc:	f43f af24 	beq.w	2b18 <vscan+0x1c>
    2cd0:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    2cd4:	2b05      	cmp	r3, #5
    2cd6:	bf94      	ite	ls
    2cd8:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    2cdc:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    2ce0:	b2c0      	uxtb	r0, r0
    2ce2:	f8be 3000 	ldrh.w	r3, [lr]
    2ce6:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    2cea:	f8ae 0000 	strh.w	r0, [lr]
    2cee:	e7db      	b.n	2ca8 <vscan+0x1ac>
			switch (*fmt++) {
    2cf0:	78b0      	ldrb	r0, [r6, #2]
    2cf2:	1cf1      	adds	r1, r6, #3
    2cf4:	2875      	cmp	r0, #117	; 0x75
    2cf6:	f000 8080 	beq.w	2dfa <vscan+0x2fe>
    2cfa:	d831      	bhi.n	2d60 <vscan+0x264>
    2cfc:	2800      	cmp	r0, #0
    2cfe:	f43f af1e 	beq.w	2b3e <vscan+0x42>
    2d02:	2864      	cmp	r0, #100	; 0x64
    2d04:	f47f af08 	bne.w	2b18 <vscan+0x1c>
    2d08:	4698      	mov	r8, r3
		    	    case 'd': scani (lword); break;
    2d0a:	f813 6b01 	ldrb.w	r6, [r3], #1
    2d0e:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    2d12:	2809      	cmp	r0, #9
    2d14:	d962      	bls.n	2ddc <vscan+0x2e0>
    2d16:	2e2d      	cmp	r6, #45	; 0x2d
    2d18:	d001      	beq.n	2d1e <vscan+0x222>
    2d1a:	2e2b      	cmp	r6, #43	; 0x2b
    2d1c:	d15b      	bne.n	2dd6 <vscan+0x2da>
    2d1e:	7818      	ldrb	r0, [r3, #0]
    2d20:	4698      	mov	r8, r3
    2d22:	3830      	subs	r0, #48	; 0x30
    2d24:	2809      	cmp	r0, #9
    2d26:	d8ef      	bhi.n	2d08 <vscan+0x20c>
    2d28:	3e2d      	subs	r6, #45	; 0x2d
    2d2a:	4270      	negs	r0, r6
    2d2c:	4170      	adcs	r0, r6
    2d2e:	f852 eb04 	ldr.w	lr, [r2], #4
    2d32:	3401      	adds	r4, #1
    2d34:	f8ce 5000 	str.w	r5, [lr]
    2d38:	f898 6000 	ldrb.w	r6, [r8]
    2d3c:	4643      	mov	r3, r8
    2d3e:	3e30      	subs	r6, #48	; 0x30
    2d40:	fa5f f986 	uxtb.w	r9, r6
    2d44:	f1b9 0f09 	cmp.w	r9, #9
    2d48:	f108 0801 	add.w	r8, r8, #1
    2d4c:	d948      	bls.n	2de0 <vscan+0x2e4>
    2d4e:	2800      	cmp	r0, #0
    2d50:	f47f aee2 	bne.w	2b18 <vscan+0x1c>
    2d54:	f8de 0000 	ldr.w	r0, [lr]
    2d58:	4240      	negs	r0, r0
    2d5a:	f8ce 0000 	str.w	r0, [lr]
    2d5e:	e6db      	b.n	2b18 <vscan+0x1c>
    2d60:	2878      	cmp	r0, #120	; 0x78
    2d62:	f47f aed9 	bne.w	2b18 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    2d66:	f893 e000 	ldrb.w	lr, [r3]
    2d6a:	461e      	mov	r6, r3
    2d6c:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    2d70:	2809      	cmp	r0, #9
    2d72:	f103 0301 	add.w	r3, r3, #1
    2d76:	d904      	bls.n	2d82 <vscan+0x286>
    2d78:	f02e 0020 	bic.w	r0, lr, #32
    2d7c:	3841      	subs	r0, #65	; 0x41
    2d7e:	2805      	cmp	r0, #5
    2d80:	d85c      	bhi.n	2e3c <vscan+0x340>
    2d82:	f852 eb04 	ldr.w	lr, [r2], #4
    2d86:	3401      	adds	r4, #1
    2d88:	f8ce 5000 	str.w	r5, [lr]
    2d8c:	f106 0809 	add.w	r8, r6, #9
    2d90:	f896 9000 	ldrb.w	r9, [r6]
    2d94:	4633      	mov	r3, r6
    2d96:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    2d9a:	b2c0      	uxtb	r0, r0
    2d9c:	2809      	cmp	r0, #9
    2d9e:	f106 0601 	add.w	r6, r6, #1
    2da2:	d971      	bls.n	2e88 <vscan+0x38c>
    2da4:	f029 0020 	bic.w	r0, r9, #32
    2da8:	3841      	subs	r0, #65	; 0x41
    2daa:	2805      	cmp	r0, #5
    2dac:	f63f aeb4 	bhi.w	2b18 <vscan+0x1c>
    2db0:	4546      	cmp	r6, r8
    2db2:	f43f aeb1 	beq.w	2b18 <vscan+0x1c>
    2db6:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    2dba:	2b05      	cmp	r3, #5
    2dbc:	bf94      	ite	ls
    2dbe:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    2dc2:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    2dc6:	b2c0      	uxtb	r0, r0
    2dc8:	f8de 3000 	ldr.w	r3, [lr]
    2dcc:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    2dd0:	f8ce 0000 	str.w	r0, [lr]
    2dd4:	e7dc      	b.n	2d90 <vscan+0x294>
		    	    case 'd': scani (lword); break;
    2dd6:	2e00      	cmp	r6, #0
    2dd8:	d196      	bne.n	2d08 <vscan+0x20c>
    2dda:	e6b0      	b.n	2b3e <vscan+0x42>
    2ddc:	2000      	movs	r0, #0
    2dde:	e7a6      	b.n	2d2e <vscan+0x232>
    2de0:	f8de 3000 	ldr.w	r3, [lr]
    2de4:	b2b6      	uxth	r6, r6
    2de6:	437b      	muls	r3, r7
    2de8:	1b9e      	subs	r6, r3, r6
    2dea:	f8ce 6000 	str.w	r6, [lr]
    2dee:	e7a3      	b.n	2d38 <vscan+0x23c>
    2df0:	00800013 	addeq	r0, r0, r3, lsl r0
		    	    case 'u': scanu (lword); break;
    2df4:	2800      	cmp	r0, #0
    2df6:	f43f aea2 	beq.w	2b3e <vscan+0x42>
    2dfa:	7818      	ldrb	r0, [r3, #0]
    2dfc:	461e      	mov	r6, r3
    2dfe:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    2e02:	f1be 0f09 	cmp.w	lr, #9
    2e06:	f103 0301 	add.w	r3, r3, #1
    2e0a:	d8f3      	bhi.n	2df4 <vscan+0x2f8>
    2e0c:	f852 eb04 	ldr.w	lr, [r2], #4
    2e10:	3401      	adds	r4, #1
    2e12:	f8ce 5000 	str.w	r5, [lr]
    2e16:	7830      	ldrb	r0, [r6, #0]
    2e18:	4633      	mov	r3, r6
    2e1a:	3830      	subs	r0, #48	; 0x30
    2e1c:	fa5f f880 	uxtb.w	r8, r0
    2e20:	f1b8 0f09 	cmp.w	r8, #9
    2e24:	f106 0601 	add.w	r6, r6, #1
    2e28:	f63f ae76 	bhi.w	2b18 <vscan+0x1c>
    2e2c:	f8de 3000 	ldr.w	r3, [lr]
    2e30:	b280      	uxth	r0, r0
    2e32:	fb07 0003 	mla	r0, r7, r3, r0
    2e36:	f8ce 0000 	str.w	r0, [lr]
    2e3a:	e7ec      	b.n	2e16 <vscan+0x31a>
		    	    case 'x': scanx (lword); break;
    2e3c:	f1be 0f00 	cmp.w	lr, #0
    2e40:	d191      	bne.n	2d66 <vscan+0x26a>
    2e42:	e67c      	b.n	2b3e <vscan+0x42>
			if ((c = *buf++) == '\0')
    2e44:	f813 0b01 	ldrb.w	r0, [r3], #1
    2e48:	2800      	cmp	r0, #0
    2e4a:	f43f ae78 	beq.w	2b3e <vscan+0x42>
			sap = va_arg (ap, char*);
    2e4e:	f852 6b04 	ldr.w	r6, [r2], #4
			nc++;
    2e52:	3401      	adds	r4, #1
			*sap = c;
    2e54:	7030      	strb	r0, [r6, #0]
			break;
    2e56:	e65f      	b.n	2b18 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    2e58:	fa2c fe0e 	lsr.w	lr, ip, lr
    2e5c:	f01e 0f01 	tst.w	lr, #1
    2e60:	f47f ae77 	bne.w	2b52 <vscan+0x56>
    2e64:	e684      	b.n	2b70 <vscan+0x74>
						*sap++ = *buf++;
    2e66:	f80e 3b01 	strb.w	r3, [lr], #1
    2e6a:	e687      	b.n	2b7c <vscan+0x80>
			while (isspace (*buf)) buf++;
    2e6c:	fa2c f000 	lsr.w	r0, ip, r0
    2e70:	07c0      	lsls	r0, r0, #31
    2e72:	f53f ae92 	bmi.w	2b9a <vscan+0x9e>
    2e76:	e69f      	b.n	2bb8 <vscan+0xbc>
		return 0;
    2e78:	4604      	mov	r4, r0
    2e7a:	e660      	b.n	2b3e <vscan+0x42>
    2e7c:	460c      	mov	r4, r1
    2e7e:	e65e      	b.n	2b3e <vscan+0x42>
		    case 'x': scanx (word); break;
    2e80:	4546      	cmp	r6, r8
    2e82:	f47f af2e 	bne.w	2ce2 <vscan+0x1e6>
    2e86:	e647      	b.n	2b18 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    2e88:	4546      	cmp	r6, r8
    2e8a:	d19d      	bne.n	2dc8 <vscan+0x2cc>
    2e8c:	e644      	b.n	2b18 <vscan+0x1c>
    2e8e:	bf00      	nop

00002e90 <__outserial>:
#define	__cport		UART_A
#define	set_cport	CNOP

#endif	/* UART_DRIVER > 1 */

strand (__outserial, const char*)
    2e90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2e92:	4b18      	ldr	r3, [pc, #96]	; (2ef4 <__outserial+0x64>)
    2e94:	681b      	ldr	r3, [r3, #0]
    2e96:	689d      	ldr	r5, [r3, #8]
    2e98:	b130      	cbz	r0, 2ea8 <__outserial+0x18>
    2e9a:	280a      	cmp	r0, #10
    2e9c:	d00d      	beq.n	2eba <__outserial+0x2a>
	// prone
	goto __OM_WRITE;

	// proceed (OM_WRITE);

endstrand
    2e9e:	b003      	add	sp, #12
    2ea0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2ea4:	f7fe b868 	b.w	f78 <__pi_badstate>
	ptr = data;
    2ea8:	4b13      	ldr	r3, [pc, #76]	; (2ef8 <__outserial+0x68>)
    2eaa:	4c14      	ldr	r4, [pc, #80]	; (2efc <__outserial+0x6c>)
    2eac:	601d      	str	r5, [r3, #0]
	if (*ptr)
    2eae:	782b      	ldrb	r3, [r5, #0]
    2eb0:	b1e3      	cbz	r3, 2eec <__outserial+0x5c>
		len = strlen (ptr);
    2eb2:	4628      	mov	r0, r5
    2eb4:	f7fe f966 	bl	1184 <__pi_strlen>
    2eb8:	6020      	str	r0, [r4, #0]
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    2eba:	4e0f      	ldr	r6, [pc, #60]	; (2ef8 <__outserial+0x68>)
    2ebc:	4f0f      	ldr	r7, [pc, #60]	; (2efc <__outserial+0x6c>)
    2ebe:	883b      	ldrh	r3, [r7, #0]
    2ec0:	2201      	movs	r2, #1
    2ec2:	9300      	str	r3, [sp, #0]
    2ec4:	2100      	movs	r1, #0
    2ec6:	6833      	ldr	r3, [r6, #0]
    2ec8:	200a      	movs	r0, #10
    2eca:	f7fe f989 	bl	11e0 <io>
	ptr += quant;
    2ece:	6833      	ldr	r3, [r6, #0]
	len -= quant;
    2ed0:	683c      	ldr	r4, [r7, #0]
	ptr += quant;
    2ed2:	4403      	add	r3, r0
	len -= quant;
    2ed4:	1a24      	subs	r4, r4, r0
	ptr += quant;
    2ed6:	6033      	str	r3, [r6, #0]
	len -= quant;
    2ed8:	603c      	str	r4, [r7, #0]
	if (len == 0) {
    2eda:	2c00      	cmp	r4, #0
    2edc:	d1ef      	bne.n	2ebe <__outserial+0x2e>
		ufree (data);
    2ede:	4628      	mov	r0, r5
    2ee0:	f7fe f9f4 	bl	12cc <__pi_free>
		finish;
    2ee4:	4620      	mov	r0, r4
    2ee6:	f7fe fa15 	bl	1314 <kill>
    2eea:	e7e8      	b.n	2ebe <__outserial+0x2e>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    2eec:	786b      	ldrb	r3, [r5, #1]
    2eee:	3303      	adds	r3, #3
    2ef0:	6023      	str	r3, [r4, #0]
    2ef2:	e7e2      	b.n	2eba <__outserial+0x2a>
    2ef4:	2000013c 	andcs	r0, r0, ip, lsr r1
    2ef8:	20000210 	andcs	r0, r0, r0, lsl r2
    2efc:	2000020c 	andcs	r0, r0, ip, lsl #4

00002f00 <__inserial>:
#define	IM_INIT		0
#define	IM_READ		1
#define IM_BIN		2
#define IM_BINL		3

strand (__inserial, address)
    2f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2f02:	4d42      	ldr	r5, [pc, #264]	; (300c <__inserial+0x10c>)
    2f04:	682b      	ldr	r3, [r5, #0]
    2f06:	689c      	ldr	r4, [r3, #8]
    2f08:	2803      	cmp	r0, #3
    2f0a:	d87a      	bhi.n	3002 <__inserial+0x102>
    2f0c:	e8df f000 	tbb	[pc, r0]
    2f10:	5d481802 	stclpl	8, cr1, [r8, #-8]
	static int len;
	int quant;

  entry (IM_INIT)

	if (__inpline != NULL)
    2f14:	4b3e      	ldr	r3, [pc, #248]	; (3010 <__inserial+0x110>)
    2f16:	681b      	ldr	r3, [r3, #0]
    2f18:	b113      	cbz	r3, 2f20 <__inserial+0x20>
		/* Never overwrite previous unclaimed stuff */
		finish;
    2f1a:	2000      	movs	r0, #0
    2f1c:	f7fe f9fa 	bl	1314 <kill>

	// On eCOG char* is non-trivially upgraded from 'address'
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    2f20:	2040      	movs	r0, #64	; 0x40
    2f22:	f7fe fa1f 	bl	1364 <__pi_malloc>
    2f26:	4b3b      	ldr	r3, [pc, #236]	; (3014 <__inserial+0x114>)
    2f28:	4604      	mov	r4, r0
    2f2a:	6018      	str	r0, [r3, #0]
    2f2c:	b918      	cbnz	r0, 2f36 <__inserial+0x36>
		/*
		 * We have to wait for memory
		 */
		umwait (IM_INIT);
    2f2e:	f7fe fa87 	bl	1440 <__pi_waitmem>
		release;
    2f32:	f7fd fe53 	bl	bdc <__pi_release>
	}
	savedata (data);
	len = MAX_LINE_LENGTH;
    2f36:	223f      	movs	r2, #63	; 0x3f
	savedata (data);
    2f38:	682b      	ldr	r3, [r5, #0]
    2f3a:	6098      	str	r0, [r3, #8]
	len = MAX_LINE_LENGTH;
    2f3c:	4b36      	ldr	r3, [pc, #216]	; (3018 <__inserial+0x118>)
    2f3e:	601a      	str	r2, [r3, #0]
	/* Make sure this doesn't change while we are reading */
	set_cport;

  entry (IM_READ)

	io (IM_READ, __cport, READ, ptr, 1);
    2f40:	2001      	movs	r0, #1
    2f42:	2200      	movs	r2, #0
    2f44:	4d33      	ldr	r5, [pc, #204]	; (3014 <__inserial+0x114>)
    2f46:	9000      	str	r0, [sp, #0]
    2f48:	682b      	ldr	r3, [r5, #0]
    2f4a:	4611      	mov	r1, r2
    2f4c:	f7fe f948 	bl	11e0 <io>
	if (ptr == (char*) data) { // new line
    2f50:	682b      	ldr	r3, [r5, #0]
    2f52:	42a3      	cmp	r3, r4
    2f54:	d10d      	bne.n	2f72 <__inserial+0x72>
		if (*ptr == '\0') { // bin cmd
    2f56:	7823      	ldrb	r3, [r4, #0]
    2f58:	b923      	cbnz	r3, 2f64 <__inserial+0x64>
			ptr++;
    2f5a:	1c63      	adds	r3, r4, #1
			proceed (IM_BIN);
    2f5c:	2002      	movs	r0, #2
			ptr++;
    2f5e:	602b      	str	r3, [r5, #0]
			proceed (IM_BIN);
    2f60:	f7fe f892 	bl	1088 <proceed>
		}

		if (*ptr < 0x20)
    2f64:	682b      	ldr	r3, [r5, #0]
    2f66:	781b      	ldrb	r3, [r3, #0]
    2f68:	2b1f      	cmp	r3, #31
    2f6a:	d802      	bhi.n	2f72 <__inserial+0x72>
			/* Ignore codes below space at the beginning of line */
			proceed (IM_READ);
    2f6c:	2001      	movs	r0, #1
    2f6e:	f7fe f88b 	bl	1088 <proceed>
	}
	if (*ptr == '\n' || *ptr == '\r') {
    2f72:	682b      	ldr	r3, [r5, #0]
    2f74:	781a      	ldrb	r2, [r3, #0]
    2f76:	2a0a      	cmp	r2, #10
    2f78:	d001      	beq.n	2f7e <__inserial+0x7e>
    2f7a:	2a0d      	cmp	r2, #13
    2f7c:	d105      	bne.n	2f8a <__inserial+0x8a>
		*ptr = '\0';
    2f7e:	2000      	movs	r0, #0
    2f80:	7018      	strb	r0, [r3, #0]
		__inpline = (char*)data;
    2f82:	4b23      	ldr	r3, [pc, #140]	; (3010 <__inserial+0x110>)
    2f84:	601c      	str	r4, [r3, #0]
		finish;
    2f86:	f7fe f9c5 	bl	1314 <kill>
	}

	if (len) {
    2f8a:	4923      	ldr	r1, [pc, #140]	; (3018 <__inserial+0x118>)
    2f8c:	680b      	ldr	r3, [r1, #0]
    2f8e:	b123      	cbz	r3, 2f9a <__inserial+0x9a>
		ptr++;
    2f90:	682a      	ldr	r2, [r5, #0]
		len--;
    2f92:	3b01      	subs	r3, #1
		ptr++;
    2f94:	3201      	adds	r2, #1
    2f96:	602a      	str	r2, [r5, #0]
		len--;
    2f98:	600b      	str	r3, [r1, #0]
	}

	proceed (IM_READ);
    2f9a:	2001      	movs	r0, #1
    2f9c:	f7fe f874 	bl	1088 <proceed>

  entry (IM_BIN)

	io (IM_BIN, __cport, READ, ptr, 1);
    2fa0:	2301      	movs	r3, #1
    2fa2:	2200      	movs	r2, #0
    2fa4:	4d1b      	ldr	r5, [pc, #108]	; (3014 <__inserial+0x114>)
    2fa6:	9300      	str	r3, [sp, #0]
    2fa8:	4611      	mov	r1, r2
    2faa:	682b      	ldr	r3, [r5, #0]
    2fac:	2002      	movs	r0, #2
    2fae:	f7fe f917 	bl	11e0 <io>
	len -= 2;
    2fb2:	4819      	ldr	r0, [pc, #100]	; (3018 <__inserial+0x118>)
    2fb4:	6803      	ldr	r3, [r0, #0]
    2fb6:	1e9a      	subs	r2, r3, #2
	if (len > *ptr + 1) // 1 for 0x04
    2fb8:	682b      	ldr	r3, [r5, #0]
    2fba:	f813 1b01 	ldrb.w	r1, [r3], #1
    2fbe:	3101      	adds	r1, #1
		len = *ptr + 1;
    2fc0:	4291      	cmp	r1, r2
    2fc2:	bfd4      	ite	le
    2fc4:	6001      	strle	r1, [r0, #0]
    2fc6:	6002      	strgt	r2, [r0, #0]
	ptr++;
    2fc8:	602b      	str	r3, [r5, #0]

  entry (IM_BINL)

	quant = io (IM_BINL, __cport, READ, ptr, len);
    2fca:	2200      	movs	r2, #0
    2fcc:	4f12      	ldr	r7, [pc, #72]	; (3018 <__inserial+0x118>)
    2fce:	4e11      	ldr	r6, [pc, #68]	; (3014 <__inserial+0x114>)
    2fd0:	883b      	ldrh	r3, [r7, #0]
    2fd2:	4611      	mov	r1, r2
    2fd4:	9300      	str	r3, [sp, #0]
    2fd6:	2003      	movs	r0, #3
    2fd8:	6833      	ldr	r3, [r6, #0]
    2fda:	f7fe f901 	bl	11e0 <io>
	len -= quant;
    2fde:	683b      	ldr	r3, [r7, #0]
	quant = io (IM_BINL, __cport, READ, ptr, len);
    2fe0:	4605      	mov	r5, r0
	len -= quant;
    2fe2:	1a18      	subs	r0, r3, r0
    2fe4:	6038      	str	r0, [r7, #0]
	if (len == 0) {
    2fe6:	b918      	cbnz	r0, 2ff0 <__inserial+0xf0>
		__inpline = (char*)data;
    2fe8:	4b09      	ldr	r3, [pc, #36]	; (3010 <__inserial+0x110>)
    2fea:	601c      	str	r4, [r3, #0]
		finish;
    2fec:	f7fe f992 	bl	1314 <kill>
	}
	ptr += quant;
    2ff0:	6830      	ldr	r0, [r6, #0]
    2ff2:	4428      	add	r0, r5
    2ff4:	6030      	str	r0, [r6, #0]
	proceed (IM_BINL);
    2ff6:	2003      	movs	r0, #3

endstrand
    2ff8:	b003      	add	sp, #12
    2ffa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	proceed (IM_BINL);
    2ffe:	f7fe b843 	b.w	1088 <proceed>
endstrand
    3002:	b003      	add	sp, #12
    3004:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3008:	f7fd bfb6 	b.w	f78 <__pi_badstate>
    300c:	2000013c 	andcs	r0, r0, ip, lsr r1
    3010:	20000214 	andcs	r0, r0, r4, lsl r2
    3014:	2000021c 	andcs	r0, r0, ip, lsl r2
    3018:	20000218 	andcs	r0, r0, r8, lsl r2

0000301c <SafeHapiVoid>:
    301c:	b570      	push	{r4, r5, r6, lr}
    301e:	4606      	mov	r6, r0
    3020:	f000 f844 	bl	30ac <NOROM_CPUcpsid>
    3024:	4605      	mov	r5, r0
    3026:	4c06      	ldr	r4, [pc, #24]	; (3040 <SafeHapiVoid+0x24>)
    3028:	6823      	ldr	r3, [r4, #0]
    302a:	2b00      	cmp	r3, #0
    302c:	d0fb      	beq.n	3026 <SafeHapiVoid+0xa>
    302e:	47b0      	blx	r6
    3030:	2301      	movs	r3, #1
    3032:	6023      	str	r3, [r4, #0]
    3034:	b91d      	cbnz	r5, 303e <SafeHapiVoid+0x22>
    3036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    303a:	f000 b83b 	b.w	30b4 <NOROM_CPUcpsie>
    303e:	bd70      	pop	{r4, r5, r6, pc}
    3040:	400c8000 	andmi	r8, ip, r0

00003044 <NOROM_AONBatMonTemperatureGetDegC>:
    3044:	4b08      	ldr	r3, [pc, #32]	; (3068 <NOROM_AONBatMonTemperatureGetDegC+0x24>)
    3046:	6818      	ldr	r0, [r3, #0]
    3048:	4b08      	ldr	r3, [pc, #32]	; (306c <NOROM_AONBatMonTemperatureGetDegC+0x28>)
    304a:	7819      	ldrb	r1, [r3, #0]
    304c:	4b08      	ldr	r3, [pc, #32]	; (3070 <NOROM_AONBatMonTemperatureGetDegC+0x2c>)
    304e:	681a      	ldr	r2, [r3, #0]
    3050:	f340 0310 	sbfx	r3, r0, #0, #17
    3054:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
    3058:	b248      	sxtb	r0, r1
    305a:	4350      	muls	r0, r2
    305c:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    3060:	3080      	adds	r0, #128	; 0x80
    3062:	1200      	asrs	r0, r0, #8
    3064:	4770      	bx	lr
    3066:	bf00      	nop
    3068:	40095030 	andmi	r5, r9, r0, lsr r0
    306c:	5000130c 	andpl	r1, r0, ip, lsl #6
    3070:	40095028 	andmi	r5, r9, r8, lsr #32

00003074 <NOROM_AONRTCCurrentCompareValueGet>:
    3074:	4a05      	ldr	r2, [pc, #20]	; (308c <NOROM_AONRTCCurrentCompareValueGet+0x18>)
    3076:	4906      	ldr	r1, [pc, #24]	; (3090 <NOROM_AONRTCCurrentCompareValueGet+0x1c>)
    3078:	6813      	ldr	r3, [r2, #0]
    307a:	6808      	ldr	r0, [r1, #0]
    307c:	6812      	ldr	r2, [r2, #0]
    307e:	4293      	cmp	r3, r2
    3080:	d1f8      	bne.n	3074 <NOROM_AONRTCCurrentCompareValueGet>
    3082:	041b      	lsls	r3, r3, #16
    3084:	ea43 4010 	orr.w	r0, r3, r0, lsr #16
    3088:	4770      	bx	lr
    308a:	bf00      	nop
    308c:	40092008 	andmi	r2, r9, r8
    3090:	4009200c 	andmi	r2, r9, ip

00003094 <NOROM_AONRTCCurrent64BitValueGet>:
    3094:	4b03      	ldr	r3, [pc, #12]	; (30a4 <NOROM_AONRTCCurrent64BitValueGet+0x10>)
    3096:	4904      	ldr	r1, [pc, #16]	; (30a8 <NOROM_AONRTCCurrent64BitValueGet+0x14>)
    3098:	681a      	ldr	r2, [r3, #0]
    309a:	6808      	ldr	r0, [r1, #0]
    309c:	6819      	ldr	r1, [r3, #0]
    309e:	4291      	cmp	r1, r2
    30a0:	d1f8      	bne.n	3094 <NOROM_AONRTCCurrent64BitValueGet>
    30a2:	4770      	bx	lr
    30a4:	40092008 	andmi	r2, r9, r8
    30a8:	4009200c 	andmi	r2, r9, ip

000030ac <NOROM_CPUcpsid>:
    30ac:	f3ef 8010 	mrs	r0, PRIMASK
    30b0:	b672      	cpsid	i
    30b2:	4770      	bx	lr

000030b4 <NOROM_CPUcpsie>:
    30b4:	f3ef 8010 	mrs	r0, PRIMASK
    30b8:	b662      	cpsie	i
    30ba:	4770      	bx	lr

000030bc <NOROM_OSCClockSourceSet>:
    30bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    30be:	460c      	mov	r4, r1
    30c0:	07c1      	lsls	r1, r0, #31
    30c2:	4605      	mov	r5, r0
    30c4:	d509      	bpl.n	30da <NOROM_OSCClockSourceSet+0x1e>
    30c6:	4b12      	ldr	r3, [pc, #72]	; (3110 <NOROM_OSCClockSourceSet+0x54>)
    30c8:	b2a2      	uxth	r2, r4
    30ca:	681b      	ldr	r3, [r3, #0]
    30cc:	2100      	movs	r1, #0
    30ce:	9200      	str	r2, [sp, #0]
    30d0:	685e      	ldr	r6, [r3, #4]
    30d2:	4810      	ldr	r0, [pc, #64]	; (3114 <NOROM_OSCClockSourceSet+0x58>)
    30d4:	2201      	movs	r2, #1
    30d6:	460b      	mov	r3, r1
    30d8:	47b0      	blx	r6
    30da:	07aa      	lsls	r2, r5, #30
    30dc:	d509      	bpl.n	30f2 <NOROM_OSCClockSourceSet+0x36>
    30de:	4b0c      	ldr	r3, [pc, #48]	; (3110 <NOROM_OSCClockSourceSet+0x54>)
    30e0:	b2a2      	uxth	r2, r4
    30e2:	681b      	ldr	r3, [r3, #0]
    30e4:	9200      	str	r2, [sp, #0]
    30e6:	685e      	ldr	r6, [r3, #4]
    30e8:	480a      	ldr	r0, [pc, #40]	; (3114 <NOROM_OSCClockSourceSet+0x58>)
    30ea:	2100      	movs	r1, #0
    30ec:	2202      	movs	r2, #2
    30ee:	2301      	movs	r3, #1
    30f0:	47b0      	blx	r6
    30f2:	076b      	lsls	r3, r5, #29
    30f4:	d509      	bpl.n	310a <NOROM_OSCClockSourceSet+0x4e>
    30f6:	4b06      	ldr	r3, [pc, #24]	; (3110 <NOROM_OSCClockSourceSet+0x54>)
    30f8:	b2a4      	uxth	r4, r4
    30fa:	681b      	ldr	r3, [r3, #0]
    30fc:	9400      	str	r4, [sp, #0]
    30fe:	685c      	ldr	r4, [r3, #4]
    3100:	4804      	ldr	r0, [pc, #16]	; (3114 <NOROM_OSCClockSourceSet+0x58>)
    3102:	2100      	movs	r1, #0
    3104:	220c      	movs	r2, #12
    3106:	2302      	movs	r3, #2
    3108:	47a0      	blx	r4
    310a:	b002      	add	sp, #8
    310c:	bd70      	pop	{r4, r5, r6, pc}
    310e:	bf00      	nop
    3110:	100001a4 	andne	r0, r0, r4, lsr #3
    3114:	400ca000 	andmi	sl, ip, r0

00003118 <NOROM_OSCClockSourceGet>:
    3118:	b510      	push	{r4, lr}
    311a:	4b08      	ldr	r3, [pc, #32]	; (313c <NOROM_OSCClockSourceGet+0x24>)
    311c:	2804      	cmp	r0, #4
    311e:	681b      	ldr	r3, [r3, #0]
    3120:	f04f 0134 	mov.w	r1, #52	; 0x34
    3124:	68dc      	ldr	r4, [r3, #12]
    3126:	bf07      	ittee	eq
    3128:	f04f 42c0 	moveq.w	r2, #1610612736	; 0x60000000
    312c:	231d      	moveq	r3, #29
    312e:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
    3132:	231c      	movne	r3, #28
    3134:	4802      	ldr	r0, [pc, #8]	; (3140 <NOROM_OSCClockSourceGet+0x28>)
    3136:	47a0      	blx	r4
    3138:	bd10      	pop	{r4, pc}
    313a:	bf00      	nop
    313c:	100001a4 	andne	r0, r0, r4, lsr #3
    3140:	400ca000 	andmi	sl, ip, r0

00003144 <NOROM_OSCHF_TurnOnXosc>:
    3144:	b508      	push	{r3, lr}
    3146:	2003      	movs	r0, #3
    3148:	2101      	movs	r1, #1
    314a:	f7ff ffb7 	bl	30bc <NOROM_OSCClockSourceSet>
    314e:	f7ff ff91 	bl	3074 <NOROM_AONRTCCurrentCompareValueGet>
    3152:	4b01      	ldr	r3, [pc, #4]	; (3158 <NOROM_OSCHF_TurnOnXosc+0x14>)
    3154:	6098      	str	r0, [r3, #8]
    3156:	bd08      	pop	{r3, pc}
    3158:	20000220 	andcs	r0, r0, r0, lsr #4

0000315c <NOROM_OSCHF_AttemptToSwitchToXosc>:
    315c:	b510      	push	{r4, lr}
    315e:	2001      	movs	r0, #1
    3160:	f7ff ffda 	bl	3118 <NOROM_OSCClockSourceGet>
    3164:	2801      	cmp	r0, #1
    3166:	d01c      	beq.n	31a2 <NOROM_OSCHF_AttemptToSwitchToXosc+0x46>
    3168:	4b0f      	ldr	r3, [pc, #60]	; (31a8 <NOROM_OSCHF_AttemptToSwitchToXosc+0x4c>)
    316a:	4810      	ldr	r0, [pc, #64]	; (31ac <NOROM_OSCHF_AttemptToSwitchToXosc+0x50>)
    316c:	681b      	ldr	r3, [r3, #0]
    316e:	2134      	movs	r1, #52	; 0x34
    3170:	68dc      	ldr	r4, [r3, #12]
    3172:	2201      	movs	r2, #1
    3174:	2300      	movs	r3, #0
    3176:	47a0      	blx	r4
    3178:	b1a0      	cbz	r0, 31a4 <NOROM_OSCHF_AttemptToSwitchToXosc+0x48>
    317a:	4b0d      	ldr	r3, [pc, #52]	; (31b0 <NOROM_OSCHF_AttemptToSwitchToXosc+0x54>)
    317c:	6b98      	ldr	r0, [r3, #56]	; 0x38
    317e:	f7ff ff4d 	bl	301c <SafeHapiVoid>
    3182:	f7ff ff77 	bl	3074 <NOROM_AONRTCCurrentCompareValueGet>
    3186:	4a0b      	ldr	r2, [pc, #44]	; (31b4 <NOROM_OSCHF_AttemptToSwitchToXosc+0x58>)
    3188:	6893      	ldr	r3, [r2, #8]
    318a:	60d0      	str	r0, [r2, #12]
    318c:	1ac0      	subs	r0, r0, r3
    318e:	4b0a      	ldr	r3, [pc, #40]	; (31b8 <NOROM_OSCHF_AttemptToSwitchToXosc+0x5c>)
    3190:	4358      	muls	r0, r3
    3192:	6813      	ldr	r3, [r2, #0]
    3194:	0c00      	lsrs	r0, r0, #16
    3196:	eba3 0393 	sub.w	r3, r3, r3, lsr #2
    319a:	4283      	cmp	r3, r0
    319c:	bf94      	ite	ls
    319e:	6010      	strls	r0, [r2, #0]
    31a0:	6013      	strhi	r3, [r2, #0]
    31a2:	2001      	movs	r0, #1
    31a4:	bd10      	pop	{r4, pc}
    31a6:	bf00      	nop
    31a8:	100001a4 	andne	r0, r0, r4, lsr #3
    31ac:	400ca000 	andmi	sl, ip, r0
    31b0:	10000048 	andne	r0, r0, r8, asr #32
    31b4:	20000220 	andcs	r0, r0, r0, lsr #4
    31b8:	000f4240 	andeq	r4, pc, r0, asr #4

000031bc <NOROM_OSCHF_SwitchToRcOscTurnOffXosc>:
    31bc:	b510      	push	{r4, lr}
    31be:	2003      	movs	r0, #3
    31c0:	2100      	movs	r1, #0
    31c2:	f7ff ff7b 	bl	30bc <NOROM_OSCClockSourceSet>
    31c6:	2001      	movs	r0, #1
    31c8:	f7ff ffa6 	bl	3118 <NOROM_OSCClockSourceGet>
    31cc:	b118      	cbz	r0, 31d6 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x1a>
    31ce:	4b06      	ldr	r3, [pc, #24]	; (31e8 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x2c>)
    31d0:	6b98      	ldr	r0, [r3, #56]	; 0x38
    31d2:	f7ff ff23 	bl	301c <SafeHapiVoid>
    31d6:	f7ff ff4d 	bl	3074 <NOROM_AONRTCCurrentCompareValueGet>
    31da:	4c04      	ldr	r4, [pc, #16]	; (31ec <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x30>)
    31dc:	6060      	str	r0, [r4, #4]
    31de:	f7ff ff31 	bl	3044 <NOROM_AONBatMonTemperatureGetDegC>
    31e2:	6120      	str	r0, [r4, #16]
    31e4:	bd10      	pop	{r4, pc}
    31e6:	bf00      	nop
    31e8:	10000048 	andne	r0, r0, r8, asr #32
    31ec:	20000220 	andcs	r0, r0, r0, lsr #4

000031f0 <NOROM_RFCDoorbellSendTo>:
    31f0:	4a07      	ldr	r2, [pc, #28]	; (3210 <NOROM_RFCDoorbellSendTo+0x20>)
    31f2:	6811      	ldr	r1, [r2, #0]
    31f4:	2900      	cmp	r1, #0
    31f6:	d1fb      	bne.n	31f0 <NOROM_RFCDoorbellSendTo>
    31f8:	4b06      	ldr	r3, [pc, #24]	; (3214 <NOROM_RFCDoorbellSendTo+0x24>)
    31fa:	6019      	str	r1, [r3, #0]
    31fc:	6010      	str	r0, [r2, #0]
    31fe:	681a      	ldr	r2, [r3, #0]
    3200:	2a00      	cmp	r2, #0
    3202:	d0fc      	beq.n	31fe <NOROM_RFCDoorbellSendTo+0xe>
    3204:	4b03      	ldr	r3, [pc, #12]	; (3214 <NOROM_RFCDoorbellSendTo+0x24>)
    3206:	2200      	movs	r2, #0
    3208:	601a      	str	r2, [r3, #0]
    320a:	f853 0c18 	ldr.w	r0, [r3, #-24]
    320e:	4770      	bx	lr
    3210:	40041000 	andmi	r1, r4, r0
    3214:	4004101c 	andmi	r1, r4, ip, lsl r0

00003218 <NOROM_RFCSynthPowerDown>:
    3218:	4a0e      	ldr	r2, [pc, #56]	; (3254 <NOROM_RFCSynthPowerDown+0x3c>)
    321a:	490f      	ldr	r1, [pc, #60]	; (3258 <NOROM_RFCSynthPowerDown+0x40>)
    321c:	6813      	ldr	r3, [r2, #0]
    321e:	2050      	movs	r0, #80	; 0x50
    3220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3224:	f023 0302 	bic.w	r3, r3, #2
    3228:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    322c:	6013      	str	r3, [r2, #0]
    322e:	4b0b      	ldr	r3, [pc, #44]	; (325c <NOROM_RFCSynthPowerDown+0x44>)
    3230:	2203      	movs	r2, #3
    3232:	601a      	str	r2, [r3, #0]
    3234:	f241 0330 	movw	r3, #4144	; 0x1030
    3238:	4a09      	ldr	r2, [pc, #36]	; (3260 <NOROM_RFCSynthPowerDown+0x48>)
    323a:	600b      	str	r3, [r1, #0]
    323c:	2301      	movs	r3, #1
    323e:	6013      	str	r3, [r2, #0]
    3240:	6008      	str	r0, [r1, #0]
    3242:	f44f 60ca 	mov.w	r0, #1616	; 0x650
    3246:	6013      	str	r3, [r2, #0]
    3248:	6008      	str	r0, [r1, #0]
    324a:	6013      	str	r3, [r2, #0]
    324c:	f842 3c0c 	str.w	r3, [r2, #-12]
    3250:	4770      	bx	lr
    3252:	bf00      	nop
    3254:	60040000 	andvs	r0, r4, r0
    3258:	40044114 	andmi	r4, r4, r4, lsl r1
    325c:	40044108 	andmi	r4, r4, r8, lsl #2
    3260:	4004410c 	andmi	r4, r4, ip, lsl #2

00003264 <NOROM_RFCRfTrimRead>:
    3264:	f640 0202 	movw	r2, #2050	; 0x802
    3268:	8803      	ldrh	r3, [r0, #0]
    326a:	4293      	cmp	r3, r2
    326c:	d006      	beq.n	327c <NOROM_RFCRfTrimRead+0x18>
    326e:	f643 0207 	movw	r2, #14343	; 0x3807
    3272:	4293      	cmp	r3, r2
    3274:	d104      	bne.n	3280 <NOROM_RFCRfTrimRead+0x1c>
    3276:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    327a:	e002      	b.n	3282 <NOROM_RFCRfTrimRead+0x1e>
    327c:	7bc3      	ldrb	r3, [r0, #15]
    327e:	e000      	b.n	3282 <NOROM_RFCRfTrimRead+0x1e>
    3280:	2300      	movs	r3, #0
    3282:	4a36      	ldr	r2, [pc, #216]	; (335c <NOROM_RFCRfTrimRead+0xf8>)
    3284:	2b0a      	cmp	r3, #10
    3286:	6812      	ldr	r2, [r2, #0]
    3288:	600a      	str	r2, [r1, #0]
    328a:	d031      	beq.n	32f0 <NOROM_RFCRfTrimRead+0x8c>
    328c:	dc10      	bgt.n	32b0 <NOROM_RFCRfTrimRead+0x4c>
    328e:	2b05      	cmp	r3, #5
    3290:	d021      	beq.n	32d6 <NOROM_RFCRfTrimRead+0x72>
    3292:	2b06      	cmp	r3, #6
    3294:	d153      	bne.n	333e <NOROM_RFCRfTrimRead+0xda>
    3296:	4b32      	ldr	r3, [pc, #200]	; (3360 <NOROM_RFCRfTrimRead+0xfc>)
    3298:	681b      	ldr	r3, [r3, #0]
    329a:	604b      	str	r3, [r1, #4]
    329c:	4b31      	ldr	r3, [pc, #196]	; (3364 <NOROM_RFCRfTrimRead+0x100>)
    329e:	681b      	ldr	r3, [r3, #0]
    32a0:	608b      	str	r3, [r1, #8]
    32a2:	4b31      	ldr	r3, [pc, #196]	; (3368 <NOROM_RFCRfTrimRead+0x104>)
    32a4:	681b      	ldr	r3, [r3, #0]
    32a6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    32aa:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    32ae:	e052      	b.n	3356 <NOROM_RFCRfTrimRead+0xf2>
    32b0:	2b0f      	cmp	r3, #15
    32b2:	d02a      	beq.n	330a <NOROM_RFCRfTrimRead+0xa6>
    32b4:	2b1e      	cmp	r3, #30
    32b6:	d035      	beq.n	3324 <NOROM_RFCRfTrimRead+0xc0>
    32b8:	2b0c      	cmp	r3, #12
    32ba:	d140      	bne.n	333e <NOROM_RFCRfTrimRead+0xda>
    32bc:	4b2b      	ldr	r3, [pc, #172]	; (336c <NOROM_RFCRfTrimRead+0x108>)
    32be:	681b      	ldr	r3, [r3, #0]
    32c0:	604b      	str	r3, [r1, #4]
    32c2:	4b2b      	ldr	r3, [pc, #172]	; (3370 <NOROM_RFCRfTrimRead+0x10c>)
    32c4:	681b      	ldr	r3, [r3, #0]
    32c6:	608b      	str	r3, [r1, #8]
    32c8:	4b2a      	ldr	r3, [pc, #168]	; (3374 <NOROM_RFCRfTrimRead+0x110>)
    32ca:	681b      	ldr	r3, [r3, #0]
    32cc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    32d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
    32d4:	e03f      	b.n	3356 <NOROM_RFCRfTrimRead+0xf2>
    32d6:	4b28      	ldr	r3, [pc, #160]	; (3378 <NOROM_RFCRfTrimRead+0x114>)
    32d8:	681b      	ldr	r3, [r3, #0]
    32da:	604b      	str	r3, [r1, #4]
    32dc:	4b27      	ldr	r3, [pc, #156]	; (337c <NOROM_RFCRfTrimRead+0x118>)
    32de:	681b      	ldr	r3, [r3, #0]
    32e0:	608b      	str	r3, [r1, #8]
    32e2:	4b27      	ldr	r3, [pc, #156]	; (3380 <NOROM_RFCRfTrimRead+0x11c>)
    32e4:	681b      	ldr	r3, [r3, #0]
    32e6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    32ea:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
    32ee:	e032      	b.n	3356 <NOROM_RFCRfTrimRead+0xf2>
    32f0:	4b24      	ldr	r3, [pc, #144]	; (3384 <NOROM_RFCRfTrimRead+0x120>)
    32f2:	681b      	ldr	r3, [r3, #0]
    32f4:	604b      	str	r3, [r1, #4]
    32f6:	4b24      	ldr	r3, [pc, #144]	; (3388 <NOROM_RFCRfTrimRead+0x124>)
    32f8:	681b      	ldr	r3, [r3, #0]
    32fa:	608b      	str	r3, [r1, #8]
    32fc:	4b23      	ldr	r3, [pc, #140]	; (338c <NOROM_RFCRfTrimRead+0x128>)
    32fe:	681b      	ldr	r3, [r3, #0]
    3300:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3304:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
    3308:	e025      	b.n	3356 <NOROM_RFCRfTrimRead+0xf2>
    330a:	4b21      	ldr	r3, [pc, #132]	; (3390 <NOROM_RFCRfTrimRead+0x12c>)
    330c:	681b      	ldr	r3, [r3, #0]
    330e:	604b      	str	r3, [r1, #4]
    3310:	4b20      	ldr	r3, [pc, #128]	; (3394 <NOROM_RFCRfTrimRead+0x130>)
    3312:	681b      	ldr	r3, [r3, #0]
    3314:	608b      	str	r3, [r1, #8]
    3316:	4b20      	ldr	r3, [pc, #128]	; (3398 <NOROM_RFCRfTrimRead+0x134>)
    3318:	681b      	ldr	r3, [r3, #0]
    331a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    331e:	f043 43f0 	orr.w	r3, r3, #2013265920	; 0x78000000
    3322:	e018      	b.n	3356 <NOROM_RFCRfTrimRead+0xf2>
    3324:	4b1d      	ldr	r3, [pc, #116]	; (339c <NOROM_RFCRfTrimRead+0x138>)
    3326:	681b      	ldr	r3, [r3, #0]
    3328:	604b      	str	r3, [r1, #4]
    332a:	4b1d      	ldr	r3, [pc, #116]	; (33a0 <NOROM_RFCRfTrimRead+0x13c>)
    332c:	681b      	ldr	r3, [r3, #0]
    332e:	608b      	str	r3, [r1, #8]
    3330:	4b1c      	ldr	r3, [pc, #112]	; (33a4 <NOROM_RFCRfTrimRead+0x140>)
    3332:	681b      	ldr	r3, [r3, #0]
    3334:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3338:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
    333c:	e00b      	b.n	3356 <NOROM_RFCRfTrimRead+0xf2>
    333e:	4b1a      	ldr	r3, [pc, #104]	; (33a8 <NOROM_RFCRfTrimRead+0x144>)
    3340:	681b      	ldr	r3, [r3, #0]
    3342:	604b      	str	r3, [r1, #4]
    3344:	4b19      	ldr	r3, [pc, #100]	; (33ac <NOROM_RFCRfTrimRead+0x148>)
    3346:	681b      	ldr	r3, [r3, #0]
    3348:	608b      	str	r3, [r1, #8]
    334a:	4b19      	ldr	r3, [pc, #100]	; (33b0 <NOROM_RFCRfTrimRead+0x14c>)
    334c:	681b      	ldr	r3, [r3, #0]
    334e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3356:	60cb      	str	r3, [r1, #12]
    3358:	4770      	bx	lr
    335a:	bf00      	nop
    335c:	5000134c 	andpl	r1, r0, ip, asr #6
    3360:	500010c8 	andpl	r1, r0, r8, asr #1
    3364:	500010e0 	andpl	r1, r0, r0, ror #1
    3368:	500010f8 	strdpl	r1, [r0], -r8
    336c:	500010d0 	ldrdpl	r1, [r0], -r0
    3370:	500010e8 	andpl	r1, r0, r8, ror #1
    3374:	50001100 	andpl	r1, r0, r0, lsl #2
    3378:	500010c4 	andpl	r1, r0, r4, asr #1
    337c:	500010dc 	ldrdpl	r1, [r0], -ip
    3380:	500010f4 	strdpl	r1, [r0], -r4
    3384:	500010cc 	andpl	r1, r0, ip, asr #1
    3388:	500010e4 	andpl	r1, r0, r4, ror #1
    338c:	500010fc 	strdpl	r1, [r0], -ip
    3390:	500010d4 	ldrdpl	r1, [r0], -r4
    3394:	500010ec 	andpl	r1, r0, ip, ror #1
    3398:	50001104 	andpl	r1, r0, r4, lsl #2
    339c:	500010d8 	ldrdpl	r1, [r0], -r8
    33a0:	500010f0 	strdpl	r1, [r0], -r0
    33a4:	50001108 	andpl	r1, r0, r8, lsl #2
    33a8:	50001354 	andpl	r1, r0, r4, asr r3
    33ac:	50001358 	andpl	r1, r0, r8, asr r3
    33b0:	50001380 	andpl	r1, r0, r0, lsl #7

000033b4 <NOROM_RFCRTrim>:
    33b4:	f643 0206 	movw	r2, #14342	; 0x3806
    33b8:	b570      	push	{r4, r5, r6, lr}
    33ba:	8803      	ldrh	r3, [r0, #0]
    33bc:	4293      	cmp	r3, r2
    33be:	d00a      	beq.n	33d6 <NOROM_RFCRTrim+0x22>
    33c0:	f643 0207 	movw	r2, #14343	; 0x3807
    33c4:	4293      	cmp	r3, r2
    33c6:	d009      	beq.n	33dc <NOROM_RFCRTrim+0x28>
    33c8:	f640 0202 	movw	r2, #2050	; 0x802
    33cc:	4293      	cmp	r3, r2
    33ce:	d16b      	bne.n	34a8 <NOROM_RFCRTrim+0xf4>
    33d0:	7bc1      	ldrb	r1, [r0, #15]
    33d2:	6943      	ldr	r3, [r0, #20]
    33d4:	e005      	b.n	33e2 <NOROM_RFCRTrim+0x2e>
    33d6:	69c3      	ldr	r3, [r0, #28]
    33d8:	2102      	movs	r1, #2
    33da:	e002      	b.n	33e2 <NOROM_RFCRTrim+0x2e>
    33dc:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    33e0:	69c3      	ldr	r3, [r0, #28]
    33e2:	2b00      	cmp	r3, #0
    33e4:	d060      	beq.n	34a8 <NOROM_RFCRTrim+0xf4>
    33e6:	f103 0414 	add.w	r4, r3, #20
    33ea:	f244 0538 	movw	r5, #16440	; 0x4038
    33ee:	681a      	ldr	r2, [r3, #0]
    33f0:	4618      	mov	r0, r3
    33f2:	b296      	uxth	r6, r2
    33f4:	42ae      	cmp	r6, r5
    33f6:	f103 0304 	add.w	r3, r3, #4
    33fa:	d103      	bne.n	3404 <NOROM_RFCRTrim+0x50>
    33fc:	f3c2 4403 	ubfx	r4, r2, #16, #4
    3400:	b91c      	cbnz	r4, 340a <NOROM_RFCRTrim+0x56>
    3402:	bd70      	pop	{r4, r5, r6, pc}
    3404:	42a3      	cmp	r3, r4
    3406:	d1f0      	bne.n	33ea <NOROM_RFCRTrim+0x36>
    3408:	bd70      	pop	{r4, r5, r6, pc}
    340a:	290a      	cmp	r1, #10
    340c:	d01d      	beq.n	344a <NOROM_RFCRTrim+0x96>
    340e:	dc06      	bgt.n	341e <NOROM_RFCRTrim+0x6a>
    3410:	2905      	cmp	r1, #5
    3412:	d013      	beq.n	343c <NOROM_RFCRTrim+0x88>
    3414:	2906      	cmp	r1, #6
    3416:	d016      	beq.n	3446 <NOROM_RFCRTrim+0x92>
    3418:	2902      	cmp	r1, #2
    341a:	d11f      	bne.n	345c <NOROM_RFCRTrim+0xa8>
    341c:	e007      	b.n	342e <NOROM_RFCRTrim+0x7a>
    341e:	290f      	cmp	r1, #15
    3420:	d015      	beq.n	344e <NOROM_RFCRTrim+0x9a>
    3422:	291e      	cmp	r1, #30
    3424:	d015      	beq.n	3452 <NOROM_RFCRTrim+0x9e>
    3426:	290c      	cmp	r1, #12
    3428:	d118      	bne.n	345c <NOROM_RFCRTrim+0xa8>
    342a:	4b20      	ldr	r3, [pc, #128]	; (34ac <NOROM_RFCRTrim+0xf8>)
    342c:	e012      	b.n	3454 <NOROM_RFCRTrim+0xa0>
    342e:	4b20      	ldr	r3, [pc, #128]	; (34b0 <NOROM_RFCRTrim+0xfc>)
    3430:	681b      	ldr	r3, [r3, #0]
    3432:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3436:	2b0f      	cmp	r3, #15
    3438:	d12a      	bne.n	3490 <NOROM_RFCRTrim+0xdc>
    343a:	e023      	b.n	3484 <NOROM_RFCRTrim+0xd0>
    343c:	4b1d      	ldr	r3, [pc, #116]	; (34b4 <NOROM_RFCRTrim+0x100>)
    343e:	681b      	ldr	r3, [r3, #0]
    3440:	f3c3 2303 	ubfx	r3, r3, #8, #4
    3444:	e02c      	b.n	34a0 <NOROM_RFCRTrim+0xec>
    3446:	4b1c      	ldr	r3, [pc, #112]	; (34b8 <NOROM_RFCRTrim+0x104>)
    3448:	e004      	b.n	3454 <NOROM_RFCRTrim+0xa0>
    344a:	4b1c      	ldr	r3, [pc, #112]	; (34bc <NOROM_RFCRTrim+0x108>)
    344c:	e002      	b.n	3454 <NOROM_RFCRTrim+0xa0>
    344e:	4b1c      	ldr	r3, [pc, #112]	; (34c0 <NOROM_RFCRTrim+0x10c>)
    3450:	e000      	b.n	3454 <NOROM_RFCRTrim+0xa0>
    3452:	4b1c      	ldr	r3, [pc, #112]	; (34c4 <NOROM_RFCRTrim+0x110>)
    3454:	681b      	ldr	r3, [r3, #0]
    3456:	f3c3 4383 	ubfx	r3, r3, #18, #4
    345a:	e021      	b.n	34a0 <NOROM_RFCRTrim+0xec>
    345c:	4b14      	ldr	r3, [pc, #80]	; (34b0 <NOROM_RFCRTrim+0xfc>)
    345e:	681b      	ldr	r3, [r3, #0]
    3460:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3464:	2b0f      	cmp	r3, #15
    3466:	d113      	bne.n	3490 <NOROM_RFCRTrim+0xdc>
    3468:	3905      	subs	r1, #5
    346a:	2919      	cmp	r1, #25
    346c:	d80a      	bhi.n	3484 <NOROM_RFCRTrim+0xd0>
    346e:	2301      	movs	r3, #1
    3470:	fa03 f101 	lsl.w	r1, r3, r1
    3474:	4b14      	ldr	r3, [pc, #80]	; (34c8 <NOROM_RFCRTrim+0x114>)
    3476:	400b      	ands	r3, r1
    3478:	b123      	cbz	r3, 3484 <NOROM_RFCRTrim+0xd0>
    347a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    347e:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    3482:	e003      	b.n	348c <NOROM_RFCRTrim+0xd8>
    3484:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3488:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    348c:	6002      	str	r2, [r0, #0]
    348e:	bd70      	pop	{r4, r5, r6, pc}
    3490:	429c      	cmp	r4, r3
    3492:	d209      	bcs.n	34a8 <NOROM_RFCRTrim+0xf4>
    3494:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3498:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    349c:	6003      	str	r3, [r0, #0]
    349e:	bd70      	pop	{r4, r5, r6, pc}
    34a0:	2b0f      	cmp	r3, #15
    34a2:	d1f5      	bne.n	3490 <NOROM_RFCRTrim+0xdc>
    34a4:	3905      	subs	r1, #5
    34a6:	e7e2      	b.n	346e <NOROM_RFCRTrim+0xba>
    34a8:	bd70      	pop	{r4, r5, r6, pc}
    34aa:	bf00      	nop
    34ac:	50001100 	andpl	r1, r0, r0, lsl #2
    34b0:	50001380 	andpl	r1, r0, r0, lsl #7
    34b4:	50001320 	andpl	r1, r0, r0, lsr #6
    34b8:	500010f8 	strdpl	r1, [r0], -r8
    34bc:	500010fc 	strdpl	r1, [r0], -ip
    34c0:	50001104 	andpl	r1, r0, r4, lsl #2
    34c4:	50001108 	andpl	r1, r0, r8, lsl #2
    34c8:	02000421 	andeq	r0, r0, #553648128	; 0x21000000

000034cc <NOROM_RFCRfTrimSet>:
    34cc:	4603      	mov	r3, r0
    34ce:	b530      	push	{r4, r5, lr}
    34d0:	4c05      	ldr	r4, [pc, #20]	; (34e8 <NOROM_RFCRfTrimSet+0x1c>)
    34d2:	f100 0510 	add.w	r5, r0, #16
    34d6:	4622      	mov	r2, r4
    34d8:	6818      	ldr	r0, [r3, #0]
    34da:	6859      	ldr	r1, [r3, #4]
    34dc:	3308      	adds	r3, #8
    34de:	c203      	stmia	r2!, {r0, r1}
    34e0:	42ab      	cmp	r3, r5
    34e2:	4614      	mov	r4, r2
    34e4:	d1f7      	bne.n	34d6 <NOROM_RFCRfTrimSet+0xa>
    34e6:	bd30      	pop	{r4, r5, pc}
    34e8:	21000018 	tstcs	r0, r8, lsl r0

000034ec <NOROM_RFCAdi3VcoLdoVoltageMode>:
    34ec:	4b04      	ldr	r3, [pc, #16]	; (3500 <NOROM_RFCAdi3VcoLdoVoltageMode+0x14>)
    34ee:	b128      	cbz	r0, 34fc <NOROM_RFCAdi3VcoLdoVoltageMode+0x10>
    34f0:	4a04      	ldr	r2, [pc, #16]	; (3504 <NOROM_RFCAdi3VcoLdoVoltageMode+0x18>)
    34f2:	2100      	movs	r1, #0
    34f4:	7011      	strb	r1, [r2, #0]
    34f6:	2220      	movs	r2, #32
    34f8:	701a      	strb	r2, [r3, #0]
    34fa:	4770      	bx	lr
    34fc:	7018      	strb	r0, [r3, #0]
    34fe:	4770      	bx	lr
    3500:	40086202 	andmi	r6, r8, r2, lsl #4
    3504:	40086200 	andmi	r6, r8, r0, lsl #4

00003508 <TrimAfterColdResetWakeupFromShutDown>:
    3508:	b538      	push	{r3, r4, r5, lr}
    350a:	4605      	mov	r5, r0
    350c:	4b26      	ldr	r3, [pc, #152]	; (35a8 <TrimAfterColdResetWakeupFromShutDown+0xa0>)
    350e:	2201      	movs	r2, #1
    3510:	601a      	str	r2, [r3, #0]
    3512:	4b26      	ldr	r3, [pc, #152]	; (35ac <TrimAfterColdResetWakeupFromShutDown+0xa4>)
    3514:	681b      	ldr	r3, [r3, #0]
    3516:	2b00      	cmp	r3, #0
    3518:	d0fb      	beq.n	3512 <TrimAfterColdResetWakeupFromShutDown+0xa>
    351a:	4b25      	ldr	r3, [pc, #148]	; (35b0 <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    351c:	22c0      	movs	r2, #192	; 0xc0
    351e:	601a      	str	r2, [r3, #0]
    3520:	4b24      	ldr	r3, [pc, #144]	; (35b4 <TrimAfterColdResetWakeupFromShutDown+0xac>)
    3522:	681b      	ldr	r3, [r3, #0]
    3524:	079b      	lsls	r3, r3, #30
    3526:	bf5f      	itttt	pl
    3528:	4b23      	ldrpl	r3, [pc, #140]	; (35b8 <TrimAfterColdResetWakeupFromShutDown+0xb0>)
    352a:	4a24      	ldrpl	r2, [pc, #144]	; (35bc <TrimAfterColdResetWakeupFromShutDown+0xb4>)
    352c:	681b      	ldrpl	r3, [r3, #0]
    352e:	f3c3 4303 	ubfxpl	r3, r3, #16, #4
    3532:	bf5c      	itt	pl
    3534:	f043 03f0 	orrpl.w	r3, r3, #240	; 0xf0
    3538:	7013      	strbpl	r3, [r2, #0]
    353a:	4b21      	ldr	r3, [pc, #132]	; (35c0 <TrimAfterColdResetWakeupFromShutDown+0xb8>)
    353c:	2200      	movs	r2, #0
    353e:	601a      	str	r2, [r3, #0]
    3540:	4b20      	ldr	r3, [pc, #128]	; (35c4 <TrimAfterColdResetWakeupFromShutDown+0xbc>)
    3542:	681c      	ldr	r4, [r3, #0]
    3544:	4620      	mov	r0, r4
    3546:	f000 f8d9 	bl	36fc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>
    354a:	4628      	mov	r0, r5
    354c:	4621      	mov	r1, r4
    354e:	f000 fa0d 	bl	396c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>
    3552:	f240 221d 	movw	r2, #541	; 0x21d
    3556:	4b1c      	ldr	r3, [pc, #112]	; (35c8 <TrimAfterColdResetWakeupFromShutDown+0xc0>)
    3558:	681b      	ldr	r3, [r3, #0]
    355a:	b29b      	uxth	r3, r3
    355c:	4293      	cmp	r3, r2
    355e:	d814      	bhi.n	358a <TrimAfterColdResetWakeupFromShutDown+0x82>
    3560:	4a1a      	ldr	r2, [pc, #104]	; (35cc <TrimAfterColdResetWakeupFromShutDown+0xc4>)
    3562:	6813      	ldr	r3, [r2, #0]
    3564:	6812      	ldr	r2, [r2, #0]
    3566:	f3c3 6303 	ubfx	r3, r3, #24, #4
    356a:	f3c2 4203 	ubfx	r2, r2, #16, #4
    356e:	b103      	cbz	r3, 3572 <TrimAfterColdResetWakeupFromShutDown+0x6a>
    3570:	3b01      	subs	r3, #1
    3572:	1f91      	subs	r1, r2, #6
    3574:	2901      	cmp	r1, #1
    3576:	bf86      	itte	hi
    3578:	3202      	addhi	r2, #2
    357a:	f002 020f 	andhi.w	r2, r2, #15
    357e:	2207      	movls	r2, #7
    3580:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    3584:	4a12      	ldr	r2, [pc, #72]	; (35d0 <TrimAfterColdResetWakeupFromShutDown+0xc8>)
    3586:	b2db      	uxtb	r3, r3
    3588:	7013      	strb	r3, [r2, #0]
    358a:	4620      	mov	r0, r4
    358c:	f000 fabc 	bl	3b08 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>
    3590:	4b10      	ldr	r3, [pc, #64]	; (35d4 <TrimAfterColdResetWakeupFromShutDown+0xcc>)
    3592:	2002      	movs	r0, #2
    3594:	681b      	ldr	r3, [r3, #0]
    3596:	68db      	ldr	r3, [r3, #12]
    3598:	4798      	blx	r3
    359a:	4b05      	ldr	r3, [pc, #20]	; (35b0 <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    359c:	2240      	movs	r2, #64	; 0x40
    359e:	601a      	str	r2, [r3, #0]
    35a0:	4b0d      	ldr	r3, [pc, #52]	; (35d8 <TrimAfterColdResetWakeupFromShutDown+0xd0>)
    35a2:	2201      	movs	r2, #1
    35a4:	601a      	str	r2, [r3, #0]
    35a6:	bd38      	pop	{r3, r4, r5, pc}
    35a8:	40091010 	andmi	r1, r9, r0, lsl r0
    35ac:	43220294 			; <UNDEFINED> instruction: 0x43220294
    35b0:	400c6000 	andmi	r6, ip, r0
    35b4:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    35b8:	50003fac 	andpl	r3, r0, ip, lsr #31
    35bc:	40086256 	andmi	r6, r8, r6, asr r2
    35c0:	40091040 	andmi	r1, r9, r0, asr #32
    35c4:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    35c8:	50001314 	andpl	r1, r0, r4, lsl r3
    35cc:	500012bc 			; <UNDEFINED> instruction: 0x500012bc
    35d0:	40086002 	andmi	r6, r8, r2
    35d4:	100001a0 	andne	r0, r0, r0, lsr #3
    35d8:	42600494 	rsbmi	r0, r0, #148, 8	; 0x94000000

000035dc <NOROM_SetupTrimDevice>:
    35dc:	b510      	push	{r4, lr}
    35de:	4b1f      	ldr	r3, [pc, #124]	; (365c <NOROM_SetupTrimDevice+0x80>)
    35e0:	681c      	ldr	r4, [r3, #0]
    35e2:	1c63      	adds	r3, r4, #1
    35e4:	bf08      	it	eq
    35e6:	2400      	moveq	r4, #0
    35e8:	f000 fcde 	bl	3fa8 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    35ec:	4b1c      	ldr	r3, [pc, #112]	; (3660 <NOROM_SetupTrimDevice+0x84>)
    35ee:	2200      	movs	r2, #0
    35f0:	601a      	str	r2, [r3, #0]
    35f2:	4a1c      	ldr	r2, [pc, #112]	; (3664 <NOROM_SetupTrimDevice+0x88>)
    35f4:	2301      	movs	r3, #1
    35f6:	6013      	str	r3, [r2, #0]
    35f8:	4a1b      	ldr	r2, [pc, #108]	; (3668 <NOROM_SetupTrimDevice+0x8c>)
    35fa:	6013      	str	r3, [r2, #0]
    35fc:	f000 fa3e 	bl	3a7c <NOROM_SetupSetCacheModeAccordingToCcfgSetting>
    3600:	4b1a      	ldr	r3, [pc, #104]	; (366c <NOROM_SetupTrimDevice+0x90>)
    3602:	681b      	ldr	r3, [r3, #0]
    3604:	b123      	cbz	r3, 3610 <NOROM_SetupTrimDevice+0x34>
    3606:	4b1a      	ldr	r3, [pc, #104]	; (3670 <NOROM_SetupTrimDevice+0x94>)
    3608:	4620      	mov	r0, r4
    360a:	681b      	ldr	r3, [r3, #0]
    360c:	f7ff ff7c 	bl	3508 <TrimAfterColdResetWakeupFromShutDown>
    3610:	4b18      	ldr	r3, [pc, #96]	; (3674 <NOROM_SetupTrimDevice+0x98>)
    3612:	2200      	movs	r2, #0
    3614:	601a      	str	r2, [r3, #0]
    3616:	4a18      	ldr	r2, [pc, #96]	; (3678 <NOROM_SetupTrimDevice+0x9c>)
    3618:	6813      	ldr	r3, [r2, #0]
    361a:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
    361e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3622:	f043 739c 	orr.w	r3, r3, #20447232	; 0x1380000
    3626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    362a:	6013      	str	r3, [r2, #0]
    362c:	f502 22bb 	add.w	r2, r2, #382976	; 0x5d800
    3630:	f202 72bc 	addw	r2, r2, #1980	; 0x7bc
    3634:	6813      	ldr	r3, [r2, #0]
    3636:	f3c3 3301 	ubfx	r3, r3, #12, #2
    363a:	2b01      	cmp	r3, #1
    363c:	bf01      	itttt	eq
    363e:	6813      	ldreq	r3, [r2, #0]
    3640:	f023 7340 	biceq.w	r3, r3, #50331648	; 0x3000000
    3644:	f423 3340 	biceq.w	r3, r3, #196608	; 0x30000
    3648:	f443 3100 	orreq.w	r1, r3, #131072	; 0x20000
    364c:	bf04      	itt	eq
    364e:	6011      	streq	r1, [r2, #0]
    3650:	6013      	streq	r3, [r2, #0]
    3652:	4b0a      	ldr	r3, [pc, #40]	; (367c <NOROM_SetupTrimDevice+0xa0>)
    3654:	681b      	ldr	r3, [r3, #0]
    3656:	2b00      	cmp	r3, #0
    3658:	d1fb      	bne.n	3652 <NOROM_SetupTrimDevice+0x76>
    365a:	bd10      	pop	{r4, pc}
    365c:	5000131c 	andpl	r1, r0, ip, lsl r3
    3660:	42600484 	rsbmi	r0, r0, #132, 8	; 0x84000000
    3664:	400c605c 	andmi	r6, ip, ip, asr r0
    3668:	43042208 	movwmi	r2, #16904	; 0x4208
    366c:	43280180 			; <UNDEFINED> instruction: 0x43280180
    3670:	43200100 	nopmi	{0}	; <UNPREDICTABLE>
    3674:	4008218c 	andmi	r2, r8, ip, lsl #3
    3678:	40032048 	andmi	r2, r3, r8, asr #32
    367c:	4268000c 	rsbmi	r0, r8, #12

00003680 <NOROM_SetupSetVddrLevel>:
    3680:	b530      	push	{r4, r5, lr}
    3682:	4b19      	ldr	r3, [pc, #100]	; (36e8 <NOROM_SetupSetVddrLevel+0x68>)
    3684:	681a      	ldr	r2, [r3, #0]
    3686:	4b19      	ldr	r3, [pc, #100]	; (36ec <NOROM_SetupSetVddrLevel+0x6c>)
    3688:	f3c2 6204 	ubfx	r2, r2, #24, #5
    368c:	781b      	ldrb	r3, [r3, #0]
    368e:	2a15      	cmp	r2, #21
    3690:	f003 031f 	and.w	r3, r3, #31
    3694:	bf88      	it	hi
    3696:	3a20      	subhi	r2, #32
    3698:	2b15      	cmp	r3, #21
    369a:	bf88      	it	hi
    369c:	3b20      	subhi	r3, #32
    369e:	4293      	cmp	r3, r2
    36a0:	d020      	beq.n	36e4 <NOROM_SetupSetVddrLevel+0x64>
    36a2:	4913      	ldr	r1, [pc, #76]	; (36f0 <NOROM_SetupSetVddrLevel+0x70>)
    36a4:	2000      	movs	r0, #0
    36a6:	6008      	str	r0, [r1, #0]
    36a8:	4608      	mov	r0, r1
    36aa:	1ad1      	subs	r1, r2, r3
    36ac:	2902      	cmp	r1, #2
    36ae:	dc05      	bgt.n	36bc <NOROM_SetupSetVddrLevel+0x3c>
    36b0:	f06f 0401 	mvn.w	r4, #1
    36b4:	42a1      	cmp	r1, r4
    36b6:	bfb8      	it	lt
    36b8:	4621      	movlt	r1, r4
    36ba:	e000      	b.n	36be <NOROM_SetupSetVddrLevel+0x3e>
    36bc:	2102      	movs	r1, #2
    36be:	440b      	add	r3, r1
    36c0:	490c      	ldr	r1, [pc, #48]	; (36f4 <NOROM_SetupSetVddrLevel+0x74>)
    36c2:	4d0d      	ldr	r5, [pc, #52]	; (36f8 <NOROM_SetupSetVddrLevel+0x78>)
    36c4:	680c      	ldr	r4, [r1, #0]
    36c6:	f003 041f 	and.w	r4, r3, #31
    36ca:	f444 54f8 	orr.w	r4, r4, #7936	; 0x1f00
    36ce:	802c      	strh	r4, [r5, #0]
    36d0:	4293      	cmp	r3, r2
    36d2:	f04f 0401 	mov.w	r4, #1
    36d6:	600c      	str	r4, [r1, #0]
    36d8:	d1e7      	bne.n	36aa <NOROM_SetupSetVddrLevel+0x2a>
    36da:	680b      	ldr	r3, [r1, #0]
    36dc:	600c      	str	r4, [r1, #0]
    36de:	680b      	ldr	r3, [r1, #0]
    36e0:	6004      	str	r4, [r0, #0]
    36e2:	680b      	ldr	r3, [r1, #0]
    36e4:	bd30      	pop	{r4, r5, pc}
    36e6:	bf00      	nop
    36e8:	50001388 	andpl	r1, r0, r8, lsl #7
    36ec:	40086206 	andmi	r6, r8, r6, lsl #4
    36f0:	43200098 			; <UNDEFINED> instruction: 0x43200098
    36f4:	4009202c 	andmi	r2, r9, ip, lsr #32
    36f8:	4008626c 	andmi	r6, r8, ip, ror #4

000036fc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>:
    36fc:	f000 7340 	and.w	r3, r0, #50331648	; 0x3000000
    3700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    3704:	b510      	push	{r4, lr}
    3706:	4604      	mov	r4, r0
    3708:	d10f      	bne.n	372a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x2e>
    370a:	f64f 01d8 	movw	r1, #63704	; 0xf8d8
    370e:	4a1e      	ldr	r2, [pc, #120]	; (3788 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8c>)
    3710:	2380      	movs	r3, #128	; 0x80
    3712:	7013      	strb	r3, [r2, #0]
    3714:	f8a2 1041 	strh.w	r1, [r2, #65]	; 0x41
    3718:	f802 3c10 	strb.w	r3, [r2, #-16]
    371c:	f7ff ffb0 	bl	3680 <NOROM_SetupSetVddrLevel>
    3720:	4b1a      	ldr	r3, [pc, #104]	; (378c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x90>)
    3722:	681b      	ldr	r3, [r3, #0]
    3724:	f3c3 2304 	ubfx	r3, r3, #8, #5
    3728:	e003      	b.n	3732 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x36>
    372a:	4b19      	ldr	r3, [pc, #100]	; (3790 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x94>)
    372c:	681b      	ldr	r3, [r3, #0]
    372e:	f3c3 6304 	ubfx	r3, r3, #24, #5
    3732:	2b15      	cmp	r3, #21
    3734:	bf88      	it	hi
    3736:	3b20      	subhi	r3, #32
    3738:	eb03 7324 	add.w	r3, r3, r4, asr #28
    373c:	3301      	adds	r3, #1
    373e:	2b15      	cmp	r3, #21
    3740:	dc05      	bgt.n	374e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x52>
    3742:	f06f 0209 	mvn.w	r2, #9
    3746:	4293      	cmp	r3, r2
    3748:	bfb8      	it	lt
    374a:	4613      	movlt	r3, r2
    374c:	e000      	b.n	3750 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x54>
    374e:	2315      	movs	r3, #21
    3750:	4a10      	ldr	r2, [pc, #64]	; (3794 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x98>)
    3752:	f003 031f 	and.w	r3, r3, #31
    3756:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
    375a:	8013      	strh	r3, [r2, #0]
    375c:	4b0e      	ldr	r3, [pc, #56]	; (3798 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x9c>)
    375e:	681b      	ldr	r3, [r3, #0]
    3760:	f013 0302 	ands.w	r3, r3, #2
    3764:	bf0a      	itet	eq
    3766:	4a0d      	ldreq	r2, [pc, #52]	; (379c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa0>)
    3768:	f044 6440 	orrne.w	r4, r4, #201326592	; 0xc000000
    376c:	6013      	streq	r3, [r2, #0]
    376e:	f3c4 63c0 	ubfx	r3, r4, #27, #1
    3772:	4a0b      	ldr	r2, [pc, #44]	; (37a0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa4>)
    3774:	f083 0301 	eor.w	r3, r3, #1
    3778:	6013      	str	r3, [r2, #0]
    377a:	f3c4 6480 	ubfx	r4, r4, #26, #1
    377e:	4b09      	ldr	r3, [pc, #36]	; (37a4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa8>)
    3780:	f084 0401 	eor.w	r4, r4, #1
    3784:	601c      	str	r4, [r3, #0]
    3786:	bd10      	pop	{r4, pc}
    3788:	40086225 	andmi	r6, r8, r5, lsr #4
    378c:	50001388 	andpl	r1, r0, r8, lsl #7
    3790:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    3794:	4008626e 	andmi	r6, r8, lr, ror #4
    3798:	40090000 	andmi	r0, r9, r0
    379c:	432a0494 			; <UNDEFINED> instruction: 0x432a0494
    37a0:	43200000 	nopmi	{0}	; <UNPREDICTABLE>
    37a4:	43200008 			; <UNDEFINED> instruction: 0x43200008

000037a8 <NOROM_SetupGetTrimForAnabypassValue1>:
    37a8:	4b15      	ldr	r3, [pc, #84]	; (3800 <NOROM_SetupGetTrimForAnabypassValue1+0x58>)
    37aa:	0381      	lsls	r1, r0, #14
    37ac:	681b      	ldr	r3, [r3, #0]
    37ae:	f3c3 6283 	ubfx	r2, r3, #26, #4
    37b2:	f3c3 238f 	ubfx	r3, r3, #10, #16
    37b6:	d41f      	bmi.n	37f8 <NOROM_SetupGetTrimForAnabypassValue1+0x50>
    37b8:	f340 2007 	sbfx	r0, r0, #8, #8
    37bc:	2800      	cmp	r0, #0
    37be:	da19      	bge.n	37f4 <NOROM_SetupGetTrimForAnabypassValue1+0x4c>
    37c0:	085b      	lsrs	r3, r3, #1
    37c2:	d105      	bne.n	37d0 <NOROM_SetupGetTrimForAnabypassValue1+0x28>
    37c4:	0852      	lsrs	r2, r2, #1
    37c6:	bf06      	itte	eq
    37c8:	2301      	moveq	r3, #1
    37ca:	461a      	moveq	r2, r3
    37cc:	f64f 73ff 	movwne	r3, #65535	; 0xffff
    37d0:	3001      	adds	r0, #1
    37d2:	e7f3      	b.n	37bc <NOROM_SetupGetTrimForAnabypassValue1+0x14>
    37d4:	005b      	lsls	r3, r3, #1
    37d6:	f043 0301 	orr.w	r3, r3, #1
    37da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    37de:	d308      	bcc.n	37f2 <NOROM_SetupGetTrimForAnabypassValue1+0x4a>
    37e0:	0052      	lsls	r2, r2, #1
    37e2:	f042 0201 	orr.w	r2, r2, #1
    37e6:	2a0f      	cmp	r2, #15
    37e8:	bf86      	itte	hi
    37ea:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
    37ee:	220f      	movhi	r2, #15
    37f0:	2301      	movls	r3, #1
    37f2:	3801      	subs	r0, #1
    37f4:	2800      	cmp	r0, #0
    37f6:	d1ed      	bne.n	37d4 <NOROM_SetupGetTrimForAnabypassValue1+0x2c>
    37f8:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
    37fc:	4770      	bx	lr
    37fe:	bf00      	nop
    3800:	50001350 	andpl	r1, r0, r0, asr r3

00003804 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>:
    3804:	4a04      	ldr	r2, [pc, #16]	; (3818 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x14>)
    3806:	6813      	ldr	r3, [r2, #0]
    3808:	6810      	ldr	r0, [r2, #0]
    380a:	f3c3 0387 	ubfx	r3, r3, #2, #8
    380e:	f000 0003 	and.w	r0, r0, #3
    3812:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    3816:	4770      	bx	lr
    3818:	50001350 	andpl	r1, r0, r0, asr r3

0000381c <NOROM_SetupGetTrimForAmpcompTh2>:
    381c:	4b02      	ldr	r3, [pc, #8]	; (3828 <NOROM_SetupGetTrimForAmpcompTh2+0xc>)
    381e:	6818      	ldr	r0, [r3, #0]
    3820:	f000 30fc 	and.w	r0, r0, #4244438268	; 0xfcfcfcfc
    3824:	4770      	bx	lr
    3826:	bf00      	nop
    3828:	50001374 	andpl	r1, r0, r4, ror r3

0000382c <NOROM_SetupGetTrimForAmpcompTh1>:
    382c:	4b03      	ldr	r3, [pc, #12]	; (383c <NOROM_SetupGetTrimForAmpcompTh1+0x10>)
    382e:	6818      	ldr	r0, [r3, #0]
    3830:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3834:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    3838:	4770      	bx	lr
    383a:	bf00      	nop
    383c:	50001370 	andpl	r1, r0, r0, ror r3

00003840 <NOROM_SetupGetTrimForAmpcompCtrl>:
    3840:	b570      	push	{r4, r5, r6, lr}
    3842:	4b15      	ldr	r3, [pc, #84]	; (3898 <NOROM_SetupGetTrimForAmpcompCtrl+0x58>)
    3844:	4915      	ldr	r1, [pc, #84]	; (389c <NOROM_SetupGetTrimForAmpcompCtrl+0x5c>)
    3846:	681c      	ldr	r4, [r3, #0]
    3848:	6809      	ldr	r1, [r1, #0]
    384a:	f3c4 5203 	ubfx	r2, r4, #20, #4
    384e:	f011 0501 	ands.w	r5, r1, #1
    3852:	f3c4 4303 	ubfx	r3, r4, #16, #4
    3856:	d113      	bne.n	3880 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    3858:	4911      	ldr	r1, [pc, #68]	; (38a0 <NOROM_SetupGetTrimForAmpcompCtrl+0x60>)
    385a:	6809      	ldr	r1, [r1, #0]
    385c:	f341 2603 	sbfx	r6, r1, #8, #4
    3860:	18b2      	adds	r2, r6, r2
    3862:	d403      	bmi.n	386c <NOROM_SetupGetTrimForAmpcompCtrl+0x2c>
    3864:	2a0f      	cmp	r2, #15
    3866:	bfa8      	it	ge
    3868:	220f      	movge	r2, #15
    386a:	e000      	b.n	386e <NOROM_SetupGetTrimForAmpcompCtrl+0x2e>
    386c:	462a      	mov	r2, r5
    386e:	f341 3103 	sbfx	r1, r1, #12, #4
    3872:	18cb      	adds	r3, r1, r3
    3874:	d403      	bmi.n	387e <NOROM_SetupGetTrimForAmpcompCtrl+0x3e>
    3876:	2b0f      	cmp	r3, #15
    3878:	bfa8      	it	ge
    387a:	230f      	movge	r3, #15
    387c:	e000      	b.n	3880 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    387e:	2300      	movs	r3, #0
    3880:	b2a1      	uxth	r1, r4
    3882:	2821      	cmp	r0, #33	; 0x21
    3884:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    3888:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    388c:	bf84      	itt	hi
    388e:	f004 4480 	andhi.w	r4, r4, #1073741824	; 0x40000000
    3892:	4323      	orrhi	r3, r4
    3894:	4618      	mov	r0, r3
    3896:	bd70      	pop	{r4, r5, r6, pc}
    3898:	50001378 	andpl	r1, r0, r8, ror r3
    389c:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    38a0:	50003fac 	andpl	r3, r0, ip, lsr #31

000038a4 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>:
    38a4:	281f      	cmp	r0, #31
    38a6:	bf83      	ittte	hi
    38a8:	4b02      	ldrhi	r3, [pc, #8]	; (38b4 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x10>)
    38aa:	6818      	ldrhi	r0, [r3, #0]
    38ac:	f3c0 5001 	ubfxhi	r0, r0, #20, #2
    38b0:	2000      	movls	r0, #0
    38b2:	4770      	bx	lr
    38b4:	50001398 	mulpl	r0, r8, r3

000038b8 <NOROM_SetupGetTrimForAdcShModeEn>:
    38b8:	2821      	cmp	r0, #33	; 0x21
    38ba:	bf83      	ittte	hi
    38bc:	4b02      	ldrhi	r3, [pc, #8]	; (38c8 <NOROM_SetupGetTrimForAdcShModeEn+0x10>)
    38be:	6818      	ldrhi	r0, [r3, #0]
    38c0:	f3c0 7000 	ubfxhi	r0, r0, #28, #1
    38c4:	2001      	movls	r0, #1
    38c6:	4770      	bx	lr
    38c8:	5000138c 	andpl	r1, r0, ip, lsl #7

000038cc <NOROM_SetupGetTrimForAdcShVbufEn>:
    38cc:	2821      	cmp	r0, #33	; 0x21
    38ce:	bf83      	ittte	hi
    38d0:	4b02      	ldrhi	r3, [pc, #8]	; (38dc <NOROM_SetupGetTrimForAdcShVbufEn+0x10>)
    38d2:	6818      	ldrhi	r0, [r3, #0]
    38d4:	f3c0 7040 	ubfxhi	r0, r0, #29, #1
    38d8:	2001      	movls	r0, #1
    38da:	4770      	bx	lr
    38dc:	5000138c 	andpl	r1, r0, ip, lsl #7

000038e0 <NOROM_SetupGetTrimForXoscHfCtl>:
    38e0:	281f      	cmp	r0, #31
    38e2:	bf81      	itttt	hi
    38e4:	4b07      	ldrhi	r3, [pc, #28]	; (3904 <NOROM_SetupGetTrimForXoscHfCtl+0x24>)
    38e6:	681b      	ldrhi	r3, [r3, #0]
    38e8:	f3c3 6002 	ubfxhi	r0, r3, #24, #3
    38ec:	0080      	lslhi	r0, r0, #2
    38ee:	bf81      	itttt	hi
    38f0:	f3c3 62c1 	ubfxhi	r2, r3, #27, #2
    38f4:	ea40 2002 	orrhi.w	r0, r0, r2, lsl #8
    38f8:	f3c3 5381 	ubfxhi	r3, r3, #22, #2
    38fc:	4318      	orrhi	r0, r3
    38fe:	bf98      	it	ls
    3900:	2000      	movls	r0, #0
    3902:	4770      	bx	lr
    3904:	50001398 	mulpl	r0, r8, r3

00003908 <NOROM_SetupGetTrimForXoscHfFastStart>:
    3908:	4b02      	ldr	r3, [pc, #8]	; (3914 <NOROM_SetupGetTrimForXoscHfFastStart+0xc>)
    390a:	6818      	ldr	r0, [r3, #0]
    390c:	f3c0 40c1 	ubfx	r0, r0, #19, #2
    3910:	4770      	bx	lr
    3912:	bf00      	nop
    3914:	5000138c 	andpl	r1, r0, ip, lsl #7

00003918 <NOROM_SetupGetTrimForRadcExtCfg>:
    3918:	281f      	cmp	r0, #31
    391a:	bf81      	itttt	hi
    391c:	4b07      	ldrhi	r3, [pc, #28]	; (393c <NOROM_SetupGetTrimForRadcExtCfg+0x24>)
    391e:	681b      	ldrhi	r3, [r3, #0]
    3920:	f3c3 1005 	ubfxhi	r0, r3, #4, #6
    3924:	f3c3 2289 	ubfxhi	r2, r3, #10, #10
    3928:	bf81      	itttt	hi
    392a:	0400      	lslhi	r0, r0, #16
    392c:	031b      	lslhi	r3, r3, #12
    392e:	ea40 5082 	orrhi.w	r0, r0, r2, lsl #22
    3932:	b29b      	uxthhi	r3, r3
    3934:	bf8c      	ite	hi
    3936:	4318      	orrhi	r0, r3
    3938:	4801      	ldrls	r0, [pc, #4]	; (3940 <NOROM_SetupGetTrimForRadcExtCfg+0x28>)
    393a:	4770      	bx	lr
    393c:	50001398 	mulpl	r0, r8, r3
    3940:	403f8000 	eorsmi	r8, pc, r0

00003944 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>:
    3944:	2821      	cmp	r0, #33	; 0x21
    3946:	bf83      	ittte	hi
    3948:	4b02      	ldrhi	r3, [pc, #8]	; (3954 <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x10>)
    394a:	6818      	ldrhi	r0, [r3, #0]
    394c:	f3c0 60c0 	ubfxhi	r0, r0, #27, #1
    3950:	2000      	movls	r0, #0
    3952:	4770      	bx	lr
    3954:	5000138c 	andpl	r1, r0, ip, lsl #7

00003958 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>:
    3958:	2821      	cmp	r0, #33	; 0x21
    395a:	bf83      	ittte	hi
    395c:	4b02      	ldrhi	r3, [pc, #8]	; (3968 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x10>)
    395e:	6818      	ldrhi	r0, [r3, #0]
    3960:	f3c0 5045 	ubfxhi	r0, r0, #21, #6
    3964:	2000      	movls	r0, #0
    3966:	4770      	bx	lr
    3968:	5000138c 	andpl	r1, r0, ip, lsl #7

0000396c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>:
    396c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    396e:	4605      	mov	r5, r0
    3970:	4608      	mov	r0, r1
    3972:	f7ff ff19 	bl	37a8 <NOROM_SetupGetTrimForAnabypassValue1>
    3976:	4c39      	ldr	r4, [pc, #228]	; (3a5c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf0>)
    3978:	4602      	mov	r2, r0
    397a:	2118      	movs	r1, #24
    397c:	4620      	mov	r0, r4
    397e:	f000 fb33 	bl	3fe8 <NOROM_DDI32RegWrite>
    3982:	f7ff ff3f 	bl	3804 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>
    3986:	4b36      	ldr	r3, [pc, #216]	; (3a60 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf4>)
    3988:	b280      	uxth	r0, r0
    398a:	681b      	ldr	r3, [r3, #0]
    398c:	9000      	str	r0, [sp, #0]
    398e:	685e      	ldr	r6, [r3, #4]
    3990:	4620      	mov	r0, r4
    3992:	212c      	movs	r1, #44	; 0x2c
    3994:	f240 32ff 	movw	r2, #1023	; 0x3ff
    3998:	2300      	movs	r3, #0
    399a:	47b0      	blx	r6
    399c:	4b31      	ldr	r3, [pc, #196]	; (3a64 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf8>)
    399e:	4620      	mov	r0, r4
    39a0:	681a      	ldr	r2, [r3, #0]
    39a2:	211c      	movs	r1, #28
    39a4:	f3c2 020d 	ubfx	r2, r2, #0, #14
    39a8:	f000 fb1e 	bl	3fe8 <NOROM_DDI32RegWrite>
    39ac:	f7ff ff36 	bl	381c <NOROM_SetupGetTrimForAmpcompTh2>
    39b0:	2114      	movs	r1, #20
    39b2:	4602      	mov	r2, r0
    39b4:	4620      	mov	r0, r4
    39b6:	f000 fb17 	bl	3fe8 <NOROM_DDI32RegWrite>
    39ba:	f7ff ff37 	bl	382c <NOROM_SetupGetTrimForAmpcompTh1>
    39be:	2110      	movs	r1, #16
    39c0:	4602      	mov	r2, r0
    39c2:	4620      	mov	r0, r4
    39c4:	f000 fb10 	bl	3fe8 <NOROM_DDI32RegWrite>
    39c8:	4628      	mov	r0, r5
    39ca:	f7ff ff39 	bl	3840 <NOROM_SetupGetTrimForAmpcompCtrl>
    39ce:	210c      	movs	r1, #12
    39d0:	4602      	mov	r2, r0
    39d2:	4620      	mov	r0, r4
    39d4:	f000 fb08 	bl	3fe8 <NOROM_DDI32RegWrite>
    39d8:	4628      	mov	r0, r5
    39da:	f7ff ff6d 	bl	38b8 <NOROM_SetupGetTrimForAdcShModeEn>
    39de:	0040      	lsls	r0, r0, #1
    39e0:	4e21      	ldr	r6, [pc, #132]	; (3a68 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xfc>)
    39e2:	f040 0020 	orr.w	r0, r0, #32
    39e6:	b2c0      	uxtb	r0, r0
    39e8:	7030      	strb	r0, [r6, #0]
    39ea:	4628      	mov	r0, r5
    39ec:	f7ff ff6e 	bl	38cc <NOROM_SetupGetTrimForAdcShVbufEn>
    39f0:	f040 0010 	orr.w	r0, r0, #16
    39f4:	b2c0      	uxtb	r0, r0
    39f6:	7030      	strb	r0, [r6, #0]
    39f8:	4628      	mov	r0, r5
    39fa:	f7ff ff71 	bl	38e0 <NOROM_SetupGetTrimForXoscHfCtl>
    39fe:	2128      	movs	r1, #40	; 0x28
    3a00:	4602      	mov	r2, r0
    3a02:	4620      	mov	r0, r4
    3a04:	f000 faf0 	bl	3fe8 <NOROM_DDI32RegWrite>
    3a08:	4628      	mov	r0, r5
    3a0a:	f7ff ff4b 	bl	38a4 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>
    3a0e:	0040      	lsls	r0, r0, #1
    3a10:	4b16      	ldr	r3, [pc, #88]	; (3a6c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x100>)
    3a12:	f040 0060 	orr.w	r0, r0, #96	; 0x60
    3a16:	b2c0      	uxtb	r0, r0
    3a18:	7018      	strb	r0, [r3, #0]
    3a1a:	4628      	mov	r0, r5
    3a1c:	f7ff ff92 	bl	3944 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>
    3a20:	00c0      	lsls	r0, r0, #3
    3a22:	4b13      	ldr	r3, [pc, #76]	; (3a70 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x104>)
    3a24:	f060 007f 	orn	r0, r0, #127	; 0x7f
    3a28:	b2c0      	uxtb	r0, r0
    3a2a:	7018      	strb	r0, [r3, #0]
    3a2c:	4628      	mov	r0, r5
    3a2e:	f7ff ff93 	bl	3958 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>
    3a32:	ea6f 6000 	mvn.w	r0, r0, lsl #24
    3a36:	ea6f 5090 	mvn.w	r0, r0, lsr #22
    3a3a:	4b0e      	ldr	r3, [pc, #56]	; (3a74 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x108>)
    3a3c:	b280      	uxth	r0, r0
    3a3e:	8018      	strh	r0, [r3, #0]
    3a40:	4628      	mov	r0, r5
    3a42:	f7ff ff69 	bl	3918 <NOROM_SetupGetTrimForRadcExtCfg>
    3a46:	2108      	movs	r1, #8
    3a48:	4602      	mov	r2, r0
    3a4a:	4620      	mov	r0, r4
    3a4c:	f000 facc 	bl	3fe8 <NOROM_DDI32RegWrite>
    3a50:	4b09      	ldr	r3, [pc, #36]	; (3a78 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x10c>)
    3a52:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    3a56:	601a      	str	r2, [r3, #0]
    3a58:	b002      	add	sp, #8
    3a5a:	bd70      	pop	{r4, r5, r6, pc}
    3a5c:	400ca000 	andmi	sl, ip, r0
    3a60:	100001a4 	andne	r0, r0, r4, lsr #3
    3a64:	5000137c 	andpl	r1, r0, ip, ror r3
    3a68:	400ca149 	andmi	sl, ip, r9, asr #2
    3a6c:	400ca14c 	andmi	sl, ip, ip, asr #2
    3a70:	400ca141 	andmi	sl, ip, r1, asr #2
    3a74:	400ca1dc 	ldrdmi	sl, [ip], -ip
    3a78:	400ca040 	andmi	sl, ip, r0, asr #32

00003a7c <NOROM_SetupSetCacheModeAccordingToCcfgSetting>:
    3a7c:	b530      	push	{r4, r5, lr}
    3a7e:	4b14      	ldr	r3, [pc, #80]	; (3ad0 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>)
    3a80:	681b      	ldr	r3, [r3, #0]
    3a82:	2b00      	cmp	r3, #0
    3a84:	d1fb      	bne.n	3a7e <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2>
    3a86:	4a13      	ldr	r2, [pc, #76]	; (3ad4 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x58>)
    3a88:	4913      	ldr	r1, [pc, #76]	; (3ad8 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x5c>)
    3a8a:	6813      	ldr	r3, [r2, #0]
    3a8c:	6809      	ldr	r1, [r1, #0]
    3a8e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    3a92:	f023 0307 	bic.w	r3, r3, #7
    3a96:	f011 0f04 	tst.w	r1, #4
    3a9a:	4614      	mov	r4, r2
    3a9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    3aa0:	d003      	beq.n	3aaa <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2e>
    3aa2:	f043 0305 	orr.w	r3, r3, #5
    3aa6:	6013      	str	r3, [r2, #0]
    3aa8:	bd30      	pop	{r4, r5, pc}
    3aaa:	490c      	ldr	r1, [pc, #48]	; (3adc <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x60>)
    3aac:	f043 0004 	orr.w	r0, r3, #4
    3ab0:	680d      	ldr	r5, [r1, #0]
    3ab2:	07ad      	lsls	r5, r5, #30
    3ab4:	d009      	beq.n	3aca <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x4e>
    3ab6:	f043 0307 	orr.w	r3, r3, #7
    3aba:	6013      	str	r3, [r2, #0]
    3abc:	680b      	ldr	r3, [r1, #0]
    3abe:	f003 0303 	and.w	r3, r3, #3
    3ac2:	2b03      	cmp	r3, #3
    3ac4:	d1fa      	bne.n	3abc <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x40>
    3ac6:	6020      	str	r0, [r4, #0]
    3ac8:	bd30      	pop	{r4, r5, pc}
    3aca:	6010      	str	r0, [r2, #0]
    3acc:	bd30      	pop	{r4, r5, pc}
    3ace:	bf00      	nop
    3ad0:	4268000c 	rsbmi	r0, r8, #12
    3ad4:	40034004 	andmi	r4, r3, r4
    3ad8:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    3adc:	40034000 	andmi	r4, r3, r0

00003ae0 <NOROM_SetupSetAonRtcSubSecInc>:
    3ae0:	4b07      	ldr	r3, [pc, #28]	; (3b00 <NOROM_SetupSetAonRtcSubSecInc+0x20>)
    3ae2:	b282      	uxth	r2, r0
    3ae4:	f3c0 4007 	ubfx	r0, r0, #16, #8
    3ae8:	601a      	str	r2, [r3, #0]
    3aea:	6058      	str	r0, [r3, #4]
    3aec:	2201      	movs	r2, #1
    3aee:	3308      	adds	r3, #8
    3af0:	601a      	str	r2, [r3, #0]
    3af2:	4a04      	ldr	r2, [pc, #16]	; (3b04 <NOROM_SetupSetAonRtcSubSecInc+0x24>)
    3af4:	6812      	ldr	r2, [r2, #0]
    3af6:	2a00      	cmp	r2, #0
    3af8:	d0fb      	beq.n	3af2 <NOROM_SetupSetAonRtcSubSecInc+0x12>
    3afa:	2200      	movs	r2, #0
    3afc:	601a      	str	r2, [r3, #0]
    3afe:	4770      	bx	lr
    3b00:	400c603c 	andmi	r6, ip, ip, lsr r0
    3b04:	438c0884 	orrmi	r0, ip, #132, 16	; 0x840000

00003b08 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>:
    3b08:	f3c0 4381 	ubfx	r3, r0, #18, #2
    3b0c:	2b01      	cmp	r3, #1
    3b0e:	b510      	push	{r4, lr}
    3b10:	4604      	mov	r4, r0
    3b12:	d002      	beq.n	3b1a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12>
    3b14:	2b02      	cmp	r3, #2
    3b16:	d02f      	beq.n	3b78 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    3b18:	e02a      	b.n	3b70 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    3b1a:	4b42      	ldr	r3, [pc, #264]	; (3c24 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x11c>)
    3b1c:	681b      	ldr	r3, [r3, #0]
    3b1e:	039a      	lsls	r2, r3, #14
    3b20:	d426      	bmi.n	3b70 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    3b22:	4a41      	ldr	r2, [pc, #260]	; (3c28 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    3b24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    3b28:	6011      	str	r1, [r2, #0]
    3b2a:	4940      	ldr	r1, [pc, #256]	; (3c2c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>)
    3b2c:	f3c3 3003 	ubfx	r0, r3, #12, #4
    3b30:	680a      	ldr	r2, [r1, #0]
    3b32:	f022 028f 	bic.w	r2, r2, #143	; 0x8f
    3b36:	4302      	orrs	r2, r0
    3b38:	f3c3 4000 	ubfx	r0, r3, #16, #1
    3b3c:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
    3b40:	600a      	str	r2, [r1, #0]
    3b42:	f851 2c01 	ldr.w	r2, [r1, #-1]
    3b46:	f3c3 2003 	ubfx	r0, r3, #8, #4
    3b4a:	f022 020f 	bic.w	r2, r2, #15
    3b4e:	4302      	orrs	r2, r0
    3b50:	f851 0c01 	ldr.w	r0, [r1, #-1]
    3b54:	f841 2c01 	str.w	r2, [r1, #-1]
    3b58:	f851 2c02 	ldr.w	r2, [r1, #-2]
    3b5c:	f003 03e7 	and.w	r3, r3, #231	; 0xe7
    3b60:	f022 02e7 	bic.w	r2, r2, #231	; 0xe7
    3b64:	4313      	orrs	r3, r2
    3b66:	f851 2c02 	ldr.w	r2, [r1, #-2]
    3b6a:	f841 3c02 	str.w	r3, [r1, #-2]
    3b6e:	e003      	b.n	3b78 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    3b70:	4b2d      	ldr	r3, [pc, #180]	; (3c28 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    3b72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3b76:	601a      	str	r2, [r3, #0]
    3b78:	4b2d      	ldr	r3, [pc, #180]	; (3c30 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x128>)
    3b7a:	681b      	ldr	r3, [r3, #0]
    3b7c:	071b      	lsls	r3, r3, #28
    3b7e:	bf5e      	ittt	pl
    3b80:	4b2c      	ldrpl	r3, [pc, #176]	; (3c34 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12c>)
    3b82:	2240      	movpl	r2, #64	; 0x40
    3b84:	601a      	strpl	r2, [r3, #0]
    3b86:	4b2c      	ldr	r3, [pc, #176]	; (3c38 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>)
    3b88:	f44f 7200 	mov.w	r2, #512	; 0x200
    3b8c:	601a      	str	r2, [r3, #0]
    3b8e:	f7ff febb 	bl	3908 <NOROM_SetupGetTrimForXoscHfFastStart>
    3b92:	4b2a      	ldr	r3, [pc, #168]	; (3c3c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x134>)
    3b94:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    3b98:	b2c0      	uxtb	r0, r0
    3b9a:	7018      	strb	r0, [r3, #0]
    3b9c:	f3c4 5081 	ubfx	r0, r4, #22, #2
    3ba0:	2801      	cmp	r0, #1
    3ba2:	d00b      	beq.n	3bbc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb4>
    3ba4:	d302      	bcc.n	3bac <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa4>
    3ba6:	2802      	cmp	r0, #2
    3ba8:	d026      	beq.n	3bf8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf0>
    3baa:	e028      	b.n	3bfe <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf6>
    3bac:	2004      	movs	r0, #4
    3bae:	2101      	movs	r1, #1
    3bb0:	f7ff fa84 	bl	30bc <NOROM_OSCClockSourceSet>
    3bb4:	4822      	ldr	r0, [pc, #136]	; (3c40 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x138>)
    3bb6:	f7ff ff93 	bl	3ae0 <NOROM_SetupSetAonRtcSubSecInc>
    3bba:	e024      	b.n	3c06 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfe>
    3bbc:	f7ff faac 	bl	3118 <NOROM_OSCClockSourceGet>
    3bc0:	4604      	mov	r4, r0
    3bc2:	2004      	movs	r0, #4
    3bc4:	4621      	mov	r1, r4
    3bc6:	f7ff fa79 	bl	30bc <NOROM_OSCClockSourceSet>
    3bca:	2004      	movs	r0, #4
    3bcc:	f7ff faa4 	bl	3118 <NOROM_OSCClockSourceGet>
    3bd0:	42a0      	cmp	r0, r4
    3bd2:	d1fa      	bne.n	3bca <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc2>
    3bd4:	4b1b      	ldr	r3, [pc, #108]	; (3c44 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x13c>)
    3bd6:	681c      	ldr	r4, [r3, #0]
    3bd8:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    3bdc:	f7ff ff80 	bl	3ae0 <NOROM_SetupSetAonRtcSubSecInc>
    3be0:	4b19      	ldr	r3, [pc, #100]	; (3c48 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x140>)
    3be2:	f04f 2260 	mov.w	r2, #1610637312	; 0x60006000
    3be6:	681b      	ldr	r3, [r3, #0]
    3be8:	0e20      	lsrs	r0, r4, #24
    3bea:	681b      	ldr	r3, [r3, #0]
    3bec:	2107      	movs	r1, #7
    3bee:	4798      	blx	r3
    3bf0:	4b0d      	ldr	r3, [pc, #52]	; (3c28 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    3bf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3bf6:	601a      	str	r2, [r3, #0]
    3bf8:	2004      	movs	r0, #4
    3bfa:	2103      	movs	r1, #3
    3bfc:	e001      	b.n	3c02 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfa>
    3bfe:	2004      	movs	r0, #4
    3c00:	2102      	movs	r1, #2
    3c02:	f7ff fa5b 	bl	30bc <NOROM_OSCClockSourceSet>
    3c06:	4b11      	ldr	r3, [pc, #68]	; (3c4c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x144>)
    3c08:	4a11      	ldr	r2, [pc, #68]	; (3c50 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x148>)
    3c0a:	681b      	ldr	r3, [r3, #0]
    3c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3c10:	7013      	strb	r3, [r2, #0]
    3c12:	f647 0218 	movw	r2, #30744	; 0x7818
    3c16:	4b0f      	ldr	r3, [pc, #60]	; (3c54 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x14c>)
    3c18:	801a      	strh	r2, [r3, #0]
    3c1a:	f5a3 3364 	sub.w	r3, r3, #233472	; 0x39000
    3c1e:	3b44      	subs	r3, #68	; 0x44
    3c20:	681b      	ldr	r3, [r3, #0]
    3c22:	bd10      	pop	{r4, pc}
    3c24:	5000138c 	andpl	r1, r0, ip, lsl #7
    3c28:	400ca040 	andmi	sl, ip, r0, asr #32
    3c2c:	4008600c 	andmi	r6, r8, ip
    3c30:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    3c34:	400ca068 	andmi	sl, ip, r8, rrx
    3c38:	400ca080 	andmi	sl, ip, r0, lsl #1
    3c3c:	400ca108 	andmi	sl, ip, r8, lsl #2
    3c40:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
    3c44:	50003fa8 	andpl	r3, r0, r8, lsr #31
    3c48:	100001b4 			; <UNDEFINED> instruction: 0x100001b4
    3c4c:	5000136c 	andpl	r1, r0, ip, ror #6
    3c50:	400cb00b 	andmi	fp, ip, fp
    3c54:	400cb070 	andmi	fp, ip, r0, ror r0

00003c58 <NOROM_SysCtrlSetRechargeBeforePowerDown>:
    3c58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c5c:	4b77      	ldr	r3, [pc, #476]	; (3e3c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e4>)
    3c5e:	4607      	mov	r7, r0
    3c60:	681b      	ldr	r3, [r3, #0]
    3c62:	4e77      	ldr	r6, [pc, #476]	; (3e40 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    3c64:	f013 0f02 	tst.w	r3, #2
    3c68:	d004      	beq.n	3c74 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c>
    3c6a:	2308      	movs	r3, #8
    3c6c:	71b3      	strb	r3, [r6, #6]
    3c6e:	4a75      	ldr	r2, [pc, #468]	; (3e44 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1ec>)
    3c70:	4b75      	ldr	r3, [pc, #468]	; (3e48 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    3c72:	e0df      	b.n	3e34 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1dc>
    3c74:	f7ff f9e6 	bl	3044 <NOROM_AONBatMonTemperatureGetDegC>
    3c78:	4b74      	ldr	r3, [pc, #464]	; (3e4c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f4>)
    3c7a:	681d      	ldr	r5, [r3, #0]
    3c7c:	172a      	asrs	r2, r5, #28
    3c7e:	02ac      	lsls	r4, r5, #10
    3c80:	f102 0101 	add.w	r1, r2, #1
    3c84:	d408      	bmi.n	3c98 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x40>
    3c86:	f1c0 033e 	rsb	r3, r0, #62	; 0x3e
    3c8a:	10db      	asrs	r3, r3, #3
    3c8c:	2b08      	cmp	r3, #8
    3c8e:	bfa8      	it	ge
    3c90:	2308      	movge	r3, #8
    3c92:	4299      	cmp	r1, r3
    3c94:	bfb8      	it	lt
    3c96:	4619      	movlt	r1, r3
    3c98:	f005 7340 	and.w	r3, r5, #50331648	; 0x3000000
    3c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    3ca0:	d10a      	bne.n	3cb8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x60>
    3ca2:	4b6b      	ldr	r3, [pc, #428]	; (3e50 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f8>)
    3ca4:	681a      	ldr	r2, [r3, #0]
    3ca6:	681b      	ldr	r3, [r3, #0]
    3ca8:	f3c2 2204 	ubfx	r2, r2, #8, #5
    3cac:	2a15      	cmp	r2, #21
    3cae:	bf88      	it	hi
    3cb0:	3a20      	subhi	r2, #32
    3cb2:	f3c3 6304 	ubfx	r3, r3, #24, #5
    3cb6:	e00a      	b.n	3cce <NOROM_SysCtrlSetRechargeBeforePowerDown+0x76>
    3cb8:	4b66      	ldr	r3, [pc, #408]	; (3e54 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1fc>)
    3cba:	681a      	ldr	r2, [r3, #0]
    3cbc:	4b66      	ldr	r3, [pc, #408]	; (3e58 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x200>)
    3cbe:	f3c2 6204 	ubfx	r2, r2, #24, #5
    3cc2:	681b      	ldr	r3, [r3, #0]
    3cc4:	2a15      	cmp	r2, #21
    3cc6:	bf88      	it	hi
    3cc8:	3a20      	subhi	r2, #32
    3cca:	f3c3 4304 	ubfx	r3, r3, #16, #5
    3cce:	2b15      	cmp	r3, #21
    3cd0:	440a      	add	r2, r1
    3cd2:	bf88      	it	hi
    3cd4:	3b20      	subhi	r3, #32
    3cd6:	2a15      	cmp	r2, #21
    3cd8:	dc05      	bgt.n	3ce6 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8e>
    3cda:	f06f 0109 	mvn.w	r1, #9
    3cde:	428a      	cmp	r2, r1
    3ce0:	bfb8      	it	lt
    3ce2:	460a      	movlt	r2, r1
    3ce4:	e000      	b.n	3ce8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x90>
    3ce6:	2215      	movs	r2, #21
    3ce8:	4c5c      	ldr	r4, [pc, #368]	; (3e5c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x204>)
    3cea:	f002 011f 	and.w	r1, r2, #31
    3cee:	f441 51f8 	orr.w	r1, r1, #7936	; 0x1f00
    3cf2:	8021      	strh	r1, [r4, #0]
    3cf4:	495a      	ldr	r1, [pc, #360]	; (3e60 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x208>)
    3cf6:	6809      	ldr	r1, [r1, #0]
    3cf8:	f011 0403 	ands.w	r4, r1, #3
    3cfc:	bf18      	it	ne
    3cfe:	2401      	movne	r4, #1
    3d00:	0749      	lsls	r1, r1, #29
    3d02:	bf48      	it	mi
    3d04:	f044 0402 	orrmi.w	r4, r4, #2
    3d08:	b10f      	cbz	r7, 3d0e <NOROM_SysCtrlSetRechargeBeforePowerDown+0xb6>
    3d0a:	f044 0404 	orr.w	r4, r4, #4
    3d0e:	f996 1007 	ldrsb.w	r1, [r6, #7]
    3d12:	1a41      	subs	r1, r0, r1
    3d14:	2904      	cmp	r1, #4
    3d16:	dc03      	bgt.n	3d20 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc8>
    3d18:	4949      	ldr	r1, [pc, #292]	; (3e40 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    3d1a:	7989      	ldrb	r1, [r1, #6]
    3d1c:	428c      	cmp	r4, r1
    3d1e:	d06f      	beq.n	3e00 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a8>
    3d20:	f1b0 010f 	subs.w	r1, r0, #15
    3d24:	9101      	str	r1, [sp, #4]
    3d26:	f004 0101 	and.w	r1, r4, #1
    3d2a:	f8df a144 	ldr.w	sl, [pc, #324]	; 3e70 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x218>
    3d2e:	f004 0904 	and.w	r9, r4, #4
    3d32:	f004 0802 	and.w	r8, r4, #2
    3d36:	460f      	mov	r7, r1
    3d38:	d42a      	bmi.n	3d90 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    3d3a:	9901      	ldr	r1, [sp, #4]
    3d3c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    3d40:	ea4f 2e21 	mov.w	lr, r1, asr #8
    3d44:	f1be 0f07 	cmp.w	lr, #7
    3d48:	9101      	str	r1, [sp, #4]
    3d4a:	d801      	bhi.n	3d50 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf8>
    3d4c:	d104      	bne.n	3d58 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x100>
    3d4e:	e001      	b.n	3d54 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xfc>
    3d50:	f04f 0e07 	mov.w	lr, #7
    3d54:	2106      	movs	r1, #6
    3d56:	e000      	b.n	3d5a <NOROM_SysCtrlSetRechargeBeforePowerDown+0x102>
    3d58:	4671      	mov	r1, lr
    3d5a:	f8df b118 	ldr.w	fp, [pc, #280]	; 3e74 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x21c>
    3d5e:	3101      	adds	r1, #1
    3d60:	f85a c021 	ldr.w	ip, [sl, r1, lsl #2]
    3d64:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
    3d68:	ebc1 0c0c 	rsb	ip, r1, ip
    3d6c:	fa5f f18c 	uxtb.w	r1, ip
    3d70:	f1b9 0f00 	cmp.w	r9, #0
    3d74:	d002      	beq.n	3d7c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x124>
    3d76:	f3cc 2b07 	ubfx	fp, ip, #8, #8
    3d7a:	4459      	add	r1, fp
    3d7c:	f1b8 0f00 	cmp.w	r8, #0
    3d80:	d002      	beq.n	3d88 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x130>
    3d82:	f3cc 4b07 	ubfx	fp, ip, #16, #8
    3d86:	4459      	add	r1, fp
    3d88:	b12f      	cbz	r7, 3d96 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    3d8a:	eb01 611c 	add.w	r1, r1, ip, lsr #24
    3d8e:	e002      	b.n	3d96 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    3d90:	f04f 0e00 	mov.w	lr, #0
    3d94:	4671      	mov	r1, lr
    3d96:	f85a a02e 	ldr.w	sl, [sl, lr, lsl #2]
    3d9a:	fa5f fc8a 	uxtb.w	ip, sl
    3d9e:	f1b9 0f00 	cmp.w	r9, #0
    3da2:	d002      	beq.n	3daa <NOROM_SysCtrlSetRechargeBeforePowerDown+0x152>
    3da4:	f3ca 2907 	ubfx	r9, sl, #8, #8
    3da8:	44cc      	add	ip, r9
    3daa:	f1b8 0f00 	cmp.w	r8, #0
    3dae:	d002      	beq.n	3db6 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x15e>
    3db0:	f3ca 4807 	ubfx	r8, sl, #16, #8
    3db4:	44c4      	add	ip, r8
    3db6:	b10f      	cbz	r7, 3dbc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x164>
    3db8:	eb0c 6c1a 	add.w	ip, ip, sl, lsr #24
    3dbc:	1a9b      	subs	r3, r3, r2
    3dbe:	2b01      	cmp	r3, #1
    3dc0:	bfb8      	it	lt
    3dc2:	2301      	movlt	r3, #1
    3dc4:	9f01      	ldr	r7, [sp, #4]
    3dc6:	2234      	movs	r2, #52	; 0x34
    3dc8:	4353      	muls	r3, r2
    3dca:	eba7 270e 	sub.w	r7, r7, lr, lsl #8
    3dce:	4379      	muls	r1, r7
    3dd0:	b2ed      	uxtb	r5, r5
    3dd2:	436b      	muls	r3, r5
    3dd4:	3180      	adds	r1, #128	; 0x80
    3dd6:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
    3dda:	fbb3 f1f1 	udiv	r1, r3, r1
    3dde:	f64f 7cff 	movw	ip, #65535	; 0xffff
    3de2:	4561      	cmp	r1, ip
    3de4:	bf28      	it	cs
    3de6:	4661      	movcs	r1, ip
    3de8:	287f      	cmp	r0, #127	; 0x7f
    3dea:	80b1      	strh	r1, [r6, #4]
    3dec:	dc05      	bgt.n	3dfa <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a2>
    3dee:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    3df2:	4298      	cmp	r0, r3
    3df4:	bfb8      	it	lt
    3df6:	4618      	movlt	r0, r3
    3df8:	e000      	b.n	3dfc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a4>
    3dfa:	207f      	movs	r0, #127	; 0x7f
    3dfc:	71f0      	strb	r0, [r6, #7]
    3dfe:	71b4      	strb	r4, [r6, #6]
    3e00:	4b18      	ldr	r3, [pc, #96]	; (3e64 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20c>)
    3e02:	2100      	movs	r1, #0
    3e04:	681b      	ldr	r3, [r3, #0]
    3e06:	6033      	str	r3, [r6, #0]
    3e08:	88b3      	ldrh	r3, [r6, #4]
    3e0a:	2b1e      	cmp	r3, #30
    3e0c:	bf9e      	ittt	ls
    3e0e:	4a0c      	ldrls	r2, [pc, #48]	; (3e40 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    3e10:	231f      	movls	r3, #31
    3e12:	8093      	strhls	r3, [r2, #4]
    3e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3e18:	d302      	bcc.n	3e20 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    3e1a:	085b      	lsrs	r3, r3, #1
    3e1c:	3101      	adds	r1, #1
    3e1e:	e7f9      	b.n	3e14 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1bc>
    3e20:	4a11      	ldr	r2, [pc, #68]	; (3e68 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x210>)
    3e22:	3b0f      	subs	r3, #15
    3e24:	430a      	orrs	r2, r1
    3e26:	091b      	lsrs	r3, r3, #4
    3e28:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
    3e2c:	4a06      	ldr	r2, [pc, #24]	; (3e48 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    3e2e:	6013      	str	r3, [r2, #0]
    3e30:	4b0e      	ldr	r3, [pc, #56]	; (3e6c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x214>)
    3e32:	2200      	movs	r2, #0
    3e34:	601a      	str	r2, [r3, #0]
    3e36:	b003      	add	sp, #12
    3e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e3c:	40090000 	andmi	r0, r9, r0
    3e40:	20000234 	andcs	r0, r0, r4, lsr r2
    3e44:	00a4fdfd 	strdeq	pc, [r4], sp	; <UNPREDICTABLE>
    3e48:	40091030 	andmi	r1, r9, r0, lsr r0
    3e4c:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    3e50:	50001388 	andpl	r1, r0, r8, lsl #7
    3e54:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    3e58:	5000113c 	andpl	r1, r0, ip, lsr r1
    3e5c:	4008626e 	andmi	r6, r8, lr, ror #4
    3e60:	40082224 	andmi	r2, r8, r4, lsr #4
    3e64:	40092008 	andmi	r2, r9, r8
    3e68:	80a4e700 	adchi	lr, r4, r0, lsl #14
    3e6c:	40091034 	andmi	r1, r9, r4, lsr r0
    3e70:	5000139c 	mulpl	r0, ip, r3
    3e74:	50001398 	mulpl	r0, r8, r3

00003e78 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>:
    3e78:	b510      	push	{r4, lr}
    3e7a:	4b14      	ldr	r3, [pc, #80]	; (3ecc <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x54>)
    3e7c:	681c      	ldr	r4, [r3, #0]
    3e7e:	b2a4      	uxth	r4, r4
    3e80:	b314      	cbz	r4, 3ec8 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x50>
    3e82:	f7ff f8df 	bl	3044 <NOROM_AONBatMonTemperatureGetDegC>
    3e86:	4b12      	ldr	r3, [pc, #72]	; (3ed0 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    3e88:	f993 2007 	ldrsb.w	r2, [r3, #7]
    3e8c:	4290      	cmp	r0, r2
    3e8e:	da05      	bge.n	3e9c <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x24>
    3e90:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    3e94:	4290      	cmp	r0, r2
    3e96:	bfb8      	it	lt
    3e98:	4610      	movlt	r0, r2
    3e9a:	71d8      	strb	r0, [r3, #7]
    3e9c:	889a      	ldrh	r2, [r3, #4]
    3e9e:	490c      	ldr	r1, [pc, #48]	; (3ed0 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    3ea0:	4294      	cmp	r4, r2
    3ea2:	d310      	bcc.n	3ec6 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4e>
    3ea4:	4b0b      	ldr	r3, [pc, #44]	; (3ed4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x5c>)
    3ea6:	6808      	ldr	r0, [r1, #0]
    3ea8:	681b      	ldr	r3, [r3, #0]
    3eaa:	1aa4      	subs	r4, r4, r2
    3eac:	3302      	adds	r3, #2
    3eae:	1a1b      	subs	r3, r3, r0
    3eb0:	2b1f      	cmp	r3, #31
    3eb2:	bf28      	it	cs
    3eb4:	231f      	movcs	r3, #31
    3eb6:	085b      	lsrs	r3, r3, #1
    3eb8:	40dc      	lsrs	r4, r3
    3eba:	4414      	add	r4, r2
    3ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3ec0:	4294      	cmp	r4, r2
    3ec2:	bf28      	it	cs
    3ec4:	4614      	movcs	r4, r2
    3ec6:	808c      	strh	r4, [r1, #4]
    3ec8:	bd10      	pop	{r4, pc}
    3eca:	bf00      	nop
    3ecc:	40091034 	andmi	r1, r9, r4, lsr r0
    3ed0:	20000234 	andcs	r0, r0, r4, lsr r2
    3ed4:	40092008 	andmi	r2, r9, r8

00003ed8 <NOROM_SysCtrlResetSourceGet>:
    3ed8:	4b04      	ldr	r3, [pc, #16]	; (3eec <NOROM_SysCtrlResetSourceGet+0x14>)
    3eda:	681a      	ldr	r2, [r3, #0]
    3edc:	0412      	lsls	r2, r2, #16
    3ede:	bf5a      	itte	pl
    3ee0:	6818      	ldrpl	r0, [r3, #0]
    3ee2:	f3c0 0042 	ubfxpl	r0, r0, #1, #3
    3ee6:	2008      	movmi	r0, #8
    3ee8:	4770      	bx	lr
    3eea:	bf00      	nop
    3eec:	40090004 	andmi	r0, r9, r4

00003ef0 <NOROM_ChipInfo_GetChipFamily>:
    3ef0:	f64b 129a 	movw	r2, #47514	; 0xb99a
    3ef4:	4b10      	ldr	r3, [pc, #64]	; (3f38 <NOROM_ChipInfo_GetChipFamily+0x48>)
    3ef6:	6818      	ldr	r0, [r3, #0]
    3ef8:	f3c0 300f 	ubfx	r0, r0, #12, #16
    3efc:	4290      	cmp	r0, r2
    3efe:	d106      	bne.n	3f0e <NOROM_ChipInfo_GetChipFamily+0x1e>
    3f00:	681b      	ldr	r3, [r3, #0]
    3f02:	0f1b      	lsrs	r3, r3, #28
    3f04:	2b0b      	cmp	r3, #11
    3f06:	bf0c      	ite	eq
    3f08:	2004      	moveq	r0, #4
    3f0a:	2000      	movne	r0, #0
    3f0c:	e011      	b.n	3f32 <NOROM_ChipInfo_GetChipFamily+0x42>
    3f0e:	f64b 13be 	movw	r3, #47550	; 0xb9be
    3f12:	4298      	cmp	r0, r3
    3f14:	d00a      	beq.n	3f2c <NOROM_ChipInfo_GetChipFamily+0x3c>
    3f16:	f64b 3341 	movw	r3, #47937	; 0xbb41
    3f1a:	4298      	cmp	r0, r3
    3f1c:	d008      	beq.n	3f30 <NOROM_ChipInfo_GetChipFamily+0x40>
    3f1e:	f64b 3320 	movw	r3, #47904	; 0xbb20
    3f22:	4298      	cmp	r0, r3
    3f24:	bf14      	ite	ne
    3f26:	20ff      	movne	r0, #255	; 0xff
    3f28:	2002      	moveq	r0, #2
    3f2a:	e002      	b.n	3f32 <NOROM_ChipInfo_GetChipFamily+0x42>
    3f2c:	2001      	movs	r0, #1
    3f2e:	e000      	b.n	3f32 <NOROM_ChipInfo_GetChipFamily+0x42>
    3f30:	2003      	movs	r0, #3
    3f32:	b240      	sxtb	r0, r0
    3f34:	4770      	bx	lr
    3f36:	bf00      	nop
    3f38:	50001318 	andpl	r1, r0, r8, lsl r3

00003f3c <NOROM_ChipInfo_GetHwRevision>:
    3f3c:	b538      	push	{r3, r4, r5, lr}
    3f3e:	4b19      	ldr	r3, [pc, #100]	; (3fa4 <NOROM_ChipInfo_GetHwRevision+0x68>)
    3f40:	681d      	ldr	r5, [r3, #0]
    3f42:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
    3f46:	6818      	ldr	r0, [r3, #0]
    3f48:	0f2d      	lsrs	r5, r5, #28
    3f4a:	b2c4      	uxtb	r4, r0
    3f4c:	2c80      	cmp	r4, #128	; 0x80
    3f4e:	bf28      	it	cs
    3f50:	2400      	movcs	r4, #0
    3f52:	f7ff ffcd 	bl	3ef0 <NOROM_ChipInfo_GetChipFamily>
    3f56:	2804      	cmp	r0, #4
    3f58:	d821      	bhi.n	3f9e <NOROM_ChipInfo_GetHwRevision+0x62>
    3f5a:	e8df f000 	tbb	[pc, r0]
    3f5e:	1b1b1303 	blne	6c8b72 <__ccfg+0x6a8bca>
    3f62:	3d01001c 	stccc	0, cr0, [r1, #-112]	; 0xffffff90
    3f66:	2d07      	cmp	r5, #7
    3f68:	d819      	bhi.n	3f9e <NOROM_ChipInfo_GetHwRevision+0x62>
    3f6a:	e8df f005 	tbb	[pc, r5]
    3f6e:	18041811 	stmdane	r4, {r0, r4, fp, ip}
    3f72:	08061818 	stmdaeq	r6, {r3, r4, fp, ip}
    3f76:	2014      	movs	r0, #20
    3f78:	e012      	b.n	3fa0 <NOROM_ChipInfo_GetHwRevision+0x64>
    3f7a:	2015      	movs	r0, #21
    3f7c:	e010      	b.n	3fa0 <NOROM_ChipInfo_GetHwRevision+0x64>
    3f7e:	f104 0016 	add.w	r0, r4, #22
    3f82:	e00a      	b.n	3f9a <NOROM_ChipInfo_GetHwRevision+0x5e>
    3f84:	b125      	cbz	r5, 3f90 <NOROM_ChipInfo_GetHwRevision+0x54>
    3f86:	2d02      	cmp	r5, #2
    3f88:	d109      	bne.n	3f9e <NOROM_ChipInfo_GetHwRevision+0x62>
    3f8a:	f104 0014 	add.w	r0, r4, #20
    3f8e:	e004      	b.n	3f9a <NOROM_ChipInfo_GetHwRevision+0x5e>
    3f90:	200a      	movs	r0, #10
    3f92:	e005      	b.n	3fa0 <NOROM_ChipInfo_GetHwRevision+0x64>
    3f94:	b91d      	cbnz	r5, 3f9e <NOROM_ChipInfo_GetHwRevision+0x62>
    3f96:	f104 000a 	add.w	r0, r4, #10
    3f9a:	b2c0      	uxtb	r0, r0
    3f9c:	e000      	b.n	3fa0 <NOROM_ChipInfo_GetHwRevision+0x64>
    3f9e:	20ff      	movs	r0, #255	; 0xff
    3fa0:	b240      	sxtb	r0, r0
    3fa2:	bd38      	pop	{r3, r4, r5, pc}
    3fa4:	50001318 	andpl	r1, r0, r8, lsl r3

00003fa8 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>:
    3fa8:	b508      	push	{r3, lr}
    3faa:	f7ff ffa1 	bl	3ef0 <NOROM_ChipInfo_GetChipFamily>
    3fae:	2801      	cmp	r0, #1
    3fb0:	d103      	bne.n	3fba <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    3fb2:	f7ff ffc3 	bl	3f3c <NOROM_ChipInfo_GetHwRevision>
    3fb6:	2813      	cmp	r0, #19
    3fb8:	dc00      	bgt.n	3fbc <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x14>
    3fba:	e7fe      	b.n	3fba <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    3fbc:	bd08      	pop	{r3, pc}
	...

00003fc0 <AuxAdiDdiSafeWrite.constprop.1>:
    3fc0:	b538      	push	{r3, r4, r5, lr}
    3fc2:	4604      	mov	r4, r0
    3fc4:	460d      	mov	r5, r1
    3fc6:	f7ff f871 	bl	30ac <NOROM_CPUcpsid>
    3fca:	4b06      	ldr	r3, [pc, #24]	; (3fe4 <AuxAdiDdiSafeWrite.constprop.1+0x24>)
    3fcc:	681a      	ldr	r2, [r3, #0]
    3fce:	2a00      	cmp	r2, #0
    3fd0:	d0fb      	beq.n	3fca <AuxAdiDdiSafeWrite.constprop.1+0xa>
    3fd2:	2201      	movs	r2, #1
    3fd4:	6025      	str	r5, [r4, #0]
    3fd6:	601a      	str	r2, [r3, #0]
    3fd8:	b918      	cbnz	r0, 3fe2 <AuxAdiDdiSafeWrite.constprop.1+0x22>
    3fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3fde:	f7ff b869 	b.w	30b4 <NOROM_CPUcpsie>
    3fe2:	bd38      	pop	{r3, r4, r5, pc}
    3fe4:	400c8000 	andmi	r8, ip, r0

00003fe8 <NOROM_DDI32RegWrite>:
    3fe8:	4408      	add	r0, r1
    3fea:	4611      	mov	r1, r2
    3fec:	f7ff bfe8 	b.w	3fc0 <AuxAdiDdiSafeWrite.constprop.1>

00003ff0 <memcpy>:
    3ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ff2:	46c6      	mov	lr, r8
    3ff4:	b500      	push	{lr}
    3ff6:	2a0f      	cmp	r2, #15
    3ff8:	d943      	bls.n	4082 <memcpy+0x92>
    3ffa:	2703      	movs	r7, #3
    3ffc:	000d      	movs	r5, r1
    3ffe:	003e      	movs	r6, r7
    4000:	4305      	orrs	r5, r0
    4002:	000c      	movs	r4, r1
    4004:	0003      	movs	r3, r0
    4006:	402e      	ands	r6, r5
    4008:	422f      	tst	r7, r5
    400a:	d13f      	bne.n	408c <memcpy+0x9c>
    400c:	0015      	movs	r5, r2
    400e:	3d10      	subs	r5, #16
    4010:	092d      	lsrs	r5, r5, #4
    4012:	46a8      	mov	r8, r5
    4014:	012d      	lsls	r5, r5, #4
    4016:	46ac      	mov	ip, r5
    4018:	4484      	add	ip, r0
    401a:	6827      	ldr	r7, [r4, #0]
    401c:	601f      	str	r7, [r3, #0]
    401e:	6867      	ldr	r7, [r4, #4]
    4020:	605f      	str	r7, [r3, #4]
    4022:	68a7      	ldr	r7, [r4, #8]
    4024:	609f      	str	r7, [r3, #8]
    4026:	68e7      	ldr	r7, [r4, #12]
    4028:	001d      	movs	r5, r3
    402a:	60df      	str	r7, [r3, #12]
    402c:	3410      	adds	r4, #16
    402e:	3310      	adds	r3, #16
    4030:	4565      	cmp	r5, ip
    4032:	d1f2      	bne.n	401a <memcpy+0x2a>
    4034:	4645      	mov	r5, r8
    4036:	230f      	movs	r3, #15
    4038:	240c      	movs	r4, #12
    403a:	3501      	adds	r5, #1
    403c:	012d      	lsls	r5, r5, #4
    403e:	1949      	adds	r1, r1, r5
    4040:	4013      	ands	r3, r2
    4042:	1945      	adds	r5, r0, r5
    4044:	4214      	tst	r4, r2
    4046:	d024      	beq.n	4092 <memcpy+0xa2>
    4048:	598c      	ldr	r4, [r1, r6]
    404a:	51ac      	str	r4, [r5, r6]
    404c:	3604      	adds	r6, #4
    404e:	1b9c      	subs	r4, r3, r6
    4050:	2c03      	cmp	r4, #3
    4052:	d8f9      	bhi.n	4048 <memcpy+0x58>
    4054:	3b04      	subs	r3, #4
    4056:	089b      	lsrs	r3, r3, #2
    4058:	3301      	adds	r3, #1
    405a:	009b      	lsls	r3, r3, #2
    405c:	18ed      	adds	r5, r5, r3
    405e:	18c9      	adds	r1, r1, r3
    4060:	2303      	movs	r3, #3
    4062:	401a      	ands	r2, r3
    4064:	1e56      	subs	r6, r2, #1
    4066:	2a00      	cmp	r2, #0
    4068:	d006      	beq.n	4078 <memcpy+0x88>
    406a:	2300      	movs	r3, #0
    406c:	5ccc      	ldrb	r4, [r1, r3]
    406e:	001a      	movs	r2, r3
    4070:	54ec      	strb	r4, [r5, r3]
    4072:	3301      	adds	r3, #1
    4074:	4296      	cmp	r6, r2
    4076:	d1f9      	bne.n	406c <memcpy+0x7c>
    4078:	bc80      	pop	{r7}
    407a:	46b8      	mov	r8, r7
    407c:	bcf0      	pop	{r4, r5, r6, r7}
    407e:	bc02      	pop	{r1}
    4080:	4708      	bx	r1
    4082:	0005      	movs	r5, r0
    4084:	1e56      	subs	r6, r2, #1
    4086:	2a00      	cmp	r2, #0
    4088:	d1ef      	bne.n	406a <memcpy+0x7a>
    408a:	e7f5      	b.n	4078 <memcpy+0x88>
    408c:	0005      	movs	r5, r0
    408e:	1e56      	subs	r6, r2, #1
    4090:	e7eb      	b.n	406a <memcpy+0x7a>
    4092:	001a      	movs	r2, r3
    4094:	e7f6      	b.n	4084 <memcpy+0x94>
    4096:	46c0      	nop			; (mov r8, r8)

00004098 <memset>:
    4098:	b5f0      	push	{r4, r5, r6, r7, lr}
    409a:	0005      	movs	r5, r0
    409c:	0783      	lsls	r3, r0, #30
    409e:	d04d      	beq.n	413c <memset+0xa4>
    40a0:	1e54      	subs	r4, r2, #1
    40a2:	2a00      	cmp	r2, #0
    40a4:	d047      	beq.n	4136 <memset+0x9e>
    40a6:	060a      	lsls	r2, r1, #24
    40a8:	0003      	movs	r3, r0
    40aa:	2603      	movs	r6, #3
    40ac:	0e12      	lsrs	r2, r2, #24
    40ae:	e002      	b.n	40b6 <memset+0x1e>
    40b0:	3501      	adds	r5, #1
    40b2:	3c01      	subs	r4, #1
    40b4:	d33f      	bcc.n	4136 <memset+0x9e>
    40b6:	3301      	adds	r3, #1
    40b8:	702a      	strb	r2, [r5, #0]
    40ba:	4233      	tst	r3, r6
    40bc:	d1f8      	bne.n	40b0 <memset+0x18>
    40be:	2c03      	cmp	r4, #3
    40c0:	d930      	bls.n	4124 <memset+0x8c>
    40c2:	22ff      	movs	r2, #255	; 0xff
    40c4:	400a      	ands	r2, r1
    40c6:	0215      	lsls	r5, r2, #8
    40c8:	4315      	orrs	r5, r2
    40ca:	042a      	lsls	r2, r5, #16
    40cc:	4315      	orrs	r5, r2
    40ce:	2c0f      	cmp	r4, #15
    40d0:	d937      	bls.n	4142 <memset+0xaa>
    40d2:	0027      	movs	r7, r4
    40d4:	3f10      	subs	r7, #16
    40d6:	093f      	lsrs	r7, r7, #4
    40d8:	013e      	lsls	r6, r7, #4
    40da:	46b4      	mov	ip, r6
    40dc:	001e      	movs	r6, r3
    40de:	001a      	movs	r2, r3
    40e0:	3610      	adds	r6, #16
    40e2:	4466      	add	r6, ip
    40e4:	6015      	str	r5, [r2, #0]
    40e6:	6055      	str	r5, [r2, #4]
    40e8:	6095      	str	r5, [r2, #8]
    40ea:	60d5      	str	r5, [r2, #12]
    40ec:	3210      	adds	r2, #16
    40ee:	42b2      	cmp	r2, r6
    40f0:	d1f8      	bne.n	40e4 <memset+0x4c>
    40f2:	3701      	adds	r7, #1
    40f4:	013f      	lsls	r7, r7, #4
    40f6:	19db      	adds	r3, r3, r7
    40f8:	270f      	movs	r7, #15
    40fa:	220c      	movs	r2, #12
    40fc:	4027      	ands	r7, r4
    40fe:	4022      	ands	r2, r4
    4100:	003c      	movs	r4, r7
    4102:	2a00      	cmp	r2, #0
    4104:	d00e      	beq.n	4124 <memset+0x8c>
    4106:	1f3e      	subs	r6, r7, #4
    4108:	08b6      	lsrs	r6, r6, #2
    410a:	00b4      	lsls	r4, r6, #2
    410c:	46a4      	mov	ip, r4
    410e:	001a      	movs	r2, r3
    4110:	1d1c      	adds	r4, r3, #4
    4112:	4464      	add	r4, ip
    4114:	c220      	stmia	r2!, {r5}
    4116:	42a2      	cmp	r2, r4
    4118:	d1fc      	bne.n	4114 <memset+0x7c>
    411a:	2403      	movs	r4, #3
    411c:	3601      	adds	r6, #1
    411e:	00b6      	lsls	r6, r6, #2
    4120:	199b      	adds	r3, r3, r6
    4122:	403c      	ands	r4, r7
    4124:	2c00      	cmp	r4, #0
    4126:	d006      	beq.n	4136 <memset+0x9e>
    4128:	0609      	lsls	r1, r1, #24
    412a:	0e09      	lsrs	r1, r1, #24
    412c:	191c      	adds	r4, r3, r4
    412e:	7019      	strb	r1, [r3, #0]
    4130:	3301      	adds	r3, #1
    4132:	429c      	cmp	r4, r3
    4134:	d1fb      	bne.n	412e <memset+0x96>
    4136:	bcf0      	pop	{r4, r5, r6, r7}
    4138:	bc02      	pop	{r1}
    413a:	4708      	bx	r1
    413c:	0003      	movs	r3, r0
    413e:	0014      	movs	r4, r2
    4140:	e7bd      	b.n	40be <memset+0x26>
    4142:	0027      	movs	r7, r4
    4144:	e7df      	b.n	4106 <memset+0x6e>
    4146:	46c0      	nop			; (mov r8, r8)

00004148 <toupper>:
    4148:	4b03      	ldr	r3, [pc, #12]	; (4158 <toupper+0x10>)
    414a:	5c1a      	ldrb	r2, [r3, r0]
    414c:	2303      	movs	r3, #3
    414e:	4013      	ands	r3, r2
    4150:	2b02      	cmp	r3, #2
    4152:	d100      	bne.n	4156 <toupper+0xe>
    4154:	3820      	subs	r0, #32
    4156:	4770      	bx	lr
    4158:	00004e2d 	andeq	r4, r0, sp, lsr #28
    415c:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
    4160:	20656761 	rsbcs	r6, r5, r1, ror #14
    4164:	6f724200 	svcvs	0x00724200
    4168:	61636461 	cmnvs	r3, r1, ror #8
    416c:	00207473 	eoreq	r7, r0, r3, ror r4
    4170:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
    4174:	20656761 	rsbcs	r6, r5, r1, ror #14
    4178:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 3fe8 <NOROM_DDI32RegWrite>
    417c:	646f6e20 	strbtvs	r6, [pc], #-3616	; 4184 <toupper+0x3c>
    4180:	64252065 	strtvs	r2, [r5], #-101	; 0xffffff9b
    4184:	65532820 	ldrbvs	r2, [r3, #-2080]	; 0xfffff7e0
    4188:	64252071 	strtvs	r2, [r5], #-113	; 0xffffff8f
    418c:	25203a29 	strcs	r3, [r0, #-2601]!	; 0xfffff5d7
    4190:	000d0a73 	andeq	r0, sp, r3, ror sl
    4194:	654d0d0a 	strbvs	r0, [sp, #-3338]	; 0xfffff2f6
    4198:	67617373 			; <UNDEFINED> instruction: 0x67617373
    419c:	65532065 	ldrbvs	r2, [r3, #-101]	; 0xffffff9b
    41a0:	0d0a746e 	cfstrseq	mvf7, [sl, #-440]	; 0xfffffe48
    41a4:	616e7500 	cmnvs	lr, r0, lsl #10
    41a8:	20656c62 	rsbcs	r6, r5, r2, ror #24
    41ac:	6f206f74 	svcvs	0x00206f74
    41b0:	206e6570 	rsbcs	r6, lr, r0, ror r5
    41b4:	20564354 	subscs	r4, r6, r4, asr r3
    41b8:	73736573 	cmnvc	r3, #482344960	; 0x1cc00000
    41bc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    41c0:	73206f6e 			; <UNDEFINED> instruction: 0x73206f6e
    41c4:	69737365 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
    41c8:	0a006e6f 	beq	1fb8c <_etext+0x1ac5f>
    41cc:	5032500d 	eorspl	r5, r2, sp
    41d0:	61684320 	cmnvs	r8, r0, lsr #6
    41d4:	4e282074 	mcrmi	0, 1, r2, cr8, cr4, {3}
    41d8:	2065646f 	rsbcs	r6, r5, pc, ror #8
    41dc:	29642523 	stmdbcs	r4!, {r0, r1, r5, r8, sl, sp}^
    41e0:	43280d0a 			; <UNDEFINED> instruction: 0x43280d0a
    41e4:	6e616829 	cdpvs	8, 6, cr6, cr1, cr9, {1}
    41e8:	6e206567 	cfsh64vs	mvdx6, mvdx0, #55
    41ec:	2065646f 	rsbcs	r6, r5, pc, ror #8
    41f0:	0d0a4449 	cfstrseq	mvf4, [sl, #-292]	; 0xfffffedc
    41f4:	69294428 	stmdbvs	r9!, {r3, r5, sl, lr}
    41f8:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
    41fc:	61727420 	cmnvs	r2, r0, lsr #8
    4200:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    4204:	6f697373 	svcvs	0x00697373
    4208:	280d0a6e 	stmdacs	sp, {r1, r2, r3, r5, r6, r9, fp}
    420c:	6f722942 	svcvs	0x00722942
    4210:	61636461 	cmnvs	r3, r1, ror #8
    4214:	74207473 	strtvc	r7, [r0], #-1139	; 0xfffffb8d
    4218:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    421c:	7373696d 	cmnvc	r3, #1785856	; 0x1b4000
    4220:	0a6e6f69 	beq	1b9ffcc <__ccfg+0x1b80024>
    4224:	6c65530d 	stclvs	3, cr5, [r5], #-52	; 0xffffffcc
    4228:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    422c:	203a6e6f 	eorscs	r6, sl, pc, ror #28
    4230:	00632500 	rsbeq	r2, r3, r0, lsl #10
    4234:	6e490d0a 	cdpvs	13, 4, cr0, cr9, cr10, {0}
    4238:	72726f63 	rsbsvc	r6, r2, #396	; 0x18c
    423c:	20746365 	rsbscs	r6, r4, r5, ror #6
    4240:	6974704f 	ldmdbvs	r4!, {r0, r1, r2, r3, r6, ip, sp, lr}^
    4244:	002e6e6f 	eoreq	r6, lr, pc, ror #28
    4248:	654e0d0a 	strbvs	r0, [lr, #-3338]	; 0xfffff2f6
    424c:	6f6e2077 	svcvs	0x006e2077
    4250:	49206564 	stmdbmi	r0!, {r2, r5, r6, r8, sl, sp, lr}
    4254:	31282044 			; <UNDEFINED> instruction: 0x31282044
    4258:	2935322d 	ldmdbcs	r5!, {r0, r2, r3, r5, r9, ip, sp}
    425c:	0d0a003a 	stceq	0, cr0, [sl, #-232]	; 0xffffff18
    4260:	61766e49 	cmnvs	r6, r9, asr #28
    4264:	2064696c 	rsbcs	r6, r4, ip, ror #18
    4268:	0a004449 	beq	15394 <_etext+0x10467>
    426c:	6365520d 	cmnvs	r5, #-805306368	; 0xd0000000
    4270:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
    4274:	6f6e2072 	svcvs	0x006e2072
    4278:	49206564 	stmdbmi	r0!, {r2, r5, r6, r8, sl, sp, lr}
    427c:	31282044 			; <UNDEFINED> instruction: 0x31282044
    4280:	2935322d 	ldmdbcs	r5!, {r0, r2, r3, r5, r9, ip, sp}
    4284:	0d0a003a 	stceq	0, cr0, [sl, #-232]	; 0xffffff18
    4288:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
    428c:	3a656761 	bcc	195e018 <__ccfg+0x193e070>
    4290:	59530020 	ldmdbpl	r3, {r5}^
    4294:	52524553 	subspl	r4, r2, #348127232	; 0x14c00000
    4298:	7825203a 	stmdavc	r5!, {r1, r3, r4, r5, sp}
    429c:	7325202c 			; <UNDEFINED> instruction: 0x7325202c
    42a0:	72617500 	rsbvc	r7, r1, #0, 10
    42a4:	69617500 	stmdbvs	r1!, {r8, sl, ip, sp, lr}^
    42a8:	63695000 	cmnvs	r9, #0
    42ac:	7620534f 	strtvc	r5, [r0], -pc, asr #6
    42b0:	2f342e35 	svccs	0x00342e35
    42b4:	38314750 	ldmdacc	r1!, {r4, r6, r8, r9, sl, lr}
    42b8:	32323230 	eorscc	r3, r2, #48, 4
    42bc:	43432d41 	movtmi	r2, #15681	; 0x3d41
    42c0:	30353331 	eorscc	r3, r5, r1, lsr r3
    42c4:	55414c5f 	strbpl	r4, [r1, #-3167]	; 0xfffff3a1
    42c8:	5848434e 	stmdapl	r8, {r1, r2, r3, r6, r8, r9, lr}^
    42cc:	28202c4c 	stmdacs	r0!, {r2, r3, r6, sl, fp, sp}
    42d0:	4f202943 	svcmi	0x00202943
    42d4:	6e6f736c 	cdpvs	3, 6, cr7, cr15, cr12, {3}
    42d8:	43207465 			; <UNDEFINED> instruction: 0x43207465
    42dc:	756d6d6f 	strbvc	r6, [sp, #-3439]!	; 0xfffff291
    42e0:	6163696e 	cmnvs	r3, lr, ror #18
    42e4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    42e8:	32202c73 	eorcc	r2, r0, #29440	; 0x7300
    42ec:	2d323030 	ldccs	0, cr3, [r2, #-192]!	; 0xffffff40
    42f0:	38313032 	ldmdacc	r1!, {r1, r4, r5, ip, sp}
    42f4:	66654c00 	strbtvs	r4, [r5], -r0, lsl #24
    42f8:	65766f74 	ldrbvs	r6, [r6, #-3956]!	; 0xfffff08c
    42fc:	41522072 	cmpmi	r2, r2, ror r0
    4300:	25203a4d 	strcs	r3, [r0, #-2637]!	; 0xfffff5b3
    4304:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
    4308:	00736574 	rsbseq	r6, r3, r4, ror r5
    430c:	00007473 	andeq	r7, r0, r3, ror r4

00004310 <port_confs>:
    4310:	00306080 	eorseq	r6, r0, r0, lsl #1
    4314:	00386080 	eorseq	r6, r8, r0, lsl #1
    4318:	00186010 	andseq	r6, r8, r0, lsl r0
    431c:	2010400f 	andscs	r4, r0, pc
    4320:	30694000 	rsbcc	r4, r9, r0
    4324:	30714000 	rsbscc	r4, r1, r0
    4328:	00b86008 	adcseq	r6, r8, r8
    432c:	60c94000 	sbcvs	r4, r9, r0
    4330:	60d14000 	sbcsvs	r4, r1, r0
    4334:	60d94000 	sbcsvs	r4, r9, r0
    4338:	60e14000 	rscvs	r4, r1, r0
    433c:	00096380 	andeq	r6, r9, r0, lsl #7
    4340:	00f16b80 	rscseq	r6, r1, r0, lsl #23
    4344:	20402000 	subcs	r2, r0, r0
    4348:	00486080 	subeq	r6, r8, r0, lsl #1
    434c:	00506080 	subseq	r6, r0, r0, lsl #1
    4350:	00a06000 	adceq	r6, r0, r0
    4354:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    4358:	74750065 	ldrbtvc	r0, [r5], #-101	; 0xffffff9b
    435c:	73006120 	movwvc	r6, #288	; 0x120
    4360:	64610077 	strbtvs	r0, [r1], #-119	; 0xffffff89
    4364:	69007664 	stmdbvs	r0, {r2, r5, r6, r9, sl, ip, sp, lr}
    4368:	616d006f 	cmnvs	sp, pc, rrx
    436c:	6d00316c 	stfvss	f3, [r0, #-432]	; 0xfffffe50
    4370:	00676c61 	rsbeq	r6, r7, r1, ror #24
    4374:	0069706b 	rsbeq	r7, r9, fp, rrx
    4378:	636c616d 	cmnvs	ip, #1073741851	; 0x4000001b
	...

0000437d <__pi_hex_enc_table>:
    437d:	33323130 	teqcc	r2, #48, 2
    4381:	37363534 			; <UNDEFINED> instruction: 0x37363534
    4385:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
    4389:	46454443 	strbmi	r4, [r5], -r3, asr #8
    438d:	30766374 	rsbscc	r6, r6, r4, ror r3
    4391:	69640031 	stmdbvs	r4!, {r0, r4, r5}^
    4395:	736f7073 	cmnvc	pc, #115	; 0x73
    4399:	65732065 	ldrbvs	r2, [r3, #-101]!	; 0xffffff9b
    439d:	69640073 	stmdbvs	r4!, {r0, r1, r4, r5, r6}^
    43a1:	736f7073 	cmnvc	pc, #115	; 0x73
    43a5:	68702065 	ldmdavs	r0!, {r0, r2, r5, r6, sp}^
    43a9:	63740079 	cmnvs	r4, #121	; 0x79
    43ad:	00323076 	eorseq	r3, r2, r6, ror r0
    43b1:	30766374 	rsbscc	r6, r6, r4, ror r3
    43b5:	63740033 	cmnvs	r4, #51	; 0x33
    43b9:	00343076 	eorseq	r3, r4, r6, ror r0
    43bd:	30766374 	rsbscc	r6, r6, r4, ror r3
    43c1:	63740035 	cmnvs	r4, #53	; 0x35
    43c5:	00363076 	eorseq	r3, r6, r6, ror r0
    43c9:	31766374 	cmncc	r6, r4, ror r3
    43cd:	63740030 	cmnvs	r4, #48	; 0x30
    43d1:	00313176 	eorseq	r3, r1, r6, ror r1
    43d5:	31766374 	cmncc	r6, r4, ror r3
    43d9:	63740036 	cmnvs	r4, #54	; 0x36
    43dd:	00373176 	eorseq	r3, r7, r6, ror r1
    43e1:	31766374 	cmncc	r6, r4, ror r3
    43e5:	63740038 	cmnvs	r4, #56	; 0x38
    43e9:	00333276 	eorseq	r3, r3, r6, ror r2
    43ed:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    43f1:	63740032 	cmnvs	r4, #50	; 0x32
    43f5:	00363276 	eorseq	r3, r6, r6, ror r2
    43f9:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    43fd:	63740037 	cmnvs	r4, #55	; 0x37
    4401:	00383276 	eorseq	r3, r8, r6, ror r2
    4405:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    4409:	63740039 	cmnvs	r4, #57	; 0x39
    440d:	00303376 	eorseq	r3, r0, r6, ror r3
    4411:	33766374 	cmncc	r6, #116, 6	; 0xd0000001
    4415:	63740031 	cmnvs	r4, #49	; 0x31
    4419:	00323376 	eorseq	r3, r2, r6, ror r3
    441d:	33766374 	cmncc	r6, #116, 6	; 0xd0000001
    4421:	63740033 	cmnvs	r4, #51	; 0x33
    4425:	00343376 	eorseq	r3, r4, r6, ror r3

00004429 <__input_pins>:
    4429:	9c9b9a99 	vldmials	fp, {s18-s170}
	...

0000442e <__button_list>:
    442e:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
    4432:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    4436:	00706f20 	rsbseq	r6, r0, r0, lsr #30
    443a:	00317472 	eorseq	r7, r1, r2, ror r4
    443e:	20505548 	subscs	r5, r0, r8, asr #10
    4442:	20786c25 	rsbscs	r6, r8, r5, lsr #24
    4446:	00786c25 	rsbseq	r6, r8, r5, lsr #24
    444a:	676e6168 	strbvs	r6, [lr, -r8, ror #2]!
    444e:	30636920 	rsbcc	r6, r3, r0, lsr #18
    4452:	50554800 	subspl	r4, r5, r0, lsl #16
    4456:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    445a:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    445e:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    4462:	32747200 	rsbscc	r7, r4, #0, 4
    4466:	44414200 	strbmi	r4, [r1], #-512	; 0xfffffe00
    446a:	00585220 	subseq	r5, r8, r0, lsr #4
    446e:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    4472:	00797020 	rsbseq	r7, r9, r0, lsr #32
    4476:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    447a:	31636300 	cmncc	r3, r0, lsl #6
    447e:	626d2033 	rsbvs	r2, sp, #51	; 0x33
    4482:	31434300 	mrscc	r4, (UNDEF: 115)
    4486:	3a303533 	bcc	c1195a <__ccfg+0xbf19b2>
    448a:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    448e:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    4492:	00642520 	rsbeq	r2, r4, r0, lsr #10

00004496 <patable>:
    4496:	12c304c0 	sbcne	r0, r3, #192, 8	; 0xc0000000
    449a:	184418c5 	stmdane	r4, {r0, r2, r6, r7, fp, ip}^
    449e:	32ce24c9 	sbccc	r2, lr, #-922746880	; 0xc9000000
    44a2:	bc2b58d8 	stclt	8, cr5, [fp], #-864	; 0xfffffca0
	...

000044a8 <patchGenfskRfe>:
    44a8:	000061a3 	andeq	r6, r0, r3, lsr #3
    44ac:	1307147f 	movwne	r1, #29823	; 0x747f
    44b0:	24f1004d 	ldrbtcs	r0, [r1], #77	; 0x4d
    44b4:	3f131f2e 	svccc	0x00131f2e
    44b8:	003f0ab0 	ldrhteq	r0, [pc], -r0
    44bc:	0000ff07 	andeq	pc, r0, r7, lsl #30
    44c0:	40004030 	andmi	r4, r0, r0, lsr r0
    44c4:	40034001 	andmi	r4, r3, r1
    44c8:	400f4007 	andmi	r4, pc, r7
    44cc:	40cf404f 	sbcmi	r4, pc, pc, asr #32
    44d0:	43cf41cf 	bicmi	r4, pc, #-1073741773	; 0xc0000033
    44d4:	4fcf47cf 	svcmi	0x00cf47cf
    44d8:	2fcf3fcf 	svccs	0x00cf3fcf
    44dc:	0fcf1fcf 	svceq	0x00cf1fcf
    44e0:	00000000 	andeq	r0, r0, r0
    44e4:	0008000f 	andeq	r0, r8, pc
    44e8:	003f0000 	eorseq	r0, pc, r0
    44ec:	00400000 	subeq	r0, r0, r0
    44f0:	0000003f 	andeq	r0, r0, pc, lsr r0
    44f4:	00680004 	rsbeq	r0, r8, r4
    44f8:	00dc000e 	sbcseq	r0, ip, lr
    44fc:	00430006 	subeq	r0, r3, r6
    4500:	0005001a 	andeq	r0, r5, sl, lsl r0
    4504:	00000000 	andeq	r0, r0, r0
    4508:	00000002 	andeq	r0, r0, r2
    450c:	0000003f 	andeq	r0, r0, pc, lsr r0
    4510:	00040000 	andeq	r0, r4, r0
    4514:	000000c0 	andeq	r0, r0, r0, asr #1
    4518:	00c00004 	sbceq	r0, r0, r4
    451c:	00070000 	andeq	r0, r7, r0
    4520:	9100c050 	qaddls	ip, r0, r0
    4524:	c0707000 	rsbsgt	r7, r0, r0
    4528:	70009100 	andvc	r9, r0, r0, lsl #2
    452c:	00213182 	eoreq	r3, r1, r2, lsl #3
    4530:	b1109131 	tstlt	r0, r1, lsr r1
    4534:	81017000 	mrshi	r7, (UNDEF: 1)
    4538:	a100b101 	tstge	r0, r1, lsl #2
    453c:	91323182 	teqls	r2, r2, lsl #3
    4540:	9101b110 	tstls	r1, r0, lsl r1
    4544:	81411011 	cmphi	r1, r1, lsl r0
    4548:	404f2241 	submi	r2, pc, r1, asr #4
    454c:	700006f1 	strdvc	r0, [r0], -r1
    4550:	9101c051 	qaddls	ip, r1, r1
    4554:	39101830 	ldmdbcc	r0, {r4, r5, fp, ip}
    4558:	d0083183 	andle	r3, r8, r3, lsl #3
    455c:	6f413118 	svcvs	0x00413118
    4560:	91310031 	teqls	r1, r1, lsr r0
    4564:	1483b110 	strne	fp, [r3], #272	; 0x110
    4568:	685b1614 	ldmdavs	fp, {r2, r4, r9, sl, ip}^
    456c:	10257000 	eorne	r7, r5, r0
    4570:	9100c050 	qaddls	ip, r0, r0
    4574:	c0c0c3f4 	strdgt	ip, [r0], #52	; 0x34
    4578:	6f031420 	svcvs	0x00031420
    457c:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    4580:	3182c022 	orrcc	ip, r2, r2, lsr #32
    4584:	91310021 	teqls	r1, r1, lsr #32
    4588:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    458c:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    4590:	3182c082 	orrcc	ip, r2, r2, lsl #1
    4594:	91310021 	teqls	r1, r1, lsr #32
    4598:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    459c:	c0a21031 	adcgt	r1, r2, r1, lsr r0
    45a0:	00213182 	eoreq	r3, r1, r2, lsl #3
    45a4:	b1109131 	tstlt	r0, r1, lsr r1
    45a8:	31151050 	tstcc	r5, r0, asr r0
    45ac:	92051405 	andls	r1, r5, #83886080	; 0x5000000
    45b0:	643f7000 	ldrtvs	r7, [pc], #-0	; 45b8 <patchGenfskRfe+0x110>
    45b4:	1031c052 	eorsne	ip, r1, r2, asr r0
    45b8:	31610631 	cmncc	r1, r1, lsr r6
    45bc:	644202c1 	strbvs	r0, [r2], #-705	; 0xfffffd3f
    45c0:	1031c112 	eorsne	ip, r1, r2, lsl r1
    45c4:	06713921 	ldrbteq	r3, [r1], -r1, lsr #18
    45c8:	02e13151 	rsceq	r3, r1, #1073741844	; 0x40000014
    45cc:	70006442 	andvc	r6, r0, r2, asr #8
    45d0:	6599658a 	ldrvs	r6, [r9, #1418]	; 0x58a
    45d4:	8220c088 	eorhi	ip, r0, #136	; 0x88
    45d8:	39803950 	stmibcc	r0, {r4, r6, r8, fp, ip, sp}
    45dc:	409f1e00 	addsmi	r1, pc, r0, lsl #28
    45e0:	3001c041 	andcc	ip, r1, r1, asr #32
    45e4:	1a181418 	bne	60964c <__ccfg+0x5e96a4>
    45e8:	8230c089 	eorshi	ip, r0, #137	; 0x89
    45ec:	39803960 	stmibcc	r0, {r5, r6, r8, fp, ip, sp}
    45f0:	40a91e00 	adcmi	r1, r9, r0, lsl #28
    45f4:	3001c041 	andcc	ip, r1, r1, asr #32
    45f8:	1a191419 	bne	649664 <__ccfg+0x6296bc>
    45fc:	9136643c 	teqls	r6, ip, lsr r4
    4600:	9134b110 	teqls	r4, r0, lsl r1
    4604:	b054b110 	subslt	fp, r4, r0, lsl r1
    4608:	a0547100 	subsge	r7, r4, r0, lsl #2
    460c:	80f0b064 	rscshi	fp, r0, r4, rrx
    4610:	40af2200 	adcmi	r2, pc, r0, lsl #4
    4614:	90b01240 	adcsls	r1, r0, r0, asr #4
    4618:	8253b032 	subshi	fp, r3, #50	; 0x32
    461c:	39533953 	ldmdbcc	r3, {r0, r1, r4, r6, r8, fp, ip, sp}^
    4620:	643f6485 	ldrtvs	r6, [pc], #-1157	; 4628 <patchGenfskRfe+0x180>
    4624:	c122c111 			; <UNDEFINED> instruction: 0xc122c111
    4628:	c1706442 	cmngt	r0, r2, asr #8
    462c:	c11168c2 	tstgt	r1, r2, asr #17
    4630:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    4634:	68c7c170 	stmiavs	r7, {r4, r5, r6, r8, lr, pc}^
    4638:	9100c050 	qaddls	ip, r0, r0
    463c:	92987227 	addsls	r7, r8, #1879048194	; 0x70000002
    4640:	16141615 			; <UNDEFINED> instruction: 0x16141615
    4644:	10531042 	subsne	r1, r3, r2, asr #32
    4648:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    464c:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    4650:	31313981 	teqcc	r1, r1, lsl #19
    4654:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    4658:	72276572 	eorvc	r6, r7, #478150656	; 0x1c800000
    465c:	b2709299 	rsbslt	r9, r0, #-1879048183	; 0x90000009
    4660:	10731062 	rsbsne	r1, r3, r2, rrx
    4664:	8231c3f0 	eorshi	ip, r1, #240, 6	; 0xc0000003
    4668:	39213121 	stmdbcc	r1!, {r0, r5, r8, ip, sp}
    466c:	101b3981 	andsne	r3, fp, r1, lsl #19
    4670:	c0e26572 	rscgt	r6, r2, r2, ror r5
    4674:	82603182 	rsbhi	r3, r0, #-2147483616	; 0x80000020
    4678:	39803180 	stmibcc	r0, {r7, r8, ip, sp}
    467c:	b0610002 	rsblt	r0, r1, r2
    4680:	91327100 	teqls	r2, r0, lsl #2
    4684:	a051b110 	subsge	fp, r1, r0, lsl r1
    4688:	7227b061 	eorvc	fp, r7, #97	; 0x61
    468c:	68f3c230 	ldmvs	r3!, {r4, r5, r9, lr, pc}^
    4690:	12800000 	addne	r0, r0, #0
    4694:	b03290b0 	ldrhtlt	r9, [r2], -r0
    4698:	c0507000 	subsgt	r7, r0, r0
    469c:	72279100 	eorvc	r9, r7, #0, 2
    46a0:	10629299 	mlsne	r2, r9, r2, r9
    46a4:	c3f01073 	mvnsgt	r1, #115	; 0x73
    46a8:	31218231 			; <UNDEFINED> instruction: 0x31218231
    46ac:	39813921 	stmibcc	r1, {r0, r5, r8, fp, ip, sp}
    46b0:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    46b4:	7227657e 	eorvc	r6, r7, #528482304	; 0x1f800000
    46b8:	b2709298 	rsbslt	r9, r0, #152, 4	; 0x80000009
    46bc:	10531042 	subsne	r1, r3, r2, asr #32
    46c0:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    46c4:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    46c8:	31313981 	teqcc	r1, r1, lsl #19
    46cc:	657e101a 	ldrbvs	r1, [lr, #-26]!	; 0xffffffe6
    46d0:	b061a051 	rsblt	sl, r1, r1, asr r0
    46d4:	c0b07227 	adcsgt	r7, r0, r7, lsr #4
    46d8:	643f6918 	ldrtvs	r6, [pc], #-2328	; 46e0 <patchGenfskRfe+0x238>
    46dc:	c122c101 			; <UNDEFINED> instruction: 0xc122c101
    46e0:	c1016442 	tstgt	r1, r2, asr #8
    46e4:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    46e8:	643c1a15 	ldrtvs	r1, [ip], #-2581	; 0xfffff5eb
    46ec:	b1109135 	tstlt	r0, r5, lsr r1
    46f0:	64858253 	strvs	r8, [r5], #595	; 0x253
    46f4:	90b012c0 	adcsls	r1, r0, r0, asr #5
    46f8:	7000b032 	andvc	fp, r0, r2, lsr r0
    46fc:	c272643f 	rsbsgt	r6, r2, #1056964608	; 0x3f000000
    4700:	6442c081 	strbvs	ip, [r2], #-129	; 0xffffff7f
    4704:	c111c122 	tstgt	r1, r2, lsr #2
    4708:	c0026442 	andgt	r6, r2, r2, asr #8
    470c:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    4710:	c331c062 	teqgt	r1, #98	; 0x62
    4714:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    4718:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    471c:	c111c302 	tstgt	r1, r2, lsl #6
    4720:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    4724:	64853953 	strvs	r3, [r5], #2387	; 0x953
    4728:	6447c3e2 	strbvs	ip, [r7], #-994	; 0xfffffc1e
    472c:	41402211 	cmpmi	r0, r1, lsl r2
    4730:	c881c242 	stmgt	r1, {r1, r6, r9, lr, pc}
    4734:	c2526442 	subsgt	r6, r2, #1107296256	; 0x42000000
    4738:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    473c:	cee1c272 	mcrgt	2, 7, ip, cr1, cr2, {3}
    4740:	c2026442 	andgt	r6, r2, #1107296256	; 0x42000000
    4744:	6442c881 	strbvs	ip, [r2], #-2177	; 0xfffff77f
    4748:	c801c202 	stmdagt	r1, {r1, r9, lr, pc}
    474c:	c0b06442 	adcsgt	r6, r0, r2, asr #8
    4750:	70006954 	andvc	r6, r0, r4, asr r9
    4754:	c242643f 	subgt	r6, r2, #1056964608	; 0x3f000000
    4758:	6442c801 	strbvs	ip, [r2], #-2049	; 0xfffff7ff
    475c:	c011c252 	andsgt	ip, r1, r2, asr r2
    4760:	c2726442 	rsbsgt	r6, r2, #1107296256	; 0x42000000
    4764:	6442c0e1 	strbvs	ip, [r2], #-225	; 0xffffff1f
    4768:	c101c002 	tstgt	r1, r2
    476c:	c0626442 	rsbgt	r6, r2, r2, asr #8
    4770:	6442c301 	strbvs	ip, [r2], #-769	; 0xfffffcff
    4774:	c101c122 	tstgt	r1, r2, lsr #2
    4778:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    477c:	6442c101 	strbvs	ip, [r2], #-257	; 0xfffffeff
    4780:	c101c302 	tstgt	r1, r2, lsl #6
    4784:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    4788:	70006485 	andvc	r6, r0, r5, lsl #9
    478c:	7100b061 	tstvc	r0, r1, rrx
    4790:	1c231412 	cfstrsne	mvf1, [r3], #-72	; 0xffffffb8
    4794:	91334d7a 	teqls	r3, sl, ror sp
    4798:	7000b110 	andvc	fp, r0, r0, lsl r1
    479c:	b1109132 	tstlt	r0, r2, lsr r1
    47a0:	70006972 	andvc	r6, r0, r2, ror r9
    47a4:	7100b061 	tstvc	r0, r1, rrx
    47a8:	1c321813 	ldcne	8, cr1, [r2], #-76	; 0xffffffb4
    47ac:	91324986 	teqls	r2, r6, lsl #19
    47b0:	7000b110 	andvc	fp, r0, r0, lsl r1
    47b4:	b1109133 	tstlt	r0, r3, lsr r1
    47b8:	7000697e 	andvc	r6, r0, lr, ror r9
    47bc:	6447c0c2 	strbvs	ip, [r7], #-194	; 0xffffff3e
    47c0:	c0c21015 	sbcgt	r1, r2, r5, lsl r0
    47c4:	64471612 	strbvs	r1, [r7], #-1554	; 0xfffff9ee
    47c8:	14153141 	ldrne	r3, [r5], #-321	; 0xfffffebf
    47cc:	3180c0c0 	orrcc	ip, r0, r0, asr #1
    47d0:	10541405 	subsne	r1, r4, r5, lsl #8
    47d4:	040478a0 	streq	r7, [r4], #-2208	; 0xfffff760
    47d8:	c0e67000 	rscgt	r7, r6, r0
    47dc:	cc013186 	stfgts	f3, [r1], {134}	; 0x86
    47e0:	10671416 	rsbne	r1, r7, r6, lsl r4
    47e4:	c3f08261 	mvnsgt	r8, #268435462	; 0x10000006
    47e8:	14170401 	ldrne	r0, [r7], #-1025	; 0xfffffbff
    47ec:	73067000 	movwvc	r7, #24576	; 0x6000
    47f0:	720b7205 	andvc	r7, fp, #1342177280	; 0x50000000
    47f4:	b050720e 	subslt	r7, r0, lr, lsl #4
    47f8:	80817100 	addhi	r7, r1, r0, lsl #2
    47fc:	a050b060 	subsge	fp, r0, r0, rrx
    4800:	22418092 	subcs	r8, r1, #146	; 0x92
    4804:	808045c3 	addhi	r4, r0, r3, asr #11
    4808:	0410c1f1 	ldreq	ip, [r0], #-497	; 0xfffffe0f
    480c:	11011630 	tstne	r1, r0, lsr r6
    4810:	6c011401 	cfstrsvs	mvf1, [r1], {1}
    4814:	61d761d6 	ldrsbvs	r6, [r7, #22]
    4818:	61d961d8 	ldrsbvs	r6, [r9, #24]
    481c:	61db61da 	ldrsbvs	r6, [fp, #26]
    4820:	61de61dc 	ldrsbvs	r6, [lr, #28]
    4824:	61e261e0 	mvnvs	r6, r0, ror #3
    4828:	633661e4 	teqvs	r6, #228, 2	; 0x39
    482c:	80916339 	addshi	r6, r1, r9, lsr r3
    4830:	0421c0f2 	strteq	ip, [r1], #-242	; 0xffffff0e
    4834:	80823121 	addhi	r3, r2, r1, lsr #2
    4838:	14122a42 	ldrne	r2, [r2], #-2626	; 0xfffff5be
    483c:	11011632 	tstne	r1, r2, lsr r6
    4840:	6c011421 	cfstrsvs	mvf1, [r1], {33}	; 0x21
    4844:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    4848:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    484c:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    4850:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    4854:	61e661e6 	mvnvs	r6, r6, ror #3
    4858:	61e661e6 	mvnvs	r6, r6, ror #3
    485c:	61e661e6 	mvnvs	r6, r6, ror #3
    4860:	61e66494 			; <UNDEFINED> instruction: 0x61e66494
    4864:	61e664f9 	strdvs	r6, [r6, #73]!	; 0x49
    4868:	61e6652a 	mvnvs	r6, sl, lsr #10
    486c:	61e66556 	mvnvs	r6, r6, asr r5
    4870:	61e66746 	mvnvs	r6, r6, asr #14
    4874:	90b01210 	adcsls	r1, r0, r0, lsl r2
    4878:	7306720e 	movwvc	r7, #25102	; 0x620e
    487c:	12107205 	andsne	r7, r0, #1342177280	; 0x50000000
    4880:	61a79030 			; <UNDEFINED> instruction: 0x61a79030
    4884:	673ccff0 			; <UNDEFINED> instruction: 0x673ccff0
    4888:	c003c1d4 	ldrdgt	ip, [r3], -r4
    488c:	6454c3c0 	ldrbvs	ip, [r4], #-960	; 0xfffffc40
    4890:	91507840 	cmpls	r0, r0, asr #16
    4894:	92107850 	andsls	r7, r0, #80, 16	; 0x500000
    4898:	92207860 	eorls	r7, r0, #96, 16	; 0x600000
    489c:	92307870 	eorsls	r7, r0, #112, 16	; 0x700000
    48a0:	92407880 	subls	r7, r0, #128, 16	; 0x800000
    48a4:	92607890 	rsbls	r7, r0, #144, 16	; 0x900000
    48a8:	91907830 	orrsls	r7, r0, r0, lsr r8
    48ac:	39408210 	stmdbcc	r0, {r4, r9, pc}^
    48b0:	100106f0 	strdne	r0, [r1], -r0	; <UNPREDICTABLE>
    48b4:	14103110 	ldrne	r3, [r0], #-272	; 0xfffffef0
    48b8:	67429200 	strbvs	r9, [r2, -r0, lsl #4]
    48bc:	a0bc61e6 	adcsge	r6, ip, r6, ror #3
    48c0:	a054a0e2 	subsge	sl, r4, r2, ror #1
    48c4:	225080f0 	subscs	r8, r0, #240	; 0xf0
    48c8:	80404615 	subhi	r4, r0, r5, lsl r6
    48cc:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    48d0:	a040620d 	subge	r6, r0, sp, lsl #4
    48d4:	318d822d 	orrcc	r8, sp, sp, lsr #4
    48d8:	8210398d 	andshi	r3, r0, #2310144	; 0x234000
    48dc:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    48e0:	821a1009 	andshi	r1, sl, #9
    48e4:	041a394a 	ldreq	r3, [sl], #-2378	; 0xfffff6b6
    48e8:	39808210 	stmibcc	r0, {r4, r9, pc}
    48ec:	100e0410 	andne	r0, lr, r0, lsl r4
    48f0:	10bc10ab 	adcsne	r1, ip, fp, lsr #1
    48f4:	646310c2 	strbtvs	r1, [r3], #-194	; 0xffffff3e
    48f8:	cfe07229 	svcgt	0x00e07229
    48fc:	b013673c 	andslt	r6, r3, ip, lsr r7
    4900:	66c8b003 	strbvs	fp, [r8], r3
    4904:	b050b053 	subslt	fp, r0, r3, asr r0
    4908:	b064b054 	rsblt	fp, r4, r4, asr r0
    490c:	66a5b013 	ssatvs	fp, #6, r3
    4910:	22e08210 	rsccs	r8, r0, #16, 4
    4914:	66ae4638 			; <UNDEFINED> instruction: 0x66ae4638
    4918:	80417100 	subhi	r7, r1, r0, lsl #2
    491c:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    4920:	221080f0 	andscs	r8, r0, #240	; 0xf0
    4924:	22f0464b 	rscscs	r4, r0, #78643200	; 0x4b00000
    4928:	b0644718 	rsblt	r4, r4, r8, lsl r7
    492c:	42382231 	eorsmi	r2, r8, #268435459	; 0x10000003
    4930:	66ceb063 	strbvs	fp, [lr], r3, rrx
    4934:	22e08210 	rsccs	r8, r0, #16, 4
    4938:	66704638 			; <UNDEFINED> instruction: 0x66704638
    493c:	b0646238 	rsblt	r6, r4, r8, lsr r2
    4940:	318f816f 	orrcc	r8, pc, pc, ror #2
    4944:	dfd03d8f 	svcle	0x00d03d8f
    4948:	673c92ff 			; <UNDEFINED> instruction: 0x673c92ff
    494c:	80417100 	subhi	r7, r1, r0, lsl #2
    4950:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    4954:	80f0b064 	rscshi	fp, r0, r4, rrx
    4958:	42652250 	rsbmi	r2, r5, #80, 4
    495c:	8211b063 	andshi	fp, r1, #99	; 0x63
    4960:	466022c1 	strbtmi	r2, [r0], -r1, asr #5
    4964:	670566ce 	strvs	r6, [r5, -lr, asr #13]
    4968:	22d18211 	sbcscs	r8, r1, #268435457	; 0x10000001
    496c:	66704652 			; <UNDEFINED> instruction: 0x66704652
    4970:	81616252 	cmnhi	r1, r2, asr r2
    4974:	31818172 	orrcc	r8, r1, r2, ror r1
    4978:	31823d81 	orrcc	r3, r2, r1, lsl #27
    497c:	efc03d82 	svc	0x00c03d82
    4980:	930292f1 	movwls	r9, #8945	; 0x22f1
    4984:	620b673c 	andvs	r6, fp, #60, 14	; 0xf00000
    4988:	91c081b0 	strhls	r8, [r0, #16]
    498c:	829781d3 	addshi	r8, r7, #-1073741772	; 0xc0000034
    4990:	18d3a290 	ldmne	r3, {r4, r7, r9, sp, pc}^
    4994:	0bf34e7f 	bleq	ffcd8398 <_estack+0xdfcd3398>
    4998:	1ce31613 	stclne	6, cr1, [r3], #76	; 0x4c
    499c:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    49a0:	143b81e3 	ldrtne	r8, [fp], #-483	; 0xfffffe1d
    49a4:	1cba6290 	lfmne	f6, 4, [sl], #576	; 0x240
    49a8:	1e23468b 	cfmadda32ne	mvax4, mvax4, mvfx3, mvfx11
    49ac:	1ce34a8b 	vstmiane	r3!, {s9-s147}
    49b0:	b2904e8b 	addslt	r4, r0, #2224	; 0x8b0
    49b4:	428b2207 	addmi	r2, fp, #1879048192	; 0x70000000
    49b8:	1a1ba290 	bne	6ed400 <__ccfg+0x6cd458>
    49bc:	1ce36296 	sfmne	f6, 2, [r3], #600	; 0x258
    49c0:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    49c4:	183b81e3 	ldmdane	fp!, {r0, r1, r5, r6, r7, r8, pc}
    49c8:	4ea01cab 	cdpmi	12, 10, cr1, cr0, cr11, {5}
    49cc:	4aa21c9b 	bmi	fe88bc40 <_estack+0xde886c40>
    49d0:	42a41cbc 	adcmi	r1, r4, #188, 24	; 0xbc00
    49d4:	821010b2 	andshi	r1, r0, #178	; 0xb2
    49d8:	429d22d0 	addsmi	r2, sp, #208, 4
    49dc:	221080f0 	andscs	r8, r0, #240	; 0xf0
    49e0:	646346a4 	strbtvs	r4, [r3], #-1700	; 0xfffff95c
    49e4:	62a466a5 	adcvs	r6, r4, #173015040	; 0xa500000
    49e8:	629410ab 	addsvs	r1, r4, #171	; 0xab
    49ec:	6294109b 	addsvs	r1, r4, #155	; 0x9b
    49f0:	82307000 	eorshi	r7, r0, #0
    49f4:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    49f8:	7100b063 	tstvc	r0, r3, rrx
    49fc:	10bc6aa8 	adcsne	r6, ip, r8, lsr #21
    4a00:	7000b0e0 	andvc	fp, r0, r0, ror #1
    4a04:	91c281b2 	strhls	r8, [r2, #18]
    4a08:	820181d2 	andhi	r8, r1, #-2147483596	; 0x80000034
    4a0c:	81511812 	cmphi	r1, r2, lsl r8
    4a10:	82411812 	subhi	r1, r1, #1179648	; 0x120000
    4a14:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    4a18:	4abf1c12 	bmi	fefcba68 <_estack+0xdefc6a68>
    4a1c:	b032b0e2 	eorslt	fp, r2, r2, ror #1
    4a20:	92f2dfb0 	rscsls	sp, r2, #176, 30	; 0x2c0
    4a24:	c7f1673c 			; <UNDEFINED> instruction: 0xc7f1673c
    4a28:	4ec31421 	cdpmi	4, 12, cr1, cr3, cr1, {1}
    4a2c:	9162c812 	cmnls	r2, r2, lsl r8
    4a30:	b0319172 	eorslt	r9, r1, r2, ror r1
    4a34:	7000b0e1 	andvc	fp, r0, r1, ror #1
    4a38:	c006c008 	andgt	ip, r6, r8
    4a3c:	9160c800 	cmnls	r0, r0, lsl #16
    4a40:	70009170 	andvc	r9, r0, r0, ror r1
    4a44:	81b08201 	lslshi	r8, r1, #4
    4a48:	81d091c0 	bicshi	r9, r0, r0, asr #3
    4a4c:	81511810 	cmphi	r1, r0, lsl r8
    4a50:	14061810 	strne	r1, [r6], #-2064	; 0xfffff7f0
    4a54:	824280e1 	subhi	r8, r2, #225	; 0xe1
    4a58:	3d823182 	stfccs	f3, [r2, #520]	; 0x208
    4a5c:	4ae41c20 	bmi	ff90bae4 <_estack+0xdf906ae4>
    4a60:	2221b0e2 	eorcs	fp, r1, #226	; 0xe2
    4a64:	b03246e8 	eorslt	r4, r2, r8, ror #13
    4a68:	dfa01005 	svcle	0x00a01005
    4a6c:	673c92f5 			; <UNDEFINED> instruction: 0x673c92f5
    4a70:	42e82221 	rscmi	r2, r8, #268435458	; 0x10000002
    4a74:	b032a0e2 	eorslt	sl, r2, r2, ror #1
    4a78:	39418231 	stmdbcc	r1, {r0, r4, r5, r9, pc}^
    4a7c:	0401c0f0 	streq	ip, [r1], #-240	; 0xffffff10
    4a80:	42f61e01 	rscsmi	r1, r6, #1, 28
    4a84:	c0101618 	andsgt	r1, r0, r8, lsl r6
    4a88:	1c083010 	stcne	0, cr3, [r8], {16}
    4a8c:	10604704 	rsbne	r4, r0, r4, lsl #14
    4a90:	10063c10 	andne	r3, r6, r0, lsl ip
    4a94:	1461c7f1 	strbtne	ip, [r1], #-2033	; 0xfffff80f
    4a98:	c8164efa 	ldmdagt	r6, {r1, r3, r4, r5, r6, r7, r9, sl, fp, lr}
    4a9c:	81719166 	cmnhi	r1, r6, ror #2
    4aa0:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    4aa4:	4b011c16 	blmi	4bb04 <__ccfg+0x2bb5c>
    4aa8:	b0319176 	eorslt	r9, r1, r6, ror r1
    4aac:	c008c006 	andgt	ip, r8, r6
    4ab0:	81617000 	cmnhi	r1, r0
    4ab4:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    4ab8:	39808240 	stmibcc	r0, {r6, r9, pc}
    4abc:	1cf11801 	ldclne	8, cr1, [r1], #4
    4ac0:	14014b17 	strne	r4, [r1], #-2839	; 0xfffff4e9
    4ac4:	22c080b0 	sbccs	r8, r0, #176	; 0xb0
    4ac8:	b0bc4717 	adcslt	r4, ip, r7, lsl r7
    4acc:	ef90b033 	svc	0x0090b033
    4ad0:	930f92f1 	movwls	r9, #62193	; 0xf2f1
    4ad4:	7000673c 	andvc	r6, r0, ip, lsr r7
    4ad8:	b063a003 	rsblt	sl, r3, r3
    4adc:	b0efb064 	rsclt	fp, pc, r4, rrx
    4ae0:	71006556 	tstvc	r0, r6, asr r5
    4ae4:	22008040 	andcs	r8, r0, #64	; 0x40
    4ae8:	b064472b 	rsblt	r4, r4, fp, lsr #14
    4aec:	a0ef652a 	rscge	r6, pc, sl, lsr #10
    4af0:	80407100 	subhi	r7, r0, r0, lsl #2
    4af4:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    4af8:	b003b064 	andlt	fp, r3, r4, rrx
    4afc:	82016238 	andhi	r6, r1, #56, 4	; 0x80000003
    4b00:	31828162 	orrcc	r8, r2, r2, ror #2
    4b04:	ef803d82 	svc	0x00803d82
    4b08:	930292f1 	movwls	r9, #8945	; 0x22f1
    4b0c:	a003673c 	andge	r6, r3, ip, lsr r7
    4b10:	61e66556 	mvnvs	r6, r6, asr r5
    4b14:	646380a2 	strbtvs	r8, [r3], #-162	; 0xffffff5e
    4b18:	b05061e6 	subslt	r6, r0, r6, ror #3
    4b1c:	61e67100 	mvnvs	r7, r0, lsl #2
    4b20:	82d092e0 	sbcshi	r9, r0, #224, 4
    4b24:	473d2200 	ldrmi	r2, [sp, -r0, lsl #4]!
    4b28:	7000b2c0 	andvc	fp, r0, r0, asr #5
    4b2c:	22f080a0 	rscscs	r8, r0, #160	; 0xa0
    4b30:	b0304359 	eorslt	r4, r0, r9, asr r3
    4b34:	3162c102 	cmncc	r2, r2, lsl #2
    4b38:	80a0c001 	adchi	ip, r0, r1
    4b3c:	43521e00 	cmpmi	r2, #0, 28
    4b40:	435322f0 	cmpmi	r3, #240, 4
    4b44:	3160f5a0 	msrcc	SPSR_, r0, lsr #11
    4b48:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    4b4c:	1a101020 	bne	408bd4 <__ccfg+0x3e8c2c>
    4b50:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    4b54:	16121611 			; <UNDEFINED> instruction: 0x16121611
    4b58:	70006b54 	andvc	r6, r0, r4, asr fp

00004b5c <patchImageGenfsk>:
    4b5c:	210004ad 	smlatbcs	r0, sp, r4, r0
    4b60:	21000449 	tstcs	r0, r9, asr #8
    4b64:	2100047d 	tstcs	r0, sp, ror r4
    4b68:	21000481 	smlabbcs	r0, r1, r4, r0
    4b6c:	21000511 	tstcs	r0, r1, lsl r5
    4b70:	21000591 			; <UNDEFINED> instruction: 0x21000591
    4b74:	21000641 	tstcs	r0, r1, asr #12
    4b78:	4710b5f8 			; <UNDEFINED> instruction: 0x4710b5f8
    4b7c:	460eb5f8 			; <UNDEFINED> instruction: 0x460eb5f8
    4b80:	25012100 	strcs	r2, [r1, #-256]	; 0xffffff00
    4b84:	473004ad 	ldrmi	r0, [r0, -sp, lsr #9]!
    4b88:	7803480a 	stmdavc	r3, {r1, r3, fp, lr}
    4b8c:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
    4b90:	d00b079b 	mulle	fp, fp, r7
    4b94:	78204c12 	stmdavc	r0!, {r1, r4, sl, fp, lr}
    4b98:	d00728ff 	strdle	r2, [r7], -pc	; <UNPREDICTABLE>
    4b9c:	702121ff 	strdvc	r2, [r1], -pc	; <UNPREDICTABLE>
    4ba0:	240f490e 	strcs	r4, [pc], #-2318	; 4ba8 <patchImageGenfsk+0x4c>
    4ba4:	43200224 			; <UNDEFINED> instruction: 0x43200224
    4ba8:	82c83160 	sbchi	r3, r8, #96, 2
    4bac:	b5f8bdf8 	ldrblt	fp, [r8, #3576]!	; 0xdf8
    4bb0:	47004801 	strmi	r4, [r0, -r1, lsl #16]
    4bb4:	2100026b 	tstcs	r0, fp, ror #4
    4bb8:	00004ce5 	andeq	r4, r0, r5, ror #25
    4bbc:	e0014809 	and	r4, r1, r9, lsl #16
    4bc0:	0c004808 	stceq	8, cr4, [r0], {8}
    4bc4:	49054c06 	stmdbmi	r5, {r1, r2, sl, fp, lr}
    4bc8:	2aff7822 	bcs	fffe2c58 <_estack+0xdffddc58>
    4bcc:	7acad101 	bvc	ff2b8fd8 <_estack+0xdf2b3fd8>
    4bd0:	31607022 	cmncc	r0, r2, lsr #32
    4bd4:	467082c8 	ldrbtmi	r8, [r0], -r8, asr #5
    4bd8:	47001c80 	strmi	r1, [r0, -r0, lsl #25]
    4bdc:	40086200 	andmi	r6, r8, r0, lsl #4
    4be0:	210006a4 	smlatbcs	r0, r4, r6, r0
    4be4:	08080f07 	stmdaeq	r8, {r0, r1, r2, r8, r9, sl, fp}
    4be8:	4708b4f0 			; <UNDEFINED> instruction: 0x4708b4f0
    4bec:	4603b570 			; <UNDEFINED> instruction: 0x4603b570
    4bf0:	29014615 	stmdbcs	r1, {r0, r2, r4, r9, sl, lr}
    4bf4:	2900d006 	stmdbcs	r0, {r1, r2, ip, lr, pc}
    4bf8:	4a11d006 	bmi	478c18 <__ccfg+0x458c70>
    4bfc:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    4c00:	bd70ffbb 	ldcllt	15, cr15, [r0, #-748]!	; 0xfffffd14
    4c04:	e000480f 	and	r4, r0, pc, lsl #16
    4c08:	2405480f 	strcs	r4, [r5], #-2063	; 0xfffff7f1
    4c0c:	d8034283 	stmdale	r3, {r0, r1, r7, r9, lr}
    4c10:	1e640840 	cdpne	8, 6, cr0, cr4, cr0, {2}
    4c14:	dcf92c00 	ldclle	12, cr2, [r9]
    4c18:	200140e3 	andcs	r4, r1, r3, ror #1
    4c1c:	18180340 	ldmdane	r8, {r6, r8, r9}
    4c20:	29010b82 	stmdbcs	r1, {r1, r7, r8, r9, fp}
    4c24:	4906d007 	stmdbmi	r6, {r0, r1, r2, ip, lr, pc}
    4c28:	31802300 	orrcc	r2, r0, r0, lsl #6
    4c2c:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    4c30:	b2e0ffa5 	rsclt	pc, r0, #660	; 0x294
    4c34:	4902bd70 	stmdbmi	r2, {r4, r5, r6, r8, sl, fp, ip, sp, pc}
    4c38:	316c4b04 	cmncc	ip, r4, lsl #22
    4c3c:	0000e7f6 	strdeq	lr, [r0], -r6
    4c40:	00005c83 	andeq	r5, r0, r3, lsl #25
    4c44:	2386bca0 	orrcs	fp, r6, #160, 24	; 0xa000
    4c48:	230d8300 	movwcs	r8, #54016	; 0xd300
    4c4c:	21000674 	tstcs	r0, r4, ror r6
    4c50:	4e1ab5f8 	mrcmi	5, 0, fp, cr10, cr8, {7}
    4c54:	6b714605 	blvs	1c56470 <__ccfg+0x1c364c8>
    4c58:	09cc4819 	stmibeq	ip, {r0, r3, r4, fp, lr}^
    4c5c:	2d0001e4 	stfcss	f0, [r0, #-912]	; 0xfffffc70
    4c60:	4918d011 	ldmdbmi	r8, {r0, r4, ip, lr, pc}
    4c64:	29027809 	stmdbcs	r2, {r0, r3, fp, ip, sp, lr}
    4c68:	7b00d00f 	blvc	38cac <__ccfg+0x18d04>
    4c6c:	b6724304 	ldrbtlt	r4, [r2], -r4, lsl #6
    4c70:	4f152001 	svcmi	0x00152001
    4c74:	47b80240 	ldrmi	r0, [r8, r0, asr #4]!
    4c78:	38204811 	stmdacc	r0!, {r0, r4, fp, lr}
    4c7c:	09c18800 	stmibeq	r1, {fp, pc}^
    4c80:	d00407c9 	andle	r0, r4, r9, asr #15
    4c84:	7ac0e016 	bvc	ff03cce4 <_estack+0xdf037ce4>
    4c88:	7b40e7f0 	blvc	103ec50 <__ccfg+0x101eca8>
    4c8c:	490fe7ee 	stmdbmi	pc, {r1, r2, r3, r5, r6, r7, r8, r9, sl, sp, lr, pc}	; <UNPREDICTABLE>
    4c90:	61cc6374 	bicvs	r6, ip, r4, ror r3
    4c94:	07c00a40 	strbeq	r0, [r0, r0, asr #20]
    4c98:	2001d00c 	andcs	sp, r1, ip
    4c9c:	6b310380 	blvs	c45aa4 <__ccfg+0xc25afc>
    4ca0:	d0012d00 	andle	r2, r1, r0, lsl #26
    4ca4:	e0004301 	and	r4, r0, r1, lsl #6
    4ca8:	46084381 	strmi	r4, [r8], -r1, lsl #7
    4cac:	49076331 	stmdbmi	r7, {r0, r4, r5, r8, r9, sp, lr}
    4cb0:	63483940 	movtvs	r3, #35136	; 0x8940
    4cb4:	47b82000 	ldrmi	r2, [r8, r0]!
    4cb8:	bdf8b662 	ldcllt	6, cr11, [r8, #392]!	; 0x188
    4cbc:	21000280 	smlabbcs	r0, r0, r2, r0
    4cc0:	21000088 	smlabbcs	r0, r8, r0, r0
    4cc4:	2100029b 			; <UNDEFINED> instruction: 0x2100029b
    4cc8:	00003f7b 	andeq	r3, r0, fp, ror pc
    4ccc:	40044040 	andmi	r4, r4, r0, asr #32
    4cd0:	4a22b510 	bmi	8b2118 <__ccfg+0x892170>
    4cd4:	61512100 	cmpvs	r1, r0, lsl #2
    4cd8:	68894921 	stmvs	r9, {r0, r5, r8, fp, lr}
    4cdc:	d40900c9 	strle	r0, [r9], #-201	; 0xffffff37
    4ce0:	4b204921 	blmi	81716c <__ccfg+0x7f71c4>
    4ce4:	429805ca 	addsmi	r0, r8, #847249408	; 0x32800000
    4ce8:	d8016b4b 	stmdale	r1, {r0, r1, r3, r6, r8, r9, fp, sp, lr}
    4cec:	e0004313 	and	r4, r0, r3, lsl r3
    4cf0:	634b4393 	movtvs	r4, #45971	; 0xb393
    4cf4:	f7ff491d 			; <UNDEFINED> instruction: 0xf7ff491d
    4cf8:	bd10ff77 	ldclt	15, cr15, [r0, #-476]	; 0xfffffe24
    4cfc:	4d1ab538 	cfldr32mi	mvfx11, [sl, #-224]	; 0xffffff20
    4d00:	28007f28 	stmdacs	r0, {r3, r5, r8, r9, sl, fp, ip, sp, lr}
    4d04:	481ad127 	ldmdami	sl, {r0, r1, r2, r5, r8, ip, lr, pc}
    4d08:	09c08800 	stmibeq	r0, {fp, pc}^
    4d0c:	d12207c0 	smlawtle	r2, r0, r7, r0
    4d10:	69604c12 	stmdbvs	r0!, {r1, r4, sl, fp, lr}^
    4d14:	d11e2800 	tstle	lr, r0, lsl #16
    4d18:	f0004668 			; <UNDEFINED> instruction: 0xf0004668
    4d1c:	4668f845 	strbtmi	pc, [r8], -r5, asr #16	; <UNPREDICTABLE>
    4d20:	28017800 	stmdacs	r1, {fp, ip, sp, lr}
    4d24:	4668d117 			; <UNDEFINED> instruction: 0x4668d117
    4d28:	28107840 	ldmdacs	r0, {r6, fp, ip, sp, lr}
    4d2c:	2008d213 	andcs	sp, r8, r3, lsl r2
    4d30:	6a686160 	bvs	1a1d2b8 <__ccfg+0x19fd310>
    4d34:	01400940 	cmpeq	r0, r0, asr #18
    4d38:	4a0e6020 	bmi	39cdc0 <__ccfg+0x37ce18>
    4d3c:	62d12100 	sbcsvs	r2, r1, #0, 2
    4d40:	21024a0d 	tstcs	r2, sp, lsl #20
    4d44:	21016011 	tstcs	r1, r1, lsl r0
    4d48:	60204308 	eorvs	r4, r0, r8, lsl #6
    4d4c:	43082103 	movwmi	r2, #33027	; 0x8103
    4d50:	60206268 	eorvs	r6, r0, r8, ror #4
    4d54:	4809bd38 	stmdami	r9, {r3, r4, r5, r8, sl, fp, ip, sp, pc}
    4d58:	bd384780 	ldclt	7, cr4, [r8, #-512]!	; 0xfffffe00
    4d5c:	40044000 	andmi	r4, r4, r0
    4d60:	21000018 	tstcs	r0, r8, lsl r0
    4d64:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    4d68:	21000280 	smlabbcs	r0, r0, r2, r0
    4d6c:	000068cf 	andeq	r6, r0, pc, asr #17
    4d70:	21000068 	tstcs	r0, r8, rrx
    4d74:	40041100 	andmi	r1, r4, r0, lsl #2
    4d78:	e000e280 	and	lr, r0, r0, lsl #5
    4d7c:	00003bc3 	andeq	r3, r0, r3, asr #23
    4d80:	28004907 	stmdacs	r0, {r0, r1, r2, r8, fp, lr}
    4d84:	2004d000 	andcs	sp, r4, r0
    4d88:	b6724a06 	ldrbtlt	r4, [r2], -r6, lsl #20
    4d8c:	07c97809 	strbeq	r7, [r9, r9, lsl #16]
    4d90:	5810d001 	ldmdapl	r0, {r0, ip, lr, pc}
    4d94:	2080e000 	addcs	lr, r0, r0
    4d98:	b240b662 	sublt	fp, r0, #102760448	; 0x6200000
    4d9c:	00004770 	andeq	r4, r0, r0, ror r7
    4da0:	2100026b 	tstcs	r0, fp, ror #4
    4da4:	40046058 	andmi	r6, r4, r8, asr r0
    4da8:	4801b403 	stmdami	r1, {r0, r1, sl, ip, sp, pc}
    4dac:	bd019001 	stclt	0, cr9, [r1, #-4]
    4db0:	00006fa5 	andeq	r6, r0, r5, lsr #31
    4db4:	00000000 	andeq	r0, r0, r0
    4db8:	00030001 	andeq	r0, r3, r1
    4dbc:	001f000a 	andseq	r0, pc, sl
    4dc0:	00eb0059 	rsceq	r0, fp, r9, asr r0
    4dc4:	04ea0239 	strbteq	r0, [sl], #569	; 0x239
    4dc8:	129709f9 	addsne	r0, r7, #4079616	; 0x3e4000
    4dcc:	32a11feb 	adccc	r1, r1, #940	; 0x3ac
    4dd0:	660a4a78 			; <UNDEFINED> instruction: 0x660a4a78
    4dd4:	9e8c82fa 	mcrls	2, 4, r8, cr12, cr10, {7}
    4dd8:	c917b663 	ldmdbgt	r7, {r0, r1, r5, r6, r9, sl, ip, sp, pc}
    4ddc:	deedd664 	cdple	6, 14, cr13, cr13, cr4, {3}
    4de0:	e5e0e3c1 	strb	lr, [r0, #961]!	; 0x3c1
    4de4:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

00004de8 <ratable>:
    4de8:	12c5000b 	sbcne	r0, r5, #11
    4dec:	2de00007 	stclcs	0, cr0, [r0, #28]!
    4df0:	8000000f 	andhi	r0, r0, pc
    4df4:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    4df8:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
    4dfc:	6374206c 	cmnvs	r4, #108	; 0x6c
    4e00:	706f5f76 	rsbvc	r5, pc, r6, ror pc	; <UNPREDICTABLE>
    4e04:	756e5f65 	strbvc	r5, [lr, #-3941]!	; 0xfffff09b
    4e08:	00006c6c 	andeq	r6, r0, ip, ror #24

00004e0c <plug_null>:
    4e0c:	00002821 	andeq	r2, r0, r1, lsr #16
    4e10:	000027c9 	andeq	r2, r0, r9, asr #15
    4e14:	000027ed 	andeq	r2, r0, sp, ror #15
    4e18:	00002811 	andeq	r2, r0, r1, lsl r8
    4e1c:	00002819 	andeq	r2, r0, r9, lsl r8
    4e20:	0000281d 	andeq	r2, r0, sp, lsl r8
    4e24:	00000000 	andeq	r0, r0, r0
    4e28:	00000001 	andeq	r0, r0, r1

00004e2c <_ctype_>:
    4e2c:	20202000 	eorcs	r2, r0, r0
    4e30:	20202020 	eorcs	r2, r0, r0, lsr #32
    4e34:	28282020 	stmdacs	r8!, {r5, sp}
    4e38:	20282828 	eorcs	r2, r8, r8, lsr #16
    4e3c:	20202020 	eorcs	r2, r0, r0, lsr #32
    4e40:	20202020 	eorcs	r2, r0, r0, lsr #32
    4e44:	20202020 	eorcs	r2, r0, r0, lsr #32
    4e48:	20202020 	eorcs	r2, r0, r0, lsr #32
    4e4c:	10108820 	andsne	r8, r0, r0, lsr #16
    4e50:	10101010 	andsne	r1, r0, r0, lsl r0
    4e54:	10101010 	andsne	r1, r0, r0, lsl r0
    4e58:	10101010 	andsne	r1, r0, r0, lsl r0
    4e5c:	04040410 	streq	r0, [r4], #-1040	; 0xfffffbf0
    4e60:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
    4e64:	10040404 	andne	r0, r4, r4, lsl #8
    4e68:	10101010 	andsne	r1, r0, r0, lsl r0
    4e6c:	41411010 	cmpmi	r1, r0, lsl r0
    4e70:	41414141 	cmpmi	r1, r1, asr #2
    4e74:	01010101 	tsteq	r1, r1, lsl #2
    4e78:	01010101 	tsteq	r1, r1, lsl #2
    4e7c:	01010101 	tsteq	r1, r1, lsl #2
    4e80:	01010101 	tsteq	r1, r1, lsl #2
    4e84:	01010101 	tsteq	r1, r1, lsl #2
    4e88:	10101010 	andsne	r1, r0, r0, lsl r0
    4e8c:	42421010 	submi	r1, r2, #16
    4e90:	42424242 	submi	r4, r2, #536870916	; 0x20000004
    4e94:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
    4e98:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
    4e9c:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
    4ea0:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
    4ea4:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
    4ea8:	10101010 	andsne	r1, r0, r0, lsl r0
    4eac:	00000020 	andeq	r0, r0, r0, lsr #32
	...

Disassembly of section .data:

20000000 <__pi_seed>:
lword	__pi_seed = 327672838L;
20000000:	1387e406 	orrne	lr, r7, #100663296	; 0x6000000

20000004 <cmd_cs>:
static rfc_CMD_PROP_CS_t cmd_cs = {
20000004:	00003805 	andeq	r3, r0, r5, lsl #16
20000008:	2000009c 	mulcs	r0, ip, r0
2000000c:	00000000 	andeq	r0, r0, r0
20000010:	00000300 	andeq	r0, r0, r0, lsl #6
20000014:	0404c60b 	streq	ip, [r4], #-1547	; 0xfffff9f5
20000018:	04330080 	ldrteq	r0, [r3], #-128	; 0xffffff80
2000001c:	00002000 	andeq	r2, r0, r0

20000020 <cmd_srt>:
static rfc_CMD_SYNC_START_RAT_t	cmd_srt = { .commandNo = CMD_SYNC_START_RAT };
20000020:	0000080a 	andeq	r0, r0, sl, lsl #16
	...

20000034 <offdelay>:
		offdelay = RADIO_DEFAULT_OFFDELAY;
20000034:	 	andeq	r0, r2, r0, lsl #2

20000036 <vrate>:
20000036:	 	stmdaeq	r3, {r1}

20000038 <RF_cmdFs>:
    .intFreq = 0x8000,
    .loDivider = 0x05,
};

// CMD_FS
rfc_CMD_FS_t RF_cmdFs =
20000038:	00000803 	andeq	r0, r0, r3, lsl #16
	...
20000044:	03640100 	cmneq	r4, #0, 2
	...

20000050 <RF_cmdPropRadioDivSetup>:
rfc_CMD_PROP_RADIO_DIV_SETUP_t RF_cmdPropRadioDivSetup =
20000050:	00003807 	andeq	r3, r0, r7, lsl #16
	...
2000005c:	03210100 			; <UNDEFINED> instruction: 0x03210100
20000060:	0080000f 	addeq	r0, r0, pc
20000064:	00a00424 	adceq	r0, r0, r4, lsr #8
20000068:	bc2b0008 	stclt	0, cr0, [fp], #-32	; 0xffffffe0
2000006c:	200000b4 	strhcs	r0, [r0], -r4
20000070:	80000364 	andhi	r0, r0, r4, ror #6
20000074:	00000005 	andeq	r0, r0, r5

20000078 <RF_cmdPropRx>:
    .syncWord = 0x930B51DE,
    .pPkt = 0, // INSERT APPLICABLE POINTER: (uint8_t*)&xxx
};

// CMD_PROP_RX
rfc_CMD_PROP_RX_t RF_cmdPropRx =
20000078:	00003802 	andeq	r3, r0, r2, lsl #16
	...
20000084:	88180100 	ldmdahi	r8, {r8}
20000088:	930b51de 	movwls	r5, #45534	; 0xb1de
2000008c:	01bbaa7d 			; <UNDEFINED> instruction: 0x01bbaa7d
	...

2000009c <RF_cmdPropTx>:
rfc_CMD_PROP_TX_t RF_cmdPropTx =
2000009c:	00003801 	andeq	r3, r0, r1, lsl #16
	...
200000a8:	1e180100 	mufnee	f0, f0, f0
200000ac:	930b51de 	movwls	r5, #45534	; 0xb1de
200000b0:	00000000 	andeq	r0, r0, r0

200000b4 <pOverrides>:
200000b4:	00001807 	andeq	r1, r0, r7, lsl #16
200000b8:	00374038 	eorseq	r4, r7, r8, lsr r0
200000bc:	000684a3 	andeq	r8, r6, r3, lsr #9
200000c0:	7f004020 	svcvc	0x00004020
200000c4:	00404064 	subeq	r4, r0, r4, rrx
200000c8:	b1070503 	tstlt	r7, r3, lsl #10
200000cc:	05330523 	ldreq	r0, [r3, #-1315]!	; 0xfffffadd
200000d0:	0a480583 	beq	212016e4 <_estack+0x11fc6e4>
200000d4:	7ab80603 	bvc	1ee018e8 <__ccfg+0x1ede1940>
200000d8:	849f0002 	ldrhi	r0, [pc], #2	; 200000e0 <pOverrides+0x2c>
200000dc:	c7440002 	strbgt	r0, [r4, -r2]
200000e0:	02010403 	andeq	r0, r1, #50331648	; 0x3000000
200000e4:	00108463 	andseq	r8, r0, r3, ror #8
200000e8:	04b00243 	ldrteq	r0, [r0], #579	; 0x243
200000ec:	7ddf0002 	ldclvc	0, cr0, [pc, #8]	; 200000fc <pOverrides+0x48>
200000f0:	00038883 	andeq	r8, r3, r3, lsl #17
200000f4:	35f16084 	ldrbcc	r6, [r1, #132]!	; 0x84
200000f8:	411a6088 	tstmi	sl, r8, lsl #1
200000fc:	8213608c 	andshi	r6, r3, #140	; 0x8c
20000100:	00fb88a3 	rscseq	r8, fp, r3, lsr #17
20000104:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

Disassembly of section .bss:

20000108 <nodeId>:
byte nodeId; 
20000108:	00000000 	andeq	r0, r0, r0

2000010c <packet.3>:
2000010c:	00000000 	andeq	r0, r0, r0

20000110 <ptr.1>:
20000110:	00000000 	andeq	r0, r0, r0

20000114 <receivedPtr.2>:
20000114:	00000000 	andeq	r0, r0, r0

20000118 <receiverId.0>:
20000118:	00000000 	andeq	r0, r0, r0

2000011c <sequence>:
int sequence = 0;
2000011c:	00000000 	andeq	r0, r0, r0

20000120 <sfd>:
int sfd;
20000120:	00000000 	andeq	r0, r0, r0

20000124 <__pi_uart>:
	...

2000012c <setdel>:
static word setdel = 0;
2000012c:	00000000 	andeq	r0, r0, r0

20000130 <system_event_count>:
lword system_event_count;	// For debugging, but maybe it should stay
20000130:	00000000 	andeq	r0, r0, r0

20000134 <urates>:
static word urates [N_UARTS];
20000134:	00000000 	andeq	r0, r0, r0

20000138 <__PCB>:
__pi_pcb_t *__PCB = NULL;
20000138:	00000000 	andeq	r0, r0, r0

2000013c <__pi_curr>:
__pi_pcb_t *__pi_curr;
2000013c:	00000000 	andeq	r0, r0, r0

20000140 <__pi_mintk>:
	...

20000142 <__pi_new>:
	...

20000144 <__pi_old>:
volatile word	__pi_old, __pi_new;
20000144:	00000000 	andeq	r0, r0, r0

20000148 <__pi_systat>:
	...

20000150 <__pi_utims>:
	...

20000160 <entropy>:
lword	entropy;
20000160:	00000000 	andeq	r0, r0, r0

20000164 <ioreq>:
static devreqfun_t ioreq [MAX_DEVICES];
20000164:	00000000 	andeq	r0, r0, r0

20000168 <mcfree>:
static	aword	mnfree [MALLOC_NPOOLS], mcfree [MALLOC_NPOOLS];
20000168:	00000000 	andeq	r0, r0, r0

2000016c <mevent>:
2000016c:	00000000 	andeq	r0, r0, r0

20000170 <mnfree>:
20000170:	00000000 	andeq	r0, r0, r0

20000174 <mpools>:
static	aword	*mpools [MALLOC_NPOOLS];
20000174:	00000000 	andeq	r0, r0, r0

20000178 <descriptors>:
	...

20000198 <oqueues>:
	...

200001a4 <physical>:
	...

200001b0 <physinfo>:
	...

200001bc <plugins>:
	...

200001c8 <dopen>:
	...

200001c9 <dstat>:
	...

200001ca <bckf_timer>:
	...

200001cc <channel>:
200001cc:	00000000 	andeq	r0, r0, r0

200001d0 <drvprcs>:
static aword drvprcs, qevent;
200001d0:	00000000 	andeq	r0, r0, r0

200001d4 <dstate>:
200001d4:	00000000 	andeq	r0, r0, r0

200001d8 <paylen>:
static	int paylen = 0;			// Current TX payload length
200001d8:	00000000 	andeq	r0, r0, r0

200001dc <physid>:
static word	physid,
200001dc:	00000000 	andeq	r0, r0, r0

200001e0 <qevent>:
static aword drvprcs, qevent;
200001e0:	00000000 	andeq	r0, r0, r0

200001e4 <rbuffl>:
200001e4:	00000000 	andeq	r0, r0, r0

200001e8 <rfTrim>:
	...

200001f8 <rxstat>:
	...

20000204 <statid>:
	...

20000206 <txtries>:
	...

20000208 <ndsc_null>:
20000208:	00000000 	andeq	r0, r0, r0

2000020c <len.0>:
2000020c:	00000000 	andeq	r0, r0, r0

20000210 <ptr.1>:
20000210:	00000000 	andeq	r0, r0, r0

20000214 <__inpline>:
char *__inpline = NULL;
20000214:	00000000 	andeq	r0, r0, r0

20000218 <len.0>:
20000218:	00000000 	andeq	r0, r0, r0

2000021c <ptr.1>:
2000021c:	00000000 	andeq	r0, r0, r0

20000220 <oscHfGlobals>:
	...

20000234 <powerQualGlobals>:
	...

Disassembly of section .ccfg:

0001ffa8 <__ccfg>:
#elif defined(__TI_COMPILER_VERSION__)
#pragma DATA_SECTION(__ccfg, ".ccfg")
#pragma RETAIN(__ccfg)
const ccfg_t __ccfg =
#else
const ccfg_t __ccfg __attribute__((section(".ccfg"))) __attribute__((used)) =
   1ffa8:	01800000 	orreq	r0, r0, r0
   1ffac:	ff880010 			; <UNDEFINED> instruction: 0xff880010
   1ffb0:	0058fffd 	ldrsheq	pc, [r8], #-253	; 0xffffff03	; <UNPREDICTABLE>
   1ffb4:	f3bfff3a 	vcvt.u32.f32	d15, d26, #1
   1ffb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
   1ffdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffe0:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
   1ffe4:	ffc500c5 			; <UNDEFINED> instruction: 0xffc500c5
   1ffe8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   1ffec:	00000000 	andeq	r0, r0, r0
   1fff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fffc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

Disassembly of section ._user_heap_stack:

2000023c <._user_heap_stack>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000005d7 	ldrdeq	r0, [r0], -r7
       4:	00000003 	andeq	r0, r0, r3
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      10:	0002340c 	andeq	r3, r2, ip, lsl #8
      14:	0000a300 	andeq	sl, r0, r0, lsl #6
      18:	00007800 	andeq	r7, r0, r0, lsl #16
	...
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	0000029d 	muleq	r0, sp, r2
      2c:	b9050202 	stmdblt	r5, {r1, r9}
      30:	02000002 	andeq	r0, r0, #2
      34:	005c0504 	subseq	r0, ip, r4, lsl #10
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	00005705 	andeq	r5, r0, r5, lsl #14
		where = 1;
      40:	1f330300 	svcne	0x00330300
		delay (1, st);
      44:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
		release;
      48:	00004d17 	andeq	r4, r0, r7, lsl sp
      4c:	08010200 	stmdaeq	r1, {r9}
      50:	0000029b 	muleq	r0, fp, r2
}
      54:	00232903 	eoreq	r2, r3, r3, lsl #18
      58:	1c310200 	lfmne	f0, 4, [r1], #-0
      5c:	00000060 	andeq	r0, r0, r0, rrx
			nq++;
      60:	ca070202 	bgt	1c0870 <__ccfg+0x1a08c8>
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	03000001 	movweq	r0, #1
      68:	00001ecb 	andeq	r1, r0, fp, asr #29
      6c:	731b3402 	tstvc	fp, #33554432	; 0x2000000
      70:	02000000 	andeq	r0, r0, #0
      74:	00450704 	subeq	r0, r5, r4, lsl #14
      78:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      7c:	00004007 	andeq	r4, r0, r7
      80:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      84:	00746e69 	rsbseq	r6, r4, r9, ror #28
      88:	4a070402 	bmi	1c1098 <__ccfg+0x1a10f0>
      8c:	03000000 	movweq	r0, #0
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      90:	00000259 	andeq	r0, r0, r9, asr r2
	if (!button_still_pressed (__button_list [pbutton]))
      94:	9b1b2803 	blls	6ca0a8 <__ccfg+0x6aa100>
      98:	05000000 	streq	r0, [r0, #-0]
      9c:	0000008a 	andeq	r0, r0, sl, lsl #1
      a0:	b3000804 	movwlt	r0, #2052	; 0x804
	if (baction == NULL)
      a4:	06000000 	streq	r0, [r0], -r0
      a8:	00000331 	andeq	r0, r0, r1, lsr r3
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	000000b3 	strheq	r0, [r0], -r3
endthread
      b0:	07000100 	streq	r0, [r0, -r0, lsl #2]
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      b4:	008c0304 	addeq	r0, ip, r4, lsl #6
      b8:	63030000 	movwvs	r0, #12288	; 0x3000
endthread
      bc:	00008f18 	andeq	r8, r0, r8, lsl pc
      c0:	1d850300 	stcne	3, cr0, [r5]
      c4:	27040000 	strcs	r0, [r4, -r0]
fsm receiver {
      c8:	00005412 	andeq	r5, r0, r2, lsl r4
      cc:	13170300 	tstne	r7, #0, 6
      d0:	2b040000 	blcs	1000d8 <__ccfg+0xe0130>
      d4:	00004111 	andeq	r4, r0, r1, lsl r1
        packet = tcv_rnp(Receiving, sfd);
      d8:	021e0300 	andseq	r0, lr, #0, 6
      dc:	2d040000 	stccs	0, cr0, [r4, #-0]
      e0:	00006712 	andeq	r6, r0, r2, lsl r7
      e4:	02510300 	subseq	r0, r1, #0, 6
        receivedPtr = (struct msg *)(packet + 1);
      e8:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
      ec:	0000f10f 	andeq	pc, r0, pc, lsl #2
        if(receivedPtr->receiverId == nodeId) {
      f0:	c1040800 	tstgt	r4, r0, lsl #16
      f4:	02000000 	andeq	r0, r0, #0
      f8:	02a40801 	adceq	r0, r4, #65536	; 0x10000
            proceed Broadcast; // Proceed to handling broadcast message
      fc:	8c090000 	stchi	0, cr0, [r9], {-0}
        proceed Receiving;
     100:	05000003 	streq	r0, [r0, #-3]
     104:	0b10016e 	bleq	4006c4 <__ccfg+0x3e071c>
        ser_outf(Receive_Msg, "Message ");
     108:	08000001 	stmdaeq	r0, {r0}
     10c:	00011104 	andeq	r1, r1, r4, lsl #2
        proceed Show_Message;
     110:	1d010a00 	vstrne	s0, [r1, #-0]
        ser_outf(Broadcast, "Broadcast ");
     114:	0b000001 	bleq	120 <_Min_Stack_Size+0x20>
     118:	000000c1 	andeq	r0, r0, r1, asr #1
        ser_outf(Show_Message, "Message from node %d (Seq %d): %s\n\r", receivedPtr->senderId, receivedPtr->sequenceNumber, receivedPtr->payload);
     11c:	06040c00 	streq	r0, [r4], -r0, lsl #24
     120:	01410908 	cmpeq	r1, r8, lsl #18
     124:	e50d0000 	str	r0, [sp, #-0]
     128:	06000002 	streq	r0, [r0], -r2
     12c:	00c1070f 	sbceq	r0, r1, pc, lsl #14
        tcv_endp(packet);
     130:	0d000000 	stceq	0, cr0, [r0, #-0]
     134:	0000022f 	andeq	r0, r0, pc, lsr #4
        proceed Receiving;
     138:	c1031006 	tstgt	r3, r6
}
     13c:	02000000 	andeq	r0, r0, #0
        proceed Receiving;
     140:	02cf0300 	sbceq	r0, pc, #0, 6
        } else if (receivedPtr->receiverId == '0' || receivedPtr->receiverId == 0) {
     144:	11060000 	mrsne	r0, (UNDEF: 6)
     148:	00011d03 	andeq	r1, r1, r3, lsl #26
            proceed Broadcast; // Proceed to handling broadcast message
     14c:	06200c00 	strteq	r0, [r0], -r0, lsl #24
}
     150:	01bf0916 			; <UNDEFINED> instruction: 0x01bf0916
     154:	a90d0000 	stmdbge	sp, {}	; <UNPREDICTABLE>
     158:	06000002 	streq	r0, [r0], -r2
     15c:	01d90817 	bicseq	r0, r9, r7, lsl r8
     160:	0d000000 	stceq	0, cr0, [r0, #-0]
     164:	000001a2 	andeq	r0, r0, r2, lsr #3
     168:	f4081806 	vst2.8	{d1-d2}, [r8], r6
     16c:	04000001 	streq	r0, [r0], #-1
     170:	0002160d 	andeq	r1, r2, sp, lsl #12
     174:	08190600 	ldmdaeq	r9, {r9, sl}
fsm send(struct msg * ptr) {
     178:	0000022a 	andeq	r0, r0, sl, lsr #4
     17c:	02750d08 	rsbseq	r0, r5, #8, 26	; 0x200
        address spkt = tcv_wnp(Send_Msg, sfd, sizeof(struct msg) + 4);
     180:	1a060000 	bne	180188 <__ccfg+0x1601e0>
     184:	00024508 	andeq	r4, r2, r8, lsl #10
     188:	aa0d0c00 	bge	343190 <__ccfg+0x3231e8>
     18c:	06000001 	streq	r0, [r0], -r1
     190:	025b081b 	subseq	r0, fp, #1769472	; 0x1b0000
        *p = ptr->senderId; p++;
     194:	0d100000 	ldceq	0, cr0, [r0, #-0]
     198:	000002b1 			; <UNDEFINED> instruction: 0x000002b1
        strcpy(p, ptr->payload);
     19c:	5b081c06 	blpl	2071bc <__ccfg+0x1e7214>
        *p = ptr->receiverId; p++;
     1a0:	14000002 	strne	r0, [r0], #-2
        *p = ptr->sequenceNumber; p++;
     1a4:	0001c20d 	andeq	ip, r1, sp, lsl #4
        strcpy(p, ptr->payload);
     1a8:	081d0600 	ldmdaeq	sp, {r9, sl}
        sequence++;
     1ac:	0000025b 	andeq	r0, r0, fp, asr r2
     1b0:	00650d18 	rsbeq	r0, r5, r8, lsl sp
     1b4:	1e060000 	cdpne	0, 0, cr0, cr6, cr0, {0}
        tcv_endp (spkt);
     1b8:	00008106 	andeq	r8, r0, r6, lsl #2
        ser_outf(Send_Msg, "\n\rMessage Sent\n\r");
     1bc:	0e001c00 	cdpeq	12, 0, cr1, cr0, cr0, {0}
     1c0:	00008101 	andeq	r8, r0, r1, lsl #2
}
     1c4:	0001d900 	andeq	sp, r1, r0, lsl #18
        finish;
     1c8:	00810b00 	addeq	r0, r1, r0, lsl #22
}
     1cc:	810b0000 	mrshi	r0, (UNDEF: 11)
     1d0:	0b000000 	bleq	1d8 <send+0x60>
     1d4:	000000b5 	strheq	r0, [r0], -r5
     1d8:	bf040800 	svclt	0x00040800
     1dc:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     1e0:	00008101 	andeq	r8, r0, r1, lsl #2
fsm root {
     1e4:	0001f400 	andeq	pc, r1, r0, lsl #8
     1e8:	00810b00 	addeq	r0, r1, r0, lsl #22
     1ec:	810b0000 	mrshi	r0, (UNDEF: 11)
     1f0:	00000000 	andeq	r0, r0, r0
     1f4:	01df0408 	bicseq	r0, pc, r8, lsl #8
     1f8:	010e0000 	mrseq	r0, (UNDEF: 14)
        sequence = 0;
     1fc:	00000081 	andeq	r0, r0, r1, lsl #1
        ptr = (struct Message *) umalloc(sizeof(struct msg));
     200:	0000021e 	andeq	r0, r0, lr, lsl r2
        sequence = 0;
     204:	0000810b 	andeq	r8, r0, fp, lsl #2
        ptr = (struct Message *) umalloc(sizeof(struct msg));
     208:	00e50b00 	rsceq	r0, r5, r0, lsl #22
     20c:	810b0000 	mrshi	r0, (UNDEF: 11)
     210:	0b000000 	bleq	218 <root+0x34>
        phys_cc1350(0, CC1350_BUF_SZ);
     214:	0000021e 	andeq	r0, r0, lr, lsl r2
        tcv_plug(0, &plug_null);
     218:	0002240b 	andeq	r2, r2, fp, lsl #8
     21c:	04080000 	streq	r0, [r8], #-0
        sfd = tcv_open(NONE, 0, 0);
     220:	00000081 	andeq	r0, r0, r1, lsl #1
     224:	01410408 	cmpeq	r1, r8, lsl #8
     228:	04080000 	streq	r0, [r8], #-0
     22c:	000001fa 	strdeq	r0, [r0], -sl
     230:	0081010e 	addeq	r0, r1, lr, lsl #2
            diag("unable to open TCV session");
     234:	02450000 	subeq	r0, r5, #0
     238:	e50b0000 	str	r0, [fp, #-0]
            syserror(EASSERT, "no session");
     23c:	0b000000 	bleq	244 <root+0x60>
     240:	00000224 	andeq	r0, r0, r4, lsr #4
        tcv_control(sfd, PHYSOPT_ON, NULL);
     244:	30040800 	andcc	r0, r4, r0, lsl #16
     248:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
        runfsm receiver;
     24c:	00008101 	andeq	r8, r0, r1, lsl #2
     250:	00025b00 	andeq	r5, r2, r0, lsl #22
        receiverId = 0;
     254:	00e50b00 	rsceq	r0, r5, r0, lsl #22
     258:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
        ser_outf(Menu, "\n\rP2P Chat (Node #%d)\n\r"
     25c:	00024b04 	andeq	r4, r2, r4, lsl #22
     260:	01dd0300 	bicseq	r0, sp, r0, lsl #6
        ser_inf(Choice, "%c", &choice);
     264:	1f060000 	svcne	0x00060000
     268:	00014d03 	andeq	r4, r1, r3, lsl #26
     26c:	02610f00 	rsbeq	r0, r1, #0, 30
        choice = toupper((unsigned char)choice);
     270:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
     274:	09030305 	stmdbeq	r3, {r0, r2, r8, r9}
     278:	00000299 	muleq	r0, r9, r2
     27c:	0031b311 	eorseq	fp, r1, r1, lsl r3
        switch (choice) {
     280:	03070500 	movweq	r0, #29952	; 0x7500
     284:	0000c107 	andeq	ip, r0, r7, lsl #2
     288:	7c110000 	ldcvc	0, cr0, [r1], {-0}
                proceed Broadcast_Transmission;
     28c:	05000004 	streq	r0, [r0, #-4]
                proceed Menu;
     290:	d9080308 	stmdble	r8, {r3, r8, r9}
        ser_outf(Change_ID, "\n\rNew node ID (1-25):");
     294:	04000000 	streq	r0, [r0], #-0
     298:	02d80900 	sbcseq	r0, r8, #0, 18
        ser_inf(Get_ChangeID, "%d", &nodeId);
     29c:	09050000 	stmdbeq	r5, {}	; <UNPREDICTABLE>
     2a0:	02720303 	rsbseq	r0, r2, #201326592	; 0xc000000
     2a4:	a1120000 	tstge	r2, r0
            if (nodeId < 1 || nodeId > 25) {
     2a8:	30000003 	andcc	r0, r0, r3
     2ac:	08030b05 	stmdaeq	r3, {r0, r2, r8, r9, fp}
                ser_outf(Get_ChangeID, "\n\rInvalid ID");
     2b0:	00000309 	andeq	r0, r0, r9, lsl #6
     2b4:	00144411 	andseq	r4, r4, r1, lsl r4
                proceed Change_ID;
     2b8:	03140500 	tsteq	r4, #0, 10
     2bc:	0000c107 	andeq	ip, r0, r7, lsl #2
            proceed Menu;
     2c0:	29110000 	ldmdbcs	r1, {}	; <UNPREDICTABLE>
        ser_outf(Direct_Transmission, "\n\rReceiver node ID (1-25):");
     2c4:	05000002 	streq	r0, [r0, #-2]
     2c8:	c1070315 	tstgt	r7, r5, lsl r3
        ser_inf(Get_ReceiverID, "%d", &receiverId);
     2cc:	02000000 	andeq	r0, r0, #0
     2d0:	00038f11 	andeq	r8, r3, r1, lsl pc
     2d4:	03160500 	tsteq	r6, #0, 10
            if (receiverId < 1 || receiverId > 25) {
     2d8:	0000fe0a 	andeq	pc, r0, sl, lsl #28
     2dc:	f1110400 			; <UNDEFINED> instruction: 0xf1110400
                ser_outf(Get_ReceiverID, "\n\rInvalid ID");
     2e0:	0500000e 	streq	r0, [r0, #-14]
     2e4:	d9080317 	stmdble	r8, {r0, r1, r2, r4, r8, r9}
                proceed Direct_Transmission;
     2e8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     2ec:	00032a11 	andeq	r2, r3, r1, lsl sl
        ser_outf(Broadcast_Transmission, "\n\rMessage: ");
     2f0:	03180500 	tsteq	r8, #0, 10
     2f4:	0003090f 	andeq	r0, r3, pc, lsl #18
        ser_in(Receive_Msg, ptr->payload, 27);
     2f8:	24110c00 	ldrcs	r0, [r1], #-3072	; 0xfffff400
     2fc:	05000002 	streq	r0, [r0, #-2]
     300:	19150319 	ldmdbne	r5, {r0, r3, r4, r8, r9}
        if(strlen(ptr->payload) >= 27) {
     304:	2c000003 	stccs	0, cr0, [r0], {3}
     308:	02991300 	addseq	r1, r9, #0, 6
     30c:	03190000 	tsteq	r9, #0
            ptr->payload[26] = '\0';
     310:	88140000 	ldmdahi	r4, {}	; <UNPREDICTABLE>
     314:	03000000 	movweq	r0, #0
        call send(ptr, Menu);
     318:	a6040800 	strge	r0, [r4], -r0, lsl #16
        ptr->senderId = nodeId;
     31c:	09000002 	stmdbeq	r0, {r1}
     320:	000003ac 	andeq	r0, r0, ip, lsr #7
        ptr->receiverId = receiverId;
     324:	1b031c05 	blne	c7340 <__ccfg+0xa7398>
        ptr->sequenceNumber = (byte)sequence;
     328:	000002a6 	andeq	r0, r0, r6, lsr #5
     32c:	00028415 	andeq	r8, r2, r5, lsl r4
        call send(ptr, Menu);
     330:	031e0500 	tsteq	lr, #0, 10
     334:	00033b14 	andeq	r3, r3, r4, lsl fp
     338:	08010100 	stmdaeq	r1, {r8}
     33c:	00031f04 	andeq	r1, r3, r4, lsl #30
                proceed Direct_Transmission;
     340:	035d1600 	cmpeq	sp, #0, 12
                ser_outf(Choice, "\n\rIncorrect Option.");
     344:	0c070000 	stceq	0, cr0, [r7], {-0}
     348:	00026d18 	andeq	r6, r2, r8, lsl sp
                proceed Menu;
     34c:	17010100 	strne	r0, [r1, -r0, lsl #2]
}
     350:	0067736d 	rsbeq	r7, r7, sp, ror #6
     354:	0817011e 	ldmdaeq	r7, {r1, r2, r3, r4, r8}
     358:	00000391 	muleq	r0, r1, r3
     35c:	0003830d 	andeq	r8, r3, sp, lsl #6
     360:	0a180100 	beq	600768 <__ccfg+0x5e07c0>
     364:	000000cd 	andeq	r0, r0, sp, asr #1
     368:	030b0d00 	movweq	r0, #48384	; 0xbd00
     36c:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
     370:	0000cd0a 	andeq	ip, r0, sl, lsl #26
     374:	1f0d0100 	svcne	0x000d0100
     378:	01000000 	mrseq	r0, (UNDEF: 0)
     37c:	00cd0a1a 	sbceq	r0, sp, sl, lsl sl
     380:	0d020000 	stceq	0, cr0, [r2, #-0]
     384:	0000026d 	andeq	r0, r0, sp, ror #4
     388:	910a1b01 	tstls	sl, r1, lsl #22
     38c:	03000003 	movweq	r0, #3
     390:	00cd1300 	sbceq	r1, sp, r0, lsl #6
     394:	03a10000 			; <UNDEFINED> instruction: 0x03a10000
     398:	88140000 	ldmdahi	r4, {}	; <UNPREDICTABLE>
     39c:	1a000000 	bne	3a4 <devinit_uart>
     3a0:	009c1800 	addseq	r1, ip, r0, lsl #16
static void devinit_uart (int devnum) {
     3a4:	1f010000 	svcne	0x00010000
	adddevfunc (ioreq_uart_a, devnum);
     3a8:	0000cd06 	andeq	ip, r0, r6, lsl #26
     3ac:	03050100 	movweq	r0, #20736	; 0x5100
void udelay (volatile word n) {
     3b0:	20000108 	andcs	r0, r0, r8, lsl #2
     3b4:	00020d18 	andeq	r0, r2, r8, lsl sp
	while (n) {
     3b8:	05200100 	streq	r0, [r0, #-256]!	; 0xffffff00
     3bc:	00000081 	andeq	r0, r0, r1, lsl #1
}
     3c0:	1c030501 	cfstr32ne	mvfx0, [r3], {1}
	while (n--);
     3c4:	19200001 	stmdbne	r0!, {r0}
     3c8:	00646673 	rsbeq	r6, r4, r3, ror r6
     3cc:	81052301 	tsthi	r5, r1, lsl #6
		n--;
     3d0:	01000000 	mrseq	r0, (UNDEF: 0)
     3d4:	01200305 			; <UNDEFINED> instruction: 0x01200305
     3d8:	011a2000 	tsteq	sl, r0
void mdelay (volatile word n) {
     3dc:	000003cc 	andeq	r0, r0, ip, asr #7
     3e0:	01067f01 	tsteq	r6, r1, lsl #30
	while (n) {
     3e4:	000001e4 	andeq	r0, r0, r4, ror #3
     3e8:	000003a4 	andeq	r0, r0, r4, lsr #7
}
     3ec:	04de9c01 	ldrbeq	r9, [lr], #3073	; 0xc01
		udelay (999);
     3f0:	731b0000 	tstvc	fp, #0
     3f4:	01000000 	mrseq	r0, (UNDEF: 0)
		n--;
     3f8:	00c1117f 	sbceq	r1, r1, pc, ror r1
     3fc:	00000000 	andeq	r0, r0, r0
     400:	8e1c0000 	cdphi	0, 1, cr0, cr12, cr0, {0}
     404:	01000002 	tsteq	r0, r2
void __pi_ondomain (lword d) {
     408:	01fa1186 	mvnseq	r1, r6, lsl #3
     40c:	941c0000 	ldrls	r0, [ip], #-0
		if (__pi_systat.effpdm > 1)
     410:	01000003 	tsteq	r0, r3
     414:	025213a2 	subseq	r1, r2, #-2013265918	; 0x88000002
			__pi_systat.effpdm = 1;
     418:	ea1c0000 	b	700420 <__ccfg+0x6e0478>
	PRCMPowerDomainOn (d);
     41c:	01000002 	tsteq	r0, r2
     420:	026415ae 	rsbeq	r1, r4, #729808896	; 0x2b800000
     424:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
     428:	01000000 	mrseq	r0, (UNDEF: 0)
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     42c:	029418cd 	addseq	r1, r4, #13434880	; 0xcd0000
     430:	f81c0000 			; <UNDEFINED> instruction: 0xf81c0000
     434:	01000001 	tsteq	r0, r1
	__pi_systat.ondmns |= d;
     438:	029c1bd3 	addseq	r1, ip, #216064	; 0x34c00
     43c:	671c0000 	ldrvs	r0, [ip, -r0]
}
     440:	01000003 	tsteq	r0, r3
     444:	02c422e1 	sbceq	r2, r4, #268435470	; 0x1000000e
void __pi_offdomain (lword d) {
     448:	3f1c0000 	svccc	0x001c0000
	PRCMPowerDomainOff (d);
     44c:	01000003 	tsteq	r0, r3
     450:	02cc1de7 	sbceq	r1, ip, #14784	; 0x39c0
     454:	001c0000 	andseq	r0, ip, r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     458:	01000000 	mrseq	r0, (UNDEF: 0)
     45c:	02ee25f4 	rsceq	r2, lr, #244, 10	; 0x3d000000
     460:	161c0000 	ldrne	r0, [ip], -r0
     464:	01000003 	tsteq	r0, r3
	if (d & PRCM_DOMAIN_RFCORE) {
     468:	02f61afa 	rscseq	r1, r6, #1024000	; 0xfa000
     46c:	b21d0000 	andslt	r0, sp, #0
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     470:	01000001 	tsteq	r0, r1
			__pi_systat.effpdm = __pi_systat.reqpdm;
     474:	16160104 	ldrne	r0, [r6], -r4, lsl #2
     478:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
	__pi_systat.ondmns &= ~d;
     47c:	00000048 	andeq	r0, r0, r8, asr #32
     480:	00030b1f 	andeq	r0, r3, pc, lsl fp
}
     484:	11800100 	orrne	r0, r0, r0, lsl #2
     488:	000000cd 	andeq	r0, r0, sp, asr #1
void __pi_syserror (word ec, const char *m) {
     48c:	01180305 	tsteq	r8, r5, lsl #6
	diag ("SYSERR: %x, %s", ec, m);
     490:	70202000 	eorvc	r2, r0, r0
     494:	01007274 	tsteq	r0, r4, ror r2
  __ASM volatile ("cpsid i" : : : "memory");
     498:	04de1881 	ldrbeq	r1, [lr], #2177	; 0x881
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     49c:	03050000 	movweq	r0, #20480	; 0x5000
		all_leds_blink;
     4a0:	20000110 	andcs	r0, r0, r0, lsl r1
     4a4:	0001fa21 	andeq	pc, r1, r1, lsr #20
     4a8:	00025200 	andeq	r5, r2, r0, lsl #4
     4ac:	0004b800 	andeq	fp, r4, r0, lsl #16
     4b0:	03c42200 	biceq	r2, r4, #0, 4
     4b4:	00010000 	andeq	r0, r1, r0
     4b8:	0000601e 	andeq	r6, r0, lr, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4bc:	03561f00 	cmpeq	r6, #0, 30
     4c0:	b0010000 	andlt	r0, r1, r0
     4c4:	0000f70e 	andeq	pc, r0, lr, lsl #14
     4c8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     4cc:	00940123 	addseq	r0, r4, r3, lsr #2
     4d0:	00080000 	andeq	r0, r8, r0
	while (1) {
     4d4:	00000081 	andeq	r0, r0, r1, lsl #1
     4d8:	00002401 	andeq	r2, r0, r1, lsl #8
     4dc:	04080000 	streq	r0, [r8], #-0
void tci_run_delay_timer () {
     4e0:	0000034f 	andeq	r0, r0, pc, asr #6
	setdel = __pi_mintk - __pi_old;
     4e4:	0268011a 	rsbeq	r0, r8, #-2147483642	; 0x80000006
     4e8:	5f010000 	svcpl	0x00010000
     4ec:	01780106 	cmneq	r8, r6, lsl #2
     4f0:	01e40000 	mvneq	r0, r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4f4:	9c010000 	stcls	0, cr0, [r1], {-0}
     4f8:	00000549 	andeq	r0, r0, r9, asr #10
     4fc:	0000731b 	andeq	r7, r0, fp, lsl r3
     500:	115f0100 	cmpne	pc, r0, lsl #2
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     504:	000000c1 	andeq	r0, r0, r1, asr #1
	sti_tim;
     508:	0000001e 	andeq	r0, r0, lr, lsl r0
}
     50c:	72747025 	rsbsvc	r7, r4, #37	; 0x25
     510:	295f0100 	ldmdbcs	pc, {r8}^	; <UNPREDICTABLE>
     514:	000004de 	ldrdeq	r0, [r0], -lr
     518:	0000003c 	andeq	r0, r0, ip, lsr r0
     51c:	0001e71c 	andeq	lr, r1, ip, lsl r7
     520:	15630100 	strbne	r0, [r3, #-256]!	; 0xffffff00
	cli_aux;
     524:	0000017e 	andeq	r0, r0, lr, ror r1
     528:	0000201e 	andeq	r2, r0, lr, lsl r0
     52c:	006e2600 	rsbeq	r2, lr, r0, lsl #12
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     530:	65010000 	strvs	r0, [r1, #-0]
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     534:	0000e511 	andeq	lr, r0, r1, lsl r5
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     538:	00005f00 	andeq	r5, r0, r0, lsl #30
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     53c:	00702700 	rsbseq	r2, r0, r0, lsl #14
	sti_aux;
     540:	49106901 	ldmdbmi	r0, {r0, r8, fp, sp, lr}
}
     544:	00000005 	andeq	r0, r0, r5
     548:	cd040800 	stcgt	8, cr0, [r4, #-0]
     54c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
void AONRTCIntHandler () {
     550:	00033601 	andeq	r3, r3, r1, lsl #12
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     554:	06280100 	strteq	r0, [r8], -r0, lsl #2
     558:	0000c801 	andeq	ip, r0, r1, lsl #16
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     55c:	00017800 	andeq	r7, r1, r0, lsl #16
		if (__pi_utims [0] == 0)
     560:	1b9c0100 	blne	fe700968 <_estack+0xde6fb968>
     564:	00000073 	andeq	r0, r0, r3, ror r0
		if (*(__pi_utims [0])) {
     568:	c1152801 	tstgt	r5, r1, lsl #16
     56c:	7d000000 	stcvc	0, cr0, [r0, #-0]
			(*(__pi_utims [0]))--;
     570:	1c000000 	stcne	0, cr0, [r0], {-0}
		if (__pi_utims [1] == 0)
     574:	000002f9 	strdeq	r0, [r0], -r9
		if (*(__pi_utims [1])) {
     578:	d8163101 	ldmdale	r6, {r0, r8, ip, sp}
			aux_timer_inactive = 0;
     57c:	1c000000 	stcne	0, cr0, [r0], {-0}
			(*(__pi_utims [1]))--;
     580:	00000316 	andeq	r0, r0, r6, lsl r3
		if (__pi_utims [2] == 0)
     584:	e61a3801 	ldr	r3, [sl], -r1, lsl #16
		if (*(__pi_utims [2])) {
     588:	1c000000 	stcne	0, cr0, [r0], {-0}
			(*(__pi_utims [2]))--;
     58c:	0000007b 	andeq	r0, r0, fp, ror r0
		if (__pi_utims [3] != 0) {
     590:	06154801 	ldreq	r4, [r5], -r1, lsl #16
			if (*(__pi_utims [3])) {
     594:	1c000001 	stcne	0, cr0, [r0], {1}
				aux_timer_inactive = 0;
     598:	0000023f 	andeq	r0, r0, pc, lsr r2
				(*(__pi_utims [3]))--;
     59c:	14184f01 	ldrne	r4, [r8], #-3841	; 0xfffff0ff
	if (__pi_systat.ledsts) {
     5a0:	1c000001 	stcne	0, cr0, [r0], {1}
     5a4:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
		if (__pi_systat.ledblc++ == 0) {
     5a8:	1c1b5501 	cfldr32ne	mvfx5, [fp], {1}
     5ac:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
			if (__pi_systat.ledblk) {
     5b0:	00000000 	andeq	r0, r0, r0
     5b4:	00027d1f 	andeq	r7, r2, pc, lsl sp
     5b8:	142a0100 	strtne	r0, [sl], #-256	; 0xffffff00
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     5bc:	000000e5 	andeq	r0, r0, r5, ror #1
     5c0:	010c0305 	tsteq	ip, r5, lsl #6
     5c4:	c31f2000 	tstgt	pc, #0
				if (__pi_systat.ledsts & 0x2)
     5c8:	01000002 	tsteq	r0, r2
     5cc:	04de182c 	ldrbeq	r1, [lr], #2092	; 0x82c
     5d0:	03050000 	movweq	r0, #20480	; 0x5000
				if (__pi_systat.ledsts & 0x4)
     5d4:	20000114 	andcs	r0, r0, r4, lsl r1
				__pi_systat.ledblk = 0;
     5d8:	55000000 	strpl	r0, [r0, #-0]
     5dc:	03000014 	movweq	r0, #20
			if (__pi_systat.fstblk)
     5e0:	00023900 	andeq	r3, r2, r0, lsl #18
     5e4:	d0010400 	andle	r0, r1, r0, lsl #8
				__pi_systat.ledblc = 200;
     5e8:	0c000000 	stceq	0, cr0, [r0], {-0}
	if (events & AON_RTC_EVFLAGS_CH0) {
     5ec:	00000923 	andeq	r0, r0, r3, lsr #18
		cli_tim;
     5f0:	000000a3 	andeq	r0, r0, r3, lsr #1
		__pi_new += setdel;
     5f4:	00000458 	andeq	r0, r0, r8, asr r4
		cli_tim;
     5f8:	00000000 	andeq	r0, r0, r0
		__pi_new += setdel;
     5fc:	000003c2 	andeq	r0, r0, r2, asr #7
     600:	9d060102 	stflss	f0, [r6, #-8]
     604:	02000002 	andeq	r0, r0, #2
		RISE_N_SHINE;
     608:	02b90502 	adcseq	r0, r9, #8388608	; 0x800000
     60c:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
}
     610:	10000020 	andne	r0, r0, r0, lsr #32
		aux_timer_inactive = 1;
     614:	003f1828 	eorseq	r1, pc, r8, lsr #16
     618:	04020000 	streq	r0, [r2], #-0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     61c:	00005c05 	andeq	r5, r0, r5, lsl #24
     620:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
     624:	00000057 	andeq	r0, r0, r7, asr r0
				if (__pi_systat.ledsts & 0x2)
     628:	001f3303 	andseq	r3, pc, r3, lsl #6
     62c:	182e1000 	stmdane	lr!, {ip}
     630:	00000059 	andeq	r0, r0, r9, asr r0
				if (__pi_systat.ledsts & 0x4)
     634:	9b080102 	blls	200a44 <__ccfg+0x1e0a9c>
				__pi_systat.ledblk = 1;
     638:	03000002 	movweq	r0, #2
     63c:	00002329 	andeq	r2, r0, r9, lsr #6
		if (aux_timer_inactive) {
     640:	6c193110 	ldfvss	f3, [r9], {16}
			cli_aux;
     644:	02000000 	andeq	r0, r0, #0
     648:	01ca0702 	biceq	r0, sl, r2, lsl #14
     64c:	cb030000 	blgt	c0654 <__ccfg+0xa06ac>
     650:	1000001e 	andne	r0, r0, lr, lsl r0
     654:	007f1934 	rsbseq	r1, pc, r4, lsr r9	; <UNPREDICTABLE>
     658:	04020000 	streq	r0, [r2], #-0
     65c:	00004507 	andeq	r4, r0, r7, lsl #10
     660:	07080200 	streq	r0, [r8, -r0, lsl #4]
     664:	00000040 	andeq	r0, r0, r0, asr #32
word tci_update_delay_ticks (Boolean force) {
     668:	69050404 	stmdbvs	r5, {r2, sl}
	cli_tim;
     66c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
     670:	004a0704 	subeq	r0, sl, r4, lsl #14
	if (setdel) {
     674:	25030000 	strcs	r0, [r3, #-0]
		if (force) {
     678:	11000008 	tstne	r0, r8
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     67c:	004d1226 	subeq	r1, sp, r6, lsr #4
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     680:	85030000 	strhi	r0, [r3, #-0]
     684:	1100001d 	tstne	r0, sp, lsl r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     688:	00601227 	rsbeq	r1, r0, r7, lsr #4
				AON_RTC_O_CH0CMP)) - gettav ());
     68c:	a7050000 	strge	r0, [r5, -r0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     690:	06000000 	streq	r0, [r0], -r0
     694:	000000a7 	andeq	r0, r0, r7, lsr #1
     698:	0008f003 	andeq	pc, r8, r3
     69c:	12281100 	eorne	r1, r8, #0, 2
}
     6a0:	00000033 	andeq	r0, r0, r3, lsr r0
		sti_tim;
     6a4:	00131703 	andseq	r1, r3, r3, lsl #14
     6a8:	122b1100 	eorne	r1, fp, #0, 2
		return YES;
     6ac:	0000004d 	andeq	r0, r0, sp, asr #32
     6b0:	0000c906 	andeq	ip, r0, r6, lsl #18
     6b4:	00c90500 	sbceq	r0, r9, r0, lsl #10
     6b8:	71030000 	mrsvc	r0, (UNDEF: 3)
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6bc:	1100001d 	tstne	r0, sp, lsl r0
	UARTDisable (UART0_BASE);
     6c0:	0073122c 	rsbseq	r1, r3, ip, lsr #4
     6c4:	df050000 	svcle	0x00050000
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6c8:	03000000 	movweq	r0, #0
	UARTDisable (UART0_BASE);
     6cc:	0000021e 	andeq	r0, r0, lr, lsl r2
	UARTConfigSetExpClk (UART0_BASE,
     6d0:	73122d11 	tstvc	r2, #1088	; 0x440
     6d4:	03000000 	movweq	r0, #0
     6d8:	00000251 	andeq	r0, r0, r1, asr r2
     6dc:	08102e11 	ldmdaeq	r0, {r0, r4, r9, sl, fp, sp}
     6e0:	07000001 	streq	r0, [r0, -r1]
}
     6e4:	0000a704 	andeq	sl, r0, r4, lsl #14
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6e8:	11080800 	tstne	r8, r0, lsl #16
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     6ec:	019c0932 	orrseq	r0, ip, r2, lsr r9
     6f0:	97090000 	strls	r0, [r9, -r0]
     6f4:	11000006 	tstne	r0, r6
	urates [0] = rate;
     6f8:	00c90734 	sbceq	r0, r9, r4, lsr r7
}
     6fc:	01010000 	mrseq	r0, (UNDEF: 1)
     700:	c5090007 	strgt	r0, [r9, #-7]
     704:	11000004 	tstne	r0, r4
     708:	00c90335 	sbceq	r0, r9, r5, lsr r3
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     70c:	01010000 	mrseq	r0, (UNDEF: 1)
     710:	4f090006 	svcmi	0x00090006
     714:	11000006 	tstne	r0, r6
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     718:	00c90336 	sbceq	r0, r9, r6, lsr r3
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     71c:	01010000 	mrseq	r0, (UNDEF: 1)
     720:	45090005 	strmi	r0, [r9, #-5]
	__pi_uart_setrate (urates [0], __pi_uart);
     724:	11000008 	tstne	r0, r8
     728:	00c90337 	sbceq	r0, r9, r7, lsr r3
     72c:	01010000 	mrseq	r0, (UNDEF: 1)
     730:	2d090004 	stccs	0, cr0, [r9, #-16]
     734:	11000008 	tstne	r0, r8
	switch (operation) {
     738:	00c90338 	sbceq	r0, r9, r8, lsr r3
static int ioreq_uart_a (int operation, char *buf, int len) {
     73c:	04010000 	streq	r0, [r1], #-0
     740:	0f0a0000 	svceq	0x000a0000
	switch (operation) {
     744:	11000008 	tstne	r0, r8
     748:	00c9073a 	sbceq	r0, r9, sl, lsr r7
     74c:	0a010000 	beq	40754 <__ccfg+0x207ac>
				len--;
     750:	00000409 	andeq	r0, r0, r9, lsl #8
				*buf++ = uart_a_read;
     754:	c9033c11 	stmdbgt	r3, {r0, r4, sl, fp, ip, sp}
			while (len && uart_a_char_available) {
     758:	02000000 	andeq	r0, r0, #0
     75c:	0004660a 	andeq	r6, r4, sl, lsl #12
			if (len != operation) {
     760:	033d1100 	teqeq	sp, #0, 2
}
     764:	000000c9 	andeq	r0, r0, r9, asr #1
     768:	05e30a03 	strbeq	r0, [r3, #2563]!	; 0xa03
			uart_a_disable_int;
     76c:	3f110000 	svccc	0x00110000
			if (uart_a_char_available) {
     770:	0000df08 	andeq	sp, r0, r8, lsl #30
			uart_a_disable_int;
     774:	03000400 	movweq	r0, #1024	; 0x400
     778:	000008cf 	andeq	r0, r0, pc, asr #17
     77c:	0e034111 	mcreq	1, 0, r4, cr3, cr1, {0}
			if (uart_a_char_available) {
     780:	06000001 	streq	r0, [r0], -r1
				uart_a_enable_int;
     784:	0000019c 	muleq	r0, ip, r1
     788:	00068b0b 	andeq	r8, r6, fp, lsl #22
     78c:	1a431100 	bne	10c4b94 <__ccfg+0x10a4bec>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     790:	000001a8 	andeq	r0, r0, r8, lsr #3
     794:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
			return -2;
     798:	000001c1 	andeq	r0, r0, r1, asr #3
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     79c:	a4080102 	strge	r0, [r8], #-258	; 0xfffffefe
				uart_a_write (*buf);
     7a0:	05000002 	streq	r0, [r0, #-2]
				len--;
     7a4:	000001c1 	andeq	r0, r0, r1, asr #3
			while (len && uart_a_room_in_tx) {
     7a8:	0007490b 	andeq	r4, r7, fp, lsl #18
     7ac:	1e451100 	dvfnes	f1, f5, f0
			if (len != operation) {
     7b0:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
			uart_a_disable_int;
     7b4:	08080101 	stmdaeq	r8, {r0, r8}
     7b8:	0c098f12 	stceq	15, cr8, [r9], {18}
     7bc:	0a000002 	beq	7cc <ioreq_uart_a+0x94>
			if (uart_a_room_in_tx) {
     7c0:	000006af 	andeq	r0, r0, pc, lsr #13
				uart_a_enable_int;
     7c4:	730b9012 	movwvc	r9, #45074	; 0xb012
     7c8:	00000000 	andeq	r0, r0, r0
     7cc:	0005310a 	andeq	r3, r5, sl, lsl #2
	switch (operation) {
     7d0:	08911200 	ldmeq	r1, {r9, ip}
			uart_a_disable_int;
     7d4:	000000a7 	andeq	r0, r0, r7, lsr #1
			if (uart_a_room_in_tx) {
     7d8:	098d0a04 	stmibeq	sp, {r2, r9, fp}
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7dc:	92120000 	andsls	r0, r2, #0
     7e0:	0000d510 	andeq	sp, r0, r0, lsl r5
			uart_a_enable_int;
     7e4:	03000600 	movweq	r0, #1536	; 0x600
     7e8:	0000084c 	andeq	r0, r0, ip, asr #16
     7ec:	db039312 	blle	e543c <__ccfg+0xc5494>
     7f0:	05000001 	streq	r0, [r0, #-1]
			return 0;
     7f4:	0000020c 	andeq	r0, r0, ip, lsl #4
			if (len == UART_CNTRL_SETRATE) {
     7f8:	00020c0c 	andeq	r0, r2, ip, lsl #24
				if (__pi_uart_setrate (*((word*)buf),
     7fc:	00022800 	andeq	r2, r2, r0, lsl #16
     800:	0b000d00 	bleq	3c08 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x100>
     804:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
				syserror (EREQPAR, "uar");
     808:	1d0f9912 	vstrne.16	s18, [pc, #-36]	; 7ec <ioreq_uart_a+0xb4>	; <UNPREDICTABLE>
			syserror (ENOOPER, "uai");
     80c:	01000002 	tsteq	r0, r2
			if (len == UART_CNTRL_GETRATE) {
     810:	da040701 	ble	10241c <__ccfg+0xe2474>
				return 1;
     814:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     818:	09911301 	ldmibeq	r1, {r0, r8, r9, ip}
			syserror (ENOOPER, "uai");
     81c:	00000266 	andeq	r0, r0, r6, ror #4
     820:	00091709 	andeq	r1, r9, r9, lsl #14
     824:	07931300 	ldreq	r1, [r3, r0, lsl #6]
     828:	000000c9 	andeq	r0, r0, r9, asr #1
     82c:	00010701 	andeq	r0, r1, r1, lsl #14
     830:	0003fa09 	andeq	pc, r3, r9, lsl #20
     834:	03941300 	orrseq	r1, r4, #0, 6
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     838:	000000c9 	andeq	r0, r0, r9, asr #1
void UART0IntHandler () {
     83c:	00000101 	andeq	r0, r0, r1, lsl #2
     840:	062c0300 	strteq	r0, [ip], -r0, lsl #6
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     844:	96130000 	ldrls	r0, [r3], -r0
     848:	00023c03 	andeq	r3, r2, r3, lsl #24
     84c:	02660500 	rsbeq	r0, r6, #0, 10
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     850:	720c0000 	andvc	r0, ip, #0
     854:	82000002 	andhi	r0, r0, #2
		RISE_N_SHINE;
     858:	0d000002 	stceq	0, cr0, [r0, #-8]
     85c:	02770500 	rsbseq	r0, r7, #0, 10
     860:	f20b0000 	vhadd.s8	d0, d11, d0
		i_trigger (devevent (UART_A, READ));
     864:	13000006 	movwne	r0, #6
     868:	0282179c 	addeq	r1, r2, #156, 14	; 0x2700000
     86c:	01010000 	mrseq	r0, (UNDEF: 1)
     870:	0000b30c 	andeq	fp, r0, ip, lsl #6
     874:	0002a000 	andeq	sl, r2, r0
     878:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
     87c:	00000295 	muleq	r0, r5, r2
     880:	0007ac0b 	andeq	sl, r7, fp, lsl #24
     884:	13061400 	movwne	r1, #25600	; 0x6400
     888:	000002a0 	andeq	r0, r0, r0, lsr #5
     88c:	9f0b0101 	svcls	0x000b0101
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     890:	12000005 	andne	r0, r0, #5
     894:	00df0ec3 	sbcseq	r0, pc, r3, asr #29
     898:	01010000 	mrseq	r0, (UNDEF: 1)
     89c:	00038c0e 	andeq	r8, r3, lr, lsl #24
		i_trigger (devevent (UART_A, WRITE));
     8a0:	016e1500 	cmneq	lr, r0, lsl #10
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     8a4:	0002ce10 	andeq	ip, r2, r0, lsl lr
     8a8:	d4040700 	strle	r0, [r4], #-1792	; 0xfffff900
		RISE_N_SHINE;
     8ac:	0f000002 	svceq	0x00000002
     8b0:	0002e001 	andeq	lr, r2, r1
     8b4:	00a71000 	adceq	r1, r7, r0
		i_trigger (devevent (UART_A, WRITE));
     8b8:	11000000 	mrsne	r0, (UNDEF: 0)
     8bc:	03031508 	movweq	r1, #13576	; 0x3508
     8c0:	00030709 	andeq	r0, r3, r9, lsl #14
     8c4:	31b31200 			; <UNDEFINED> instruction: 0x31b31200
     8c8:	07150000 	ldreq	r0, [r5, -r0]
     8cc:	00a70703 	adceq	r0, r7, r3, lsl #14
     8d0:	12000000 	andne	r0, r0, #0
     8d4:	0000047c 	andeq	r0, r0, ip, ror r4
     8d8:	08030815 	stmdaeq	r3, {r0, r2, r4, fp}
     8dc:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     8e0:	d80e0004 	stmdale	lr, {r2}
}
     8e4:	15000002 	strne	r0, [r0, #-2]
     8e8:	e0030309 	and	r0, r3, r9, lsl #6
     8ec:	13000002 	movwne	r0, #2
     8f0:	000003a1 	andeq	r0, r0, r1, lsr #7
void __buttons_setirq (int val) {
     8f4:	030b1530 	movweq	r1, #46384	; 0xb530
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     8f8:	00037708 	andeq	r7, r3, r8, lsl #14
     8fc:	14441200 	strbne	r1, [r4], #-512	; 0xfffffe00
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     900:	14150000 	ldrne	r0, [r5], #-0
     904:	00a70803 	adceq	r0, r7, r3, lsl #16
     908:	12000000 	andne	r0, r0, #0
     90c:	00000229 	andeq	r0, r0, r9, lsr #4
     910:	08031515 	stmdaeq	r3, {r0, r2, r4, r8, sl, ip}
		bn = BUTTON_GPIO (__button_list [i]);
     914:	000000a7 	andeq	r0, r0, r7, lsr #1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     918:	038f1202 	orreq	r1, pc, #536870912	; 0x20000000
     91c:	16150000 	ldrne	r0, [r5], -r0
     920:	02c10b03 	sbceq	r0, r1, #3072	; 0xc00
     924:	12040000 	andne	r0, r4, #0
     928:	00000ef1 	strdeq	r0, [r0], -r1
}
     92c:	09031715 	stmdbeq	r3, {r0, r2, r4, r8, r9, sl, ip}
     930:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     934:	032a1208 			; <UNDEFINED> instruction: 0x032a1208
     938:	18150000 	ldmdane	r5, {}	; <UNPREDICTABLE>
void __pinlist_setirq (int val) {
     93c:	03770f03 	cmneq	r7, #3, 30
	for (i = 0; i < N_PINLIST; i++) {
     940:	120c0000 	andne	r0, ip, #0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     944:	00000224 	andeq	r0, r0, r4, lsr #4
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     948:	15031915 	strne	r1, [r3, #-2325]	; 0xfffff6eb
	for (i = 0; i < N_PINLIST; i++) {
     94c:	00000387 	andeq	r0, r0, r7, lsl #7
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     950:	070c002c 	streq	r0, [ip, -ip, lsr #32]
     954:	87000003 	strhi	r0, [r0, -r3]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     958:	14000003 	strne	r0, [r0], #-3
     95c:	00000094 	muleq	r0, r4, r0
     960:	04070003 	streq	r0, [r7], #-3
     964:	00000314 	andeq	r0, r0, r4, lsl r3
  __ASM volatile ("cpsie i" : : : "memory");
     968:	0003ac0e 	andeq	sl, r3, lr, lsl #24
}
     96c:	031c1500 	tsteq	ip, #0, 10
     970:	0003141b 	andeq	r1, r3, fp, lsl r4
     974:	02841500 	addeq	r1, r4, #0, 10
void GPIOIntHandler () {
     978:	1e150000 	cdpne	0, 1, cr0, cr5, cr0, {0}
if (buttons_int) {
     97c:	03a91403 			; <UNDEFINED> instruction: 0x03a91403
     980:	01010000 	mrseq	r0, (UNDEF: 1)
     984:	038d0407 	orreq	r0, sp, #117440512	; 0x7000000
	buttons_disable ();
     988:	d10b0000 	mrsle	r0, (UNDEF: 11)
	i_trigger ((aword)&__button_list);
     98c:	16000003 	strne	r0, [r0], -r3
     990:	00a7131d 	adceq	r1, r7, sp, lsl r3
     994:	01010000 	mrseq	r0, (UNDEF: 1)
     998:	0006a60b 	andeq	sl, r6, fp, lsl #12
     99c:	1a1e1600 	bne	7861a4 <__ccfg+0x7661fc>
     9a0:	000000b8 	strheq	r0, [r0], -r8
     9a4:	8c0b0101 	stfhis	f0, [fp], {1}
     9a8:	16000008 	strne	r0, [r0], -r8
     9ac:	00b8241e 	adcseq	r2, r8, lr, lsl r4
     9b0:	01010000 	mrseq	r0, (UNDEF: 1)
     9b4:	00051e0b 	andeq	r1, r5, fp, lsl #28
     9b8:	14221600 	strtne	r1, [r2], #-1536	; 0xfffffa00
	RISE_N_SHINE;
     9bc:	000003a9 	andeq	r0, r0, r9, lsr #7
     9c0:	59030101 	stmdbpl	r3, {r0, r8}
if (pin_sensor_int) {
     9c4:	16000004 	strne	r0, [r0], -r4
     9c8:	03f31043 	mvnseq	r1, #67	; 0x43
     9cc:	04070000 	streq	r0, [r7], #-0
	i_trigger ((aword)(&__input_pins));
     9d0:	000003f9 	strdeq	r0, [r0], -r9
     9d4:	0405010f 	streq	r0, [r5], #-271	; 0xfffffef1
     9d8:	8d100000 	ldchi	0, cr0, [r0, #-0]
     9dc:	00000000 	andeq	r0, r0, r0
     9e0:	46160808 	ldrmi	r0, [r6], -r8, lsl #16
     9e4:	00042909 	andeq	r2, r4, r9, lsl #18
     9e8:	0ab00a00 	beq	fec031f0 <_estack+0xdebfe1f0>
     9ec:	4a160000 	bmi	5809f4 <__ccfg+0x560a4c>
     9f0:	0003e70f 	andeq	lr, r3, pc, lsl #14
     9f4:	1d0a0000 	stcne	0, cr0, [sl, #-0]
     9f8:	16000007 	strne	r0, [r0], -r7
     9fc:	008d074b 	addeq	r0, sp, fp, asr #14
	__pinsen_disable_and_clear;
     a00:	00040000 	andeq	r0, r4, r0
	RISE_N_SHINE;
     a04:	0004ed03 	andeq	lr, r4, r3, lsl #26
     a08:	034c1600 	movteq	r1, #50688	; 0xc600
}
     a0c:	00000405 	andeq	r0, r0, r5, lsl #8
     a10:	00042905 	andeq	r2, r4, r5, lsl #18
     a14:	00fc0c00 	rscseq	r0, ip, r0, lsl #24
     a18:	044a0000 	strbeq	r0, [sl], #-0
     a1c:	94140000 	ldrls	r0, [r4], #-0
     a20:	03000000 	movweq	r0, #0
void system_init () {
     a24:	08e50b00 	stmiaeq	r5!, {r8, r9, fp}^
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a28:	0d010000 	stceq	0, cr0, [r1, #-0]
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a2c:	00043a12 	andeq	r3, r4, r2, lsl sl
     a30:	0c010100 	stfeqs	f0, [r1], {-0}
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a34:	00000435 	andeq	r0, r0, r5, lsr r4
     a38:	00000468 	andeq	r0, r0, r8, ror #8
     a3c:	00009414 	andeq	r9, r0, r4, lsl r4
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a40:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
     a44:	00000458 	andeq	r0, r0, r8, asr r4
     a48:	00090116 	andeq	r0, r9, r6, lsl r1
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a4c:	18cf0100 	stmiane	pc, {r8}^	; <UNPREDICTABLE>
     a50:	00000468 	andeq	r0, r0, r8, ror #8
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a54:	0000eb0c 	andeq	lr, r0, ip, lsl #22
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a58:	00048900 	andeq	r8, r4, r0, lsl #18
     a5c:	00941400 	addseq	r1, r4, r0, lsl #8
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a60:	00100000 	andseq	r0, r0, r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a64:	00047905 	andeq	r7, r4, r5, lsl #18
     a68:	06801700 	streq	r1, [r0], r0, lsl #14
		pin = (port_confs [i] >> 19) & 0x1f;
     a6c:	ec010000 	stc	0, cr0, [r1], {-0}
     a70:	0004890d 	andeq	r8, r4, sp, lsl #18
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a74:	03050100 	movweq	r0, #20736	; 0x5100
     a78:	00004310 	andeq	r4, r0, r0, lsl r3
     a7c:	0004cc18 	andeq	ip, r4, r8, lsl ip
     a80:	010c0100 	mrseq	r0, (UNDEF: 28)
     a84:	0000a70d 	andeq	sl, r0, sp, lsl #14
     a88:	2c030500 	cfstr32cs	mvfx0, [r3], {-0}
     a8c:	0c200001 	stceq	0, cr0, [r0], #-4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a90:	0000020c 	andeq	r0, r0, ip, lsl #4
		if (port_confs [i] & 0x40)
     a94:	000004c4 	andeq	r0, r0, r4, asr #9
     a98:	00009414 	andeq	r9, r0, r4, lsl r4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a9c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     aa0:	00000228 	andeq	r0, r0, r8, lsr #4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     aa4:	0802d001 	stmdaeq	r2, {r0, ip, lr, pc}
	all_leds_blink;
     aa8:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
     aac:	01240305 			; <UNDEFINED> instruction: 0x01240305
     ab0:	a70c2000 	strge	r2, [ip, -r0]
     ab4:	e7000000 	str	r0, [r0, -r0]
     ab8:	14000004 	strne	r0, [r0], #-4
     abc:	00000094 	muleq	r0, r4, r0
     ac0:	3f180000 	svccc	0x00180000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac4:	01000004 	tsteq	r0, r4
     ac8:	d70d02d2 			; <UNDEFINED> instruction: 0xd70d02d2
     acc:	05000004 	streq	r0, [r0, #-4]
     ad0:	00013403 	andeq	r3, r1, r3, lsl #8
     ad4:	02b31a20 	adcseq	r1, r3, #32, 20	; 0x20000
     ad8:	8c010000 	stchi	0, cr0, [r1], {-0}
     adc:	03050704 	movweq	r0, #22276	; 0x5704
	IntEnable (INT_AON_RTC_COMB);
     ae0:	20000130 	andcs	r0, r0, r0, lsr r1
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ae4:	0433011b 	ldrteq	r0, [r3], #-283	; 0xfffffee5
     ae8:	72010000 	andvc	r0, r1, #0
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     aec:	8d010505 	cfstr32hi	mvfx0, [r1, #-20]	; 0xffffffec
	IntEnable (INT_AON_RTC_COMB);
     af0:	44000000 	strmi	r0, [r0], #-0
     af4:	a800000e 	stmdage	r0, {r1, r2, r3}
	__pi_malloc_init ();
     af8:	0100000e 	tsteq	r0, lr
	IntEnable (INT_AON_GPIO_EDGE);
     afc:	00054d9c 	muleq	r5, ip, sp
     b00:	04401c00 	strbeq	r1, [r0], #-3072	; 0xfffff400
     b04:	053b0000 	ldreq	r0, [fp, #-0]!
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b08:	691d0000 	ldmdbvs	sp, {}	; <UNPREDICTABLE>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b0c:	05760100 	ldrbeq	r0, [r6, #-256]!	; 0xffffff00
     b10:	0000bd11 	andeq	fp, r0, r1, lsl sp
     b14:	c01e0000 	andsgt	r0, lr, r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b18:	8c000011 	stchi	0, cr0, [r0], {17}
     b1c:	8e00000e 	cdphi	0, 0, cr0, cr0, cr14, {0}
     b20:	0100000e 	tsteq	r0, lr
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b24:	0002058d 	andeq	r0, r2, sp, lsl #11
     b28:	0737011f 			; <UNDEFINED> instruction: 0x0737011f
     b2c:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
	urates [0] = UART_RATE / 100;
     b30:	0bdc2105 	bleq	ff708f4c <_estack+0xdf703f4c>
     b34:	0e440000 	cdpeq	0, 4, cr0, cr4, cr0, {0}
     b38:	9c010000 	stcls	0, cr0, [r1], {-0}
	reinit_uart ();
     b3c:	000007ad 	andeq	r0, r0, sp, lsr #15
	EXTRA_INITIALIZERS;
     b40:	00074420 	andeq	r4, r7, r0, lsr #8
     b44:	01080d00 	tsteq	r8, r0, lsl #26
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b48:	00119921 	andseq	r9, r1, r1, lsr #18
     b4c:	000bdc00 	andeq	sp, fp, r0, lsl #24
     b50:	0002f800 	andeq	pc, r2, r0, lsl #16
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b54:	056a0100 	strbeq	r0, [sl, #-256]!	; 0xffffff00
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b58:	00058802 	andeq	r8, r5, r2, lsl #16
			devinit [i] . init (devinit [i] . param);
     b5c:	11a82200 			; <UNDEFINED> instruction: 0x11a82200
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b60:	23000000 	movwcs	r0, #0
     b64:	000007db 	ldrdeq	r0, [r0], -fp
     b68:	00000c14 	andeq	r0, r0, r4, lsl ip
	IntEnable (INT_UART0_COMB);
     b6c:	00000318 	andeq	r0, r0, r8, lsl r3
     b70:	7c02270d 	stcvc	7, cr2, [r2], {13}
     b74:	24000007 	strcs	r0, [r0], #-7
}
     b78:	00000318 	andeq	r0, r0, r8, lsl r3
	tci_run_auxiliary_timer ();
     b7c:	0007e925 	andeq	lr, r7, r5, lsr #18
		diag ("");
     b80:	000c9400 	andeq	r9, ip, r0, lsl #8
     b84:	14011e00 	strne	r1, [r1], #-3584	; 0xfffff200
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     b88:	0c780000 	ldcleq	0, cr0, [r8], #-0
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     b8c:	0c840000 	stceq	0, cr0, [r4], {0}
		diag ("Leftover RAM: %d bytes",
     b90:	a4010000 	strge	r0, [r1], #-0
     b94:	251e0404 	ldrcs	r0, [lr, #-1028]	; 0xfffffbfc
     b98:	90000012 	andls	r0, r0, r2, lsl r0
     b9c:	9400000c 	strls	r0, [r0], #-12
     ba0:	0100000c 	tsteq	r0, ip
     ba4:	1e0404aa 	cdpne	4, 0, cr0, cr4, cr10, {5}
     ba8:	00001225 	andeq	r1, r0, r5, lsr #4
     bac:	00000cb2 			; <UNDEFINED> instruction: 0x00000cb2
     bb0:	00000cb8 			; <UNDEFINED> instruction: 0x00000cb8
     bb4:	0404b301 	streq	fp, [r4], #-769	; 0xfffffcff
     bb8:	00128926 	andseq	r8, r2, r6, lsr #18
     bbc:	000cb800 	andeq	fp, ip, r0, lsl #16
     bc0:	00033800 	andeq	r3, r3, r0, lsl #16
     bc4:	04bb0100 	ldrteq	r0, [fp], #256	; 0x100
     bc8:	140c2604 	strne	r2, [ip], #-1540	; 0xfffff9fc
     bcc:	0cb80000 	ldceq	0, cr0, [r8]
     bd0:	03580000 	cmpeq	r8, #0
     bd4:	c5010000 	strgt	r0, [r1, #-0]
     bd8:	57210404 	strpl	r0, [r1, -r4, lsl #8]!
__attribute__ ((noreturn)) void __pi_release () {
     bdc:	c0000012 	andgt	r0, r0, r2, lsl r0
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     be0:	7800000c 	stmdavc	r0, {r2, r3}
     be4:	01000003 	tsteq	r0, r3
	check_stack_overflow;
     be8:	1a0404c0 	bne	101ef0 <__ccfg+0xe1f48>
     bec:	22000006 	andcs	r0, r0, #6
     bf0:	00001266 	andeq	r1, r0, r6, ror #4
     bf4:	12252600 	eorne	r2, r5, #0, 12
	for_all_tasks (__pi_curr) {
     bf8:	0cca0000 	stcleq	0, cr0, [sl], {0}
	update_n_wake (MAX_WORD, NO);
     bfc:	03900000 	orrseq	r0, r0, #0
     c00:	c3010000 	movwgt	r0, #4096	; 0x1000
	for_all_tasks (__pi_curr) {
     c04:	17210404 	strne	r0, [r1, -r4, lsl #8]!
     c08:	e2000014 	and	r0, r0, #20
     c0c:	a800000c 	stmdage	r0, {r2, r3}
     c10:	01000003 	tsteq	r0, r3
	system_event_count ++;
     c14:	460404cc 	strmi	r0, [r4], -ip, asr #9
  __ASM volatile ("cpsid i" : : : "memory");
     c18:	22000006 	andcs	r0, r0, #6
	__SLEEP;
     c1c:	00001426 	andeq	r1, r0, r6, lsr #8
     c20:	13f62600 	mvnsne	r2, #0, 12
     c24:	0ce40000 	stcleq	0, cr0, [r4]
     c28:	03c00000 	biceq	r0, r0, #0
     c2c:	d5010000 	strle	r0, [r1, #-0]
     c30:	251e0404 	ldrcs	r0, [lr, #-1028]	; 0xfffffbfc
	switch (__pi_systat.effpdm) {
     c34:	08000012 	stmdaeq	r0, {r1, r4}
     c38:	0c00000d 	stceq	0, cr0, [r0], {13}
     c3c:	0100000d 	tsteq	r0, sp
     c40:	1e0404df 	mcrne	4, 0, r0, cr4, cr15, {6}
  __ASM volatile ("cpsie i" : : : "memory");
     c44:	00001401 	andeq	r1, r0, r1, lsl #8
     c48:	00000d36 	andeq	r0, r0, r6, lsr sp
	check_stack_overflow;
     c4c:	00000d44 	andeq	r0, r0, r4, asr #26
     c50:	0404e801 	streq	lr, [r4], #-2049	; 0xfffff7ff
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c54:	00125727 	andseq	r5, r2, r7, lsr #14
     c58:	000d4400 	andeq	r4, sp, r0, lsl #8
     c5c:	000d4800 	andeq	r4, sp, r0, lsl #16
			(__pi_curr->code) (tstate (__pi_curr));
     c60:	04ed0100 	strbteq	r0, [sp], #256	; 0x100
	for_all_tasks (__pi_curr) {
     c64:	00069404 	andeq	r9, r6, r4, lsl #8
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c68:	12662200 	rsbne	r2, r6, #0, 4
     c6c:	26000000 	strcs	r0, [r0], -r0
     c70:	00001248 	andeq	r1, r0, r8, asr #4
     c74:	00000d48 	andeq	r0, r0, r8, asr #26
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c78:	000003e0 	andeq	r0, r0, r0, ror #7
     c7c:	0d04ee01 	stceq	14, cr14, [r4, #-4]
     c80:	00140c26 	andseq	r0, r4, r6, lsr #24
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c84:	000d6e00 	andeq	r6, sp, r0, lsl #28
     c88:	0003f800 	andeq	pc, r3, r0, lsl #16
     c8c:	04f70100 	ldrbteq	r0, [r7], #256	; 0x100
     c90:	14172104 	ldrne	r2, [r7], #-260	; 0xfffffefc
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c94:	0d6e0000 	stcleq	0, cr0, [lr, #-0]
     c98:	04100000 	ldreq	r0, [r0], #-0
     c9c:	fa010000 	blx	40ca4 <__ccfg+0x20cfc>
     ca0:	06d10404 	ldrbeq	r0, [r1], r4, lsl #8
			__WFI ();
     ca4:	26220000 	strtcs	r0, [r2], -r0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ca8:	00000014 	andeq	r0, r0, r4, lsl r0
     cac:	00127f1e 	andseq	r7, r2, lr, lsl pc
     cb0:	000d7a00 	andeq	r7, sp, r0, lsl #20
     cb4:	000d7e00 	andeq	r7, sp, r0, lsl #28
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cb8:	04fd0100 	ldrbteq	r0, [sp], #256	; 0x100
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cbc:	12251e04 	eorne	r1, r5, #4, 28	; 0x40
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cc0:	0d7e0000 	ldcleq	0, cr0, [lr, #-0]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cc4:	0d840000 	stceq	0, cr0, [r4]
     cc8:	00010000 	andeq	r0, r1, r0
     ccc:	5e270405 	cdppl	4, 2, cr0, cr7, cr5, {0}
     cd0:	8c00000b 	stchi	0, cr0, [r0], {11}
     cd4:	9800000d 	stmdals	r0, {r0, r2, r3}
     cd8:	0100000d 	tsteq	r0, sp
     cdc:	2504050d 	strcs	r0, [r4, #-1293]	; 0xfffffaf3
     ce0:	28000007 	stmdacs	r0, {r0, r1, r2}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ce4:	000012da 	ldrdeq	r1, [r0], -sl
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     ce8:	00000d8c 	andeq	r0, r0, ip, lsl #27
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cec:	00000d96 	muleq	r0, r6, sp
     cf0:	0203bd01 	andeq	fp, r3, #1, 26	; 0x40
     cf4:	0012f622 	andseq	pc, r2, r2, lsr #12
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     cf8:	12e92200 	rscne	r2, r9, #0, 4
     cfc:	00000000 	andeq	r0, r0, r0
     d00:	0012251e 	andseq	r2, r2, lr, lsl r5
			SysCtrlSetRechargeBeforePowerDown
     d04:	000dc200 	andeq	ip, sp, r0, lsl #4
     d08:	000dc800 	andeq	ip, sp, r0, lsl #16
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d0c:	053e0100 	ldreq	r0, [lr, #-256]!	; 0xffffff00
     d10:	123d1e04 	eorsne	r1, sp, #4, 28	; 0x40
     d14:	0dc80000 	stcleq	0, cr0, [r8]
     d18:	0dd40000 	ldcleq	0, cr0, [r4]
			__WFI ();
     d1c:	41010000 	mrsmi	r0, (UNDEF: 1)
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d20:	251e0405 	ldrcs	r0, [lr, #-1029]	; 0xfffffbfb
     d24:	d4000012 	strle	r0, [r0], #-18	; 0xffffffee
     d28:	d600000d 	strle	r0, [r0], -sp
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d2c:	0100000d 	tsteq	r0, sp
     d30:	1e040544 	cfsh32ne	mvfx0, mvfx4, #36
     d34:	00001248 	andeq	r1, r0, r8, asr #4
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d38:	00000dd6 	ldrdeq	r0, [r0], -r6
     d3c:	00000dd8 	ldrdeq	r0, [r0], -r8
     d40:	0b054701 	bleq	15294c <__ccfg+0x1329a4>
     d44:	00143426 	andseq	r3, r4, r6, lsr #8
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d48:	000ddc00 	andeq	sp, sp, r0, lsl #24
     d4c:	00042800 	andeq	r2, r4, r0, lsl #16
			while (!(AONWUCPowerStatusGet () &
     d50:	054b0100 	strbeq	r0, [fp, #-256]	; 0xffffff00
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d54:	29000004 	stmdbcs	r0, {r2}
     d58:	000011b6 			; <UNDEFINED> instruction: 0x000011b6
     d5c:	00000c18 	andeq	r0, r0, r8, lsl ip
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d60:	00000c1a 	andeq	r0, r0, sl, lsl ip
     d64:	2902270d 	stmdbcs	r2, {r0, r2, r3, r8, r9, sl, sp}
     d68:	000011c0 	andeq	r1, r0, r0, asr #3
     d6c:	00000c44 	andeq	r0, r0, r4, asr #24
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d70:	00000c46 	andeq	r0, r0, r6, asr #24
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d74:	2902270d 	stmdbcs	r2, {r0, r2, r3, r8, r9, sl, sp}
     d78:	000011c0 	andeq	r1, r0, r0, asr #3
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d7c:	00000dfc 	strdeq	r0, [r0], -ip
     d80:	00000dfe 	strdeq	r0, [r0], -lr
			SysCtrlAdjustRechargeAfterPowerDown ();
     d84:	0002270d 	andeq	r2, r2, sp, lsl #14
			reinit_uart ();
     d88:	07d7011b 	bfieq	r0, fp, #2, #22
     d8c:	5c010000 	stcpl	0, cr0, [r1], {-0}
     d90:	a7010605 	strge	r0, [r1, -r5, lsl #12]
	...
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d9c:	01000000 	mrseq	r0, (UNDEF: 0)
     da0:	0007db9c 	muleq	r7, ip, fp
     da4:	63732a00 	cmnvs	r3, #0, 20
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     da8:	055e0100 	ldrbeq	r0, [lr, #-256]	; 0xffffff00
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dac:	0000a707 	andeq	sl, r0, r7, lsl #14
     db0:	00009b00 	andeq	r9, r0, r0, lsl #22
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     db4:	ca2b0000 	bgt	ac0dbc <__ccfg+0xaa0e14>
     db8:	01000006 	tsteq	r0, r6
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     dbc:	0314048e 	tsteq	r4, #-1912602624	; 0x8e000000
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     dc0:	000007f3 	strdeq	r0, [r0], -r3
     dc4:	0009d12c 	andeq	sp, r9, ip, lsr #2
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     dc8:	04ad0100 	strteq	r0, [sp], #256	; 0x100
     dcc:	012d0001 			; <UNDEFINED> instruction: 0x012d0001
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     dd0:	00000656 	andeq	r0, r0, r6, asr r6
     dd4:	06047e01 	streq	r7, [r4], -r1, lsl #28
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     dd8:	00000001 	andeq	r0, r0, r1
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     ddc:	00000000 	andeq	r0, r0, r0
			PRCMPowerDomainOff (
     de0:	1e9c0100 	fmlnee	f0, f4, f0
     de4:	2e000008 	cdpcs	0, 0, cr0, cr0, cr8, {0}
     de8:	00000699 	muleq	r0, r9, r6
     dec:	19047e01 	stmdbne	r4, {r0, r9, sl, fp, ip, sp, lr}
     df0:	000000a7 	andeq	r0, r0, r7, lsr #1
	__SLEEP;
     df4:	000000ae 	andeq	r0, r0, lr, lsr #1
     df8:	a4011f00 	strge	r1, [r1], #-3840	; 0xfffff100
     dfc:	01000004 	tsteq	r0, r4
	goto Redo;
     e00:	24060401 	strcs	r0, [r6], #-1025	; 0xfffffbff
     e04:	dc00000a 	stcle	0, cr0, [r0], {10}
     e08:	0100000b 	tsteq	r0, fp
     e0c:	0009e79c 	muleq	r9, ip, r7
     e10:	0b5a2f00 	bleq	168ca18 <__ccfg+0x166ca70>
     e14:	0b600000 	bleq	1800e1c <__ccfg+0x17e0e74>
     e18:	084f0000 	stmdaeq	pc, {}^	; <UNPREDICTABLE>
     e1c:	691d0000 	ldmdbvs	sp, {}	; <UNPREDICTABLE>
     e20:	046b0100 	strbteq	r0, [fp], #-256	; 0xffffff00
     e24:	00008d0b 	andeq	r8, r0, fp, lsl #26
     e28:	0c260000 	stceq	0, cr0, [r6], #-0
     e2c:	54000014 	strpl	r0, [r0], #-20	; 0xffffffec
     e30:	0800000a 	stmdaeq	r0, {r1, r3}
     e34:	01000002 	tsteq	r0, r2
     e38:	21020408 	tstcs	r2, r8, lsl #8
     e3c:	00000f1d 	andeq	r0, r0, sp, lsl pc
     e40:	00000a58 	andeq	r0, r0, r8, asr sl
int main (void) {
     e44:	00000230 	andeq	r0, r0, r0, lsr r2
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e48:	02040b01 	andeq	r0, r4, #1024	; 0x400
     e4c:	000008e3 	andeq	r0, r0, r3, ror #17
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e50:	00023024 	andeq	r3, r2, r4, lsr #32
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e54:	0f2a3000 	svceq	0x002a3000
	system_init ();
     e58:	36310000 	ldrtcc	r0, [r1], -r0
	tcv_init ();
     e5c:	3000000f 	andcc	r0, r0, pc
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e60:	32000002 	andcc	r0, r0, #2
     e64:	00000f37 	andeq	r0, r0, r7, lsr pc
     e68:	000000c1 	andeq	r0, r0, r1, asr #1
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e6c:	00139223 	andseq	r9, r3, r3, lsr #4
     e70:	000a6200 	andeq	r6, sl, r0, lsl #4
     e74:	00025000 	andeq	r5, r2, r0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e78:	04fa0100 	ldrbteq	r0, [sl], #256	; 0x100
     e7c:	000008b0 			; <UNDEFINED> instruction: 0x000008b0
     e80:	0013ae22 	andseq	sl, r3, r2, lsr #28
     e84:	13a12200 			; <UNDEFINED> instruction: 0x13a12200
	delay (16, 0);
     e88:	23000000 	movwcs	r0, #0
     e8c:	000013d9 	ldrdeq	r1, [r0], -r9
	__pi_release ();
     e90:	00000a90 	muleq	r0, r0, sl
     e94:	00000268 	andeq	r0, r0, r8, ror #4
     e98:	ca04fc01 	bgt	13fea4 <__ccfg+0x11fefc>
     e9c:	22000008 	andcs	r0, r0, #8
     ea0:	000013e8 	andeq	r1, r0, r8, ror #7
     ea4:	13bc3300 			; <UNDEFINED> instruction: 0x13bc3300
static void killev (__pi_pcb_t *pid) {
     ea8:	0a9c0000 	beq	fe700eb0 <_estack+0xde6fbeb0>
	wfun = (aword)(pid->code);
     eac:	0aa00000 	beq	fe800eb4 <_estack+0xde7fbeb4>
	for_all_tasks (i) {
     eb0:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
		for (j = 0; j < nevents (i); j++) {
     eb4:	13cb2204 	bicne	r2, fp, #4, 4	; 0x40000000
     eb8:	00000000 	andeq	r0, r0, r0
     ebc:	d9210000 	stmdble	r1!, {}	; <UNPREDICTABLE>
			    || i->Events [j] . Event == wfun
     ec0:	a4000013 	strge	r0, [r0], #-19	; 0xffffffed
		for (j = 0; j < nevents (i); j++) {
     ec4:	8000000a 	andhi	r0, r0, sl
			if (i->Events [j] . Event == (aword)pid
     ec8:	01000002 	tsteq	r0, r2
     ecc:	fe02040e 	cdp2	4, 0, cr0, cr2, cr14, {0}
     ed0:	22000008 	andcs	r0, r0, #8
				wakeupev (i, j);
     ed4:	000013e8 	andeq	r1, r0, r8, ror #7
     ed8:	13d92100 	bicsne	r2, r9, #0, 2
	for_all_tasks (i) {
     edc:	0aa60000 	beq	fe980ee4 <_estack+0xde97bee4>
}
     ee0:	02980000 	addseq	r0, r8, #0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     ee4:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
static void qfree (aword *ch) {
     ee8:	09190204 	ldmdbeq	r9, {r2, r9}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     eec:	e8220000 	stmda	r2!, {}	; <UNPREDICTABLE>
	cc = (aword*)(mpools + MA_NP);
     ef0:	00000013 	andeq	r0, r0, r3, lsl r0
	m_setnextp (ch, chunk);
     ef4:	0013bc27 	andseq	fp, r3, r7, lsr #24
	m_setnextp (cc, ch);
     ef8:	000ac200 	andeq	ip, sl, r0, lsl #4
}
     efc:	000ac600 	andeq	ip, sl, r0, lsl #12
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f00:	040e0100 	streq	r0, [lr], #-256	; 0xffffff00
     f04:	00093402 	andeq	r3, r9, r2, lsl #8
     f08:	13cb2200 	bicne	r2, fp, #0, 4
			m_setnextp (cc, m_nextp (chunk));
     f0c:	27000000 	strcs	r0, [r0, -r0]
			m_size (chunk) += m_hdrlen + m_size (ch);
     f10:	000013bc 			; <UNDEFINED> instruction: 0x000013bc
     f14:	00000ac6 	andeq	r0, r0, r6, asr #21
     f18:	00000aca 	andeq	r0, r0, sl, asr #21
     f1c:	02040e01 	andeq	r0, r4, #1, 28
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f20:	0000094f 	andeq	r0, r0, pc, asr #18
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f24:	0013cb22 	andseq	ip, r3, r2, lsr #22
     f28:	fd210000 	stc2	0, cr0, [r1, #-0]
     f2c:	ce000011 	mcrgt	0, 0, r0, cr0, cr1, {0}
			m_setnextp (cc, m_nextp (chunk));
     f30:	b000000a 	andlt	r0, r0, sl
			m_size (ch) += m_hdrlen + m_size (chunk);
     f34:	01000002 	tsteq	r0, r2
     f38:	6a02041b 	bvs	81fac <__ccfg+0x62004>
     f3c:	22000009 	andcs	r0, r0, #9
     f40:	0000120c 	andeq	r1, r0, ip, lsl #4
     f44:	0c942700 	ldceq	7, cr2, [r4], {0}
     f48:	0b0c0000 	bleq	300f50 <__ccfg+0x2e0fa8>
			if (m_size (chunk) >= m_size (ch))
     f4c:	0b3e0000 	bleq	f80f54 <__ccfg+0xf60fac>
     f50:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
     f54:	09910204 	ldmibeq	r1, {r2, r9}
		chunk = m_nextp (chunk))
     f58:	0c260000 	stceq	0, cr0, [r6], #-0
     f5c:	30000014 	andcc	r0, r0, r4, lsl r0
     f60:	c800000b 	stmdagt	r0, {r0, r1, r3}
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f64:	01000002 	tsteq	r0, r2
	diag_wait (a);
     f68:	00020301 	andeq	r0, r2, r1, lsl #6
	diag_wchar (c, a);
     f6c:	00127427 	andseq	r7, r2, r7, lsr #8
}
     f70:	000b4e00 	andeq	r4, fp, r0, lsl #28
     f74:	000b5a00 	andeq	r5, fp, r0, lsl #20
	syserror (ESTATE, "state");
     f78:	04510100 	ldrbeq	r0, [r1], #-256	; 0xffffff00
     f7c:	0009b803 	andeq	fp, r9, r3, lsl #16
     f80:	127f1e00 	rsbsne	r1, pc, #0, 28
     f84:	0b4e0000 	bleq	1380f8c <__ccfg+0x1360fe4>
	for (i = 0; i < MAX_UTIMERS; i++)
     f88:	0b520000 	bleq	1480f90 <__ccfg+0x1460fe8>
void utimer_add (address ut) {
     f8c:	140b0000 	strne	r0, [fp], #-0
     f90:	34000501 	strcc	r0, [r0], #-1281	; 0xfffffaff
		if (__pi_utims [i] == NULL)
     f94:	00000b5e 	andeq	r0, r0, lr, asr fp
	for (i = 0; i < MAX_UTIMERS; i++)
     f98:	00000b60 	andeq	r0, r0, r0, ror #22
     f9c:	000002e0 	andeq	r0, r0, r0, ror #5
		syserror (ERESOURCE, "ut a");
     fa0:	02047201 	andeq	r7, r4, #268435456	; 0x10000000
	__pi_utims [i] = ut;
     fa4:	0012da34 	andseq	sp, r2, r4, lsr sl
}
     fa8:	000b6000 	andeq	r6, fp, r0
     fac:	0002e000 	andeq	lr, r2, r0
     fb0:	03bd0100 			; <UNDEFINED> instruction: 0x03bd0100
	*t = v;
     fb4:	12f62202 	rscsne	r2, r6, #536870912	; 0x20000000
	TCI_RUN_AUXILIARY_TIMER;
     fb8:	e9220000 	stmdb	r2!, {}	; <UNPREDICTABLE>
void update_n_wake (word min, Boolean force) {
     fbc:	00000012 	andeq	r0, r0, r2, lsl r0
	if (TCI_UPDATE_DELAY_TICKS (force))
     fc0:	012d0000 			; <UNDEFINED> instruction: 0x012d0000
     fc4:	000007fe 	strdeq	r0, [r0], -lr
     fc8:	0603ed01 	streq	lr, [r3], -r1, lsl #26
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fcc:	00093c01 	andeq	r3, r9, r1, lsl #24
     fd0:	00097800 	andeq	r7, r9, r0, lsl #16
     fd4:	709c0100 	addsvc	r0, ip, r0, lsl #2
     fd8:	3500000a 	strcc	r0, [r0, #-10]
     fdc:	006c6176 	rsbeq	r6, ip, r6, ror r1
     fe0:	1c03ed01 	stcne	13, cr14, [r3], {1}
     fe4:	0000008d 	andeq	r0, r0, sp, lsl #1
     fe8:	692a5001 	stmdbvs	sl!, {r0, ip, lr}
     fec:	03ef0100 	mvneq	r0, #0, 2
     ff0:	00008d06 	andeq	r8, r0, r6, lsl #26
     ff4:	0000df00 	andeq	sp, r0, r0, lsl #30
     ff8:	6e622a00 	vmulvs.f32	s5, s4, s0
     ffc:	03f00100 	mvnseq	r0, #0, 2
		for_all_tasks (i) {
    1000:	0000df08 	andeq	sp, r0, r8, lsl #30
	__pi_mintk = znew + min;
    1004:	0000fd00 	andeq	pc, r0, r0, lsl #26
    1008:	11b62600 			; <UNDEFINED> instruction: 0x11b62600
			if (!twaiting (i))
    100c:	093c0000 	ldmdbeq	ip!, {}	; <UNPREDICTABLE>
    1010:	01c80000 	biceq	r0, r8, r0
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1014:	f2010000 	vhadd.s8	d0, d1, d0
    1018:	75210203 	strvc	r0, [r1, #-515]!	; 0xfffffdfd
    101c:	42000013 	andmi	r0, r0, #19
    1020:	e0000009 	and	r0, r0, r9
    1024:	01000001 	tsteq	r0, r1
    1028:	5e0303f5 	mcrpl	3, 0, r0, cr3, cr5, {7}
    102c:	3600000a 	strcc	r0, [r0], -sl
    1030:	00001384 	andeq	r1, r0, r4, lsl #7
    1034:	000000fd 	strdeq	r0, [r0], -sp
    1038:	11c01e00 	bicne	r1, r0, r0, lsl #28
    103c:	09680000 	stmdbeq	r8!, {}^	; <UNPREDICTABLE>
    1040:	096a0000 	stmdbeq	sl!, {}^	; <UNPREDICTABLE>
				wakeuptm (i);
    1044:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    1048:	2d000203 	sfmcs	f0, 4, [r0, #-12]
		for_all_tasks (i) {
    104c:	00078601 	andeq	r8, r7, r1, lsl #12
				d = i->Timer - znew;
    1050:	03da0100 	bicseq	r0, sl, #0, 2
    1054:	08f40106 	ldmeq	r4!, {r1, r2, r8}^
    1058:	093c0000 	ldmdbeq	ip!, {}	; <UNPREDICTABLE>
		if ((word)(__pi_mintk - znew) < min) 
    105c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1060:	00000af5 	strdeq	r0, [r0], -r5
    1064:	6c617635 	stclvs	6, cr7, [r1], #-212	; 0xffffff2c
	__pi_old = znew;
    1068:	03da0100 	bicseq	r0, sl, #0, 2
}
    106c:	00008d1c 	andeq	r8, r0, ip, lsl sp
	TCI_RUN_DELAY_TIMER;
    1070:	1d500100 	ldfnee	f0, [r0, #-0]
}
    1074:	dc010069 	stcle	0, cr0, [r1], {105}	; 0x69
    1078:	008d0603 	addeq	r0, sp, r3, lsl #12
    107c:	622a0000 	eorvs	r0, sl, #0
    1080:	dd01006e 	stcle	0, cr0, [r1, #-440]	; 0xfffffe48
    1084:	00df0803 	sbcseq	r0, pc, r3, lsl #16
void proceed (word state) {
    1088:	01100000 	tsteq	r0, r0
	prcdstate (__pi_curr, state);
    108c:	b6260000 	strtlt	r0, [r6], -r0
    1090:	f4000011 	vst4.8	{d0-d3}, [r0 :64], r1
	release;
    1094:	80000008 	andhi	r0, r0, r8
    1098:	01000001 	tsteq	r0, r1
void __pi_wait (aword event, word state) {
    109c:	210203df 	ldrdcs	r0, [r2, -pc]
	sint j = nevents (__pi_curr);
    10a0:	00001375 	andeq	r1, r0, r5, ror r3
	if (j >= MAX_EVENTS_PER_TASK)
    10a4:	000008f8 	strdeq	r0, [r0], -r8
    10a8:	00000198 	muleq	r0, r8, r1
    10ac:	0303e201 	movweq	lr, #12801	; 0x3201
		syserror (ENEVENTS, "sw");
    10b0:	00000ae3 	andeq	r0, r0, r3, ror #21
    10b4:	00138436 	andseq	r8, r3, r6, lsr r4
	setestate (__pi_curr->Events [j], state, event);
    10b8:	00012300 	andeq	r2, r1, r0, lsl #6
	incwait (__pi_curr);
    10bc:	c01e0000 	andsgt	r0, lr, r0
	setestate (__pi_curr->Events [j], state, event);
    10c0:	2a000011 	bcs	110c <__pi_join+0x8>
}
    10c4:	2c000009 	stccs	0, cr0, [r0], {9}
    10c8:	01000009 	tsteq	r0, r9
    10cc:	000203e6 	andeq	r0, r2, r6, ror #7
void __pi_trigger (aword event) {
    10d0:	0816011f 	ldmdaeq	r6, {r0, r1, r2, r3, r4, r8}
	for_all_tasks (i) {
    10d4:	c6010000 	strgt	r0, [r1], -r0
		for (j = 0; j < nevents (i); j++) {
    10d8:	09780603 	ldmdbeq	r8!, {r0, r1, r9, sl}^
    10dc:	0a240000 	beq	9010e4 <__ccfg+0x8e113c>
    10e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    10e4:	00000b5e 	andeq	r0, r0, lr, asr fp
			if (i->Events [j] . Event == event) {
    10e8:	00098c2f 	andeq	r8, r9, pc, lsr #24
    10ec:	0009ba00 	andeq	fp, r9, r0, lsl #20
    10f0:	000b3700 	andeq	r3, fp, r0, lsl #14
				wakeupev (i, j);
    10f4:	006a3700 	rsbeq	r3, sl, r0, lsl #14
    10f8:	8d020307 	stchi	3, cr0, [r2, #-28]	; 0xffffffe4
	for_all_tasks (i) {
    10fc:	36000000 	strcc	r0, [r0], -r0
}
    1100:	37000001 	strcc	r0, [r0, -r1]
aword __pi_join (aword pid, word st) {
    1104:	03070069 	movweq	r0, #28777	; 0x7069
	for_all_tasks (i) {
    1108:	0003a902 	andeq	sl, r3, r2, lsl #18
    110c:	00014900 	andeq	r4, r1, r0, lsl #18
	return 0;
    1110:	d0380000 	eorsle	r0, r8, r0
		if ((aword)i == pid) {
    1114:	fe000009 	cdp2	0, 0, cr0, cr0, cr9, {0}
			__pi_wait (pid, st);
    1118:	37000009 	strcc	r0, [r0, -r9]
}
    111c:	0208006a 	andeq	r0, r8, #106	; 0x6a
	for_all_tasks (i) {
    1120:	00008d02 	andeq	r8, r0, r2, lsl #26
    1124:	00015c00 	andeq	r5, r1, r0, lsl #24
void delay (word d, word state) {
    1128:	00693700 	rsbeq	r3, r9, r0, lsl #14
	settstate (__pi_curr, state);
    112c:	a9020208 	stmdbge	r2, {r3, r9}
    1130:	6f000003 	svcvs	0x00000003
    1134:	00000001 	andeq	r0, r0, r1
    1138:	05bd3900 	ldreq	r3, [sp, #2304]!	; 0x900
	update_n_wake (d, YES);
    113c:	bb010000 	bllt	41144 <__ccfg+0x2119c>
    1140:	1f031403 	svcne	0x00031403
	__pi_curr->Timer = __pi_old + d;
    1144:	0009c101 	andeq	ip, r9, r1, lsl #2
    1148:	03820100 	orreq	r0, r2, #0, 2
	inctimer (__pi_curr);
    114c:	00083806 	andeq	r3, r8, r6, lsl #16
    1150:	0008f400 	andeq	pc, r8, r0, lsl #8
    1154:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
}
    1158:	2f00000b 	svccs	0x0000000b
    115c:	00000862 	andeq	r0, r0, r2, ror #16
	if (fun == NULL)
    1160:	00000890 	muleq	r0, r0, r8
		return (int) __pi_curr;
    1164:	00000bac 	andeq	r0, r0, ip, lsr #23
    1168:	01006a2a 	tsteq	r0, sl, lsr #20
	for_all_tasks (i)
    116c:	8d030389 	stchi	3, cr0, [r3, #-548]	; 0xfffffddc
}
    1170:	82000000 	andhi	r0, r0, #0
		if (i->code == fun)
    1174:	2a000001 	bcs	1180 <running+0x20>
	for_all_tasks (i)
    1178:	89010069 	stmdbhi	r1, {r0, r3, r5, r6}
    117c:	03a90303 			; <UNDEFINED> instruction: 0x03a90303
    1180:	01950000 	orrseq	r0, r5, r0
int __pi_strlen (const char *s) {
    1184:	1c000000 	stcne	0, cr0, [r0], {-0}
	for (i = 0; *(s+i) != '\0'; i++);
    1188:	00000168 	andeq	r0, r0, r8, ror #2
}
    118c:	00000bd4 	ldrdeq	r0, [r0], -r4
	for (i = 0; *(s+i) != '\0'; i++);
    1190:	01006a2a 	tsteq	r0, sl, lsr #20
	while ((Boolean)(*d++ = *s++));
    1194:	8d03038f 	stchi	3, cr0, [r3, #-572]	; 0xfffffdc4
    1198:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    119c:	2a000001 	bcs	11a8 <__pi_memcpy+0x6>
}
    11a0:	8f010069 	svchi	0x00010069
	while (n--)
    11a4:	03a90303 			; <UNDEFINED> instruction: 0x03a90303
    11a8:	01bb0000 			; <UNDEFINED> instruction: 0x01bb0000
		*dest++ = *src++;
    11ac:	34000000 	strcc	r0, [r0], #-0
    11b0:	000012b0 			; <UNDEFINED> instruction: 0x000012b0
    11b4:	00000838 	andeq	r0, r0, r8, lsr r8
		*dest++ = c;
    11b8:	00000150 	andeq	r0, r0, r0, asr r1
void adddevfunc (devreqfun_t rf, int loc) {
    11bc:	02038401 	andeq	r8, r3, #16777216	; 0x1000000
		syserror (EREQPAR, "addv");
    11c0:	0012cc22 	andseq	ip, r2, r2, lsr #24
		syserror (ERESOURCE, "addv");
    11c4:	12bf2200 	adcsne	r2, pc, #0, 4
	if (ioreq [loc] != NULL)
    11c8:	00000000 	andeq	r0, r0, r0
    11cc:	0006ff3a 	andeq	pc, r6, sl, lsr pc	; <UNPREDICTABLE>
		syserror (ERESOURCE, "addv");
    11d0:	037d0100 	cmneq	sp, #0, 2
	ioreq [loc] = rf;
    11d4:	03a4010d 			; <UNDEFINED> instruction: 0x03a4010d
}
    11d8:	03b00000 	movseq	r0, #0
    11dc:	9c010000 	stcls	0, cr0, [r1], {-0}
sint io (word retry, word dev, word operation, char *buf, word len) {
    11e0:	00000c1b 	andeq	r0, r0, fp, lsl ip
    11e4:	00091c2e 	andeq	r1, r9, lr, lsr #24
    11e8:	037d0100 	cmneq	sp, #0, 2
    11ec:	00008d1f 	andeq	r8, r0, pc, lsl sp
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11f0:	0001ce00 	andeq	ip, r1, r0, lsl #28
    11f4:	d83b0000 	ldmdale	fp!, {}	; <UNPREDICTABLE>
    11f8:	01000008 	tsteq	r0, r8
		syserror (ENODEVICE, "io");
    11fc:	010c0310 	tsteq	ip, r0, lsl r3
    1200:	0000008d 	andeq	r0, r0, sp, lsl #1
	if (len == 0)
    1204:	00000738 	andeq	r0, r0, r8, lsr r7
	ret = (ioreq [dev]) (operation, buf, len);
    1208:	00000838 	andeq	r0, r0, r8, lsr r8
    120c:	0c949c01 	ldceq	12, cr9, [r4], {1}
	if (ret >= 0)
    1210:	632e0000 			; <UNDEFINED> instruction: 0x632e0000
	if (ret == -1) {
    1214:	01000006 	tsteq	r0, r6
    1218:	8d1e0310 	ldchi	3, cr0, [lr, #-64]	; 0xffffffc0
		if (retry == WNONE)
    121c:	ec000000 	stc	0, cr0, [r0], {-0}
		iowait (dev, operation, retry);
    1220:	3c000001 	stccc	0, cr0, [r0], {1}
    1224:	00667562 	rsbeq	r7, r6, r2, ror #10
    1228:	2f031001 	svccs	0x00031001
			release;
    122c:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
	if (ret == -2) {
    1230:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
			(ioreq [dev]) (NONE, buf, len);
    1234:	6e656c3c 	mcrvs	12, 3, r6, cr5, cr12, {1}
		if (retry != WNONE) {
    1238:	03100100 	tsteq	r0, #0, 2
			iowait (dev, operation, retry);
    123c:	00008d38 	andeq	r8, r0, r8, lsr sp
    1240:	0002a100 	andeq	sl, r2, r0, lsl #2
			(ioreq [dev]) (NONE, buf, len);
    1244:	05562c00 	ldrbeq	r2, [r6, #-3072]	; 0xfffff400
    1248:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    124c:	9e2c0103 	suflse	f0, f4, f3
		(ioreq [dev]) (NONE, buf, len);
    1250:	01000006 	tsteq	r0, r6
    1254:	2801033d 	stmdacs	r1, {r0, r2, r3, r4, r5, r8, r9}
    1258:	00000d0d 	andeq	r0, r0, sp, lsl #26
}
    125c:	00000812 	andeq	r0, r0, r2, lsl r8
	if (retry != WNONE) {
    1260:	00000814 	andeq	r0, r0, r4, lsl r8
		delay (-ret - 2, retry);
    1264:	15036501 	strne	r6, [r3, #-1281]	; 0xfffffaff
    1268:	000d2122 	andeq	r2, sp, r2, lsr #2
    126c:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    1270:	00000755 	andeq	r0, r0, r5, asr r7
		release;
    1274:	0d02fc01 	stceq	12, cr15, [r2, #-4]
    1278:	07563d01 	ldrbeq	r3, [r6, -r1, lsl #26]
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    127c:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    1280:	070c0d02 	streq	r0, [ip, -r2, lsl #26]
    1284:	07380000 	ldreq	r0, [r8, -r0]!
    1288:	9c010000 	stcls	0, cr0, [r1], {-0}
    128c:	00000d0d 	andeq	r0, r0, sp, lsl #26
		syserror (ERESOURCE, "mal1");
    1290:	00130421 	andseq	r0, r3, r1, lsr #8
    1294:	00070c00 	andeq	r0, r7, r0, lsl #24
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1298:	00013800 	andeq	r3, r1, r0, lsl #16
    129c:	02f50100 	rscseq	r0, r5, #0, 2
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12a0:	000cd002 	andeq	sp, ip, r2
	m_size (mpools [0]) = mlen - m_hdrlen;
    12a4:	13132200 	tstne	r3, #0, 4
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12a8:	27000000 	strcs	r0, [r0, -r0]
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12ac:	0000133e 	andeq	r1, r0, lr, lsr r3
    12b0:	00000718 	andeq	r0, r0, r8, lsl r7
}
    12b4:	0000071c 	andeq	r0, r0, ip, lsl r7
    12b8:	0202f601 	andeq	pc, r2, #1048576	; 0x100000
    12bc:	00000cf5 	strdeq	r0, [r0], -r5
    12c0:	00136722 	andseq	r6, r3, r2, lsr #14
    12c4:	135a2200 	cmpne	sl, #0, 4
    12c8:	4d220000 	stcmi	0, cr0, [r2, #-0]
void __pi_free (aword *ch) {
    12cc:	00000013 	andeq	r0, r0, r3, lsl r0
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12d0:	00129328 	andseq	r9, r2, r8, lsr #6
    12d4:	00071c00 	andeq	r1, r7, r0, lsl #24
		syserror (EMALLOC, "malg");
    12d8:	00072400 	andeq	r2, r7, r0, lsl #8
    12dc:	02f70100 	rscseq	r0, r7, #0, 2
	mcfree [MA_NP] += m_size (ch);
    12e0:	12a22202 	adcne	r2, r2, #536870912	; 0x20000000
		m_size (ch) ^= MALLOC_UMASK;
    12e4:	00000000 	andeq	r0, r0, r0
    12e8:	0524013e 	streq	r0, [r4, #-318]!	; 0xfffffec2
	mcfree [MA_NP] += m_size (ch);
    12ec:	eb010000 	bl	412f4 <__ccfg+0x2134c>
	QFREE;
    12f0:	a7010602 	strge	r0, [r1, -r2, lsl #12]
	if (mevent [MA_NP] . nwait) {
    12f4:	01000000 	mrseq	r0, (UNDEF: 0)
    12f8:	00000d2e 	andeq	r0, r0, lr, lsr #26
		trigger ((aword)(&(mevent [MA_NP])));
    12fc:	0061753f 	rsbeq	r7, r1, pc, lsr r5
		mevent [MA_NP] . nwait --;
    1300:	2702eb01 	strcs	lr, [r2, -r1, lsl #22]
}
    1304:	00000d2e 	andeq	r0, r0, lr, lsr #26
    1308:	18040700 	stmdane	r4, {r8, r9, sl}
    130c:	1b000002 	blne	131c <kill+0x8>
    1310:	00060101 	andeq	r0, r6, r1, lsl #2
void kill (aword pid) {
    1314:	02d40100 	sbcseq	r0, r4, #0, 2
		pid = (aword) __pi_curr;
    1318:	009b0109 	addseq	r0, fp, r9, lsl #2
	j = NULL;
    131c:	06bc0000 	ldrteq	r0, [ip], r0
	for_all_tasks (i) {
    1320:	070c0000 	streq	r0, [ip, -r0]
	syserror (EREQPAR, "kpi");
    1324:	9c010000 	stcls	0, cr0, [r1], {-0}
    1328:	00000d8a 	andeq	r0, r0, sl, lsl #27
		if ((aword)i == pid) {
    132c:	0005312e 	andeq	r3, r5, lr, lsr #2
    1330:	02d40100 	sbcseq	r0, r4, #0, 2
				__PCB = i->Next;
    1334:	0000a721 	andeq	sl, r0, r1, lsr #14
			killev (i);
    1338:	00033800 	andeq	r3, r3, r0, lsl #16
			ufree (i);
    133c:	61753c00 	cmnvs	r5, r0, lsl #24
			if (i == __pi_curr)
    1340:	02d40100 	sbcseq	r0, r4, #0, 2
    1344:	000d8a2f 	andeq	r8, sp, pc, lsr #20
				release;
    1348:	00034b00 	andeq	r4, r3, r0, lsl #22
				j->Next = i->Next;
    134c:	13213400 			; <UNDEFINED> instruction: 0x13213400
    1350:	06e20000 	strbteq	r0, [r2], r0
				__PCB = i->Next;
    1354:	01200000 			; <UNDEFINED> instruction: 0x01200000
}
    1358:	e6010000 	str	r0, [r1], -r0
    135c:	30220202 	eorcc	r0, r2, r2, lsl #4
    1360:	00000013 	andeq	r0, r0, r3, lsl r0
	if (size < 8)
    1364:	0c040700 	stceq	7, cr0, [r4], {-0}
		_size = 2;
    1368:	1b000002 	blne	1378 <__pi_malloc+0x14>
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    136c:	0009e701 	andeq	lr, r9, r1, lsl #14
		_size = (((aword)size) + 3) >> 2;
    1370:	018a0100 	orreq	r0, sl, r0, lsl #2
		if (m_magic (chunk) != MALLOC_MAGIC)
    1374:	00a70106 	adceq	r0, r7, r6, lsl #2
		_size = (((aword)size) + 3) >> 2;
    1378:	06680000 	strbteq	r0, [r8], -r0
		if (mevent [MA_NP] . nfail != 255)
    137c:	06bc0000 	ldrteq	r0, [ip], r0
    1380:	9c010000 	stcls	0, cr0, [r1], {-0}
			mevent [MA_NP] . nfail ++;
    1384:	00000dd8 	ldrdeq	r0, [r0], -r8
		mnfree [MA_NP] = 0;
    1388:	0007622e 	andeq	r6, r7, lr, lsr #4
    138c:	018a0100 	orreq	r0, sl, r0, lsl #2
		if (m_magic (chunk) != MALLOC_MAGIC)
    1390:	00009b26 	andeq	r9, r0, r6, lsr #22
    1394:	00035e00 	andeq	r5, r3, r0, lsl #28
			syserror (EMALLOC, "malc");
    1398:	58454000 	stmdapl	r5, {lr}^
    139c:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
		if (m_size (chunk) >= _size)
    13a0:	0f0f1e01 	svceq	0x000f1e01
    13a4:	067e0000 	ldrbteq	r0, [lr], -r0
		chunk = m_nextp (chunk)) {
    13a8:	06880000 	streq	r0, [r8], r0
		m_setnextp (cc, m_nextp (chunk));
    13ac:	9c010000 	stcls	0, cr0, [r1], {-0}
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    13b0:	1f001a01 	svcne	0x00001a01
    13b4:	00070c01 	andeq	r0, r7, r1, lsl #24
			m_size (chunk) = _size;
    13b8:	01380100 	teqeq	r8, r0, lsl #2
			cc = chunk + _size + m_hdrlen;
    13bc:	00055006 	andeq	r5, r5, r6
    13c0:	00066800 	andeq	r6, r6, r0, lsl #16
			m_size (cc) = waste - m_hdrlen;
    13c4:	8a9c0100 	bhi	fe7017cc <_estack+0xde6fc7cc>
			QFREE;
    13c8:	4100000e 	tstmi	r0, lr
		mevent [MA_NP] . nfail = 0;
    13cc:	0000086d 	andeq	r0, r0, sp, ror #16
		mcfree [MA_NP] -= m_size (chunk);
    13d0:	08013a01 	stmdaeq	r1, {r0, r9, fp, ip, sp}
    13d4:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    13d8:	0000037c 	andeq	r0, r0, ip, ror r3
    13dc:	54554542 	ldrbpl	r4, [r5], #-1346	; 0xfffffabe
		m_size (chunk) |= MALLOC_UMASK;
    13e0:	01680100 	cmneq	r8, r0, lsl #2
		if (mnfree [MA_NP] > mcfree [MA_NP])
    13e4:	00059e01 	andeq	r9, r5, r1, lsl #28
		m_size (chunk) |= MALLOC_UMASK;
    13e8:	01082400 	tsteq	r8, r0, lsl #8
			mnfree [MA_NP] = mcfree [MA_NP];
    13ec:	6d410000 	stclvs	0, cr0, [r1, #-0]
}
    13f0:	01000006 	tsteq	r0, r6
    13f4:	9b0b0147 	blls	2c1918 <__ccfg+0x2a1970>
    13f8:	c7000000 	strgt	r0, [r0, -r0]
    13fc:	43000003 	movwmi	r0, #3
    1400:	000013d9 	ldrdeq	r1, [r0], -r9
    1404:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
    1408:	000005c6 	andeq	r0, r0, r6, asr #11
aword __pi_fork (fsmcode func, aword data) {
    140c:	3e060d05 	cdpcc	13, 0, cr0, cr6, cr5, {0}
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1410:	2200000e 	andcs	r0, r0, #14
    1414:	000013e8 	andeq	r1, r0, r8, ror #7
    1418:	13d94300 	bicsne	r4, r9, #0, 6
		if ((j = __PCB) == NULL)
    141c:	05ca0000 	strbeq	r0, [sl]
	i->Next = NULL;
    1420:	05d40000 	ldrbeq	r0, [r4]
	i->data = data;
    1424:	0f050000 	svceq	0x00050000
		if ((j = __PCB) == NULL)
    1428:	000e5806 	andeq	r5, lr, r6, lsl #16
}
    142c:	13e82200 	mvnne	r2, #0, 4
			for (; j->Next != NULL; j = j->Next);
    1430:	43000000 	movwmi	r0, #0
    1434:	000013bc 			; <UNDEFINED> instruction: 0x000013bc
	return (aword) i;
    1438:	0000061c 	andeq	r0, r0, ip, lsl r6
    143c:	00000626 	andeq	r0, r0, r6, lsr #12
	if (mevent [MA_NP] . nwait != 255)
    1440:	72061705 	andvc	r1, r6, #1310720	; 0x140000
    1444:	2200000e 	andcs	r0, r0, #14
    1448:	000013cb 	andeq	r1, r0, fp, asr #7
		mevent [MA_NP] . nwait ++;
    144c:	13bc3300 			; <UNDEFINED> instruction: 0x13bc3300
	wait ((aword)(&(mevent [MA_NP])), state);
    1450:	062a0000 	strteq	r0, [sl], -r0
    1454:	06340000 	ldrteq	r0, [r4], -r0
void diag (const char *mess, ...) {
    1458:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
    145c:	13cb2206 	bicne	r2, fp, #1610612736	; 0x60000000
    1460:	00000000 	andeq	r0, r0, r0
	diag_disable_int (a, is);
    1464:	e6011f00 	str	r1, [r1], -r0, lsl #30
    1468:	01000007 	tsteq	r0, r7
    146c:	2406012b 	strcs	r0, [r6], #-299	; 0xfffffed5
					d /= 10;
    1470:	50000005 	andpl	r0, r0, r5
	diag_disable_int (a, is);
    1474:	01000005 	tsteq	r0, r5
				d = (bc == 16) ? 10000 : 1000000000;
    1478:	000eba9c 	muleq	lr, ip, sl
	while (*mess != '\0') {
    147c:	0eee3400 	cdpeq	4, 14, cr3, cr14, cr0, {0}
	dgout ('\r');
    1480:	052e0000 	streq	r0, [lr, #-0]!
	dgout ('\n');
    1484:	00f00000 	rscseq	r0, r0, r0
    1488:	32010000 	andcc	r0, r1, #0
    148c:	01222c01 			; <UNDEFINED> instruction: 0x01222c01
	diag_wait (a);
    1490:	0000000f 	andeq	r0, r0, pc
	diag_enable_int (a, is);
    1494:	23011f00 	movwcs	r1, #7936	; 0x1f00
    1498:	01000007 	tsteq	r0, r7
    149c:	e006011e 	and	r0, r6, lr, lsl r1
}
    14a0:	24000004 	strcs	r0, [r0], #-4
    14a4:	01000005 	tsteq	r0, r5
    14a8:	000eee9c 	muleq	lr, ip, lr
			mess++;
    14ac:	0eee3400 	cdpeq	4, 14, cr3, cr14, cr0, {0}
		if (*mess == '%') {
    14b0:	04f20000 	ldrbteq	r0, [r2], #0
			if (*mess == 'l') {
    14b4:	00d00000 	sbcseq	r0, r0, r0
				mess++;
    14b8:	25010000 	strcs	r0, [r1, #-0]
    14bc:	01362c01 	teqeq	r6, r1, lsl #24
				bc = 32;
    14c0:	0600000f 	streq	r0, [r0], -pc
				val = va_arg (ap, lword);
    14c4:	00000004 	andeq	r0, r0, r4
				bc = 16;
    14c8:	08664400 	stmdaeq	r6!, {sl, lr}^
			switch (*mess) {
    14cc:	17010000 	strne	r0, [r1, -r0]
    14d0:	df011501 	svcle	0x00011501
    14d4:	03000000 	movweq	r0, #0
    14d8:	00000f0f 	andeq	r0, r0, pc, lsl #30
				dgout ('%');
    14dc:	6c65643f 	cfstrdvs	mvd6, [r5], #-252	; 0xffffff04
    14e0:	01170100 	tsteq	r7, r0, lsl #2
				dgout (*mess);
    14e4:	0000a722 	andeq	sl, r0, r2, lsr #14
    14e8:	38450000 	stmdacc	r5, {}^	; <UNPREDICTABLE>
			switch (*mess) {
    14ec:	01000004 	tsteq	r0, r4
					v = __pi_hex_enc_table [
    14f0:	a714010e 	ldrge	r0, [r4, -lr, lsl #2]
					i += 4;
    14f4:	03000000 	movweq	r0, #0
					(val >> (bc - i)) & 0xf];
    14f8:	0009db46 	andeq	sp, r9, r6, asr #22
    14fc:	14ee0100 	strbtne	r0, [lr], #256	; 0x100
					dgout (v);
    1500:	000f4303 	andeq	r4, pc, r3, lsl #6
    1504:	69704700 	ldmdbvs	r0!, {r8, r9, sl, lr}^
				while (i < bc) {
    1508:	f201006e 	vhadd.s8	q0, <illegal reg q0.5>, q15
			mess++;
    150c:	00008d06 	andeq	r8, r0, r6, lsl #26
					d /= 10;
    1510:	69474800 	stmdbvs	r7, {fp, lr}^
				if ((val >> (bc - 1)) & 1) {
    1514:	0bf40100 	bleq	ffd0191c <_estack+0xdfcfc91c>
    1518:	0000008d 	andeq	r0, r0, sp, lsl #1
					dgout ('-');
    151c:	01490000 	mrseq	r0, (UNDEF: 73)
    1520:	00000909 	andeq	r0, r0, r9, lsl #18
						val |= 0xffff0000;
    1524:	01069801 	tsteq	r6, r1, lsl #16
    1528:	0000048c 	andeq	r0, r0, ip, lsl #9
    152c:	000004e0 	andeq	r0, r0, r0, ror #9
				d = (bc == 16) ? 10000 : 1000000000;
    1530:	0fed9c01 	svceq	0x00ed9c01
    1534:	654a0000 	strbvs	r0, [sl, #-0]
    1538:	98010063 	stmdals	r1, {r0, r1, r5, r6}
					v = (word) (val / d);
    153c:	0000a71a 	andeq	sl, r0, sl, lsl r7
					if (v || d == 1) break;
    1540:	00041900 	andeq	r1, r4, r0, lsl #18
    1544:	006d4a00 	rsbeq	r4, sp, r0, lsl #20
					d /= 10;
    1548:	ed2a9801 	stc	8, cr9, [sl, #-4]!
				d = (bc == 16) ? 10000 : 1000000000;
    154c:	2c00000f 	stccs	0, cr0, [r0], {15}
					dgout (v + '0');
    1550:	29000004 	stmdbcs	r0, {r2}
    1554:	000011b6 			; <UNDEFINED> instruction: 0x000011b6
    1558:	00000498 	muleq	r0, r8, r4
					d /= 10;
    155c:	0000049a 	muleq	r0, sl, r4
					val = val - (v * d);
    1560:	2302a801 	movwcs	sl, #10241	; 0x2801
					if (d == 0) break;
    1564:	000013d9 	ldrdeq	r1, [r0], -r9
					v = (word) (val / d);
    1568:	0000049a 	muleq	r0, sl, r4
    156c:	00000098 	muleq	r0, r8, r0
				if (bc == 16)
    1570:	a203b801 	andge	fp, r3, #65536	; 0x10000
					val &= 0xffff;
    1574:	2200000f 	andcs	r0, r0, #15
				d = (bc == 16) ? 10000 : 1000000000;
    1578:	000013e8 	andeq	r1, r0, r8, ror #7
					dgout (*s);
    157c:	13d92300 	bicsne	r2, r9, #0, 6
					s++;
    1580:	049e0000 	ldreq	r0, [lr], #0
				while (*s != '\0') {
    1584:	00b80000 	adcseq	r0, r8, r0
    1588:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
			dgout (*mess++);
    158c:	000fbc03 	andeq	fp, pc, r3, lsl #24
    1590:	13e82200 	mvnne	r2, #0, 4
    1594:	43000000 	movwmi	r0, #0
    1598:	000013bc 			; <UNDEFINED> instruction: 0x000013bc
	__pi_seed = __pi_seed * 1103515245 + 12345;
    159c:	000004ba 			; <UNDEFINED> instruction: 0x000004ba
    15a0:	000004be 			; <UNDEFINED> instruction: 0x000004be
    15a4:	d603b801 	strle	fp, [r3], -r1, lsl #16
    15a8:	2200000f 	andcs	r0, r0, #15
	^ entropy
    15ac:	000013cb 	andeq	r1, r0, fp, asr #7
}
    15b0:	13bc3300 			; <UNDEFINED> instruction: 0x13bc3300
    15b4:	04be0000 	ldrteq	r0, [lr], #0
    15b8:	04c20000 	strbeq	r0, [r2], #0
    15bc:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    15c0:	13cb2203 	bicne	r2, fp, #805306368	; 0x30000000
    15c4:	00000000 	andeq	r0, r0, r0
    15c8:	01c80407 	biceq	r0, r8, r7, lsl #8
	sysassert (p->attributes.b.queued == 0, "tcv01");
    15cc:	01490000 	mrseq	r0, (UNDEF: 73)
    15d0:	00000895 	muleq	r0, r5, r8
	if (q_empty (q))
    15d4:	01067201 	tsteq	r6, r1, lsl #4
	...
	if (p->attributes.b.urgent) {
    15e0:	10939c01 	addsne	r9, r3, r1, lsl #24
		p->u.bqueue.next = q->next;
    15e4:	734a0000 	movtvc	r0, #40960	; 0xa000
		p->u.bqueue.prev = q;
    15e8:	72010074 	andvc	r0, r1, #116	; 0x74
		q->next->prev = (qitem_t*) p;
    15ec:	0000a718 	andeq	sl, r0, r8, lsl r7
	p->attributes.b.queued = 1;
    15f0:	00044a00 	andeq	r4, r4, r0, lsl #20
    15f4:	65734a00 	ldrbvs	r4, [r3, #-2560]!	; 0xfffff600
}
    15f8:	7201006e 	andvc	r0, r1, #110	; 0x6e
		p->u.bqueue.prev = q->prev;
    15fc:	00023628 	andeq	r3, r2, r8, lsr #12
		q->prev->next = (qitem_t*) p;
    1600:	00046800 	andeq	r6, r4, r0, lsl #16
		q->prev = (qitem_t*) p;
    1604:	61764a00 	cmnvs	r6, r0, lsl #20
    1608:	7201006c 	andvc	r0, r1, #108	; 0x6c
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    160c:	0000fc35 	andeq	pc, r0, r5, lsr ip	; <UNPREDICTABLE>
	word cs = size + hblenb;
    1610:	00048600 	andeq	r8, r4, r0, lsl #12
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1614:	04534b00 	ldrbeq	r4, [r3], #-2816	; 0xfffff500
    1618:	74010000 	strvc	r0, [r1], #-0
	p -> length = size;
    161c:	0000c90e 	andeq	ip, r0, lr, lsl #18
}
    1620:	00030500 	andeq	r0, r3, r0, lsl #10
	if (p->attributes.b.queued) {
    1624:	4c000000 	stcmi	0, cr0, [r0], {-0}
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1628:	000009fe 	strdeq	r0, [r0], -lr
    162c:	00017801 	andeq	r7, r1, r1, lsl #16
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1630:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
		p->attributes.b.queued = 0;
    1634:	000011e9 	andeq	r1, r0, r9, ror #3
	...
	deq (p);	// Remove from queue
    1640:	43038101 	movwmi	r8, #12545	; 0x3101
}
    1644:	000011ca 	andeq	r1, r0, sl, asr #3
	...
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1650:	82127e01 	andshi	r7, r2, #1, 28
	deq (p);	// Soft dequeue, timer and hook left intact
    1654:	30000010 	andcc	r0, r0, r0, lsl r0
	switch (dv) {
    1658:	000011dc 	ldrdeq	r1, [r0], -ip
    165c:	11f32900 	mvnsne	r2, r0, lsl #18
	...
			p->attributes.b.urgent = 1;
    1668:	84010000 	strhi	r0, [r1], #-0
			verify_ses (p, "dispose ses");
    166c:	014d0003 	cmpeq	sp, r3
    1670:	000009a5 	andeq	r0, r0, r5, lsr #19
    1674:	01066201 	tsteq	r6, r1, lsl #4
	...
			verify_phy (p, "dispose phy");
    1680:	01499c01 	cmpeq	r9, r1, lsl #24
    1684:	000003dc 	ldrdeq	r0, [r0], -ip
}
    1688:	01064f01 	tsteq	r6, r1, lsl #30
	...
			p->attributes.b.urgent = 1;
    1694:	10d09c01 	sbcsne	r9, r0, r1, lsl #24
			verify_phy (p, "dispose phy");
    1698:	1a290000 	bne	a416a0 <__ccfg+0xa216f8>
    169c:	00000012 	andeq	r0, r0, r2, lsl r0
    16a0:	00000000 	andeq	r0, r0, r0
    16a4:	01000000 	mrseq	r0, (UNDEF: 0)
    16a8:	4900035f 	stmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9}
    16ac:	00042901 	andeq	r2, r4, r1, lsl #18
			enq (oqueues [p->attributes.b.phys], p);
    16b0:	063b0100 	ldrteq	r0, [fp], -r0, lsl #2
    16b4:	00044801 	andeq	r4, r4, r1, lsl #16
}
    16b8:	00048c00 	andeq	r8, r4, r0, lsl #24
			rlp (p);
    16bc:	f79c0100 			; <UNDEFINED> instruction: 0xf79c0100
}
    16c0:	4a000010 	bmi	1708 <tcv_endp+0x30>
    16c4:	3b010064 	blcc	4185c <__ccfg+0x218b4>
    16c8:	0000df1c 	andeq	sp, r0, ip, lsl pc
    16cc:	0004a400 	andeq	sl, r4, r0, lsl #8
    16d0:	01490000 	mrseq	r0, (UNDEF: 73)
    16d4:	000004f7 	strdeq	r0, [r0], -r7
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    16d8:	01062b01 	tsteq	r6, r1, lsl #22
	if (b->attributes.b.outgoing) {
    16dc:	00000408 	andeq	r0, r0, r8, lsl #8
	b = header (p);
    16e0:	00000448 	andeq	r0, r0, r8, asr #8
	if (b->attributes.b.outgoing) {
    16e4:	111e9c01 	tstne	lr, r1, lsl #24
		verify_ses (b, "tcv02");
    16e8:	644a0000 	strbvs	r0, [sl], #-0
    16ec:	1b2b0100 	blne	ac1af4 <__ccfg+0xaa1b4c>
    16f0:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    16f4:	000004c2 	andeq	r0, r0, r2, asr #9
    16f8:	97014900 	strls	r4, [r1, -r0, lsl #18]
		verify_plg (b, tcv_out, "tcv03");
    16fc:	01000007 	tsteq	r0, r7
    1700:	dc010620 	stcle	6, cr0, [r1], {32}
    1704:	06000003 	streq	r0, [r0], -r3
    1708:	01000004 	tsteq	r0, r4
    170c:	0011459c 	mulseq	r1, ip, r5
    1710:	006e4a00 	rsbeq	r4, lr, r0, lsl #20
    1714:	b81c2001 	ldmdalt	ip, {r0, sp}
    1718:	e0000000 	and	r0, r0, r0
    171c:	00000004 	andeq	r0, r0, r4
		dispose (b, plugins [b->attributes.b.plugin] ->
    1720:	08740149 	ldmdaeq	r4!, {r0, r3, r6, r8}^
}
    1724:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
		dispose (b, plugins [b->attributes.b.plugin] ->
    1728:	03b00106 	movseq	r0, #-2147483647	; 0x80000001
		rlp (b);
    172c:	03dc0000 	bicseq	r0, ip, #0
}
    1730:	9c010000 	stcls	0, cr0, [r1], {-0}
		rlp (b);
    1734:	00001180 	andeq	r1, r0, r0, lsl #3
    1738:	01006e4e 	tsteq	r0, lr, asr #28
    173c:	00b81c19 	adcseq	r1, r8, r9, lsl ip
    1740:	50010000 	andpl	r0, r1, r0
    1744:	00118033 	andseq	r8, r1, r3, lsr r0
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1748:	0003c400 	andeq	ip, r3, r0, lsl #8
    174c:	0003ce00 	andeq	ip, r3, r0, lsl #28
    1750:	031b0100 	tsteq	fp, #0, 2
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1754:	00118e22 	andseq	r8, r1, r2, lsr #28
	va_start (ap, plid);
    1758:	4f000000 	svcmi	0x00000000
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    175c:	000009b9 			; <UNDEFINED> instruction: 0x000009b9
    1760:	01141501 	tsteq	r4, r1, lsl #10
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1764:	00119903 	andseq	r9, r1, r3, lsl #18
    1768:	006e5000 	rsbeq	r5, lr, r0
    176c:	b82b1501 	stmdalt	fp!, {r0, r8, sl, ip}
    1770:	00000000 	andeq	r0, r0, r0
			syserror (ENODEVICE, "tcv04");
    1774:	0004e351 	andeq	lr, r4, r1, asr r3
		syserror (EMALLOC, "tcv05");
    1778:	011a0300 	tsteq	sl, r0, lsl #6
	attp.b.outgoing = 1;
    177c:	b6030135 			; <UNDEFINED> instruction: 0xb6030135
    1780:	52000011 	andpl	r0, r0, #17
    1784:	000009aa 	andeq	r0, r0, sl, lsr #19
    1788:	48011a03 	stmdami	r1, {r0, r1, r9, fp, ip}
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    178c:	00000073 	andeq	r0, r0, r3, ror r0
		if (descriptors [fd] == NULL)
    1790:	079e5300 	ldreq	r5, [lr, r0, lsl #6]
    1794:	5b030000 	blpl	c179c <__ccfg+0xa17f4>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1798:	53030135 	movwpl	r0, #12597	; 0x3135
		return ERROR;
    179c:	00000446 	andeq	r0, r0, r6, asr #8
}
    17a0:	01355003 	teqeq	r5, r3
    17a4:	08b45403 	ldmeq	r4!, {r0, r1, sl, ip, lr}
    17a8:	bf0f0000 	svclt	0x000f0000
	s->attpattern.b.session = fd;
    17ac:	00730101 	rsbseq	r0, r3, r1, lsl #2
    17b0:	e9030000 	stmdb	r3, {}	; <UNPREDICTABLE>
	descriptors [fd] = s;
    17b4:	16000011 			; <UNDEFINED> instruction: 0x16000011
	q_init (&(s->rqueue));
    17b8:	00000957 	andeq	r0, r0, r7, asr r9
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    17bc:	730ec10f 	movwvc	ip, #57615	; 0xe10f
    17c0:	00000000 	andeq	r0, r0, r0
    17c4:	00087b53 	andeq	r7, r8, r3, asr fp
    17c8:	01900f00 	orrseq	r0, r0, r0, lsl #30
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    17cc:	10530301 	subsne	r0, r3, r1, lsl #6
    17d0:	0f000004 	svceq	0x00000004
    17d4:	0301017b 	movweq	r0, #4475	; 0x117b
	descriptors [fd] = s;
    17d8:	0006dd51 	andeq	sp, r6, r1, asr sp
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    17dc:	03660a00 	cmneq	r6, #0, 20
    17e0:	1a030101 	bne	c1bec <__ccfg+0xa1c44>
	if (s == NULL)
    17e4:	52000012 	andpl	r0, r0, #18
		syserror (EMALLOC, "tcv05");
    17e8:	000006b4 			; <UNDEFINED> instruction: 0x000006b4
    17ec:	1f03660a 	svcne	0x0003660a
    17f0:	00000073 	andeq	r0, r0, r3, ror r0
    17f4:	08535500 	ldmdaeq	r3, {r8, sl, ip, lr}^
    17f8:	4c020000 	stcmi	0, cr0, [r2], {-0}
    17fc:	03010101 	movweq	r0, #4353	; 0x1101
    1800:	0007c853 	andeq	ip, r7, r3, asr r8
    1804:	01c40200 	biceq	r0, r4, r0, lsl #4
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1808:	6a560301 	bvs	1582414 <__ccfg+0x156246c>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    180c:	02000005 	andeq	r0, r0, #5
    1810:	730101ad 	movwvc	r0, #4525	; 0x11ad
    1814:	03000000 	movweq	r0, #0
	plugins [ord] = pl;
    1818:	0004b055 	andeq	fp, r4, r5, asr r0
	return 0;
    181c:	02450e00 	subeq	r0, r5, #0, 28
		return ERROR;
    1820:	57030101 	strpl	r0, [r3, -r1, lsl #2]
}
    1824:	00000482 	andeq	r0, r0, r2, lsl #9
    1828:	01022c0e 	tsteq	r2, lr, lsl #24
	verify_fds (fd, "tcv10");
    182c:	00007301 	andeq	r7, r0, r1, lsl #6
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    1830:	6d510300 	ldclvs	3, cr0, [r1, #-0]
	verify_fds (fd, "tcv10");
    1834:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    1838:	010101dc 	ldrdeq	r0, [r1, -ip]
    183c:	00127403 	andseq	r7, r2, r3, lsl #8
	verify_plg (b, tcv_frm, "tcv11");
    1840:	04205200 	strteq	r5, [r0], #-512	; 0xfffffe00
	b = q_first (rq);
    1844:	dc0e0000 	stcle	0, cr0, [lr], {-0}
	if (q_end (b, rq)) {
    1848:	00731f01 	rsbseq	r1, r3, r1, lsl #30
		if (state != WNONE) {
    184c:	55000000 	strpl	r0, [r0, #-0]
    1850:	00000613 	andeq	r0, r0, r3, lsl r6
			when (rq, state);
    1854:	01010f0b 	tsteq	r1, fp, lsl #30
			release;
    1858:	36530301 	ldrbcc	r0, [r3], -r1, lsl #6
	deq (b);	// Dequeue the packet ...
    185c:	0c000005 	stceq	0, cr0, [r0], {5}
    1860:	030101ed 	movweq	r0, #4589	; 0x11ed
	p = ((address)(b + 1));
    1864:	0008a153 	andeq	sl, r8, r3, asr r1
	verify_plg (b, tcv_frm, "tcv11");
    1868:	01d60c00 	bicseq	r0, r6, r0, lsl #24
    186c:	05510301 	ldrbeq	r0, [r1, #-769]	; 0xfffffcff
    1870:	06000005 	streq	r0, [r0], -r5
    1874:	01010440 	tsteq	r1, r0, asr #8
    1878:	0012b003 	andseq	fp, r2, r3
    187c:	06c15200 	strbeq	r5, [r1], r0, lsl #4
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    1880:	40060000 	andmi	r0, r6, r0
    1884:	00732404 	rsbseq	r2, r3, r4, lsl #8
		b->length - b->u.pointers.head - b->u.pointers.tail;
    1888:	51000000 	mrspl	r0, (UNDEF: 0)
    188c:	00000497 	muleq	r0, r7, r4
	b->u.pointers.tail =
    1890:	01039106 	tsteq	r3, r6, lsl #2
}
    1894:	12da0301 	sbcsne	r0, sl, #67108864	; 0x4000000
		return NULL;
    1898:	c1520000 	cmpgt	r2, r0
    189c:	06000006 	streq	r0, [r0], -r6
    18a0:	73170391 	tstvc	r7, #1140850690	; 0x44000002
    18a4:	52000000 	andpl	r0, r0, #0
    18a8:	000005ea 	andeq	r0, r0, sl, ror #11
	verify_fds (fd, "tcv16");
    18ac:	2a039106 	bcs	e5ccc <__ccfg+0xc5d24>
								Boolean urg) {
    18b0:	00000073 	andeq	r0, r0, r3, ror r0
    18b4:	096a5100 	stmdbeq	sl!, {r8, ip, lr}^
	verify_fds (fd, "tcv16");
    18b8:	0c060000 	stceq	0, cr0, [r6], {-0}
    18bc:	03010103 	movweq	r0, #4355	; 0x1103
    18c0:	00001304 	andeq	r1, r0, r4, lsl #6
	verify_pld (s, tcv_frm, "tcv17");
    18c4:	0006c152 	andeq	ip, r6, r2, asr r1
    18c8:	030c0600 	movweq	r0, #50688	; 0xc600
    18cc:	00007318 	andeq	r7, r0, r8, lsl r3
    18d0:	05ea5200 	strbeq	r5, [sl, #512]!	; 0x200
    18d4:	0c060000 	stceq	0, cr0, [r6], {-0}
    18d8:	00732b03 	rsbseq	r2, r3, r3, lsl #22
    18dc:	51000000 	mrspl	r0, (UNDEF: 0)
    18e0:	000005d4 	ldrdeq	r0, [r0], -r4
	ptrs.head = (word) fd;
    18e4:	0101e706 	tsteq	r1, r6, lsl #14
	ptrs.tail = (word) urg;
    18e8:	13210301 			; <UNDEFINED> instruction: 0x13210301
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    18ec:	c1520000 	cmpgt	r2, r0
    18f0:	06000006 	streq	r0, [r0], -r6
		if (state != WNONE) {
    18f4:	731901e7 	tstvc	r9, #-1073741767	; 0xc0000039
    18f8:	00000000 	andeq	r0, r0, r0
}
    18fc:	00076851 	andeq	r6, r7, r1, asr r8
			when (eid, state);
    1900:	01ba0600 			; <UNDEFINED> instruction: 0x01ba0600
    1904:	3e030101 	adfccs	f0, f3, f1
			release;
    1908:	52000013 	andpl	r0, r0, #19
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    190c:	000006c1 	andeq	r0, r0, r1, asr #13
    1910:	1501ba06 	strne	fp, [r1, #-2566]	; 0xfffff5fa
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    1914:	00000073 	andeq	r0, r0, r3, ror r0
    1918:	08345100 	ldmdaeq	r4!, {r8, ip, lr}
    191c:	39060000 	stmdbcc	r6, {}	; <UNPREDICTABLE>
    1920:	03010101 	movweq	r0, #4353	; 0x1101
    1924:	00001375 	andeq	r1, r0, r5, ror r3
    1928:	0006c152 	andeq	ip, r6, r2, asr r1
		if (state != WNONE) {
    192c:	01390600 	teqeq	r9, r0, lsl #12
    1930:	0000731b 	andeq	r7, r0, fp, lsl r3
			tmwait (state);
    1934:	055e5200 	ldrbeq	r5, [lr, #-512]	; 0xfffffe00
    1938:	39060000 	stmdbcc	r6, {}	; <UNPREDICTABLE>
	b->attributes = s->attpattern;
    193c:	00732e01 	rsbseq	r2, r3, r1, lsl #28
		b->attributes.b.urgent = 1;
    1940:	4a520000 	bmi	1481948 <__ccfg+0x14619a0>
    1944:	06000005 	streq	r0, [r0], -r5
	b->u.pointers.head = ptrs.head;
    1948:	731b013a 	tstvc	fp, #-2147483634	; 0x8000000e
	b->u.pointers.tail = length;
    194c:	00000000 	andeq	r0, r0, r0
	return (address) (b + 1);
    1950:	00077351 	andeq	r7, r7, r1, asr r3
    1954:	02840400 	addeq	r0, r4, #0, 8
    1958:	92030101 	andls	r0, r3, #1073741824	; 0x40000000
    195c:	52000013 	andpl	r0, r0, #19
    1960:	000005f7 	strdeq	r0, [r0], -r7
    1964:	1e028404 	cdpne	4, 0, cr8, cr2, cr4, {0}
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1968:	00000073 	andeq	r0, r0, r3, ror r0
    196c:	03e25100 	mvneq	r5, #0, 2
    1970:	06040000 	streq	r0, [r4], -r0
	verify_fph (phy, "tcv23");
    1974:	03010102 	movweq	r0, #4354	; 0x1102
    1978:	000013bc 			; <UNDEFINED> instruction: 0x000013bc
    197c:	0005f752 	andeq	pc, r5, r2, asr r7	; <UNPREDICTABLE>
    1980:	02060400 	andeq	r0, r6, #0, 8
}
    1984:	00007323 	andeq	r7, r0, r3, lsr #6
	return (physical [phy]) (opt, arg);
    1988:	09935200 	ldmibeq	r3, {r9, ip, lr}
    198c:	06040000 	streq	r0, [r4], -r0
    1990:	00733702 	rsbseq	r3, r3, r2, lsl #14
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    1994:	51000000 	mrspl	r0, (UNDEF: 0)
	if (opt < 0) {
    1998:	000007ba 			; <UNDEFINED> instruction: 0x000007ba
		if (fd < 0)
    199c:	01015404 	tsteq	r1, r4, lsl #8
		if (opt == PHYSOPT_PLUGINFO) {
    19a0:	13d90301 	bicsne	r0, r9, #67108864	; 0x4000000
			if (fd >= TCV_MAX_PLUGS)
    19a4:	f7520000 			; <UNDEFINED> instruction: 0xf7520000
			if ((p = plugins [fd]) == NULL)
    19a8:	04000005 	streq	r0, [r0], #-5
    19ac:	73190154 	tstvc	r9, #84, 2
}
    19b0:	00000000 	andeq	r0, r0, r0
		if (fd >= TCV_MAX_PHYS)
    19b4:	0008f551 	andeq	pc, r8, r1, asr r5	; <UNPREDICTABLE>
		return physinfo [fd];
    19b8:	011e0400 	tsteq	lr, r0, lsl #8
    19bc:	f6030101 			; <UNDEFINED> instruction: 0xf6030101
	verify_fds (fd, "tcv22");
    19c0:	52000013 	andpl	r0, r0, #19
    19c4:	000005f7 	strdeq	r0, [r0], -r7
    19c8:	17011e04 	strne	r1, [r1, -r4, lsl #28]
    19cc:	00000073 	andeq	r0, r0, r3, ror r0
    19d0:	06355500 	ldrteq	r5, [r5], -r0, lsl #10
}
    19d4:	63090000 	movwvs	r0, #36864	; 0x9000
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    19d8:	03010104 	movweq	r0, #4356	; 0x1104
    19dc:	00057a55 	andeq	r7, r5, r5, asr sl
			return 0;
    19e0:	04540900 	ldrbeq	r0, [r4], #-2304	; 0xfffff700
    19e4:	55030101 	strpl	r0, [r3, #-257]	; 0xfffffeff
    19e8:	00000593 	muleq	r0, r3, r5
    19ec:	01022a09 	tsteq	r2, r9, lsl #20
    19f0:	78510301 	ldmdavc	r1, {r0, r8, r9}^
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    19f4:	09000009 	stmdbeq	r0, {r0, r3}
    19f8:	01010168 	tsteq	r1, r8, ror #2
	if (dsp != TCV_DSP_PASS) {
    19fc:	00143403 	andseq	r3, r4, r3, lsl #8
		if (ses == NONE)
    1a00:	05b25200 	ldreq	r5, [r2, #512]!	; 0x200
			syserror (EREQPAR, "tcv26");
    1a04:	68090000 	stmdavs	r9, {}	; <UNPREDICTABLE>
		verify_fds (ses, "tcv27");
    1a08:	00731f01 	rsbseq	r1, r3, r1, lsl #30
    1a0c:	55000000 	strpl	r0, [r0, #-0]
    1a10:	000004d3 	ldrdeq	r0, [r0], -r3
    1a14:	01013209 	tsteq	r1, r9, lsl #4
    1a18:	0d580301 	ldcleq	3, cr0, [r8, #-4]
		if ((p = apb (size)) != NULL) {
    1a1c:	0000000d 	andeq	r0, r0, sp
    1a20:	00000000 	andeq	r0, r0, r0
		return NULL;
    1a24:	01000000 	mrseq	r0, (UNDEF: 0)
			p->attributes = descriptors [ses] -> attpattern;
    1a28:	0d21369c 	stceq	6, cr3, [r1, #-624]!	; 0xfffffd90
			dispose (p, dsp);
    1a2c:	04f30000 	ldrbteq	r0, [r3], #0
			p->attributes = descriptors [ses] -> attpattern;
    1a30:	00000000 	andeq	r0, r0, r0
			p->attributes.b.outgoing = 0;
    1a34:	00001147 	andeq	r1, r0, r7, asr #2
			dispose (p, dsp);
    1a38:	07940003 	ldreq	r0, [r4, r3]
			return (address)(p + 1);
    1a3c:	01040000 	mrseq	r0, (UNDEF: 4)
    1a40:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	if ((p = apb (size)) != NULL)
    1a44:	000a190c 	andeq	r1, sl, ip, lsl #18
    1a48:	0000a300 	andeq	sl, r0, r0, lsl #6
		return (address)(p + 1);
    1a4c:	0005c800 	andeq	ip, r5, r0, lsl #16
    1a50:	00000000 	andeq	r0, r0, r0
    1a54:	0018a700 	andseq	sl, r8, r0, lsl #14
    1a58:	06010200 	streq	r0, [r1], -r0, lsl #4
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a5c:	0000029d 	muleq	r0, sp, r2
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1a60:	b9050202 	stmdblt	r5, {r1, r9}
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a64:	03000002 	movweq	r0, #2
    1a68:	000020b8 	strheq	r2, [r0], -r8
		syserror (EREQPAR, "tcv28");
    1a6c:	3f182803 	svccc	0x00182803
		syserror (EMALLOC, "tcv29");
    1a70:	02000000 	andeq	r0, r0, #0
	physical [phy] = ps;
    1a74:	005c0504 	subseq	r0, ip, r4, lsl #10
	physinfo [phy] = info;
    1a78:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1a7c:	00005705 	andeq	r5, r0, r5, lsl #14
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1a80:	1f330300 	svcne	0x00330300
    1a84:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    1a88:	00005918 	andeq	r5, r0, r8, lsl r9
		syserror (EMALLOC, "tcv29");
    1a8c:	08010200 	stmdaeq	r1, {r9}
    1a90:	0000029b 	muleq	r0, fp, r2
	q_init (q);
    1a94:	00232903 	eoreq	r2, r3, r3, lsl #18
}
    1a98:	19310300 	ldmdbne	r1!, {r8, r9}
    1a9c:	0000006c 	andeq	r0, r0, ip, rrx
    1aa0:	ca070202 	bgt	1c22b0 <__ccfg+0x1a2308>
    1aa4:	03000001 	movweq	r0, #1
    1aa8:	00001ecb 	andeq	r1, r0, fp, asr #29
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1aac:	7f193403 	svcvc	0x00193403
	verify_fph (phy, "tcv30");
    1ab0:	02000000 	andeq	r0, r0, #0
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ab4:	00450704 	subeq	r0, r5, r4, lsl #14
    1ab8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
	verify_fph (phy, "tcv30");
    1abc:	00004007 	andeq	r4, r0, r7
    1ac0:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    1ac4:	00746e69 	rsbseq	r6, r4, r9, ror #28
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1ac8:	4a070402 	bmi	1c2ad8 <__ccfg+0x1a2b30>
    1acc:	03000000 	movweq	r0, #0
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1ad0:	00000259 	andeq	r0, r0, r9, asr r2
    1ad4:	a71b2804 	ldrge	r2, [fp, -r4, lsl #16]
		if (plugins [plg] == NULL)
    1ad8:	05000000 	streq	r0, [r0, #-0]
    1adc:	0000008a 	andeq	r0, r0, sl, lsl #1
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1ae0:	bf000804 	svclt	0x00000804
		return 0;
    1ae4:	06000000 	streq	r0, [r0], -r0
}
    1ae8:	00000331 	andeq	r0, r0, r1, lsr r3
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1aec:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    1af0:	07000100 	streq	r0, [r0, -r0, lsl #2]
    1af4:	008c0304 	addeq	r0, ip, r4, lsl #6
    1af8:	63040000 	movwvs	r0, #16384	; 0x4000
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1afc:	00009b18 	andeq	r9, r0, r8, lsl fp
    1b00:	08250300 	stmdaeq	r5!, {r8, r9}
    1b04:	26050000 	strcs	r0, [r5], -r0
    1b08:	00004d12 	andeq	r4, r0, r2, lsl sp
    1b0c:	1d850300 	stcne	3, cr0, [r5]
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1b10:	27050000 	strcs	r0, [r5, -r0]
	len -= (ap.head + ap.tail);
    1b14:	00006012 	andeq	r6, r0, r2, lsl r0
    1b18:	00d90800 	sbcseq	r0, r9, r0, lsl #16
    1b1c:	f0030000 			; <UNDEFINED> instruction: 0xf0030000
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1b20:	05000008 	streq	r0, [r0, #-8]
    1b24:	00331228 	eorseq	r1, r3, r8, lsr #4
    1b28:	17030000 	strne	r0, [r3, -r0]
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1b2c:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    1b30:	004d122b 	subeq	r1, sp, fp, lsr #4
    1b34:	71030000 	mrsvc	r0, (UNDEF: 3)
	return 1;
    1b38:	0500001d 	streq	r0, [r0, #-29]	; 0xffffffe3
    1b3c:	0073122c 	rsbseq	r1, r3, ip, lsr #4
    1b40:	02090000 	andeq	r0, r9, #0
    1b44:	03000001 	movweq	r0, #1
    1b48:	0000021e 	andeq	r0, r0, lr, lsl r2
	verify_fph (phy, "tcv32");
    1b4c:	73122d05 	tstvc	r2, #320	; 0x140
    1b50:	03000000 	movweq	r0, #0
    1b54:	00000251 	andeq	r0, r0, r1, asr r2
    1b58:	2b102e05 	blcs	40d374 <__ccfg+0x3ed3cc>
    1b5c:	0a000001 	beq	1b68 <tcvphy_get+0x1c>
    1b60:	0000d904 	andeq	sp, r0, r4, lsl #18
	oq = oqueues [phy];
    1b64:	05080b00 	streq	r0, [r8, #-2816]	; 0xfffff500
	b = q_first (oq);
    1b68:	01bf0932 			; <UNDEFINED> instruction: 0x01bf0932
	if (q_end (b, oq)) {
    1b6c:	970c0000 	strls	r0, [ip, -r0]
	*len = b->length;
    1b70:	05000006 	streq	r0, [r0, #-6]
	deq (b);	// Dequeue the packet ...
    1b74:	00f60734 	rscseq	r0, r6, r4, lsr r7
}
    1b78:	01010000 	mrseq	r0, (UNDEF: 1)
		return NULL;
    1b7c:	c50c0007 	strgt	r0, [ip, #-7]
    1b80:	05000004 	streq	r0, [r0, #-4]
    1b84:	00f60335 	rscseq	r0, r6, r5, lsr r3
    1b88:	01010000 	mrseq	r0, (UNDEF: 1)
	verify_fph (phy, "tcv33");
    1b8c:	4f0c0006 	svcmi	0x000c0006
    1b90:	05000006 	streq	r0, [r0, #-6]
    1b94:	00f60336 	rscseq	r0, r6, r6, lsr r3
    1b98:	01010000 	mrseq	r0, (UNDEF: 1)
    1b9c:	450c0005 	strmi	r0, [ip, #-5]
    1ba0:	05000008 	streq	r0, [r0, #-8]
	oq = oqueues [phy];
    1ba4:	00f60337 	rscseq	r0, r6, r7, lsr r3
	b = q_first (oq);
    1ba8:	01010000 	mrseq	r0, (UNDEF: 1)
		return NULL;
    1bac:	2d0c0004 	stccs	0, cr0, [ip, #-16]
	return (address)(b + 1);
    1bb0:	05000008 	streq	r0, [r0, #-8]
}
    1bb4:	00f60338 	rscseq	r0, r6, r8, lsr r3
    1bb8:	04010000 	streq	r0, [r1], #-0
    1bbc:	0f0d0000 	svceq	0x000d0000
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1bc0:	05000008 	streq	r0, [r0, #-8]
	verify_plg (b, tcv_xmt, "tcv34");
    1bc4:	00f6073a 	rscseq	r0, r6, sl, lsr r7
	hblock_t *b = header (pkt);
    1bc8:	0d010000 	stceq	0, cr0, [r1, #-0]
	verify_plg (b, tcv_xmt, "tcv34");
    1bcc:	00000409 	andeq	r0, r0, r9, lsl #8
    1bd0:	f6033c05 			; <UNDEFINED> instruction: 0xf6033c05
    1bd4:	02000000 	andeq	r0, r0, #0
    1bd8:	0004660d 	andeq	r6, r4, sp, lsl #12
    1bdc:	033d0500 	teqeq	sp, #0, 10
    1be0:	000000f6 	strdeq	r0, [r0], -r6
    1be4:	05e30d03 	strbeq	r0, [r3, #3331]!	; 0xd03
	dispose (b, plugins [b->attributes.b.plugin] ->
    1be8:	3f050000 	svccc	0x00050000
}
    1bec:	00010208 	andeq	r0, r1, r8, lsl #4
	dispose (b, plugins [b->attributes.b.plugin] ->
    1bf0:	03000400 	movweq	r0, #1024	; 0x400
    1bf4:	000008cf 	andeq	r0, r0, pc, asr #17
    1bf8:	31034105 	tstcc	r3, r5, lsl #2
}
    1bfc:	08000001 	stmdaeq	r0, {r0}
    while(1)
    1c00:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
{
    1c04:	00068b0e 	andeq	r8, r6, lr, lsl #22
    SetupTrimDevice();
    1c08:	1a430500 	bne	10c3010 <__ccfg+0x10a3068>
        *pui32Dest++ = *pui32Src++;
    1c0c:	000001cb 	andeq	r0, r0, fp, asr #3
    1c10:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    1c14:	000001e4 	andeq	r0, r0, r4, ror #3
    1c18:	a4080102 	strge	r0, [r8], #-258	; 0xfffffefe
    1c1c:	09000002 	stmdbeq	r0, {r1}
    1c20:	000001e4 	andeq	r0, r0, r4, ror #3
    __asm("    ldr     r0, =_bss\n"
    1c24:	0007490e 	andeq	r4, r7, lr, lsl #18
    1c28:	1e450500 	cdpne	5, 4, cr0, cr5, cr0, {0}
    1c2c:	000001de 	ldrdeq	r0, [r0], -lr
    1c30:	8c0f0101 	stfhis	f0, [pc], {1}
    1c34:	06000003 	streq	r0, [r0], -r3
   main();
    1c38:	0b10016e 	bleq	4021f8 <__ccfg+0x3e2250>
    FaultISR();
    1c3c:	0a000002 	beq	1c4c <zero_loop+0x20>
}
    1c40:	00021104 	andeq	r1, r2, r4, lsl #2
    1c44:	1d011000 	stcne	0, cr1, [r1, #-0]
    1c48:	11000002 	tstne	r0, r2
    1c4c:	000000d9 	ldrdeq	r0, [r0], -r9
    1c50:	01eb1200 	mvneq	r1, r0, lsl #4
static byte get_byte () {
    1c54:	02280000 	eoreq	r0, r8, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c58:	00130000 	andseq	r0, r3, r0
    1c5c:	00021d09 	andeq	r1, r2, r9, lsl #26
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c60:	0c001400 	cfstrseq	mvf1, [r0], {-0}
		b <<= 1;
    1c64:	7f060000 	svcvc	0x00060000
    1c68:	02281601 	eoreq	r1, r8, #1048576	; 0x100000
			b |= 1;
    1c6c:	01010000 	mrseq	r0, (UNDEF: 1)
	for (b = 0, i = 0; i < 8; i++) {
    1c70:	000b8914 	andeq	r8, fp, r4, lsl r9
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c74:	01820600 	orreq	r0, r2, r0, lsl #12
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1c78:	00010e14 	andeq	r0, r1, r4, lsl lr
}
    1c7c:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    1c80:	00000c28 	andeq	r0, r0, r8, lsr #24
static void put_byte (byte b) {
    1c84:	0e02d806 	cdpeq	8, 0, cr13, cr2, cr6, {0}
    1c88:	00000102 	andeq	r0, r0, r2, lsl #2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c8c:	08150101 	ldmdaeq	r5, {r0, r8}
    1c90:	09030306 	stmdbeq	r3, {r1, r2, r8, r9}
		if (b & 0x80)
    1c94:	00000281 	andeq	r0, r0, r1, lsl #5
    1c98:	0031b316 	eorseq	fp, r1, r6, lsl r3
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1c9c:	03070600 	movweq	r0, #30208	; 0x7600
		b <<= 1;
    1ca0:	0000d907 	andeq	sp, r0, r7, lsl #18
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1ca4:	7c160000 	ldcvc	0, cr0, [r6], {-0}
    1ca8:	06000004 	streq	r0, [r0], -r4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cac:	13080308 	movwne	r0, #33544	; 0x8308
}
    1cb0:	04000001 	streq	r0, [r0], #-1
    1cb4:	02d80f00 	sbcseq	r0, r8, #0, 30
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1cb8:	09060000 	stmdbeq	r6, {}	; <UNPREDICTABLE>
    1cbc:	025a0303 	subseq	r0, sl, #201326592	; 0xc000000
    1cc0:	a1170000 	tstge	r7, r0
	put_byte (cmd);
    1cc4:	30000003 	andcc	r0, r0, r3
    1cc8:	08030b06 	stmdaeq	r3, {r1, r2, r8, r9, fp}
}
    1ccc:	000002f1 	strdeq	r0, [r0], -r1
    1cd0:	00144416 	andseq	r4, r4, r6, lsl r4
static void wwait (word st, word del) {
    1cd4:	03140600 	tsteq	r4, #0, 12
    1cd8:	0000d908 	andeq	sp, r0, r8, lsl #18
    1cdc:	29160000 	ldmdbcs	r6, {}	; <UNPREDICTABLE>
	while (dopen && (rdsr () & 1)) {
    1ce0:	06000002 	streq	r0, [r0], -r2
    1ce4:	d9080315 	stmdble	r8, {r0, r2, r4, r8, r9}
    1ce8:	02000000 	andeq	r0, r0, #0
    1cec:	00038f16 	andeq	r8, r3, r6, lsl pc
	put_byte (CMD_RDSR);
    1cf0:	03160600 	tsteq	r6, #0, 12
	r = get_byte ();
    1cf4:	0001fe0b 	andeq	pc, r1, fp, lsl #28
    1cf8:	f1160400 			; <UNDEFINED> instruction: 0xf1160400
    1cfc:	0600000e 	streq	r0, [r0], -lr
	while (dopen && (rdsr () & 1)) {
    1d00:	13090317 	movwne	r0, #37655	; 0x9317
}
    1d04:	08000001 	stmdaeq	r0, {r0}
		if (st == WNONE)
    1d08:	00032a16 	andeq	r2, r3, r6, lsl sl
    1d0c:	03180600 	tsteq	r8, #0, 12
			mdelay (1);
    1d10:	0002f10f 	andeq	pc, r2, pc, lsl #2
    1d14:	24160c00 	ldrcs	r0, [r6], #-3072	; 0xfffff400
			delay (del, st);
    1d18:	06000002 	streq	r0, [r0], -r2
    1d1c:	01150319 	tsteq	r5, r9, lsl r3
			release;
    1d20:	2c000003 	stccs	0, cr0, [r0], {3}
    1d24:	02811200 	addeq	r1, r1, #0, 4
    1d28:	03010000 	movweq	r0, #4096	; 0x1000
static void ready () {
    1d2c:	94180000 	ldrls	r0, [r8], #-0
	if (dopen) {
    1d30:	03000000 	movweq	r0, #0
		wwait (WNONE, 1);
    1d34:	8e040a00 	vmlahi.f32	s0, s8, s0
    1d38:	0f000002 	svceq	0x00000002
    1d3c:	000003ac 	andeq	r0, r0, ip, lsr #7
	dstat = 0;
    1d40:	1b031c06 	blne	c8d60 <__ccfg+0xa8db8>
}
    1d44:	0000028e 	andeq	r0, r0, lr, lsl #5
    1d48:	00028414 	andeq	r8, r2, r4, lsl r4
    1d4c:	031e0600 	tsteq	lr, #0, 12
	udelay (1);
    1d50:	00032314 	andeq	r2, r3, r4, lsl r3
	udelay (1);
    1d54:	0a010100 	beq	4215c <__ccfg+0x221b4>
    1d58:	00030704 	andeq	r0, r3, r4, lsl #14
    1d5c:	03d10e00 	bicseq	r0, r1, #0, 28
		dopen = DOPEN_TEMP;
    1d60:	1d070000 	stcne	0, cr0, [r7, #-0]
    1d64:	0000d913 	andeq	sp, r0, r3, lsl r9
    1d68:	0e010100 	adfeqs	f0, f1, f0
    1d6c:	000006a6 	andeq	r0, r0, r6, lsr #13
static void cclose () {
    1d70:	e51a1e07 	ldr	r1, [sl, #-3591]	; 0xfffff1f9
	if (dopen == DOPEN_TEMP) {
    1d74:	01000000 	mrseq	r0, (UNDEF: 0)
    1d78:	088c0e01 	stmeq	ip, {r0, r9, sl, fp}
		wwait (WNONE, 1);
    1d7c:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    1d80:	0000e524 	andeq	lr, r0, r4, lsr #10
	cmd_0 (CMD_DP);
    1d84:	0e010100 	adfeqs	f0, f1, f0
    1d88:	0000051e 	andeq	r0, r0, lr, lsl r5
		dopen = 0;
    1d8c:	23142207 	tstcs	r4, #1879048192	; 0x70000000
}
    1d90:	01000003 	tsteq	r0, r3
word ee_open () {
    1d94:	0a060301 	beq	1829a0 <__ccfg+0x1629f8>
	ready ();
    1d98:	44070000 	strmi	r0, [r7], #-0
	dopen = DOPEN_PERM;
    1d9c:	00036d0f 	andeq	r6, r3, pc, lsl #26
    1da0:	73040a00 	movwvc	r0, #18944	; 0x4a00
}
    1da4:	19000003 	stmdbne	r0, {r0, r1}
	if (dopen) {
    1da8:	00008d01 	andeq	r8, r0, r1, lsl #26
    1dac:	00038d00 	andeq	r8, r3, r0, lsl #26
		dopen = DOPEN_TEMP;
    1db0:	008d1100 	addeq	r1, sp, r0, lsl #2
		cclose ();
    1db4:	de110000 	cdple	0, 1, cr0, cr1, cr0, {0}
}
    1db8:	11000001 	tstne	r0, r1
int ser_outf (word st, const char *m, ...) {
    1dbc:	0000008d 	andeq	r0, r0, sp, lsl #1
    1dc0:	024b1a00 	subeq	r1, fp, #0, 20
	if ((prcs = running (__outserial)) != 0) {
    1dc4:	0c010000 	stceq	0, cr0, [r1], {-0}
    1dc8:	60030507 	andvs	r0, r3, r7, lsl #10
		join (prcs, st);
    1dcc:	1b200001 	blne	801dd8 <__ccfg+0x7e1e30>
    1dd0:	00000bdc 	ldrdeq	r0, [r0], -ip
		release;
    1dd4:	02071001 	andeq	r1, r7, #1
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1dd8:	01000001 	tsteq	r0, r1
    1ddc:	00000305 	andeq	r0, r0, r5, lsl #6
    1de0:	531a2000 	tstpl	sl, #0
		umwait (st);
    1de4:	01000003 	tsteq	r0, r3
    1de8:	03050d1a 	movweq	r0, #23834	; 0x5d1a
	if (runstrand (__outserial, buf) == 0) {
    1dec:	20000138 	andcs	r0, r0, r8, lsr r1
    1df0:	00036112 	andeq	r6, r3, r2, lsl r1
    1df4:	0003cc00 	andeq	ip, r3, r0, lsl #24
		ufree (buf);
    1df8:	00941800 	addseq	r1, r4, r0, lsl #16
		npwait (st);
    1dfc:	00000000 	andeq	r0, r0, r0
}
    1e00:	000a741c 	andeq	r7, sl, ip, lsl r4
    1e04:	141e0100 	ldrne	r0, [lr], #-256	; 0xffffff00
    1e08:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    1e0c:	01640305 	cmneq	r4, r5, lsl #6
int ser_inf (word st, const char *fmt, ...) {
    1e10:	d01a2000 	andsle	r2, sl, r0
    1e14:	01000001 	tsteq	r0, r1
	if (fmt == NULL)
    1e18:	03051322 	movweq	r1, #21282	; 0x5322
	if (__inpline == NULL) {
    1e1c:	20000148 	andcs	r0, r0, r8, asr #2
		if ((prcs = running (__inserial)) == 0) {
    1e20:	0003141a 	andeq	r1, r3, sl, lsl r4
    1e24:	0d270100 	stfeqs	f0, [r7, #-0]
			prcs = runthread (__inserial);
    1e28:	013c0305 	teqeq	ip, r5, lsl #6
    1e2c:	291a2000 	ldmdbcs	sl, {sp}
			if (prcs == 0) {
    1e30:	01000003 	tsteq	r0, r3
				npwait (st);
    1e34:	03050730 	movweq	r0, #22320	; 0x5730
		release;
    1e38:	20000140 	andcs	r0, r0, r0, asr #2
		join (prcs, st);
    1e3c:	0003371a 	andeq	r3, r3, sl, lsl r7
    1e40:	0f310100 	svceq	0x00310100
	va_start (ap, fmt);
    1e44:	01440305 	cmpeq	r4, r5, lsl #6
	prcs = vscan (__inpline, fmt, ap);
    1e48:	451a2000 	ldrmi	r2, [sl, #-0]
    1e4c:	01000003 	tsteq	r0, r3
	ufree (__inpline);
    1e50:	03051931 	movweq	r1, #22833	; 0x5931
	__inpline = NULL;
    1e54:	20000142 	andcs	r0, r0, r2, asr #2
}
    1e58:	00011f12 	andeq	r1, r1, r2, lsl pc
    1e5c:	00043400 	andeq	r3, r4, r0, lsl #8
    1e60:	00941800 	addseq	r1, r4, r0, lsl #16
		return 0;
    1e64:	00030000 	andeq	r0, r3, r0
    1e68:	0008e51b 	andeq	lr, r8, fp, lsl r5
    1e6c:	0a360100 	beq	d82274 <__ccfg+0xd622cc>
int ser_in (word st, char *buf, int len) {
    1e70:	00000424 	andeq	r0, r0, r4, lsr #8
    1e74:	50030501 	andpl	r0, r3, r1, lsl #10
	if (len == 0)
    1e78:	12200001 	eorne	r0, r0, #1
	if (__inpline == NULL) {
    1e7c:	000001eb 	andeq	r0, r0, fp, ror #3
		if ((prcs = running (__inserial)) == 0) {
    1e80:	00000457 	andeq	r0, r0, r7, asr r4
    1e84:	00009418 	andeq	r9, r0, r8, lsl r4
			prcs = runthread (__inserial);
    1e88:	09000f00 	stmdbeq	r0, {r8, r9, sl, fp}
    1e8c:	00000447 	andeq	r0, r0, r7, asr #8
			if (prcs == 0) {
    1e90:	00022d1d 	andeq	r2, r2, sp, lsl sp
				npwait (st);
    1e94:	0c3f0100 	ldfeqs	f0, [pc], #-0	; 1e9c <ser_in+0x2c>
		release;
    1e98:	00000457 	andeq	r0, r0, r7, asr r4
		join (prcs, st);
    1e9c:	437d0305 	cmnmi	sp, #335544320	; 0x14000000
    1ea0:	3c1a0000 	ldccc	0, cr0, [sl], {-0}
	if (*__inpline == NULL) // bin cmd
    1ea4:	01000002 	tsteq	r0, r2
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1ea8:	03050d45 	movweq	r0, #23877	; 0x5d45
	if (prcs >= len)
    1eac:	00000000 	andeq	r0, r0, r0
		prcs = len-1;
    1eb0:	4901020b 	stmdbmi	r1, {r0, r1, r3, r9}
	memcpy (buf, __inpline, prcs);
    1eb4:	0004a009 	andeq	sl, r4, r9
    1eb8:	0a680d00 	beq	1a052c0 <__ccfg+0x19e5318>
    1ebc:	4a010000 	bmi	41ec4 <__ccfg+0x21f1c>
	ufree (__inpline);
    1ec0:	0000f607 	andeq	pc, r0, r7, lsl #12
	__inpline = NULL;
    1ec4:	180d0000 	stmdane	sp, {}	; <UNPREDICTABLE>
	if (*buf) // if it's NULL, it's a bin cmd
    1ec8:	0100000c 	tsteq	r0, ip
		buf [prcs] = '\0';
    1ecc:	00f6074b 	rscseq	r0, r6, fp, asr #14
}
    1ed0:	00010000 	andeq	r0, r1, r0
		prcs = strlen (__inpline);
    1ed4:	000b4803 	andeq	r4, fp, r3, lsl #16
    1ed8:	034c0100 	movteq	r0, #49408	; 0xc100
		return 0;
    1edc:	0000047c 	andeq	r0, r0, ip, ror r4
    1ee0:	0004a012 	andeq	sl, r4, r2, lsl r0
    1ee4:	0004bc00 	andeq	fp, r4, r0, lsl #24
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    1ee8:	00941800 	addseq	r1, r4, r0, lsl #16
    1eec:	00000000 	andeq	r0, r0, r0
    1ef0:	000b6e1c 	andeq	r6, fp, ip, lsl lr
	RF_cmdFs.frequency = 
    1ef4:	114e0100 	mrsne	r0, (UNDEF: 94)
}
    1ef8:	000004ac 	andeq	r0, r0, ip, lsr #9
    1efc:	016c0305 	cmneq	ip, r5, lsl #6
    1f00:	de122000 	cdple	0, 1, cr2, cr2, cr0, {0}
    1f04:	de000004 	cdple	0, 0, cr0, cr0, cr4, {0}
static int option (int opt, address val) {
    1f08:	18000004 	stmdane	r0, {r2}
	switch (opt) {
    1f0c:	00000094 	muleq	r0, r4, r0
    1f10:	040a0000 	streq	r0, [sl], #-0
    1f14:	00000113 	andeq	r0, r0, r3, lsl r1
    1f18:	000a891e 	andeq	r8, sl, lr, lsl r9
    1f1c:	02bd0100 	adcseq	r0, sp, #0, 2
    1f20:	0004ce0f 	andeq	ip, r4, pc, lsl #28
    1f24:	74030500 	strvc	r0, [r3], #-1280	; 0xfffffb00
    1f28:	12200001 	eorne	r0, r0, #1
    1f2c:	00000113 	andeq	r0, r0, r3, lsl r1
    1f30:	00000507 	andeq	r0, r0, r7, lsl #10
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    1f34:	00009418 	andeq	r9, r0, r8, lsl r4
    1f38:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
			goto RVal;
    1f3c:	00000af9 	strdeq	r0, [r0], -r9
			_BIS (dstate, DSTATE_RXON);
    1f40:	0e02c201 	cdpeq	2, 0, cr12, cr2, cr1, {0}
    1f44:	000004f7 	strdeq	r0, [r0], -r7
	int ret = 0;
    1f48:	01700305 	cmneq	r0, r5, lsl #6
			p_trigger (drvprcs, qevent);
    1f4c:	511e2000 	tstpl	lr, r0
    1f50:	0100000b 	tsteq	r0, fp
    1f54:	f72602c2 			; <UNDEFINED> instruction: 0xf72602c2
    1f58:	05000004 	streq	r0, [r0, #-4]
    1f5c:	00016803 	andeq	r6, r1, r3, lsl #16
    1f60:	a8011f20 	stmdage	r1, {r5, r8, r9, sl, fp, ip}
    1f64:	0100000b 	tsteq	r0, fp
    1f68:	0107052f 	tsteq	r7, pc, lsr #10
    1f6c:	00000102 	andeq	r0, r0, r2, lsl #2
    1f70:	0000159c 	muleq	r0, ip, r5
}
    1f74:	000015c0 	andeq	r1, r0, r0, asr #11
			_BIC (dstate, DSTATE_RXON);
    1f78:	01209c01 			; <UNDEFINED> instruction: 0x01209c01
    1f7c:	00000b2d 	andeq	r0, r0, sp, lsr #22
			statid = (val == NULL) ? 0 : *val;
    1f80:	06048201 	streq	r8, [r4], -r1, lsl #4
    1f84:	00145801 	andseq	r5, r4, r1, lsl #16
	int ret = 0;
    1f88:	00159c00 	andseq	r9, r5, r0, lsl #24
			ret = (int) statid;
    1f8c:	349c0100 	ldrcc	r0, [ip], #256	; 0x100
	if (val != NULL)
    1f90:	21000006 	tstcs	r0, r6
		*val = ret;
    1f94:	00000b69 	andeq	r0, r0, r9, ror #22
			ret = rbuffl + 2;
    1f98:	18048201 	stmdane	r4, {r0, r9, pc}
    1f9c:	00000634 	andeq	r0, r0, r4, lsr r6
			if (val != NULL) {
    1fa0:	00000506 	andeq	r0, r0, r6, lsl #10
				memcpy (val, &rxstat,
    1fa4:	61762322 	cmnvs	r6, r2, lsr #6
    1fa8:	8701006c 	strhi	r0, [r1, -ip, rrx]
				memset (&rxstat, 0, 
    1fac:	01020804 	tsteq	r2, r4, lsl #16
    1fb0:	05460000 	strbeq	r0, [r6, #-0]
			if (val == NULL)
    1fb4:	61240000 			; <UNDEFINED> instruction: 0x61240000
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    1fb8:	88010070 	stmdahi	r1, {r4, r5, r6}
    1fbc:	00c10a04 	sbceq	r0, r1, r4, lsl #20
				utimer_set (bckf_timer, *val);
    1fc0:	91020000 	mrsls	r0, (UNDEF: 2)
    1fc4:	6362234c 	cmnvs	r2, #76, 6	; 0x30000001
    1fc8:	04890100 	streq	r0, [r9], #256	; 0x100
			for (ret = 0; ret < 8; ret++)
    1fcc:	0000ea07 	andeq	lr, r0, r7, lsl #20
				if (RF_cmdPropRadioDivSetup.txPower
    1fd0:	00059e00 	andeq	r9, r5, r0, lsl #28
					== patable [ret])
    1fd4:	00762300 	rsbseq	r2, r6, r0, lsl #6
				if (RF_cmdPropRadioDivSetup.txPower
    1fd8:	07048a01 	streq	r8, [r4, -r1, lsl #20]
			for (ret = 0; ret < 8; ret++)
    1fdc:	000000d9 	ldrdeq	r0, [r0], -r9
    1fe0:	000005d2 	ldrdeq	r0, [r0], -r2
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    1fe4:	00736925 	rsbseq	r6, r3, r5, lsr #18
    1fe8:	07048b01 	streq	r8, [r4, -r1, lsl #22]
    1fec:	000000f6 	strdeq	r0, [r0], -r6
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    1ff0:	000c3026 	andeq	r3, ip, r6, lsr #32
    1ff4:	04b00100 	ldrteq	r0, [r0], #256	; 0x100
			_BIS (dstate, DSTATE_IRST);
    1ff8:	00153001 	andseq	r3, r5, r1
    1ffc:	14f02700 	ldrbtne	r2, [r0], #1792	; 0x700
    2000:	150c0000 	strne	r0, [ip, #-0]
			ret = (int) channel;
    2004:	05e60000 	strbeq	r0, [r6, #0]!
			goto RVal;
    2008:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
				(*val > 7) ? 7 : *val;
    200c:	049f0100 	ldreq	r0, [pc], #256	; 2014 <option+0x10c>
    2010:	0000ea0a 	andeq	lr, r0, sl, lsl #20
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2014:	0005fb00 	andeq	pc, r5, r0, lsl #22
    2018:	88280000 	stmdahi	r8!, {}	; <UNPREDICTABLE>
			plugch ();
    201c:	ff000005 			; <UNDEFINED> instruction: 0xff000005
			_BIS (dstate, DSTATE_IRST);
    2020:	23000005 	movwcs	r0, #5
    2024:	a9010064 	stmdbge	r1, {r2, r5, r6}
			ret = (int) vrate;
    2028:	01020b04 	tsteq	r2, r4, lsl #22
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    202c:	060e0000 	streq	r0, [lr], -r0
    2030:	27000000 	strcs	r0, [r0, -r0]
    2034:	0000157c 	andeq	r1, r0, ip, ror r5
    2038:	0000158a 	andeq	r1, r0, sl, lsl #11
    203c:	0000061c 	andeq	r0, r0, ip, lsl r6
    2040:	01007323 	tsteq	r0, r3, lsr #6
    2044:	de0b04c6 	cdple	4, 0, cr0, cr11, cr6, {6}
    2048:	37000001 	strcc	r0, [r0, -r1]
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    204c:	00000006 	andeq	r0, r0, r6
    2050:	000fe929 	andeq	lr, pc, r9, lsr #18
    2054:	00148a00 	andseq	r8, r4, r0, lsl #20
    2058:	0005b000 	andeq	fp, r5, r0
			syserror (EREQPAR, "cc13 op");
    205c:	04d90100 	ldrbeq	r0, [r9], #256	; 0x100
    2060:	0ffc2a02 	svceq	0x00fc2a02
    2064:	00000000 	andeq	r0, r0, r0
    2068:	01eb040a 	mvneq	r0, sl, lsl #8
    206c:	832b0000 			; <UNDEFINED> instruction: 0x832b0000
    2070:	0100000b 	tsteq	r0, fp
    2074:	010d0447 	tsteq	sp, r7, asr #8
    2078:	00000f64 	andeq	r0, r0, r4, ror #30
    207c:	00000f78 	andeq	r0, r0, r8, ror pc
    2080:	06799c01 	ldrbteq	r9, [r9], -r1, lsl #24
    2084:	632c0000 			; <UNDEFINED> instruction: 0x632c0000
    2088:	04470100 	strbeq	r0, [r7], #-256	; 0xffffff00
    208c:	0000d919 	andeq	sp, r0, r9, lsl r9
    2090:	00064a00 	andeq	r4, r6, r0, lsl #20
    2094:	0fe92900 	svceq	0x00e92900
static void issue_cmd (lword cmd) {
    2098:	0f640000 	svceq	0x00640000
    209c:	05300000 	ldreq	r0, [r0, #-0]!
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20a0:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    20a4:	fc2a0204 	stc2	2, cr0, [sl], #-16
    20a8:	0000000f 	andeq	r0, r0, pc
		if (res != 0x86)
    20ac:	de012d00 	cdple	13, 0, cr2, cr1, cr0, {0}
			syserror (EHARDWARE, "hang ic0");
    20b0:	0100000a 	tsteq	r0, sl
    20b4:	01060428 	tsteq	r6, r8, lsr #8
		if (cnt-- == 0) {
    20b8:	000000d9 	ldrdeq	r0, [r0], -r9
	...
			syserror (EHARDWARE, "hang ic0");
    20c4:	06da9c01 	ldrbeq	r9, [sl], r1, lsl #24
		udelay (1);
    20c8:	6e2c0000 	cdpvs	0, 2, cr0, cr12, cr0, {0}
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20cc:	28010063 	stmdacs	r1, {r0, r1, r5, r6}
}
    20d0:	011f1c04 	tsteq	pc, r4, lsl #24
    20d4:	065d0000 	ldrbeq	r0, [sp], -r0
    20d8:	c82e0000 	stmdagt	lr!, {}	; <UNPREDICTABLE>
    20dc:	0100000b 	tsteq	r0, fp
static void rx_de () {
    20e0:	de090431 	cfmvdhrle	mvd9, r0
	if ((dstate & DSTATE_RXAC) == 0)
    20e4:	7b000004 	blvc	20fc <rx_de+0x1c>
    20e8:	23000006 	movwcs	r0, #6
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    20ec:	0078616d 	rsbseq	r6, r8, sp, ror #2
	_BIC (dstate, DSTATE_RXAC);
    20f0:	08043201 	stmdaeq	r4, {r0, r9, ip, sp}
    20f4:	00000113 	andeq	r0, r0, r3, lsl r1
}
    20f8:	00000699 	muleq	r0, r9, r6
    20fc:	000af42e 	andeq	pc, sl, lr, lsr #8
    2100:	04320100 	ldrteq	r0, [r2], #-256	; 0xffffff00
static void rf_off () {
    2104:	0001130d 	andeq	r1, r1, sp, lsl #6
	if ((dstate & DSTATE_RFON) == 0)
    2108:	0006b700 	andeq	fp, r6, r0, lsl #14
    210c:	012d0000 			; <UNDEFINED> instruction: 0x012d0000
	IntDisable (INT_RFC_CPE_0);
    2110:	00000bb5 			; <UNDEFINED> instruction: 0x00000bb5
    2114:	06041501 	streq	r1, [r4], -r1, lsl #10
    2118:	0000d901 	andeq	sp, r0, r1, lsl #18
	...
	RFCSynthPowerDown ();
    2124:	099c0100 	ldmibeq	ip, {r8}
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2128:	2c000007 	stccs	0, cr0, [r0], {7}
    212c:	006e696d 	rsbeq	r6, lr, sp, ror #18
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2130:	1c041501 	cfstr32ne	mvfx1, [r4], {1}
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2134:	0000011f 	andeq	r0, r0, pc, lsl r1
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2138:	000006e0 	andeq	r0, r0, r0, ror #13
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    213c:	9b012000 	blls	4a144 <__ccfg+0x2a19c>
    2140:	0100000b 	tsteq	r0, fp
    2144:	01060402 	tsteq	r6, r2, lsl #8
    2148:	00001440 	andeq	r1, r0, r0, asr #8
	_BIC (dstate, DSTATE_RFON);
    214c:	00001458 	andeq	r1, r0, r8, asr r4
    2150:	07349c01 	ldreq	r9, [r4, -r1, lsl #24]!
}
    2154:	7d210000 	stcvc	0, cr0, [r1, #-0]
    2158:	0100000b 	tsteq	r0, fp
    215c:	d9190402 	ldmdble	r9, {r1, sl}
    2160:	f3000000 	vhadd.u8	d0, d0, d0
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2164:	00000006 	andeq	r0, r0, r6
    2168:	0a5b012d 	beq	16c2624 <__ccfg+0x16a267c>
    216c:	a3010000 	movwge	r0, #4096	; 0x1000
		if (cmd->status == tstat)
    2170:	de010803 	cdple	8, 0, cr0, cr1, cr3, {0}
		if (timeout-- == 0) {
    2174:	64000004 	strvs	r0, [r0], #-4
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2178:	0c000013 	stceq	0, cr0, [r0], {19}
    217c:	01000014 	tsteq	r0, r4, lsl r0
    2180:	0007a69c 	muleq	r7, ip, r6
			syserror (EHARDWARE, "rt2");
    2184:	131f2100 	tstne	pc, #0, 2
    2188:	a3010000 	movwge	r0, #4096	; 0x1000
		udelay (1);
    218c:	00d91a03 	sbcseq	r1, r9, r3, lsl #20
		if (cmd->status == tstat)
    2190:	07060000 	streq	r0, [r6, -r0]
}
    2194:	c82e0000 	stmdagt	lr!, {}	; <UNPREDICTABLE>
    2198:	0100000b 	tsteq	r0, fp
static void rf_on () {
    219c:	de0903ab 	cdple	3, 0, cr0, cr9, cr11, {5}
	if (dstate & DSTATE_RFON)
    21a0:	19000004 	stmdbne	r0, {r2}
    21a4:	23000007 	movwcs	r0, #7
    21a8:	01006363 	tsteq	r0, r3, ror #6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    21ac:	de1103ab 	cdple	3, 1, cr0, cr1, cr11, {5}
    21b0:	4d000004 	stcmi	0, cr0, [r0, #-16]
    21b4:	2e000007 	cdpcs	0, 0, cr0, cr0, cr7, {0}
    21b8:	00000b58 	andeq	r0, r0, r8, asr fp
	OSCHF_TurnOnXosc();
    21bc:	1503ab01 	strne	sl, [r3, #-2817]	; 0xfffff4ff
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    21c0:	00000113 	andeq	r0, r0, r3, lsl r1
    21c4:	00000776 	andeq	r0, r0, r6, ror r7
    21c8:	00131e2e 	andseq	r1, r3, lr, lsr #28
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21cc:	03af0100 			; <UNDEFINED> instruction: 0x03af0100
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21d0:	00011308 	andeq	r1, r1, r8, lsl #6
    21d4:	00078900 	andeq	r8, r7, r0, lsl #18
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    21d8:	012f0000 			; <UNDEFINED> instruction: 0x012f0000
    21dc:	00000c1e 	andeq	r0, r0, lr, lsl ip
    21e0:	06037c01 	streq	r7, [r3], -r1, lsl #24
	issue_cmd (
    21e4:	07c30101 	strbeq	r0, [r3, r1, lsl #2]
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    21e8:	63300000 	teqvs	r0, #0
    21ec:	7c010068 	stcvc	0, cr0, [r1], {104}	; 0x68
    21f0:	04de1803 	ldrbeq	r1, [lr], #2051	; 0x803
   pPatchTab[80] = 0;
    21f4:	2b000000 	blcs	21fc <rf_on+0x60>
    21f8:	00000a6e 	andeq	r0, r0, lr, ror #20
   pPatchTab[53] = 2;
    21fc:	0d034a01 	vstreq	s8, [r3, #-4]
    2200:	000ee401 	andeq	lr, lr, r1, lsl #8
   pPatchTab[55] = 3;
    2204:	000f6400 	andeq	r6, pc, r0, lsl #8
   pPatchTab[110] = 4;
    2208:	0d9c0100 	ldfeqs	f0, [ip]
    220c:	2c000008 	stccs	0, cr0, [r0], {8}
   pPatchTab[107] = 5;
    2210:	01006863 	tsteq	r0, r3, ror #16
   pPatchTab[65] = 6;
    2214:	de1b034a 	cdple	3, 1, cr0, cr11, cr10, {2}
   pPatchTab[57] = 1;
    2218:	b3000004 	movwlt	r0, #4
   pPatchTab[65] = 6;
    221c:	2e000007 	cdpcs	0, 0, cr0, cr0, cr7, {0}
   pIrqPatch[1] = _IRQ_PATCH_0;
    2220:	00000bc8 	andeq	r0, r0, r8, asr #23
    2224:	09035701 	stmdbeq	r3, {r0, r8, r9, sl, ip, lr}
   const uint32_t *pS = patchGenfskRfe;
    2228:	000004de 	ldrdeq	r0, [r0], -lr
   volatile unsigned long *pD = &HWREG(RFC_RFERAM_BASE);
    222c:	000007d1 	ldrdeq	r0, [r0], -r1
      t2 = *pS++;
    2230:	00636323 	rsbeq	r6, r3, r3, lsr #6
      t4 = *pS++;
    2234:	11035701 	tstne	r3, r1, lsl #14
      t6 = *pS++;
    2238:	000004de 	ldrdeq	r0, [r0], -lr
      t8 = *pS++;
    223c:	00000812 	andeq	r0, r0, r2, lsl r8
      *pD++ = t1;
    2240:	a4013100 	strge	r3, [r1], #-256	; 0xffffff00
      *pD++ = t2;
    2244:	0100000a 	tsteq	r0, sl
      *pD++ = t3;
    2248:	7c0602f0 	sfmvc	f0, 4, [r6], {240}	; 0xf0
      *pD++ = t4;
    224c:	cc000012 	stcgt	0, cr0, [r0], {18}
      *pD++ = t6;
    2250:	01000012 	tsteq	r0, r2, lsl r0
      *pD++ = t7;
    2254:	0008379c 	muleq	r8, ip, r7
   } while (--nIterations);
    2258:	0b082e00 	bleq	20da60 <__ccfg+0x1edab8>
      *pD++ = t8;
    225c:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    2260:	01130802 	tsteq	r3, r2, lsl #16
   *pD++ = t1;
    2264:	08460000 	stmdaeq	r6, {}^	; <UNPREDICTABLE>
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2268:	32000000 	andcc	r0, r0, #0
    226c:	006f6901 	rsbeq	r6, pc, r1, lsl #18
   *pD++ = t2;
    2270:	06027901 	streq	r7, [r2], -r1, lsl #18
   *pD++ = t3;
    2274:	0000ea01 	andeq	lr, r0, r1, lsl #20
    2278:	0011e000 	andseq	lr, r1, r0
   *pD++ = t4;
    227c:	00127c00 	andseq	r7, r2, r0, lsl #24
   *pD++ = t5;
    2280:	ba9c0100 	blt	fe702688 <_estack+0xde6fd688>
    2284:	21000008 	tstcs	r0, r8
    2288:	00000b5e 	andeq	r0, r0, lr, asr fp
	RFCAdi3VcoLdoVoltageMode (true);
    228c:	0f027901 	svceq	0x00027901
       	RFCRfTrimSet (&rfTrim);
    2290:	000000d9 	ldrdeq	r0, [r0], -r9
    2294:	00000864 	andeq	r0, r0, r4, ror #16
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2298:	7665642c 	strbtvc	r6, [r5], -ip, lsr #8
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    229c:	02790100 	rsbseq	r0, r9, #0, 2
    22a0:	0000d91b 	andeq	sp, r0, fp, lsl r9
    22a4:	00088200 	andeq	r8, r8, r0, lsl #4
	issue_cmd ((lword)&cmd_srt);
    22a8:	06632100 	strbteq	r2, [r3], -r0, lsl #2
	issue_cmd ((lword)&RF_cmdFs);
    22ac:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    22b0:	00d92502 	sbcseq	r2, r9, r2, lsl #10
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    22b4:	08a00000 	stmiaeq	r0!, {}	; <UNPREDICTABLE>
    22b8:	622c0000 	eorvs	r0, ip, #0
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22bc:	01006675 	tsteq	r0, r5, ror r6
	IntEnable (INT_RFC_CPE_0);
    22c0:	de360279 	mrcle	2, 1, r0, cr6, cr9, {3}
	_BIC (dstate, DSTATE_IRST);
    22c4:	be000001 	cdplt	0, 0, cr0, cr0, cr1, {0}
    22c8:	2c000008 	stccs	0, cr0, [r0], {8}
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22cc:	006e656c 	rsbeq	r6, lr, ip, ror #10
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22d0:	40027901 	andmi	r7, r2, r1, lsl #18
	IntEnable (INT_RFC_CPE_0);
    22d4:	000000d9 	ldrdeq	r0, [r0], -r9
}
    22d8:	000008dc 	ldrdeq	r0, [r0], -ip
	IntEnable (INT_RFC_CPE_0);
    22dc:	74657223 	strbtvc	r7, [r5], #-547	; 0xfffffddd
    22e0:	027b0100 	rsbseq	r0, fp, #0, 2
}
    22e4:	0000ea07 	andeq	lr, r0, r7, lsl #20
    22e8:	0008fc00 	andeq	pc, r8, r0, lsl #24
    22ec:	01200000 			; <UNDEFINED> instruction: 0x01200000
    22f0:	00000b1b 	andeq	r0, r0, fp, lsl fp
    22f4:	06026901 	streq	r6, [r2], -r1, lsl #18
    22f8:	0011bc01 	andseq	fp, r1, r1, lsl #24
    22fc:	0011e000 	andseq	lr, r1, r0
    2300:	f59c0100 			; <UNDEFINED> instruction: 0xf59c0100
    2304:	2c000008 	stccs	0, cr0, [r0], {8}
    2308:	01006672 	tsteq	r0, r2, ror r6
    230c:	611e0269 	tstvs	lr, r9, ror #4
    2310:	30000003 	andcc	r0, r0, r3
    2314:	2c000009 	stccs	0, cr0, [r0], {9}
    2318:	00636f6c 	rsbeq	r6, r3, ip, ror #30
    231c:	26026901 	strcs	r6, [r2], -r1, lsl #18
    2320:	0000008d 	andeq	r0, r0, sp, lsl #1
    2324:	00000959 	andeq	r0, r0, r9, asr r9
    2328:	37012000 	strcc	r2, [r1, -r0]
    232c:	0100000c 	tsteq	r0, ip
    2330:	0106025f 	tsteq	r6, pc, asr r2
    2334:	000011b6 			; <UNDEFINED> instruction: 0x000011b6
    2338:	000011ba 			; <UNDEFINED> instruction: 0x000011ba
    233c:	093e9c01 	ldmdbeq	lr!, {r0, sl, fp, ip, pc}
    2340:	64210000 	strtvs	r0, [r1], #-0
static void rx_int_enable () {
    2344:	0100000b 	tsteq	r0, fp
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2348:	de19025f 	mrcle	2, 0, r0, cr9, cr15, {2}
    234c:	82000001 	andhi	r0, r0, #1
    2350:	2c000009 	stccs	0, cr0, [r0], {9}
    2354:	5f010063 	svcpl	0x00010063
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2358:	01e42402 	mvneq	r2, r2, lsl #8
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    235c:	09950000 	ldmibeq	r5, {}	; <UNPREDICTABLE>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2360:	6e2c0000 	cdpvs	0, 2, cr0, cr12, cr0, {0}
				diag ("BAD RX");
    2364:	025f0100 	subseq	r0, pc, #0, 2
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2368:	00008d2b 	andeq	r8, r0, fp, lsr #26
    236c:	0009a800 	andeq	sl, r9, r0, lsl #16
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2370:	01200000 			; <UNDEFINED> instruction: 0x01200000
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2374:	00000bf4 	strdeq	r0, [r0], -r4
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2378:	06025901 	streq	r5, [r2], -r1, lsl #18
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    237c:	0011a201 	andseq	sl, r1, r1, lsl #4
		if (db->status == DATA_ENTRY_FINISHED) {
    2380:	0011b600 	andseq	fp, r1, r0, lsl #12
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2384:	899c0100 	ldmibhi	ip, {r8}
    2388:	21000009 	tstcs	r0, r9
			nr++;
    238c:	00000b64 	andeq	r0, r0, r4, ror #22
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2390:	19025901 	stmdbne	r2, {r0, r8, fp, ip, lr}
    2394:	000001de 	ldrdeq	r0, [r0], -lr
    2398:	000009bb 			; <UNDEFINED> instruction: 0x000009bb
    239c:	6372732c 	cmnvs	r2, #44, 6	; 0xb0000000
				__dp [pl + 1] = __dp [pl] - 128;
    23a0:	02590100 	subseq	r0, r9, #0, 2
				pl = __dp [1] + 2;
    23a4:	0006342b 	andeq	r3, r6, fp, lsr #8
				__dp [pl + 1] = __dp [pl] - 128;
    23a8:	0009ce00 	andeq	ip, r9, r0, lsl #28
    23ac:	006e2c00 	rsbeq	r2, lr, r0, lsl #24
				__dp [pl] = 0;
    23b0:	34025901 	strcc	r5, [r2], #-2305	; 0xfffff6ff
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    23b4:	0000008d 	andeq	r0, r0, sp, lsl #1
    23b8:	000009ec 	andeq	r0, r0, ip, ror #19
    23bc:	5e012000 	cdppl	0, 0, cr2, cr1, cr0, {0}
			db->status = DATA_ENTRY_PENDING;
    23c0:	0100000c 	tsteq	r0, ip
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    23c4:	01060254 	tsteq	r6, r4, asr r2
	...
				diag ("BAD RX");
    23d0:	09ce9c01 	stmibeq	lr, {r0, sl, fp, ip, pc}^
	if (nr) {
    23d4:	642c0000 	strtvs	r0, [ip], #-0
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23d8:	02540100 	subseq	r0, r4, #0, 2
}
    23dc:	0001de1a 	andeq	sp, r1, sl, lsl lr
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23e0:	0009ff00 	andeq	pc, r9, r0, lsl #30
    23e4:	00732c00 	rsbseq	r2, r3, r0, lsl #24
    23e8:	29025401 	stmdbcs	r2, {r0, sl, ip, lr}
}
    23ec:	00000634 	andeq	r0, r0, r4, lsr r6
    23f0:	00000a12 	andeq	r0, r0, r2, lsl sl
    23f4:	01006e33 	tsteq	r0, r3, lsr lr
    23f8:	8d300254 	lfmhi	f0, 4, [r0, #-336]!	; 0xfffffeb0
    23fc:	01000000 	mrseq	r0, (UNDEF: 0)
    2400:	01200052 	qsubeq	r0, r2, r0
    2404:	00000b32 	andeq	r0, r0, r2, lsr fp
thread (cc1350_driver)
    2408:	06024e01 	streq	r4, [r2], -r1, lsl #28
    240c:	00000001 	andeq	r0, r0, r1
    2410:	00000000 	andeq	r0, r0, r0
    2414:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    2418:	2c00000a 	stccs	0, cr0, [r0], {10}
		if (dstate & DSTATE_IRST) {
    241c:	4e010064 	cdpmi	0, 0, cr0, cr1, cr4, {3}
    2420:	01de1902 	bicseq	r1, lr, r2, lsl #18
    2424:	0a250000 	beq	94242c <__ccfg+0x922484>
			rf_off ();
    2428:	732c0000 			; <UNDEFINED> instruction: 0x732c0000
			_BIC (dstate,
    242c:	024e0100 	subeq	r0, lr, #0, 2
    2430:	00063428 	andeq	r3, r6, r8, lsr #8
		if (dstate & DSTATE_RXAC) {
    2434:	000a4300 	andeq	r4, sl, r0, lsl #6
    2438:	01200000 			; <UNDEFINED> instruction: 0x01200000
			if ((dstate & DSTATE_RXON) == 0)
    243c:	00000c43 	andeq	r0, r0, r3, asr #24
				rx_de ();
    2440:	06024701 	streq	r4, [r2], -r1, lsl #14
		if (paylen == 0) {
    2444:	00000001 	andeq	r0, r0, r1
    2448:	00000000 	andeq	r0, r0, r0
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    244c:	4d9c0100 	ldfmis	f0, [ip]
    2450:	2c00000a 	stccs	0, cr0, [r0], {10}
    2454:	47010064 	strmi	r0, [r1, -r4, rrx]
    2458:	01de1a02 	bicseq	r1, lr, r2, lsl #20
				paylen -= 2;
    245c:	0a560000 	beq	1582464 <__ccfg+0x15624bc>
    2460:	732c0000 			; <UNDEFINED> instruction: 0x732c0000
    2464:	02470100 	subeq	r0, r7, #0, 2
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2468:	00063429 	andeq	r3, r6, r9, lsr #8
    246c:	000a7400 	andeq	r7, sl, r0, lsl #8
    2470:	006e2c00 	rsbeq	r2, lr, r0, lsl #24
    2474:	30024701 	andcc	r4, r2, r1, lsl #14
		} else if (dstate & DSTATE_RXON) {
    2478:	0000008d 	andeq	r0, r0, sp, lsl #1
			rf_on ();
    247c:	00000a87 	andeq	r0, r0, r7, lsl #21
	if (dstate & DSTATE_RXAC)
    2480:	4f012000 	svcmi	0x00012000
    2484:	0100000a 	tsteq	r0, sl
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2488:	01060242 	tsteq	r6, r2, asr #4
    248c:	00001192 	muleq	r0, r2, r1
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2490:	000011a2 	andeq	r1, r0, r2, lsr #3
	issue_cmd ((lword)&RF_cmdPropRx);
    2494:	0a859c01 	beq	fe1694a0 <_estack+0xde1644a0>
	_BIS (dstate, DSTATE_RXAC);
    2498:	642c0000 	strtvs	r0, [ip], #-0
    249c:	02420100 	subeq	r0, r2, #0, 2
    24a0:	0001de19 	andeq	sp, r1, r9, lsl lr
				if (statid != 0xffff)
    24a4:	000a9a00 	andeq	r9, sl, r0, lsl #20
    24a8:	00732c00 	rsbseq	r2, r3, r0, lsl #24
					((address)(RF_cmdPropTx.pPkt)) [0] =
    24ac:	28024201 	stmdacs	r2, {r0, r9, lr}
				RF_cmdPropTx.pktLen = (byte) paylen;
    24b0:	00000634 	andeq	r0, r0, r4, lsr r6
		if (paylen == 0) {
    24b4:	00000aad 	andeq	r0, r0, sp, lsr #21
			wait (qevent, DR_LOOP);
    24b8:	d2012d00 	andle	r2, r1, #0, 26
    24bc:	0100000a 	tsteq	r0, sl
			if (dstate & DSTATE_RXAC) {
    24c0:	01050239 	tsteq	r5, r9, lsr r2
    24c4:	0000008d 	andeq	r0, r0, sp, lsl #1
				rx_int_enable ();
    24c8:	00001184 	andeq	r1, r0, r4, lsl #3
			release;
    24cc:	00001192 	muleq	r0, r2, r1
			} else if (dstate & DSTATE_RFON) {
    24d0:	0ac19c01 	beq	ff0694dc <_estack+0xdf0644dc>
				delay (offdelay, DR_GOOF);
    24d4:	732c0000 			; <UNDEFINED> instruction: 0x732c0000
    24d8:	02390100 	eorseq	r0, r9, #0, 2
    24dc:	0006341e 	andeq	r3, r6, lr, lsl r4
		if (bckf_timer) {
    24e0:	000acb00 	andeq	ip, sl, r0, lsl #22
			wait (qevent, DR_LOOP);
    24e4:	00692300 	rsbeq	r2, r9, r0, lsl #6
    24e8:	06023b01 	streq	r3, [r2], -r1, lsl #22
    24ec:	0000008d 	andeq	r0, r0, sp, lsl #1
			delay (bckf_timer, DR_LOOP);
    24f0:	00000ae9 	andeq	r0, r0, r9, ror #21
    24f4:	eb012d00 	bl	4d8fc <__ccfg+0x2d954>
			if (dstate & DSTATE_RXAC)
    24f8:	0100000a 	tsteq	r0, sl
    24fc:	0106022d 	tsteq	r6, sp, lsr #4
		rf_on ();
    2500:	000000d9 	ldrdeq	r0, [r0], -r9
	...
		RF_cmdPropTx . status = 0;
    250c:	0b0e9c01 	bleq	3a9518 <__ccfg+0x389570>
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2510:	662c0000 	strtvs	r0, [ip], -r0
		issue_cmd ((lword)&cmd_cs);
    2514:	01006e75 	tsteq	r0, r5, ror lr
		if (dstate & DSTATE_IRST)
    2518:	fe18022d 	cdp2	2, 1, cr0, cr8, cr13, {1}
    251c:	fc000001 	stc2	0, cr0, [r0], {1}
    2520:	2300000a 	movwcs	r0, #10
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2524:	2f010069 	svccs	0x00010069
    2528:	03230e02 			; <UNDEFINED> instruction: 0x03230e02
			delay (1, DR_XMIT);
    252c:	0b1a0000 	bleq	682534 <__ccfg+0x66258c>
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2530:	63230000 			; <UNDEFINED> instruction: 0x63230000
    2534:	02300100 	eorseq	r0, r0, #0, 2
    2538:	0000d907 	andeq	sp, r0, r7, lsl #18
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    253c:	000b3800 	andeq	r3, fp, r0, lsl #16
    2540:	012d0000 			; <UNDEFINED> instruction: 0x012d0000
				RF_cmdPropTx . status = 0;
    2544:	00000aec 	andeq	r0, r0, ip, ror #21
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2548:	07021f01 	streq	r1, [r2, -r1, lsl #30]
				issue_cmd ((lword)&RF_cmdPropTx);
    254c:	00011301 	andeq	r1, r1, r1, lsl #6
				proceed (DR_XMIT);
    2550:	00116000 	andseq	r6, r1, r0
    2554:	00118400 	andseq	r8, r1, r0, lsl #8
			txtries++;
    2558:	4a9c0100 	bmi	fe702960 <_estack+0xde6fd960>
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    255c:	2c00000b 	stccs	0, cr0, [r0], {11}
    2560:	006e7566 	rsbeq	r7, lr, r6, ror #10
    2564:	18021f01 	stmdane	r2, {r0, r8, r9, sl, fp, ip}
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2568:	000001fe 	strdeq	r0, [r0], -lr
		goto DR_LOOP__;
    256c:	00000b56 	andeq	r0, r0, r6, asr fp
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2570:	01006924 	tsteq	r0, r4, lsr #18
		paylen = 0;
    2574:	230e0221 	movwcs	r0, #57889	; 0xe221
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2578:	01000003 	tsteq	r0, r3
		txtries = 0;
    257c:	012d0050 	qsubeq	r0, r0, sp
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2580:	00000be6 	andeq	r0, r0, r6, ror #23
    2584:	09021301 	stmdbeq	r2, {r0, r8, r9, ip}
    2588:	0001fe01 	andeq	pc, r1, r1, lsl #28
	...
		    tcvphy_top (physid) == NULL)
    2594:	889c0100 	ldmhi	ip, {r8}
    2598:	2c00000b 	stccs	0, cr0, [r0], {11}
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    259c:	00646970 	rsbeq	r6, r4, r0, ror r9
    25a0:	18021301 	stmdane	r2, {r0, r8, r9, ip}
			rf_off ();
    25a4:	00000113 	andeq	r0, r0, r3, lsl r1
endthread
    25a8:	00000b7f 	andeq	r0, r0, pc, ror fp
    25ac:	01006923 	tsteq	r0, r3, lsr #18
    25b0:	230e0215 	movwcs	r0, #57877	; 0xe215
    25b4:	9d000003 	stcls	0, cr0, [r0, #-12]
    25b8:	0000000b 	andeq	r0, r0, fp
    25bc:	0bad0120 	bleq	feb42a44 <_estack+0xdeb3da44>
    25c0:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    25c4:	00010601 	andeq	r0, r1, r1, lsl #12
    25c8:	00000000 	andeq	r0, r0, r0
    25cc:	01000000 	mrseq	r0, (UNDEF: 0)
    25d0:	000bf19c 	muleq	fp, ip, r1
    25d4:	75662c00 	strbvc	r2, [r6, #-3072]!	; 0xfffff400
    25d8:	f501006e 			; <UNDEFINED> instruction: 0xf501006e
    25dc:	01fe1701 	mvnseq	r1, r1, lsl #14
    25e0:	0bbb0000 	bleq	feec25e8 <_estack+0xdeebd5e8>
    25e4:	72230000 	eorvc	r0, r3, #0
void RFCCPE0IntHandler (void) {
    25e8:	01006c65 	tsteq	r0, r5, ror #24
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    25ec:	cd0a01f9 	stfgts	f0, [sl, #-996]	; 0xfffffc1c
		_BIS (dstate, DSTATE_IRST);
    25f0:	d9000000 	stmdble	r0, {}	; <UNPREDICTABLE>
    25f4:	2300000b 	movwcs	r0, #11
    25f8:	fa010069 	blx	427a4 <__ccfg+0x227fc>
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    25fc:	03230e01 			; <UNDEFINED> instruction: 0x03230e01
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2600:	0bec0000 	bleq	ffb02608 <_estack+0xdfafd608>
    2604:	6a230000 	bvs	8c260c <__ccfg+0x8a2664>
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2608:	01fa0100 	mvnseq	r0, r0, lsl #2
	p_trigger (drvprcs, qevent);
    260c:	00032312 	andeq	r2, r3, r2, lsl r3
    2610:	000c2000 	andeq	r2, ip, r0
    2614:	006b2300 	rsbeq	r2, fp, r0, lsl #6
    2618:	1601fa01 	strne	pc, [r1], -r1, lsl #20
    261c:	00000323 	andeq	r0, r0, r3, lsr #6
    2620:	00000c3e 	andeq	r0, r0, lr, lsr ip
    2624:	84012000 	strhi	r2, [r1], #-0
    2628:	0100000a 	tsteq	r0, sl
    262c:	010601d9 	ldrdeq	r0, [r6, -r9]
    2630:	00001314 	andeq	r1, r0, r4, lsl r3
	RISE_N_SHINE;
    2634:	00001364 	andeq	r1, r0, r4, ror #6
    2638:	0c369c01 	ldceq	12, cr9, [r6], #-4
}
    263c:	702c0000 	eorvc	r0, ip, r0
    2640:	01006469 	tsteq	r0, r9, ror #8
    2644:	131201d9 	tstne	r2, #1073741878	; 0x40000036
    2648:	5c000001 	stcpl	0, cr0, [r0], {1}
    264c:	2300000c 	movwcs	r0, #12
    2650:	dd010069 	stcle	0, cr0, [r1, #-420]	; 0xfffffe5c
void phys_cc1350 (int phy, int mbs) {
    2654:	03230e01 			; <UNDEFINED> instruction: 0x03230e01
	if (rbuffl != 0)
    2658:	0c900000 	ldceq	0, cr0, [r0], {0}
    265c:	6a250000 	bvs	942664 <__ccfg+0x9226bc>
		syserror (ETOOMANY, "cc13");
    2660:	01dd0100 	bicseq	r0, sp, r0, lsl #2
		syserror (EREQPAR, "cc13 mb");
    2664:	00032312 	andeq	r2, r3, r2, lsl r3
	if (mbs == 0)
    2668:	122b0000 	eorne	r0, fp, #0
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    266c:	0100000a 	tsteq	r0, sl
		syserror (EREQPAR, "cc13 mb");
    2670:	010d01c4 	smlabteq	sp, r4, r1, r0
    2674:	00000ea8 	andeq	r0, r0, r8, lsr #29
	i = 0;
    2678:	00000ee4 	andeq	r0, r0, r4, ror #29
	rbuffl = (byte) mbs;
    267c:	0c8b9c01 	stceq	12, cr9, [fp], {1}
		db->config.type = 0;	// General (data in structure)
    2680:	70330000 	eorsvc	r0, r3, r0
	rbuffl = (byte) mbs;
    2684:	01006469 	tsteq	r0, r9, ror #8
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2688:	232101c4 			; <UNDEFINED> instruction: 0x232101c4
    268c:	01000003 	tsteq	r0, r3
		if (db == NULL)
    2690:	0c132e50 	ldceq	14, cr2, [r3], {80}	; 0x50
			syserror (EMALLOC, "cc13");
    2694:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    2698:	01130801 	tsteq	r3, r1, lsl #16
    269c:	0cb90000 	ldceq	0, cr0, [r9]
		db->status = DATA_ENTRY_PENDING;
    26a0:	6a230000 	bvs	8c26a8 <__ccfg+0x8a2700>
		if (i)
    26a4:	01c90100 	biceq	r0, r9, r0, lsl #2
			da->pNextEntry = (byte*) db;
    26a8:	00008d06 	andeq	r8, r0, r6, lsl #26
		db->length = rbuffl + 2;
    26ac:	000ccc00 	andeq	ip, ip, r0, lsl #24
    26b0:	00692400 	rsbeq	r2, r9, r0, lsl #8
		db->config.type = 0;	// General (data in structure)
    26b4:	0e01ca01 	vmlaeq.f32	s24, s2, s2
		db->length = rbuffl + 2;
    26b8:	00000323 	andeq	r0, r0, r3, lsr #6
	db->pNextEntry = (byte*) re;
    26bc:	2d005201 	sfmcs	f5, 4, [r0, #-4]
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    26c0:	000bee01 	andeq	lr, fp, r1, lsl #28
    26c4:	01b30100 			; <UNDEFINED> instruction: 0x01b30100
	if (rbuffs == NULL)
    26c8:	00d90106 	sbcseq	r0, r9, r6, lsl #2
	...
	rbuffs->pLastEntry = NULL;
    26d4:	9c010000 	stcls	0, cr0, [r1], {-0}
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26d8:	00000cc9 	andeq	r0, r0, r9, asr #25
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    26dc:	6469702c 	strbtvs	r7, [r9], #-44	; 0xffffffd4
    26e0:	01b30100 			; <UNDEFINED> instruction: 0x01b30100
    26e4:	00011313 	andeq	r1, r1, r3, lsl r3
	rbuffl -= 2;
    26e8:	000cdf00 	andeq	sp, ip, r0, lsl #30
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26ec:	00692300 	rsbeq	r2, r9, r0, lsl #6
	rbuffl -= 2;
    26f0:	0e01b501 	cfsh32eq	mvfx11, mvfx1, #1
	physid = phy;
    26f4:	00000323 	andeq	r0, r0, r3, lsr #6
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26f8:	00000cfd 	strdeq	r0, [r0], -sp
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26fc:	67013400 	strvs	r3, [r1, -r0, lsl #8]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2700:	0100000a 	tsteq	r0, sl
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2704:	010601a8 	smlatbeq	r6, r8, r1, r0
	...
	drvprcs = runthread (cc1350_driver);
    2710:	01209c01 			; <UNDEFINED> instruction: 0x01209c01
    2714:	000021f0 	strdeq	r2, [r0], -r0
    2718:	06019a01 	streq	r9, [r1], -r1, lsl #20
	if (drvprcs == 0)
    271c:	00112801 	andseq	r2, r1, r1, lsl #16
		syserror (ERESOURCE, "cc13");
    2720:	00116000 	andseq	r6, r1, r0
    2724:	189c0100 	ldmne	ip, {r8}
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2728:	2c00000d 	stccs	0, cr0, [r0], {13}
    272c:	9a010064 	bls	428c4 <__ccfg+0x2291c>
    2730:	00d91201 	sbcseq	r1, r9, r1, lsl #4
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2734:	0d1b0000 	ldceq	0, cr0, [fp, #-0]
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2738:	7d210000 	stcvc	0, cr0, [r1, #-0]
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    273c:	0100000b 	tsteq	r0, fp
    2740:	d91a019a 	ldmdble	sl, {r1, r3, r4, r7, r8}
    2744:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    2748:	0000000d 	andeq	r0, r0, sp
    274c:	0b3e012d 	bleq	f82c08 <__ccfg+0xf62c60>
    2750:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    2754:	13010701 	movwne	r0, #5889	; 0x1701
    2758:	04000001 	streq	r0, [r0], #-1
    275c:	28000011 	stmdacs	r0, {r0, r4}
	plugch ();
    2760:	01000011 	tsteq	r0, r1, lsl r0
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2764:	000d669c 	muleq	sp, ip, r6
    2768:	69702c00 	ldmdbvs	r0!, {sl, fp, sp}^
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    276c:	88010064 	stmdahi	r1, {r2, r5, r6}
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2770:	01131801 	tsteq	r3, r1, lsl #16
    2774:	0d410000 	stcleq	0, cr0, [r1, #-0]
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2778:	732c0000 			; <UNDEFINED> instruction: 0x732c0000
}
    277c:	88010074 	stmdahi	r1, {r2, r4, r5, r6}
    2780:	00d92201 	sbcseq	r2, r9, r1, lsl #4
    2784:	0d6a0000 	stcleq	0, cr0, [sl, #-0]
    2788:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    278c:	018a0100 	orreq	r0, sl, r0, lsl #2
    2790:	0003230e 	andeq	r2, r3, lr, lsl #6
    2794:	000d8800 	andeq	r8, sp, r0, lsl #16
    2798:	01200000 			; <UNDEFINED> instruction: 0x01200000
    279c:	00000b0d 	andeq	r0, r0, sp, lsl #22
    27a0:	06017801 	streq	r7, [r1], -r1, lsl #16
    27a4:	00000001 	andeq	r0, r0, r1
    27a8:	00000000 	andeq	r0, r0, r0
    27ac:	be9c0100 	fmllte	f0, f4, f0
    27b0:	2c00000d 	stccs	0, cr0, [r0], {13}
    27b4:	00646970 	rsbeq	r6, r4, r0, ror r9
    27b8:	1b017801 	blne	607c4 <__ccfg+0x4081c>
    27bc:	00000113 	andeq	r0, r0, r3, lsl r1
    27c0:	00000da6 	andeq	r0, r0, r6, lsr #27
    27c4:	000b6f21 	andeq	r6, fp, r1, lsr #30
    27c8:	01780100 	cmneq	r8, r0, lsl #2
    27cc:	00011326 	andeq	r1, r1, r6, lsr #6
    27d0:	000db900 	andeq	fp, sp, r0, lsl #18
    27d4:	00692400 	rsbeq	r2, r9, r0, lsl #8
    27d8:	0e017c01 	cdpeq	12, 0, cr7, cr1, cr1, {0}
    27dc:	00000323 	andeq	r0, r0, r3, lsr #6
    27e0:	6a235001 	bvs	8d67ec <__ccfg+0x8b6844>
    27e4:	017d0100 	cmneq	sp, r0, lsl #2
    27e8:	00008d07 	andeq	r8, r0, r7, lsl #26
    27ec:	000dd700 	andeq	sp, sp, r0, lsl #14
    27f0:	01200000 			; <UNDEFINED> instruction: 0x01200000
    27f4:	00000ab5 			; <UNDEFINED> instruction: 0x00000ab5
    27f8:	06016601 	streq	r6, [r1], -r1, lsl #12
    27fc:	0010d001 	andseq	sp, r0, r1
    2800:	00110400 	andseq	r0, r1, r0, lsl #8
    2804:	039c0100 	orrseq	r0, ip, #0, 2
    2808:	3500000e 	strcc	r0, [r0, #-14]
    280c:	00000b6f 	andeq	r0, r0, pc, ror #22
    2810:	1a016601 	bne	5c01c <__ccfg+0x3c074>
    2814:	00000113 	andeq	r0, r0, r3, lsl r1
    2818:	6a235001 	bvs	8d6824 <__ccfg+0x8b687c>
    281c:	016a0100 	cmneq	sl, r0, lsl #2
    2820:	00008d06 	andeq	r8, r0, r6, lsl #26
    2824:	000df500 	andeq	pc, sp, r0, lsl #10
    2828:	00692400 	rsbeq	r2, r9, r0, lsl #8
    282c:	0e016b01 	vmlaeq.f64	d6, d1, d1
    2830:	00000323 	andeq	r0, r0, r3, lsr #6
    2834:	2f005201 	svccs	0x00005201
    2838:	000b9101 	andeq	r9, fp, r1, lsl #2
    283c:	01590100 	cmpeq	r9, r0, lsl #2
    2840:	39010106 	stmdbcc	r1, {r1, r2, r8}
    2844:	3600000e 	strcc	r0, [r0], -lr
    2848:	00000b6f 	andeq	r0, r0, pc, ror #22
    284c:	17015901 	strne	r5, [r1, -r1, lsl #18]
    2850:	00000113 	andeq	r0, r0, r3, lsl r1
    2854:	000b7d36 	andeq	r7, fp, r6, lsr sp
    2858:	01590100 	cmpeq	r9, r0, lsl #2
    285c:	0000d923 	andeq	sp, r0, r3, lsr #18
    2860:	006a2500 	rsbeq	r2, sl, r0, lsl #10
    2864:	07015d01 	streq	r5, [r1, -r1, lsl #26]
		if (res && (d < n))
    2868:	000000ea 	andeq	r0, r0, sl, ror #1
    286c:	00012000 	andeq	r2, r1, r0
    2870:	0100000b 	tsteq	r0, fp
    2874:	01060153 	tsteq	r6, r3, asr r1
			res [d] = (char) c;
    2878:	00001088 	andeq	r1, r0, r8, lsl #1
		d++;
    287c:	0000109c 	muleq	r0, ip, r0
    2880:	0e649c01 	cdpeq	12, 6, cr9, cr4, cr1, {0}
    2884:	7d210000 	stcvc	0, cr0, [r1, #-0]
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2888:	0100000b 	tsteq	r0, fp
    288c:	d9140153 	ldmdble	r4, {r0, r1, r4, r6, r8}
    2890:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
				enci (10000);
    2894:	0000000e 	andeq	r0, r0, lr
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2898:	0a7a012d 	beq	1e82d54 <__ccfg+0x1e62dac>
    289c:	2c010000 	stccs	0, cr0, [r1], {-0}
	d = 0;
    28a0:	13010701 	movwne	r0, #5889	; 0x1701
		c = *fm++;
    28a4:	0c000001 	stceq	0, cr0, [r0], {1}
		if (c == '\\') {
    28a8:	40000014 	andmi	r0, r0, r4, lsl r0
			if ((c = *fm++) == '\0') {
    28ac:	01000014 	tsteq	r0, r4, lsl r0
    28b0:	000ec69c 	muleq	lr, ip, r6
				outc ('\\');
    28b4:	0b212100 	bleq	84acbc <__ccfg+0x82ad14>
			if ((c = *fm++) == '\0') {
    28b8:	2c010000 	stccs	0, cr0, [r1], {-0}
				outc ('\\');
    28bc:	01fe1a01 	mvnseq	r1, r1, lsl #20
    28c0:	0e1b0000 	cdpeq	0, 1, cr0, cr11, cr0, {0}
			outc (c);
    28c4:	f1210000 			; <UNDEFINED> instruction: 0xf1210000
    28c8:	0100000e 	tsteq	r0, lr
				outc (val);
    28cc:	1326012c 			; <UNDEFINED> instruction: 0x1326012c
				val = (word) va_arg (ap, aword);
    28d0:	39000001 	stmdbcc	r0, {r0}
		if (c == '%') {
    28d4:	2400000e 	strcs	r0, [r0], #-14
    28d8:	2e010069 	cdpcs	0, 0, cr0, cr1, cr9, {3}
			c = *fm++;
    28dc:	03230e01 			; <UNDEFINED> instruction: 0x03230e01
    28e0:	50010000 	andpl	r0, r1, r0
			switch (c) {
    28e4:	00056037 	andeq	r6, r5, r7, lsr r0
    28e8:	006a2300 	rsbeq	r2, sl, r0, lsl #6
    28ec:	0f013d01 	svceq	0x00013d01
    28f0:	00000323 	andeq	r0, r0, r3, lsr #6
    28f4:	00000e57 	andeq	r0, r0, r7, asr lr
    28f8:	01380000 	teqeq	r8, r0
    28fc:	00000bce 	andeq	r0, r0, lr, asr #23
				outc ('%');
    2900:	0106af01 	tsteq	r6, r1, lsl #30
    2904:	000f0b01 	andeq	r0, pc, r1, lsl #22
    2908:	696d3900 	stmdbvs	sp!, {r8, fp, ip, sp}^
				outc (c);
    290c:	af01006e 	svcge	0x0001006e
			outc (c);
    2910:	0000d91a 	andeq	sp, r0, sl, lsl r9
			if (c == '\0')
    2914:	07623a00 	strbeq	r3, [r2, -r0, lsl #20]!
				return d;
    2918:	af010000 	svcge	0x00010000
}
    291c:	0000cd27 	andeq	ip, r0, r7, lsr #26
    2920:	00693b00 	rsbeq	r3, r9, r0, lsl #22
			switch (c) {
    2924:	230ebd01 	movwcs	fp, #60673	; 0xed01
    2928:	3b000003 	blcc	293c <__pi_vfparse+0xb4>
    292c:	be010064 	cdplt	0, 0, cr0, cr1, cr4, {3}
				for (i = 12; ; i -= 4) {
    2930:	0000d907 	andeq	sp, r0, r7, lsl #18
				val = (word) va_arg (ap, aword);
    2934:	4f4d3c00 	svcmi	0x004d3c00
						[ (val >> i) & 0xf ]);
    2938:	0901004b 	stmdbeq	r1, {r0, r1, r3, r6}
    293c:	3d000101 	stfccs	f0, [r0, #-4]
    2940:	000ac201 	andeq	ip, sl, r1, lsl #4
					outc (__pi_hex_enc_table
    2944:	06a70100 	strteq	r0, [r7], r0, lsl #2
    2948:	000fb401 	andeq	fp, pc, r1, lsl #8
					if (i == 0)
    294c:	000fba00 	andeq	fp, pc, r0, lsl #20
    2950:	409c0100 	addsmi	r0, ip, r0, lsl #2
				for (i = 12; ; i -= 4) {
    2954:	3e00000f 	cdpcc	0, 0, cr0, cr0, cr15, {0}
				val = (word) va_arg (ap, aword);
    2958:	a7010074 	smlsdxge	r1, r4, r0, r0
				if (c == 'd' && (val & 0x8000) != 0) {
    295c:	00011f1f 	andeq	r1, r1, pc, lsl pc
				val = (word) va_arg (ap, aword);
    2960:	000e8000 	andeq	r8, lr, r0
				if (c == 'd' && (val & 0x8000) != 0) {
    2964:	00763e00 	rsbseq	r3, r6, r0, lsl #28
    2968:	d927a701 	stmdble	r7!, {r0, r8, r9, sl, sp, pc}
					outc ('-');
    296c:	93000000 	movwls	r0, #0
    2970:	0000000e 	andeq	r0, r0, lr
					val = (~val) + 1;
    2974:	0c50013d 	ldfeqe	f0, [r0], {61}	; 0x3d
    2978:	8f010000 	svchi	0x00010000
				for (i = 12; ; i -= 4) {
    297c:	00000106 	andeq	r0, r0, r6, lsl #2
				enci (10000);
    2980:	00000000 	andeq	r0, r0, r0
    2984:	9c010000 	stcls	0, cr0, [r1], {-0}
    2988:	00000f76 	andeq	r0, r0, r6, ror pc
    298c:	0074753e 	rsbseq	r7, r4, lr, lsr r5
    2990:	1f1d8f01 	svcne	0x001d8f01
    2994:	a6000001 	strge	r0, [r0], -r1
    2998:	3f00000e 	svccc	0x0000000e
    299c:	93010069 	movwls	r0, #4201	; 0x1069
    29a0:	00008d06 	andeq	r8, r0, r6, lsl #26
    29a4:	000ec400 	andeq	ip, lr, r0, lsl #8
    29a8:	013d0000 	teqeq	sp, r0
    29ac:	00000a90 	muleq	r0, r0, sl
    29b0:	01067f01 	tsteq	r6, r1, lsl #30
    29b4:	00000f88 	andeq	r0, r0, r8, lsl #31
    29b8:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
    29bc:	0fac9c01 	svceq	0x00ac9c01
    29c0:	753e0000 	ldrvc	r0, [lr, #-0]!
    29c4:	7f010074 	svcvc	0x00010074
				if (c == 'd' || c == 'u') {
    29c8:	00011f1a 	andeq	r1, r1, sl, lsl pc
    29cc:	000ee200 	andeq	lr, lr, r0, lsl #4
					if (c == 'd' &&
    29d0:	00693f00 	rsbeq	r3, r9, r0, lsl #30
					val = va_arg (ap, lword);
    29d4:	8d068301 	stchi	3, cr8, [r6, #-4]
					fm++;
    29d8:	0b000000 	bleq	29e0 <__pi_vfparse+0x158>
					if (c == 'd' &&
    29dc:	0000000f 	andeq	r0, r0, pc
    29e0:	0b750140 	bleq	1d42ee8 <__ccfg+0x1d22f40>
						outc ('-');
    29e4:	7b010000 	blvc	429ec <__ccfg+0x22a44>
    29e8:	0f780106 	svceq	0x00780106
						val = (~val) + 1;
    29ec:	0f880000 	svceq	0x00880000
				enci (10000);
    29f0:	9c010000 	stcls	0, cr0, [r1], {-0}
					enci (1000000000UL);
    29f4:	000b2641 	andeq	r2, fp, r1, asr #12
    29f8:	145f0100 	ldrbne	r0, [pc], #-256	; 2a00 <__pi_vfparse+0x178>
    29fc:	00032301 	andeq	r2, r3, r1, lsl #6
    2a00:	0fe90100 	svceq	0x00e90100
    2a04:	70390000 	eorsvc	r0, r9, r0
    2a08:	01006469 	tsteq	r0, r9, ror #8
    2a0c:	0113225f 	tsteq	r3, pc, asr r2
    2a10:	693b0000 	ldmdbvs	fp!, {}	; <UNPREDICTABLE>
    2a14:	17610100 	strbne	r0, [r1, -r0, lsl #2]!
    2a18:	00000323 	andeq	r0, r0, r3, lsr #6
    2a1c:	0a9b4200 	beq	fe6d3224 <_estack+0xde6ce224>
    2a20:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
    2a24:	0a010102 	beq	42e34 <__ccfg+0x22e8c>
    2a28:	03000010 	movweq	r0, #16
    2a2c:	0000100a 	andeq	r1, r0, sl
    2a30:	0006c136 	andeq	ip, r6, r6, lsr r1
    2a34:	029e0200 	addseq	r0, lr, #0, 4
				} else if (c == 'x') {
    2a38:	00007313 	andeq	r7, r0, r3, lsl r3
					for (i = 28; ; i -= 4) {
    2a3c:	01020000 	mrseq	r0, (UNDEF: 2)
					val = va_arg (ap, lword);
    2a40:	000bc202 	andeq	ip, fp, r2, lsl #4
							[ (val >> i) & 0xf ]);
    2a44:	0fc04300 	svceq	0x00c04300
	...
						outc (__pi_hex_enc_table
    2a50:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a54:	00001056 	andeq	r1, r0, r6, asr r0
						if (i == 0)
    2a58:	000fd244 	andeq	sp, pc, r4, asr #4
    2a5c:	000f2900 	andeq	r2, pc, r0, lsl #18
					for (i = 28; ; i -= 4) {
    2a60:	0fde4500 	svceq	0x00de4500
					outc ('%');
    2a64:	0f520000 	svceq	0x00520000
    2a68:	c0460000 	subgt	r0, r6, r0
    2a6c:	0000000f 	andeq	r0, r0, pc
					outc ('l');
    2a70:	00000000 	andeq	r0, r0, r0
    2a74:	01000000 	mrseq	r0, (UNDEF: 0)
				val = (word) va_arg (ap, aword);
    2a78:	d244145f 	suble	r1, r4, #1593835520	; 0x5f000000
				outc (val);
    2a7c:	7000000f 	andvc	r0, r0, pc
    2a80:	4700000f 	strmi	r0, [r0, -pc]
				while (*st != '\0') {
    2a84:	00000fde 	ldrdeq	r0, [r0], -lr
    2a88:	c6430000 	strbgt	r0, [r3], -r0
    2a8c:	bc00000e 	stclt	0, cr0, [r0], {14}
    2a90:	8800000f 	stmdahi	r0, {r0, r1, r2, r3}
					outc (*st);
    2a94:	01000010 	tsteq	r0, r0, lsl r0
    2a98:	0010c29c 	mulseq	r0, ip, r2
					st++;
    2a9c:	0ed54400 	cdpeq	4, 13, cr4, cr5, cr0, {0}
		c = *fm++;
    2aa0:	0f830000 	svceq	0x00830000
    2aa4:	e1440000 	mrs	r0, (UNDEF: 68)
    2aa8:	9600000e 	strls	r0, [r0], -lr
char *vform (char *res, const char *fm, va_list aq) {
    2aac:	4700000f 	strmi	r0, [r0, -pc]
    2ab0:	00000eed 	andeq	r0, r0, sp, ror #29
	if (res != NULL) {
    2ab4:	000ef747 	andeq	pc, lr, r7, asr #14
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2ab8:	0ec64800 	cdpeq	8, 12, cr4, cr6, cr0, {0}
    2abc:	0fca0000 	svceq	0x00ca0000
    2ac0:	05480000 	strbeq	r0, [r8, #-0]
}
    2ac4:	af010000 	svcge	0x00010000
    2ac8:	0ee12a06 	vfmaeq.f32	s5, s2, s12
	fml = strlen (fm) + 17;
    2acc:	d5440000 	strble	r0, [r4, #-0]
    2ad0:	a900000e 	stmdbge	r0, {r1, r2, r3}
    2ad4:	3700000f 	strcc	r0, [r0, -pc]
	if ((res = (char*) umalloc (fml)) == NULL)
    2ad8:	00000548 	andeq	r0, r0, r8, asr #10
    2adc:	000eed45 	andeq	lr, lr, r5, asr #26
    2ae0:	000fd200 	andeq	sp, pc, r0, lsl #4
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2ae4:	0ef74700 	cdpeq	7, 15, cr4, cr7, cr0, {0}
    2ae8:	01490000 	mrseq	r0, (UNDEF: 73)
    2aec:	6600000f 	strvs	r0, [r0], -pc
    2af0:	00000010 	andeq	r0, r0, r0, lsl r0
		ufree (res);
    2af4:	03430000 	movteq	r0, #12288	; 0x3000
		goto Again;
    2af8:	9c00000e 	stcls	0, cr0, [r0], {14}
	if (buf == NULL || fmt == NULL)
    2afc:	d0000010 	andle	r0, r0, r0, lsl r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    2b00:	01000010 	tsteq	r0, r0, lsl r0
	if (buf == NULL || fmt == NULL)
    2b04:	0011169c 	mulseq	r1, ip, r6
    2b08:	0e134400 	cfmulseq	mvf4, mvf3, mvf0
    2b0c:	0ff00000 	svceq	0x00f00000	; IMB
		    	    case 'u': scanu (lword); break;
    2b10:	20440000 	subcs	r0, r4, r0
			while (isspace (*buf)) buf++;
    2b14:	0e00000e 	cdpeq	0, 0, cr0, cr0, cr14, {0}
    2b18:	47000010 	smladmi	r0, r0, r0, r0
	while (*fmt != '\0') {
    2b1c:	00000e2d 	andeq	r0, r0, sp, lsr #28
		if (*fmt++ != '%')
    2b20:	000e034a 	andeq	r0, lr, sl, asr #6
		switch (*fmt++) {
    2b24:	0010ae00 	andseq	sl, r0, r0, lsl #28
    2b28:	0010b600 	andseq	fp, r0, r0, lsl #12
    2b2c:	01590100 	cmpeq	r9, r0, lsl #2
    2b30:	0e134406 	cfmulseq	mvf4, mvf3, mvf6
    2b34:	102c0000 	eorne	r0, ip, r0
    2b38:	20440000 	subcs	r0, r4, r0
    2b3c:	3f00000e 	svccc	0x0000000e
}
    2b40:	47000010 	smladmi	r0, r0, r0, r0
		switch (*fmt++) {
    2b44:	00000e2d 	andeq	r0, r0, sp, lsr #28
    2b48:	a64b0000 	strbge	r0, [fp], -r0
    2b4c:	cc000007 	stcgt	0, cr0, [r0], {7}
    2b50:	14000012 	strne	r0, [r0], #-18	; 0xffffffee
			while (isspace (*buf)) buf++;
    2b54:	01000013 	tsteq	r0, r3, lsl r0
    2b58:	07b6449c 			; <UNDEFINED> instruction: 0x07b6449c
    2b5c:	10520000 	subsne	r0, r2, r0
    2b60:	a64a0000 	strbge	r0, [sl], -r0
    2b64:	d8000007 	stmdale	r0, {r0, r1, r2}
    2b68:	e0000012 	and	r0, r0, r2, lsl r0
			if (*buf == '\0')
    2b6c:	01000012 	tsteq	r0, r2, lsl r0
			if (*buf != ',') {
    2b70:	4406037c 	strmi	r0, [r6], #-892	; 0xfffffc84
			sap = va_arg (ap, char*);
    2b74:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
			nc++;
    2b78:	00001070 	andeq	r1, r0, r0, ror r0
			if (*buf != ',') {
    2b7c:	a3000000 	movwge	r0, #0
				while (!isspace (*buf) && *buf != ',' &&
    2b80:	0300000f 	movweq	r0, #15
    2b84:	000c1400 	andeq	r1, ip, r0, lsl #8
    2b88:	d0010400 	andle	r0, r1, r0, lsl #8
    2b8c:	0c000000 	stceq	0, cr0, [r0], {-0}
    2b90:	00000e4a 	andeq	r0, r0, sl, asr #28
    2b94:	000000a3 	andeq	r0, r0, r3, lsr #1
    2b98:	00000740 	andeq	r0, r0, r0, asr #14
			while (isspace (*buf)) buf++;
    2b9c:	00000000 	andeq	r0, r0, r0
    2ba0:	00002769 	andeq	r2, r0, r9, ror #14
    2ba4:	9d060102 	stflss	f0, [r6, #-8]
    2ba8:	02000002 	andeq	r0, r0, #2
    2bac:	02b90502 	adcseq	r0, r9, #8388608	; 0x800000
			if (*buf == ',') buf++;
    2bb0:	04020000 	streq	r0, [r2], #-0
    2bb4:	00005c05 	andeq	r5, r0, r5, lsl #24
			*sap = '\0';
    2bb8:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
			break;
    2bbc:	00000057 	andeq	r0, r0, r7, asr r0
		    case 'd': scani (word); break;
    2bc0:	001f3303 	andseq	r3, pc, r3, lsl #6
    2bc4:	182e0200 	stmdane	lr!, {r9}
    2bc8:	0000004d 	andeq	r0, r0, sp, asr #32
    2bcc:	9b080102 	blls	202fdc <__ccfg+0x1e3034>
    2bd0:	03000002 	movweq	r0, #2
    2bd4:	00002329 	andeq	r2, r0, r9, lsr #6
    2bd8:	60193102 	andsvs	r3, r9, r2, lsl #2
    2bdc:	02000000 	andeq	r0, r0, #0
    2be0:	01ca0702 	biceq	r0, sl, r2, lsl #14
    2be4:	cb030000 	blgt	c2bec <__ccfg+0xa2c44>
    2be8:	0200001e 	andeq	r0, r0, #30
    2bec:	00731934 	rsbseq	r1, r3, r4, lsr r9
    2bf0:	04020000 	streq	r0, [r2], #-0
    2bf4:	00004507 	andeq	r4, r0, r7, lsl #10
    2bf8:	07080200 	streq	r0, [r8, -r0, lsl #4]
    2bfc:	00000040 	andeq	r0, r0, r0, asr #32
    2c00:	69050404 	stmdbvs	r5, {r2, sl}
    2c04:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    2c08:	004a0704 	subeq	r0, sl, r4, lsl #14
    2c0c:	59030000 	stmdbpl	r3, {}	; <UNPREDICTABLE>
    2c10:	03000002 	movweq	r0, #2
    2c14:	009b1b28 	addseq	r1, fp, r8, lsr #22
    2c18:	8a050000 	bhi	142c20 <__ccfg+0x122c78>
    2c1c:	04000000 	streq	r0, [r0], #-0
    2c20:	00b30008 	adcseq	r0, r3, r8
    2c24:	31060000 	mrscc	r0, (UNDEF: 6)
    2c28:	b3000003 	movwlt	r0, #3
    2c2c:	00000000 	andeq	r0, r0, r0
		    case 'u': scanu (word); break;
    2c30:	04070001 	streq	r0, [r7], #-1
    2c34:	00008c03 	andeq	r8, r0, r3, lsl #24
    2c38:	18630300 	stmdane	r3!, {r8, r9}^
    2c3c:	0000008f 	andeq	r0, r0, pc, lsl #1
    2c40:	00082503 	andeq	r2, r8, r3, lsl #10
    2c44:	12260400 	eorne	r0, r6, #0, 8
    2c48:	00000041 	andeq	r0, r0, r1, asr #32
    2c4c:	001d8503 	andseq	r8, sp, r3, lsl #10
    2c50:	12270400 	eorne	r0, r7, #0, 8
    2c54:	00000054 	andeq	r0, r0, r4, asr r0
    2c58:	00131703 	andseq	r1, r3, r3, lsl #14
    2c5c:	122b0400 	eorne	r0, fp, #0, 8
    2c60:	00000041 	andeq	r0, r0, r1, asr #32
    2c64:	0000d908 	andeq	sp, r0, r8, lsl #18
    2c68:	021e0300 	andseq	r0, lr, #0, 6
    2c6c:	2d040000 	stccs	0, cr0, [r4, #-0]
    2c70:	00006712 	andeq	r6, r0, r2, lsl r7
    2c74:	02510300 	subseq	r0, r1, #0, 6
		    case 'x': scanx (word); break;
    2c78:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    2c7c:	00010210 	andeq	r0, r1, r0, lsl r2
    2c80:	cd040900 	vstrgt.16	s0, [r4, #-0]	; <UNPREDICTABLE>
    2c84:	02000000 	andeq	r0, r0, #0
    2c88:	02a40801 	adceq	r0, r4, #65536	; 0x10000
    2c8c:	04090000 	streq	r0, [r9], #-0
    2c90:	000000e5 	andeq	r0, r0, r5, ror #1
    2c94:	0805040a 	stmdaeq	r5, {r1, r3, sl}
    2c98:	00013909 	andeq	r3, r1, r9, lsl #18
    2c9c:	02e50b00 	rsceq	r0, r5, #0, 22
    2ca0:	0f050000 	svceq	0x00050000
    2ca4:	0000cd07 	andeq	ip, r0, r7, lsl #26
    2ca8:	2f0b0000 	svccs	0x000b0000
    2cac:	05000002 	streq	r0, [r0, #-2]
    2cb0:	00cd0310 	sbceq	r0, sp, r0, lsl r3
    2cb4:	00020000 	andeq	r0, r2, r0
    2cb8:	0002cf03 	andeq	ip, r2, r3, lsl #30
    2cbc:	03110500 	tsteq	r1, #0, 10
    2cc0:	00000115 	andeq	r0, r0, r5, lsl r1
    2cc4:	1605200a 	strne	r2, [r5], -sl
    2cc8:	0001b709 	andeq	fp, r1, r9, lsl #14
    2ccc:	02a90b00 	adceq	r0, r9, #0, 22
    2cd0:	17050000 	strne	r0, [r5, -r0]
    2cd4:	0001d108 	andeq	sp, r1, r8, lsl #2
    2cd8:	a20b0000 	andge	r0, fp, #0
    2cdc:	05000001 	streq	r0, [r0, #-1]
    2ce0:	01ec0818 	mvneq	r0, r8, lsl r8
    2ce4:	0b040000 	bleq	102cec <__ccfg+0xe2d44>
    2ce8:	00000216 	andeq	r0, r0, r6, lsl r2
    2cec:	22081905 	andcs	r1, r8, #81920	; 0x14000
			switch (*fmt++) {
    2cf0:	08000002 	stmdaeq	r0, {r1}
    2cf4:	0002750b 	andeq	r7, r2, fp, lsl #10
    2cf8:	081a0500 	ldmdaeq	sl, {r8, sl}
    2cfc:	0000023d 	andeq	r0, r0, sp, lsr r2
    2d00:	01aa0b0c 			; <UNDEFINED> instruction: 0x01aa0b0c
    2d04:	1b050000 	blne	142d0c <__ccfg+0x122d64>
    2d08:	00025308 	andeq	r5, r2, r8, lsl #6
		    	    case 'd': scani (lword); break;
    2d0c:	b10b1000 	mrslt	r1, (UNDEF: 11)
    2d10:	05000002 	streq	r0, [r0, #-2]
    2d14:	0253081c 	subseq	r0, r3, #28, 16	; 0x1c0000
    2d18:	0b140000 	bleq	502d20 <__ccfg+0x4e2d78>
    2d1c:	000001c2 	andeq	r0, r0, r2, asr #3
    2d20:	53081d05 	movwpl	r1, #36101	; 0x8d05
    2d24:	18000002 	stmdane	r0, {r1}
    2d28:	0000650b 	andeq	r6, r0, fp, lsl #10
    2d2c:	061e0500 	ldreq	r0, [lr], -r0, lsl #10
    2d30:	00000081 	andeq	r0, r0, r1, lsl #1
    2d34:	010c001c 	tsteq	ip, ip, lsl r0
    2d38:	00000081 	andeq	r0, r0, r1, lsl #1
    2d3c:	000001d1 	ldrdeq	r0, [r0], -r1
    2d40:	0000810d 	andeq	r8, r0, sp, lsl #2
    2d44:	00810d00 	addeq	r0, r1, r0, lsl #26
    2d48:	b50d0000 	strlt	r0, [sp, #-0]
    2d4c:	00000000 	andeq	r0, r0, r0
    2d50:	01b70409 			; <UNDEFINED> instruction: 0x01b70409
    2d54:	010c0000 	mrseq	r0, (UNDEF: 12)
    2d58:	00000081 	andeq	r0, r0, r1, lsl #1
    2d5c:	000001ec 	andeq	r0, r0, ip, ror #3
    2d60:	0000810d 	andeq	r8, r0, sp, lsl #2
    2d64:	00810d00 	addeq	r0, r1, r0, lsl #26
		    	    case 'x': scanx (lword); break;
    2d68:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2d6c:	0001d704 	andeq	sp, r1, r4, lsl #14
    2d70:	81010c00 	tsthi	r1, r0, lsl #24
    2d74:	16000000 	strne	r0, [r0], -r0
    2d78:	0d000002 	stceq	0, cr0, [r0, #-8]
    2d7c:	00000081 	andeq	r0, r0, r1, lsl #1
    2d80:	0000f60d 	andeq	pc, r0, sp, lsl #12
    2d84:	00810d00 	addeq	r0, r1, r0, lsl #26
    2d88:	160d0000 	strne	r0, [sp], -r0
    2d8c:	0d000002 	stceq	0, cr0, [r0, #-8]
    2d90:	0000021c 	andeq	r0, r0, ip, lsl r2
    2d94:	81040900 	tsthi	r4, r0, lsl #18
    2d98:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2d9c:	00013904 	andeq	r3, r1, r4, lsl #18
    2da0:	f2040900 	vmla.i8	d0, d4, d0
    2da4:	0c000001 	stceq	0, cr0, [r0], {1}
    2da8:	00008101 	andeq	r8, r0, r1, lsl #2
    2dac:	00023d00 	andeq	r3, r2, r0, lsl #26
    2db0:	00f60d00 	rscseq	r0, r6, r0, lsl #26
    2db4:	1c0d0000 	stcne	0, cr0, [sp], {-0}
    2db8:	00000002 	andeq	r0, r0, r2
    2dbc:	02280409 	eoreq	r0, r8, #150994944	; 0x9000000
    2dc0:	010c0000 	mrseq	r0, (UNDEF: 12)
    2dc4:	00000081 	andeq	r0, r0, r1, lsl #1
    2dc8:	00000253 	andeq	r0, r0, r3, asr r2
    2dcc:	0000f60d 	andeq	pc, r0, sp, lsl #12
    2dd0:	04090000 	streq	r0, [r9], #-0
    2dd4:	00000243 	andeq	r0, r0, r3, asr #4
		    	    case 'd': scani (lword); break;
    2dd8:	0001dd03 	andeq	sp, r1, r3, lsl #26
    2ddc:	031f0500 	tsteq	pc, #0, 10
    2de0:	00000145 	andeq	r0, r0, r5, asr #2
    2de4:	00025908 	andeq	r5, r2, r8, lsl #18
    2de8:	0d260e00 	stceq	14, cr0, [r6, #-0]
    2dec:	05080000 	streq	r0, [r8, #-0]
    2df0:	02920824 	addseq	r0, r2, #36, 16	; 0x240000
		    	    case 'u': scanu (lword); break;
    2df4:	ca0b0000 	bgt	2c2dfc <__ccfg+0x2a2e54>
    2df8:	0500000c 	streq	r0, [r0, #-12]
    2dfc:	02921825 	addseq	r1, r2, #2424832	; 0x250000
    2e00:	0b000000 	bleq	2e08 <vscan+0x30c>
    2e04:	00000c75 	andeq	r0, r0, r5, ror ip
    2e08:	92062605 	andls	r2, r6, #5242880	; 0x500000
    2e0c:	04000002 	streq	r0, [r0], #-2
    2e10:	6a040900 	bvs	105218 <__ccfg+0xe5270>
    2e14:	03000002 	movweq	r0, #2
    2e18:	00000d34 	andeq	r0, r0, r4, lsr sp
    2e1c:	6a1e2905 	bvs	78d238 <__ccfg+0x76d290>
    2e20:	03000002 	movweq	r0, #2
    2e24:	00000e29 	andeq	r0, r0, r9, lsr #28
    2e28:	6a1e2a05 	bvs	78d644 <__ccfg+0x76d69c>
    2e2c:	0a000002 	beq	2e3c <vscan+0x340>
    2e30:	023f0502 	eorseq	r0, pc, #8388608	; 0x800000
    2e34:	0000031a 	andeq	r0, r0, sl, lsl r3
    2e38:	000dbd0f 	andeq	fp, sp, pc, lsl #26
		    	    case 'x': scanx (lword); break;
    2e3c:	09400500 	stmdbeq	r0, {r8, sl}^
    2e40:	000000cd 	andeq	r0, r0, sp, asr #1
			if ((c = *buf++) == '\0')
    2e44:	000f0102 	andeq	r0, pc, r2, lsl #2
    2e48:	000eb90f 	andeq	fp, lr, pc, lsl #18
    2e4c:	04410500 	strbeq	r0, [r1], #-1280	; 0xfffffb00
			sap = va_arg (ap, char*);
    2e50:	000000cd 	andeq	r0, r0, sp, asr #1
			*sap = c;
    2e54:	000e0102 	andeq	r0, lr, r2, lsl #2
			while (isspace (*buf)) buf++;
    2e58:	000d510f 	andeq	r5, sp, pc, lsl #2
    2e5c:	04420500 	strbeq	r0, [r2], #-1280	; 0xfffffb00
    2e60:	000000cd 	andeq	r0, r0, sp, asr #1
    2e64:	000d0102 	andeq	r0, sp, r2, lsl #2
						*sap++ = *buf++;
    2e68:	000dcd0f 	andeq	ip, sp, pc, lsl #26
			while (isspace (*buf)) buf++;
    2e6c:	04430500 	strbeq	r0, [r3], #-1280	; 0xfffffb00
    2e70:	000000cd 	andeq	r0, r0, sp, asr #1
    2e74:	00060702 	andeq	r0, r6, r2, lsl #14
		return 0;
    2e78:	000e370f 	andeq	r3, lr, pc, lsl #14
    2e7c:	04440500 	strbeq	r0, [r4], #-1280	; 0xfffffb00
		    case 'x': scanx (word); break;
    2e80:	000000cd 	andeq	r0, r0, sp, asr #1
    2e84:	00030302 	andeq	r0, r3, r2, lsl #6
		    	    case 'x': scanx (lword); break;
    2e88:	000daf0f 	andeq	sl, sp, pc, lsl #30
    2e8c:	04450500 	strbeq	r0, [r5], #-1280	; 0xfffffb00
strand (__outserial, const char*)
    2e90:	000000cd 	andeq	r0, r0, sp, asr #1
    2e94:	00000302 	andeq	r0, r0, r2, lsl #6
    2e98:	05021000 	streq	r1, [r2, #-0]
    2e9c:	033a093d 	teqeq	sl, #999424	; 0xf4000
endstrand
    2ea0:	1c110000 	ldcne	0, cr0, [r1], {-0}
    2ea4:	05000029 	streq	r0, [r0, #-41]	; 0xffffffd7
	ptr = data;
    2ea8:	00cd073e 	sbceq	r0, sp, lr, lsr r7
    2eac:	62120000 	andsvs	r0, r2, #0
	if (*ptr)
    2eb0:	04460500 	strbeq	r0, [r6], #-1280	; 0xfffffb00
		len = strlen (ptr);
    2eb4:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
    2eb8:	0c7a0300 	ldcleq	3, cr0, [sl], #-0
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    2ebc:	47050000 	strmi	r0, [r5, -r0]
    2ec0:	00031a03 	andeq	r1, r3, r3, lsl #20
    2ec4:	05081000 	streq	r1, [r8, #-0]
    2ec8:	03680550 	cmneq	r8, #80, 10	; 0x14000000
    2ecc:	95110000 	ldrls	r0, [r1, #-0]
	len -= quant;
    2ed0:	0500000e 	streq	r0, [r0, #-14]
    2ed4:	02981051 	addseq	r1, r8, #81	; 0x51
    2ed8:	a6110000 	ldrge	r0, [r1], -r0
	if (len == 0) {
    2edc:	0500000d 	streq	r0, [r0, #-13]
		ufree (data);
    2ee0:	01390b52 	teqeq	r9, r2, asr fp
		finish;
    2ee4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2ee8:	00000eaa 	andeq	r0, r0, sl, lsr #29
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    2eec:	084c050c 	stmdaeq	ip, {r2, r3, r8, sl}^
    2ef0:	0000039b 	muleq	r0, fp, r3
    2ef4:	05007513 	streq	r7, [r0, #-1299]	; 0xfffffaed
    2ef8:	03460758 	movteq	r0, #26456	; 0x6758
    2efc:	0b000000 	bleq	2f04 <__inserial+0x4>
strand (__inserial, address)
    2f00:	00000e3e 	andeq	r0, r0, lr, lsr lr
    2f04:	cd076305 	stcgt	3, cr6, [r7, #-20]	; 0xffffffec
    2f08:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2f0c:	000e1e0b 	andeq	r1, lr, fp, lsl #28
    2f10:	10680500 	rsbne	r0, r8, r0, lsl #10
	if (__inpline != NULL)
    2f14:	0000033a 	andeq	r0, r0, sl, lsr r3
    2f18:	4203000a 	andmi	r0, r3, #10
		finish;
    2f1c:	0500000d 	streq	r0, [r0, #-13]
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    2f20:	03681f79 	cmneq	r8, #484	; 0x1e4
    2f24:	0c0a0000 	stceq	0, cr0, [sl], {-0}
    2f28:	cb097b05 	blgt	261b44 <__ccfg+0x241b9c>
    2f2c:	0b000003 	bleq	2f40 <__inserial+0x40>
		umwait (IM_INIT);
    2f30:	00000d76 	andeq	r0, r0, r6, ror sp
		release;
    2f34:	a4117f05 	ldrge	r7, [r1], #-3845	; 0xfffff0fb
	savedata (data);
    2f38:	00000002 	andeq	r0, r0, r2
	len = MAX_LINE_LENGTH;
    2f3c:	000e010b 	andeq	r0, lr, fp, lsl #2
	io (IM_READ, __cport, READ, ptr, 1);
    2f40:	11830500 	orrne	r0, r3, r0, lsl #10
    2f44:	0000033a 	andeq	r0, r0, sl, lsr r3
    2f48:	96030008 	strls	r0, [r3], -r8
    2f4c:	0500000d 	streq	r0, [r0, #-13]
	if (ptr == (char*) data) { // new line
    2f50:	03a70392 			; <UNDEFINED> instruction: 0x03a70392
    2f54:	cf030000 	svcgt	0x00030000
		if (*ptr == '\0') { // bin cmd
    2f58:	0600000c 	streq	r0, [r0], -ip
			proceed (IM_BIN);
    2f5c:	03e30f0e 	mvneq	r0, #14, 30	; 0x38
    2f60:	04090000 	streq	r0, [r9], #-0
		if (*ptr < 0x20)
    2f64:	000003e9 	andeq	r0, r0, r9, ror #7
    2f68:	0081010c 	addeq	r0, r1, ip, lsl #2
			proceed (IM_READ);
    2f6c:	03fe0000 	mvnseq	r0, #0
    2f70:	810d0000 	mrshi	r0, (UNDEF: 13)
	if (*ptr == '\n' || *ptr == '\r') {
    2f74:	0d000000 	stceq	0, cr0, [r0, #-0]
    2f78:	000000f6 	strdeq	r0, [r0], -r6
    2f7c:	040e1400 	streq	r1, [lr], #-1024	; 0xfffffc00
		*ptr = '\0';
    2f80:	040e0000 	streq	r0, [lr], #-0
		__inpline = (char*)data;
    2f84:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
		finish;
    2f88:	07000000 	streq	r0, [r0, -r0]
	if (len) {
    2f8c:	cb040900 	blgt	105394 <__ccfg+0xe53ec>
		ptr++;
    2f90:	16000003 	strne	r0, [r0], -r3
    2f94:	00000d58 	andeq	r0, r0, r8, asr sp
		len--;
    2f98:	fe150d07 	cdp2	13, 1, cr0, cr5, cr7, {0}
	proceed (IM_READ);
    2f9c:	05000003 	streq	r0, [r0, #-3]
	io (IM_BIN, __cport, READ, ptr, 1);
    2fa0:	00017803 	andeq	r7, r1, r3, lsl #16
    2fa4:	03d71420 	bicseq	r1, r7, #32, 8	; 0x20000000
    2fa8:	04360000 	ldrteq	r0, [r6], #-0
    2fac:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    2fb0:	02000000 	andeq	r0, r0, #0
	len -= 2;
    2fb4:	0db41600 	ldceq	6, cr1, [r4]
	if (len > *ptr + 1) // 1 for 0x04
    2fb8:	13070000 	movwne	r0, #28672	; 0x7000
    2fbc:	00042614 	andeq	r2, r4, r4, lsl r6
		len = *ptr + 1;
    2fc0:	a4030500 	strge	r0, [r3], #-1280	; 0xfffffb00
    2fc4:	14200001 	strtne	r0, [r0], #-1
	ptr++;
    2fc8:	00000458 	andeq	r0, r0, r8, asr r4
	quant = io (IM_BINL, __cport, READ, ptr, len);
    2fcc:	00000458 	andeq	r0, r0, r8, asr r4
    2fd0:	00008815 	andeq	r8, r0, r5, lsl r8
    2fd4:	09000200 	stmdbeq	r0, {r9}
    2fd8:	0002a404 	andeq	sl, r2, r4, lsl #8
    2fdc:	0d1e1600 	ldceq	6, cr1, [lr, #-0]
    2fe0:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
	len -= quant;
    2fe4:	00044813 	andeq	r4, r4, r3, lsl r8
		__inpline = (char*)data;
    2fe8:	98030500 	stmdals	r3, {r8, sl}
		finish;
    2fec:	14200001 	strtne	r0, [r0], #-1
	ptr += quant;
    2ff0:	00000081 	andeq	r0, r0, r1, lsl #1
    2ff4:	00000480 	andeq	r0, r0, r0, lsl #9
endstrand
    2ff8:	00008815 	andeq	r8, r0, r5, lsl r8
    2ffc:	16000200 	strne	r0, [r0], -r0, lsl #4
	proceed (IM_BINL);
    3000:	00000ced 	andeq	r0, r0, sp, ror #25
endstrand
    3004:	700f1e07 	andvc	r1, pc, r7, lsl #28
    3008:	05000004 	streq	r0, [r0, #-4]
    300c:	0001b003 	andeq	fp, r1, r3
    3010:	04a21420 	strteq	r1, [r2], #1056	; 0x420
    3014:	04a20000 	strteq	r0, [r2], #0
    3018:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    301c:	02000000 	andeq	r0, r0, #0
    3020:	65040900 	strvs	r0, [r4, #-2304]	; 0xfffff700
    3024:	16000002 	strne	r0, [r0], -r2
    3028:	00000e9c 	muleq	r0, ip, lr
    302c:	921b2307 	andsls	r2, fp, #469762048	; 0x1c000000
    3030:	05000004 	streq	r0, [r0, #-4]
    3034:	0001bc03 	andeq	fp, r1, r3, lsl #24
    3038:	c4011720 	strgt	r1, [r1], #-1824	; 0xfffff8e0
    303c:	0100000d 	tsteq	r0, sp
    3040:	0101050d 	tsteq	r1, sp, lsl #10
    3044:	00001bfc 	strdeq	r1, [r0], -ip
    3048:	00001bfe 	strdeq	r1, [r0], -lr
    304c:	01189c01 	tsteq	r8, r1, lsl #24
    3050:	00000d05 	andeq	r0, r0, r5, lsl #26
    3054:	01050501 	tsteq	r5, r1, lsl #10
    3058:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    3064:	319c0100 	orrscc	r0, ip, r0, lsl #2
    3068:	19000005 	stmdbne	r0, {r0, r2}
    306c:	00796870 	rsbseq	r6, r9, r0, ror r8
    3070:	2d050501 	cfstr32cs	mvfx0, [r5, #-4]
    3074:	00000081 	andeq	r0, r0, r1, lsl #1
    3078:	00001083 	andeq	r1, r0, r3, lsl #1
    307c:	000e2d1a 	andeq	r2, lr, sl, lsl sp
    3080:	00000000 	andeq	r0, r0, r0
    3084:	00072800 	andeq	r2, r7, r0, lsl #16
    3088:	050a0100 	streq	r0, [sl, #-256]	; 0xffffff00
    308c:	0e3f1b09 	vaddeq.f64	d1, d15, d9
    3090:	10a10000 	adcne	r0, r1, r0
    3094:	281c0000 	ldmdacs	ip, {}	; <UNPREDICTABLE>
    3098:	1d000007 	stcne	0, cr0, [r0, #-28]	; 0xffffffe4
    309c:	00000e4a 	andeq	r0, r0, sl, asr #28
    30a0:	000010b4 	strheq	r1, [r0], -r4
    30a4:	000e551d 	andeq	r5, lr, sp, lsl r5
    30a8:	0010d200 	andseq	sp, r0, r0, lsl #4
    30ac:	00000000 	andeq	r0, r0, r0
    30b0:	0df6011e 	ldfeqe	f0, [r6, #120]!	; 0x78
    30b4:	fa010000 	blx	430bc <__ccfg+0x23114>
    30b8:	c0010104 	andgt	r0, r1, r4, lsl #2
    30bc:	fc00001b 	stc2	0, cr0, [r0], {27}
    30c0:	0100001b 	tsteq	r0, fp, lsl r0
    30c4:	00056b9c 	muleq	r5, ip, fp
    30c8:	6b701900 	blvs	1c094d0 <__ccfg+0x1be9528>
    30cc:	fa010074 	blx	432a4 <__ccfg+0x232fc>
    30d0:	00f63004 	rscseq	r3, r6, r4
    30d4:	10fc0000 	rscsne	r0, ip, r0
    30d8:	621f0000 	andsvs	r0, pc, #0
    30dc:	04fe0100 	ldrbteq	r0, [lr], #256	; 0x100
    30e0:	00056b0c 	andeq	r6, r5, ip, lsl #22
    30e4:	00111a00 	andseq	r1, r1, r0, lsl #20
    30e8:	04090000 	streq	r0, [r9], #-0
    30ec:	0000039b 	muleq	r0, fp, r3
    30f0:	0c880118 	stfeqs	f0, [r8], {24}
    30f4:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
    30f8:	f6010104 			; <UNDEFINED> instruction: 0xf6010104
    30fc:	8c000000 	stchi	0, cr0, [r0], {-0}
    3100:	c000001b 	andgt	r0, r0, fp, lsl r0
    3104:	0100001b 	tsteq	r0, fp, lsl r0
    3108:	0005bf9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    310c:	68701900 	ldmdavs	r0!, {r8, fp, ip}^
    3110:	e9010079 	stmdb	r1, {r0, r3, r4, r5, r6}
    3114:	00812f04 	addeq	r2, r1, r4, lsl #30
    3118:	11380000 	teqne	r8, r0
    311c:	6f1f0000 	svcvs	0x001f0000
    3120:	ed010071 	stc	0, cr0, [r1, #-452]	; 0xfffffe3c
    3124:	04580b04 	ldrbeq	r0, [r8], #-2820	; 0xfffff4fc
    3128:	11560000 	cmpne	r6, r0
    312c:	621f0000 	andsvs	r0, pc, #0
    3130:	04ee0100 	strbteq	r0, [lr], #256	; 0x100
    3134:	00056b0c 	andeq	r6, r5, ip, lsl #22
    3138:	00116900 	andseq	r6, r1, r0, lsl #18
    313c:	01180000 	tsteq	r8, r0
    3140:	00000cd9 	ldrdeq	r0, [r0], -r9
    3144:	0104d201 	tsteq	r4, r1, lsl #4
    3148:	0000f601 	andeq	pc, r0, r1, lsl #12
    314c:	001b4c00 	andseq	r4, fp, r0, lsl #24
    3150:	001b8c00 	andseq	r8, fp, r0, lsl #24
    3154:	1e9c0100 	fmlnee	f0, f4, f0
    3158:	19000006 	stmdbne	r0, {r1, r2}
    315c:	00796870 	rsbseq	r6, r9, r0, ror r8
    3160:	2f04d201 	svccs	0x0004d201
    3164:	00000081 	andeq	r0, r0, r1, lsl #1
    3168:	00001188 	andeq	r1, r0, r8, lsl #3
    316c:	6e656c19 	mcrvs	12, 3, r6, cr5, cr9, {0}
    3170:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    3174:	00021639 	andeq	r1, r2, r9, lsr r6
    3178:	0011a600 	andseq	sl, r1, r0, lsl #12
    317c:	716f1f00 	cmnvc	pc, r0, lsl #30
    3180:	04d70100 	ldrbeq	r0, [r7], #256	; 0x100
    3184:	0004580b 	andeq	r5, r4, fp, lsl #16
    3188:	0011c400 	andseq	ip, r1, r0, lsl #8
    318c:	00621f00 	rsbeq	r1, r2, r0, lsl #30
    3190:	0c04d801 	stceq	8, cr13, [r4], {1}
    3194:	0000056b 	andeq	r0, r0, fp, ror #10
    3198:	000011e2 	andeq	r1, r0, r2, ror #3
    319c:	8a011800 	bhi	491a4 <__ccfg+0x291fc>
    31a0:	0100000e 	tsteq	r0, lr
    31a4:	010104a1 	smlatbeq	r1, r1, r4, r0
    31a8:	00000081 	andeq	r0, r0, r1, lsl #1
    31ac:	00001aac 	andeq	r1, r0, ip, lsr #21
    31b0:	00001b4c 	andeq	r1, r0, ip, asr #22
    31b4:	06b99c01 	ldrteq	r9, [r9], r1, lsl #24
    31b8:	70190000 	andsvc	r0, r9, r0
    31bc:	01007968 	tsteq	r0, r8, ror #18
    31c0:	812b04a1 	smulwbhi	fp, r1, r4
    31c4:	0c000000 	stceq	0, cr0, [r0], {-0}
    31c8:	19000012 	stmdbne	r0, {r1, r4}
    31cc:	a1010070 	tstge	r1, r0, ror r0
    31d0:	00f63804 	rscseq	r3, r6, r4, lsl #16
    31d4:	12400000 	subne	r0, r0, #0
    31d8:	6c190000 	ldcvs	0, cr0, [r9], {-0}
    31dc:	01006e65 	tsteq	r0, r5, ror #28
    31e0:	813f04a1 	teqhi	pc, r1, lsr #9
    31e4:	74000000 	strvc	r0, [r0], #-0
    31e8:	20000012 	andcs	r0, r0, r2, lsl r0
    31ec:	00676c70 	rsbeq	r6, r7, r0, ror ip
    31f0:	0604a601 	streq	sl, [r4], -r1, lsl #12
    31f4:	00000081 	andeq	r0, r0, r1, lsl #1
    31f8:	7073641f 	rsbsvc	r6, r3, pc, lsl r4
    31fc:	04a60100 	strteq	r0, [r6], #256	; 0x100
    3200:	0000810b 	andeq	r8, r0, fp, lsl #2
    3204:	0012a800 	andseq	sl, r2, r0, lsl #16
    3208:	65732100 	ldrbvs	r2, [r3, #-256]!	; 0xffffff00
    320c:	a6010073 			; <UNDEFINED> instruction: 0xa6010073
    3210:	00811004 	addeq	r1, r1, r4
    3214:	91020000 	mrsls	r0, (UNDEF: 2)
    3218:	70612150 	rsbvc	r2, r1, r0, asr r1
    321c:	04a70100 	strteq	r0, [r7], #256	; 0x100
    3220:	0001390b 	andeq	r3, r1, fp, lsl #18
    3224:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    3228:	0100631f 	tsteq	r0, pc, lsl r3
    322c:	f60a04a8 			; <UNDEFINED> instruction: 0xf60a04a8
    3230:	c6000000 	strgt	r0, [r0], -r0
    3234:	00000012 	andeq	r0, r0, r2, lsl r0
    3238:	0cb50118 	ldfeqs	f0, [r5], #96	; 0x60
    323c:	87010000 	strhi	r0, [r1, -r0]
    3240:	81010104 	tsthi	r1, r4, lsl #2
    3244:	5c000000 	stcpl	0, cr0, [r0], {-0}
    3248:	ac00001a 	stcge	0, cr0, [r0], {26}
    324c:	0100001a 	tsteq	r0, sl, lsl r0
    3250:	0007189c 	muleq	r7, ip, r8
    3254:	68701900 	ldmdavs	r0!, {r8, fp, ip}^
    3258:	87010079 	smlsdxhi	r1, r9, r0, r0
    325c:	00812b04 	addeq	r2, r1, r4, lsl #22
    3260:	12d90000 	sbcsne	r0, r9, #0
    3264:	70190000 	andsvc	r0, r9, r0
    3268:	87010073 	smlsdxhi	r1, r3, r0, r0
    326c:	03d73a04 	bicseq	r3, r7, #4, 20	; 0x4000
    3270:	12f70000 	rscsne	r0, r7, #0
    3274:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    3278:	01000000 	mrseq	r0, (UNDEF: 0)
    327c:	81420487 	smlalbbhi	r0, r2, r7, r4
    3280:	15000000 	strne	r0, [r0, #-0]
    3284:	1f000013 	svcne	0x00000013
    3288:	8d010071 	stchi	0, cr0, [r1, #-452]	; 0xfffffe3c
    328c:	04580b04 	ldrbeq	r0, [r8], #-2820	; 0xfffff4fc
    3290:	13330000 	teqne	r3, #0
    3294:	23000000 	movwcs	r0, #0
    3298:	000d6d01 	andeq	r6, sp, r1, lsl #26
    329c:	03860100 	orreq	r0, r6, #0, 2
    32a0:	00f60101 	rscseq	r0, r6, r1, lsl #2
    32a4:	5f010000 	svcpl	0x00010000
    32a8:	24000007 	strcs	r0, [r0], #-7
    32ac:	0000131f 	andeq	r1, r0, pc, lsl r3
    32b0:	2d038601 	stccs	6, cr8, [r3, #-4]
    32b4:	00000081 	andeq	r0, r0, r1, lsl #1
    32b8:	70736425 	rsbsvc	r6, r3, r5, lsr #8
    32bc:	03860100 	orreq	r0, r6, #0, 2
    32c0:	00008137 	andeq	r8, r0, r7, lsr r1
    32c4:	65732500 	ldrbvs	r2, [r3, #-1280]!	; 0xfffffb00
    32c8:	86010073 			; <UNDEFINED> instruction: 0x86010073
    32cc:	00814003 	addeq	r4, r1, r3
    32d0:	70200000 	eorvc	r0, r0, r0
    32d4:	038a0100 	orreq	r0, sl, #0, 2
    32d8:	00056b0c 	andeq	r6, r5, ip, lsl #22
    32dc:	011e0000 	tsteq	lr, r0
    32e0:	00000ca8 	andeq	r0, r0, r8, lsr #25
    32e4:	01037f01 	tsteq	r3, r1, lsl #30
    32e8:	00000001 	andeq	r0, r0, r1
    32ec:	00000000 	andeq	r0, r0, r0
    32f0:	999c0100 	ldmibls	ip, {r8}
    32f4:	19000007 	stmdbne	r0, {r0, r1, r2}
    32f8:	7f010070 	svcvc	0x00010070
    32fc:	00f63203 	rscseq	r3, r6, r3, lsl #4
    3300:	13620000 	cmnne	r2, #0
    3304:	64190000 	ldrvs	r0, [r9], #-0
    3308:	01007073 	tsteq	r0, r3, ror r0
    330c:	8139037f 	teqhi	r9, pc, ror r3
    3310:	75000000 	strvc	r0, [r0, #-0]
    3314:	00000013 	andeq	r0, r0, r3, lsl r0
    3318:	0dd50118 	ldfeqe	f0, [r5, #96]	; 0x60
    331c:	6b010000 	blvs	43324 <__ccfg+0x2337c>
    3320:	f6010103 			; <UNDEFINED> instruction: 0xf6010103
	...
    332c:	01000000 	mrseq	r0, (UNDEF: 0)
    3330:	0007f39c 	muleq	r7, ip, r3
    3334:	00701900 	rsbseq	r1, r0, r0, lsl #18
    3338:	33036b01 	movwcc	r6, #15105	; 0x3b01
    333c:	000000f6 	strdeq	r0, [r0], -r6
    3340:	00001388 	andeq	r1, r0, r8, lsl #7
    3344:	000e4522 	andeq	r4, lr, r2, lsr #10
    3348:	036b0100 	cmneq	fp, #0, 2
    334c:	0000813a 	andeq	r8, r0, sl, lsr r1
    3350:	0013a600 	andseq	sl, r3, r0, lsl #12
    3354:	63701f00 	cmnvs	r0, #0, 30
    3358:	036f0100 	cmneq	pc, #0, 2
    335c:	00056b0c 	andeq	r6, r5, ip, lsl #22
    3360:	0013c400 	andseq	ip, r3, r0, lsl #8
    3364:	70702000 	rsbsvc	r2, r0, r0
    3368:	036f0100 	cmneq	pc, #0, 2
    336c:	00056b11 	andeq	r6, r5, r1, lsl fp
    3370:	011e0000 	tsteq	lr, r0
    3374:	00000d12 	andeq	r0, r0, r2, lsl sp
    3378:	01036301 	tsteq	r3, r1, lsl #6
    337c:	00000001 	andeq	r0, r0, r1
    3380:	00000000 	andeq	r0, r0, r0
    3384:	2d9c0100 	ldfcss	f0, [ip]
    3388:	19000008 	stmdbne	r0, {r3}
    338c:	63010070 	movwvs	r0, #4208	; 0x1070
    3390:	00f63103 	rscseq	r3, r6, r3, lsl #2
    3394:	13e20000 	mvnne	r0, #0
    3398:	70190000 	andsvc	r0, r9, r0
    339c:	01007968 	tsteq	r0, r8, ror #18
    33a0:	81380363 	teqhi	r8, r3, ror #6
    33a4:	00000000 	andeq	r0, r0, r0
    33a8:	00000014 	andeq	r0, r0, r4, lsl r0
    33ac:	0de0011e 	stfeqe	f0, [r0, #120]!	; 0x78
    33b0:	5a010000 	bpl	433b8 <__ccfg+0x23410>
    33b4:	00010103 	andeq	r0, r1, r3, lsl #2
    33b8:	00000000 	andeq	r0, r0, r0
    33bc:	01000000 	mrseq	r0, (UNDEF: 0)
    33c0:	0008679c 	muleq	r8, ip, r7
    33c4:	00701900 	rsbseq	r1, r0, r0, lsl #18
    33c8:	31035a01 	tstcc	r3, r1, lsl #20
    33cc:	000000f6 	strdeq	r0, [r0], -r6
    33d0:	0000141e 	andeq	r1, r0, lr, lsl r4
    33d4:	73657319 	cmnvc	r5, #1677721600	; 0x64000000
    33d8:	035a0100 	cmpeq	sl, #0, 2
    33dc:	00008138 	andeq	r8, r0, r8, lsr r1
    33e0:	00143c00 	andseq	r3, r4, r0, lsl #24
    33e4:	01230000 			; <UNDEFINED> instruction: 0x01230000
    33e8:	00000ec2 	andeq	r0, r0, r2, asr #29
    33ec:	01035201 	tsteq	r3, r1, lsl #4
    33f0:	00008101 	andeq	r8, r0, r1, lsl #2
    33f4:	08a30100 	stmiaeq	r3!, {r8}
    33f8:	70250000 	eorvc	r0, r5, r0
    33fc:	01007968 	tsteq	r0, r8, ror #18
    3400:	812d0352 			; <UNDEFINED> instruction: 0x812d0352
    3404:	25000000 	strcs	r0, [r0, #-0]
    3408:	0074706f 	rsbseq	r7, r4, pc, rrx
    340c:	36035201 	strcc	r5, [r3], -r1, lsl #4
    3410:	00000081 	andeq	r0, r0, r1, lsl #1
    3414:	67726125 	ldrbvs	r6, [r2, -r5, lsr #2]!
    3418:	03520100 	cmpeq	r2, #0, 2
    341c:	0000f643 	andeq	pc, r0, r3, asr #12
    3420:	01180000 	tsteq	r8, r0
    3424:	00000c93 	muleq	r0, r3, ip
    3428:	01033301 	tsteq	r3, r1, lsl #6
    342c:	00008101 	andeq	r8, r0, r1, lsl #2
    3430:	00199400 	andseq	r9, r9, r0, lsl #8
    3434:	0019f400 	andseq	pc, r9, r0, lsl #8
    3438:	0c9c0100 	ldfeqs	f0, [ip], {0}
    343c:	19000009 	stmdbne	r0, {r0, r3}
    3440:	01006466 	tsteq	r0, r6, ror #8
    3444:	812c0333 			; <UNDEFINED> instruction: 0x812c0333
    3448:	5a000000 	bpl	3450 <NOROM_RFCRTrim+0x9c>
    344c:	19000014 	stmdbne	r0, {r2, r4}
    3450:	0074706f 	rsbseq	r7, r4, pc, rrx
    3454:	34033301 	strcc	r3, [r3], #-769	; 0xfffffcff
    3458:	00000081 	andeq	r0, r0, r1, lsl #1
    345c:	00001499 	muleq	r0, r9, r4
    3460:	67726119 			; <UNDEFINED> instruction: 0x67726119
    3464:	03330100 	teqeq	r3, #0, 2
    3468:	0000f641 	andeq	pc, r0, r1, asr #12
    346c:	0014c200 	andseq	ip, r4, r0, lsl #4
    3470:	19a22600 	stmibne	r2!, {r9, sl, sp}
    3474:	19b00000 	ldmibne	r0!, {}	; <UNPREDICTABLE>
    3478:	701f0000 	andsvc	r0, pc, r0
    347c:	033c0100 	teqeq	ip, #0, 2
    3480:	0004a215 	andeq	sl, r4, r5, lsl r2
    3484:	0014eb00 	andseq	lr, r4, r0, lsl #22
    3488:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    348c:	000ce401 	andeq	lr, ip, r1, lsl #8
    3490:	032b0100 			; <UNDEFINED> instruction: 0x032b0100
    3494:	00000101 	andeq	r0, r0, r1, lsl #2
    3498:	00000000 	andeq	r0, r0, r0
    349c:	9c010000 	stcls	0, cr0, [r1], {-0}
    34a0:	00000935 	andeq	r0, r0, r5, lsr r9
    34a4:	01007019 	tsteq	r0, r9, lsl r0
    34a8:	f62e032b 			; <UNDEFINED> instruction: 0xf62e032b
    34ac:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
    34b0:	00000014 	andeq	r0, r0, r4, lsl r0
    34b4:	0d820118 	stfeqs	f0, [r2, #96]	; 0x60
    34b8:	1a010000 	bne	434c0 <__ccfg+0x23518>
    34bc:	81010103 	tsthi	r1, r3, lsl #2
	...
    34c8:	01000000 	mrseq	r0, (UNDEF: 0)
    34cc:	00098f9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    34d0:	00701900 	rsbseq	r1, r0, r0, lsl #18
    34d4:	2e031a01 	vmlacs.f32	s2, s6, s2
    34d8:	000000f6 	strdeq	r0, [r0], -r6
    34dc:	0000151c 	andeq	r1, r0, ip, lsl r5
    34e0:	66756219 			; <UNDEFINED> instruction: 0x66756219
    34e4:	031a0100 	tsteq	sl, #0, 2
    34e8:	00010f3d 	andeq	r0, r1, sp, lsr pc
    34ec:	00153a00 	andseq	r3, r5, r0, lsl #20
    34f0:	656c1900 	strbvs	r1, [ip, #-2304]!	; 0xfffff700
    34f4:	1a01006e 	bne	436b4 <__ccfg+0x2370c>
    34f8:	00814603 	addeq	r4, r1, r3, lsl #12
    34fc:	154d0000 	strbne	r0, [sp, #-0]
    3500:	62200000 	eorvs	r0, r0, #0
    3504:	031e0100 	tsteq	lr, #0, 2
    3508:	00056b0c 	andeq	r6, r5, ip, lsl #22
    350c:	01180000 	tsteq	r8, r0
    3510:	00000c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    3514:	01030801 	tsteq	r3, r1, lsl #16
    3518:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    3524:	e99c0100 	ldmib	ip, {r8}
    3528:	19000009 	stmdbne	r0, {r0, r3}
    352c:	08010070 	stmdaeq	r1, {r4, r5, r6}
    3530:	00f62d03 	rscseq	r2, r6, r3, lsl #26
    3534:	156b0000 	strbne	r0, [fp, #-0]!
    3538:	62190000 	andsvs	r0, r9, #0
    353c:	01006675 	tsteq	r0, r5, ror r6
    3540:	e9360308 	ldmdb	r6!, {r3, r8, r9}
    3544:	89000009 	stmdbhi	r0, {r0, r3}
    3548:	19000015 	stmdbne	r0, {r0, r2, r4}
    354c:	006e656c 	rsbeq	r6, lr, ip, ror #10
    3550:	3f030801 	svccc	0x00030801
    3554:	00000081 	andeq	r0, r0, r1, lsl #1
    3558:	000015a7 	andeq	r1, r0, r7, lsr #11
    355c:	01006220 	tsteq	r0, r0, lsr #4
    3560:	6b0c030c 	blvs	304198 <__ccfg+0x2e41f0>
    3564:	00000005 	andeq	r0, r0, r5
    3568:	00d90409 	sbcseq	r0, r9, r9, lsl #8
    356c:	01180000 	tsteq	r8, r0
    3570:	00000cf6 	strdeq	r0, [r0], -r6
    3574:	0102cd01 	tsteq	r2, r1, lsl #26
    3578:	0000f601 	andeq	pc, r0, r1, lsl #12
    357c:	0018ac00 	andseq	sl, r8, r0, lsl #24
    3580:	00196800 	andseq	r6, r9, r0, lsl #16
    3584:	8d9c0100 	ldfhis	f0, [ip]
    3588:	2200000a 	andcs	r0, r0, #10
    358c:	00000b7d 	andeq	r0, r0, sp, ror fp
    3590:	2e02cd01 	cdpcs	13, 0, cr12, cr2, cr1, {0}
    3594:	000000cd 	andeq	r0, r0, sp, asr #1
    3598:	000015c5 	andeq	r1, r0, r5, asr #11
    359c:	00646619 	rsbeq	r6, r4, r9, lsl r6
    35a0:	3902cd01 	stmdbcc	r2, {r0, r8, sl, fp, lr, pc}
    35a4:	00000081 	andeq	r0, r0, r1, lsl #1
    35a8:	000015e3 	andeq	r1, r0, r3, ror #11
    35ac:	000e3e22 	andeq	r3, lr, r2, lsr #28
    35b0:	02cd0100 	sbceq	r0, sp, #0, 2
    35b4:	00008141 	andeq	r8, r0, r1, asr #2
    35b8:	00160c00 	andseq	r0, r6, r0, lsl #24
    35bc:	72751900 	rsbsvc	r1, r5, #0, 18
    35c0:	ce010067 	cdpgt	0, 0, cr0, cr1, cr7, {3}
    35c4:	00c11102 	sbceq	r1, r1, r2, lsl #2
    35c8:	16560000 	ldrbne	r0, [r6], -r0
    35cc:	621f0000 	andsvs	r0, pc, #0
    35d0:	02cf0100 	sbceq	r0, pc, #0, 2
    35d4:	00056b0c 	andeq	r6, r5, ip, lsl #22
    35d8:	00166900 	andseq	r6, r6, r0, lsl #18
    35dc:	0d7d2700 	ldcleq	7, cr2, [sp, #-0]
    35e0:	d0010000 	andle	r0, r1, r0
    35e4:	01390b02 	teqeq	r9, r2, lsl #22
    35e8:	91020000 	mrsls	r0, (UNDEF: 2)
    35ec:	00732164 	rsbseq	r2, r3, r4, ror #2
    35f0:	0d02d101 	stfeqd	f5, [r2, #-4]
    35f4:	0000040e 	andeq	r0, r0, lr, lsl #8
    35f8:	651f5701 	ldrvs	r5, [pc, #-1793]	; 2eff <__outserial+0x6f>
    35fc:	01006469 	tsteq	r0, r9, ror #8
    3600:	810602d2 	ldrdhi	r0, [r6, -r2]
    3604:	87000000 	strhi	r0, [r0, -r0]
    3608:	00000016 	andeq	r0, r0, r6, lsl r0
    360c:	0cc00118 	stfeqe	f0, [r0], {24}
    3610:	a4010000 	strge	r0, [r1], #-0
    3614:	81010102 	tsthi	r1, r2, lsl #2
	...
    3620:	01000000 	mrseq	r0, (UNDEF: 0)
    3624:	000b409c 	muleq	fp, ip, r0
    3628:	64661900 	strbtvs	r1, [r6], #-2304	; 0xfffff700
    362c:	02a40100 	adceq	r0, r4, #0, 2
    3630:	0000812a 	andeq	r8, r0, sl, lsr #2
    3634:	0016b000 	andseq	fp, r6, r0
    3638:	0e452200 	cdpeq	2, 4, cr2, cr5, cr0, {0}
    363c:	a4010000 	strge	r0, [r1], #-0
    3640:	00813202 	addeq	r3, r1, r2, lsl #4
    3644:	16e40000 	strbtne	r0, [r4], r0
    3648:	731f0000 	tstvc	pc, #0
    364c:	02a80100 	adceq	r0, r8, #0, 2
    3650:	00040e0d 	andeq	r0, r4, sp, lsl #28
    3654:	00171800 	andseq	r1, r7, r0, lsl #16
    3658:	716e1f00 	cmnvc	lr, r0, lsl #30
    365c:	02a90100 	adceq	r0, r9, #0, 2
    3660:	00008106 	andeq	r8, r0, r6, lsl #2
    3664:	00177d00 	andseq	r7, r7, r0, lsl #26
    3668:	71721f00 	cmnvc	r2, r0, lsl #30
    366c:	02aa0100 	adceq	r0, sl, #0, 2
    3670:	0004580b 	andeq	r5, r4, fp, lsl #16
    3674:	00179b00 	andseq	r9, r7, r0, lsl #22
    3678:	00621f00 	rsbeq	r1, r2, r0, lsl #30
    367c:	0c02ab01 			; <UNDEFINED> instruction: 0x0c02ab01
    3680:	0000056b 	andeq	r0, r0, fp, ror #10
    3684:	000017b9 			; <UNDEFINED> instruction: 0x000017b9
    3688:	000ea428 	andeq	sl, lr, r8, lsr #8
    368c:	02c00100 	sbceq	r0, r0, #0, 2
    3690:	00000001 	andeq	r0, r0, r1
    3694:	0e2d2900 	vmuleq.f16	s4, s26, s0	; <UNPREDICTABLE>
	...
    36a0:	bb010000 	bllt	436a8 <__ccfg+0x23700>
    36a4:	3f2a0a02 	svccc	0x002a0a02
    36a8:	1d00000e 	stcne	0, cr0, [r0, #-56]	; 0xffffffc8
    36ac:	00000e4a 	andeq	r0, r0, sl, asr #28
    36b0:	000017e2 	andeq	r1, r0, r2, ror #15
    36b4:	000e551d 	andeq	r5, lr, sp, lsl r5
    36b8:	0017f500 	andseq	pc, r7, r0, lsl #10
    36bc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    36c0:	000c6b01 	andeq	r6, ip, r1, lsl #22
    36c4:	027d0100 	rsbseq	r0, sp, #0, 2
    36c8:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    36d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    36d8:	00000bbd 			; <UNDEFINED> instruction: 0x00000bbd
    36dc:	00646619 	rsbeq	r6, r4, r9, lsl r6
    36e0:	2a027d01 	bcs	a2aec <__ccfg+0x82b44>
    36e4:	00000081 	andeq	r0, r0, r1, lsl #1
    36e8:	00001808 	andeq	r1, r0, r8, lsl #16
    36ec:	000e4522 	andeq	r4, lr, r2, lsr #10
    36f0:	027d0100 	rsbseq	r0, sp, #0, 2
    36f4:	00008132 	andeq	r8, r0, r2, lsr r1
    36f8:	00183c00 	andseq	r3, r8, r0, lsl #24
    36fc:	00731f00 	rsbseq	r1, r3, r0, lsl #30
    3700:	0d028101 	stfeqd	f0, [r2, #-4]
    3704:	0000040e 	andeq	r0, r0, lr, lsl #8
    3708:	00001865 	andeq	r1, r0, r5, ror #16
    370c:	00716e1f 	rsbseq	r6, r1, pc, lsl lr
    3710:	06028201 	streq	r8, [r2], -r1, lsl #4
    3714:	00000081 	andeq	r0, r0, r1, lsl #1
    3718:	000018ca 	andeq	r1, r0, sl, asr #17
    371c:	0071721f 	rsbseq	r7, r1, pc, lsl r2
    3720:	0b028301 	bleq	a432c <__ccfg+0x84384>
    3724:	00000458 	andeq	r0, r0, r8, asr r4
    3728:	000018e8 	andeq	r1, r0, r8, ror #17
    372c:	0100621f 	tsteq	r0, pc, lsl r2
    3730:	6b0c0284 	blvs	304148 <__ccfg+0x2e41a0>
    3734:	11000005 	tstne	r0, r5
    3738:	00000019 	andeq	r0, r0, r9, lsl r0
    373c:	0e820118 	mcreq	1, 4, r0, cr2, cr8, {0}
    3740:	56010000 	strpl	r0, [r1], -r0
    3744:	f6010102 			; <UNDEFINED> instruction: 0xf6010102
    3748:	2c000000 	stccs	0, cr0, [r0], {-0}
    374c:	ac000018 	stcge	0, cr0, [r0], {24}
    3750:	01000018 	tsteq	r0, r8, lsl r0
    3754:	000c2a9c 	muleq	ip, ip, sl
    3758:	0b7d2200 	bleq	1f4bf60 <__ccfg+0x1f2bfb8>
    375c:	56010000 	strpl	r0, [r1], -r0
    3760:	00cd2d02 	sbceq	r2, sp, r2, lsl #26
    3764:	19450000 	stmdbne	r5, {}^	; <UNPREDICTABLE>
    3768:	66190000 	ldrvs	r0, [r9], -r0
    376c:	56010064 	strpl	r0, [r1], -r4, rrx
    3770:	00813802 	addeq	r3, r1, r2, lsl #16
    3774:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
    3778:	701f0000 	andsvc	r0, pc, r0
    377c:	025d0100 	subseq	r0, sp, #0, 2
    3780:	0000f60a 	andeq	pc, r0, sl, lsl #12
    3784:	00199700 	andseq	r9, r9, r0, lsl #14
    3788:	00621f00 	rsbeq	r1, r2, r0, lsl #30
    378c:	0c025e01 	stceq	14, cr5, [r2], {1}
    3790:	0000056b 	andeq	r0, r0, fp, ror #10
    3794:	000019aa 	andeq	r1, r0, sl, lsr #19
    3798:	0071721f 	rsbseq	r7, r1, pc, lsl r2
    379c:	0b025f01 	bleq	9b3a8 <__ccfg+0x7b400>
    37a0:	00000458 	andeq	r0, r0, r8, asr r4
    37a4:	000019d3 	ldrdeq	r1, [r0], -r3
    37a8:	0c011800 	stceq	8, cr1, [r1], {-0}
    37ac:	0100000e 	tsteq	r0, lr
    37b0:	0101024a 	tsteq	r1, sl, asr #4
    37b4:	00000081 	andeq	r0, r0, r1, lsl #1
    37b8:	00001808 	andeq	r1, r0, r8, lsl #16
    37bc:	0000182c 	andeq	r1, r0, ip, lsr #16
    37c0:	0c679c01 	stcleq	12, cr9, [r7], #-4
    37c4:	6f190000 	svcvs	0x00190000
    37c8:	01006472 	tsteq	r0, r2, ror r4
    37cc:	8129024a 			; <UNDEFINED> instruction: 0x8129024a
    37d0:	0d000000 	stceq	0, cr0, [r0, #-0]
    37d4:	2b00001a 	blcs	3844 <NOROM_SetupGetTrimForAmpcompCtrl+0x4>
    37d8:	01006c70 	tsteq	r0, r0, ror ip
    37dc:	a23f024a 	eorsge	r0, pc, #-1610612732	; 0xa0000004
    37e0:	01000004 	tsteq	r0, r4
    37e4:	01180051 	tsteq	r8, r1, asr r0
    37e8:	00000d8c 	andeq	r0, r0, ip, lsl #27
    37ec:	01022901 	tsteq	r2, r1, lsl #18
    37f0:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    37fc:	c49c0100 	ldrgt	r0, [ip], #256	; 0x100
    3800:	2200000c 	andcs	r0, r0, #12
    3804:	00000b7d 	andeq	r0, r0, sp, ror fp
    3808:	2b022901 	blcs	8dc14 <__ccfg+0x6dc6c>
    380c:	000000cd 	andeq	r0, r0, sp, asr #1
    3810:	00001a2b 	andeq	r1, r0, fp, lsr #20
    3814:	00646619 	rsbeq	r6, r4, r9, lsl r6
    3818:	36022901 	strcc	r2, [r2], -r1, lsl #18
    381c:	00000081 	andeq	r0, r0, r1, lsl #1
    3820:	00001a49 	andeq	r1, r0, r9, asr #20
    3824:	0100731f 	tsteq	r0, pc, lsl r3
    3828:	0e0d022b 	cdpeq	2, 0, cr0, cr13, cr11, {1}
    382c:	93000004 	movwls	r0, #4
    3830:	1f00001a 	svcne	0x0000001a
    3834:	2c010062 	stccs	0, cr0, [r1], {98}	; 0x62
    3838:	056b0c02 	strbeq	r0, [fp, #-3074]!	; 0xfffff3fe
    383c:	1aa60000 	bne	fe983844 <_estack+0xde97e844>
    3840:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3844:	000e1501 	andeq	r1, lr, r1, lsl #10
    3848:	01f60100 	mvnseq	r0, r0, lsl #2
    384c:	00810101 	addeq	r0, r1, r1, lsl #2
    3850:	17480000 	strbne	r0, [r8, -r0]
    3854:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    3858:	9c010000 	stcls	0, cr0, [r1], {-0}
    385c:	00000d51 	andeq	r0, r0, r1, asr sp
    3860:	000b7d22 	andeq	r7, fp, r2, lsr #26
    3864:	01f60100 	mvnseq	r0, r0, lsl #2
    3868:	0000cd2a 	andeq	ip, r0, sl, lsr #26
    386c:	001ab900 	andseq	fp, sl, r0, lsl #18
    3870:	68701900 	ldmdavs	r0!, {r8, fp, ip}^
    3874:	f6010079 			; <UNDEFINED> instruction: 0xf6010079
    3878:	00813501 	addeq	r3, r1, r1, lsl #10
    387c:	1ae20000 	bne	ff883884 <_estack+0xdf87e884>
    3880:	f1220000 			; <UNDEFINED> instruction: 0xf1220000
    3884:	0100000d 	tsteq	r0, sp
    3888:	813e01f6 	teqhi	lr, r6	; <illegal shifter operand>
    388c:	37000000 	strcc	r0, [r0, -r0]
    3890:	2c00001b 	stccs	0, cr0, [r0], {27}
    3894:	0064661f 	rsbeq	r6, r4, pc, lsl r6
    3898:	0601f801 	streq	pc, [r1], -r1, lsl #16
    389c:	00000081 	andeq	r0, r0, r1, lsl #1
    38a0:	00001b6f 	andeq	r1, r0, pc, ror #22
    38a4:	000dec2d 	andeq	lr, sp, sp, lsr #24
    38a8:	01f90100 	mvnseq	r0, r0, lsl #2
    38ac:	00033a0a 	andeq	r3, r3, sl, lsl #20
    38b0:	00731f00 	rsbseq	r1, r3, r0, lsl #30
    38b4:	0d01fa01 	vstreq	s30, [r1, #-4]
    38b8:	0000040e 	andeq	r0, r0, lr, lsl #8
    38bc:	00001b8d 	andeq	r1, r0, sp, lsl #23
    38c0:	00706121 	rsbseq	r6, r0, r1, lsr #2
    38c4:	0b01fc01 	bleq	828d0 <__ccfg+0x62928>
    38c8:	000000b5 	strheq	r0, [r0], -r5
    38cc:	00549102 	subseq	r9, r4, r2, lsl #2
    38d0:	0d64011e 	stfeqe	f0, [r4, #-120]!	; 0xffffff88
    38d4:	3b010000 	blcc	438dc <__ccfg+0x23934>
    38d8:	d8010101 	stmdale	r1, {r0, r8}
    38dc:	48000016 	stmdami	r0, {r1, r2, r4}
    38e0:	01000017 	tsteq	r0, r7, lsl r0
    38e4:	000d899c 	muleq	sp, ip, r9
    38e8:	00701900 	rsbseq	r1, r0, r0, lsl #18
    38ec:	2e013b01 	vmlacs.f64	d3, d1, d1
    38f0:	000000f6 	strdeq	r0, [r0], -r6
    38f4:	00001bd7 	ldrdeq	r1, [r0], -r7
    38f8:	0100621f 	tsteq	r0, pc, lsl r2
    38fc:	6b0c0141 	blvs	303e08 <__ccfg+0x2e3e60>
    3900:	00000005 	andeq	r0, r0, r5
    3904:	0000001c 	andeq	r0, r0, ip, lsl r0
    3908:	6270612e 	rsbsvs	r6, r0, #-2147483637	; 0x8000000b
    390c:	01140100 	tsteq	r4, r0, lsl #2
    3910:	056b0101 	strbeq	r0, [fp, #-257]!	; 0xfffffeff
    3914:	160c0000 	strne	r0, [ip], -r0
    3918:	16220000 	strtne	r0, [r2], -r0
    391c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3920:	00000dd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3924:	00131f22 	andseq	r1, r3, r2, lsr #30
    3928:	01140100 	tsteq	r4, r0, lsl #2
    392c:	0000cd2b 	andeq	ip, r0, fp, lsr #26
    3930:	001c3400 	andseq	r3, ip, r0, lsl #8
    3934:	00702100 	rsbseq	r2, r0, r0, lsl #2
    3938:	0c011901 			; <UNDEFINED> instruction: 0x0c011901
    393c:	0000056b 	andeq	r0, r0, fp, ror #10
    3940:	63205001 			; <UNDEFINED> instruction: 0x63205001
    3944:	1a010073 	bne	43b18 <__ccfg+0x23b70>
    3948:	00cd0701 	sbceq	r0, sp, r1, lsl #14
    394c:	2f000000 	svccs	0x00000000
    3950:	00706c72 	rsbseq	r6, r0, r2, ror ip
    3954:	01010401 	tsteq	r1, r1, lsl #8
    3958:	00163c01 	andseq	r3, r6, r1, lsl #24
    395c:	00164a00 	andseq	r4, r6, r0, lsl #20
    3960:	f89c0100 			; <UNDEFINED> instruction: 0xf89c0100
    3964:	1900000d 	stmdbne	r0, {r0, r2, r3}
    3968:	04010070 	streq	r0, [r1], #-112	; 0xffffff90
    396c:	056b2b01 	strbeq	r2, [fp, #-2817]!	; 0xfffff4ff
    3970:	1c470000 	marne	acc0, r0, r7
    3974:	30000000 	andcc	r0, r0, r0
    3978:	00000cad 	andeq	r0, r0, sp, lsr #25
    397c:	0101e001 	tsteq	r1, r1
    3980:	0000164c 	andeq	r1, r0, ip, asr #12
    3984:	000016d8 	ldrdeq	r1, [r0], -r8
    3988:	0e2d9c01 	cdpeq	12, 2, cr9, cr13, cr1, {0}
    398c:	70310000 	eorsvc	r0, r1, r0
    3990:	2fe00100 	svccs	0x00e00100
    3994:	0000056b 	andeq	r0, r0, fp, ror #10
    3998:	00001c5a 	andeq	r1, r0, sl, asr ip
    399c:	00766431 	rsbseq	r6, r6, r1, lsr r4
    39a0:	8136e001 	teqhi	r6, r1
    39a4:	af000000 	svcge	0x00000000
    39a8:	0000001c 	andeq	r0, r0, ip, lsl r0
    39ac:	000cff32 	andeq	pc, ip, r2, lsr pc	; <UNPREDICTABLE>
    39b0:	01cf0100 	biceq	r0, pc, r0, lsl #2
    39b4:	00008101 	andeq	r8, r0, r1, lsl #2
    39b8:	0e600100 	poweqs	f0, f0, f0
    39bc:	6f330000 	svcvs	0x00330000
    39c0:	cf010071 	svcgt	0x00010071
    39c4:	0004582b 	andeq	r5, r4, fp, lsr #16
    39c8:	716e3400 	cmnvc	lr, r0, lsl #8
    39cc:	06d30100 	ldrbeq	r0, [r3], r0, lsl #2
    39d0:	00000081 	andeq	r0, r0, r1, lsl #1
    39d4:	01006234 	tsteq	r0, r4, lsr r2
    39d8:	056b0cd4 	strbeq	r0, [fp, #-3284]!	; 0xfffff32c
    39dc:	35000000 	strcc	r0, [r0, #-0]
    39e0:	00716e65 	rsbseq	r6, r1, r5, ror #28
    39e4:	0101a801 	tsteq	r1, r1, lsl #16
    39e8:	000015c0 	andeq	r1, r0, r0, asr #11
    39ec:	0000160c 	andeq	r1, r0, ip, lsl #12
    39f0:	0e949c01 	cdpeq	12, 9, cr9, cr4, cr1, {0}
    39f4:	71310000 	teqvc	r1, r0
    39f8:	2aa80100 	bcs	fea03e00 <_estack+0xde9fee00>
    39fc:	00000458 	andeq	r0, r0, r8, asr r4
    3a00:	00001cc2 	andeq	r1, r0, r2, asr #25
    3a04:	01007031 	tsteq	r0, r1, lsr r0
    3a08:	056b37a8 	strbeq	r3, [fp, #-1960]!	; 0xfffff858
    3a0c:	1cf60000 	ldclne	0, cr0, [r6]
    3a10:	36000000 	strcc	r0, [r0], -r0
    3a14:	00716564 	rsbseq	r6, r1, r4, ror #10
    3a18:	01017f01 	tsteq	r1, r1, lsl #30
    3a1c:	000ead01 	andeq	sl, lr, r1, lsl #26
    3a20:	00703300 	rsbseq	r3, r0, r0, lsl #6
    3a24:	6b2b7f01 	blvs	ae3630 <__ccfg+0xac3688>
    3a28:	00000005 	andeq	r0, r0, r5
    3a2c:	000e9437 	andeq	r9, lr, r7, lsr r4
    3a30:	00162200 	andseq	r2, r6, r0, lsl #4
    3a34:	00163c00 	andseq	r3, r6, r0, lsl #24
    3a38:	e29c0100 	adds	r0, ip, #0, 2
    3a3c:	3800000e 	stmdacc	r0, {r1, r2, r3}
    3a40:	00000ea2 	andeq	r0, r0, r2, lsr #29
    3a44:	94395001 	ldrtls	r5, [r9], #-1
    3a48:	2800000e 	stmdacs	r0, {r1, r2, r3}
    3a4c:	3a000016 	bcc	3aac <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x30>
    3a50:	01000016 	tsteq	r0, r6, lsl r0
    3a54:	a21b017f 	andsge	r0, fp, #-1073741793	; 0xc000001f
    3a58:	2a00000e 	bcs	3a98 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x1c>
    3a5c:	0000001d 	andeq	r0, r0, sp, lsl r0
    3a60:	08673700 	stmdaeq	r7!, {r8, r9, sl, ip, sp}^
    3a64:	19680000 	stmdbne	r8!, {}^	; <UNPREDICTABLE>
    3a68:	19940000 	ldmibne	r4, {}	; <UNPREDICTABLE>
    3a6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3a70:	00000f3a 	andeq	r0, r0, sl, lsr pc
    3a74:	00087b1b 	andeq	r7, r8, fp, lsl fp
    3a78:	001d3d00 	andseq	r3, sp, r0, lsl #26
    3a7c:	08881b00 	stmeq	r8, {r8, r9, fp, ip}
    3a80:	1d5b0000 	ldclne	0, cr0, [fp, #-0]
    3a84:	951b0000 	ldrls	r0, [fp, #-0]
    3a88:	84000008 	strhi	r0, [r0], #-8
    3a8c:	2900001d 	stmdbcs	r0, {r0, r2, r3, r4}
    3a90:	00000867 	andeq	r0, r0, r7, ror #16
    3a94:	0000197c 	andeq	r1, r0, ip, ror r9
    3a98:	00001984 	andeq	r1, r0, r4, lsl #19
    3a9c:	01035201 	tsteq	r3, r1, lsl #4
    3aa0:	00087b2a 	andeq	r7, r8, sl, lsr #22
    3aa4:	08881b00 	stmeq	r8, {r8, r9, fp, ip}
    3aa8:	1dad0000 	stcne	0, cr0, [sp]
    3aac:	951b0000 	ldrls	r0, [fp, #-0]
    3ab0:	c0000008 	andgt	r0, r0, r8
    3ab4:	0000001d 	andeq	r0, r0, sp, lsl r0
    3ab8:	07183a00 	ldreq	r3, [r8, -r0, lsl #20]
    3abc:	19f40000 	ldmibne	r4!, {}^	; <UNPREDICTABLE>
    3ac0:	1a5c0000 	bne	1703ac8 <__ccfg+0x16e3b20>
    3ac4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ac8:	00072c1b 	andeq	r2, r7, fp, lsl ip
    3acc:	001dd300 	andseq	sp, sp, r0, lsl #6
    3ad0:	07391b00 	ldreq	r1, [r9, -r0, lsl #22]!
    3ad4:	1de60000 	stclne	0, cr0, [r6]
    3ad8:	461b0000 	ldrmi	r0, [fp], -r0
    3adc:	46000007 	strmi	r0, [r0], -r7
    3ae0:	1d00001e 	stcne	0, cr0, [r0, #-120]	; 0xffffff88
    3ae4:	00000753 	andeq	r0, r0, r3, asr r7
    3ae8:	00001e90 	muleq	r0, r0, lr
    3aec:	0007181a 	andeq	r1, r7, sl, lsl r8
    3af0:	001a0600 	andseq	r0, sl, r0, lsl #12
    3af4:	00071000 	andeq	r1, r7, r0
    3af8:	03860100 	orreq	r0, r6, #0, 2
    3afc:	07461b01 	strbeq	r1, [r6, -r1, lsl #22]
    3b00:	1ea30000 	cdpne	0, 10, cr0, cr3, cr0, {0}
    3b04:	391b0000 	ldmdbcc	fp, {}	; <UNPREDICTABLE>
    3b08:	cc000007 	stcgt	0, cr0, [r0], {7}
    3b0c:	2a00001e 	bcs	3b8c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x84>
    3b10:	0000072c 	andeq	r0, r0, ip, lsr #14
    3b14:	0007101c 	andeq	r1, r7, ip, lsl r0
    3b18:	07531d00 	ldrbeq	r1, [r3, -r0, lsl #26]
    3b1c:	1f0b0000 	svcne	0x000b0000
    3b20:	00000000 	andeq	r0, r0, r0
    3b24:	01500000 	cmpeq	r0, r0
    3b28:	00030000 	andeq	r0, r3, r0
    3b2c:	00000f89 	andeq	r0, r0, r9, lsl #31
    3b30:	00d00104 	sbcseq	r0, r0, r4, lsl #2
    3b34:	430c0000 	movwmi	r0, #49152	; 0xc000
    3b38:	a300000f 	movwge	r0, #15
    3b3c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    3b40:	00000008 	andeq	r0, r0, r8
    3b44:	9d000000 	stcls	0, cr0, [r0, #-0]
    3b48:	02000033 	andeq	r0, r0, #51	; 0x33
    3b4c:	029d0601 	addseq	r0, sp, #1048576	; 0x100000
    3b50:	02020000 	andeq	r0, r2, #0
    3b54:	0002b905 	andeq	fp, r2, r5, lsl #18
    3b58:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    3b5c:	0000005c 	andeq	r0, r0, ip, asr r0
    3b60:	57050802 	strpl	r0, [r5, -r2, lsl #16]
    3b64:	02000000 	andeq	r0, r0, #0
    3b68:	029b0801 	addseq	r0, fp, #65536	; 0x10000
    3b6c:	02020000 	andeq	r0, r2, #0
    3b70:	0001ca07 	andeq	ip, r1, r7, lsl #20
    3b74:	1ecb0300 	cdpne	3, 12, cr0, cr11, cr0, {0}
    3b78:	34020000 	strcc	r0, [r2], #-0
    3b7c:	00005b19 	andeq	r5, r0, r9, lsl fp
    3b80:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3b84:	00000045 	andeq	r0, r0, r5, asr #32
    3b88:	40070802 	andmi	r0, r7, r2, lsl #16
    3b8c:	04000000 	streq	r0, [r0], #-0
    3b90:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3b94:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    3b98:	00004a07 	andeq	r4, r0, r7, lsl #20
    3b9c:	82040500 	andhi	r0, r4, #0, 10
    3ba0:	06000000 	streq	r0, [r0], -r0
    3ba4:	00000077 	andeq	r0, r0, r7, ror r0
    3ba8:	04050107 	streq	r0, [r5], #-263	; 0xfffffef9
    3bac:	0000004f 	andeq	r0, r0, pc, asr #32
    3bb0:	000f1508 	andeq	r1, pc, r8, lsl #10
    3bb4:	117f0100 	cmnne	pc, r0, lsl #2
    3bb8:	0000004f 	andeq	r0, r0, pc, asr #32
    3bbc:	f0080101 			; <UNDEFINED> instruction: 0xf0080101
    3bc0:	0100000e 	tsteq	r0, lr
    3bc4:	004f1180 	subeq	r1, pc, r0, lsl #3
    3bc8:	01010000 	mrseq	r0, (UNDEF: 1)
    3bcc:	000f1c08 	andeq	r1, pc, r8, lsl #24
    3bd0:	11810100 	orrne	r0, r1, r0, lsl #2
    3bd4:	0000004f 	andeq	r0, r0, pc, asr #32
    3bd8:	cf080101 	svcgt	0x00080101
    3bdc:	0100000e 	tsteq	r0, lr
    3be0:	004f1184 	subeq	r1, pc, r4, lsl #3
    3be4:	01010000 	mrseq	r0, (UNDEF: 1)
    3be8:	00007d09 	andeq	r7, r0, r9, lsl #26
    3bec:	0000d200 	andeq	sp, r0, r0, lsl #4
    3bf0:	00700a00 	rsbseq	r0, r0, r0, lsl #20
    3bf4:	00310000 	eorseq	r0, r1, r0
    3bf8:	0000c206 	andeq	ip, r0, r6, lsl #4
    3bfc:	0f230b00 	svceq	0x00230b00
    3c00:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    3c04:	0000d20f 	andeq	sp, r0, pc, lsl #4
    3c08:	03050100 	movweq	r0, #20736	; 0x5100
    3c0c:	00000000 	andeq	r0, r0, r0
    3c10:	000ef60c 	andeq	pc, lr, ip, lsl #12
    3c14:	01280100 			; <UNDEFINED> instruction: 0x01280100
    3c18:	1c020101 	stfnes	f0, [r2], {1}
    3c1c:	1c040000 	stcne	0, cr0, [r4], {-0}
    3c20:	9c010000 	stcls	0, cr0, [r1], {-0}
    3c24:	000ee00c 	andeq	lr, lr, ip
    3c28:	01160100 	tsteq	r6, r0, lsl #2
    3c2c:	1c000101 	stfnes	f0, [r0], {1}
    3c30:	1c020000 	stcne	0, cr0, [r2], {-0}
    3c34:	9c010000 	stcls	0, cr0, [r1], {-0}
    3c38:	000f080c 	andeq	r0, pc, ip, lsl #16
    3c3c:	01040100 	mrseq	r0, (UNDEF: 20)
    3c40:	1bfe0101 	blne	fff8404c <_estack+0xdff7f04c>
    3c44:	1c000000 	stcne	0, cr0, [r0], {-0}
    3c48:	9c010000 	stcls	0, cr0, [r1], {-0}
    3c4c:	0f3a010d 	svceq	0x003a010d
    3c50:	d2010000 	andle	r0, r1, #0
    3c54:	1c040101 	stfnes	f0, [r4], {1}
    3c58:	1c4c0000 	marne	acc0, r0, ip
    3c5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3c60:	000ed70e 	andeq	sp, lr, lr, lsl #14
    3c64:	0fd40100 	svceq	0x00d40100
    3c68:	00000084 	andeq	r0, r0, r4, lsl #1
    3c6c:	000f300e 	andeq	r3, pc, lr
    3c70:	1ad40100 	bne	ff504078 <_estack+0xdf4ff078>
    3c74:	00000084 	andeq	r0, r0, r4, lsl #1
    3c78:	01c90000 	biceq	r0, r9, r0
    3c7c:	00030000 	andeq	r0, r3, r0
    3c80:	0000104c 	andeq	r1, r0, ip, asr #32
    3c84:	00d00104 	sbcseq	r0, r0, r4, lsl #2
    3c88:	b30c0000 	movwlt	r0, #49152	; 0xc000
    3c8c:	a300000f 	movwge	r0, #15
    3c90:	af000000 	svcge	0x00000000
    3c94:	02000034 	andeq	r0, r0, #52	; 0x34
    3c98:	029d0601 	addseq	r0, sp, #1048576	; 0x100000
    3c9c:	02020000 	andeq	r0, r2, #0
    3ca0:	0002b905 	andeq	fp, r2, r5, lsl #18
    3ca4:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    3ca8:	0000005c 	andeq	r0, r0, ip, asr r0
    3cac:	57050802 	strpl	r0, [r5, -r2, lsl #16]
    3cb0:	02000000 	andeq	r0, r0, #0
    3cb4:	029b0801 	addseq	r0, fp, #65536	; 0x10000
    3cb8:	02020000 	andeq	r0, r2, #0
    3cbc:	0001ca07 	andeq	ip, r1, r7, lsl #20
    3cc0:	1ecb0300 	cdpne	3, 12, cr0, cr11, cr0, {0}
    3cc4:	34020000 	strcc	r0, [r2], #-0
    3cc8:	00005319 	andeq	r5, r0, r9, lsl r3
    3ccc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3cd0:	00000045 	andeq	r0, r0, r5, asr #32
    3cd4:	40070802 	andmi	r0, r7, r2, lsl #16
    3cd8:	04000000 	streq	r0, [r0], #-0
    3cdc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3ce0:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    3ce4:	00004a07 	andeq	r4, r0, r7, lsl #20
    3ce8:	01580500 	cmpeq	r8, r0, lsl #10
    3cec:	0197092f 	orrseq	r0, r7, pc, lsr #18
    3cf0:	c0060000 	andgt	r0, r6, r0
    3cf4:	01000010 	tsteq	r0, r0, lsl r0
    3cf8:	00471031 	subeq	r1, r7, r1, lsr r0
    3cfc:	06000000 	streq	r0, [r0], -r0
    3d00:	000010af 	andeq	r1, r0, pc, lsr #1
    3d04:	47103201 	ldrmi	r3, [r0, -r1, lsl #4]
    3d08:	04000000 	streq	r0, [r0], #-0
    3d0c:	00102c06 	andseq	r2, r0, r6, lsl #24
    3d10:	10330100 	eorsne	r0, r3, r0, lsl #2
    3d14:	00000047 	andeq	r0, r0, r7, asr #32
    3d18:	10690608 	rsbne	r0, r9, r8, lsl #12
    3d1c:	34010000 	strcc	r0, [r1], #-0
    3d20:	00004710 	andeq	r4, r0, r0, lsl r7
    3d24:	78060c00 	stmdavc	r6, {sl, fp}
    3d28:	01000010 	tsteq	r0, r0, lsl r0
    3d2c:	00471035 	subeq	r1, r7, r5, lsr r0
    3d30:	06100000 	ldreq	r0, [r0], -r0
    3d34:	00001089 	andeq	r1, r0, r9, lsl #1
    3d38:	47103601 	ldrmi	r3, [r0, -r1, lsl #12]
    3d3c:	14000000 	strne	r0, [r0], #-0
    3d40:	00112a06 	andseq	r2, r1, r6, lsl #20
    3d44:	10370100 	eorsne	r0, r7, r0, lsl #2
    3d48:	00000047 	andeq	r0, r0, r7, asr #32
    3d4c:	0f7e0618 	svceq	0x007e0618
    3d50:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    3d54:	00004710 	andeq	r4, r0, r0, lsl r7
    3d58:	3a061c00 	bcc	18ad60 <__ccfg+0x16adb8>
    3d5c:	01000011 	tsteq	r0, r1, lsl r0
    3d60:	00471039 	subeq	r1, r7, r9, lsr r0
    3d64:	06200000 	strteq	r0, [r0], -r0
    3d68:	00001044 	andeq	r1, r0, r4, asr #32
    3d6c:	47103a01 	ldrmi	r3, [r0, -r1, lsl #20]
    3d70:	24000000 	strcs	r0, [r0], #-0
    3d74:	0010e006 	andseq	lr, r0, r6
    3d78:	103b0100 	eorsne	r0, fp, r0, lsl #2
    3d7c:	00000047 	andeq	r0, r0, r7, asr #32
    3d80:	10d00628 	sbcsne	r0, r0, r8, lsr #12
    3d84:	3c010000 	stccc	0, cr0, [r1], {-0}
    3d88:	00004710 	andeq	r4, r0, r0, lsl r7
    3d8c:	a4062c00 	strge	r2, [r6], #-3072	; 0xfffff400
    3d90:	0100000f 	tsteq	r0, pc
    3d94:	0047103d 	subeq	r1, r7, sp, lsr r0
    3d98:	06300000 	ldrteq	r0, [r0], -r0
    3d9c:	0000111a 	andeq	r1, r0, sl, lsl r1
    3da0:	47103e01 	ldrmi	r3, [r0, -r1, lsl #28]
    3da4:	34000000 	strcc	r0, [r0], #-0
    3da8:	000f8f06 	andeq	r8, pc, r6, lsl #30
    3dac:	103f0100 	eorsne	r0, pc, r0, lsl #2
    3db0:	00000047 	andeq	r0, r0, r7, asr #32
    3db4:	0fe70638 	svceq	0x00e70638
    3db8:	40010000 	andmi	r0, r1, r0
    3dbc:	00004710 	andeq	r4, r0, r0, lsl r7
    3dc0:	fb063c00 	blx	192dca <__ccfg+0x172e22>
    3dc4:	0100000f 	tsteq	r0, pc
    3dc8:	00471041 	subeq	r1, r7, r1, asr #32
    3dcc:	06400000 	strbeq	r0, [r0], -r0
    3dd0:	000010f0 	strdeq	r1, [r0], -r0
    3dd4:	47104201 	ldrmi	r4, [r0, -r1, lsl #4]
    3dd8:	44000000 	strmi	r0, [r0], #-0
    3ddc:	00110606 	andseq	r0, r1, r6, lsl #12
    3de0:	10430100 	subne	r0, r3, r0, lsl #2
    3de4:	00000047 	andeq	r0, r0, r7, asr #32
    3de8:	10540648 	subsne	r0, r4, r8, asr #12
    3dec:	44010000 	strmi	r0, [r1], #-0
    3df0:	00004710 	andeq	r4, r0, r0, lsl r7
    3df4:	9a064c00 	bls	196dfc <__ccfg+0x176e54>
    3df8:	01000010 	tsteq	r0, r0, lsl r0
    3dfc:	00471045 	subeq	r1, r7, r5, asr #32
    3e00:	06500000 	ldrbeq	r0, [r0], -r0
    3e04:	0000100f 	andeq	r1, r0, pc
    3e08:	47104601 	ldrmi	r4, [r0, -r1, lsl #12]
    3e0c:	54000000 	strpl	r0, [r0], #-0
    3e10:	114a0300 	mrsne	r0, (UNDEF: 122)
    3e14:	47010000 	strmi	r0, [r1, -r0]
    3e18:	00006f03 	andeq	r6, r0, r3, lsl #30
    3e1c:	01970700 	orrseq	r0, r7, r0, lsl #14
    3e20:	25080000 	strcs	r0, [r8, #-0]
    3e24:	01000010 	tsteq	r0, r0, lsl r0
    3e28:	01a3154e 			; <UNDEFINED> instruction: 0x01a3154e
    3e2c:	01010000 	mrseq	r0, (UNDEF: 1)
    3e30:	a4080102 	strge	r0, [r8], #-258	; 0xfffffefe
    3e34:	09000002 	stmdbeq	r0, {r1}
    3e38:	000001a8 	andeq	r0, r0, r8, lsr #3
    3e3c:	0e021703 	cdpeq	7, 0, cr1, cr2, cr3, {0}
    3e40:	ffa80305 			; <UNDEFINED> instruction: 0xffa80305
    3e44:	40000001 	andmi	r0, r0, r1
    3e48:	03000002 	movweq	r0, #2
    3e4c:	0010ca00 	andseq	ip, r0, r0, lsl #20
    3e50:	d0010400 	andle	r0, r1, r0, lsl #8
    3e54:	0c000000 	stceq	0, cr0, [r0], {-0}
    3e58:	00001161 	andeq	r1, r0, r1, ror #2
    3e5c:	000000a3 	andeq	r0, r0, r3, lsr #1
    3e60:	00000888 	andeq	r0, r0, r8, lsl #17
    3e64:	00000000 	andeq	r0, r0, r0
    3e68:	00003590 	muleq	r0, r0, r5
    3e6c:	9d060102 	stflss	f0, [r6, #-8]
    3e70:	02000002 	andeq	r0, r0, #2
    3e74:	02b90502 	adcseq	r0, r9, #8388608	; 0x800000
    3e78:	04020000 	streq	r0, [r2], #-0
    3e7c:	00005c05 	andeq	r5, r0, r5, lsl #24
    3e80:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    3e84:	00000057 	andeq	r0, r0, r7, asr r0
    3e88:	001f3303 	andseq	r3, pc, r3, lsl #6
    3e8c:	182e0400 	stmdane	lr!, {sl}
    3e90:	0000004d 	andeq	r0, r0, sp, asr #32
    3e94:	9b080102 	blls	2042a4 <__ccfg+0x1e42fc>
    3e98:	03000002 	movweq	r0, #2
    3e9c:	00002329 	andeq	r2, r0, r9, lsr #6
    3ea0:	60193104 	andsvs	r3, r9, r4, lsl #2
    3ea4:	02000000 	andeq	r0, r0, #0
    3ea8:	01ca0702 	biceq	r0, sl, r2, lsl #14
    3eac:	cb030000 	blgt	c3eb4 <__ccfg+0xa3f0c>
    3eb0:	0400001e 	streq	r0, [r0], #-30	; 0xffffffe2
    3eb4:	00731934 	rsbseq	r1, r3, r4, lsr r9
    3eb8:	04020000 	streq	r0, [r2], #-0
    3ebc:	00004507 	andeq	r4, r0, r7, lsl #10
    3ec0:	07080200 	streq	r0, [r8, -r0, lsl #4]
    3ec4:	00000040 	andeq	r0, r0, r0, asr #32
    3ec8:	69050404 	stmdbvs	r5, {r2, sl}
    3ecc:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    3ed0:	004a0704 	subeq	r0, sl, r4, lsl #14
    3ed4:	85030000 	strhi	r0, [r3, #-0]
    3ed8:	0500001d 	streq	r0, [r0, #-29]	; 0xffffffe3
    3edc:	00541227 	subseq	r1, r4, r7, lsr #4
    3ee0:	17030000 	strne	r0, [r3, -r0]
    3ee4:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    3ee8:	0041122b 	subeq	r1, r1, fp, lsr #4
    3eec:	9b050000 	blls	143ef4 <__ccfg+0x123f4c>
    3ef0:	03000000 	movweq	r0, #0
    3ef4:	0000021e 	andeq	r0, r0, lr, lsl r2
    3ef8:	67122d05 	ldrvs	r2, [r2, -r5, lsl #26]
    3efc:	03000000 	movweq	r0, #0
    3f00:	00000251 	andeq	r0, r0, r1, asr r2
    3f04:	c4102e05 	ldrgt	r2, [r0], #-3589	; 0xfffff1fb
    3f08:	06000000 	streq	r0, [r0], -r0
    3f0c:	00008f04 	andeq	r8, r0, r4, lsl #30
    3f10:	08010200 	stmdaeq	r1, {r9}
    3f14:	000002a4 	andeq	r0, r0, r4, lsr #5
    3f18:	00a70406 	adceq	r0, r7, r6, lsl #8
    3f1c:	01070000 	mrseq	r0, (UNDEF: 7)
    3f20:	01099106 	tsteq	r9, r6, lsl #2
    3f24:	08000001 	stmdaeq	r0, {r0}
    3f28:	00000917 	andeq	r0, r0, r7, lsl r9
    3f2c:	9b079306 	blls	1e8b4c <__ccfg+0x1c8ba4>
    3f30:	01000000 	mrseq	r0, (UNDEF: 0)
    3f34:	08000107 	stmdaeq	r0, {r0, r1, r2, r8}
    3f38:	000003fa 	strdeq	r0, [r0], -sl
    3f3c:	9b039406 	blls	e8f5c <__ccfg+0xc8fb4>
    3f40:	01000000 	mrseq	r0, (UNDEF: 0)
    3f44:	00000001 	andeq	r0, r0, r1
    3f48:	00062c03 	andeq	r2, r6, r3, lsl #24
    3f4c:	03960600 	orrseq	r0, r6, #0, 12
    3f50:	000000d7 	ldrdeq	r0, [r0], -r7
    3f54:	00010105 	andeq	r0, r1, r5, lsl #2
    3f58:	010d0900 	tsteq	sp, r0, lsl #18
    3f5c:	011d0000 	tsteq	sp, r0
    3f60:	000a0000 	andeq	r0, sl, r0
    3f64:	00011205 	andeq	r1, r1, r5, lsl #4
    3f68:	06f20b00 	ldrbteq	r0, [r2], r0, lsl #22
    3f6c:	9c060000 	stcls	0, cr0, [r6], {-0}
    3f70:	00011d17 	andeq	r1, r1, r7, lsl sp
    3f74:	09010100 	stmdbeq	r1, {r8}
    3f78:	0000010d 	andeq	r0, r0, sp, lsl #2
    3f7c:	00000140 	andeq	r0, r0, r0, asr #2
    3f80:	0000880c 	andeq	r8, r0, ip, lsl #16
    3f84:	05000300 	streq	r0, [r0, #-768]	; 0xfffffd00
    3f88:	00000130 	andeq	r0, r0, r0, lsr r1
    3f8c:	0001220d 	andeq	r2, r1, sp, lsl #4
    3f90:	100d0100 	andne	r0, sp, r0, lsl #2
    3f94:	00000140 	andeq	r0, r0, r0, asr #2
    3f98:	44290305 	strtmi	r0, [r9], #-773	; 0xfffffcfb
    3f9c:	010e0000 	mrseq	r0, (UNDEF: 14)
    3fa0:	000011b4 			; <UNDEFINED> instruction: 0x000011b4
    3fa4:	01061101 	tsteq	r6, r1, lsl #2
	...
    3fb0:	01fb9c01 	mvnseq	r9, r1, lsl #24
    3fb4:	730f0000 	movwvc	r0, #61440	; 0xf000
    3fb8:	11010074 	tstne	r1, r4, ror r0
    3fbc:	00008f1c 	andeq	r8, r0, ip, lsl pc
    3fc0:	001f3400 	andseq	r3, pc, r0, lsl #8
    3fc4:	11af1000 			; <UNDEFINED> instruction: 0x11af1000
    3fc8:	11010000 	mrsne	r0, (UNDEF: 1)
    3fcc:	0000d12c 	andeq	sp, r0, ip, lsr #2
    3fd0:	001f5200 	andseq	r5, pc, r0, lsl #4
    3fd4:	61760f00 	cmnvs	r6, r0, lsl #30
    3fd8:	1101006c 	tstne	r1, ip, rrx
    3fdc:	0000b83a 	andeq	fp, r0, sl, lsr r8
    3fe0:	001f7000 	andseq	r7, pc, r0
    3fe4:	00701100 	rsbseq	r1, r0, r0, lsl #2
    3fe8:	fb121301 	blx	488bf6 <__ccfg+0x468c4e>
    3fec:	12000001 	andne	r0, r0, #1
    3ff0:	14010069 	strne	r0, [r1], #-105	; 0xffffff97
    3ff4:	00008f07 	andeq	r8, r0, r7, lsl #30
    3ff8:	001f8e00 	andseq	r8, pc, r0, lsl #28
    3ffc:	00761100 	rsbseq	r1, r6, r0, lsl #2
    4000:	9b071501 	blls	1c940c <__ccfg+0x1a9464>
    4004:	13000000 	movwne	r0, #0
    4008:	00000214 	andeq	r0, r0, r4, lsl r2
	...
    4014:	13031c01 	movwne	r1, #15361	; 0x3c01
    4018:	0000021e 	andeq	r0, r0, lr, lsl r2
	...
    4024:	14031f01 	strne	r1, [r3], #-3841	; 0xfffff0ff
    4028:	00000228 	andeq	r0, r0, r8, lsr #4
    402c:	00000000 	andeq	r0, r0, r0
    4030:	00000860 	andeq	r0, r0, r0, ror #16
    4034:	150b2601 	strne	r2, [fp, #-1537]	; 0xfffff9ff
    4038:	00000236 	andeq	r0, r0, r6, lsr r2
    403c:	00001fa1 	andeq	r1, r0, r1, lsr #31
    4040:	04060000 	streq	r0, [r6], #-0
    4044:	0000010d 	andeq	r0, r0, sp, lsl #2
    4048:	11510116 	cmpne	r1, r6, lsl r1
    404c:	0f010000 	svceq	0x00010000
    4050:	00000006 	andeq	r0, r0, r6
    4054:	00000000 	andeq	r0, r0, r0
    4058:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    405c:	0000079e 	muleq	r0, lr, r7
    4060:	01355b02 	teqeq	r5, r2, lsl #22
    4064:	04461703 	strbeq	r1, [r6], #-1795	; 0xfffff8fd
    4068:	50020000 	andpl	r0, r2, r0
    406c:	18030135 	stmdane	r3, {r0, r2, r4, r5, r8}
    4070:	000011a2 	andeq	r1, r0, r2, lsr #3
    4074:	0101a403 	tsteq	r1, r3, lsl #8
    4078:	00000067 	andeq	r0, r0, r7, rrx
    407c:	05f71903 	ldrbeq	r1, [r7, #2307]!	; 0x903
    4080:	a4030000 	strge	r0, [r3], #-0
    4084:	00006718 	andeq	r6, r0, r8, lsl r7
    4088:	fa000000 	blx	4090 <memcpy+0xa0>
    408c:	03000001 	movweq	r0, #1
    4090:	00124200 	andseq	r4, r2, r0, lsl #4
    4094:	d0010400 	andle	r0, r1, r0, lsl #8
    4098:	0c000000 	stceq	0, cr0, [r0], {-0}
    409c:	000011f5 	strdeq	r1, [r0], -r5
    40a0:	000000a3 	andeq	r0, r0, r3, lsr #1
    40a4:	00000900 	andeq	r0, r0, r0, lsl #18
    40a8:	00000000 	andeq	r0, r0, r0
    40ac:	0000379d 	muleq	r0, sp, r7
    40b0:	9d060102 	stflss	f0, [r6, #-8]
    40b4:	02000002 	andeq	r0, r0, #2
    40b8:	02b90502 	adcseq	r0, r9, #8388608	; 0x800000
    40bc:	04020000 	streq	r0, [r2], #-0
    40c0:	00005c05 	andeq	r5, r0, r5, lsl #24
    40c4:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    40c8:	00000057 	andeq	r0, r0, r7, asr r0
    40cc:	9b080102 	blls	2044dc <__ccfg+0x1e4534>
    40d0:	03000002 	movweq	r0, #2
    40d4:	00002329 	andeq	r2, r0, r9, lsr #6
    40d8:	54193103 	ldrpl	r3, [r9], #-259	; 0xfffffefd
    40dc:	02000000 	andeq	r0, r0, #0
    40e0:	01ca0702 	biceq	r0, sl, r2, lsl #14
    40e4:	cb030000 	blgt	c40ec <__ccfg+0xa4144>
    40e8:	0300001e 	movweq	r0, #30
    40ec:	00671934 	rsbeq	r1, r7, r4, lsr r9
    40f0:	04020000 	streq	r0, [r2], #-0
    40f4:	00004507 	andeq	r4, r0, r7, lsl #10
    40f8:	07080200 	streq	r0, [r8, -r0, lsl #4]
    40fc:	00000040 	andeq	r0, r0, r0, asr #32
    4100:	69050404 	stmdbvs	r5, {r2, sl}
    4104:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    4108:	004a0704 	subeq	r0, sl, r4, lsl #14
    410c:	85030000 	strhi	r0, [r3, #-0]
    4110:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    4114:	00481227 	subeq	r1, r8, r7, lsr #4
    4118:	83050000 	movwhi	r0, #20480	; 0x5000
    411c:	03000000 	movweq	r0, #0
    4120:	0000021e 	andeq	r0, r0, lr, lsl r2
    4124:	5b122d04 	blpl	48f53c <__ccfg+0x46f594>
    4128:	02000000 	andeq	r0, r0, #0
    412c:	02a40801 	adceq	r0, r4, #65536	; 0x10000
    4130:	8f060000 	svchi	0x00060000
    4134:	b2000000 	andlt	r0, r0, #0
    4138:	07000000 	streq	r0, [r0, -r0]
    413c:	00a70500 	adceq	r0, r7, r0, lsl #10
    4140:	ac080000 	stcge	0, cr0, [r8], {-0}
    4144:	05000007 	streq	r0, [r0, #-7]
    4148:	00b21306 	adcseq	r1, r2, r6, lsl #6
    414c:	01010000 	mrseq	r0, (UNDEF: 1)
    4150:	00cb0409 	sbceq	r0, fp, r9, lsl #8
    4154:	010a0000 	mrseq	r0, (UNDEF: 10)
    4158:	000000d7 	ldrdeq	r0, [r0], -r7
    415c:	0000830b 	andeq	r8, r0, fp, lsl #6
    4160:	ed0c0000 	stc	0, cr0, [ip, #-0]
    4164:	01000011 	tsteq	r0, r1, lsl r0
    4168:	00c50f08 	sbceq	r0, r5, r8, lsl #30
    416c:	03050000 	movweq	r0, #20480	; 0x5000
    4170:	00000000 	andeq	r0, r0, r0
    4174:	0011e50c 	andseq	lr, r1, ip, lsl #10
    4178:	0d090100 	stfeqs	f0, [r9, #-0]
    417c:	00000083 	andeq	r0, r0, r3, lsl #1
    4180:	00000305 	andeq	r0, r0, r5, lsl #6
    4184:	8f060000 	svchi	0x00060000
    4188:	0b000000 	bleq	4190 <toupper+0x48>
    418c:	0d000001 	stceq	0, cr0, [r0, #-4]
    4190:	0000007c 	andeq	r0, r0, ip, ror r0
    4194:	fb050001 	blx	1441a2 <__ccfg+0x1241fa>
    4198:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    419c:	000000b7 	strheq	r0, [r0], -r7
    41a0:	0b0c0a01 	bleq	3069ac <__ccfg+0x2e6a04>
    41a4:	05000001 	streq	r0, [r0, #-1]
    41a8:	00442e03 	subeq	r2, r4, r3, lsl #28
    41ac:	c9010f00 	stmdbgt	r1, {r8, r9, sl, fp}
    41b0:	01000011 	tsteq	r0, r1, lsl r0
    41b4:	00010658 	andeq	r0, r1, r8, asr r6
    41b8:	00000000 	andeq	r0, r0, r0
    41bc:	01000000 	mrseq	r0, (UNDEF: 0)
    41c0:	00014b9c 	muleq	r1, ip, fp
    41c4:	63611000 	cmnvs	r1, #0
    41c8:	58010074 	stmdapl	r1, {r2, r4, r5, r6}
    41cc:	0000c51d 	andeq	ip, r0, sp, lsl r5
    41d0:	001fb400 	andseq	fp, pc, r0, lsl #8
    41d4:	010f0000 	mrseq	r0, CPSR
    41d8:	000011d8 	ldrdeq	r1, [r0], -r8
    41dc:	01011c01 	tsteq	r1, r1, lsl #24
	...
    41e8:	01e29c01 	mvneq	r9, r1, lsl #24
    41ec:	73110000 	tstvc	r1, #0
    41f0:	01000000 	mrseq	r0, (UNDEF: 0)
    41f4:	0083011c 	addeq	r0, r3, ip, lsl r1
    41f8:	1ff00000 	svcne	0x00f00000	; IMB
    41fc:	c4120000 	ldrgt	r0, [r2], #-0
    4200:	01000011 	tsteq	r0, r1, lsl r0
    4204:	00000121 	andeq	r0, r0, r1, lsr #2
    4208:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
    420c:	01000012 	tsteq	r0, r2, lsl r0
    4210:	00000130 	andeq	r0, r0, r0, lsr r1
    4214:	2b120000 	blcs	48421c <__ccfg+0x464274>
    4218:	01000013 	tsteq	r0, r3, lsl r0
    421c:	00000137 	andeq	r0, r0, r7, lsr r1
    4220:	e2130000 	ands	r0, r3, #0
    4224:	00000001 	andeq	r0, r0, r1
    4228:	a0000000 	andge	r0, r0, r0
    422c:	01000008 	tsteq	r0, r8
    4230:	01b1072b 			; <UNDEFINED> instruction: 0x01b1072b
    4234:	f0140000 			; <UNDEFINED> instruction: 0xf0140000
    4238:	00000001 	andeq	r0, r0, r1
    423c:	0001e213 	andeq	lr, r1, r3, lsl r2
    4240:	00000000 	andeq	r0, r0, r0
    4244:	0008c800 	andeq	ip, r8, r0, lsl #16
    4248:	073e0100 	ldreq	r0, [lr, -r0, lsl #2]!
    424c:	000001cb 	andeq	r0, r0, fp, asr #3
    4250:	0001f014 	andeq	pc, r1, r4, lsl r0	; <UNPREDICTABLE>
    4254:	e2150000 	ands	r0, r5, #0
    4258:	00000001 	andeq	r0, r0, r1
    425c:	e0000000 	and	r0, r0, r0
    4260:	01000008 	tsteq	r0, r8
    4264:	f014074a 			; <UNDEFINED> instruction: 0xf014074a
    4268:	00000001 	andeq	r0, r0, r1
    426c:	11a21600 			; <UNDEFINED> instruction: 0x11a21600
    4270:	a4020000 	strge	r0, [r2], #-0
    4274:	005b0101 	subseq	r0, fp, r1, lsl #2
    4278:	17030000 	strne	r0, [r3, -r0]
    427c:	000005f7 	strdeq	r0, [r0], -r7
    4280:	5b18a402 	blpl	62d290 <__ccfg+0x60d2e8>
    4284:	00000000 	andeq	r0, r0, r0
    4288:	00077500 	andeq	r7, r7, r0, lsl #10
    428c:	7e000300 	cdpvc	3, 0, cr0, cr0, cr0, {0}
    4290:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    4294:	0000d001 	andeq	sp, r0, r1
    4298:	125f0c00 	subsne	r0, pc, #0, 24
    429c:	00a30000 	adceq	r0, r3, r0
    42a0:	0a800000 	beq	fe0042a8 <_estack+0xddfff2a8>
    42a4:	00000000 	andeq	r0, r0, r0
    42a8:	3a4d0000 	bcc	13442b0 <__ccfg+0x1324308>
    42ac:	01020000 	mrseq	r0, (UNDEF: 2)
    42b0:	00029d06 	andeq	r9, r2, r6, lsl #26
    42b4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    42b8:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
    42bc:	5c050402 	cfstrspl	mvf0, [r5], {2}
    42c0:	02000000 	andeq	r0, r0, #0
    42c4:	00570508 	subseq	r0, r7, r8, lsl #10
    42c8:	33030000 	movwcc	r0, #12288	; 0x3000
    42cc:	0400001f 	streq	r0, [r0], #-31	; 0xffffffe1
    42d0:	004d182e 	subeq	r1, sp, lr, lsr #16
    42d4:	01020000 	mrseq	r0, (UNDEF: 2)
    42d8:	00029b08 	andeq	r9, r2, r8, lsl #22
    42dc:	23290300 			; <UNDEFINED> instruction: 0x23290300
    42e0:	31040000 	mrscc	r0, (UNDEF: 4)
    42e4:	00006019 	andeq	r6, r0, r9, lsl r0
    42e8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    42ec:	000001ca 	andeq	r0, r0, sl, asr #3
    42f0:	001ecb03 	andseq	ip, lr, r3, lsl #22
    42f4:	19340400 	ldmdbne	r4!, {sl}
    42f8:	00000073 	andeq	r0, r0, r3, ror r0
    42fc:	45070402 	strmi	r0, [r7, #-1026]	; 0xfffffbfe
    4300:	02000000 	andeq	r0, r0, #0
    4304:	00400708 	subeq	r0, r0, r8, lsl #14
    4308:	04040000 	streq	r0, [r4], #-0
    430c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    4310:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4314:	0000004a 	andeq	r0, r0, sl, asr #32
    4318:	00082503 	andeq	r2, r8, r3, lsl #10
    431c:	12260500 	eorne	r0, r6, #0, 10
    4320:	00000041 	andeq	r0, r0, r1, asr #32
    4324:	001d8503 	andseq	r8, sp, r3, lsl #10
    4328:	12270500 	eorne	r0, r7, #0, 10
    432c:	00000054 	andeq	r0, r0, r4, asr r0
    4330:	00131703 	andseq	r1, r3, r3, lsl #14
    4334:	122b0500 	eorne	r0, fp, #0, 10
    4338:	00000041 	andeq	r0, r0, r1, asr #32
    433c:	0000a705 	andeq	sl, r0, r5, lsl #14
    4340:	1d710300 	ldclne	3, cr0, [r1, #-0]
    4344:	2c050000 	stccs	0, cr0, [r5], {-0}
    4348:	00006712 	andeq	r6, r0, r2, lsl r7
    434c:	08010200 	stmdaeq	r1, {r9}
    4350:	000002a4 	andeq	r0, r0, r4, lsr #5
    4354:	00b30406 	adcseq	r0, r3, r6, lsl #8
    4358:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
    435c:	01000002 	tsteq	r0, r2
    4360:	00b80f0f 	adcseq	r0, r8, pc, lsl #30
    4364:	03050000 	movweq	r0, #20480	; 0x5000
    4368:	00000000 	andeq	r0, r0, r0
    436c:	0012d307 	andseq	sp, r2, r7, lsl #6
    4370:	150f0100 	strne	r0, [pc, #-256]	; 4278 <toupper+0x130>
    4374:	000000b8 	strheq	r0, [r0], -r8
    4378:	00000305 	andeq	r0, r0, r5, lsl #6
    437c:	0e070000 	cdpeq	0, 0, cr0, cr7, cr0, {0}
    4380:	01000013 	tsteq	r0, r3, lsl r0
    4384:	00cb1410 	sbceq	r1, fp, r0, lsl r4
    4388:	03050000 	movweq	r0, #20480	; 0x5000
    438c:	00000000 	andeq	r0, r0, r0
    4390:	0012b907 	andseq	fp, r2, r7, lsl #18
    4394:	0d120100 	ldfeqs	f0, [r2, #-0]
    4398:	000000a7 	andeq	r0, r0, r7, lsr #1
    439c:	01c80305 	biceq	r0, r8, r5, lsl #6
    43a0:	02072000 	andeq	r2, r7, #0
    43a4:	01000013 	tsteq	r0, r3, lsl r0
    43a8:	00a70313 	adceq	r0, r7, r3, lsl r3
    43ac:	03050000 	movweq	r0, #20480	; 0x5000
    43b0:	200001c9 	andcs	r0, r0, r9, asr #3
    43b4:	000bef07 	andeq	lr, fp, r7, lsl #30
    43b8:	0d150100 	ldfeqs	f0, [r5, #-0]
    43bc:	0000009b 	muleq	r0, fp, r0
    43c0:	00000305 	andeq	r0, r0, r5, lsl #6
    43c4:	01080000 	mrseq	r0, (UNDEF: 8)
    43c8:	0000123d 	andeq	r1, r0, sp, lsr r2
    43cc:	00061303 	andeq	r1, r6, r3, lsl #6
    43d0:	00000000 	andeq	r0, r0, r0
    43d4:	01000000 	mrseq	r0, (UNDEF: 0)
    43d8:	1c01099c 			; <UNDEFINED> instruction: 0x1c01099c
    43dc:	03000013 	movweq	r0, #19
    43e0:	b8010708 	stmdalt	r1, {r3, r8, r9, sl}
	...
    43ec:	01000000 	mrseq	r0, (UNDEF: 0)
    43f0:	00018a9c 	muleq	r1, ip, sl
    43f4:	72650a00 	rsbvc	r0, r5, #0, 20
    43f8:	19080300 	stmdbne	r8, {r8, r9}
    43fc:	0000018a 	andeq	r0, r0, sl, lsl #3
    4400:	00002024 	andeq	r2, r0, r4, lsr #32
    4404:	7572650b 	ldrbvc	r6, [r2, #-1291]!	; 0xfffffaf5
    4408:	24080300 	strcs	r0, [r8], #-768	; 0xfffffd00
    440c:	00000190 	muleq	r0, r0, r1
    4410:	06005101 	streq	r5, [r0], -r1, lsl #2
    4414:	00008f04 	andeq	r8, r0, r4, lsl #30
    4418:	b8040600 	stmdalt	r4, {r9, sl}
    441c:	0c000000 	stceq	0, cr0, [r0], {-0}
    4420:	0012e101 	andseq	lr, r2, r1, lsl #2
    4424:	01600100 	cmneq	r0, r0, lsl #2
    4428:	009b0106 	addseq	r0, fp, r6, lsl #2
	...
    4434:	9c010000 	stcls	0, cr0, [r1], {-0}
    4438:	000001c4 	andeq	r0, r0, r4, asr #3
    443c:	0074730d 	rsbseq	r7, r4, sp, lsl #6
    4440:	14016001 	strne	r6, [r1], #-1
    4444:	0000009b 	muleq	r0, fp, r0
    4448:	00002037 	andeq	r2, r0, r7, lsr r0
    444c:	d8010e00 	stmdale	r1, {r9, sl, fp}
    4450:	01000012 	tsteq	r0, r2, lsl r0
    4454:	0006015b 	andeq	r0, r6, fp, asr r1
    4458:	00000000 	andeq	r0, r0, r0
    445c:	01000000 	mrseq	r0, (UNDEF: 0)
    4460:	b0010c9c 	mullt	r1, ip, ip
    4464:	01000012 	tsteq	r0, r2, lsl r0
    4468:	01060121 	tsteq	r6, r1, lsr #2
    446c:	0000009b 	muleq	r0, fp, r0
	...
    4478:	028e9c01 	addeq	r9, lr, #256	; 0x100
    447c:	730d0000 	movwvc	r0, #53248	; 0xd000
    4480:	21010074 	tstcs	r1, r4, ror r0
    4484:	009b1501 	addseq	r1, fp, r1, lsl #10
    4488:	204a0000 	subcs	r0, sl, r0
    448c:	610d0000 	mrsvs	r0, (UNDEF: 13)
    4490:	01210100 			; <UNDEFINED> instruction: 0x01210100
    4494:	0000b81f 	andeq	fp, r0, pc, lsl r8
    4498:	00205d00 	eoreq	r5, r0, r0, lsl #26
    449c:	00730d00 	rsbseq	r0, r3, r0, lsl #26
    44a0:	2e012101 	adfcss	f2, f1, f1
    44a4:	000000cb 	andeq	r0, r0, fp, asr #1
    44a8:	0000207b 	andeq	r2, r0, fp, ror r0
    44ac:	6e656c0d 	cdpvs	12, 6, cr6, cr5, cr13, {0}
    44b0:	01210100 			; <UNDEFINED> instruction: 0x01210100
    44b4:	00009b36 	andeq	r9, r0, r6, lsr fp
    44b8:	00208e00 	eoreq	r8, r0, r0, lsl #28
    44bc:	6c620f00 	stclvs	15, cr0, [r2], #-0
    44c0:	01230100 			; <UNDEFINED> instruction: 0x01230100
    44c4:	00009b07 	andeq	r9, r0, r7, lsl #22
    44c8:	0020a100 	eoreq	sl, r0, r0, lsl #2
    44cc:	12c71000 	sbcne	r1, r7, #0
    44d0:	32010000 	andcc	r0, r1, #0
    44d4:	00000101 	andeq	r0, r0, r1, lsl #2
    44d8:	c4110000 	ldrgt	r0, [r1], #-0
    44dc:	00000006 	andeq	r0, r0, r6
    44e0:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    44e4:	0100000a 	tsteq	r0, sl
    44e8:	71030143 	tstvc	r3, r3, asr #2
    44ec:	12000002 	andne	r0, r0, #2
    44f0:	000006e0 	andeq	r0, r0, r0, ror #13
    44f4:	0006d312 	andeq	sp, r6, r2, lsl r3
    44f8:	c4130000 	ldrgt	r0, [r3], #-0
    44fc:	00000006 	andeq	r0, r0, r6
    4500:	00000000 	andeq	r0, r0, r0
    4504:	01000000 	mrseq	r0, (UNDEF: 0)
    4508:	12030150 	andne	r0, r3, #80, 2
    450c:	000006e0 	andeq	r0, r0, r0, ror #13
    4510:	0006d312 	andeq	sp, r6, r2, lsl r3
    4514:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    4518:	0012a701 	andseq	sl, r2, r1, lsl #14
    451c:	06cb0100 	strbeq	r0, [fp], r0, lsl #2
    4520:	00009b01 	andeq	r9, r0, r1, lsl #22
	...
    452c:	4f9c0100 	svcmi	0x009c0100
    4530:	0a000003 	beq	4544 <patchGenfskRfe+0x9c>
    4534:	01007473 	tsteq	r0, r3, ror r4
    4538:	009b15cb 	addseq	r1, fp, fp, asr #11
    453c:	20ca0000 	sbccs	r0, sl, r0
    4540:	e9140000 	ldmdb	r4, {}	; <UNPREDICTABLE>
    4544:	01000012 	tsteq	r0, r2, lsl r0
    4548:	00b81fcb 	adcseq	r1, r8, fp, asr #31
    454c:	20e80000 	rsccs	r0, r8, r0
    4550:	4b140000 	blmi	504558 <__ccfg+0x4e45b0>
    4554:	01000012 	tsteq	r0, r2, lsl r0
    4558:	00b82bcb 	adcseq	r2, r8, fp, asr #23
    455c:	21110000 	tstcs	r1, r0
    4560:	37150000 	ldrcc	r0, [r5, -r0]
    4564:	01000012 	tsteq	r0, r2, lsl r0
    4568:	000001e6 	andeq	r0, r0, r6, ror #3
    456c:	2a150000 	bcs	544574 <__ccfg+0x5245cc>
    4570:	01000013 	tsteq	r0, r3, lsl r0
    4574:	000001ea 	andeq	r0, r0, sl, ror #3
    4578:	2c160000 	ldccs	0, cr0, [r6], {-0}
    457c:	00000005 	andeq	r0, r0, r5
    4580:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    4584:	0100000a 	tsteq	r0, sl
    4588:	461704fc 			; <UNDEFINED> instruction: 0x461704fc
    458c:	2f000005 	svccs	0x00000005
    4590:	17000021 	strne	r0, [r0, -r1, lsr #32]
    4594:	0000053a 	andeq	r0, r0, sl, lsr r5
    4598:	00002142 	andeq	r2, r0, r2, asr #2
    459c:	0006c418 	andeq	ip, r6, r8, lsl r4
    45a0:	00000000 	andeq	r0, r0, r0
    45a4:	000a5000 	andeq	r5, sl, r0
    45a8:	02430100 	subeq	r0, r3, #0, 2
    45ac:	00000332 	andeq	r0, r0, r2, lsr r3
    45b0:	0006e012 	andeq	lr, r6, r2, lsl r0
    45b4:	06d31200 	ldrbeq	r1, [r3], r0, lsl #4
    45b8:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    45bc:	000006c4 	andeq	r0, r0, r4, asr #13
	...
    45c8:	12024801 	andne	r4, r2, #65536	; 0x10000
    45cc:	000006e0 	andeq	r0, r0, r0, ror #13
    45d0:	0006d312 	andeq	sp, r6, r2, lsl r3
    45d4:	00000000 	andeq	r0, r0, r0
    45d8:	12ee0109 	rscne	r0, lr, #1073741826	; 0x40000002
    45dc:	b0010000 	andlt	r0, r1, r0
    45e0:	009b0106 	addseq	r0, fp, r6, lsl #2
	...
    45ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    45f0:	000003d2 	ldrdeq	r0, [r0], -r2
    45f4:	0100610a 	tsteq	r0, sl, lsl #2
    45f8:	00b815b0 	ldrhteq	r1, [r8], r0
    45fc:	21550000 	cmpcs	r5, r0
    4600:	730a0000 	movwvc	r0, #40960	; 0xa000
    4604:	1eb00100 	frdnes	f0, f0, f0
    4608:	000003d2 	ldrdeq	r0, [r0], -r2
    460c:	0000217e 	andeq	r2, r0, lr, ror r1
    4610:	6e656c0a 	cdpvs	12, 6, cr6, cr5, cr10, {0}
    4614:	26b00100 	ldrtcs	r0, [r0], r0, lsl #2
    4618:	0000009b 	muleq	r0, fp, r0
    461c:	000021b2 			; <UNDEFINED> instruction: 0x000021b2
    4620:	0006c418 	andeq	ip, r6, r8, lsl r4
    4624:	00000000 	andeq	r0, r0, r0
    4628:	000a2000 	andeq	r2, sl, r0
    462c:	02ba0100 	adcseq	r0, sl, #0, 2
    4630:	000003b6 			; <UNDEFINED> instruction: 0x000003b6
    4634:	0006e012 	andeq	lr, r6, r2, lsl r0
    4638:	06d31200 	ldrbeq	r1, [r3], r0, lsl #4
    463c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    4640:	000006c4 	andeq	r0, r0, r4, asr #13
	...
    464c:	1202c401 	andne	ip, r2, #16777216	; 0x1000000
    4650:	000006e0 	andeq	r0, r0, r0, ror #13
    4654:	0006d312 	andeq	sp, r6, r2, lsl r3
    4658:	06000000 	streq	r0, [r0], -r0
    465c:	0000a704 	andeq	sl, r0, r4, lsl #14
    4660:	56010800 	strpl	r0, [r1], -r0, lsl #16
    4664:	01000012 	tsteq	r0, r2, lsl r0
    4668:	1da806a8 	stcne	6, cr0, [r8, #672]!	; 0x2a0
    466c:	1dbc0000 	ldcne	0, cr0, [ip]
    4670:	9c010000 	stcls	0, cr0, [r1], {-0}
    4674:	12bf011a 	adcsne	r0, pc, #-2147483642	; 0x80000006
    4678:	93010000 	movwls	r0, #4096	; 0x1000
    467c:	00009b06 	andeq	r9, r0, r6, lsl #22
    4680:	001d9400 	andseq	r9, sp, r0, lsl #8
    4684:	001da800 	andseq	sl, sp, r0, lsl #16
    4688:	1b9c0100 	blne	fe704a90 <_estack+0xde6ffa90>
    468c:	00001324 	andeq	r1, r0, r4, lsr #6
    4690:	2c0d8201 	sfmcs	f0, 1, [sp], {1}
    4694:	7000001d 	andvc	r0, r0, sp, lsl r0
    4698:	0100001d 	tsteq	r0, sp, lsl r0
    469c:	0004649c 	muleq	r4, ip, r4
    46a0:	046d1900 	strbteq	r1, [sp], #-2304	; 0xfffff700
    46a4:	1d460000 	stclne	0, cr0, [r6, #-0]
    46a8:	1d5e0000 	ldclne	0, cr0, [lr, #-0]
    46ac:	8a010000 	bhi	446b4 <__ccfg+0x2470c>
    46b0:	06c41803 	strbeq	r1, [r4], r3, lsl #16
    46b4:	1d460000 	stclne	0, cr0, [r6, #-0]
    46b8:	09f00000 	ldmibeq	r0!, {}^	; <UNPREDICTABLE>
    46bc:	72010000 	andvc	r0, r1, #0
    46c0:	00044702 	andeq	r4, r4, r2, lsl #14
    46c4:	06e01200 	strbteq	r1, [r0], r0, lsl #4
    46c8:	d3120000 	tstle	r2, #0
    46cc:	00000006 	andeq	r0, r0, r6
    46d0:	0006c416 	andeq	ip, r6, r6, lsl r4
    46d4:	001d5400 	andseq	r5, sp, r0, lsl #8
    46d8:	000a0800 	andeq	r0, sl, r0, lsl #16
    46dc:	02740100 	rsbseq	r0, r4, #0, 2
    46e0:	0006e012 	andeq	lr, r6, r2, lsl r0
    46e4:	06d31200 	ldrbeq	r1, [r3], r0, lsl #4
    46e8:	00000000 	andeq	r0, r0, r0
    46ec:	12fb1c00 	rscsne	r1, fp, #0, 24
    46f0:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    46f4:	081c010d 	ldmdaeq	ip, {r0, r2, r3, r8}
    46f8:	01000013 	tsteq	r0, r3, lsl r0
    46fc:	1c010d6d 	stcne	13, cr0, [r1], {109}	; 0x6d
    4700:	00001330 	andeq	r1, r0, r0, lsr r3
    4704:	010d6601 	tsteq	sp, r1, lsl #12
    4708:	0013361d 	andseq	r3, r3, sp, lsl r6
    470c:	0d580100 	ldfeqe	f0, [r8, #-0]
    4710:	001cd401 	andseq	sp, ip, r1, lsl #8
    4714:	001d2c00 	andseq	r2, sp, r0, lsl #24
    4718:	109c0100 	addsne	r0, ip, r0, lsl #2
    471c:	0a000005 	beq	4738 <patchGenfskRfe+0x290>
    4720:	01007473 	tsteq	r0, r3, ror r4
    4724:	009b1958 	addseq	r1, fp, r8, asr r9
    4728:	21d00000 	bicscs	r0, r0, r0
    472c:	640a0000 	strvs	r0, [sl], #-0
    4730:	01006c65 	tsteq	r0, r5, ror #24
    4734:	009b2258 	addseq	r2, fp, r8, asr r2
    4738:	21e30000 	mvncs	r0, r0
    473c:	10160000 	andsne	r0, r6, r0
    4740:	dc000005 	stcle	0, cr0, [r0], {5}
    4744:	a800001c 	stmdage	r0, {r2, r3, r4}
    4748:	01000009 	tsteq	r0, r9
    474c:	a81e135c 	ldmdage	lr, {r2, r3, r4, r6, r8, r9, ip}
    4750:	1f000009 	svcne	0x00000009
    4754:	00000521 	andeq	r0, r0, r1, lsr #10
    4758:	000021f6 	strdeq	r2, [r0], -r6
    475c:	0006c418 	andeq	ip, r6, r8, lsl r4
    4760:	001cdc00 	andseq	sp, ip, r0, lsl #24
    4764:	0009c800 	andeq	ip, r9, r0, lsl #16
    4768:	02510100 	subseq	r0, r1, #0, 2
    476c:	000004f2 	strdeq	r0, [r0], -r2
    4770:	0006e012 	andeq	lr, r6, r2, lsl r0
    4774:	06d31200 	ldrbeq	r1, [r3], r0, lsl #4
    4778:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    477c:	000006c4 	andeq	r0, r0, r4, asr #13
    4780:	00001cf8 	strdeq	r1, [r0], -r8
    4784:	00001cfe 	strdeq	r1, [r0], -lr
    4788:	12025401 	andne	r5, r2, #16777216	; 0x1000000
    478c:	000006e0 	andeq	r0, r0, r0, ror #13
    4790:	0006d312 	andeq	sp, r6, r2, lsl r3
    4794:	00000000 	andeq	r0, r0, r0
    4798:	12f62000 	rscsne	r2, r6, #0
    479c:	4b010000 	blmi	447a4 <__ccfg+0x247fc>
    47a0:	0000a70d 	andeq	sl, r0, sp, lsl #14
    47a4:	052c0100 	streq	r0, [ip, #-256]!	; 0xffffff00
    47a8:	72210000 	eorvc	r0, r1, #0
    47ac:	074f0100 	strbeq	r0, [pc, -r0, lsl #2]
    47b0:	000000a7 	andeq	r0, r0, r7, lsr #1
    47b4:	12cd2200 	sbcne	r2, sp, #0, 4
    47b8:	41010000 	mrsmi	r0, (UNDEF: 1)
    47bc:	5101010d 	tstpl	r1, sp, lsl #2
    47c0:	23000005 	movwcs	r0, #5
    47c4:	00646d63 	rsbeq	r6, r4, r3, ror #26
    47c8:	a7194101 	ldrge	r4, [r9, -r1, lsl #2]
    47cc:	23000000 	movwcs	r0, #0
    47d0:	41010061 	tstmi	r1, r1, rrx
    47d4:	0000b824 	andeq	fp, r0, r4, lsr #16
    47d8:	501d0000 	andspl	r0, sp, r0
    47dc:	01000012 	tsteq	r0, r2, lsl r0
    47e0:	b8010d3a 	stmdalt	r1, {r1, r3, r4, r5, r8, sl, fp}
    47e4:	d400001c 	strle	r0, [r0], #-28	; 0xffffffe4
    47e8:	0100001c 	tsteq	r0, ip, lsl r0
    47ec:	0005b39c 	muleq	r5, ip, r3
    47f0:	6d630a00 	vstmdbvs	r3!, {s1-s0}
    47f4:	3a010064 	bcc	4498c <__ccfg+0x249e4>
    47f8:	0000a719 	andeq	sl, r0, r9, lsl r7
    47fc:	00220900 	eoreq	r0, r2, r0, lsl #18
    4800:	06c41800 	strbeq	r1, [r4], r0, lsl #16
    4804:	1cb80000 	ldcne	0, cr0, [r8]
    4808:	09900000 	ldmibeq	r0, {}	; <UNPREDICTABLE>
    480c:	3c010000 	stccc	0, cr0, [r1], {-0}
    4810:	00059702 	andeq	r9, r5, r2, lsl #14
    4814:	06e01200 	strbteq	r1, [r0], r0, lsl #4
    4818:	d3120000 	tstle	r2, #0
    481c:	00000006 	andeq	r0, r0, r6
    4820:	0006c419 	andeq	ip, r6, r9, lsl r4
    4824:	001cc600 	andseq	ip, ip, r0, lsl #12
    4828:	001ccc00 	andseq	ip, ip, r0, lsl #24
    482c:	023e0100 	eorseq	r0, lr, #0, 2
    4830:	0006e012 	andeq	lr, r6, r2, lsl r0
    4834:	06d31200 	ldrbeq	r1, [r3], r0, lsl #4
    4838:	00000000 	andeq	r0, r0, r0
    483c:	00133c1d 	andseq	r3, r3, sp, lsl ip
    4840:	0d290100 	stfeqs	f0, [r9, #-0]
    4844:	001c8401 	andseq	r8, ip, r1, lsl #8
    4848:	001cb800 	andseq	fp, ip, r0, lsl #16
    484c:	479c0100 	ldrmi	r0, [ip, r0, lsl #2]
    4850:	0a000006 	beq	4870 <patchGenfskRfe+0x3c8>
    4854:	29010062 	stmdbcs	r1, {r1, r5, r6}
    4858:	0000a71c 	andeq	sl, r0, ip, lsl r7
    485c:	00221c00 	eoreq	r1, r2, r0, lsl #24
    4860:	00692100 	rsbeq	r2, r9, r0, lsl #2
    4864:	81062b01 	tsthi	r6, r1, lsl #22
    4868:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    486c:	0000070b 	andeq	r0, r0, fp, lsl #14
    4870:	00001c8c 	andeq	r1, r0, ip, lsl #25
    4874:	00000958 	andeq	r0, r0, r8, asr r9
    4878:	fc033201 	stc2	2, cr3, [r3], {1}
    487c:	12000005 	andne	r0, r0, #5
    4880:	0000071a 	andeq	r0, r0, sl, lsl r7
    4884:	070b2400 	streq	r2, [fp, -r0, lsl #8]
    4888:	1c960000 	ldcne	0, cr0, [r6], {0}
    488c:	1c9c0000 	ldcne	0, cr0, [ip], {0}
    4890:	2f010000 	svccs	0x00010000
    4894:	00061604 	andeq	r1, r6, r4, lsl #12
    4898:	071a1200 	ldreq	r1, [sl, -r0, lsl #4]
    489c:	24000000 	strcs	r0, [r0], #-0
    48a0:	000006ee 	andeq	r0, r0, lr, ror #13
    48a4:	00001c9c 	muleq	r0, ip, ip
    48a8:	00001ca0 	andeq	r1, r0, r0, lsr #25
    48ac:	30043101 	andcc	r3, r4, r1, lsl #2
    48b0:	12000006 	andne	r0, r0, #6
    48b4:	000006fd 	strdeq	r0, [r0], -sp
    48b8:	06ee1600 	strbteq	r1, [lr], r0, lsl #12
    48bc:	1ca80000 	stcne	0, cr0, [r8]
    48c0:	09780000 	ldmdbeq	r8!, {}^	; <UNPREDICTABLE>
    48c4:	33010000 	movwcc	r0, #4096	; 0x1000
    48c8:	06fd1203 	ldrbteq	r1, [sp], r3, lsl #4
    48cc:	00000000 	andeq	r0, r0, r0
    48d0:	00131325 	andseq	r1, r3, r5, lsr #6
    48d4:	0d190100 	ldfeqs	f0, [r9, #-0]
    48d8:	000000a7 	andeq	r0, r0, r7, lsr #1
    48dc:	00001c54 	andeq	r1, r0, r4, asr ip
    48e0:	00001c84 	andeq	r1, r0, r4, lsl #25
    48e4:	06c49c01 	strbeq	r9, [r4], r1, lsl #24
    48e8:	69210000 	stmdbvs	r1!, {}	; <UNPREDICTABLE>
    48ec:	061b0100 	ldreq	r0, [fp], -r0, lsl #2
    48f0:	00000081 	andeq	r0, r0, r1, lsl #1
    48f4:	01006226 	tsteq	r0, r6, lsr #4
    48f8:	00a7071c 	adceq	r0, r7, ip, lsl r7
    48fc:	223a0000 	eorscs	r0, sl, #0
    4900:	0b180000 	bleq	604908 <__ccfg+0x5e4960>
    4904:	58000007 	stmdapl	r0, {r0, r1, r2}
    4908:	1800001c 	stmdane	r0, {r2, r3, r4}
    490c:	01000009 	tsteq	r0, r9
    4910:	06930322 	ldreq	r0, [r3], r2, lsr #6
    4914:	1a120000 	bne	48491c <__ccfg+0x464974>
    4918:	00000007 	andeq	r0, r0, r7
    491c:	00072818 	andeq	r2, r7, r8, lsl r8
    4920:	001c5e00 	andseq	r5, ip, r0, lsl #28
    4924:	00093800 	andeq	r3, r9, r0, lsl #16
    4928:	07200100 	streq	r0, [r0, -r0, lsl #2]!
    492c:	000006ad 	andeq	r0, r0, sp, lsr #13
    4930:	00073a12 	andeq	r3, r7, r2, lsl sl
    4934:	ee190000 	cdp	0, 1, cr0, cr9, cr0, {0}
    4938:	76000006 	strvc	r0, [r0], -r6
    493c:	7a00001c 	bvc	49b4 <patchGenfskRfe+0x50c>
    4940:	0100001c 	tsteq	r0, ip, lsl r0
    4944:	fd120323 	ldc2	3, cr0, [r2, #-140]	; 0xffffff74
    4948:	00000006 	andeq	r0, r0, r6
    494c:	03e22700 	mvneq	r2, #0, 14
    4950:	06020000 	streq	r0, [r2], -r0
    4954:	03010102 	movweq	r0, #4354	; 0x1102
    4958:	000006ee 	andeq	r0, r0, lr, ror #13
    495c:	0005f728 	andeq	pc, r5, r8, lsr #14
    4960:	02060200 	andeq	r0, r6, #0, 4
    4964:	00006723 	andeq	r6, r0, r3, lsr #14
    4968:	09932800 	ldmibeq	r3, {fp, sp}
    496c:	06020000 	streq	r0, [r2], -r0
    4970:	00673702 	rsbeq	r3, r7, r2, lsl #14
    4974:	27000000 	strcs	r0, [r0, -r0]
    4978:	000007ba 			; <UNDEFINED> instruction: 0x000007ba
    497c:	01015402 	tsteq	r1, r2, lsl #8
    4980:	070b0301 	streq	r0, [fp, -r1, lsl #6]
    4984:	f7280000 			; <UNDEFINED> instruction: 0xf7280000
    4988:	02000005 	andeq	r0, r0, #5
    498c:	67190154 			; <UNDEFINED> instruction: 0x67190154
    4990:	00000000 	andeq	r0, r0, r0
    4994:	0008f527 	andeq	pc, r8, r7, lsr #10
    4998:	011e0200 	tsteq	lr, r0, lsl #4
    499c:	28030101 	stmdacs	r3, {r0, r8}
    49a0:	28000007 	stmdacs	r0, {r0, r1, r2}
    49a4:	000005f7 	strdeq	r0, [r0], -r7
    49a8:	17011e02 	strne	r1, [r1, -r2, lsl #28]
    49ac:	00000067 	andeq	r0, r0, r7, rrx
    49b0:	11a22900 			; <UNDEFINED> instruction: 0x11a22900
    49b4:	a4020000 	strge	r0, [r2], #-0
    49b8:	00670101 	rsbeq	r0, r7, r1, lsl #2
    49bc:	47030000 	strmi	r0, [r3, -r0]
    49c0:	2a000007 	bcs	49e4 <patchGenfskRfe+0x53c>
    49c4:	000005f7 	strdeq	r0, [r0], -r7
    49c8:	6718a402 	ldrvs	sl, [r8, -r2, lsl #8]
    49cc:	00000000 	andeq	r0, r0, r0
    49d0:	0004642b 	andeq	r6, r4, fp, lsr #8
    49d4:	001d7000 	andseq	r7, sp, r0
    49d8:	001d9400 	andseq	r9, sp, r0, lsl #8
    49dc:	199c0100 	ldmibne	ip, {r8}
    49e0:	00000464 	andeq	r0, r0, r4, ror #8
    49e4:	00001d7a 	andeq	r1, r0, sl, ror sp
    49e8:	00001d8e 	andeq	r1, r0, lr, lsl #27
    49ec:	2c0d7801 	stccs	8, cr7, [sp], {1}
    49f0:	00000476 	andeq	r0, r0, r6, ror r4
    49f4:	00001d84 	andeq	r1, r0, r4, lsl #27
    49f8:	00001d8a 	andeq	r1, r0, sl, lsl #27
    49fc:	00037c01 	andeq	r7, r3, r1, lsl #24
    4a00:	014a0000 	mrseq	r0, (UNDEF: 74)
    4a04:	00030000 	andeq	r0, r3, r0
    4a08:	00001659 	andeq	r1, r0, r9, asr r6
    4a0c:	00d00104 	sbcseq	r0, r0, r4, lsl #2
    4a10:	4e0c0000 	cdpmi	0, 0, cr0, cr12, cr0, {0}
    4a14:	a3000013 	movwge	r0, #19
    4a18:	00000000 	andeq	r0, r0, r0
    4a1c:	0000000b 	andeq	r0, r0, fp
    4a20:	d6000000 	strle	r0, [r0], -r0
    4a24:	02000042 	andeq	r0, r0, #66	; 0x42
    4a28:	029d0601 	addseq	r0, sp, #1048576	; 0x100000
    4a2c:	02020000 	andeq	r0, r2, #0
    4a30:	0002b905 	andeq	fp, r2, r5, lsl #18
    4a34:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    4a38:	0000005c 	andeq	r0, r0, ip, asr r0
    4a3c:	57050802 	strpl	r0, [r5, -r2, lsl #16]
    4a40:	02000000 	andeq	r0, r0, #0
    4a44:	029b0801 	addseq	r0, fp, #65536	; 0x10000
    4a48:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    4a4c:	02000023 	andeq	r0, r0, #35	; 0x23
    4a50:	00541931 	subseq	r1, r4, r1, lsr r9
    4a54:	02020000 	andeq	r0, r2, #0
    4a58:	0001ca07 	andeq	ip, r1, r7, lsl #20
    4a5c:	1ecb0300 	cdpne	3, 12, cr0, cr11, cr0, {0}
    4a60:	34020000 	strcc	r0, [r2], #-0
    4a64:	00006719 	andeq	r6, r0, r9, lsl r7
    4a68:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4a6c:	00000045 	andeq	r0, r0, r5, asr #32
    4a70:	40070802 	andmi	r0, r7, r2, lsl #16
    4a74:	04000000 	streq	r0, [r0], #-0
    4a78:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4a7c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    4a80:	00004a07 	andeq	r4, r0, r7, lsl #20
    4a84:	02590300 	subseq	r0, r9, #0, 6
    4a88:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    4a8c:	00008f1b 	andeq	r8, r0, fp, lsl pc
    4a90:	008a0500 	addeq	r0, sl, r0, lsl #10
    4a94:	05040000 	streq	r0, [r4, #-0]
    4a98:	0000a700 	andeq	sl, r0, r0, lsl #14
    4a9c:	03310600 	teqeq	r1, #0, 12
    4aa0:	00a70000 	adceq	r0, r7, r0
    4aa4:	01000000 	mrseq	r0, (UNDEF: 0)
    4aa8:	03040700 	movweq	r0, #18176	; 0x4700
    4aac:	0000008c 	andeq	r0, r0, ip, lsl #1
    4ab0:	83186303 	tsthi	r8, #201326592	; 0xc000000
    4ab4:	03000000 	movweq	r0, #0
    4ab8:	00001d85 	andeq	r1, r0, r5, lsl #27
    4abc:	48122704 	ldmdami	r2, {r2, r8, r9, sl, sp}
    4ac0:	03000000 	movweq	r0, #0
    4ac4:	0000021e 	andeq	r0, r0, lr, lsl r2
    4ac8:	5b122d04 	blpl	48fee0 <__ccfg+0x46ff38>
    4acc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4ad0:	0000d304 	andeq	sp, r0, r4, lsl #6
    4ad4:	08010200 	stmdaeq	r1, {r9}
    4ad8:	000002a4 	andeq	r0, r0, r4, lsr #5
    4adc:	0000d309 	andeq	sp, r0, r9, lsl #6
    4ae0:	45010a00 	strmi	r0, [r1, #-2560]	; 0xfffff600
    4ae4:	01000013 	tsteq	r0, r3, lsl r0
    4ae8:	7501050c 	strvc	r0, [r1, #-1292]	; 0xfffffaf4
    4aec:	bc000000 	stclt	0, cr0, [r0], {-0}
    4af0:	1000001d 	andne	r0, r0, sp, lsl r0
    4af4:	0100001e 	tsteq	r0, lr, lsl r0
    4af8:	0001479c 	muleq	r1, ip, r7
    4afc:	74730b00 	ldrbtvc	r0, [r3], #-2816	; 0xfffff500
    4b00:	140c0100 	strne	r0, [ip], #-256	; 0xffffff00
    4b04:	000000b5 	strheq	r0, [r0], -r5
    4b08:	00002258 	andeq	r2, r0, r8, asr r2
    4b0c:	01006d0c 	tsteq	r0, ip, lsl #26
    4b10:	0147240c 	cmpeq	r7, ip, lsl #8
    4b14:	91020000 	mrsls	r0, (UNDEF: 2)
    4b18:	310e0d74 	tstcc	lr, r4, ror sp
    4b1c:	0100001b 	tsteq	r0, fp, lsl r0
    4b20:	0075060e 	rsbseq	r0, r5, lr, lsl #12
    4b24:	226b0000 	rsbcs	r0, fp, #0
    4b28:	620f0000 	andvs	r0, pc, #0
    4b2c:	01006675 	tsteq	r0, r5, ror r6
    4b30:	00cd080f 	sbceq	r0, sp, pc, lsl #16
    4b34:	22aa0000 	adccs	r0, sl, #0
    4b38:	61100000 	tstvs	r0, r0
    4b3c:	10010070 	andne	r0, r1, r0, ror r0
    4b40:	0000a90a 	andeq	sl, r0, sl, lsl #18
    4b44:	5c910200 	lfmpl	f0, 4, [r1], {0}
    4b48:	da040800 	ble	106b50 <__ccfg+0xe6ba8>
    4b4c:	00000000 	andeq	r0, r0, r0
    4b50:	0000014a 	andeq	r0, r0, sl, asr #2
    4b54:	173a0003 	ldrne	r0, [sl, -r3]!
    4b58:	01040000 	mrseq	r0, (UNDEF: 4)
    4b5c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    4b60:	0013940c 	andseq	r9, r3, ip, lsl #8
    4b64:	0000a300 	andeq	sl, r0, r0, lsl #6
    4b68:	000b1000 	andeq	r1, fp, r0
    4b6c:	00000000 	andeq	r0, r0, r0
    4b70:	00441600 	subeq	r1, r4, r0, lsl #12
    4b74:	06010200 	streq	r0, [r1], -r0, lsl #4
    4b78:	0000029d 	muleq	r0, sp, r2
    4b7c:	b9050202 	stmdblt	r5, {r1, r9}
    4b80:	02000002 	andeq	r0, r0, #2
    4b84:	005c0504 	subseq	r0, ip, r4, lsl #10
    4b88:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    4b8c:	00005705 	andeq	r5, r0, r5, lsl #14
    4b90:	08010200 	stmdaeq	r1, {r9}
    4b94:	0000029b 	muleq	r0, fp, r2
    4b98:	00232903 	eoreq	r2, r3, r3, lsl #18
    4b9c:	19310200 	ldmdbne	r1!, {r9}
    4ba0:	00000054 	andeq	r0, r0, r4, asr r0
    4ba4:	ca070202 	bgt	1c53b4 <__ccfg+0x1a540c>
    4ba8:	03000001 	movweq	r0, #1
    4bac:	00001ecb 	andeq	r1, r0, fp, asr #29
    4bb0:	67193402 	ldrvs	r3, [r9, -r2, lsl #8]
    4bb4:	02000000 	andeq	r0, r0, #0
    4bb8:	00450704 	subeq	r0, r5, r4, lsl #14
    4bbc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    4bc0:	00004007 	andeq	r4, r0, r7
    4bc4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    4bc8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    4bcc:	4a070402 	bmi	1c5bdc <__ccfg+0x1a5c34>
    4bd0:	03000000 	movweq	r0, #0
    4bd4:	00000259 	andeq	r0, r0, r9, asr r2
    4bd8:	8f1b2803 	svchi	0x001b2803
    4bdc:	05000000 	streq	r0, [r0, #-0]
    4be0:	0000008a 	andeq	r0, r0, sl, lsl #1
    4be4:	a7000504 	strge	r0, [r0, -r4, lsl #10]
    4be8:	06000000 	streq	r0, [r0], -r0
    4bec:	00000331 	andeq	r0, r0, r1, lsr r3
    4bf0:	000000a7 	andeq	r0, r0, r7, lsr #1
    4bf4:	07000100 	streq	r0, [r0, -r0, lsl #2]
    4bf8:	008c0304 	addeq	r0, ip, r4, lsl #6
    4bfc:	63030000 	movwvs	r0, #12288	; 0x3000
    4c00:	00008318 	andeq	r8, r0, r8, lsl r3
    4c04:	1d850300 	stcne	3, cr0, [r5]
    4c08:	27040000 	strcs	r0, [r4, -r0]
    4c0c:	00004812 	andeq	r4, r0, r2, lsl r8
    4c10:	021e0300 	andseq	r0, lr, #0, 6
    4c14:	2d040000 	stccs	0, cr0, [r4, #-0]
    4c18:	00005b12 	andeq	r5, r0, r2, lsl fp
    4c1c:	d3040800 	movwle	r0, #18432	; 0x4800
    4c20:	02000000 	andeq	r0, r0, #0
    4c24:	02a40801 	adceq	r0, r4, #65536	; 0x10000
    4c28:	d3090000 	movwle	r0, #36864	; 0x9000
    4c2c:	0a000000 	beq	4c34 <patchImageGenfsk+0xd8>
    4c30:	000013d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    4c34:	cd0e0a01 	vstrgt	s0, [lr, #-4]
    4c38:	01000000 	mrseq	r0, (UNDEF: 0)
    4c3c:	8c010b01 			; <UNDEFINED> instruction: 0x8c010b01
    4c40:	01000013 	tsteq	r0, r3, lsl r0
    4c44:	7501050e 	strvc	r0, [r1, #-1294]	; 0xfffffaf2
    4c48:	10000000 	andne	r0, r0, r0
    4c4c:	7000001e 	andvc	r0, r0, lr, lsl r0
    4c50:	0100001e 	tsteq	r0, lr, lsl r0
    4c54:	0001479c 	muleq	r1, ip, r7
    4c58:	74730c00 	ldrbtvc	r0, [r3], #-3072	; 0xfffff400
    4c5c:	130e0100 	movwne	r0, #57600	; 0xe100
    4c60:	000000b5 	strheq	r0, [r0], -r5
    4c64:	000022de 	ldrdeq	r2, [r0], -lr
    4c68:	746d660d 	strbtvc	r6, [sp], #-1549	; 0xfffff9f3
    4c6c:	230e0100 	movwcs	r0, #57600	; 0xe100
    4c70:	00000147 	andeq	r0, r0, r7, asr #2
    4c74:	0e749102 	expeqs	f1, f2
    4c78:	001b310f 	andseq	r3, fp, pc, lsl #2
    4c7c:	06130100 	ldreq	r0, [r3], -r0, lsl #2
    4c80:	00000075 	andeq	r0, r0, r5, ror r0
    4c84:	000022fc 	strdeq	r2, [r0], -ip
    4c88:	00706110 	rsbseq	r6, r0, r0, lsl r1
    4c8c:	a90a1401 	stmdbge	sl, {r0, sl, ip}
    4c90:	02000000 	andeq	r0, r0, #0
    4c94:	08006491 	stmdaeq	r0, {r0, r4, r7, sl, sp, lr}
    4c98:	0000da04 	andeq	sp, r0, r4, lsl #20
    4c9c:	010b0000 	mrseq	r0, (UNDEF: 11)
    4ca0:	00030000 	andeq	r0, r3, r0
    4ca4:	0000181d 	andeq	r1, r0, sp, lsl r8
    4ca8:	00d00104 	sbcseq	r0, r0, r4, lsl #2
    4cac:	e20c0000 	and	r0, ip, #0
    4cb0:	a3000013 	movwge	r0, #19
    4cb4:	20000000 	andcs	r0, r0, r0
    4cb8:	0000000b 	andeq	r0, r0, fp
    4cbc:	67000000 	strvs	r0, [r0, -r0]
    4cc0:	02000045 	andeq	r0, r0, #69	; 0x45
    4cc4:	029d0601 	addseq	r0, sp, #1048576	; 0x100000
    4cc8:	02020000 	andeq	r0, r2, #0
    4ccc:	0002b905 	andeq	fp, r2, r5, lsl #18
    4cd0:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    4cd4:	0000005c 	andeq	r0, r0, ip, asr r0
    4cd8:	57050802 	strpl	r0, [r5, -r2, lsl #16]
    4cdc:	02000000 	andeq	r0, r0, #0
    4ce0:	029b0801 	addseq	r0, fp, #65536	; 0x10000
    4ce4:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    4ce8:	02000023 	andeq	r0, r0, #35	; 0x23
    4cec:	00541931 	subseq	r1, r4, r1, lsr r9
    4cf0:	02020000 	andeq	r0, r2, #0
    4cf4:	0001ca07 	andeq	ip, r1, r7, lsl #20
    4cf8:	1ecb0300 	cdpne	3, 12, cr0, cr11, cr0, {0}
    4cfc:	34020000 	strcc	r0, [r2], #-0
    4d00:	00006719 	andeq	r6, r0, r9, lsl r7
    4d04:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4d08:	00000045 	andeq	r0, r0, r5, asr #32
    4d0c:	40070802 	andmi	r0, r7, r2, lsl #16
    4d10:	04000000 	streq	r0, [r0], #-0
    4d14:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4d18:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    4d1c:	00004a07 	andeq	r4, r0, r7, lsl #20
    4d20:	1d850300 	stcne	3, cr0, [r5]
    4d24:	27030000 	strcs	r0, [r3, -r0]
    4d28:	00004812 	andeq	r4, r0, r2, lsl r8
    4d2c:	021e0300 	andseq	r0, lr, #0, 6
    4d30:	2d030000 	stccs	0, cr0, [r3, #-0]
    4d34:	00005b12 	andeq	r5, r0, r2, lsl fp
    4d38:	a1040500 	tstge	r4, r0, lsl #10
    4d3c:	02000000 	andeq	r0, r0, #0
    4d40:	02a40801 	adceq	r0, r4, #65536	; 0x10000
    4d44:	d1060000 	mrsle	r0, (UNDEF: 6)
    4d48:	01000013 	tsteq	r0, r3, lsl r0
    4d4c:	009b0e09 	addseq	r0, fp, r9, lsl #28
    4d50:	01010000 	mrseq	r0, (UNDEF: 1)
    4d54:	13db0107 	bicsne	r0, fp, #-1073741823	; 0xc0000001
    4d58:	0d010000 	stceq	0, cr0, [r1, #-0]
    4d5c:	00750105 	rsbseq	r0, r5, r5, lsl #2
    4d60:	1e700000 	cdpne	0, 7, cr0, cr0, cr0, {0}
    4d64:	1ee80000 	cdpne	0, 14, cr0, cr8, cr0, {0}
    4d68:	9c010000 	stcls	0, cr0, [r1], {-0}
    4d6c:	00747308 	rsbseq	r7, r4, r8, lsl #6
    4d70:	83120d01 	tsthi	r2, #1, 26	; 0x40
    4d74:	46000000 	strmi	r0, [r0], -r0
    4d78:	08000023 	stmdaeq	r0, {r0, r1, r5}
    4d7c:	00667562 	rsbeq	r7, r6, r2, ror #10
    4d80:	9b1c0d01 	blls	70818c <__ccfg+0x6e81e4>
    4d84:	64000000 	strvs	r0, [r0], #-0
    4d88:	08000023 	stmdaeq	r0, {r0, r1, r5}
    4d8c:	006e656c 	rsbeq	r6, lr, ip, ror #10
    4d90:	75250d01 	strvc	r0, [r5, #-3329]!	; 0xfffff2ff
    4d94:	b9000000 	stmdblt	r0, {}	; <UNPREDICTABLE>
    4d98:	09000023 	stmdbeq	r0, {r0, r1, r5}
    4d9c:	00001b31 	andeq	r1, r0, r1, lsr fp
    4da0:	75061101 	strvc	r1, [r6, #-257]	; 0xfffffeff
    4da4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4da8:	00000024 	andeq	r0, r0, r4, lsr #32
    4dac:	001a2500 	andseq	r2, sl, r0, lsl #10
    4db0:	ad000300 	stcge	3, cr0, [r0, #-0]
    4db4:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    4db8:	0000d001 	andeq	sp, r0, r1
    4dbc:	1af00c00 	bne	ffc07dc4 <_estack+0xdfc02dc4>
    4dc0:	00a30000 	adceq	r0, r3, r0
    4dc4:	0c500000 	mraeq	r0, r0, acc0
    4dc8:	00000000 	andeq	r0, r0, r0
    4dcc:	46ca0000 	strbmi	r0, [sl], r0
    4dd0:	c2020000 	andgt	r0, r2, #0
    4dd4:	06000020 	streq	r0, [r0], -r0, lsr #32
    4dd8:	00311722 	eorseq	r1, r1, r2, lsr #14
    4ddc:	01030000 	mrseq	r0, (UNDEF: 3)
    4de0:	00029d06 	andeq	r9, r2, r6, lsl #26
    4de4:	27040200 	strcs	r0, [r4, -r0, lsl #4]
    4de8:	25060000 	strcs	r0, [r6, #-0]
    4dec:	00004418 	andeq	r4, r0, r8, lsl r4
    4df0:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
    4df4:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
    4df8:	5c050403 	cfstrspl	mvf0, [r5], {3}
    4dfc:	03000000 	movweq	r0, #0
    4e00:	00570508 	subseq	r0, r7, r8, lsl #10
    4e04:	33020000 	movwcc	r0, #8192	; 0x2000
    4e08:	0600001f 			; <UNDEFINED> instruction: 0x0600001f
    4e0c:	0065182e 	rsbeq	r1, r5, lr, lsr #16
    4e10:	01030000 	mrseq	r0, (UNDEF: 3)
    4e14:	00029b08 	andeq	r9, r2, r8, lsl #22
    4e18:	23290200 			; <UNDEFINED> instruction: 0x23290200
    4e1c:	31060000 	mrscc	r0, (UNDEF: 6)
    4e20:	00007819 	andeq	r7, r0, r9, lsl r8
    4e24:	07020300 	streq	r0, [r2, -r0, lsl #6]
    4e28:	000001ca 	andeq	r0, r0, sl, asr #3
    4e2c:	001ecb02 	andseq	ip, lr, r2, lsl #22
    4e30:	19340600 	ldmdbne	r4!, {r9, sl}
    4e34:	00000090 	muleq	r0, r0, r0
    4e38:	00007f04 	andeq	r7, r0, r4, lsl #30
    4e3c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    4e40:	00000045 	andeq	r0, r0, r5, asr #32
    4e44:	00009005 	andeq	r9, r0, r5
    4e48:	07080300 	streq	r0, [r8, -r0, lsl #6]
    4e4c:	00000040 	andeq	r0, r0, r0, asr #32
    4e50:	69050406 	stmdbvs	r5, {r1, r2, sl}
    4e54:	0300746e 	movweq	r7, #1134	; 0x46e
    4e58:	004a0704 	subeq	r0, sl, r4, lsl #14
    4e5c:	01030000 	mrseq	r0, (UNDEF: 3)
    4e60:	0002a408 	andeq	sl, r2, r8, lsl #8
    4e64:	19b10200 	ldmibne	r1!, {r9}
    4e68:	3b070000 	blcc	1c4e70 <__ccfg+0x1a4ec8>
    4e6c:	00007f12 	andeq	r7, r0, r2, lsl pc
    4e70:	07080700 	streq	r0, [r8, -r0, lsl #14]
    4e74:	00e80940 	rsceq	r0, r8, r0, asr #18
    4e78:	14080000 	strne	r0, [r8], #-0
    4e7c:	07000015 	smladeq	r0, r5, r0, r0
    4e80:	00e80d41 	rsceq	r0, r8, r1, asr #26
    4e84:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4e88:	0000153a 	andeq	r1, r0, sl, lsr r5
    4e8c:	e80d4207 	stmda	sp, {r0, r1, r2, r9, lr}
    4e90:	04000000 	streq	r0, [r0], #-0
    4e94:	59040900 	stmdbpl	r4, {r8, fp}
    4e98:	02000000 	andeq	r0, r0, #0
    4e9c:	000019c5 	andeq	r1, r0, r5, asr #19
    4ea0:	c4034307 	strgt	r4, [r3], #-775	; 0xfffffcf9
    4ea4:	02000000 	andeq	r0, r0, #0
    4ea8:	00001a42 	andeq	r1, r0, r2, asr #20
    4eac:	062b3c08 	strteq	r3, [fp], -r8, lsl #24
    4eb0:	0a000001 	beq	4ebc <_ctype_+0x90>
    4eb4:	00001a34 	andeq	r1, r0, r4, lsr sl
    4eb8:	156f0810 	strbne	r0, [pc, #-2064]!	; 46b0 <patchGenfskRfe+0x208>
    4ebc:	00000162 	andeq	r0, r0, r2, ror #2
    4ec0:	00143308 	andseq	r3, r4, r8, lsl #6
    4ec4:	0d700800 	ldcleq	8, cr0, [r0, #-0]
    4ec8:	0000006c 	andeq	r0, r0, ip, rrx
    4ecc:	170b0800 	strne	r0, [fp, -r0, lsl #16]
    4ed0:	71080000 	mrsvc	r0, (UNDEF: 8)
    4ed4:	00006c0d 	andeq	r6, r0, sp, lsl #24
    4ed8:	b0080200 	andlt	r0, r8, r0, lsl #4
    4edc:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    4ee0:	03241374 			; <UNDEFINED> instruction: 0x03241374
    4ee4:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    4ee8:	00001550 	andeq	r1, r0, r0, asr r5
    4eec:	b80c7508 	stmdalt	ip, {r3, r8, sl, ip, sp, lr}
    4ef0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4ef4:	0017d208 	andseq	sp, r7, r8, lsl #4
    4ef8:	067d0800 	ldrbteq	r0, [sp], -r0, lsl #16
    4efc:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
    4f00:	1c75080c 	ldclne	8, cr0, [r5], #-48	; 0xffffffd0
    4f04:	81080000 	mrshi	r0, (UNDEF: 8)
    4f08:	0002fa06 	andeq	pc, r2, r6, lsl #20
    4f0c:	02000d00 	andeq	r0, r0, #0, 26
    4f10:	000015b6 			; <UNDEFINED> instruction: 0x000015b6
    4f14:	6e2a3f08 	cdpvs	15, 2, cr3, cr10, cr8, {0}
    4f18:	0a000001 	beq	4f24 <_ctype_+0xf8>
    4f1c:	000015a9 	andeq	r1, r0, r9, lsr #11
    4f20:	15e00818 	strbne	r0, [r0, #2072]!	; 0x818
    4f24:	00000225 	andeq	r0, r0, r5, lsr #4
    4f28:	00143308 	andseq	r3, r4, r8, lsl #6
    4f2c:	0de10800 	stcleq	8, cr0, [r1]
    4f30:	0000006c 	andeq	r0, r0, ip, rrx
    4f34:	170b0800 	strne	r0, [fp, -r0, lsl #16]
    4f38:	e2080000 	and	r0, r8, #0
    4f3c:	00006c0d 	andeq	r6, r0, sp, lsl #24
    4f40:	b0080200 	andlt	r0, r8, r0, lsl #4
    4f44:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    4f48:	032413e5 			; <UNDEFINED> instruction: 0x032413e5
    4f4c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    4f50:	00001550 	andeq	r1, r0, r0, asr r5
    4f54:	b80ce608 	stmdalt	ip, {r3, r9, sl, sp, lr, pc}
    4f58:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4f5c:	0017d208 	andseq	sp, r7, r8, lsl #4
    4f60:	06ee0800 	strbteq	r0, [lr], r0, lsl #16
    4f64:	00000330 	andeq	r0, r0, r0, lsr r3
    4f68:	1c75080c 	ldclne	8, cr0, [r5], #-48	; 0xffffffd0
    4f6c:	f2080000 	vhadd.s8	d0, d8, d0
    4f70:	00037a06 	andeq	r7, r3, r6, lsl #20
    4f74:	e9080d00 	stmdb	r8, {r8, sl, fp}
    4f78:	08000014 	stmdaeq	r0, {r2, r4}
    4f7c:	006c0df3 	strdeq	r0, [ip], #-211	; 0xffffff2d	; <UNPREDICTABLE>
    4f80:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
    4f84:	00001884 	andeq	r1, r0, r4, lsl #17
    4f88:	6c0df408 	cfstrsvs	mvf15, [sp], {8}
    4f8c:	10000000 	andne	r0, r0, r0
    4f90:	0015e108 	andseq	lr, r5, r8, lsl #2
    4f94:	06fa0800 	ldrbteq	r0, [sl], r0, lsl #16
    4f98:	000003a4 	andeq	r0, r0, r4, lsr #7
    4f9c:	1a950812 	bne	fe546fec <_estack+0xde541fec>
    4fa0:	fb080000 	blx	204faa <__ccfg+0x1e5002>
    4fa4:	0000590c 	andeq	r5, r0, ip, lsl #18
    4fa8:	9e081300 	cdpls	3, 0, cr1, cr8, cr0, {0}
    4fac:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    4fb0:	00590cfc 	ldrsheq	r0, [r9], #-204	; 0xffffff34
    4fb4:	08140000 	ldmdaeq	r4, {}	; <UNPREDICTABLE>
    4fb8:	00001aa7 	andeq	r1, r0, r7, lsr #21
    4fbc:	590cfd08 	stmdbpl	ip, {r3, r8, sl, fp, ip, sp, lr, pc}
    4fc0:	15000000 	strne	r0, [r0, #-0]
    4fc4:	001ab008 	andseq	fp, sl, r8
    4fc8:	0dfe0800 	ldcleq	8, cr0, [lr]
    4fcc:	0000006c 	andeq	r0, r0, ip, rrx
    4fd0:	ca020016 	bgt	85030 <__ccfg+0x65088>
    4fd4:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    4fd8:	02313644 	eorseq	r3, r1, #68, 12	; 0x4400000
    4fdc:	b10b0000 	mrslt	r0, (UNDEF: 11)
    4fe0:	1400001b 	strne	r0, [r0], #-27	; 0xffffffe5
    4fe4:	15019f08 	strne	r9, [r1, #-3848]	; 0xfffff0f8
    4fe8:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
    4fec:	0014330c 	andseq	r3, r4, ip, lsl #6
    4ff0:	01a00800 	lsleq	r0, r0, #16
    4ff4:	00006c0d 	andeq	r6, r0, sp, lsl #24
    4ff8:	0b0c0000 	bleq	305000 <__ccfg+0x2e5058>
    4ffc:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    5000:	6c0d01a1 	stfvss	f0, [sp], {161}	; 0xa1
    5004:	02000000 	andeq	r0, r0, #0
    5008:	0017b00c 	andseq	fp, r7, ip
    500c:	01a40800 			; <UNDEFINED> instruction: 0x01a40800
    5010:	00032413 	andeq	r2, r3, r3, lsl r4
    5014:	500c0400 	andpl	r0, ip, r0, lsl #8
    5018:	08000015 	stmdaeq	r0, {r0, r2, r4}
    501c:	b80c01a5 	stmdalt	ip, {r0, r2, r5, r7, r8}
    5020:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5024:	0017d20c 	andseq	sp, r7, ip, lsl #4
    5028:	01ad0800 			; <UNDEFINED> instruction: 0x01ad0800
    502c:	0003ce06 	andeq	ip, r3, r6, lsl #28
    5030:	750c0c00 	strvc	r0, [ip, #-3072]	; 0xfffff400
    5034:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    5038:	1d0601b1 	stfnes	f0, [r6, #-708]	; 0xfffffd3c
    503c:	0d000004 	stceq	0, cr0, [r0, #-16]
    5040:	001a950c 	andseq	r9, sl, ip, lsl #10
    5044:	01b20800 			; <UNDEFINED> instruction: 0x01b20800
    5048:	00006c0d 	andeq	r6, r0, sp, lsl #24
    504c:	5a0c0e00 	bpl	308854 <__ccfg+0x2e88ac>
    5050:	08000016 	stmdaeq	r0, {r1, r2, r4}
    5054:	b80c01b3 	stmdalt	ip, {r0, r1, r4, r5, r7, r8}
    5058:	10000000 	andne	r0, r0, r0
    505c:	08010700 	stmdaeq	r1, {r8, r9, sl}
    5060:	02fa0476 	rscseq	r0, sl, #1979711488	; 0x76000000
    5064:	940d0000 	strls	r0, [sp], #-0
    5068:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    506c:	00590f77 	subseq	r0, r9, r7, ror pc
    5070:	04010000 	streq	r0, [r1], #-0
    5074:	1a0d0004 	bne	34508c <__ccfg+0x3250e4>
    5078:	08000016 	stmdaeq	r0, {r1, r2, r4}
    507c:	00590f78 	subseq	r0, r9, r8, ror pc
    5080:	01010000 	mrseq	r0, (UNDEF: 1)
    5084:	cf0d0003 	svcgt	0x000d0003
    5088:	08000016 	stmdaeq	r0, {r1, r2, r4}
    508c:	00590f7a 	subseq	r0, r9, sl, ror pc
    5090:	02010000 	andeq	r0, r1, #0
    5094:	860d0001 	strhi	r0, [sp], -r1
    5098:	08000014 	stmdaeq	r0, {r2, r4}
    509c:	00590f7b 	subseq	r0, r9, fp, ror pc
    50a0:	01010000 	mrseq	r0, (UNDEF: 1)
    50a4:	07000000 	streq	r0, [r0, -r0]
    50a8:	047e0801 	ldrbteq	r0, [lr], #-2049	; 0xfffff7ff
    50ac:	00000324 	andeq	r0, r0, r4, lsr #6
    50b0:	001acc0d 	andseq	ip, sl, sp, lsl #24
    50b4:	0f7f0800 	svceq	0x007f0800
    50b8:	00000059 	andeq	r0, r0, r9, asr r0
    50bc:	00040401 	andeq	r0, r4, r1, lsl #8
    50c0:	001c380d 	andseq	r3, ip, sp, lsl #16
    50c4:	0f800800 	svceq	0x00800800
    50c8:	00000059 	andeq	r0, r0, r9, asr r0
    50cc:	00000401 	andeq	r0, r0, r1, lsl #8
    50d0:	fa040900 	blx	1074d8 <__ccfg+0xe7530>
    50d4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    50d8:	00007f04 	andeq	r7, r0, r4, lsl #30
    50dc:	08010700 	stmdaeq	r1, {r8, r9, sl}
    50e0:	037a04e7 	cmneq	sl, #-419430400	; 0xe7000000
    50e4:	940d0000 	strls	r0, [sp], #-0
    50e8:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    50ec:	00590fe8 	subseq	r0, r9, r8, ror #31
    50f0:	04010000 	streq	r0, [r1], #-0
    50f4:	1a0d0004 	bne	34510c <__ccfg+0x325164>
    50f8:	08000016 	stmdaeq	r0, {r1, r2, r4}
    50fc:	00590fe9 	subseq	r0, r9, r9, ror #31
    5100:	01010000 	mrseq	r0, (UNDEF: 1)
    5104:	cf0d0003 	svcgt	0x000d0003
    5108:	08000016 	stmdaeq	r0, {r1, r2, r4}
    510c:	00590feb 	subseq	r0, r9, fp, ror #31
    5110:	02010000 	andeq	r0, r1, #0
    5114:	860d0001 	strhi	r0, [sp], -r1
    5118:	08000014 	stmdaeq	r0, {r2, r4}
    511c:	00590fec 	subseq	r0, r9, ip, ror #31
    5120:	01010000 	mrseq	r0, (UNDEF: 1)
    5124:	07000000 	streq	r0, [r0, -r0]
    5128:	04ef0801 	strbteq	r0, [pc], #2049	; 5130 <__exidx_end+0x203>
    512c:	000003a4 	andeq	r0, r0, r4, lsr #7
    5130:	001acc0d 	andseq	ip, sl, sp, lsl #24
    5134:	0ff00800 	svceq	0x00f00800
    5138:	00000059 	andeq	r0, r0, r9, asr r0
    513c:	00040401 	andeq	r0, r4, r1, lsl #8
    5140:	001c380d 	andseq	r3, ip, sp, lsl #16
    5144:	0ff10800 	svceq	0x00f10800
    5148:	00000059 	andeq	r0, r0, r9, asr r0
    514c:	00000401 	andeq	r0, r0, r1, lsl #8
    5150:	08010700 	stmdaeq	r1, {r8, r9, sl}
    5154:	03ce04f5 	biceq	r0, lr, #-184549376	; 0xf5000000
    5158:	040d0000 	streq	r0, [sp], #-0
    515c:	08000016 	stmdaeq	r0, {r1, r2, r4}
    5160:	00590ff6 	ldrsheq	r0, [r9], #-246	; 0xffffff0a
    5164:	01010000 	mrseq	r0, (UNDEF: 1)
    5168:	5e0d0007 	cdppl	0, 0, cr0, cr13, cr7, {0}
    516c:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    5170:	00590ff8 	ldrsheq	r0, [r9], #-248	; 0xffffff08
    5174:	06010000 	streq	r0, [r1], -r0
    5178:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    517c:	01a60801 			; <UNDEFINED> instruction: 0x01a60801
    5180:	00041d04 	andeq	r1, r4, r4, lsl #26
    5184:	1c940f00 	ldcne	15, cr0, [r4], {0}
    5188:	a7080000 	strge	r0, [r8, -r0]
    518c:	00590f01 	subseq	r0, r9, r1, lsl #30
    5190:	04010000 	streq	r0, [r1], #-0
    5194:	1a0f0004 	bne	3c51ac <__ccfg+0x3a5204>
    5198:	08000016 	stmdaeq	r0, {r1, r2, r4}
    519c:	590f01a8 	stmdbpl	pc, {r3, r5, r7, r8}	; <UNPREDICTABLE>
    51a0:	01000000 	mrseq	r0, (UNDEF: 0)
    51a4:	0f000301 	svceq	0x00000301
    51a8:	000016cf 	andeq	r1, r0, pc, asr #13
    51ac:	0f01aa08 	svceq	0x0001aa08
    51b0:	00000059 	andeq	r0, r0, r9, asr r0
    51b4:	00010201 	andeq	r0, r1, r1, lsl #4
    51b8:	0014860f 	andseq	r8, r4, pc, lsl #12
    51bc:	01ab0800 			; <UNDEFINED> instruction: 0x01ab0800
    51c0:	0000590f 	andeq	r5, r0, pc, lsl #18
    51c4:	00010100 	andeq	r0, r1, r0, lsl #2
    51c8:	010e0000 	mrseq	r0, (UNDEF: 14)
    51cc:	0401ae08 	streq	sl, [r1], #-3592	; 0xfffff1f8
    51d0:	0000044a 	andeq	r0, r0, sl, asr #8
    51d4:	001acc0f 	andseq	ip, sl, pc, lsl #24
    51d8:	01af0800 			; <UNDEFINED> instruction: 0x01af0800
    51dc:	0000590f 	andeq	r5, r0, pc, lsl #18
    51e0:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    51e4:	1c380f00 	ldcne	15, cr0, [r8], #-0
    51e8:	b0080000 	andlt	r0, r8, r0
    51ec:	00590f01 	subseq	r0, r9, r1, lsl #30
    51f0:	04010000 	streq	r0, [r1], #-0
    51f4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    51f8:	0000ee04 	andeq	lr, r0, r4, lsl #28
    51fc:	1b540200 	blne	1505a04 <__ccfg+0x14e5a5c>
    5200:	3d090000 	stccc	0, cr0, [r9, #-0]
    5204:	00045c2f 	andeq	r5, r4, pc, lsr #24
    5208:	1b420a00 	blne	1087a10 <__ccfg+0x1067a68>
    520c:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
    5210:	04ec1578 	strbteq	r1, [ip], #1400	; 0x578
    5214:	33080000 	movwcc	r0, #32768	; 0x8000
    5218:	09000014 	stmdbeq	r0, {r2, r4}
    521c:	006c0d79 	rsbeq	r0, ip, r9, ror sp
    5220:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5224:	0000170b 	andeq	r1, r0, fp, lsl #14
    5228:	6c0d7a09 			; <UNDEFINED> instruction: 0x6c0d7a09
    522c:	02000000 	andeq	r0, r0, #0
    5230:	0017b008 	andseq	fp, r7, r8
    5234:	137d0900 	cmnne	sp, #0, 18
    5238:	00000324 	andeq	r0, r0, r4, lsr #6
    523c:	15500804 	ldrbne	r0, [r0, #-2052]	; 0xfffff7fc
    5240:	7e090000 	cdpvc	0, 0, cr0, cr9, cr0, {0}
    5244:	0000b80c 	andeq	fp, r0, ip, lsl #16
    5248:	d2080800 	andle	r0, r8, #0, 16
    524c:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    5250:	08570686 	ldmdaeq	r7, {r1, r2, r7, r9, sl}^
    5254:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    5258:	00001c75 	andeq	r1, r0, r5, ror ip
    525c:	a1068a09 	tstge	r6, r9, lsl #20
    5260:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
    5264:	00158408 	andseq	r8, r5, r8, lsl #8
    5268:	06930900 	ldreq	r0, [r3], r0, lsl #18
    526c:	000008cb 	andeq	r0, r0, fp, asr #17
    5270:	1ac5080e 	bne	ff1472b0 <_estack+0xdf1422b0>
    5274:	94090000 	strls	r0, [r9], #-0
    5278:	0000590c 	andeq	r5, r0, ip, lsl #18
    527c:	1e080f00 	cdpne	15, 0, cr0, cr8, cr0, {0}
    5280:	09000018 	stmdbeq	r0, {r3, r4}
    5284:	007f0d95 			; <UNDEFINED> instruction: 0x007f0d95
    5288:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
    528c:	00001459 	andeq	r1, r0, r9, asr r4
    5290:	e80d9609 	stmda	sp, {r0, r3, r9, sl, ip, pc}
    5294:	14000000 	strne	r0, [r0], #-0
    5298:	19630200 	stmdbne	r3!, {r9}^
    529c:	3e090000 	cdpcc	0, 0, cr0, cr9, cr0, {0}
    52a0:	0004f82f 	andeq	pc, r4, pc, lsr #16
    52a4:	19510a00 	ldmdbne	r1, {r9, fp}^
    52a8:	09240000 	stmdbeq	r4!, {}	; <UNPREDICTABLE>
    52ac:	05d6159f 	ldrbeq	r1, [r6, #1439]	; 0x59f
    52b0:	33080000 	movwcc	r0, #32768	; 0x8000
    52b4:	09000014 	stmdbeq	r0, {r2, r4}
    52b8:	006c0da0 	rsbeq	r0, ip, r0, lsr #27
    52bc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    52c0:	0000170b 	andeq	r1, r0, fp, lsl #14
    52c4:	6c0da109 	stfvsd	f2, [sp], {9}
    52c8:	02000000 	andeq	r0, r0, #0
    52cc:	0017b008 	andseq	fp, r7, r8
    52d0:	13a40900 			; <UNDEFINED> instruction: 0x13a40900
    52d4:	00000324 	andeq	r0, r0, r4, lsr #6
    52d8:	15500804 	ldrbne	r0, [r0, #-2052]	; 0xfffff7fc
    52dc:	a5090000 	strge	r0, [r9, #-0]
    52e0:	0000b80c 	andeq	fp, r0, ip, lsl #16
    52e4:	d2080800 	andle	r0, r8, #0, 16
    52e8:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    52ec:	090506ad 	stmdbeq	r5, {r0, r2, r3, r5, r7, r9, sl}
    52f0:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    52f4:	00001c75 	andeq	r1, r0, r5, ror ip
    52f8:	4f06b109 	svcmi	0x0006b109
    52fc:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
    5300:	00158408 	andseq	r8, r5, r8, lsl #8
    5304:	06c30900 	strbeq	r0, [r3], r0, lsl #18
    5308:	00000979 	andeq	r0, r0, r9, ror r9
    530c:	18af080e 	stmiane	pc!, {r1, r2, r3, fp}	; <UNPREDICTABLE>
    5310:	cd090000 	stcgt	0, cr0, [r9, #-0]
    5314:	000a0306 	andeq	r0, sl, r6, lsl #6
    5318:	1e080f00 	cdpne	15, 0, cr0, cr8, cr0, {0}
    531c:	09000018 	stmdbeq	r0, {r3, r4}
    5320:	007f0dce 	rsbseq	r0, pc, lr, asr #27
    5324:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
    5328:	0000179a 	muleq	r0, sl, r7
    532c:	590ccf09 	stmdbpl	ip, {r0, r3, r8, r9, sl, fp, lr, pc}
    5330:	14000000 	strne	r0, [r0], #-0
    5334:	00190108 	andseq	r0, r9, r8, lsl #2
    5338:	0cd10900 			; <UNDEFINED> instruction: 0x0cd10900
    533c:	00000059 	andeq	r0, r0, r9, asr r0
    5340:	190a0815 	stmdbne	sl, {r0, r2, r4, fp}
    5344:	d2090000 	andle	r0, r9, #0
    5348:	0000590c 	andeq	r5, r0, ip, lsl #18
    534c:	a5081600 	strge	r1, [r8, #-1536]	; 0xfffffa00
    5350:	09000016 	stmdbeq	r0, {r1, r2, r4}
    5354:	0a7d06db 	beq	1f46ec8 <__ccfg+0x1f26f20>
    5358:	08170000 	ldmdaeq	r7, {}	; <UNPREDICTABLE>
    535c:	00001b9d 	muleq	r0, sp, fp
    5360:	b80cdc09 	stmdalt	ip, {r0, r3, sl, fp, ip, lr, pc}
    5364:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    5368:	0016d908 	andseq	sp, r6, r8, lsl #18
    536c:	11dd0900 	bicsne	r0, sp, r0, lsl #18
    5370:	0000044a 	andeq	r0, r0, sl, asr #8
    5374:	14b4081c 	ldrtne	r0, [r4], #2076	; 0x81c
    5378:	de090000 	cdple	0, 0, cr0, cr9, cr0, {0}
    537c:	0000e80d 	andeq	lr, r0, sp, lsl #16
    5380:	02002000 	andeq	r2, r0, #0
    5384:	000016b0 			; <UNDEFINED> instruction: 0x000016b0
    5388:	e22f4109 	eor	r4, pc, #1073741826	; 0x40000002
    538c:	0b000005 	bleq	53a8 <__exidx_end+0x47b>
    5390:	00001474 	andeq	r1, r0, r4, ror r4
    5394:	017d091c 	cmneq	sp, ip, lsl r9
    5398:	0006d115 	andeq	sp, r6, r5, lsl r1
    539c:	14330c00 	ldrtne	r0, [r3], #-3072	; 0xfffff400
    53a0:	7e090000 	cdpvc	0, 0, cr0, cr9, cr0, {0}
    53a4:	006c0d01 	rsbeq	r0, ip, r1, lsl #26
    53a8:	0c000000 	stceq	0, cr0, [r0], {-0}
    53ac:	0000170b 	andeq	r1, r0, fp, lsl #14
    53b0:	0d017f09 	stceq	15, cr7, [r1, #-36]	; 0xffffffdc
    53b4:	0000006c 	andeq	r0, r0, ip, rrx
    53b8:	17b00c02 	ldrne	r0, [r0, r2, lsl #24]!
    53bc:	82090000 	andhi	r0, r9, #0
    53c0:	03241301 			; <UNDEFINED> instruction: 0x03241301
    53c4:	0c040000 	stceq	0, cr0, [r4], {-0}
    53c8:	00001550 	andeq	r1, r0, r0, asr r5
    53cc:	0c018309 	stceq	3, cr8, [r1], {9}
    53d0:	000000b8 	strheq	r0, [r0], -r8
    53d4:	17d20c08 	ldrbne	r0, [r2, r8, lsl #24]
    53d8:	8b090000 	blhi	2453e0 <__ccfg+0x225438>
    53dc:	0ac70601 	beq	ff1c6be8 <_estack+0xdf1c1be8>
    53e0:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    53e4:	00001c75 	andeq	r1, r0, r5, ror ip
    53e8:	06018f09 	streq	r8, [r1], -r9, lsl #30
    53ec:	00000b16 	andeq	r0, r0, r6, lsl fp
    53f0:	1b850c0d 	blne	fe14842c <_estack+0xde14342c>
    53f4:	95090000 	strls	r0, [r9, #-0]
    53f8:	0b430601 	bleq	10c6c04 <__ccfg+0x10a6c5c>
    53fc:	0c0e0000 	stceq	0, cr0, [lr], {-0}
    5400:	00001a95 	muleq	r0, r5, sl
    5404:	0c019609 	stceq	6, cr9, [r1], {9}
    5408:	00000059 	andeq	r0, r0, r9, asr r0
    540c:	16480c0f 	strbne	r0, [r8], -pc, lsl #24
    5410:	a3090000 	movwge	r0, #36864	; 0x9000
    5414:	0b700601 	bleq	1c06c20 <__ccfg+0x1be6c78>
    5418:	0c100000 	ldceq	0, cr0, [r0], {-0}
    541c:	000016ef 	andeq	r1, r0, pc, ror #13
    5420:	0b01a409 	bleq	6e44c <__ccfg+0x4e4a4>
    5424:	00000025 	andeq	r0, r0, r5, lsr #32
    5428:	19880c11 	stmibne	r8, {r0, r4, sl, fp}
    542c:	a5090000 	strge	r0, [r9, #-0]
    5430:	00590c01 	subseq	r0, r9, r1, lsl #24
    5434:	0c120000 	ldceq	0, cr0, [r2], {-0}
    5438:	00001bea 	andeq	r1, r0, sl, ror #23
    543c:	0c01a709 	stceq	7, cr10, [r1], {9}
    5440:	00000059 	andeq	r0, r0, r9, asr r0
    5444:	183d0c13 	ldmdane	sp!, {r0, r1, r4, sl, fp}
    5448:	a9090000 	stmdbge	r9, {}	; <UNPREDICTABLE>
    544c:	006c0d01 	rsbeq	r0, ip, r1, lsl #26
    5450:	0c140000 	ldceq	0, cr0, [r4], {-0}
    5454:	0000164f 	andeq	r1, r0, pc, asr #12
    5458:	0601af09 	streq	sl, [r1], -r9, lsl #30
    545c:	00000be1 	andeq	r0, r0, r1, ror #23
    5460:	17640c16 			; <UNDEFINED> instruction: 0x17640c16
    5464:	b7090000 	strlt	r0, [r9, -r0]
    5468:	0c0e0601 	stceq	6, cr0, [lr], {1}
    546c:	0c170000 	ldceq	0, cr0, [r7], {-0}
    5470:	00001a24 	andeq	r1, r0, r4, lsr #20
    5474:	0c01b809 	stceq	8, cr11, [r1], {9}
    5478:	000000b8 	strheq	r0, [r0], -r8
    547c:	32020018 	andcc	r0, r2, #24
    5480:	09000019 	stmdbeq	r0, {r0, r3, r4}
    5484:	06dd3c43 	ldrbeq	r3, [sp], r3, asr #24
    5488:	130b0000 	movwne	r0, #45056	; 0xb000
    548c:	28000019 	stmdacs	r0, {r0, r3, r4}
    5490:	15021a09 	strne	r1, [r2, #-2569]	; 0xfffff5f7
    5494:	000007da 	ldrdeq	r0, [r0], -sl
    5498:	0014330c 	andseq	r3, r4, ip, lsl #6
    549c:	021b0900 	andseq	r0, fp, #0, 18
    54a0:	00006c0d 	andeq	r6, r0, sp, lsl #24
    54a4:	0b0c0000 	bleq	3054ac <__ccfg+0x2e5504>
    54a8:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    54ac:	6c0d021d 	sfmvs	f0, 4, [sp], {29}
    54b0:	02000000 	andeq	r0, r0, #0
    54b4:	0017b00c 	andseq	fp, r7, ip
    54b8:	02200900 	eoreq	r0, r0, #0, 18
    54bc:	00032413 	andeq	r2, r3, r3, lsl r4
    54c0:	500c0400 	andpl	r0, ip, r0, lsl #8
    54c4:	09000015 	stmdbeq	r0, {r0, r2, r4}
    54c8:	b80c0221 	stmdalt	ip, {r0, r5, r9}
    54cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    54d0:	0017d20c 	andseq	sp, r7, ip, lsl #4
    54d4:	02290900 	eoreq	r0, r9, #0, 18
    54d8:	000c5d06 	andeq	r5, ip, r6, lsl #26
    54dc:	750c0c00 	strvc	r0, [ip, #-3072]	; 0xfffff400
    54e0:	0900001c 	stmdbeq	r0, {r2, r3, r4}
    54e4:	ac06022d 	sfmge	f0, 4, [r6], {45}	; 0x2d
    54e8:	0d00000c 	stceq	0, cr0, [r0, #-48]	; 0xffffffd0
    54ec:	0014280c 	andseq	r2, r4, ip, lsl #16
    54f0:	02330900 	eorseq	r0, r3, #0, 18
    54f4:	000cd906 	andeq	sp, ip, r6, lsl #18
    54f8:	8f0c0e00 	svchi	0x000c0e00
    54fc:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    5500:	06060238 			; <UNDEFINED> instruction: 0x06060238
    5504:	1000000d 	andne	r0, r0, sp
    5508:	0015c30c 	andseq	ip, r5, ip, lsl #6
    550c:	02390900 	eorseq	r0, r9, #0, 18
    5510:	0000590c 	andeq	r5, r0, ip, lsl #18
    5514:	140c1400 	strne	r1, [ip], #-1024	; 0xfffffc00
    5518:	09000018 	stmdbeq	r0, {r3, r4}
    551c:	33060241 	movwcc	r0, #25153	; 0x6241
    5520:	1500000d 	strne	r0, [r0, #-13]
    5524:	0015450c 	andseq	r4, r5, ip, lsl #10
    5528:	02550900 	subseq	r0, r5, #0, 18
    552c:	000d6006 	andeq	r6, sp, r6
    5530:	e00c1600 	and	r1, ip, r0, lsl #12
    5534:	09000009 	stmdbeq	r0, {r0, r3}
    5538:	c0060268 	andgt	r0, r6, r8, ror #4
    553c:	1800000d 	stmdane	r0, {r0, r2, r3}
    5540:	001bf60c 	andseq	pc, fp, ip, lsl #12
    5544:	02690900 	rsbeq	r0, r9, #0, 18
    5548:	00006c0d 	andeq	r6, r0, sp, lsl #24
    554c:	a40c1a00 	strge	r1, [ip], #-2560	; 0xfffff600
    5550:	09000019 	stmdbeq	r0, {r0, r3, r4}
    5554:	2a0e026a 	bcs	385f04 <__ccfg+0x365f5c>
    5558:	1c000003 	stcne	0, cr0, [r0], {3}
    555c:	00145e0c 	andseq	r5, r4, ip, lsl #28
    5560:	026c0900 	rsbeq	r0, ip, #0, 18
    5564:	00006c0d 	andeq	r6, r0, sp, lsl #24
    5568:	b80c2000 	stmdalt	ip, {sp}
    556c:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    5570:	380c0270 	stmdacc	ip, {r4, r5, r6, r9}
    5574:	22000000 	andcs	r0, r0, #0
    5578:	00189e0c 	andseq	r9, r8, ip, lsl #28
    557c:	02730900 	rsbseq	r0, r3, #0, 18
    5580:	0000590c 	andeq	r5, r0, ip, lsl #18
    5584:	02002400 	andeq	r2, r0, #0, 8
    5588:	000019e4 	andeq	r1, r0, r4, ror #19
    558c:	e6304809 	ldrt	r4, [r0], -r9, lsl #16
    5590:	0b000007 	bleq	55b4 <__exidx_end+0x687>
    5594:	000019d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    5598:	0375090c 	cmneq	r5, #12, 18	; 0x30000
    559c:	00085715 	andeq	r5, r8, r5, lsl r7
    55a0:	1a8f0c00 	bne	fe3c85a8 <_estack+0xde3c35a8>
    55a4:	76090000 	strvc	r0, [r9], -r0
    55a8:	006c0d03 	rsbeq	r0, ip, r3, lsl #26
    55ac:	0c000000 	stceq	0, cr0, [r0], {-0}
    55b0:	000014d9 	ldrdeq	r1, [r0], -r9
    55b4:	0d037709 	stceq	7, cr7, [r3, #-36]	; 0xffffffdc
    55b8:	0000006c 	andeq	r0, r0, ip, rrx
    55bc:	14c60c02 	strbne	r0, [r6], #3074	; 0xc02
    55c0:	78090000 	stmdavc	r9, {}	; <UNPREDICTABLE>
    55c4:	00590c03 	subseq	r0, r9, r3, lsl #24
    55c8:	0c040000 	stceq	0, cr0, [r4], {-0}
    55cc:	0000197d 	andeq	r1, r0, sp, ror r9
    55d0:	0c037909 			; <UNDEFINED> instruction: 0x0c037909
    55d4:	00000059 	andeq	r0, r0, r9, asr r0
    55d8:	174a0c05 	strbne	r0, [sl, -r5, lsl #24]
    55dc:	7a090000 	bvc	2455e4 <__ccfg+0x22563c>
    55e0:	00590c03 	subseq	r0, r9, r3, lsl #24
    55e4:	0c060000 	stceq	0, cr0, [r6], {-0}
    55e8:	00001723 	andeq	r1, r0, r3, lsr #14
    55ec:	0b037b09 	bleq	e4218 <__ccfg+0xc4270>
    55f0:	00000025 	andeq	r0, r0, r5, lsr #32
    55f4:	151f0c07 	ldrne	r0, [pc, #-3079]	; 49f5 <patchGenfskRfe+0x54d>
    55f8:	7c090000 	stcvc	0, cr0, [r9], {-0}
    55fc:	00b80c03 	adcseq	r0, r8, r3, lsl #24
    5600:	00080000 	andeq	r0, r8, r0
    5604:	7f090107 	svcvc	0x00090107
    5608:	0008a104 	andeq	sl, r8, r4, lsl #2
    560c:	1c940d00 	ldcne	13, cr0, [r4], {0}
    5610:	80090000 	andhi	r0, r9, r0
    5614:	0000590f 	andeq	r5, r0, pc, lsl #18
    5618:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    561c:	161a0d00 	ldrne	r0, [sl], -r0, lsl #26
    5620:	81090000 	mrshi	r0, (UNDEF: 9)
    5624:	0000590f 	andeq	r5, r0, pc, lsl #18
    5628:	03010100 	movweq	r0, #4352	; 0x1100
    562c:	16cf0d00 	strbne	r0, [pc], r0, lsl #26
    5630:	83090000 	movwhi	r0, #36864	; 0x9000
    5634:	0000590f 	andeq	r5, r0, pc, lsl #18
    5638:	01020100 	mrseq	r0, (UNDEF: 18)
    563c:	14860d00 	strne	r0, [r6], #3328	; 0xd00
    5640:	84090000 	strhi	r0, [r9], #-0
    5644:	0000590f 	andeq	r5, r0, pc, lsl #18
    5648:	00010100 	andeq	r0, r1, r0, lsl #2
    564c:	01070000 	mrseq	r0, (UNDEF: 7)
    5650:	cb048709 	blgt	12727c <__ccfg+0x1072d4>
    5654:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
    5658:	00001acc 	andeq	r1, r0, ip, asr #21
    565c:	590f8809 	stmdbpl	pc, {r0, r3, fp, pc}	; <UNPREDICTABLE>
    5660:	01000000 	mrseq	r0, (UNDEF: 0)
    5664:	0d000404 	cfstrseq	mvf0, [r0, #-16]
    5668:	00001c38 	andeq	r1, r0, r8, lsr ip
    566c:	590f8909 	stmdbpl	pc, {r0, r3, r8, fp, pc}	; <UNPREDICTABLE>
    5670:	01000000 	mrseq	r0, (UNDEF: 0)
    5674:	00000004 	andeq	r0, r0, r4
    5678:	8b090107 	blhi	245a9c <__ccfg+0x225af4>
    567c:	00090504 	andeq	r0, r9, r4, lsl #10
    5680:	1b960d00 	blne	fe588a88 <_estack+0xde583a88>
    5684:	8c090000 	stchi	0, cr0, [r9], {-0}
    5688:	0000590f 	andeq	r5, r0, pc, lsl #18
    568c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    5690:	1bfe0d00 	blne	fff88a98 <_estack+0xdff83a98>
    5694:	8f090000 	svchi	0x00090000
    5698:	0000590f 	andeq	r5, r0, pc, lsl #18
    569c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    56a0:	14510d00 	ldrbne	r0, [r1], #-3328	; 0xfffff300
    56a4:	91090000 	mrsls	r0, (UNDEF: 9)
    56a8:	0000590f 	andeq	r5, r0, pc, lsl #18
    56ac:	03010100 	movweq	r0, #4352	; 0x1100
    56b0:	01070000 	mrseq	r0, (UNDEF: 7)
    56b4:	4f04a609 	svcmi	0x0004a609
    56b8:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
    56bc:	00001c94 	muleq	r0, r4, ip
    56c0:	590fa709 	stmdbpl	pc, {r0, r3, r8, r9, sl, sp, pc}	; <UNPREDICTABLE>
    56c4:	01000000 	mrseq	r0, (UNDEF: 0)
    56c8:	0d000404 	cfstrseq	mvf0, [r0, #-16]
    56cc:	0000161a 	andeq	r1, r0, sl, lsl r6
    56d0:	590fa809 	stmdbpl	pc, {r0, r3, fp, sp, pc}	; <UNPREDICTABLE>
    56d4:	01000000 	mrseq	r0, (UNDEF: 0)
    56d8:	0d000301 	stceq	3, cr0, [r0, #-4]
    56dc:	000016cf 	andeq	r1, r0, pc, asr #13
    56e0:	590faa09 	stmdbpl	pc, {r0, r3, r9, fp, sp, pc}	; <UNPREDICTABLE>
    56e4:	01000000 	mrseq	r0, (UNDEF: 0)
    56e8:	0d000102 	stfeqs	f0, [r0, #-8]
    56ec:	00001486 	andeq	r1, r0, r6, lsl #9
    56f0:	590fab09 	stmdbpl	pc, {r0, r3, r8, r9, fp, sp, pc}	; <UNPREDICTABLE>
    56f4:	01000000 	mrseq	r0, (UNDEF: 0)
    56f8:	00000001 	andeq	r0, r0, r1
    56fc:	ae090107 	adfgee	f0, f1, f7
    5700:	00097904 	andeq	r7, r9, r4, lsl #18
    5704:	1acc0d00 	bne	ff308b0c <_estack+0xdf303b0c>
    5708:	af090000 	svcge	0x00090000
    570c:	0000590f 	andeq	r5, r0, pc, lsl #18
    5710:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    5714:	1c380d00 	ldcne	13, cr0, [r8], #-0
    5718:	b0090000 	andlt	r0, r9, r0
    571c:	0000590f 	andeq	r5, r0, pc, lsl #18
    5720:	00040100 	andeq	r0, r4, r0, lsl #2
    5724:	01070000 	mrseq	r0, (UNDEF: 7)
    5728:	0304b209 	movweq	fp, #16905	; 0x4209
    572c:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
    5730:	00001b96 	muleq	r0, r6, fp
    5734:	590fb309 	stmdbpl	pc, {r0, r3, r8, r9, ip, sp, pc}	; <UNPREDICTABLE>
    5738:	01000000 	mrseq	r0, (UNDEF: 0)
    573c:	0d000701 	stceq	7, cr0, [r0, #-4]
    5740:	000014bc 			; <UNDEFINED> instruction: 0x000014bc
    5744:	590fb509 	stmdbpl	pc, {r0, r3, r8, sl, ip, sp, pc}	; <UNPREDICTABLE>
    5748:	01000000 	mrseq	r0, (UNDEF: 0)
    574c:	0d000601 	stceq	6, cr0, [r0, #-4]
    5750:	00001a50 	andeq	r1, r0, r0, asr sl
    5754:	590fb709 	stmdbpl	pc, {r0, r3, r8, r9, sl, ip, sp, pc}	; <UNPREDICTABLE>
    5758:	01000000 	mrseq	r0, (UNDEF: 0)
    575c:	0d000501 	cfstr32eq	mvfx0, [r0, #-4]
    5760:	00001bfe 	strdeq	r1, [r0], -lr
    5764:	590fb909 	stmdbpl	pc, {r0, r3, r8, fp, ip, sp, pc}	; <UNPREDICTABLE>
    5768:	01000000 	mrseq	r0, (UNDEF: 0)
    576c:	0d000401 	cfstrseq	mvf0, [r0, #-4]
    5770:	00001451 	andeq	r1, r0, r1, asr r4
    5774:	590fbb09 	stmdbpl	pc, {r0, r3, r8, r9, fp, ip, sp, pc}	; <UNPREDICTABLE>
    5778:	01000000 	mrseq	r0, (UNDEF: 0)
    577c:	0d000301 	stceq	3, cr0, [r0, #-4]
    5780:	00001ba5 	andeq	r1, r0, r5, lsr #23
    5784:	590fbd09 	stmdbpl	pc, {r0, r3, r8, sl, fp, ip, sp, pc}	; <UNPREDICTABLE>
    5788:	01000000 	mrseq	r0, (UNDEF: 0)
    578c:	0d000201 	sfmeq	f0, 4, [r0, #-4]
    5790:	000016e0 	andeq	r1, r0, r0, ror #13
    5794:	590fbf09 	stmdbpl	pc, {r0, r3, r8, r9, sl, fp, ip, sp, pc}	; <UNPREDICTABLE>
    5798:	01000000 	mrseq	r0, (UNDEF: 0)
    579c:	0d000101 	stfeqs	f0, [r0, #-4]
    57a0:	00001a5b 	andeq	r1, r0, fp, asr sl
    57a4:	590fc109 	stmdbpl	pc, {r0, r3, r8, lr, pc}	; <UNPREDICTABLE>
    57a8:	01000000 	mrseq	r0, (UNDEF: 0)
    57ac:	00000001 	andeq	r0, r0, r1
    57b0:	c4090107 	strgt	r0, [r9], #-263	; 0xfffffef9
    57b4:	000a7d04 	andeq	r7, sl, r4, lsl #26
    57b8:	17c00d00 	strbne	r0, [r0, r0, lsl #26]
    57bc:	c5090000 	strgt	r0, [r9, #-0]
    57c0:	0000590f 	andeq	r5, r0, pc, lsl #18
    57c4:	07010100 	streq	r0, [r1, -r0, lsl #2]
    57c8:	15eb0d00 	strbne	r0, [fp, #3328]!	; 0xd00
    57cc:	c6090000 	strgt	r0, [r9], -r0
    57d0:	0000590f 	andeq	r5, r0, pc, lsl #18
    57d4:	06010100 	streq	r0, [r1], -r0, lsl #2
    57d8:	17170d00 	ldrne	r0, [r7, -r0, lsl #26]
    57dc:	c8090000 	stmdagt	r9, {}	; <UNPREDICTABLE>
    57e0:	0000590f 	andeq	r5, r0, pc, lsl #18
    57e4:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    57e8:	16790d00 	ldrbtne	r0, [r9], -r0, lsl #26
    57ec:	c9090000 	stmdbgt	r9, {}	; <UNPREDICTABLE>
    57f0:	0000590f 	andeq	r5, r0, pc, lsl #18
    57f4:	03010100 	movweq	r0, #4352	; 0x1100
    57f8:	19b90d00 	ldmibne	r9!, {r8, sl, fp}
    57fc:	ca090000 	bgt	245804 <__ccfg+0x22585c>
    5800:	0000590f 	andeq	r5, r0, pc, lsl #18
    5804:	02010100 	andeq	r0, r1, #0, 2
    5808:	177e0d00 	ldrbne	r0, [lr, -r0, lsl #26]!
    580c:	cb090000 	blgt	245814 <__ccfg+0x22586c>
    5810:	0000590f 	andeq	r5, r0, pc, lsl #18
    5814:	01010100 	mrseq	r0, (UNDEF: 17)
    5818:	143d0d00 	ldrtne	r0, [sp], #-3328	; 0xfffff300
    581c:	cc090000 	stcgt	0, cr0, [r9], {-0}
    5820:	0000590f 	andeq	r5, r0, pc, lsl #18
    5824:	00010100 	andeq	r0, r1, r0, lsl #2
    5828:	01070000 	mrseq	r0, (UNDEF: 7)
    582c:	c704d409 	strgt	sp, [r4, -r9, lsl #8]
    5830:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
    5834:	00001c94 	muleq	r0, r4, ip
    5838:	590fd509 	stmdbpl	pc, {r0, r3, r8, sl, ip, lr, pc}	; <UNPREDICTABLE>
    583c:	01000000 	mrseq	r0, (UNDEF: 0)
    5840:	0d000404 	cfstrseq	mvf0, [r0, #-16]
    5844:	0000161a 	andeq	r1, r0, sl, lsl r6
    5848:	590fd609 	stmdbpl	pc, {r0, r3, r9, sl, ip, lr, pc}	; <UNPREDICTABLE>
    584c:	01000000 	mrseq	r0, (UNDEF: 0)
    5850:	0d000301 	stceq	3, cr0, [r0, #-4]
    5854:	000016cf 	andeq	r1, r0, pc, asr #13
    5858:	590fd809 	stmdbpl	pc, {r0, r3, fp, ip, lr, pc}	; <UNPREDICTABLE>
    585c:	01000000 	mrseq	r0, (UNDEF: 0)
    5860:	0d000102 	stfeqs	f0, [r0, #-8]
    5864:	00001486 	andeq	r1, r0, r6, lsl #9
    5868:	590fd909 	stmdbpl	pc, {r0, r3, r8, fp, ip, lr, pc}	; <UNPREDICTABLE>
    586c:	01000000 	mrseq	r0, (UNDEF: 0)
    5870:	00000001 	andeq	r0, r0, r1
    5874:	8409010e 	strhi	r0, [r9], #-270	; 0xfffffef2
    5878:	0b160401 	bleq	586884 <__ccfg+0x5668dc>
    587c:	940f0000 	strls	r0, [pc], #-0	; 5884 <__exidx_end+0x957>
    5880:	0900001c 	stmdbeq	r0, {r2, r3, r4}
    5884:	590f0185 	stmdbpl	pc, {r0, r2, r7, r8}	; <UNPREDICTABLE>
    5888:	01000000 	mrseq	r0, (UNDEF: 0)
    588c:	0f000404 	svceq	0x00000404
    5890:	0000161a 	andeq	r1, r0, sl, lsl r6
    5894:	0f018609 	svceq	0x00018609
    5898:	00000059 	andeq	r0, r0, r9, asr r0
    589c:	00030101 	andeq	r0, r3, r1, lsl #2
    58a0:	0016cf0f 	andseq	ip, r6, pc, lsl #30
    58a4:	01880900 	orreq	r0, r8, r0, lsl #18
    58a8:	0000590f 	andeq	r5, r0, pc, lsl #18
    58ac:	01020100 	mrseq	r0, (UNDEF: 18)
    58b0:	14860f00 	strne	r0, [r6], #3840	; 0xf00
    58b4:	89090000 	stmdbhi	r9, {}	; <UNPREDICTABLE>
    58b8:	00590f01 	subseq	r0, r9, r1, lsl #30
    58bc:	01010000 	mrseq	r0, (UNDEF: 1)
    58c0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    58c4:	018c0901 	orreq	r0, ip, r1, lsl #18
    58c8:	000b4304 	andeq	r4, fp, r4, lsl #6
    58cc:	1acc0f00 	bne	ff3094d4 <_estack+0xdf3044d4>
    58d0:	8d090000 	stchi	0, cr0, [r9, #-0]
    58d4:	00590f01 	subseq	r0, r9, r1, lsl #30
    58d8:	04010000 	streq	r0, [r1], #-0
    58dc:	380f0004 	stmdacc	pc, {r2}	; <UNPREDICTABLE>
    58e0:	0900001c 	stmdbeq	r0, {r2, r3, r4}
    58e4:	590f018e 	stmdbpl	pc, {r1, r2, r3, r7, r8}	; <UNPREDICTABLE>
    58e8:	01000000 	mrseq	r0, (UNDEF: 0)
    58ec:	00000004 	andeq	r0, r0, r4
    58f0:	9009010e 	andls	r0, r9, lr, lsl #2
    58f4:	0b700401 	bleq	1c06900 <__ccfg+0x1be6958>
    58f8:	000f0000 	andeq	r0, pc, r0
    58fc:	09000018 	stmdbeq	r0, {r3, r4}
    5900:	590f0191 	stmdbpl	pc, {r0, r4, r7, r8}	; <UNPREDICTABLE>
    5904:	01000000 	mrseq	r0, (UNDEF: 0)
    5908:	0f000701 	svceq	0x00000701
    590c:	000018ca 	andeq	r1, r0, sl, asr #17
    5910:	0f019309 	svceq	0x00019309
    5914:	00000059 	andeq	r0, r0, r9, asr r0
    5918:	00060101 	andeq	r0, r6, r1, lsl #2
    591c:	09010e00 	stmdbeq	r1, {r9, sl, fp}
    5920:	e1040197 			; <UNDEFINED> instruction: 0xe1040197
    5924:	0f00000b 	svceq	0x0000000b
    5928:	0000158c 	andeq	r1, r0, ip, lsl #11
    592c:	0f019809 	svceq	0x00019809
    5930:	00000059 	andeq	r0, r0, r9, asr r0
    5934:	00070101 	andeq	r0, r7, r1, lsl #2
    5938:	0017f70f 	andseq	pc, r7, pc, lsl #14
    593c:	01990900 	orrseq	r0, r9, r0, lsl #18
    5940:	0000590f 	andeq	r5, r0, pc, lsl #18
    5944:	06010100 	streq	r0, [r1], -r0, lsl #2
    5948:	06630f00 	strbteq	r0, [r3], -r0, lsl #30
    594c:	9a090000 	bls	245954 <__ccfg+0x2259ac>
    5950:	00590f01 	subseq	r0, r9, r1, lsl #30
    5954:	01010000 	mrseq	r0, (UNDEF: 1)
    5958:	970f0005 	strls	r0, [pc, -r5]
    595c:	09000018 	stmdbeq	r0, {r3, r4}
    5960:	590f019c 	stmdbpl	pc, {r2, r3, r4, r7, r8}	; <UNPREDICTABLE>
    5964:	01000000 	mrseq	r0, (UNDEF: 0)
    5968:	0f000401 	svceq	0x00000401
    596c:	00001b66 	andeq	r1, r0, r6, ror #22
    5970:	0f019f09 	svceq	0x00019f09
    5974:	00000059 	andeq	r0, r0, r9, asr r0
    5978:	00030101 	andeq	r0, r3, r1, lsl #2
    597c:	0018790f 	andseq	r7, r8, pc, lsl #18
    5980:	01a10900 			; <UNDEFINED> instruction: 0x01a10900
    5984:	0000590f 	andeq	r5, r0, pc, lsl #18
    5988:	02010100 	andeq	r0, r1, #0, 2
    598c:	010e0000 	mrseq	r0, (UNDEF: 14)
    5990:	0401aa09 	streq	sl, [r1], #-2569	; 0xfffff5f7
    5994:	00000c0e 	andeq	r0, r0, lr, lsl #24
    5998:	0016220f 	andseq	r2, r6, pc, lsl #4
    599c:	01ab0900 			; <UNDEFINED> instruction: 0x01ab0900
    59a0:	0000590f 	andeq	r5, r0, pc, lsl #18
    59a4:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    59a8:	16ff0f00 	ldrbtne	r0, [pc], r0, lsl #30
    59ac:	ad090000 	stcge	0, cr0, [r9, #-0]
    59b0:	00590f01 	subseq	r0, r9, r1, lsl #30
    59b4:	04010000 	streq	r0, [r1], #-0
    59b8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    59bc:	01b00901 	lslseq	r0, r1, #18
    59c0:	000c5d04 	andeq	r5, ip, r4, lsl #26
    59c4:	1c940f00 	ldcne	15, cr0, [r4], {0}
    59c8:	b1090000 	mrslt	r0, (UNDEF: 9)
    59cc:	00590f01 	subseq	r0, r9, r1, lsl #30
    59d0:	04010000 	streq	r0, [r1], #-0
    59d4:	1a0f0004 	bne	3c59ec <__ccfg+0x3a5a44>
    59d8:	09000016 	stmdbeq	r0, {r1, r2, r4}
    59dc:	590f01b2 	stmdbpl	pc, {r1, r4, r5, r7, r8}	; <UNPREDICTABLE>
    59e0:	01000000 	mrseq	r0, (UNDEF: 0)
    59e4:	0f000301 	svceq	0x00000301
    59e8:	000016cf 	andeq	r1, r0, pc, asr #13
    59ec:	0f01b409 	svceq	0x0001b409
    59f0:	00000059 	andeq	r0, r0, r9, asr r0
    59f4:	00010201 	andeq	r0, r1, r1, lsl #4
    59f8:	0014860f 	andseq	r8, r4, pc, lsl #12
    59fc:	01b50900 			; <UNDEFINED> instruction: 0x01b50900
    5a00:	0000590f 	andeq	r5, r0, pc, lsl #18
    5a04:	00010100 	andeq	r0, r1, r0, lsl #2
    5a08:	010e0000 	mrseq	r0, (UNDEF: 14)
    5a0c:	04022209 	streq	r2, [r2], #-521	; 0xfffffdf7
    5a10:	00000cac 	andeq	r0, r0, ip, lsr #25
    5a14:	001c940f 	andseq	r9, ip, pc, lsl #8
    5a18:	02230900 	eoreq	r0, r3, #0, 18
    5a1c:	0000590f 	andeq	r5, r0, pc, lsl #18
    5a20:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    5a24:	161a0f00 	ldrne	r0, [sl], -r0, lsl #30
    5a28:	24090000 	strcs	r0, [r9], #-0
    5a2c:	00590f02 	subseq	r0, r9, r2, lsl #30
    5a30:	01010000 	mrseq	r0, (UNDEF: 1)
    5a34:	cf0f0003 	svcgt	0x000f0003
    5a38:	09000016 	stmdbeq	r0, {r1, r2, r4}
    5a3c:	590f0226 	stmdbpl	pc, {r1, r2, r5, r9}	; <UNPREDICTABLE>
    5a40:	01000000 	mrseq	r0, (UNDEF: 0)
    5a44:	0f000102 	svceq	0x00000102
    5a48:	00001486 	andeq	r1, r0, r6, lsl #9
    5a4c:	0f022709 	svceq	0x00022709
    5a50:	00000059 	andeq	r0, r0, r9, asr r0
    5a54:	00000101 	andeq	r0, r0, r1, lsl #2
    5a58:	09010e00 	stmdbeq	r1, {r9, sl, fp}
    5a5c:	d904022a 	stmdble	r4, {r1, r3, r5, r9}
    5a60:	0f00000c 	svceq	0x0000000c
    5a64:	00001acc 	andeq	r1, r0, ip, asr #21
    5a68:	0f022b09 	svceq	0x00022b09
    5a6c:	00000059 	andeq	r0, r0, r9, asr r0
    5a70:	00040401 	andeq	r0, r4, r1, lsl #8
    5a74:	001c380f 	andseq	r3, ip, pc, lsl #16
    5a78:	022c0900 	eoreq	r0, ip, #0, 18
    5a7c:	0000590f 	andeq	r5, r0, pc, lsl #18
    5a80:	00040100 	andeq	r0, r4, r0, lsl #2
    5a84:	020e0000 	andeq	r0, lr, #0
    5a88:	04022e09 	streq	r2, [r2], #-3593	; 0xfffff1f7
    5a8c:	00000d06 	andeq	r0, r0, r6, lsl #26
    5a90:	00173d0f 	andseq	r3, r7, pc, lsl #26
    5a94:	022f0900 	eoreq	r0, pc, #0, 18
    5a98:	00006c10 	andeq	r6, r0, r0, lsl ip
    5a9c:	0d030200 	sfmeq	f0, 4, [r3, #-0]
    5aa0:	1c1a0f00 	ldcne	15, cr0, [sl], {-0}
    5aa4:	32090000 	andcc	r0, r9, #0
    5aa8:	006c1002 	rsbeq	r1, ip, r2
    5aac:	0d020000 	stceq	0, cr0, [r2, #-0]
    5ab0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    5ab4:	02340904 	eorseq	r0, r4, #4, 18	; 0x10000
    5ab8:	000d3304 	andeq	r3, sp, r4, lsl #6
    5abc:	188e0f00 	stmne	lr, {r8, r9, sl, fp}
    5ac0:	35090000 	strcc	r0, [r9, #-0]
    5ac4:	007f1002 	rsbseq	r1, pc, r2
    5ac8:	04040000 	streq	r0, [r4], #-0
    5acc:	940f001c 	strls	r0, [pc], #-28	; 5ad4 <__exidx_end+0xba7>
    5ad0:	09000019 	stmdbeq	r0, {r0, r3, r4}
    5ad4:	7f100237 	svcvc	0x00100237
    5ad8:	04000000 	streq	r0, [r0], #-0
    5adc:	00000315 	andeq	r0, r0, r5, lsl r3
    5ae0:	3a09010e 	bcc	245f20 <__ccfg+0x225f78>
    5ae4:	0d600402 	cfstrdeq	mvd0, [r0, #-8]!
    5ae8:	360f0000 	strcc	r0, [pc], -r0
    5aec:	0900001b 	stmdbeq	r0, {r0, r1, r3, r4}
    5af0:	590f023b 	stmdbpl	pc, {r0, r1, r3, r4, r5, r9}	; <UNPREDICTABLE>
    5af4:	01000000 	mrseq	r0, (UNDEF: 0)
    5af8:	0f000206 	svceq	0x00000206
    5afc:	000014f3 	strdeq	r1, [r0], -r3
    5b00:	0f023d09 	svceq	0x00023d09
    5b04:	00000059 	andeq	r0, r0, r9, asr r0
    5b08:	00000201 	andeq	r0, r0, r1, lsl #4
    5b0c:	09020e00 	stmdbeq	r2, {r9, sl, fp}
    5b10:	c0040242 	andgt	r0, r4, r2, asr #4
    5b14:	0f00000d 	svceq	0x0000000d
    5b18:	000016f7 	strdeq	r1, [r0], -r7
    5b1c:	10024309 	andne	r4, r2, r9, lsl #6
    5b20:	0000006c 	andeq	r0, r0, ip, rrx
    5b24:	000a0602 	andeq	r0, sl, r2, lsl #12
    5b28:	0017710f 	andseq	r7, r7, pc, lsl #2
    5b2c:	02440900 	subeq	r0, r4, #0, 18
    5b30:	00006c10 	andeq	r6, r0, r0, lsl ip
    5b34:	09010200 	stmdbeq	r1, {r9}
    5b38:	18e30f00 	stmiane	r3!, {r8, r9, sl, fp}^
    5b3c:	46090000 	strmi	r0, [r9], -r0
    5b40:	006c1002 	rsbeq	r1, ip, r2
    5b44:	01020000 	mrseq	r0, (UNDEF: 2)
    5b48:	d10f0008 	tstle	pc, r8
    5b4c:	09000014 	stmdbeq	r0, {r2, r4}
    5b50:	6c100248 	lfmvs	f0, 4, [r0], {72}	; 0x48
    5b54:	02000000 	andeq	r0, r0, #0
    5b58:	0f000404 	svceq	0x00000404
    5b5c:	00001469 	andeq	r1, r0, r9, ror #8
    5b60:	10024d09 	andne	r4, r2, r9, lsl #26
    5b64:	0000006c 	andeq	r0, r0, ip, rrx
    5b68:	00000302 	andeq	r0, r0, r2, lsl #6
    5b6c:	09020e00 	stmdbeq	r2, {r9, sl, fp}
    5b70:	0f040256 	svceq	0x00040256
    5b74:	0f00000e 	svceq	0x0000000e
    5b78:	000016c2 	andeq	r1, r0, r2, asr #13
    5b7c:	10025709 	andne	r5, r2, r9, lsl #14
    5b80:	0000006c 	andeq	r0, r0, ip, rrx
    5b84:	000d0302 	andeq	r0, sp, r2, lsl #6
    5b88:	00165f0f 	andseq	r5, r6, pc, lsl #30
    5b8c:	025d0900 	subseq	r0, sp, #0, 18
    5b90:	00006c10 	andeq	r6, r0, r0, lsl ip
    5b94:	0c010200 	sfmeq	f0, 4, [r1], {-0}
    5b98:	160c0f00 	strne	r0, [ip], -r0, lsl #30
    5b9c:	5f090000 	svcpl	0x00090000
    5ba0:	006c1002 	rsbeq	r1, ip, r2
    5ba4:	06020000 	streq	r0, [r2], -r0
    5ba8:	b60f0006 	strlt	r0, [pc], -r6
    5bac:	09000018 	stmdbeq	r0, {r3, r4}
    5bb0:	6c100266 	lfmvs	f0, 4, [r0], {102}	; 0x66
    5bb4:	02000000 	andeq	r0, r0, #0
    5bb8:	00000501 	andeq	r0, r0, r1, lsl #10
    5bbc:	0014fd02 	andseq	pc, r4, r2, lsl #26
    5bc0:	343c0a00 	ldrtcc	r0, [ip], #-2560	; 0xfffff600
    5bc4:	00000e1b 	andeq	r0, r0, fp, lsl lr
    5bc8:	001a640a 	andseq	r6, sl, sl, lsl #8
    5bcc:	5e0a0c00 	cdppl	12, 0, cr0, cr10, cr0, {0}
    5bd0:	000e6a15 	andeq	r6, lr, r5, lsl sl
    5bd4:	14980800 	ldrne	r0, [r8], #2048	; 0x800
    5bd8:	5f0a0000 	svcpl	0x000a0000
    5bdc:	0000e80d 	andeq	lr, r0, sp, lsl #16
    5be0:	0b080000 	bleq	205be8 <__ccfg+0x1e5c40>
    5be4:	0a000017 	beq	5c48 <__exidx_end+0xd1b>
    5be8:	00590c60 	subseq	r0, r9, r0, ror #24
    5bec:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    5bf0:	000009e0 	andeq	r0, r0, r0, ror #19
    5bf4:	6a066e0a 	bvs	1a1424 <__ccfg+0x18147c>
    5bf8:	0500000e 	streq	r0, [r0, #-14]
    5bfc:	000e3e08 	andeq	r3, lr, r8, lsl #28
    5c00:	0d6f0a00 	vstmdbeq	pc!, {s1-s0}
    5c04:	0000006c 	andeq	r0, r0, ip, rrx
    5c08:	0ef10806 	cdpeq	8, 15, cr0, cr1, cr6, {0}
    5c0c:	710a0000 	mrsvc	r0, (UNDEF: 10)
    5c10:	0000590c 	andeq	r5, r0, ip, lsl #18
    5c14:	07000800 	streq	r0, [r0, -r0, lsl #16]
    5c18:	04610a01 	strbteq	r0, [r1], #-2561	; 0xfffff5ff
    5c1c:	00000ea4 	andeq	r0, r0, r4, lsr #29
    5c20:	003a080d 	eorseq	r0, sl, sp, lsl #16
    5c24:	0f620a00 	svceq	0x00620a00
    5c28:	00000059 	andeq	r0, r0, r9, asr r0
    5c2c:	00060201 	andeq	r0, r6, r1, lsl #4
    5c30:	001a2e0d 	andseq	r2, sl, sp, lsl #28
    5c34:	0f670a00 	svceq	0x00670a00
    5c38:	00000059 	andeq	r0, r0, r9, asr r0
    5c3c:	00040201 	andeq	r0, r4, r1, lsl #4
    5c40:	0015290d 	andseq	r2, r5, sp, lsl #18
    5c44:	0f6c0a00 	svceq	0x006c0a00
    5c48:	00000059 	andeq	r0, r0, r9, asr r0
    5c4c:	00000401 	andeq	r0, r0, r1, lsl #8
    5c50:	02100700 	andseq	r0, r0, #0, 14
    5c54:	0ee20948 	vfmseq.f16	s1, s4, s16	; <UNPREDICTABLE>
    5c58:	85080000 	strhi	r0, [r8, #-0]
    5c5c:	02000016 	andeq	r0, r0, #22
    5c60:	007f0d49 	rsbseq	r0, pc, r9, asr #26
    5c64:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5c68:	0000172c 	andeq	r1, r0, ip, lsr #14
    5c6c:	7f0d4a02 	svcvc	0x000d4a02
    5c70:	04000000 	streq	r0, [r0], #-0
    5c74:	001a0e08 	andseq	r0, sl, r8, lsl #28
    5c78:	0d4b0200 	sfmeq	f0, 2, [fp, #-0]
    5c7c:	0000007f 	andeq	r0, r0, pc, ror r0
    5c80:	1b6d0808 	blne	1b47ca8 <__ccfg+0x1b27d00>
    5c84:	4c020000 	stcmi	0, cr0, [r2], {-0}
    5c88:	00007f0d 	andeq	r7, r0, sp, lsl #30
    5c8c:	02000c00 	andeq	r0, r0, #0, 24
    5c90:	0000148f 	andeq	r1, r0, pc, lsl #9
    5c94:	a4034d02 	strge	r4, [r3], #-3330	; 0xfffff2fe
    5c98:	1000000e 	andne	r0, r0, lr
    5c9c:	0000008b 	andeq	r0, r0, fp, lsl #1
    5ca0:	00000efe 	strdeq	r0, [r0], -lr
    5ca4:	0000aa11 	andeq	sl, r0, r1, lsl sl
    5ca8:	0400a200 	streq	sl, [r0], #-512	; 0xfffffe00
    5cac:	00000eee 	andeq	r0, r0, lr, ror #29
    5cb0:	0017df12 	andseq	sp, r7, r2, lsl pc
    5cb4:	10490400 	subne	r0, r9, r0, lsl #8
    5cb8:	00000efe 	strdeq	r0, [r0], -lr
    5cbc:	4b5c0305 	blmi	17068d8 <__ccfg+0x16e6930>
    5cc0:	8b100000 	blhi	405cc8 <__ccfg+0x3e5d20>
    5cc4:	26000000 	strcs	r0, [r0], -r0
    5cc8:	1300000f 	movwne	r0, #15
    5ccc:	000000aa 	andeq	r0, r0, sl, lsr #1
    5cd0:	040001ac 	streq	r0, [r0], #-428	; 0xfffffe54
    5cd4:	00000f15 	andeq	r0, r0, r5, lsl pc
    5cd8:	00182e12 	andseq	r2, r8, r2, lsl lr
    5cdc:	103a0500 	eorsne	r0, sl, r0, lsl #10
    5ce0:	00000f26 	andeq	r0, r0, r6, lsr #30
    5ce4:	44a80305 	strtmi	r0, [r8], #773	; 0x305
    5ce8:	85020000 	strhi	r0, [r2, #-0]
    5cec:	0b00001d 	bleq	5d68 <__exidx_end+0xe3b>
    5cf0:	006c1227 	rsbeq	r1, ip, r7, lsr #4
    5cf4:	3d040000 	stccc	0, cr0, [r4, #-0]
    5cf8:	0200000f 	andeq	r0, r0, #15
    5cfc:	00001317 	andeq	r1, r0, r7, lsl r3
    5d00:	59122b0b 	ldmdbpl	r2, {r0, r1, r3, r8, r9, fp, sp}
    5d04:	02000000 	andeq	r0, r0, #0
    5d08:	00001d71 	andeq	r1, r0, r1, ror sp
    5d0c:	7f122c0b 	svcvc	0x00122c0b
    5d10:	02000000 	andeq	r0, r0, #0
    5d14:	0000021e 	andeq	r0, r0, lr, lsl r2
    5d18:	7f122d0b 	svcvc	0x00122d0b
    5d1c:	02000000 	andeq	r0, r0, #0
    5d20:	00000251 	andeq	r0, r0, r1, asr r2
    5d24:	7e102e0b 	cdpvc	14, 1, cr2, cr0, cr11, {0}
    5d28:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    5d2c:	000f3d04 	andeq	r3, pc, r4, lsl #26
    5d30:	0b080700 	bleq	207938 <__ccfg+0x1e7990>
    5d34:	10120932 	andsne	r0, r2, r2, lsr r9
    5d38:	970d0000 	strls	r0, [sp, -r0]
    5d3c:	0b000006 	bleq	5d5c <__exidx_end+0xe2f>
    5d40:	0f4e0734 	svceq	0x004e0734
    5d44:	01010000 	mrseq	r0, (UNDEF: 1)
    5d48:	c50d0007 	strgt	r0, [sp, #-7]
    5d4c:	0b000004 	bleq	5d64 <__exidx_end+0xe37>
    5d50:	0f4e0335 	svceq	0x004e0335
    5d54:	01010000 	mrseq	r0, (UNDEF: 1)
    5d58:	4f0d0006 	svcmi	0x000d0006
    5d5c:	0b000006 	bleq	5d7c <__exidx_end+0xe4f>
    5d60:	0f4e0336 	svceq	0x004e0336
    5d64:	01010000 	mrseq	r0, (UNDEF: 1)
    5d68:	450d0005 	strmi	r0, [sp, #-5]
    5d6c:	0b000008 	bleq	5d94 <__exidx_end+0xe67>
    5d70:	0f4e0337 	svceq	0x004e0337
    5d74:	01010000 	mrseq	r0, (UNDEF: 1)
    5d78:	2d0d0004 	stccs	0, cr0, [sp, #-16]
    5d7c:	0b000008 	bleq	5da4 <__exidx_end+0xe77>
    5d80:	0f4e0338 	svceq	0x004e0338
    5d84:	04010000 	streq	r0, [r1], #-0
    5d88:	0f080000 	svceq	0x00080000
    5d8c:	0b000008 	bleq	5db4 <__exidx_end+0xe87>
    5d90:	0f4e073a 	svceq	0x004e073a
    5d94:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    5d98:	00000409 	andeq	r0, r0, r9, lsl #8
    5d9c:	4e033c0b 	cdpmi	12, 0, cr3, cr3, cr11, {0}
    5da0:	0200000f 	andeq	r0, r0, #15
    5da4:	00046608 	andeq	r6, r4, r8, lsl #12
    5da8:	033d0b00 	teqeq	sp, #0, 22
    5dac:	00000f4e 	andeq	r0, r0, lr, asr #30
    5db0:	05e30803 	strbeq	r0, [r3, #2051]!	; 0x803
    5db4:	3f0b0000 	svccc	0x000b0000
    5db8:	000f5a08 	andeq	r5, pc, r8, lsl #20
    5dbc:	02000400 	andeq	r0, r0, #0, 8
    5dc0:	000008cf 	andeq	r0, r0, pc, asr #17
    5dc4:	8403410b 	strhi	r4, [r3], #-267	; 0xfffffef5
    5dc8:	0500000f 	streq	r0, [r0, #-15]
    5dcc:	00001012 	andeq	r1, r0, r2, lsl r0
    5dd0:	00068b14 	andeq	r8, r6, r4, lsl fp
    5dd4:	1a430b00 	bne	10c89dc <__ccfg+0x10a8a34>
    5dd8:	0000101e 	andeq	r1, r0, lr, lsl r0
    5ddc:	8c150101 	ldfhis	f0, [r5], {1}
    5de0:	0c000003 	stceq	0, cr0, [r0], {3}
    5de4:	3e10016e 	mufccsz	f0, f0, #0.5
    5de8:	09000010 	stmdbeq	r0, {r4}
    5dec:	00104404 	andseq	r4, r0, r4, lsl #8
    5df0:	50011600 	andpl	r1, r1, r0, lsl #12
    5df4:	17000010 	smladne	r0, r0, r0, r0
    5df8:	00000f3d 	andeq	r0, r0, sp, lsr pc
    5dfc:	0c080e00 	stceq	14, cr0, [r8], {-0}
    5e00:	77090303 	strvc	r0, [r9, -r3, lsl #6]
    5e04:	0c000010 	stceq	0, cr0, [r0], {16}
    5e08:	000031b3 			; <UNDEFINED> instruction: 0x000031b3
    5e0c:	0703070c 	streq	r0, [r3, -ip, lsl #14]
    5e10:	00000f3d 	andeq	r0, r0, sp, lsr pc
    5e14:	047c0c00 	ldrbteq	r0, [ip], #-3072	; 0xfffff400
    5e18:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    5e1c:	0f660803 	svceq	0x00660803
    5e20:	00040000 	andeq	r0, r4, r0
    5e24:	0002d815 	andeq	sp, r2, r5, lsl r8
    5e28:	03090c00 	movweq	r0, #39936	; 0x9c00
    5e2c:	00105003 	andseq	r5, r0, r3
    5e30:	03a10b00 			; <UNDEFINED> instruction: 0x03a10b00
    5e34:	0c300000 	ldceq	0, cr0, [r0], #-0
    5e38:	e708030b 	str	r0, [r8, -fp, lsl #6]
    5e3c:	0c000010 	stceq	0, cr0, [r0], {16}
    5e40:	00001444 	andeq	r1, r0, r4, asr #8
    5e44:	0803140c 	stmdaeq	r3, {r2, r3, sl, ip}
    5e48:	00000f3d 	andeq	r0, r0, sp, lsr pc
    5e4c:	02290c00 	eoreq	r0, r9, #0, 24
    5e50:	150c0000 	strne	r0, [ip, #-0]
    5e54:	0f3d0803 	svceq	0x003d0803
    5e58:	0c020000 	stceq	0, cr0, [r2], {-0}
    5e5c:	0000038f 	andeq	r0, r0, pc, lsl #7
    5e60:	0b03160c 	bleq	cb698 <__ccfg+0xab6f0>
    5e64:	00001031 	andeq	r1, r0, r1, lsr r0
    5e68:	0ef10c04 	cdpeq	12, 15, cr0, cr1, cr4, {0}
    5e6c:	170c0000 	strne	r0, [ip, -r0]
    5e70:	0f660903 	svceq	0x00660903
    5e74:	0c080000 	stceq	0, cr0, [r8], {-0}
    5e78:	0000032a 	andeq	r0, r0, sl, lsr #6
    5e7c:	0f03180c 	svceq	0x0003180c
    5e80:	000010e7 	andeq	r1, r0, r7, ror #1
    5e84:	02240c0c 	eoreq	r0, r4, #12, 24	; 0xc00
    5e88:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
    5e8c:	10f71503 	rscsne	r1, r7, r3, lsl #10
    5e90:	002c0000 	eoreq	r0, ip, r0
    5e94:	00107710 	andseq	r7, r0, r0, lsl r7
    5e98:	0010f700 	andseq	pc, r0, r0, lsl #14
    5e9c:	00aa1100 	adceq	r1, sl, r0, lsl #2
    5ea0:	00030000 	andeq	r0, r3, r0
    5ea4:	10840409 	addne	r0, r4, r9, lsl #8
    5ea8:	ac150000 	ldcge	0, cr0, [r5], {-0}
    5eac:	0c000003 	stceq	0, cr0, [r0], {3}
    5eb0:	841b031c 	ldrhi	r0, [fp], #-796	; 0xfffffce4
    5eb4:	14000010 	strne	r0, [r0], #-16
    5eb8:	0000155a 	andeq	r1, r0, sl, asr r5
    5ebc:	d127390d 			; <UNDEFINED> instruction: 0xd127390d
    5ec0:	01000006 	tsteq	r0, r6
    5ec4:	180b1401 	stmdane	fp, {r0, sl, ip}
    5ec8:	3a0d0000 	bcc	345ed0 <__ccfg+0x325f28>
    5ecc:	00016215 	andeq	r6, r1, r5, lsl r2
    5ed0:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    5ed4:	00001c51 	andeq	r1, r0, r1, asr ip
    5ed8:	501a3b0d 	andspl	r3, sl, sp, lsl #22
    5edc:	01000004 	tsteq	r0, r4
    5ee0:	1ad11401 	bne	ff44aeec <_estack+0xdf445eec>
    5ee4:	3c0d0000 	stccc	0, cr0, [sp], {-0}
    5ee8:	0004ec1a 	andeq	lr, r4, sl, lsl ip
    5eec:	12010100 	andne	r0, r1, #0, 2
    5ef0:	00001be3 	andeq	r1, r0, r3, ror #23
    5ef4:	a30c2401 	movwge	r2, #50177	; 0xc401
    5ef8:	05000000 	streq	r0, [r0, #-0]
    5efc:	0001d803 	andeq	sp, r1, r3, lsl #16
    5f00:	14a31220 	strtne	r1, [r3], #544	; 0x220
    5f04:	26010000 	strcs	r0, [r1], -r0
    5f08:	000f4e0d 	andeq	r4, pc, sp, lsl #28
    5f0c:	e4030500 	str	r0, [r3], #-1280	; 0xfffffb00
    5f10:	12200001 	eorne	r0, r0, #1
    5f14:	00000b7c 	andeq	r0, r0, ip, ror fp
    5f18:	4e032701 	cdpmi	7, 0, cr2, cr3, cr1, {0}
    5f1c:	0500000f 	streq	r0, [r0, #-15]
    5f20:	0001d403 	andeq	sp, r1, r3, lsl #8
    5f24:	18db1220 	ldmne	fp, {r5, r9, ip}^
    5f28:	2a010000 	bcs	45f30 <__ccfg+0x25f88>
    5f2c:	000f4e0d 	andeq	r4, pc, sp, lsl #28
    5f30:	06030500 	streq	r0, [r3], -r0, lsl #10
    5f34:	12200002 	eorne	r0, r0, #2
    5f38:	000018d5 	ldrdeq	r1, [r0], -r5
    5f3c:	4e0d4301 	cdpmi	3, 0, cr4, cr13, cr1, {0}
    5f40:	0500000f 	streq	r0, [r0, #-15]
    5f44:	00003603 	andeq	r3, r0, r3, lsl #12
    5f48:	15d91220 	ldrbne	r1, [r9, #544]	; 0x220
    5f4c:	47010000 	strmi	r0, [r1, -r0]
    5f50:	000f4e0d 	andeq	r4, pc, sp, lsl #28
    5f54:	cc030500 	cfstr32gt	mvfx0, [r3], {-0}
    5f58:	10200001 	eorne	r0, r0, r1
    5f5c:	00000f49 	andeq	r0, r0, r9, asr #30
    5f60:	000011be 			; <UNDEFINED> instruction: 0x000011be
    5f64:	0000aa11 	andeq	sl, r0, r1, lsl sl
    5f68:	04000700 	streq	r0, [r0], #-1792	; 0xfffff900
    5f6c:	000011ae 	andeq	r1, r0, lr, lsr #3
    5f70:	00197512 	andseq	r7, r9, r2, lsl r5
    5f74:	134e0100 	movtne	r0, #57600	; 0xe100
    5f78:	000011be 			; <UNDEFINED> instruction: 0x000011be
    5f7c:	44960305 	ldrmi	r0, [r6], #773	; 0x305
    5f80:	4a120000 	bmi	485f88 <__ccfg+0x465fe0>
    5f84:	0100001c 	tsteq	r0, ip, lsl r0
    5f88:	0f3d0d52 	svceq	0x003d0d52
    5f8c:	03050000 	movweq	r0, #20480	; 0x5000
    5f90:	200001dc 	ldrdcs	r0, [r0], -ip
    5f94:	0018a812 	andseq	sl, r8, r2, lsl r8
    5f98:	03530100 	cmpeq	r3, #0, 2
    5f9c:	00000f3d 	andeq	r0, r0, sp, lsr pc
    5fa0:	02040305 	andeq	r0, r4, #335544320	; 0x14000000
    5fa4:	79122000 	ldmdbvc	r2, {sp}
    5fa8:	01000015 	tsteq	r0, r5, lsl r0
    5fac:	0f3d0354 	svceq	0x003d0354
    5fb0:	03050000 	movweq	r0, #20480	; 0x5000
    5fb4:	200001ca 	andcs	r0, r0, sl, asr #3
    5fb8:	0014e012 	andseq	lr, r4, r2, lsl r0
    5fbc:	03550100 	cmpeq	r5, #0, 2
    5fc0:	00000f3d 	andeq	r0, r0, sp, lsr pc
    5fc4:	00340305 	eorseq	r0, r4, r5, lsl #6
    5fc8:	04072000 	streq	r2, [r7], #-0
    5fcc:	3f095901 	svccc	0x00095901
    5fd0:	18000012 	stmdane	r0, {r1, r4}
    5fd4:	01007370 	tsteq	r0, r0, ror r3
    5fd8:	0f3d085a 	svceq	0x003d085a
    5fdc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    5fe0:	01007772 	tsteq	r0, r2, ror r7
    5fe4:	0f3d045b 	svceq	0x003d045b
    5fe8:	00020000 	andeq	r0, r2, r0
    5fec:	001c2402 	andseq	r2, ip, r2, lsl #8
    5ff0:	035c0100 	cmpeq	ip, #0, 2
    5ff4:	0000121d 	andeq	r1, r0, sp, lsl r2
    5ff8:	00123f04 	andseq	r3, r2, r4, lsl #30
    5ffc:	124b1000 	subne	r1, fp, #0
    6000:	12600000 	rsbne	r0, r0, #0
    6004:	aa110000 	bge	44600c <__ccfg+0x426064>
    6008:	02000000 	andeq	r0, r0, #0
    600c:	12500400 	subsne	r0, r0, #0, 8
    6010:	fc120000 	ldc2	0, cr0, [r2], {-0}
    6014:	01000015 	tsteq	r0, r5, lsl r0
    6018:	1260185e 	rsbne	r1, r0, #6160384	; 0x5e0000
    601c:	03050000 	movweq	r0, #20480	; 0x5000
    6020:	00004de8 	andeq	r4, r0, r8, ror #27
    6024:	00199d12 	andseq	r9, r9, r2, lsl sp
    6028:	1b660100 	blne	1986430 <__ccfg+0x1966488>
    602c:	000007da 	ldrdeq	r0, [r0], -sl
    6030:	01f80305 	mvnseq	r0, r5, lsl #6
    6034:	2e122000 	cdpcs	0, 1, cr2, cr2, cr0, {0}
    6038:	0100001b 	tsteq	r0, fp, lsl r0
    603c:	0f660e69 	svceq	0x00660e69
    6040:	03050000 	movweq	r0, #20480	; 0x5000
    6044:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    6048:	00157212 	andseq	r7, r5, r2, lsl r2
    604c:	17690100 	strbne	r0, [r9, -r0, lsl #2]!
    6050:	00000f66 	andeq	r0, r0, r6, ror #30
    6054:	01e00305 	mvneq	r0, r5, lsl #6
    6058:	8e122000 	cdphi	0, 1, cr2, cr2, cr0, {0}
    605c:	0100001b 	tsteq	r0, fp, lsl r0
    6060:	02252178 	eoreq	r2, r5, #120, 2
    6064:	03050000 	movweq	r0, #20480	; 0x5000
    6068:	20000020 	andcs	r0, r0, r0, lsr #32
    606c:	0016e812 	andseq	lr, r6, r2, lsl r8
    6070:	1a830100 	bne	fe0c6478 <_estack+0xde0c1478>
    6074:	000005d6 	ldrdeq	r0, [r0], -r6
    6078:	00040305 	andeq	r0, r4, r5, lsl #6
    607c:	f7122000 			; <UNDEFINED> instruction: 0xf7122000
    6080:	01000019 	tsteq	r0, r9, lsl r0
    6084:	0ee211c1 	cdpeq	1, 14, cr1, cr2, cr1, {6}
    6088:	03050000 	movweq	r0, #20480	; 0x5000
    608c:	200001e8 	andcs	r0, r0, r8, ror #3
    6090:	001a1a19 	andseq	r1, sl, r9, lsl sl
    6094:	020a0100 	andeq	r0, sl, #0, 2
    6098:	0000a30c 	andeq	sl, r0, ip, lsl #6
    609c:	3e011a00 	vmlacc.f32	s2, s2, s0
    60a0:	0100001c 	tsteq	r0, ip, lsl r0
    60a4:	010603d7 	ldrdeq	r0, [r6, -r7]
    60a8:	00002654 	andeq	r2, r0, r4, asr r6
    60ac:	000027c8 	andeq	r2, r0, r8, asr #15
    60b0:	13799c01 	cmnne	r9, #256	; 0x100
    60b4:	701b0000 	andsvc	r0, fp, r0
    60b8:	01007968 	tsteq	r0, r8, ror #18
    60bc:	a31703d7 	tstge	r7, #1543503875	; 0x5c000003
    60c0:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    60c4:	1b000024 	blne	615c <__exidx_end+0x122f>
    60c8:	0073626d 	rsbseq	r6, r3, sp, ror #4
    60cc:	2003d701 	andcs	sp, r3, r1, lsl #14
    60d0:	000000a3 	andeq	r0, r0, r3, lsr #1
    60d4:	000024a2 	andeq	r2, r0, r2, lsr #9
    60d8:	0014091c 	andseq	r0, r4, ip, lsl r9
    60dc:	00267800 	eoreq	r7, r6, r0, lsl #16
    60e0:	000bf800 	andeq	pc, fp, r0, lsl #16
    60e4:	03f00100 	mvnseq	r0, #0, 2
    60e8:	00136702 	andseq	r6, r3, r2, lsl #14
    60ec:	0bf81d00 	bleq	ffe0d4f4 <_estack+0xdfe084f4>
    60f0:	171e0000 	ldrne	r0, [lr, -r0]
    60f4:	1f000014 	svcne	0x00000014
    60f8:	00001422 	andeq	r1, r0, r2, lsr #8
    60fc:	000024cb 	andeq	r2, r0, fp, asr #9
    6100:	00142e1f 	andseq	r2, r4, pc, lsl lr
    6104:	0024ea00 	eoreq	lr, r4, r0, lsl #20
    6108:	143a1f00 	ldrtne	r1, [sl], #-3840	; 0xfffff100
    610c:	25130000 	ldrcs	r0, [r3, #-0]
    6110:	00000000 	andeq	r0, r0, r0
    6114:	00157820 	andseq	r7, r5, r0, lsr #16
    6118:	00272e00 	eoreq	r2, r7, r0, lsl #28
    611c:	000c3800 	andeq	r3, ip, r0, lsl #16
    6120:	04140100 	ldreq	r0, [r4], #-256	; 0xffffff00
    6124:	27210002 	strcs	r0, [r1, -r2]!
    6128:	01000018 	tsteq	r0, r8, lsl r0
    612c:	010c034a 	tsteq	ip, sl, asr #6
    6130:	000000a3 	andeq	r0, r0, r3, lsr #1
    6134:	00001f08 	andeq	r1, r0, r8, lsl #30
    6138:	00002098 	muleq	r0, r8, r0
    613c:	14099c01 	strne	r9, [r9], #-3073	; 0xfffff3ff
    6140:	6f1b0000 	svcvs	0x001b0000
    6144:	01007470 	tsteq	r0, r0, ror r4
    6148:	a318034a 	tstge	r8, #671088641	; 0x28000001
    614c:	47000000 	strmi	r0, [r0, -r0]
    6150:	1b000025 	blne	61ec <__exidx_end+0x12bf>
    6154:	006c6176 	rsbeq	r6, ip, r6, ror r1
    6158:	25034a01 	strcs	r4, [r3, #-2561]	; 0xfffff5ff
    615c:	00000f72 	andeq	r0, r0, r2, ror pc
    6160:	000025d3 	ldrdeq	r2, [r0], -r3
    6164:	74657222 	strbtvc	r7, [r5], #-546	; 0xfffffdde
    6168:	034c0100 	movteq	r0, #49408	; 0xc100
    616c:	0000a306 	andeq	sl, r0, r6, lsl #6
    6170:	00268b00 	eoreq	r8, r6, r0, lsl #22
    6174:	17122300 	ldrne	r2, [r2, -r0, lsl #6]
    6178:	cf010000 	svcgt	0x00010000
    617c:	1f900103 	svcne	0x00900103
    6180:	c3230000 			; <UNDEFINED> instruction: 0xc3230000
    6184:	01000018 	tsteq	r0, r8, lsl r0
    6188:	4a010358 	bmi	46ef0 <__ccfg+0x26f48>
    618c:	2300001f 	movwcs	r0, #31
    6190:	00001745 	andeq	r1, r0, r5, asr #14
    6194:	0103cd01 	tsteq	r3, r1, lsl #26
    6198:	00001f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    619c:	001f4a24 	andseq	r4, pc, r4, lsr #20
    61a0:	001f7400 	andseq	r7, pc, r0, lsl #8
    61a4:	006a2200 	rsbeq	r2, sl, r0, lsl #4
    61a8:	04035901 	streq	r5, [r3], #-2305	; 0xfffff6ff
    61ac:	000000a3 	andeq	r0, r0, r3, lsr #1
    61b0:	000026d5 	ldrdeq	r2, [r0], -r5
    61b4:	a4250000 	strtge	r0, [r5], #-0
    61b8:	01000017 	tsteq	r0, r7, lsl r0
    61bc:	010d0307 	tsteq	sp, r7, lsl #6
    61c0:	00001447 	andeq	r1, r0, r7, asr #8
    61c4:	01006926 	tsteq	r0, r6, lsr #18
    61c8:	a306030b 	movwge	r0, #25355	; 0x630b
    61cc:	26000000 	strcs	r0, [r0], -r0
    61d0:	01006572 	tsteq	r0, r2, ror r5
    61d4:	471a030c 	ldrmi	r0, [sl, -ip, lsl #6]
    61d8:	26000014 			; <UNDEFINED> instruction: 0x26000014
    61dc:	01006164 	tsteq	r0, r4, ror #2
    61e0:	471f030c 	ldrmi	r0, [pc, -ip, lsl #6]
    61e4:	26000014 			; <UNDEFINED> instruction: 0x26000014
    61e8:	01006264 	tsteq	r0, r4, ror #4
    61ec:	4724030c 	strmi	r0, [r4, -ip, lsl #6]!
    61f0:	00000014 	andeq	r0, r0, r4, lsl r0
    61f4:	0e0f0409 	cdpeq	4, 0, cr0, cr15, cr9, {0}
    61f8:	011a0000 	tsteq	sl, r0
    61fc:	0000159b 	muleq	r0, fp, r5
    6200:	01020d01 	tsteq	r2, r1, lsl #26
    6204:	00240801 	eoreq	r0, r4, r1, lsl #16
    6208:	0025e800 	eoreq	lr, r5, r0, lsl #16
    620c:	a59c0100 	ldrge	r0, [ip, #256]	; 0x100
    6210:	27000014 	smladcs	r0, r4, r0, r0
    6214:	00000073 	andeq	r0, r0, r3, ror r0
    6218:	01020d01 	tsteq	r2, r1, lsl #26
    621c:	00000f3d 	andeq	r0, r0, sp, lsr pc
    6220:	000026e8 	andeq	r2, r0, r8, ror #13
    6224:	0014aa23 	andseq	sl, r4, r3, lsr #20
    6228:	02160100 	andseq	r0, r6, #0, 2
    622c:	00241c01 	eoreq	r1, r4, r1, lsl #24
    6230:	159f2800 	ldrne	r2, [pc, #2048]	; 6a38 <__exidx_end+0x1b0b>
    6234:	24800000 	strcs	r0, [r0], #0
    6238:	24a20000 	strtcs	r0, [r2], #0
    623c:	26010000 	strcs	r0, [r1], -r0
    6240:	ad1f0402 	cfldrsge	mvf0, [pc, #-8]	; 6240 <__exidx_end+0x1313>
    6244:	11000015 	tstne	r0, r5, lsl r0
    6248:	1e000027 	cdpne	0, 0, cr0, cr0, cr7, {1}
    624c:	000015b9 			; <UNDEFINED> instruction: 0x000015b9
    6250:	011a0000 	tsteq	sl, r0
    6254:	00001ade 	ldrdeq	r1, [r0], -lr
    6258:	0601ec01 	streq	lr, [r1], -r1, lsl #24
    625c:	0025e801 	eoreq	lr, r5, r1, lsl #16
    6260:	00265400 	eoreq	r5, r6, r0, lsl #8
    6264:	0e9c0100 	fmleqe	f0, f4, f0
    6268:	29000015 	stmdbcs	r0, {r0, r2, r4}
    626c:	0000260a 	andeq	r2, r0, sl, lsl #12
    6270:	00002632 	andeq	r2, r0, r2, lsr r6
    6274:	000014db 	ldrdeq	r1, [r0], -fp
    6278:	01006a22 	tsteq	r0, r2, lsr #20
    627c:	a30201fe 	movwge	r0, #8702	; 0x21fe
    6280:	30000000 	andcc	r0, r0, r0
    6284:	00000027 	andeq	r0, r0, r7, lsr #32
    6288:	0017812a 	andseq	r8, r7, sl, lsr #2
    628c:	0025fc00 	eoreq	pc, r5, r0, lsl #24
    6290:	00260600 	eoreq	r0, r6, r0, lsl #12
    6294:	01f80100 	mvnseq	r0, r0, lsl #2
    6298:	0014f602 	andseq	pc, r4, r2, lsl #12
    629c:	17902b00 	ldrne	r2, [r0, r0, lsl #22]
    62a0:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    62a4:	0000179e 	muleq	r0, lr, r7
    62a8:	00002606 	andeq	r2, r0, r6, lsl #12
    62ac:	0000260a 	andeq	r2, r0, sl, lsl #12
    62b0:	0201fb01 	andeq	pc, r1, #1024	; 0x400
    62b4:	0017ac2b 	andseq	sl, r7, fp, lsr #24
    62b8:	2c000000 	stccs	0, cr0, [r0], {-0}
    62bc:	000018f3 	strdeq	r1, [r0], -r3
    62c0:	0d01b501 	cfstr32eq	mvfx11, [r1, #-4]
    62c4:	00002344 	andeq	r2, r0, r4, asr #6
    62c8:	00002408 	andeq	r2, r0, r8, lsl #8
    62cc:	15789c01 	ldrbne	r9, [r8, #-3073]!	; 0xfffff3ff
    62d0:	64220000 	strtvs	r0, [r2], #-0
    62d4:	b7010062 	strlt	r0, [r1, -r2, rrx]
    62d8:	14471a01 	strbne	r1, [r7], #-2561	; 0xfffff5ff
    62dc:	27430000 	strbcs	r0, [r3, -r0]
    62e0:	69260000 	stmdbvs	r6!, {}	; <UNPREDICTABLE>
    62e4:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
    62e8:	0000a306 	andeq	sl, r0, r6, lsl #6
    62ec:	6c702200 	lfmvs	f2, 2, [r0], #-0
    62f0:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
    62f4:	0000a309 	andeq	sl, r0, r9, lsl #6
    62f8:	00278500 	eoreq	r8, r7, r0, lsl #10
    62fc:	726e2200 	rsbvc	r2, lr, #0, 4
    6300:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
    6304:	0000a30d 	andeq	sl, r0, sp, lsl #6
    6308:	00279800 	eoreq	r9, r7, r0, lsl #16
    630c:	17b92d00 	ldrne	r2, [r9, r0, lsl #26]!
    6310:	23440000 	movtcs	r0, #16384	; 0x4000
    6314:	0bd00000 	bleq	ff40631c <_estack+0xdf40131c>
    6318:	c1010000 	mrsgt	r0, (UNDEF: 1)
    631c:	c72b0201 	strgt	r0, [fp, -r1, lsl #4]!
    6320:	00000017 	andeq	r0, r0, r7, lsl r0
    6324:	18482e00 	stmdane	r8, {r9, sl, fp, sp}^
    6328:	ab010000 	blge	46330 <__ccfg+0x26388>
    632c:	2f010d01 	svccs	0x00010d01
    6330:	00001872 	andeq	r1, r0, r2, ror r8
    6334:	0d01a001 	stceq	0, cr10, [r1, #-4]
    6338:	00001ee8 	andeq	r1, r0, r8, ror #29
    633c:	00001f08 	andeq	r1, r0, r8, lsl #30
    6340:	ed2e9c01 	stc	12, cr9, [lr, #-4]!
    6344:	01000018 	tsteq	r0, r8, lsl r0
    6348:	010d0195 			; <UNDEFINED> instruction: 0x010d0195
    634c:	00175525 	andseq	r5, r7, r5, lsr #10
    6350:	01800100 	orreq	r0, r0, r0, lsl #2
    6354:	15c5010d 	strbne	r0, [r5, #269]	; 0x10d
    6358:	72260000 	eorvc	r0, r6, #0
    635c:	84010065 	strhi	r0, [r1], #-101	; 0xffffff9b
    6360:	14471a01 	strbne	r1, [r7], #-2561	; 0xfffff5ff
    6364:	69260000 	stmdbvs	r6!, {}	; <UNPREDICTABLE>
    6368:	01850100 	orreq	r0, r5, r0, lsl #2
    636c:	0000a306 	andeq	sl, r0, r6, lsl #6
    6370:	f02e0000 			; <UNDEFINED> instruction: 0xf02e0000
    6374:	01000017 	tsteq	r0, r7, lsl r0
    6378:	010d0161 	tsteq	sp, r1, ror #2
    637c:	00144b30 	andseq	r4, r4, r0, lsr fp
    6380:	0dff0100 	ldfeqe	f0, [pc]	; 6388 <__exidx_end+0x145b>
    6384:	15313101 	ldrne	r3, [r1, #-257]!	; 0xfffffeff
    6388:	e2010000 	and	r0, r1, #0
    638c:	0b01010d 	bleq	467c8 <__ccfg+0x26820>
    6390:	32000016 	andcc	r0, r0, #22
    6394:	00646d63 	rsbeq	r6, r4, r3, ror #26
    6398:	2426e201 	strtcs	lr, [r6], #-513	; 0xfffffdff
    639c:	33000003 	movwcc	r0, #3
    63a0:	00001595 	muleq	r0, r5, r5
    63a4:	5a31e201 	bpl	c7ebb0 <__ccfg+0xc5ec08>
    63a8:	3300000f 	movwcc	r0, #15
    63ac:	00001b26 	andeq	r1, r0, r6, lsr #22
    63b0:	5a3ee201 	bpl	fbebbc <__ccfg+0xf9ec14>
    63b4:	0000000f 	andeq	r0, r0, pc
    63b8:	00141e31 	andseq	r1, r4, r1, lsr lr
    63bc:	0dc50100 	stfeqe	f0, [r5]
    63c0:	163e0101 	ldrtne	r0, [lr], -r1, lsl #2
    63c4:	63320000 	teqvs	r2, #0
    63c8:	0100646d 	tsteq	r0, sp, ror #8
    63cc:	0f5a1ec5 	svceq	0x005a1ec5
    63d0:	72340000 	eorsvc	r0, r4, #0
    63d4:	01007365 	tsteq	r0, r5, ror #6
    63d8:	00a306ca 	adceq	r0, r3, sl, asr #13
    63dc:	63340000 	teqvs	r4, #0
    63e0:	0100746e 	tsteq	r0, lr, ror #8
    63e4:	00a306cd 	adceq	r0, r3, sp, asr #13
    63e8:	35000000 	strcc	r0, [r0, #-0]
    63ec:	000007ba 			; <UNDEFINED> instruction: 0x000007ba
    63f0:	01015403 	tsteq	r1, r3, lsl #8
    63f4:	165b0301 	ldrbne	r0, [fp], -r1, lsl #6
    63f8:	f7360000 			; <UNDEFINED> instruction: 0xf7360000
    63fc:	03000005 	movweq	r0, #5
    6400:	7f190154 	svcvc	0x00190154
    6404:	00000000 	andeq	r0, r0, r0
    6408:	0008f535 	andeq	pc, r8, r5, lsr r5	; <UNPREDICTABLE>
    640c:	011e0300 	tsteq	lr, r0, lsl #6
    6410:	78030101 	stmdavc	r3, {r0, r8}
    6414:	36000016 			; <UNDEFINED> instruction: 0x36000016
    6418:	000005f7 	strdeq	r0, [r0], -r7
    641c:	17011e03 	strne	r1, [r1, -r3, lsl #28]
    6420:	0000007f 	andeq	r0, r0, pc, ror r0
    6424:	1a7b3500 	bne	1ed382c <__ccfg+0x1eb3884>
    6428:	ea050000 	b	146430 <__ccfg+0x126488>
    642c:	03011501 	movweq	r1, #5377	; 0x1501
    6430:	0000170d 	andeq	r1, r0, sp, lsl #14
    6434:	00537026 	subseq	r7, r3, r6, lsr #32
    6438:	1401f205 	strne	pc, [r1], #-517	; 0xfffffdfb
    643c:	0000170d 	andeq	r1, r0, sp, lsl #14
    6440:	00447026 	subeq	r7, r4, r6, lsr #32
    6444:	1c01f305 	stcne	3, cr15, [r1], {5}
    6448:	00001713 	andeq	r1, r0, r3, lsl r7
    644c:	00317426 	eorseq	r7, r1, r6, lsr #8
    6450:	0d01f405 	cfstrseq	mvf15, [r1, #-20]	; 0xffffffec
    6454:	0000007f 	andeq	r0, r0, pc, ror r0
    6458:	00327426 	eorseq	r7, r2, r6, lsr #8
    645c:	1101f405 	tstne	r1, r5, lsl #8	; <UNPREDICTABLE>
    6460:	0000007f 	andeq	r0, r0, pc, ror r0
    6464:	00337426 	eorseq	r7, r3, r6, lsr #8
    6468:	1501f405 	strne	pc, [r1, #-1029]	; 0xfffffbfb
    646c:	0000007f 	andeq	r0, r0, pc, ror r0
    6470:	00347426 	eorseq	r7, r4, r6, lsr #8
    6474:	1901f405 	stmdbne	r1, {r0, r2, sl, ip, sp, lr, pc}
    6478:	0000007f 	andeq	r0, r0, pc, ror r0
    647c:	00357426 	eorseq	r7, r5, r6, lsr #8
    6480:	1d01f405 	cfstrsne	mvf15, [r1, #-20]	; 0xffffffec
    6484:	0000007f 	andeq	r0, r0, pc, ror r0
    6488:	00367426 	eorseq	r7, r6, r6, lsr #8
    648c:	2101f405 	tstcs	r1, r5, lsl #8	; <UNPREDICTABLE>
    6490:	0000007f 	andeq	r0, r0, pc, ror r0
    6494:	00377426 	eorseq	r7, r7, r6, lsr #8
    6498:	2501f405 	strcs	pc, [r1, #-1029]	; 0xfffffbfb
    649c:	0000007f 	andeq	r0, r0, pc, ror r0
    64a0:	00387426 	eorseq	r7, r8, r6, lsr #8
    64a4:	2901f405 	stmdbcs	r1, {r0, r2, sl, ip, sp, lr, pc}
    64a8:	0000007f 	andeq	r0, r0, pc, ror r0
    64ac:	001ab919 	andseq	fp, sl, r9, lsl r9
    64b0:	01f50500 	mvnseq	r0, r0, lsl #10
    64b4:	00007f0d 	andeq	r7, r0, sp, lsl #30
    64b8:	04090000 	streq	r0, [r9], #-0
    64bc:	0000008b 	andeq	r0, r0, fp, lsl #1
    64c0:	00970409 	addseq	r0, r7, r9, lsl #8
    64c4:	91370000 	teqls	r7, r0
    64c8:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    64cc:	0115012f 	tsteq	r5, pc, lsr #2
    64d0:	15c83703 	strbne	r3, [r8, #1795]	; 0x703
    64d4:	22040000 	andcs	r0, r4, #0
    64d8:	03011501 	movweq	r1, #5377	; 0x1501
    64dc:	001c7f35 	andseq	r7, ip, r5, lsr pc
    64e0:	01110400 	tsteq	r1, r0, lsl #8
    64e4:	59030115 	stmdbpl	r3, {r0, r2, r4, r8}
    64e8:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
    64ec:	00001b7b 	andeq	r1, r0, fp, ror fp
    64f0:	0d011304 	stceq	3, cr1, [r1, #-16]
    64f4:	000000e8 	andeq	r0, r0, r8, ror #1
    64f8:	00162d19 	andseq	r2, r6, r9, lsl sp
    64fc:	01140400 	tsteq	r4, r0, lsl #8
    6500:	00032a0e 	andeq	r2, r3, lr, lsl #20
    6504:	06370000 	ldrteq	r0, [r7], -r0
    6508:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    650c:	0115010d 	tsteq	r5, sp, lsl #2
    6510:	185e3503 	ldmdane	lr, {r0, r1, r8, sl, ip, sp}^
    6514:	04040000 	streq	r0, [r4], #-0
    6518:	03011501 	movweq	r1, #5377	; 0x1501
    651c:	00001781 	andeq	r1, r0, r1, lsl #15
    6520:	001c2e19 	andseq	r2, ip, r9, lsl lr
    6524:	01060400 	tsteq	r6, r0, lsl #8
    6528:	00032a0e 	andeq	r2, r3, lr, lsl #20
    652c:	4f350000 	svcmi	0x00350000
    6530:	02000018 	andeq	r0, r0, #24
    6534:	0101011d 	tsteq	r1, sp, lsl r1
    6538:	00179e03 	andseq	r9, r7, r3, lsl #28
    653c:	175b3600 	ldrbne	r3, [fp, -r0, lsl #12]
    6540:	1d020000 	stcne	0, cr0, [r2, #-0]
    6544:	007f1901 	rsbseq	r1, pc, r1, lsl #18
    6548:	31000000 	mrscc	r0, (UNDEF: 0)
    654c:	00001637 	andeq	r1, r0, r7, lsr r6
    6550:	0101f702 	tsteq	r1, r2, lsl #14	; <UNPREDICTABLE>
    6554:	0017b903 	andseq	fp, r7, r3, lsl #18
    6558:	175b3300 	ldrbne	r3, [fp, -r0, lsl #6]
    655c:	f7020000 			; <UNDEFINED> instruction: 0xf7020000
    6560:	00007f1b 	andeq	r7, r0, fp, lsl pc
    6564:	68310000 	ldmdavs	r1!, {}	; <UNPREDICTABLE>
    6568:	02000016 	andeq	r0, r0, #22
    656c:	030101aa 	movweq	r0, #4522	; 0x11aa
    6570:	000017d4 	ldrdeq	r1, [r0], -r4
    6574:	00175b33 	andseq	r5, r7, r3, lsr fp
    6578:	1baa0200 	blne	fea86d80 <_estack+0xdea81d80>
    657c:	0000007f 	andeq	r0, r0, pc, ror r0
    6580:	19fe3800 	ldmibne	lr!, {fp, ip, sp}^
    6584:	9c020000 	stcls	0, cr0, [r2], {-0}
    6588:	38030101 	stmdacc	r3, {r0, r8}
    658c:	00001c66 	andeq	r1, r0, r6, ror #24
    6590:	01017902 	tsteq	r1, r2, lsl #18
    6594:	160b3903 	strne	r3, [fp], -r3, lsl #18
    6598:	20980000 	addscs	r0, r8, r0
    659c:	20e00000 	rsccs	r0, r0, r0
    65a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    65a4:	00001837 	andeq	r1, r0, r7, lsr r8
    65a8:	0016193a 	andseq	r1, r6, sl, lsr r9
    65ac:	0027b600 	eoreq	fp, r7, r0, lsl #12
    65b0:	16251f00 	strtne	r1, [r5], -r0, lsl #30
    65b4:	27d40000 	ldrbcs	r0, [r4, r0]
    65b8:	311e0000 	tstcc	lr, r0
    65bc:	3b000016 	blcc	661c <__exidx_end+0x16ef>
    65c0:	0000160b 	andeq	r1, r0, fp, lsl #12
    65c4:	000020ae 	andeq	r2, r0, lr, lsr #1
    65c8:	000020b0 	strheq	r2, [r0], -r0
    65cc:	3a0dc501 	bcc	3779d8 <__ccfg+0x357a30>
    65d0:	00001619 	andeq	r1, r0, r9, lsl r6
    65d4:	00002808 	andeq	r2, r0, r8, lsl #16
    65d8:	0016251e 	andseq	r2, r6, lr, lsl r5
    65dc:	16311e00 	ldrtne	r1, [r1], -r0, lsl #28
    65e0:	00000000 	andeq	r0, r0, r0
    65e4:	00159539 	andseq	r9, r5, r9, lsr r5
    65e8:	0020e000 	eoreq	lr, r0, r0
    65ec:	00210400 	eoreq	r0, r1, r0, lsl #8
    65f0:	5c9c0100 	ldfpls	f0, [ip], {0}
    65f4:	3c000018 	stccc	0, cr0, [r0], {24}
    65f8:	00001595 	muleq	r0, r5, r5
    65fc:	000020ea 	andeq	r2, r0, sl, ror #1
    6600:	000020f8 	strdeq	r2, [r0], -r8
    6604:	0d019501 	cfstr32eq	mvfx9, [r1, #-4]
    6608:	15c53900 	strbne	r3, [r5, #2304]	; 0x900
    660c:	21040000 	mrscs	r0, (UNDEF: 4)
    6610:	21640000 	cmncs	r4, r0
    6614:	9c010000 	stcls	0, cr0, [r1], {-0}
    6618:	000018c5 	andeq	r1, r0, r5, asr #17
    661c:	0015c528 	andseq	ip, r5, r8, lsr #10
    6620:	00210e00 	eoreq	r0, r1, r0, lsl #28
    6624:	00215200 	eoreq	r5, r1, r0, lsl #4
    6628:	01610100 	cmneq	r1, r0, lsl #2
    662c:	17d4200d 	ldrbne	r2, [r4, sp]
    6630:	21120000 	tstcs	r2, r0
    6634:	0b300000 	bleq	c0663c <__ccfg+0xbe6694>
    6638:	6f010000 	svcvs	0x00010000
    663c:	3e2a0201 	cdpcc	2, 2, cr0, cr10, cr1, {0}
    6640:	3a000016 	bcc	66a0 <__exidx_end+0x1773>
    6644:	44000021 	strmi	r0, [r0], #-33	; 0xffffffdf
    6648:	01000021 	tsteq	r0, r1, lsr #32
    664c:	ac02017a 	stfges	f0, [r2], {122}	; 0x7a
    6650:	2b000018 	blcs	66b8 <__exidx_end+0x178b>
    6654:	0000164d 	andeq	r1, r0, sp, asr #12
    6658:	163e2800 	ldrtne	r2, [lr], -r0, lsl #16
    665c:	21440000 	mrscs	r0, (UNDEF: 68)
    6660:	214a0000 	mrscs	r0, (UNDEF: 74)
    6664:	7a010000 	bvc	4666c <__ccfg+0x266c4>
    6668:	4d2b0201 	sfmmi	f0, 4, [fp, #-4]!
    666c:	00000016 	andeq	r0, r0, r6, lsl r0
    6670:	d8390000 	ldmdale	r9!, {}	; <UNPREDICTABLE>
    6674:	64000015 	strvs	r0, [r0], #-21	; 0xffffffeb
    6678:	9c000021 	stcls	0, cr0, [r0], {33}	; 0x21
    667c:	01000021 	tsteq	r0, r1, lsr #32
    6680:	0018f09c 	mulseq	r8, ip, r0
    6684:	15e63a00 	strbne	r3, [r6, #2560]!	; 0xa00
    6688:	281b0000 	ldmdacs	fp, {}	; <UNPREDICTABLE>
    668c:	f23a0000 	vhadd.s<illegal width 64>	d0, d10, d0
    6690:	39000015 	stmdbcc	r0, {r0, r2, r4}
    6694:	2b000028 	blcs	673c <__exidx_end+0x180f>
    6698:	000015fe 	strdeq	r1, [r0], -lr
    669c:	15cf3d00 	strbne	r3, [pc, #3328]	; 73a4 <__exidx_end+0x2477>
    66a0:	219c0000 	orrscs	r0, ip, r0
    66a4:	23440000 	movtcs	r0, #16384	; 0x4000
    66a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    66ac:	0015cf3e 	andseq	ip, r5, lr, lsr pc
    66b0:	0021aa00 	eoreq	sl, r1, r0, lsl #20
    66b4:	000b5000 	andeq	r5, fp, r0
    66b8:	0dff0100 	ldfeqe	f0, [pc]	; 66c0 <__exidx_end+0x1793>
    66bc:	00165b2a 	andseq	r5, r6, sl, lsr #22
    66c0:	0021aa00 	eoreq	sl, r1, r0, lsl #20
    66c4:	0021b400 	eoreq	fp, r1, r0, lsl #8
    66c8:	01080100 	mrseq	r0, (UNDEF: 24)
    66cc:	00192a02 	andseq	r2, r9, r2, lsl #20
    66d0:	166a2b00 	strbtne	r2, [sl], -r0, lsl #22
    66d4:	2a000000 	bcs	66dc <__exidx_end+0x17af>
    66d8:	0000165b 	andeq	r1, r0, fp, asr r6
    66dc:	000021b4 			; <UNDEFINED> instruction: 0x000021b4
    66e0:	000021ba 			; <UNDEFINED> instruction: 0x000021ba
    66e4:	02010801 	andeq	r0, r1, #65536	; 0x10000
    66e8:	00001945 	andeq	r1, r0, r5, asr #18
    66ec:	00166a2b 	andseq	r6, r6, fp, lsr #20
    66f0:	de200000 	cdple	0, 2, cr0, cr0, cr0, {0}
    66f4:	d8000017 	stmdale	r0, {r0, r1, r2, r4}
    66f8:	78000021 	stmdavc	r0, {r0, r5}
    66fc:	0100000b 	tsteq	r0, fp
    6700:	1c02011a 	stfnes	f0, [r2], {26}
    6704:	00001719 	andeq	r1, r0, r9, lsl r7
    6708:	000021e6 	andeq	r2, r0, r6, ror #3
    670c:	00000b90 	muleq	r0, r0, fp
    6710:	02012101 	andeq	r2, r1, #1073741824	; 0x40000000
    6714:	000019bb 			; <UNDEFINED> instruction: 0x000019bb
    6718:	0017242d 	andseq	r2, r7, sp, lsr #8
    671c:	0021e600 	eoreq	lr, r1, r0, lsl #12
    6720:	000b9000 	andeq	r9, fp, r0
    6724:	01310400 	teqeq	r1, r0, lsl #8
    6728:	17642a04 	strbne	r2, [r4, -r4, lsl #20]!
    672c:	21e60000 	mvncs	r0, r0
    6730:	21f20000 	mvnscs	r0, r0
    6734:	25040000 	strcs	r0, [r4, #-0]
    6738:	19970401 	ldmibne	r7, {r0, sl}
    673c:	731e0000 	tstvc	lr, #0
    6740:	00000017 	andeq	r0, r0, r7, lsl r0
    6744:	00172f2d 	andseq	r2, r7, sp, lsr #30
    6748:	0021f200 	eoreq	pc, r1, r0, lsl #4
    674c:	000b9800 	andeq	r9, fp, r0, lsl #16
    6750:	01260400 			; <UNDEFINED> instruction: 0x01260400
    6754:	0b981d04 	bleq	fe60db6c <_estack+0xde608b6c>
    6758:	3e1e0000 	cdpcc	0, 1, cr0, cr14, cr0, {0}
    675c:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
    6760:	0000174b 	andeq	r1, r0, fp, asr #14
    6764:	00000000 	andeq	r0, r0, r0
    6768:	0016782d 	andseq	r7, r6, sp, lsr #16
    676c:	0021f600 	eoreq	pc, r1, r0, lsl #12
    6770:	000bb000 	andeq	fp, fp, r0
    6774:	01220100 			; <UNDEFINED> instruction: 0x01220100
    6778:	0bb01d02 	bleq	fec0db88 <_estack+0xdec08b88>
    677c:	871f0000 	ldrhi	r0, [pc, -r0]
    6780:	57000016 	smladpl	r0, r6, r0, r0
    6784:	1f000028 	svcne	0x00000028
    6788:	00001693 	muleq	r0, r3, r6
    678c:	0000286a 	andeq	r2, r0, sl, ror #16
    6790:	00169f1e 	andseq	r9, r6, lr, lsl pc
    6794:	16ab1f00 	strtne	r1, [fp], r0, lsl #30
    6798:	28880000 	stmcs	r8, {}	; <UNPREDICTABLE>
    679c:	b71e0000 	ldrlt	r0, [lr, -r0]
    67a0:	1f000016 	svcne	0x00000016
    67a4:	000016c3 	andeq	r1, r0, r3, asr #13
    67a8:	0000289b 	muleq	r0, fp, r8
    67ac:	0016cf1e 	andseq	ip, r6, lr, lsl pc
    67b0:	16db1f00 	ldrbne	r1, [fp], r0, lsl #30
    67b4:	28ae0000 	stmiacs	lr!, {}	; <UNPREDICTABLE>
    67b8:	e71f0000 	ldr	r0, [pc, -r0]
    67bc:	c1000016 	tstgt	r0, r6, lsl r0
    67c0:	1f000028 	svcne	0x00000028
    67c4:	000016f3 	strdeq	r1, [r0], -r3
    67c8:	000028ec 	andeq	r2, r0, ip, ror #17
    67cc:	0016ff1e 	andseq	pc, r6, lr, lsl pc	; <UNPREDICTABLE>
    67d0:	00000000 	andeq	r0, r0, r0
    67d4:	03c40000 	biceq	r0, r4, #0
    67d8:	00030000 	andeq	r0, r3, r0
    67dc:	00001c4c 	andeq	r1, r0, ip, asr #24
    67e0:	00d00104 	sbcseq	r0, r0, r4, lsl #2
    67e4:	db0c0000 	blle	3067ec <__ccfg+0x2e6844>
    67e8:	a300001c 	movwge	r0, #28
    67ec:	b0000000 	andlt	r0, r0, r0
    67f0:	0000000c 	andeq	r0, r0, ip
    67f4:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    67f8:	02000052 	andeq	r0, r0, #82	; 0x52
    67fc:	029d0601 	addseq	r0, sp, #1048576	; 0x100000
    6800:	02020000 	andeq	r0, r2, #0
    6804:	0002b905 	andeq	fp, r2, r5, lsl #18
    6808:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    680c:	0000005c 	andeq	r0, r0, ip, asr r0
    6810:	57050802 	strpl	r0, [r5, -r2, lsl #16]
    6814:	02000000 	andeq	r0, r0, #0
    6818:	029b0801 	addseq	r0, fp, #65536	; 0x10000
    681c:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    6820:	02000023 	andeq	r0, r0, #35	; 0x23
    6824:	00541c31 	subseq	r1, r4, r1, lsr ip
    6828:	02020000 	andeq	r0, r2, #0
    682c:	0001ca07 	andeq	ip, r1, r7, lsl #20
    6830:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6834:	00000045 	andeq	r0, r0, r5, asr #32
    6838:	40070802 	andmi	r0, r7, r2, lsl #16
    683c:	04000000 	streq	r0, [r0], #-0
    6840:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    6844:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    6848:	00004a07 	andeq	r4, r0, r7, lsl #20
    684c:	02590300 	subseq	r0, r9, #0, 6
    6850:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    6854:	0000831b 	andeq	r8, r0, fp, lsl r3
    6858:	008a0500 	addeq	r0, sl, r0, lsl #10
    685c:	06040000 	streq	r0, [r4], -r0
    6860:	00009b00 	andeq	r9, r0, r0, lsl #22
    6864:	03310600 	teqeq	r1, #0, 12
    6868:	009b0000 	addseq	r0, fp, r0
    686c:	01000000 	mrseq	r0, (UNDEF: 0)
    6870:	03040700 	movweq	r0, #18176	; 0x4700
    6874:	0000008c 	andeq	r0, r0, ip, lsl #1
    6878:	77186303 	ldrvc	r6, [r8, -r3, lsl #6]
    687c:	03000000 	movweq	r0, #0
    6880:	00001d85 	andeq	r1, r0, r5, lsl #27
    6884:	48122704 	ldmdami	r2, {r2, r8, r9, sl, sp}
    6888:	03000000 	movweq	r0, #0
    688c:	00000251 	andeq	r0, r0, r1, asr r2
    6890:	c10f2e04 	tstgt	pc, r4, lsl #28
    6894:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6898:	0000a904 	andeq	sl, r0, r4, lsl #18
    689c:	08010200 	stmdaeq	r1, {r9}
    68a0:	000002a4 	andeq	r0, r0, r4, lsr #5
    68a4:	08050409 	stmdaeq	r5, {r0, r3, sl}
    68a8:	0000f209 	andeq	pc, r0, r9, lsl #4
    68ac:	02e50a00 	rsceq	r0, r5, #0, 20
    68b0:	0f050000 	svceq	0x00050000
    68b4:	0000a907 	andeq	sl, r0, r7, lsl #18
    68b8:	2f0a0000 	svccs	0x000a0000
    68bc:	05000002 	streq	r0, [r0, #-2]
    68c0:	00a90310 	adceq	r0, r9, r0, lsl r3
    68c4:	00020000 	andeq	r0, r2, r0
    68c8:	0002cf03 	andeq	ip, r2, r3, lsl #30
    68cc:	03110500 	tsteq	r1, #0, 10
    68d0:	000000ce 	andeq	r0, r0, lr, asr #1
    68d4:	16052009 	strne	r2, [r5], -r9
    68d8:	00017009 	andeq	r7, r1, r9
    68dc:	02a90a00 	adceq	r0, r9, #0, 20
    68e0:	17050000 	strne	r0, [r5, -r0]
    68e4:	00018a08 	andeq	r8, r1, r8, lsl #20
    68e8:	a20a0000 	andge	r0, sl, #0
    68ec:	05000001 	streq	r0, [r0, #-1]
    68f0:	01a50818 			; <UNDEFINED> instruction: 0x01a50818
    68f4:	0a040000 	beq	1068fc <__ccfg+0xe6954>
    68f8:	00000216 	andeq	r0, r0, r6, lsl r2
    68fc:	db081905 	blle	20cd18 <__ccfg+0x1ecd70>
    6900:	08000001 	stmdaeq	r0, {r0}
    6904:	0002750a 	andeq	r7, r2, sl, lsl #10
    6908:	081a0500 	ldmdaeq	sl, {r8, sl}
    690c:	000001f6 	strdeq	r0, [r0], -r6
    6910:	01aa0a0c 			; <UNDEFINED> instruction: 0x01aa0a0c
    6914:	1b050000 	blne	14691c <__ccfg+0x126974>
    6918:	00020c08 	andeq	r0, r2, r8, lsl #24
    691c:	b10a1000 	mrslt	r1, (UNDEF: 10)
    6920:	05000002 	streq	r0, [r0, #-2]
    6924:	020c081c 	andeq	r0, ip, #28, 16	; 0x1c0000
    6928:	0a140000 	beq	506930 <__ccfg+0x4e6988>
    692c:	000001c2 	andeq	r0, r0, r2, asr #3
    6930:	0c081d05 	stceq	13, cr1, [r8], {5}
    6934:	18000002 	stmdane	r0, {r1}
    6938:	0000650a 	andeq	r6, r0, sl, lsl #10
    693c:	061e0500 	ldreq	r0, [lr], -r0, lsl #10
    6940:	00000069 	andeq	r0, r0, r9, rrx
    6944:	010b001c 	tsteq	fp, ip, lsl r0
    6948:	00000069 	andeq	r0, r0, r9, rrx
    694c:	0000018a 	andeq	r0, r0, sl, lsl #3
    6950:	0000690c 	andeq	r6, r0, ip, lsl #18
    6954:	00690c00 	rsbeq	r0, r9, r0, lsl #24
    6958:	9d0c0000 	stcls	0, cr0, [ip, #-0]
    695c:	00000000 	andeq	r0, r0, r0
    6960:	01700408 	cmneq	r0, r8, lsl #8
    6964:	010b0000 	mrseq	r0, (UNDEF: 11)
    6968:	00000069 	andeq	r0, r0, r9, rrx
    696c:	000001a5 	andeq	r0, r0, r5, lsr #3
    6970:	0000690c 	andeq	r6, r0, ip, lsl #18
    6974:	00690c00 	rsbeq	r0, r9, r0, lsl #24
    6978:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    697c:	00019004 	andeq	r9, r1, r4
    6980:	69010b00 	stmdbvs	r1, {r8, r9, fp}
    6984:	cf000000 	svcgt	0x00000000
    6988:	0c000001 	stceq	0, cr0, [r0], {1}
    698c:	00000069 	andeq	r0, r0, r9, rrx
    6990:	0000b50c 	andeq	fp, r0, ip, lsl #10
    6994:	00690c00 	rsbeq	r0, r9, r0, lsl #24
    6998:	cf0c0000 	svcgt	0x000c0000
    699c:	0c000001 	stceq	0, cr0, [r0], {1}
    69a0:	000001d5 	ldrdeq	r0, [r0], -r5
    69a4:	69040800 	stmdbvs	r4, {fp}
    69a8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    69ac:	0000f204 	andeq	pc, r0, r4, lsl #4
    69b0:	ab040800 	blge	1089b8 <__ccfg+0xe8a10>
    69b4:	0b000001 	bleq	69c0 <__exidx_end+0x1a93>
    69b8:	00006901 	andeq	r6, r0, r1, lsl #18
    69bc:	0001f600 	andeq	pc, r1, r0, lsl #12
    69c0:	00b50c00 	adcseq	r0, r5, r0, lsl #24
    69c4:	d50c0000 	strle	r0, [ip, #-0]
    69c8:	00000001 	andeq	r0, r0, r1
    69cc:	01e10408 	mvneq	r0, r8, lsl #8
    69d0:	010b0000 	mrseq	r0, (UNDEF: 11)
    69d4:	00000069 	andeq	r0, r0, r9, rrx
    69d8:	0000020c 	andeq	r0, r0, ip, lsl #4
    69dc:	0000b50c 	andeq	fp, r0, ip, lsl #10
    69e0:	04080000 	streq	r0, [r8], #-0
    69e4:	000001fc 	strdeq	r0, [r0], -ip
    69e8:	0001dd03 	andeq	sp, r1, r3, lsl #26
    69ec:	031f0500 	tsteq	pc, #0, 10
    69f0:	000000fe 	strdeq	r0, [r0], -lr
    69f4:	0002120d 	andeq	r1, r2, sp, lsl #4
    69f8:	035d0e00 	cmpeq	sp, #0, 28
    69fc:	1a010000 	bne	46a04 <__ccfg+0x26a5c>
    6a00:	00021e11 	andeq	r1, r2, r1, lsl lr
    6a04:	03050100 	movweq	r0, #20736	; 0x5100
    6a08:	00004e0c 	andeq	r4, r0, ip, lsl #28
    6a0c:	001cec0f 	andseq	lr, ip, pc, lsl #24
    6a10:	0d1f0100 	ldfeqs	f0, [pc, #-0]	; 6a18 <__exidx_end+0x1aeb>
    6a14:	000001cf 	andeq	r0, r0, pc, asr #3
    6a18:	02080305 	andeq	r0, r8, #335544320	; 0x14000000
    6a1c:	03102000 	tsteq	r0, #0
    6a20:	0100001d 	tsteq	r0, sp, lsl r0
    6a24:	69010c58 	stmdbvs	r1, {r3, r4, r6, sl, fp}
    6a28:	1c000000 	stcne	0, cr0, [r0], {-0}
    6a2c:	20000028 	andcs	r0, r0, r8, lsr #32
    6a30:	01000028 	tsteq	r0, r8, lsr #32
    6a34:	0002729c 	muleq	r2, ip, r2
    6a38:	00701100 	rsbseq	r1, r0, r0, lsl #2
    6a3c:	b5225801 	strlt	r5, [r2, #-2049]!	; 0xfffff7ff
    6a40:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    6a44:	00000028 	andeq	r0, r0, r8, lsr #32
    6a48:	001cba10 	andseq	fp, ip, r0, lsl sl
    6a4c:	0c520100 	ldfeqe	f0, [r2], {-0}
    6a50:	00006901 	andeq	r6, r0, r1, lsl #18
    6a54:	00281800 	eoreq	r1, r8, r0, lsl #16
    6a58:	00281c00 	eoreq	r1, r8, r0, lsl #24
    6a5c:	9c9c0100 	ldflss	f0, [ip], {0}
    6a60:	11000002 	tstne	r0, r2
    6a64:	52010070 	andpl	r0, r1, #112	; 0x70
    6a68:	0000b522 	andeq	fp, r0, r2, lsr #10
    6a6c:	00291200 	eoreq	r1, r9, r0, lsl #4
    6a70:	c7100000 	ldrgt	r0, [r0, -r0]
    6a74:	0100001c 	tsteq	r0, ip, lsl r0
    6a78:	69010c4d 	stmdbvs	r1, {r0, r2, r3, r6, sl, fp}
    6a7c:	10000000 	andne	r0, r0, r0
    6a80:	18000028 	stmdane	r0, {r3, r5}
    6a84:	01000028 	tsteq	r0, r8, lsr #32
    6a88:	0002d49c 	muleq	r2, ip, r4
    6a8c:	00701100 	rsbseq	r1, r0, r0, lsl #2
    6a90:	b5224d01 	strlt	r4, [r2, #-3329]!	; 0xfffff2ff
    6a94:	25000000 	strcs	r0, [r0, #-0]
    6a98:	12000029 	andne	r0, r0, #41	; 0x29
    6a9c:	00001cd4 	ldrdeq	r1, [r0], -r4
    6aa0:	d52f4d01 	strle	r4, [pc, #-3329]!	; 5da7 <__exidx_end+0xe7a>
    6aa4:	01000001 	tsteq	r0, r1
    6aa8:	f6100051 			; <UNDEFINED> instruction: 0xf6100051
    6aac:	0100001c 	tsteq	r0, ip, lsl r0
    6ab0:	69010c42 	stmdbvs	r1, {r1, r6, sl, fp}
    6ab4:	ec000000 	stc	0, cr0, [r0], {-0}
    6ab8:	10000027 	andne	r0, r0, r7, lsr #32
    6abc:	01000028 	tsteq	r0, r8, lsr #32
    6ac0:	00033d9c 	muleq	r3, ip, sp
    6ac4:	68701100 	ldmdavs	r0!, {r8, ip}^
    6ac8:	42010079 	andmi	r0, r1, #121	; 0x79
    6acc:	0000691e 	andeq	r6, r0, lr, lsl r9
    6ad0:	00293800 	eoreq	r3, r9, r0, lsl #16
    6ad4:	00701100 	rsbseq	r1, r0, r0, lsl #2
    6ad8:	b52b4201 	strlt	r4, [fp, #-513]!	; 0xfffffdff
    6adc:	56000000 	strpl	r0, [r0], -r0
    6ae0:	11000029 	tstne	r0, r9, lsr #32
    6ae4:	006e656c 	rsbeq	r6, lr, ip, ror #10
    6ae8:	69324201 	ldmdbvs	r2!, {r0, r9, lr}
    6aec:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
    6af0:	11000029 	tstne	r0, r9, lsr #32
    6af4:	00736573 	rsbseq	r6, r3, r3, ror r5
    6af8:	cf3c4201 	svcgt	0x003c4201
    6afc:	7c000001 	stcvc	0, cr0, [r0], {1}
    6b00:	12000029 	andne	r0, r0, #41	; 0x29
    6b04:	00001cd4 	ldrdeq	r1, [r0], -r4
    6b08:	d5174301 	ldrle	r4, [r7, #-769]	; 0xfffffcff
    6b0c:	02000001 	andeq	r0, r0, #1
    6b10:	10000091 	mulne	r0, r1, r0
    6b14:	00001cad 	andeq	r1, r0, sp, lsr #25
    6b18:	010c3701 	tsteq	ip, r1, lsl #14
    6b1c:	00000069 	andeq	r0, r0, r9, rrx
    6b20:	000027c8 	andeq	r2, r0, r8, asr #15
    6b24:	000027ec 	andeq	r2, r0, ip, ror #15
    6b28:	03769c01 	cmneq	r6, #256	; 0x100
    6b2c:	70110000 	andsvc	r0, r1, r0
    6b30:	01007968 	tsteq	r0, r8, ror #18
    6b34:	00691e37 	rsbeq	r1, r9, r7, lsr lr
    6b38:	298f0000 	stmibcs	pc, {}	; <UNPREDICTABLE>
    6b3c:	66130000 	ldrvs	r0, [r3], -r0
    6b40:	37010064 	strcc	r0, [r1, -r4, rrx]
    6b44:	00006927 	andeq	r6, r0, r7, lsr #18
    6b48:	00510100 	subseq	r0, r1, r0, lsl #2
    6b4c:	001ca014 	andseq	sl, ip, r4, lsl r0
    6b50:	0c210100 	stfeqs	f0, [r1], #-0
    6b54:	00006901 	andeq	r6, r0, r1, lsl #18
    6b58:	00282000 	eoreq	r2, r8, r0
    6b5c:	00286800 	eoreq	r6, r8, r0, lsl #16
    6b60:	119c0100 	orrsne	r0, ip, r0, lsl #2
    6b64:	00796870 	rsbseq	r6, r9, r0, ror r8
    6b68:	691e2101 	ldmdbvs	lr, {r0, r8, sp}
    6b6c:	ad000000 	stcge	0, cr0, [r0, #-0]
    6b70:	11000029 	tstne	r0, r9, lsr #32
    6b74:	01006466 	tsteq	r0, r6, ror #8
    6b78:	00692721 	rsbeq	r2, r9, r1, lsr #14
    6b7c:	29cb0000 	stmibcs	fp, {}^	; <UNPREDICTABLE>
    6b80:	f1150000 			; <UNDEFINED> instruction: 0xf1150000
    6b84:	0100000d 	tsteq	r0, sp
    6b88:	009d3321 	addseq	r3, sp, r1, lsr #6
    6b8c:	29e90000 	stmibcs	r9!, {}^	; <UNPREDICTABLE>
    6b90:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
    6b94:	06250100 	strteq	r0, [r5], -r0, lsl #2
    6b98:	00000069 	andeq	r0, r0, r9, rrx
    6b9c:	03190000 	tsteq	r9, #0
    6ba0:	00030000 	andeq	r0, r3, r0
    6ba4:	00001d91 	muleq	r0, r1, sp
    6ba8:	00d00104 	sbcseq	r0, r0, r4, lsl #2
    6bac:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
    6bb0:	a300001d 	movwge	r0, #29
    6bb4:	60000000 	andvs	r0, r0, r0
    6bb8:	0000000d 	andeq	r0, r0, sp
    6bbc:	c5000000 	strgt	r0, [r0, #-0]
    6bc0:	02000054 	andeq	r0, r0, #84	; 0x54
    6bc4:	029d0601 	addseq	r0, sp, #1048576	; 0x100000
    6bc8:	02020000 	andeq	r0, r2, #0
    6bcc:	0002b905 	andeq	fp, r2, r5, lsl #18
    6bd0:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    6bd4:	0000005c 	andeq	r0, r0, ip, asr r0
    6bd8:	57050802 	strpl	r0, [r5, -r2, lsl #16]
    6bdc:	02000000 	andeq	r0, r0, #0
    6be0:	029b0801 	addseq	r0, fp, #65536	; 0x10000
    6be4:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    6be8:	02000023 	andeq	r0, r0, #35	; 0x23
    6bec:	00541931 	subseq	r1, r4, r1, lsr r9
    6bf0:	02020000 	andeq	r0, r2, #0
    6bf4:	0001ca07 	andeq	ip, r1, r7, lsl #20
    6bf8:	1ecb0300 	cdpne	3, 12, cr0, cr11, cr0, {0}
    6bfc:	34020000 	strcc	r0, [r2], #-0
    6c00:	00006719 	andeq	r6, r0, r9, lsl r7
    6c04:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6c08:	00000045 	andeq	r0, r0, r5, asr #32
    6c0c:	40070802 	andmi	r0, r7, r2, lsl #16
    6c10:	04000000 	streq	r0, [r0], #-0
    6c14:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    6c18:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    6c1c:	00004a07 	andeq	r4, r0, r7, lsl #20
    6c20:	02590300 	subseq	r0, r9, #0, 6
    6c24:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    6c28:	00008f1b 	andeq	r8, r0, fp, lsl pc
    6c2c:	008a0500 	addeq	r0, sl, r0, lsl #10
    6c30:	05040000 	streq	r0, [r4, #-0]
    6c34:	0000a700 	andeq	sl, r0, r0, lsl #14
    6c38:	03310600 	teqeq	r1, #0, 12
    6c3c:	00a70000 	adceq	r0, r7, r0
    6c40:	01000000 	mrseq	r0, (UNDEF: 0)
    6c44:	03040700 	movweq	r0, #18176	; 0x4700
    6c48:	0000008c 	andeq	r0, r0, ip, lsl #1
    6c4c:	83186303 	tsthi	r8, #201326592	; 0xc000000
    6c50:	03000000 	movweq	r0, #0
    6c54:	00001d85 	andeq	r1, r0, r5, lsl #27
    6c58:	48122704 	ldmdami	r2, {r2, r8, r9, sl, sp}
    6c5c:	03000000 	movweq	r0, #0
    6c60:	00001d71 	andeq	r1, r0, r1, ror sp
    6c64:	5b122c04 	blpl	491c7c <__ccfg+0x471cd4>
    6c68:	03000000 	movweq	r0, #0
    6c6c:	0000021e 	andeq	r0, r0, lr, lsl r2
    6c70:	5b122d04 	blpl	492088 <__ccfg+0x4720e0>
    6c74:	03000000 	movweq	r0, #0
    6c78:	00000251 	andeq	r0, r0, r1, asr r2
    6c7c:	e5102e04 	ldr	r2, [r0, #-3588]	; 0xfffff1fc
    6c80:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6c84:	0000b504 	andeq	fp, r0, r4, lsl #10
    6c88:	f1040800 			; <UNDEFINED> instruction: 0xf1040800
    6c8c:	02000000 	andeq	r0, r0, #0
    6c90:	02a40801 	adceq	r0, r4, #65536	; 0x10000
    6c94:	f1090000 			; <UNDEFINED> instruction: 0xf1090000
    6c98:	0a000000 	beq	6ca0 <__exidx_end+0x1d73>
    6c9c:	000000f8 	strdeq	r0, [r0], -r8
    6ca0:	00000108 	andeq	r0, r0, r8, lsl #2
    6ca4:	fd09000b 	stc2	0, cr0, [r9, #-44]	; 0xffffffd4
    6ca8:	0c000000 	stceq	0, cr0, [r0], {-0}
    6cac:	00000c00 	andeq	r0, r0, r0, lsl #24
    6cb0:	16017f06 	strne	r7, [r1], -r6, lsl #30
    6cb4:	00000108 	andeq	r0, r0, r8, lsl #2
    6cb8:	010d0101 	tsteq	sp, r1, lsl #2
    6cbc:	00001d10 	andeq	r1, r0, r0, lsl sp
    6cc0:	01079101 	tsteq	r7, r1, lsl #2
    6cc4:	000000eb 	andeq	r0, r0, fp, ror #1
    6cc8:	00002aac 	andeq	r2, r0, ip, lsr #21
    6ccc:	00002afc 	strdeq	r2, [r0], -ip
    6cd0:	01919c01 	orrseq	r9, r1, r1, lsl #24
    6cd4:	720e0000 	andvc	r0, lr, #0
    6cd8:	01007365 	tsteq	r0, r5, ror #6
    6cdc:	00eb1491 	smlaleq	r1, fp, r1, r4
    6ce0:	2a070000 	bcs	1c6ce8 <__ccfg+0x1a6d40>
    6ce4:	660e0000 	strvs	r0, [lr], -r0
    6ce8:	9101006d 	tstls	r1, sp, rrx
    6cec:	00019125 	andeq	r9, r1, r5, lsr #2
    6cf0:	002a5100 	eoreq	r5, sl, r0, lsl #2
    6cf4:	71610e00 	cmnvc	r1, r0, lsl #28
    6cf8:	31910100 	orrscc	r0, r1, r0, lsl #2
    6cfc:	000000a9 	andeq	r0, r0, r9, lsr #1
    6d00:	00002a90 	muleq	r0, r0, sl
    6d04:	6c6d660f 	stclvs	6, cr6, [sp], #-60	; 0xffffffc4
    6d08:	07930100 	ldreq	r0, [r3, r0, lsl #2]
    6d0c:	000000b5 	strheq	r0, [r0], -r5
    6d10:	00002ac4 	andeq	r2, r0, r4, asr #21
    6d14:	0100640f 	tsteq	r0, pc, lsl #8
    6d18:	00b50c93 	umlalseq	r0, r5, r3, ip
    6d1c:	2ae20000 	bcs	ff886d24 <_estack+0xdf881d24>
    6d20:	16100000 	ldrne	r0, [r0], -r0
    6d24:	0100001d 	tsteq	r0, sp, lsl r0
    6d28:	2ad6019e 	bcs	ff5873a8 <_estack+0xdf5823a8>
    6d2c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6d30:	0000f804 	andeq	pc, r0, r4, lsl #16
    6d34:	21011100 	mrscs	r1, (UNDEF: 17)
    6d38:	0100001d 	tsteq	r0, sp, lsl r0
    6d3c:	b5010608 	strlt	r0, [r1, #-1544]	; 0xfffff9f8
    6d40:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    6d44:	ac000028 	stcge	0, cr0, [r0], {40}	; 0x28
    6d48:	0100002a 	tsteq	r0, sl, lsr #32
    6d4c:	65720e9c 	ldrbvs	r0, [r2, #-3740]!	; 0xfffff164
    6d50:	08010073 	stmdaeq	r1, {r0, r1, r4, r5, r6}
    6d54:	0000eb1a 	andeq	lr, r0, sl, lsl fp
    6d58:	002af500 	eoreq	pc, sl, r0, lsl #10
    6d5c:	006e0e00 	rsbeq	r0, lr, r0, lsl #28
    6d60:	b5240801 	strlt	r0, [r4, #-2049]!	; 0xfffff7ff
    6d64:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6d68:	0e00002b 	cdpeq	0, 0, cr0, cr0, cr11, {1}
    6d6c:	01006d66 	tsteq	r0, r6, ror #26
    6d70:	01913308 	orrseq	r3, r1, r8, lsl #6
    6d74:	2b1b0000 	blcs	6c6d7c <__ccfg+0x6a6dd4>
    6d78:	610e0000 	mrsvs	r0, (UNDEF: 14)
    6d7c:	08010070 	stmdaeq	r1, {r4, r5, r6}
    6d80:	0000a93f 	andeq	sl, r0, pc, lsr r9
    6d84:	002b4400 	eoreq	r4, fp, r0, lsl #8
    6d88:	00630f00 	rsbeq	r0, r3, r0, lsl #30
    6d8c:	f1070a01 			; <UNDEFINED> instruction: 0xf1070a01
    6d90:	e6000000 	str	r0, [r0], -r0
    6d94:	1200002b 	andne	r0, r0, #43	; 0x2b
    6d98:	0b010064 	bleq	46f30 <__ccfg+0x26f88>
    6d9c:	0000b507 	andeq	fp, r0, r7, lsl #10
    6da0:	54910400 	ldrpl	r0, [r1], #1024	; 0x400
    6da4:	1c130623 	ldcne	6, cr0, [r3], {35}	; 0x23
    6da8:	0100001d 	tsteq	r0, sp, lsl r0
    6dac:	6801070d 	stmdavs	r1, {r0, r2, r3, r8, r9, sl}
    6db0:	88000028 	stmdahi	r0, {r3, r5}
    6db4:	01000028 	tsteq	r0, r8, lsr #32
    6db8:	007c059c 			; <UNDEFINED> instruction: 0x007c059c
    6dbc:	32060823 	andcc	r0, r6, #2293760	; 0x230000
    6dc0:	14000002 	strne	r0, [r0], #-2
    6dc4:	0d010063 	stceq	0, cr0, [r1, #-396]	; 0xfffffe74
    6dc8:	0000b512 	andeq	fp, r0, r2, lsl r5
    6dcc:	00500100 	subseq	r0, r0, r0, lsl #2
    6dd0:	6c6f4515 	cfstr64vs	mvdx4, [pc], #-84	; 6d84 <__exidx_end+0x1e57>
    6dd4:	01880100 	orreq	r0, r8, r0, lsl #2
    6dd8:	000028c2 	andeq	r2, r0, r2, asr #17
    6ddc:	74655215 	strbtvc	r5, [r5], #-533	; 0xfffffdeb
    6de0:	018b0100 	orreq	r0, fp, r0, lsl #2
    6de4:	00002918 	andeq	r2, r0, r8, lsl r9
    6de8:	000d1016 	andeq	r1, sp, r6, lsl r0
    6dec:	00026e00 	andeq	r6, r2, r0, lsl #28
    6df0:	61761700 	cmnvs	r6, r0, lsl #14
    6df4:	3a01006c 	bcc	46fac <__ccfg+0x27004>
    6df8:	0000b50a 	andeq	fp, r0, sl, lsl #10
    6dfc:	00690f00 	rsbeq	r0, r9, r0, lsl #30
    6e00:	75133a01 	ldrvc	r3, [r3, #-2561]	; 0xfffff5ff
    6e04:	cc000000 	stcgt	0, cr0, [r0], {-0}
    6e08:	0000002c 	andeq	r0, r0, ip, lsr #32
    6e0c:	000ce816 	andeq	lr, ip, r6, lsl r8
    6e10:	00029600 	andeq	r9, r2, r0, lsl #12
    6e14:	61760f00 	cmnvs	r6, r0, lsl #30
    6e18:	4601006c 	strmi	r0, [r1], -ip, rrx
    6e1c:	0000b50a 	andeq	fp, r0, sl, lsl #10
    6e20:	002cdf00 	eoreq	sp, ip, r0, lsl #30
    6e24:	00690f00 	rsbeq	r0, r9, r0, lsl #30
    6e28:	b50f4601 	strlt	r4, [pc, #-1537]	; 682f <__exidx_end+0x1902>
    6e2c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6e30:	0000002d 	andeq	r0, r0, sp, lsr #32
    6e34:	000d4816 	andeq	r4, sp, r6, lsl r8
    6e38:	0002be00 	andeq	fp, r2, r0, lsl #28
    6e3c:	61760f00 	cmnvs	r6, r0, lsl #30
    6e40:	5501006c 	strpl	r0, [r1, #-108]	; 0xffffff94
    6e44:	0000c10c 	andeq	ip, r0, ip, lsl #2
    6e48:	002d3100 	eoreq	r3, sp, r0, lsl #2
    6e4c:	00690f00 	rsbeq	r0, r9, r0, lsl #30
    6e50:	c1115501 	tstgt	r1, r1, lsl #10
    6e54:	44000000 	strmi	r0, [r0], #-0
    6e58:	0000002d 	andeq	r0, r0, sp, lsr #32
    6e5c:	002a3a18 	eoreq	r3, sl, r8, lsl sl
    6e60:	002a6400 	eoreq	r6, sl, r0, lsl #8
    6e64:	0002e800 	andeq	lr, r2, r0, lsl #16
    6e68:	61761200 	cmnvs	r6, r0, lsl #4
    6e6c:	6001006c 	andvs	r0, r1, ip, rrx
    6e70:	0000c10c 	andeq	ip, r0, ip, lsl #2
    6e74:	0f590100 	svceq	0x00590100
    6e78:	61010069 	tstvs	r1, r9, rrx
    6e7c:	0000750a 	andeq	r7, r0, sl, lsl #10
    6e80:	002d6d00 	eoreq	r6, sp, r0, lsl #26
    6e84:	30160000 	andscc	r0, r6, r0
    6e88:	0200000d 	andeq	r0, r0, #13
    6e8c:	0f000003 	svceq	0x00000003
    6e90:	006c6176 	rsbeq	r6, ip, r6, ror r1
    6e94:	b50a7101 	strlt	r7, [sl, #-257]	; 0xfffffeff
    6e98:	80000000 	andhi	r0, r0, r0
    6e9c:	0000002d 	andeq	r0, r0, sp, lsr #32
    6ea0:	002a8219 	eoreq	r8, sl, r9, lsl r2
    6ea4:	002a9e00 	eoreq	r9, sl, r0, lsl #28
    6ea8:	74730f00 	ldrbtvc	r0, [r3], #-3840	; 0xfffff100
    6eac:	0b780100 	bleq	1e072b4 <__ccfg+0x1de730c>
    6eb0:	000000eb 	andeq	r0, r0, fp, ror #1
    6eb4:	00002da0 	andeq	r2, r0, r0, lsr #27
    6eb8:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    6ebc:	03000002 	movweq	r0, #2
    6ec0:	001ef900 	andseq	pc, lr, r0, lsl #18
    6ec4:	d0010400 	andle	r0, r1, r0, lsl #8
    6ec8:	0c000000 	stceq	0, cr0, [r0], {-0}
    6ecc:	00001d8a 	andeq	r1, r0, sl, lsl #27
    6ed0:	000000a3 	andeq	r0, r0, r3, lsr #1
    6ed4:	00000e08 	andeq	r0, r0, r8, lsl #28
    6ed8:	00000000 	andeq	r0, r0, r0
    6edc:	00005850 	andeq	r5, r0, r0, asr r8
    6ee0:	9d060102 	stflss	f0, [r6, #-8]
    6ee4:	02000002 	andeq	r0, r0, #2
    6ee8:	02b90502 	adcseq	r0, r9, #8388608	; 0x800000
    6eec:	04020000 	streq	r0, [r2], #-0
    6ef0:	00005c05 	andeq	r5, r0, r5, lsl #24
    6ef4:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    6ef8:	00000057 	andeq	r0, r0, r7, asr r0
    6efc:	001f3303 	andseq	r3, pc, r3, lsl #6
    6f00:	182e0200 	stmdane	lr!, {r9}
    6f04:	0000004d 	andeq	r0, r0, sp, asr #32
    6f08:	9b080102 	blls	207318 <__ccfg+0x1e7370>
    6f0c:	03000002 	movweq	r0, #2
    6f10:	00002329 	andeq	r2, r0, r9, lsr #6
    6f14:	60193102 	andsvs	r3, r9, r2, lsl #2
    6f18:	02000000 	andeq	r0, r0, #0
    6f1c:	01ca0702 	biceq	r0, sl, r2, lsl #14
    6f20:	cb030000 	blgt	c6f28 <__ccfg+0xa6f80>
    6f24:	0200001e 	andeq	r0, r0, #30
    6f28:	00731934 	rsbseq	r1, r3, r4, lsr r9
    6f2c:	04020000 	streq	r0, [r2], #-0
    6f30:	00004507 	andeq	r4, r0, r7, lsl #10
    6f34:	07080200 	streq	r0, [r8, -r0, lsl #4]
    6f38:	00000040 	andeq	r0, r0, r0, asr #32
    6f3c:	69050404 	stmdbvs	r5, {r2, sl}
    6f40:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    6f44:	004a0704 	subeq	r0, sl, r4, lsl #14
    6f48:	59030000 	stmdbpl	r3, {}	; <UNPREDICTABLE>
    6f4c:	03000002 	movweq	r0, #2
    6f50:	009b1b28 	addseq	r1, fp, r8, lsr #22
    6f54:	8a050000 	bhi	146f5c <__ccfg+0x126fb4>
    6f58:	04000000 	streq	r0, [r0], #-0
    6f5c:	00b30005 	adcseq	r0, r3, r5
    6f60:	31060000 	mrscc	r0, (UNDEF: 6)
    6f64:	b3000003 	movwlt	r0, #3
    6f68:	00000000 	andeq	r0, r0, r0
    6f6c:	04070001 	streq	r0, [r7], #-1
    6f70:	00008c03 	andeq	r8, r0, r3, lsl #24
    6f74:	18630300 	stmdane	r3!, {r8, r9}^
    6f78:	0000008f 	andeq	r0, r0, pc, lsl #1
    6f7c:	00082503 	andeq	r2, r8, r3, lsl #10
    6f80:	12260400 	eorne	r0, r6, #0, 8
    6f84:	00000041 	andeq	r0, r0, r1, asr #32
    6f88:	001d8503 	andseq	r8, sp, r3, lsl #10
    6f8c:	12270400 	eorne	r0, r7, #0, 8
    6f90:	00000054 	andeq	r0, r0, r4, asr r0
    6f94:	001d7103 	andseq	r7, sp, r3, lsl #2
    6f98:	122c0400 	eorne	r0, ip, #0, 8
    6f9c:	00000067 	andeq	r0, r0, r7, rrx
    6fa0:	00cd0408 	sbceq	r0, sp, r8, lsl #8
    6fa4:	04080000 	streq	r0, [r8], #-0
    6fa8:	000000f1 	strdeq	r0, [r0], -r1
    6fac:	a4080102 	strge	r0, [r8], #-258	; 0xfffffefe
    6fb0:	09000002 	stmdbeq	r0, {r1}
    6fb4:	000000f1 	strdeq	r0, [r0], -r1
    6fb8:	1d77010a 	ldfnee	f0, [r7, #-40]!	; 0xffffffd8
    6fbc:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    6fc0:	00810105 	addeq	r0, r1, r5, lsl #2
    6fc4:	2afc0000 	bcs	fff06fcc <_estack+0xdff01fcc>
    6fc8:	2e8e0000 	cdpcs	0, 8, cr0, cr14, cr0, {0}
    6fcc:	9c010000 	stcls	0, cr0, [r1], {-0}
    6fd0:	00000290 	muleq	r0, r0, r2
    6fd4:	6675620b 	ldrbtvs	r6, [r5], -fp, lsl #4
    6fd8:	18080100 	stmdane	r8, {r8}
    6fdc:	00000290 	muleq	r0, r0, r2
    6fe0:	00002db3 			; <UNDEFINED> instruction: 0x00002db3
    6fe4:	746d660b 	strbtvc	r6, [sp], #-1547	; 0xfffff9f5
    6fe8:	29080100 	stmdbcs	r8, {r8}
    6fec:	00000290 	muleq	r0, r0, r2
    6ff0:	00002faa 	andeq	r2, r0, sl, lsr #31
    6ff4:	0070610b 	rsbseq	r6, r0, fp, lsl #2
    6ff8:	b5360801 	ldrlt	r0, [r6, #-2049]!	; 0xfffff7ff
    6ffc:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    7000:	0c00002f 	stceq	0, cr0, [r0], {47}	; 0x2f
    7004:	0100636e 	tsteq	r0, lr, ror #6
    7008:	0081060a 	addeq	r0, r1, sl, lsl #12
    700c:	306e0000 	rsbcc	r0, lr, r0
    7010:	7d0d0000 	stcvc	0, cr0, [sp, #-0]
    7014:	0100001d 	tsteq	r0, sp, lsl r0
    7018:	690d114e 	stmdbvs	sp, {r1, r2, r3, r6, r8, ip}
    701c:	0100001d 	tsteq	r0, sp, lsl r0
    7020:	be0e1655 	mcrlt	6, 0, r1, cr14, cr5, {2}
    7024:	2e00002b 	cdpcs	0, 0, cr0, cr0, cr11, {1}
    7028:	9200002c 	andls	r0, r0, #44	; 0x2c
    702c:	0f000001 	svceq	0x00000001
    7030:	00706176 	rsbseq	r6, r0, r6, ror r1
    7034:	e5114e01 	ldr	r4, [r1, #-3585]	; 0xfffff1ff
    7038:	01000000 	mrseq	r0, (UNDEF: 0)
    703c:	666d0c56 			; <UNDEFINED> instruction: 0x666d0c56
    7040:	114e0100 	mrsne	r0, (UNDEF: 94)
    7044:	000000c1 	andeq	r0, r0, r1, asr #1
    7048:	000030fa 	strdeq	r3, [r0], -sl
    704c:	2c2e0e00 	stccs	14, cr0, [lr], #-0
    7050:	2c760000 	ldclcs	0, cr0, [r6], #-0
    7054:	01ae0000 			; <UNDEFINED> instruction: 0x01ae0000
    7058:	760f0000 	strvc	r0, [pc], -r0
    705c:	01007061 	tsteq	r0, r1, rrx
    7060:	00e5114f 	rsceq	r1, r5, pc, asr #2
    7064:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    7068:	0db81000 	ldceq	0, cr1, [r8]
    706c:	01df0000 	bicseq	r0, pc, r0
    7070:	760f0000 	strvc	r0, [pc], -r0
    7074:	01007061 	tsteq	r0, r1, rrx
    7078:	00e51150 	rsceq	r1, r5, r0, asr r1
    707c:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    7080:	00636411 	rsbeq	r6, r3, r1, lsl r4
    7084:	81115001 	tsthi	r1, r1
    7088:	0c000000 	stceq	0, cr0, [r0], {-0}
    708c:	50010063 	andpl	r0, r1, r3, rrx
    7090:	0000f111 	andeq	pc, r0, r1, lsl r1	; <UNPREDICTABLE>
    7094:	00311800 	eorseq	r1, r1, r0, lsl #16
    7098:	d0100000 	andsle	r0, r0, r0
    709c:	0600000d 	streq	r0, [r0], -sp
    70a0:	0f000002 	svceq	0x00000002
    70a4:	00706176 	rsbseq	r6, r0, r6, ror r1
    70a8:	96165501 	ldrls	r5, [r6], -r1, lsl #10
    70ac:	01000002 	tsteq	r0, r2
    70b0:	666d0c5e 			; <UNDEFINED> instruction: 0x666d0c5e
    70b4:	16550100 	ldrbne	r0, [r5], -r0, lsl #2
    70b8:	000000c1 	andeq	r0, r0, r1, asr #1
    70bc:	00003136 	andeq	r3, r0, r6, lsr r1
    70c0:	0d801000 	stceq	0, cr1, [r0]
    70c4:	021e0000 	andseq	r0, lr, #0
    70c8:	760f0000 	strvc	r0, [pc], -r0
    70cc:	01007061 	tsteq	r0, r1, rrx
    70d0:	02961656 	addseq	r1, r6, #90177536	; 0x5600000
    70d4:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    70d8:	0de81000 	stcleq	0, cr1, [r8]
    70dc:	024f0000 	subeq	r0, pc, #0
    70e0:	760f0000 	strvc	r0, [pc], -r0
    70e4:	01007061 	tsteq	r0, r1, rrx
    70e8:	02961657 	addseq	r1, r6, #91226112	; 0x5700000
    70ec:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    70f0:	00636411 	rsbeq	r6, r3, r1, lsl r4
    70f4:	81165701 	tsthi	r6, r1, lsl #14
    70f8:	0c000000 	stceq	0, cr0, [r0], {-0}
    70fc:	57010063 	strpl	r0, [r1, -r3, rrx]
    7100:	0000f116 	andeq	pc, r0, r6, lsl r1	; <UNPREDICTABLE>
    7104:	00315400 	eorseq	r5, r1, r0, lsl #8
    7108:	440e0000 	strmi	r0, [lr], #-0
    710c:	5800002e 	stmdapl	r0, {r1, r2, r3, r5}
    7110:	7900002e 	stmdbvc	r0, {r1, r2, r3, r5}
    7114:	0c000002 	stceq	0, cr0, [r0], {2}
    7118:	5c010063 	stcpl	0, cr0, [r1], {99}	; 0x63
    711c:	0000f109 	andeq	pc, r0, r9, lsl #2
    7120:	00317200 	eorseq	r7, r1, r0, lsl #4
    7124:	61730f00 	cmnvs	r3, r0, lsl #30
    7128:	5c010070 	stcpl	0, cr0, [r1], {112}	; 0x70
    712c:	0000eb0d 	andeq	lr, r0, sp, lsl #22
    7130:	00560100 	subseq	r0, r6, r0, lsl #2
    7134:	000d9812 	andeq	r9, sp, r2, lsl r8
    7138:	61730c00 	cmnvs	r3, r0, lsl #24
    713c:	66010070 			; <UNDEFINED> instruction: 0x66010070
    7140:	0000eb0a 	andeq	lr, r0, sl, lsl #22
    7144:	00318500 	eorseq	r8, r1, r0, lsl #10
    7148:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    714c:	0000f804 	andeq	pc, r0, r4, lsl #16
    7150:	d9040800 	stmdble	r4, {fp}
    7154:	00000000 	andeq	r0, r0, r0
    7158:	00000213 	andeq	r0, r0, r3, lsl r2
    715c:	1fea0003 	svcne	0x00ea0003
    7160:	01040000 	mrseq	r0, (UNDEF: 4)
    7164:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    7168:	001dd10c 	andseq	sp, sp, ip, lsl #2
    716c:	0000a300 	andeq	sl, r0, r0, lsl #6
    7170:	000e3000 	andeq	r3, lr, r0
    7174:	00000000 	andeq	r0, r0, r0
    7178:	005ab800 	subseq	fp, sl, r0, lsl #16
    717c:	06010200 	streq	r0, [r1], -r0, lsl #4
    7180:	0000029d 	muleq	r0, sp, r2
    7184:	b9050202 	stmdblt	r5, {r1, r9}
    7188:	02000002 	andeq	r0, r0, #2
    718c:	005c0504 	subseq	r0, ip, r4, lsl #10
    7190:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7194:	00005705 	andeq	r5, r0, r5, lsl #14
    7198:	08010200 	stmdaeq	r1, {r9}
    719c:	0000029b 	muleq	r0, fp, r2
    71a0:	00232903 	eoreq	r2, r3, r3, lsl #18
    71a4:	19310200 	ldmdbne	r1!, {r9}
    71a8:	00000054 	andeq	r0, r0, r4, asr r0
    71ac:	ca070202 	bgt	1c79bc <__ccfg+0x1a7a14>
    71b0:	03000001 	movweq	r0, #1
    71b4:	00001ecb 	andeq	r1, r0, fp, asr #29
    71b8:	67193402 	ldrvs	r3, [r9, -r2, lsl #8]
    71bc:	02000000 	andeq	r0, r0, #0
    71c0:	00450704 	subeq	r0, r5, r4, lsl #14
    71c4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    71c8:	00004007 	andeq	r4, r0, r7
    71cc:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    71d0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    71d4:	4a070402 	bmi	1c81e4 <__ccfg+0x1a823c>
    71d8:	03000000 	movweq	r0, #0
    71dc:	00001d85 	andeq	r1, r0, r5, lsl #27
    71e0:	48122703 	ldmdami	r2, {r0, r1, r8, r9, sl, sp}
    71e4:	03000000 	movweq	r0, #0
    71e8:	0000021e 	andeq	r0, r0, lr, lsl r2
    71ec:	5b122d03 	blpl	492600 <__ccfg+0x472658>
    71f0:	02000000 	andeq	r0, r0, #0
    71f4:	02a40801 	adceq	r0, r4, #65536	; 0x10000
    71f8:	9b050000 	blls	147200 <__ccfg+0x127258>
    71fc:	06000000 	streq	r0, [r0], -r0
    7200:	0000038c 	andeq	r0, r0, ip, lsl #7
    7204:	10016e04 	andne	r6, r1, r4, lsl #28
    7208:	000000b4 	strheq	r0, [r0], -r4
    720c:	00ba0407 	adcseq	r0, sl, r7, lsl #8
    7210:	01080000 	mrseq	r0, (UNDEF: 8)
    7214:	000000c6 	andeq	r0, r0, r6, asr #1
    7218:	00008309 	andeq	r8, r0, r9, lsl #6
    721c:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
    7220:	09030304 	stmdbeq	r3, {r2, r8, r9}
    7224:	000000ed 	andeq	r0, r0, sp, ror #1
    7228:	0031b30b 	eorseq	fp, r1, fp, lsl #6
    722c:	03070400 	movweq	r0, #29696	; 0x7400
    7230:	00008307 	andeq	r8, r0, r7, lsl #6
    7234:	7c0b0000 	stcvc	0, cr0, [fp], {-0}
    7238:	04000004 	streq	r0, [r0], #-4
    723c:	8f080308 	svchi	0x00080308
    7240:	04000000 	streq	r0, [r0], #-0
    7244:	02d80600 	sbcseq	r0, r8, #0, 12
    7248:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    724c:	00c60303 	sbceq	r0, r6, r3, lsl #6
    7250:	a10c0000 	mrsge	r0, (UNDEF: 12)
    7254:	30000003 	andcc	r0, r0, r3
    7258:	08030b04 	stmdaeq	r3, {r2, r8, r9, fp}
    725c:	0000015d 	andeq	r0, r0, sp, asr r1
    7260:	0014440b 	andseq	r4, r4, fp, lsl #8
    7264:	03140400 	tsteq	r4, #0, 8
    7268:	00008308 	andeq	r8, r0, r8, lsl #6
    726c:	290b0000 	stmdbcs	fp, {}	; <UNPREDICTABLE>
    7270:	04000002 	streq	r0, [r0], #-2
    7274:	83080315 	movwhi	r0, #33557	; 0x8315
    7278:	02000000 	andeq	r0, r0, #0
    727c:	00038f0b 	andeq	r8, r3, fp, lsl #30
    7280:	03160400 	tsteq	r6, #0, 8
    7284:	0000a70b 	andeq	sl, r0, fp, lsl #14
    7288:	f10b0400 			; <UNDEFINED> instruction: 0xf10b0400
    728c:	0400000e 	streq	r0, [r0], #-14
    7290:	8f090317 	svchi	0x00090317
    7294:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7298:	00032a0b 	andeq	r2, r3, fp, lsl #20
    729c:	03180400 	tsteq	r8, #0, 8
    72a0:	00015d0f 	andeq	r5, r1, pc, lsl #26
    72a4:	240b0c00 	strcs	r0, [fp], #-3072	; 0xfffff400
    72a8:	04000002 	streq	r0, [r0], #-2
    72ac:	6d150319 	ldcvs	3, cr0, [r5, #-100]	; 0xffffff9c
    72b0:	2c000001 	stccs	0, cr0, [r0], {1}
    72b4:	00ed0d00 	rsceq	r0, sp, r0, lsl #26
    72b8:	016d0000 	cmneq	sp, r0
    72bc:	7c0e0000 	stcvc	0, cr0, [lr], {-0}
    72c0:	03000000 	movweq	r0, #0
    72c4:	fa040700 	blx	108ecc <__ccfg+0xe8f24>
    72c8:	06000000 	streq	r0, [r0], -r0
    72cc:	000003ac 	andeq	r0, r0, ip, lsr #7
    72d0:	1b031c04 	blne	ce2e8 <__ccfg+0xae340>
    72d4:	000000fa 	strdeq	r0, [r0], -sl
    72d8:	0002840f 	andeq	r8, r2, pc, lsl #8
    72dc:	031e0400 	tsteq	lr, #0, 8
    72e0:	00018f14 	andeq	r8, r1, r4, lsl pc
    72e4:	07010100 	streq	r0, [r1, -r0, lsl #2]
    72e8:	00017304 	andeq	r7, r1, r4, lsl #6
    72ec:	c5011000 	strgt	r1, [r1, #-0]
    72f0:	0100001d 	tsteq	r0, sp, lsl r0
    72f4:	9001011d 	andls	r0, r1, sp, lsl r1
    72f8:	0000002e 	andeq	r0, r0, lr, lsr #32
    72fc:	0100002f 	tsteq	r0, pc, lsr #32
    7300:	0002109c 	muleq	r2, ip, r0
    7304:	00731100 	rsbseq	r1, r3, r0, lsl #2
    7308:	1d010000 	stcne	0, cr0, [r1, #-0]
    730c:	00008301 	andeq	r8, r0, r1, lsl #6
    7310:	0031a300 	eorseq	sl, r1, r0, lsl #6
    7314:	0ef11200 	cdpeq	2, 15, cr1, cr1, cr0, {0}
    7318:	1d010000 	stcne	0, cr0, [r1, #-0]
    731c:	00021001 	andeq	r1, r2, r1
    7320:	0031cc00 	eorseq	ip, r1, r0, lsl #24
    7324:	1e121300 	cdpne	3, 1, cr1, cr2, cr0, {0}
    7328:	30010000 	andcc	r0, r1, r0
    732c:	0e181401 	cfmulseq	mvf1, mvf8, mvf1
    7330:	70150000 	andsvc	r0, r5, r0
    7334:	01007274 	tsteq	r0, r4, ror r2
    7338:	02101522 	andseq	r1, r0, #142606336	; 0x8800000
    733c:	03050000 	movweq	r0, #20480	; 0x5000
    7340:	20000210 	andcs	r0, r0, r0, lsl r2
    7344:	6e656c15 	mcrvs	12, 3, r6, cr5, cr5, {0}
    7348:	0d230100 	stfeqs	f0, [r3, #-0]
    734c:	00000075 	andeq	r0, r0, r5, ror r0
    7350:	020c0305 	andeq	r0, ip, #335544320	; 0x14000000
    7354:	1d122000 	ldcne	0, cr2, [r2, #-0]
    7358:	0100001e 	tsteq	r0, lr, lsl r0
    735c:	00750624 	rsbseq	r0, r5, r4, lsr #12
    7360:	31f60000 	mvnscc	r0, r0
    7364:	00000000 	andeq	r0, r0, r0
    7368:	00a20407 	adceq	r0, r2, r7, lsl #8
    736c:	27000000 	strcs	r0, [r0, -r0]
    7370:	03000002 	movweq	r0, #2
    7374:	00210800 	eoreq	r0, r1, r0, lsl #16
    7378:	d0010400 	andle	r0, r1, r0, lsl #8
    737c:	0c000000 	stceq	0, cr0, [r0], {-0}
    7380:	00001e23 	andeq	r1, r0, r3, lsr #28
    7384:	000000a3 	andeq	r0, r0, r3, lsr #1
    7388:	00000e60 	andeq	r0, r0, r0, ror #28
    738c:	00000000 	andeq	r0, r0, r0
    7390:	00005c2c 	andeq	r5, r0, ip, lsr #24
    7394:	9d060102 	stflss	f0, [r6, #-8]
    7398:	02000002 	andeq	r0, r0, #2
    739c:	02b90502 	adcseq	r0, r9, #8388608	; 0x800000
    73a0:	04020000 	streq	r0, [r2], #-0
    73a4:	00005c05 	andeq	r5, r0, r5, lsl #24
    73a8:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    73ac:	00000057 	andeq	r0, r0, r7, asr r0
    73b0:	9b080102 	blls	2077c0 <__ccfg+0x1e7818>
    73b4:	03000002 	movweq	r0, #2
    73b8:	00002329 	andeq	r2, r0, r9, lsr #6
    73bc:	54193102 	ldrpl	r3, [r9], #-258	; 0xfffffefe
    73c0:	02000000 	andeq	r0, r0, #0
    73c4:	01ca0702 	biceq	r0, sl, r2, lsl #14
    73c8:	cb030000 	blgt	c73d0 <__ccfg+0xa7428>
    73cc:	0200001e 	andeq	r0, r0, #30
    73d0:	00671934 	rsbeq	r1, r7, r4, lsr r9
    73d4:	04020000 	streq	r0, [r2], #-0
    73d8:	00004507 	andeq	r4, r0, r7, lsl #10
    73dc:	07080200 	streq	r0, [r8, -r0, lsl #4]
    73e0:	00000040 	andeq	r0, r0, r0, asr #32
    73e4:	69050404 	stmdbvs	r5, {r2, sl}
    73e8:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    73ec:	004a0704 	subeq	r0, sl, r4, lsl #14
    73f0:	85030000 	strhi	r0, [r3, #-0]
    73f4:	0300001d 	movweq	r0, #29
    73f8:	00481227 	subeq	r1, r8, r7, lsr #4
    73fc:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
    7400:	03000002 	movweq	r0, #2
    7404:	005b122d 	subseq	r1, fp, sp, lsr #4
    7408:	51030000 	mrspl	r0, (UNDEF: 3)
    740c:	03000002 	movweq	r0, #2
    7410:	00a7102e 	adceq	r1, r7, lr, lsr #32
    7414:	04050000 	streq	r0, [r5], #-0
    7418:	00000083 	andeq	r0, r0, r3, lsl #1
    741c:	00b30405 	adcseq	r0, r3, r5, lsl #8
    7420:	01020000 	mrseq	r0, (UNDEF: 2)
    7424:	0002a408 	andeq	sl, r2, r8, lsl #8
    7428:	038c0600 	orreq	r0, ip, #0, 12
    742c:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
    7430:	00c71001 	sbceq	r1, r7, r1
    7434:	04050000 	streq	r0, [r5], #-0
    7438:	000000cd 	andeq	r0, r0, sp, asr #1
    743c:	00d90107 	sbcseq	r0, r9, r7, lsl #2
    7440:	83080000 	movwhi	r0, #32768	; 0x8000
    7444:	00000000 	andeq	r0, r0, r0
    7448:	03040809 	movweq	r0, #18441	; 0x4809
    744c:	01000903 	tsteq	r0, r3, lsl #18
    7450:	b30a0000 	movwlt	r0, #40960	; 0xa000
    7454:	04000031 	streq	r0, [r0], #-49	; 0xffffffcf
    7458:	83070307 	movwhi	r0, #29447	; 0x7307
    745c:	00000000 	andeq	r0, r0, r0
    7460:	00047c0a 	andeq	r7, r4, sl, lsl #24
    7464:	03080400 	movweq	r0, #33792	; 0x8400
    7468:	00008f08 	andeq	r8, r0, r8, lsl #30
    746c:	06000400 	streq	r0, [r0], -r0, lsl #8
    7470:	000002d8 	ldrdeq	r0, [r0], -r8
    7474:	03030904 	movweq	r0, #14596	; 0x3904
    7478:	000000d9 	ldrdeq	r0, [r0], -r9
    747c:	0003a10b 	andeq	sl, r3, fp, lsl #2
    7480:	0b043000 	bleq	113488 <__ccfg+0xf34e0>
    7484:	01700803 	cmneq	r0, r3, lsl #16
    7488:	440a0000 	strmi	r0, [sl], #-0
    748c:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    7490:	83080314 	movwhi	r0, #33556	; 0x8314
    7494:	00000000 	andeq	r0, r0, r0
    7498:	0002290a 	andeq	r2, r2, sl, lsl #18
    749c:	03150400 	tsteq	r5, #0, 8
    74a0:	00008308 	andeq	r8, r0, r8, lsl #6
    74a4:	8f0a0200 	svchi	0x000a0200
    74a8:	04000003 	streq	r0, [r0], #-3
    74ac:	ba0b0316 	blt	2c810c <__ccfg+0x2a8164>
    74b0:	04000000 	streq	r0, [r0], #-0
    74b4:	000ef10a 	andeq	pc, lr, sl, lsl #2
    74b8:	03170400 	tsteq	r7, #0, 8
    74bc:	00008f09 	andeq	r8, r0, r9, lsl #30
    74c0:	2a0a0800 	bcs	2894c8 <__ccfg+0x269520>
    74c4:	04000003 	streq	r0, [r0], #-3
    74c8:	700f0318 	andvc	r0, pc, r8, lsl r3	; <UNPREDICTABLE>
    74cc:	0c000001 	stceq	0, cr0, [r0], {1}
    74d0:	0002240a 	andeq	r2, r2, sl, lsl #8
    74d4:	03190400 	tsteq	r9, #0, 8
    74d8:	00018015 	andeq	r8, r1, r5, lsl r0
    74dc:	0c002c00 	stceq	12, cr2, [r0], {-0}
    74e0:	00000100 	andeq	r0, r0, r0, lsl #2
    74e4:	00000180 	andeq	r0, r0, r0, lsl #3
    74e8:	00007c0d 	andeq	r7, r0, sp, lsl #24
    74ec:	05000300 	streq	r0, [r0, #-768]	; 0xfffffd00
    74f0:	00010d04 	andeq	r0, r1, r4, lsl #26
    74f4:	03ac0600 			; <UNDEFINED> instruction: 0x03ac0600
    74f8:	1c040000 	stcne	0, cr0, [r4], {-0}
    74fc:	010d1b03 	tsteq	sp, r3, lsl #22
    7500:	840e0000 	strhi	r0, [lr], #-0
    7504:	04000002 	streq	r0, [r0], #-2
    7508:	a214031e 	andsge	r0, r4, #2013265920	; 0x78000000
    750c:	01000001 	tsteq	r0, r1
    7510:	86040501 	strhi	r0, [r4], -r1, lsl #10
    7514:	0f000001 	svceq	0x00000001
    7518:	000013d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    751c:	ad070d01 	stcge	13, cr0, [r7, #-4]
    7520:	01000000 	mrseq	r0, (UNDEF: 0)
    7524:	02140305 	andseq	r0, r4, #335544320	; 0x14000000
    7528:	01102000 	tsteq	r0, r0
    752c:	00001e63 	andeq	r1, r0, r3, ror #28
    7530:	01012301 	tsteq	r1, r1, lsl #6
    7534:	00002f00 	andeq	r2, r0, r0, lsl #30
    7538:	0000301c 	andeq	r3, r0, ip, lsl r0
    753c:	73119c01 	tstvc	r1, #256	; 0x100
    7540:	01000000 	mrseq	r0, (UNDEF: 0)
    7544:	00830123 	addeq	r0, r3, r3, lsr #2
    7548:	32090000 	andcc	r0, r9, #0
    754c:	f1120000 			; <UNDEFINED> instruction: 0xf1120000
    7550:	0100000e 	tsteq	r0, lr
    7554:	009b0123 	addseq	r0, fp, r3, lsr #2
    7558:	32270000 	eorcc	r0, r7, #0
    755c:	40130000 	andsmi	r0, r3, r0
    7560:	1400000e 	strne	r0, [r0], #-14
    7564:	00727470 	rsbseq	r7, r2, r0, ror r4
    7568:	ad0f2801 	stcge	8, cr2, [pc, #-4]	; 756c <__exidx_end+0x263f>
    756c:	05000000 	streq	r0, [r0, #-0]
    7570:	00021c03 	andeq	r1, r2, r3, lsl #24
    7574:	656c1420 	strbvs	r1, [ip, #-1056]!	; 0xfffffbe0
    7578:	2901006e 	stmdbcs	r1, {r1, r2, r3, r5, r6}
    757c:	0000750d 	andeq	r7, r0, sp, lsl #10
    7580:	18030500 	stmdane	r3, {r8, sl}
    7584:	12200002 	eorne	r0, r0, #2
    7588:	00001e1d 	andeq	r1, r0, sp, lsl lr
    758c:	75062a01 	strvc	r2, [r6, #-2561]	; 0xfffff5ff
    7590:	71000000 	mrsvc	r0, (UNDEF: 0)
    7594:	00000032 	andeq	r0, r0, r2, lsr r0
    7598:	14030000 	strne	r0, [r3], #-0
    759c:	00030000 	andeq	r0, r3, r0
    75a0:	00002223 	andeq	r2, r0, r3, lsr #4
    75a4:	00d00104 	sbcseq	r0, r0, r4, lsl #2
    75a8:	6e0c0000 	cdpvs	0, 0, cr0, cr12, cr0, {0}
    75ac:	a300001e 	movwge	r0, #30
    75b0:	4a000000 	bmi	75b8 <__exidx_end+0x268b>
    75b4:	0200005e 	andeq	r0, r0, #94	; 0x5e
    75b8:	029d0601 	addseq	r0, sp, #1048576	; 0x100000
    75bc:	04030000 	streq	r0, [r3], #-0
    75c0:	01000027 	tsteq	r0, r7, lsr #32
    75c4:	00301825 	eorseq	r1, r0, r5, lsr #16
    75c8:	02020000 	andeq	r0, r2, #0
    75cc:	0002b905 	andeq	fp, r2, r5, lsl #18
    75d0:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    75d4:	0000005c 	andeq	r0, r0, ip, asr r0
    75d8:	57050802 	strpl	r0, [r5, -r2, lsl #16]
    75dc:	03000000 	movweq	r0, #0
    75e0:	00001f33 	andeq	r1, r0, r3, lsr pc
    75e4:	51182e01 	tstpl	r8, r1, lsl #28
    75e8:	02000000 	andeq	r0, r0, #0
    75ec:	029b0801 	addseq	r0, fp, #65536	; 0x10000
    75f0:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    75f4:	01000023 	tsteq	r0, r3, lsr #32
    75f8:	00641931 	rsbeq	r1, r4, r1, lsr r9
    75fc:	02020000 	andeq	r0, r2, #0
    7600:	0001ca07 	andeq	ip, r1, r7, lsl #20
    7604:	1ecb0300 	cdpne	3, 12, cr0, cr11, cr0, {0}
    7608:	34010000 	strcc	r0, [r1], #-0
    760c:	00007c19 	andeq	r7, r0, r9, lsl ip
    7610:	006b0400 	rsbeq	r0, fp, r0, lsl #8
    7614:	04020000 	streq	r0, [r2], #-0
    7618:	00004507 	andeq	r4, r0, r7, lsl #10
    761c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    7620:	00000040 	andeq	r0, r0, r0, asr #32
    7624:	69050405 	stmdbvs	r5, {r0, r2, sl}
    7628:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    762c:	004a0704 	subeq	r0, sl, r4, lsl #14
    7630:	bf030000 	svclt	0x00030000
    7634:	0100001e 	tsteq	r0, lr, lsl r0
    7638:	00911a56 	addseq	r1, r1, r6, asr sl
    763c:	01020000 	mrseq	r0, (UNDEF: 2)
    7640:	0002a408 	andeq	sl, r2, r8, lsl #8
    7644:	19b10300 	ldmibne	r1!, {r8, r9}
    7648:	3b020000 	blcc	87650 <__ccfg+0x676a8>
    764c:	00006b12 	andeq	r6, r0, r2, lsl fp
    7650:	02080600 	andeq	r0, r8, #0, 12
    7654:	00db0940 	sbcseq	r0, fp, r0, asr #18
    7658:	14070000 	strne	r0, [r7], #-0
    765c:	02000015 	andeq	r0, r0, #21
    7660:	00db0d41 	sbcseq	r0, fp, r1, asr #26
    7664:	07000000 	streq	r0, [r0, -r0]
    7668:	0000153a 	andeq	r1, r0, sl, lsr r5
    766c:	db0d4202 	blle	357e7c <__ccfg+0x337ed4>
    7670:	04000000 	streq	r0, [r0], #-0
    7674:	45040800 	strmi	r0, [r4, #-2048]	; 0xfffff800
    7678:	03000000 	movweq	r0, #0
    767c:	000019c5 	andeq	r1, r0, r5, asr #19
    7680:	b7034302 	strlt	r4, [r3, -r2, lsl #6]
    7684:	03000000 	movweq	r0, #0
    7688:	00001a42 	andeq	r1, r0, r2, asr #20
    768c:	f92b3c03 			; <UNDEFINED> instruction: 0xf92b3c03
    7690:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7694:	00001a34 	andeq	r1, r0, r4, lsr sl
    7698:	156f0310 	strbne	r0, [pc, #-784]!	; 7390 <__exidx_end+0x2463>
    769c:	00000155 	andeq	r0, r0, r5, asr r1
    76a0:	00143307 	andseq	r3, r4, r7, lsl #6
    76a4:	0d700300 	ldcleq	3, cr0, [r0, #-0]
    76a8:	00000058 	andeq	r0, r0, r8, asr r0
    76ac:	170b0700 	strne	r0, [fp, -r0, lsl #14]
    76b0:	71030000 	mrsvc	r0, (UNDEF: 3)
    76b4:	0000580d 	andeq	r5, r0, sp, lsl #16
    76b8:	b0070200 	andlt	r0, r7, r0, lsl #4
    76bc:	03000017 	movweq	r0, #23
    76c0:	028c1374 	addeq	r1, ip, #116, 6	; 0xd0000001
    76c4:	07040000 	streq	r0, [r4, -r0]
    76c8:	00001550 	andeq	r1, r0, r0, asr r5
    76cc:	ab0c7503 	blge	324ae0 <__ccfg+0x304b38>
    76d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    76d4:	0017d207 	andseq	sp, r7, r7, lsl #4
    76d8:	067d0300 	ldrbteq	r0, [sp], -r0, lsl #6
    76dc:	00000218 	andeq	r0, r0, r8, lsl r2
    76e0:	1c75070c 	ldclne	7, cr0, [r5], #-48	; 0xffffffd0
    76e4:	81030000 	mrshi	r0, (UNDEF: 3)
    76e8:	00026206 	andeq	r6, r2, r6, lsl #4
    76ec:	03000d00 	movweq	r0, #3328	; 0xd00
    76f0:	000015b6 			; <UNDEFINED> instruction: 0x000015b6
    76f4:	612a3f03 			; <UNDEFINED> instruction: 0x612a3f03
    76f8:	09000001 	stmdbeq	r0, {r0}
    76fc:	000015a9 	andeq	r1, r0, r9, lsr #11
    7700:	15e00318 	strbne	r0, [r0, #792]!	; 0x318
    7704:	00000218 	andeq	r0, r0, r8, lsl r2
    7708:	00143307 	andseq	r3, r4, r7, lsl #6
    770c:	0de10300 	stcleq	3, cr0, [r1]
    7710:	00000058 	andeq	r0, r0, r8, asr r0
    7714:	170b0700 	strne	r0, [fp, -r0, lsl #14]
    7718:	e2030000 	and	r0, r3, #0
    771c:	0000580d 	andeq	r5, r0, sp, lsl #16
    7720:	b0070200 	andlt	r0, r7, r0, lsl #4
    7724:	03000017 	movweq	r0, #23
    7728:	028c13e5 	addeq	r1, ip, #-1811939325	; 0x94000003
    772c:	07040000 	streq	r0, [r4, -r0]
    7730:	00001550 	andeq	r1, r0, r0, asr r5
    7734:	ab0ce603 	blge	340f48 <__ccfg+0x320fa0>
    7738:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    773c:	0017d207 	andseq	sp, r7, r7, lsl #4
    7740:	06ee0300 	strbteq	r0, [lr], r0, lsl #6
    7744:	00000298 	muleq	r0, r8, r2
    7748:	1c75070c 	ldclne	7, cr0, [r5], #-48	; 0xffffffd0
    774c:	f2030000 	vhadd.s8	d0, d3, d0
    7750:	0002e206 	andeq	lr, r2, r6, lsl #4
    7754:	e9070d00 	stmdb	r7, {r8, sl, fp}
    7758:	03000014 	movweq	r0, #20
    775c:	00580df3 	ldrsheq	r0, [r8], #-211	; 0xffffff2d
    7760:	070e0000 	streq	r0, [lr, -r0]
    7764:	00001884 	andeq	r1, r0, r4, lsl #17
    7768:	580df403 	stmdapl	sp, {r0, r1, sl, ip, sp, lr, pc}
    776c:	10000000 	andne	r0, r0, r0
    7770:	0015e107 	andseq	lr, r5, r7, lsl #2
    7774:	06fa0300 	ldrbteq	r0, [sl], r0, lsl #6
    7778:	0000030c 	andeq	r0, r0, ip, lsl #6
    777c:	1a950712 	bne	fe5493cc <_estack+0xde5443cc>
    7780:	fb030000 	blx	c778a <__ccfg+0xa77e2>
    7784:	0000450c 	andeq	r4, r0, ip, lsl #10
    7788:	9e071300 	cdpls	3, 0, cr1, cr7, cr0, {0}
    778c:	0300001a 	movweq	r0, #26
    7790:	00450cfc 	strdeq	r0, [r5], #-204	; 0xffffff34
    7794:	07140000 	ldreq	r0, [r4, -r0]
    7798:	00001aa7 	andeq	r1, r0, r7, lsr #21
    779c:	450cfd03 	strmi	pc, [ip, #-3331]	; 0xfffff2fd
    77a0:	15000000 	strne	r0, [r0, #-0]
    77a4:	001ab007 	andseq	fp, sl, r7
    77a8:	0dfe0300 	ldcleq	3, cr0, [lr]
    77ac:	00000058 	andeq	r0, r0, r8, asr r0
    77b0:	01060016 	tsteq	r6, r6, lsl r0
    77b4:	62047603 	andvs	r7, r4, #3145728	; 0x300000
    77b8:	0a000002 	beq	77c8 <__exidx_end+0x289b>
    77bc:	00001c94 	muleq	r0, r4, ip
    77c0:	450f7703 	strmi	r7, [pc, #-1795]	; 70c5 <__exidx_end+0x2198>
    77c4:	01000000 	mrseq	r0, (UNDEF: 0)
    77c8:	0a000404 	beq	87e0 <__exidx_end+0x38b3>
    77cc:	0000161a 	andeq	r1, r0, sl, lsl r6
    77d0:	450f7803 	strmi	r7, [pc, #-2051]	; 6fd5 <__exidx_end+0x20a8>
    77d4:	01000000 	mrseq	r0, (UNDEF: 0)
    77d8:	0a000301 	beq	83e4 <__exidx_end+0x34b7>
    77dc:	000016cf 	andeq	r1, r0, pc, asr #13
    77e0:	450f7a03 	strmi	r7, [pc, #-2563]	; 6de5 <__exidx_end+0x1eb8>
    77e4:	01000000 	mrseq	r0, (UNDEF: 0)
    77e8:	0a000102 	beq	7bf8 <__exidx_end+0x2ccb>
    77ec:	00001486 	andeq	r1, r0, r6, lsl #9
    77f0:	450f7b03 	strmi	r7, [pc, #-2819]	; 6cf5 <__exidx_end+0x1dc8>
    77f4:	01000000 	mrseq	r0, (UNDEF: 0)
    77f8:	00000001 	andeq	r0, r0, r1
    77fc:	7e030106 	adfvcs	f0, f3, f6
    7800:	00028c04 	andeq	r8, r2, r4, lsl #24
    7804:	1acc0a00 	bne	ff30a00c <_estack+0xdf30500c>
    7808:	7f030000 	svcvc	0x00030000
    780c:	0000450f 	andeq	r4, r0, pc, lsl #10
    7810:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    7814:	1c380a00 			; <UNDEFINED> instruction: 0x1c380a00
    7818:	80030000 	andhi	r0, r3, r0
    781c:	0000450f 	andeq	r4, r0, pc, lsl #10
    7820:	00040100 	andeq	r0, r4, r0, lsl #2
    7824:	04080000 	streq	r0, [r8], #-0
    7828:	000000ed 	andeq	r0, r0, sp, ror #1
    782c:	006b0408 	rsbeq	r0, fp, r8, lsl #8
    7830:	01060000 	mrseq	r0, (UNDEF: 6)
    7834:	e204e703 	and	lr, r4, #786432	; 0xc0000
    7838:	0a000002 	beq	7848 <__exidx_end+0x291b>
    783c:	00001c94 	muleq	r0, r4, ip
    7840:	450fe803 	strmi	lr, [pc, #-2051]	; 7045 <__exidx_end+0x2118>
    7844:	01000000 	mrseq	r0, (UNDEF: 0)
    7848:	0a000404 	beq	8860 <__exidx_end+0x3933>
    784c:	0000161a 	andeq	r1, r0, sl, lsl r6
    7850:	450fe903 	strmi	lr, [pc, #-2307]	; 6f55 <__exidx_end+0x2028>
    7854:	01000000 	mrseq	r0, (UNDEF: 0)
    7858:	0a000301 	beq	8464 <__exidx_end+0x3537>
    785c:	000016cf 	andeq	r1, r0, pc, asr #13
    7860:	450feb03 	strmi	lr, [pc, #-2819]	; 6d65 <__exidx_end+0x1e38>
    7864:	01000000 	mrseq	r0, (UNDEF: 0)
    7868:	0a000102 	beq	7c78 <__exidx_end+0x2d4b>
    786c:	00001486 	andeq	r1, r0, r6, lsl #9
    7870:	450fec03 	strmi	lr, [pc, #-3075]	; 6c75 <__exidx_end+0x1d48>
    7874:	01000000 	mrseq	r0, (UNDEF: 0)
    7878:	00000001 	andeq	r0, r0, r1
    787c:	ef030106 	svc	0x00030106
    7880:	00030c04 	andeq	r0, r3, r4, lsl #24
    7884:	1acc0a00 	bne	ff30a08c <_estack+0xdf30508c>
    7888:	f0030000 			; <UNDEFINED> instruction: 0xf0030000
    788c:	0000450f 	andeq	r4, r0, pc, lsl #10
    7890:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    7894:	1c380a00 			; <UNDEFINED> instruction: 0x1c380a00
    7898:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    789c:	0000450f 	andeq	r4, r0, pc, lsl #10
    78a0:	00040100 	andeq	r0, r4, r0, lsl #2
    78a4:	01060000 	mrseq	r0, (UNDEF: 6)
    78a8:	3604f503 	strcc	pc, [r4], -r3, lsl #10
    78ac:	0a000003 	beq	78c0 <__exidx_end+0x2993>
    78b0:	00001604 	andeq	r1, r0, r4, lsl #12
    78b4:	450ff603 	strmi	pc, [pc, #-1539]	; 72b9 <__exidx_end+0x238c>
    78b8:	01000000 	mrseq	r0, (UNDEF: 0)
    78bc:	0a000701 	beq	94c8 <__exidx_end+0x459b>
    78c0:	00001c5e 	andeq	r1, r0, lr, asr ip
    78c4:	450ff803 	strmi	pc, [pc, #-2051]	; 70c9 <__exidx_end+0x219c>
    78c8:	01000000 	mrseq	r0, (UNDEF: 0)
    78cc:	00000106 	andeq	r0, r0, r6, lsl #2
    78d0:	00e10408 	rsceq	r0, r1, r8, lsl #8
    78d4:	54030000 	strpl	r0, [r3], #-0
    78d8:	0400001b 	streq	r0, [r0], #-27	; 0xffffffe5
    78dc:	03482f3d 	movteq	r2, #36669	; 0x8f3d
    78e0:	42090000 	andmi	r0, r9, #0
    78e4:	1800001b 	stmdane	r0, {r0, r1, r3, r4}
    78e8:	d8157804 	ldmdale	r5, {r2, fp, ip, sp, lr}
    78ec:	07000003 	streq	r0, [r0, -r3]
    78f0:	00001433 	andeq	r1, r0, r3, lsr r4
    78f4:	580d7904 	stmdapl	sp, {r2, r8, fp, ip, sp, lr}
    78f8:	00000000 	andeq	r0, r0, r0
    78fc:	00170b07 	andseq	r0, r7, r7, lsl #22
    7900:	0d7a0400 	cfldrdeq	mvd0, [sl, #-0]
    7904:	00000058 	andeq	r0, r0, r8, asr r0
    7908:	17b00702 	ldrne	r0, [r0, r2, lsl #14]!
    790c:	7d040000 	stcvc	0, cr0, [r4, #-0]
    7910:	00028c13 	andeq	r8, r2, r3, lsl ip
    7914:	50070400 	andpl	r0, r7, r0, lsl #8
    7918:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    791c:	00ab0c7e 	adceq	r0, fp, lr, ror ip
    7920:	07080000 	streq	r0, [r8, -r0]
    7924:	000017d2 	ldrdeq	r1, [r0], -r2
    7928:	cb068604 	blgt	1a9140 <__ccfg+0x189198>
    792c:	0c000005 	stceq	0, cr0, [r0], {5}
    7930:	001c7507 	andseq	r7, ip, r7, lsl #10
    7934:	068a0400 	streq	r0, [sl], r0, lsl #8
    7938:	00000615 	andeq	r0, r0, r5, lsl r6
    793c:	1584070d 	strne	r0, [r4, #1805]	; 0x70d
    7940:	93040000 	movwls	r0, #16384	; 0x4000
    7944:	00063f06 	andeq	r3, r6, r6, lsl #30
    7948:	c5070e00 	strgt	r0, [r7, #-3584]	; 0xfffff200
    794c:	0400001a 	streq	r0, [r0], #-26	; 0xffffffe6
    7950:	00450c94 	umaaleq	r0, r5, r4, ip
    7954:	070f0000 	streq	r0, [pc, -r0]
    7958:	0000181e 	andeq	r1, r0, lr, lsl r8
    795c:	6b0d9504 	blvs	36cd74 <__ccfg+0x34cdcc>
    7960:	10000000 	andne	r0, r0, r0
    7964:	00145907 	andseq	r5, r4, r7, lsl #18
    7968:	0d960400 	cfldrseq	mvf0, [r6]
    796c:	000000db 	ldrdeq	r0, [r0], -fp
    7970:	63030014 	movwvs	r0, #12308	; 0x3014
    7974:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    7978:	03e42f3e 	mvneq	r2, #62, 30	; 0xf8
    797c:	51090000 	mrspl	r0, (UNDEF: 9)
    7980:	24000019 	strcs	r0, [r0], #-25	; 0xffffffe7
    7984:	c2159f04 	andsgt	r9, r5, #4, 30
    7988:	07000004 	streq	r0, [r0, -r4]
    798c:	00001433 	andeq	r1, r0, r3, lsr r4
    7990:	580da004 	stmdapl	sp, {r2, sp, pc}
    7994:	00000000 	andeq	r0, r0, r0
    7998:	00170b07 	andseq	r0, r7, r7, lsl #22
    799c:	0da10400 	cfstrseq	mvf0, [r1]
    79a0:	00000058 	andeq	r0, r0, r8, asr r0
    79a4:	17b00702 	ldrne	r0, [r0, r2, lsl #14]!
    79a8:	a4040000 	strge	r0, [r4], #-0
    79ac:	00028c13 	andeq	r8, r2, r3, lsl ip
    79b0:	50070400 	andpl	r0, r7, r0, lsl #8
    79b4:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    79b8:	00ab0ca5 	adceq	r0, fp, r5, lsr #25
    79bc:	07080000 	streq	r0, [r8, -r0]
    79c0:	000017d2 	ldrdeq	r1, [r0], -r2
    79c4:	7906ad04 	stmdbvc	r6, {r2, r8, sl, fp, sp, pc}
    79c8:	0c000006 	stceq	0, cr0, [r0], {6}
    79cc:	001c7507 	andseq	r7, ip, r7, lsl #10
    79d0:	06b10400 	ldrteq	r0, [r1], r0, lsl #8
    79d4:	000006c3 	andeq	r0, r0, r3, asr #13
    79d8:	1584070d 	strne	r0, [r4, #1805]	; 0x70d
    79dc:	c3040000 	movwgt	r0, #16384	; 0x4000
    79e0:	0006ed06 	andeq	lr, r6, r6, lsl #26
    79e4:	af070e00 	svcge	0x00070e00
    79e8:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    79ec:	077706cd 	ldrbeq	r0, [r7, -sp, asr #13]!
    79f0:	070f0000 	streq	r0, [pc, -r0]
    79f4:	0000181e 	andeq	r1, r0, lr, lsl r8
    79f8:	6b0dce04 	blvs	37b210 <__ccfg+0x35b268>
    79fc:	10000000 	andne	r0, r0, r0
    7a00:	00179a07 	andseq	r9, r7, r7, lsl #20
    7a04:	0ccf0400 	cfstrdeq	mvd0, [pc], {0}
    7a08:	00000045 	andeq	r0, r0, r5, asr #32
    7a0c:	19010714 	stmdbne	r1, {r2, r4, r8, r9, sl}
    7a10:	d1040000 	mrsle	r0, (UNDEF: 4)
    7a14:	0000450c 	andeq	r4, r0, ip, lsl #10
    7a18:	0a071500 	beq	1cce20 <__ccfg+0x1ace78>
    7a1c:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    7a20:	00450cd2 	ldrdeq	r0, [r5], #-194	; 0xffffff3e
    7a24:	07160000 	ldreq	r0, [r6, -r0]
    7a28:	000016a5 	andeq	r1, r0, r5, lsr #13
    7a2c:	f106db04 			; <UNDEFINED> instruction: 0xf106db04
    7a30:	17000007 	strne	r0, [r0, -r7]
    7a34:	001b9d07 	andseq	r9, fp, r7, lsl #26
    7a38:	0cdc0400 	cfldrdeq	mvd0, [ip], {0}
    7a3c:	000000ab 	andeq	r0, r0, fp, lsr #1
    7a40:	16d90718 			; <UNDEFINED> instruction: 0x16d90718
    7a44:	dd040000 	stcle	0, cr0, [r4, #-0]
    7a48:	00033611 	andeq	r3, r3, r1, lsl r6
    7a4c:	b4071c00 	strlt	r1, [r7], #-3072	; 0xfffff400
    7a50:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    7a54:	00db0dde 	ldrsbeq	r0, [fp], #222	; 0xde
    7a58:	00200000 	eoreq	r0, r0, r0
    7a5c:	00193203 	andseq	r3, r9, r3, lsl #4
    7a60:	3c430400 	cfstrdcc	mvd0, [r3], {-0}
    7a64:	000004ce 	andeq	r0, r0, lr, asr #9
    7a68:	0019130b 	andseq	r1, r9, fp, lsl #6
    7a6c:	1a042800 	bne	111a74 <__ccfg+0xf1acc>
    7a70:	05cb1502 	strbeq	r1, [fp, #1282]	; 0x502
    7a74:	330c0000 	movwcc	r0, #49152	; 0xc000
    7a78:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    7a7c:	580d021b 	stmdapl	sp, {r0, r1, r3, r4, r9}
    7a80:	00000000 	andeq	r0, r0, r0
    7a84:	00170b0c 	andseq	r0, r7, ip, lsl #22
    7a88:	021d0400 	andseq	r0, sp, #0, 8
    7a8c:	0000580d 	andeq	r5, r0, sp, lsl #16
    7a90:	b00c0200 	andlt	r0, ip, r0, lsl #4
    7a94:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    7a98:	8c130220 	lfmhi	f0, 4, [r3], {32}
    7a9c:	04000002 	streq	r0, [r0], #-2
    7aa0:	0015500c 	andseq	r5, r5, ip
    7aa4:	02210400 	eoreq	r0, r1, #0, 8
    7aa8:	0000ab0c 	andeq	sl, r0, ip, lsl #22
    7aac:	d20c0800 	andle	r0, ip, #0, 16
    7ab0:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    7ab4:	3b060229 	blcc	188360 <__ccfg+0x1683b8>
    7ab8:	0c000008 	stceq	0, cr0, [r0], {8}
    7abc:	001c750c 	andseq	r7, ip, ip, lsl #10
    7ac0:	022d0400 	eoreq	r0, sp, #0, 8
    7ac4:	00088a06 	andeq	r8, r8, r6, lsl #20
    7ac8:	280c0d00 	stmdacs	ip, {r8, sl, fp}
    7acc:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    7ad0:	b7060233 	smladxlt	r6, r3, r2, r0
    7ad4:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    7ad8:	00178f0c 	andseq	r8, r7, ip, lsl #30
    7adc:	02380400 	eorseq	r0, r8, #0, 8
    7ae0:	0008e406 	andeq	lr, r8, r6, lsl #8
    7ae4:	c30c1000 	movwgt	r1, #49152	; 0xc000
    7ae8:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    7aec:	450c0239 	strmi	r0, [ip, #-569]	; 0xfffffdc7
    7af0:	14000000 	strne	r0, [r0], #-0
    7af4:	0018140c 	andseq	r1, r8, ip, lsl #8
    7af8:	02410400 	subeq	r0, r1, #0, 8
    7afc:	00091106 	andeq	r1, r9, r6, lsl #2
    7b00:	450c1500 	strmi	r1, [ip, #-1280]	; 0xfffffb00
    7b04:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    7b08:	3e060255 	mcrcc	2, 0, r0, cr6, cr5, {2}
    7b0c:	16000009 	strne	r0, [r0], -r9
    7b10:	0009e00c 	andeq	lr, r9, ip
    7b14:	02680400 	rsbeq	r0, r8, #0, 8
    7b18:	00099e06 	andeq	r9, r9, r6, lsl #28
    7b1c:	f60c1800 			; <UNDEFINED> instruction: 0xf60c1800
    7b20:	0400001b 	streq	r0, [r0], #-27	; 0xffffffe5
    7b24:	580d0269 	stmdapl	sp, {r0, r3, r5, r6, r9}
    7b28:	1a000000 	bne	7b30 <__exidx_end+0x2c03>
    7b2c:	0019a40c 	andseq	sl, r9, ip, lsl #8
    7b30:	026a0400 	rsbeq	r0, sl, #0, 8
    7b34:	0002920e 	andeq	r9, r2, lr, lsl #4
    7b38:	5e0c1c00 	cdppl	12, 0, cr1, cr12, cr0, {0}
    7b3c:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    7b40:	580d026c 	stmdapl	sp, {r2, r3, r5, r6, r9}
    7b44:	20000000 	andcs	r0, r0, r0
    7b48:	0017b80c 	andseq	fp, r7, ip, lsl #16
    7b4c:	02700400 	rsbseq	r0, r0, #0, 8
    7b50:	0000240c 	andeq	r2, r0, ip, lsl #8
    7b54:	9e0c2200 	cdpls	2, 0, cr2, cr12, cr0, {0}
    7b58:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    7b5c:	450c0273 	strmi	r0, [ip, #-627]	; 0xfffffd8d
    7b60:	24000000 	strcs	r0, [r0], #-0
    7b64:	04010600 	streq	r0, [r1], #-1536	; 0xfffffa00
    7b68:	0615047f 			; <UNDEFINED> instruction: 0x0615047f
    7b6c:	940a0000 	strls	r0, [sl], #-0
    7b70:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    7b74:	00450f80 	subeq	r0, r5, r0, lsl #31
    7b78:	04010000 	streq	r0, [r1], #-0
    7b7c:	1a0a0004 	bne	287b94 <__ccfg+0x267bec>
    7b80:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    7b84:	00450f81 	subeq	r0, r5, r1, lsl #31
    7b88:	01010000 	mrseq	r0, (UNDEF: 1)
    7b8c:	cf0a0003 	svcgt	0x000a0003
    7b90:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    7b94:	00450f83 	subeq	r0, r5, r3, lsl #31
    7b98:	02010000 	andeq	r0, r1, #0
    7b9c:	860a0001 	strhi	r0, [sl], -r1
    7ba0:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    7ba4:	00450f84 	subeq	r0, r5, r4, lsl #31
    7ba8:	01010000 	mrseq	r0, (UNDEF: 1)
    7bac:	06000000 	streq	r0, [r0], -r0
    7bb0:	04870401 	streq	r0, [r7], #1025	; 0x401
    7bb4:	0000063f 	andeq	r0, r0, pc, lsr r6
    7bb8:	001acc0a 	andseq	ip, sl, sl, lsl #24
    7bbc:	0f880400 	svceq	0x00880400
    7bc0:	00000045 	andeq	r0, r0, r5, asr #32
    7bc4:	00040401 	andeq	r0, r4, r1, lsl #8
    7bc8:	001c380a 	andseq	r3, ip, sl, lsl #16
    7bcc:	0f890400 	svceq	0x00890400
    7bd0:	00000045 	andeq	r0, r0, r5, asr #32
    7bd4:	00000401 	andeq	r0, r0, r1, lsl #8
    7bd8:	04010600 	streq	r0, [r1], #-1536	; 0xfffffa00
    7bdc:	0679048b 	ldrbteq	r0, [r9], -fp, lsl #9
    7be0:	960a0000 	strls	r0, [sl], -r0
    7be4:	0400001b 	streq	r0, [r0], #-27	; 0xffffffe5
    7be8:	00450f8c 	subeq	r0, r5, ip, lsl #31
    7bec:	01010000 	mrseq	r0, (UNDEF: 1)
    7bf0:	fe0a0007 	cdp2	0, 0, cr0, cr10, cr7, {0}
    7bf4:	0400001b 	streq	r0, [r0], #-27	; 0xffffffe5
    7bf8:	00450f8f 	subeq	r0, r5, pc, lsl #31
    7bfc:	01010000 	mrseq	r0, (UNDEF: 1)
    7c00:	510a0004 	tstpl	sl, r4
    7c04:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    7c08:	00450f91 	umaaleq	r0, r5, r1, pc	; <UNPREDICTABLE>
    7c0c:	01010000 	mrseq	r0, (UNDEF: 1)
    7c10:	06000003 	streq	r0, [r0], -r3
    7c14:	04a60401 	strteq	r0, [r6], #1025	; 0x401
    7c18:	000006c3 	andeq	r0, r0, r3, asr #13
    7c1c:	001c940a 	andseq	r9, ip, sl, lsl #8
    7c20:	0fa70400 	svceq	0x00a70400
    7c24:	00000045 	andeq	r0, r0, r5, asr #32
    7c28:	00040401 	andeq	r0, r4, r1, lsl #8
    7c2c:	00161a0a 	andseq	r1, r6, sl, lsl #20
    7c30:	0fa80400 	svceq	0x00a80400
    7c34:	00000045 	andeq	r0, r0, r5, asr #32
    7c38:	00030101 	andeq	r0, r3, r1, lsl #2
    7c3c:	0016cf0a 	andseq	ip, r6, sl, lsl #30
    7c40:	0faa0400 	svceq	0x00aa0400
    7c44:	00000045 	andeq	r0, r0, r5, asr #32
    7c48:	00010201 	andeq	r0, r1, r1, lsl #4
    7c4c:	0014860a 	andseq	r8, r4, sl, lsl #12
    7c50:	0fab0400 	svceq	0x00ab0400
    7c54:	00000045 	andeq	r0, r0, r5, asr #32
    7c58:	00000101 	andeq	r0, r0, r1, lsl #2
    7c5c:	04010600 	streq	r0, [r1], #-1536	; 0xfffffa00
    7c60:	06ed04ae 	strbteq	r0, [sp], lr, lsr #9
    7c64:	cc0a0000 	stcgt	0, cr0, [sl], {-0}
    7c68:	0400001a 	streq	r0, [r0], #-26	; 0xffffffe6
    7c6c:	00450faf 	subeq	r0, r5, pc, lsr #31
    7c70:	04010000 	streq	r0, [r1], #-0
    7c74:	380a0004 	stmdacc	sl, {r2}
    7c78:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    7c7c:	00450fb0 	strheq	r0, [r5], #-240	; 0xffffff10
    7c80:	04010000 	streq	r0, [r1], #-0
    7c84:	06000000 	streq	r0, [r0], -r0
    7c88:	04b20401 	ldrteq	r0, [r2], #1025	; 0x401
    7c8c:	00000777 	andeq	r0, r0, r7, ror r7
    7c90:	001b960a 	andseq	r9, fp, sl, lsl #12
    7c94:	0fb30400 	svceq	0x00b30400
    7c98:	00000045 	andeq	r0, r0, r5, asr #32
    7c9c:	00070101 	andeq	r0, r7, r1, lsl #2
    7ca0:	0014bc0a 	andseq	fp, r4, sl, lsl #24
    7ca4:	0fb50400 	svceq	0x00b50400
    7ca8:	00000045 	andeq	r0, r0, r5, asr #32
    7cac:	00060101 	andeq	r0, r6, r1, lsl #2
    7cb0:	001a500a 	andseq	r5, sl, sl
    7cb4:	0fb70400 	svceq	0x00b70400
    7cb8:	00000045 	andeq	r0, r0, r5, asr #32
    7cbc:	00050101 	andeq	r0, r5, r1, lsl #2
    7cc0:	001bfe0a 	andseq	pc, fp, sl, lsl #28
    7cc4:	0fb90400 	svceq	0x00b90400
    7cc8:	00000045 	andeq	r0, r0, r5, asr #32
    7ccc:	00040101 	andeq	r0, r4, r1, lsl #2
    7cd0:	0014510a 	andseq	r5, r4, sl, lsl #2
    7cd4:	0fbb0400 	svceq	0x00bb0400
    7cd8:	00000045 	andeq	r0, r0, r5, asr #32
    7cdc:	00030101 	andeq	r0, r3, r1, lsl #2
    7ce0:	001ba50a 	andseq	sl, fp, sl, lsl #10
    7ce4:	0fbd0400 	svceq	0x00bd0400
    7ce8:	00000045 	andeq	r0, r0, r5, asr #32
    7cec:	00020101 	andeq	r0, r2, r1, lsl #2
    7cf0:	0016e00a 	andseq	lr, r6, sl
    7cf4:	0fbf0400 	svceq	0x00bf0400
    7cf8:	00000045 	andeq	r0, r0, r5, asr #32
    7cfc:	00010101 	andeq	r0, r1, r1, lsl #2
    7d00:	001a5b0a 	andseq	r5, sl, sl, lsl #22
    7d04:	0fc10400 	svceq	0x00c10400
    7d08:	00000045 	andeq	r0, r0, r5, asr #32
    7d0c:	00000101 	andeq	r0, r0, r1, lsl #2
    7d10:	04010600 	streq	r0, [r1], #-1536	; 0xfffffa00
    7d14:	07f104c4 	ldrbeq	r0, [r1, r4, asr #9]!
    7d18:	c00a0000 	andgt	r0, sl, r0
    7d1c:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    7d20:	00450fc5 	subeq	r0, r5, r5, asr #31
    7d24:	01010000 	mrseq	r0, (UNDEF: 1)
    7d28:	eb0a0007 	bl	287d4c <__ccfg+0x267da4>
    7d2c:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    7d30:	00450fc6 	subeq	r0, r5, r6, asr #31
    7d34:	01010000 	mrseq	r0, (UNDEF: 1)
    7d38:	170a0006 	strne	r0, [sl, -r6]
    7d3c:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    7d40:	00450fc8 	subeq	r0, r5, r8, asr #31
    7d44:	01010000 	mrseq	r0, (UNDEF: 1)
    7d48:	790a0004 	stmdbvc	sl, {r2}
    7d4c:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    7d50:	00450fc9 	subeq	r0, r5, r9, asr #31
    7d54:	01010000 	mrseq	r0, (UNDEF: 1)
    7d58:	b90a0003 	stmdblt	sl, {r0, r1}
    7d5c:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    7d60:	00450fca 	subeq	r0, r5, sl, asr #31
    7d64:	01010000 	mrseq	r0, (UNDEF: 1)
    7d68:	7e0a0002 	cdpvc	0, 0, cr0, cr10, cr2, {0}
    7d6c:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    7d70:	00450fcb 	subeq	r0, r5, fp, asr #31
    7d74:	01010000 	mrseq	r0, (UNDEF: 1)
    7d78:	3d0a0001 	stccc	0, cr0, [sl, #-4]
    7d7c:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    7d80:	00450fcc 	subeq	r0, r5, ip, asr #31
    7d84:	01010000 	mrseq	r0, (UNDEF: 1)
    7d88:	06000000 	streq	r0, [r0], -r0
    7d8c:	04d40401 	ldrbeq	r0, [r4], #1025	; 0x401
    7d90:	0000083b 	andeq	r0, r0, fp, lsr r8
    7d94:	001c940a 	andseq	r9, ip, sl, lsl #8
    7d98:	0fd50400 	svceq	0x00d50400
    7d9c:	00000045 	andeq	r0, r0, r5, asr #32
    7da0:	00040401 	andeq	r0, r4, r1, lsl #8
    7da4:	00161a0a 	andseq	r1, r6, sl, lsl #20
    7da8:	0fd60400 	svceq	0x00d60400
    7dac:	00000045 	andeq	r0, r0, r5, asr #32
    7db0:	00030101 	andeq	r0, r3, r1, lsl #2
    7db4:	0016cf0a 	andseq	ip, r6, sl, lsl #30
    7db8:	0fd80400 	svceq	0x00d80400
    7dbc:	00000045 	andeq	r0, r0, r5, asr #32
    7dc0:	00010201 	andeq	r0, r1, r1, lsl #4
    7dc4:	0014860a 	andseq	r8, r4, sl, lsl #12
    7dc8:	0fd90400 	svceq	0x00d90400
    7dcc:	00000045 	andeq	r0, r0, r5, asr #32
    7dd0:	00000101 	andeq	r0, r0, r1, lsl #2
    7dd4:	04010d00 	streq	r0, [r1], #-3328	; 0xfffff300
    7dd8:	8a040222 	bhi	108668 <__ccfg+0xe86c0>
    7ddc:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    7de0:	00001c94 	muleq	r0, r4, ip
    7de4:	0f022304 	svceq	0x00022304
    7de8:	00000045 	andeq	r0, r0, r5, asr #32
    7dec:	00040401 	andeq	r0, r4, r1, lsl #8
    7df0:	00161a0e 	andseq	r1, r6, lr, lsl #20
    7df4:	02240400 	eoreq	r0, r4, #0, 8
    7df8:	0000450f 	andeq	r4, r0, pc, lsl #10
    7dfc:	03010100 	movweq	r0, #4352	; 0x1100
    7e00:	16cf0e00 	strbne	r0, [pc], r0, lsl #28
    7e04:	26040000 	strcs	r0, [r4], -r0
    7e08:	00450f02 	subeq	r0, r5, r2, lsl #30
    7e0c:	02010000 	andeq	r0, r1, #0
    7e10:	860e0001 	strhi	r0, [lr], -r1
    7e14:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    7e18:	450f0227 	strmi	r0, [pc, #-551]	; 7bf9 <__exidx_end+0x2ccc>
    7e1c:	01000000 	mrseq	r0, (UNDEF: 0)
    7e20:	00000001 	andeq	r0, r0, r1
    7e24:	2a04010d 	bcs	108260 <__ccfg+0xe82b8>
    7e28:	08b70402 	ldmeq	r7!, {r1, sl}
    7e2c:	cc0e0000 	stcgt	0, cr0, [lr], {-0}
    7e30:	0400001a 	streq	r0, [r0], #-26	; 0xffffffe6
    7e34:	450f022b 	strmi	r0, [pc, #-555]	; 7c11 <__exidx_end+0x2ce4>
    7e38:	01000000 	mrseq	r0, (UNDEF: 0)
    7e3c:	0e000404 	cdpeq	4, 0, cr0, cr0, cr4, {0}
    7e40:	00001c38 	andeq	r1, r0, r8, lsr ip
    7e44:	0f022c04 	svceq	0x00022c04
    7e48:	00000045 	andeq	r0, r0, r5, asr #32
    7e4c:	00000401 	andeq	r0, r0, r1, lsl #8
    7e50:	04020d00 	streq	r0, [r2], #-3328	; 0xfffff300
    7e54:	e404022e 	str	r0, [r4], #-558	; 0xfffffdd2
    7e58:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    7e5c:	0000173d 	andeq	r1, r0, sp, lsr r7
    7e60:	10022f04 	andne	r2, r2, r4, lsl #30
    7e64:	00000058 	andeq	r0, r0, r8, asr r0
    7e68:	000d0302 	andeq	r0, sp, r2, lsl #6
    7e6c:	001c1a0e 	andseq	r1, ip, lr, lsl #20
    7e70:	02320400 	eorseq	r0, r2, #0, 8
    7e74:	00005810 	andeq	r5, r0, r0, lsl r8
    7e78:	000d0200 	andeq	r0, sp, r0, lsl #4
    7e7c:	040d0000 	streq	r0, [sp], #-0
    7e80:	04023404 	streq	r3, [r2], #-1028	; 0xfffffbfc
    7e84:	00000911 	andeq	r0, r0, r1, lsl r9
    7e88:	00188e0e 	andseq	r8, r8, lr, lsl #28
    7e8c:	02350400 	eorseq	r0, r5, #0, 8
    7e90:	00006b10 	andeq	r6, r0, r0, lsl fp
    7e94:	1c040400 	cfstrsne	mvf0, [r4], {-0}
    7e98:	19940e00 	ldmibne	r4, {r9, sl, fp}
    7e9c:	37040000 	strcc	r0, [r4, -r0]
    7ea0:	006b1002 	rsbeq	r1, fp, r2
    7ea4:	15040000 	strne	r0, [r4, #-0]
    7ea8:	0d000003 	stceq	0, cr0, [r0, #-12]
    7eac:	023a0401 	eorseq	r0, sl, #16777216	; 0x1000000
    7eb0:	00093e04 	andeq	r3, r9, r4, lsl #28
    7eb4:	1b360e00 	blne	d8b6bc <__ccfg+0xd6b714>
    7eb8:	3b040000 	blcc	107ec0 <__ccfg+0xe7f18>
    7ebc:	00450f02 	subeq	r0, r5, r2, lsl #30
    7ec0:	06010000 	streq	r0, [r1], -r0
    7ec4:	f30e0002 	vhadd.u8	d0, d14, d2
    7ec8:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    7ecc:	450f023d 	strmi	r0, [pc, #-573]	; 7c97 <__exidx_end+0x2d6a>
    7ed0:	01000000 	mrseq	r0, (UNDEF: 0)
    7ed4:	00000002 	andeq	r0, r0, r2
    7ed8:	4204020d 	andmi	r0, r4, #-805306368	; 0xd0000000
    7edc:	099e0402 	ldmibeq	lr, {r1, sl}
    7ee0:	f70e0000 			; <UNDEFINED> instruction: 0xf70e0000
    7ee4:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    7ee8:	58100243 	ldmdapl	r0, {r0, r1, r6, r9}
    7eec:	02000000 	andeq	r0, r0, #0
    7ef0:	0e000a06 	vmlaeq.f32	s0, s0, s12
    7ef4:	00001771 	andeq	r1, r0, r1, ror r7
    7ef8:	10024404 	andne	r4, r2, r4, lsl #8
    7efc:	00000058 	andeq	r0, r0, r8, asr r0
    7f00:	00090102 	andeq	r0, r9, r2, lsl #2
    7f04:	0018e30e 	andseq	lr, r8, lr, lsl #6
    7f08:	02460400 	subeq	r0, r6, #0, 8
    7f0c:	00005810 	andeq	r5, r0, r0, lsl r8
    7f10:	08010200 	stmdaeq	r1, {r9}
    7f14:	14d10e00 	ldrbne	r0, [r1], #3584	; 0xe00
    7f18:	48040000 	stmdami	r4, {}	; <UNPREDICTABLE>
    7f1c:	00581002 	subseq	r1, r8, r2
    7f20:	04020000 	streq	r0, [r2], #-0
    7f24:	690e0004 	stmdbvs	lr, {r2}
    7f28:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    7f2c:	5810024d 	ldmdapl	r0, {r0, r2, r3, r6, r9}
    7f30:	02000000 	andeq	r0, r0, #0
    7f34:	00000003 	andeq	r0, r0, r3
    7f38:	5604020d 	strpl	r0, [r4], -sp, lsl #4
    7f3c:	09ed0402 	stmibeq	sp!, {r1, sl}^
    7f40:	c20e0000 	andgt	r0, lr, #0
    7f44:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    7f48:	58100257 	ldmdapl	r0, {r0, r1, r2, r4, r6, r9}
    7f4c:	02000000 	andeq	r0, r0, #0
    7f50:	0e000d03 	cdpeq	13, 0, cr0, cr0, cr3, {0}
    7f54:	0000165f 	andeq	r1, r0, pc, asr r6
    7f58:	10025d04 	andne	r5, r2, r4, lsl #26
    7f5c:	00000058 	andeq	r0, r0, r8, asr r0
    7f60:	000c0102 	andeq	r0, ip, r2, lsl #2
    7f64:	00160c0e 	andseq	r0, r6, lr, lsl #24
    7f68:	025f0400 	subseq	r0, pc, #0, 8
    7f6c:	00005810 	andeq	r5, r0, r0, lsl r8
    7f70:	06060200 	streq	r0, [r6], -r0, lsl #4
    7f74:	18b60e00 	ldmne	r6!, {r9, sl, fp}
    7f78:	66040000 	strvs	r0, [r4], -r0
    7f7c:	00581002 	subseq	r1, r8, r2
    7f80:	01020000 	mrseq	r0, (UNDEF: 2)
    7f84:	0f000005 	svceq	0x00000005
    7f88:	00000077 	andeq	r0, r0, r7, ror r0
    7f8c:	000009fd 	strdeq	r0, [r0], -sp
    7f90:	00009110 	andeq	r9, r0, r0, lsl r1
    7f94:	0400a200 	streq	sl, [r0], #-512	; 0xfffffe00
    7f98:	000009ed 	andeq	r0, r0, sp, ror #19
    7f9c:	0017df11 	andseq	sp, r7, r1, lsl pc
    7fa0:	10490500 	subne	r0, r9, r0, lsl #10
    7fa4:	000009fd 	strdeq	r0, [r0], -sp
    7fa8:	04ad028c 	strteq	r0, [sp], #652	; 0x28c
    7fac:	04492100 	strbeq	r2, [r9], #-256	; 0xffffff00
    7fb0:	047d2100 	ldrbteq	r2, [sp], #-256	; 0xffffff00
    7fb4:	04812100 	streq	r2, [r1], #256	; 0x100
    7fb8:	05112100 	ldreq	r2, [r1, #-256]	; 0xffffff00
    7fbc:	05912100 	ldreq	r2, [r1, #256]	; 0x100
    7fc0:	06412100 	strbeq	r2, [r1], -r0, lsl #2
    7fc4:	b5f82100 	ldrblt	r2, [r8, #256]!	; 0x100
    7fc8:	b5f84710 	ldrblt	r4, [r8, #1808]!	; 0x710
    7fcc:	2100460e 	tstcs	r0, lr, lsl #12
    7fd0:	04ad2501 	strteq	r2, [sp], #1281	; 0x501
    7fd4:	480a4730 	stmdami	sl, {r4, r5, r8, r9, sl, lr}
    7fd8:	f0007803 			; <UNDEFINED> instruction: 0xf0007803
    7fdc:	079bf80f 	ldreq	pc, [fp, pc, lsl #16]
    7fe0:	4c12d00b 	ldcmi	0, cr13, [r2], {11}
    7fe4:	28ff7820 	ldmcs	pc!, {r5, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    7fe8:	21ffd007 	mvnscs	sp, r7
    7fec:	490e7021 	stmdbmi	lr, {r0, r5, ip, sp, lr}
    7ff0:	0224240f 	eoreq	r2, r4, #251658240	; 0xf000000
    7ff4:	31604320 	cmncc	r0, r0, lsr #6
    7ff8:	bdf882c8 	lfmlt	f0, 3, [r8, #800]!	; 0x320
    7ffc:	4801b5f8 	stmdami	r1, {r3, r4, r5, r6, r7, r8, sl, ip, sp, pc}
    8000:	026b4700 	rsbeq	r4, fp, #0, 14
    8004:	4ce52100 	stfmie	f2, [r5]
    8008:	48090000 	stmdami	r9, {}	; <UNPREDICTABLE>
    800c:	4808e001 	stmdami	r8, {r0, sp, lr, pc}
    8010:	4c060c00 	stcmi	12, cr0, [r6], {-0}
    8014:	78224905 	stmdavc	r2!, {r0, r2, r8, fp, lr}
    8018:	d1012aff 	strdle	r2, [r1, -pc]
    801c:	70227aca 	eorvc	r7, r2, sl, asr #21
    8020:	82c83160 	sbchi	r3, r8, #96, 2
    8024:	1c804670 	stcne	6, cr4, [r0], {112}	; 0x70
    8028:	62004700 	andvs	r4, r0, #0, 14
    802c:	06a44008 	strteq	r4, [r4], r8
    8030:	0f072100 	svceq	0x00072100
    8034:	b4f00808 	ldrbtlt	r0, [r0], #2056	; 0x808
    8038:	b5704708 	ldrblt	r4, [r0, #-1800]!	; 0xfffff8f8
    803c:	46154603 	ldrmi	r4, [r5], -r3, lsl #12
    8040:	d0062901 	andle	r2, r6, r1, lsl #18
    8044:	d0062900 	andle	r2, r6, r0, lsl #18
    8048:	46284a11 			; <UNDEFINED> instruction: 0x46284a11
    804c:	ffbbf7ff 			; <UNDEFINED> instruction: 0xffbbf7ff
    8050:	480fbd70 	stmdami	pc, {r4, r5, r6, r8, sl, fp, ip, sp, pc}	; <UNPREDICTABLE>
    8054:	480fe000 	stmdami	pc, {sp, lr, pc}	; <UNPREDICTABLE>
    8058:	42832405 	addmi	r2, r3, #83886080	; 0x5000000
    805c:	0840d803 	stmdaeq	r0, {r0, r1, fp, ip, lr, pc}^
    8060:	2c001e64 	stccs	14, cr1, [r0], {100}	; 0x64
    8064:	40e3dcf9 	strdmi	sp, [r3], #201	; 0xc9	; <UNPREDICTABLE>
    8068:	03402001 	movteq	r2, #1
    806c:	0b821818 	bleq	fe08e0d4 <_estack+0xde0890d4>
    8070:	d0072901 	andle	r2, r7, r1, lsl #18
    8074:	23004906 	movwcs	r4, #2310	; 0x906
    8078:	46283180 	strtmi	r3, [r8], -r0, lsl #3
    807c:	ffa5f7ff 			; <UNDEFINED> instruction: 0xffa5f7ff
    8080:	bd70b2e0 	lfmlt	f3, 3, [r0, #-896]!	; 0xfffffc80
    8084:	4b044902 	blmi	11a494 <__ccfg+0xfa4ec>
    8088:	e7f6316c 	ldrb	r3, [r6, ip, ror #2]!
    808c:	5c830000 	stcpl	0, cr0, [r3], {0}
    8090:	bca00000 	stclt	0, cr0, [r0]
    8094:	83002386 	movwhi	r2, #902	; 0x386
    8098:	0674230d 	ldrbteq	r2, [r4], -sp, lsl #6
    809c:	b5f82100 	ldrblt	r2, [r8, #256]!	; 0x100
    80a0:	46054e1a 			; <UNDEFINED> instruction: 0x46054e1a
    80a4:	48196b71 	ldmdami	r9, {r0, r4, r5, r6, r8, r9, fp, sp, lr}
    80a8:	01e409cc 	mvneq	r0, ip, asr #19
    80ac:	d0112d00 	andsle	r2, r1, r0, lsl #26
    80b0:	78094918 	stmdavc	r9, {r3, r4, r8, fp, lr}
    80b4:	d00f2902 	andle	r2, pc, r2, lsl #18
    80b8:	43047b00 	movwmi	r7, #19200	; 0x4b00
    80bc:	2001b672 	andcs	fp, r1, r2, ror r6
    80c0:	02404f15 	subeq	r4, r0, #21, 30	; 0x54
    80c4:	481147b8 	ldmdami	r1, {r3, r4, r5, r7, r8, r9, sl, lr}
    80c8:	88003820 	stmdahi	r0, {r5, fp, ip, sp}
    80cc:	07c909c1 	strbeq	r0, [r9, r1, asr #19]
    80d0:	e016d004 	ands	sp, r6, r4
    80d4:	e7f07ac0 	ldrb	r7, [r0, r0, asr #21]!
    80d8:	e7ee7b40 	strb	r7, [lr, r0, asr #22]!
    80dc:	6374490f 	cmnvs	r4, #245760	; 0x3c000
    80e0:	0a4061cc 	beq	1020818 <__ccfg+0x1000870>
    80e4:	d00c07c0 	andle	r0, ip, r0, asr #15
    80e8:	03802001 	orreq	r2, r0, #1
    80ec:	2d006b31 	vstrcs	d6, [r0, #-196]	; 0xffffff3c
    80f0:	4301d001 	movwmi	sp, #4097	; 0x1001
    80f4:	4381e000 	orrmi	lr, r1, #0
    80f8:	63314608 	teqvs	r1, #8, 12	; 0x800000
    80fc:	39404907 	stmdbcc	r0, {r0, r1, r2, r8, fp, lr}^
    8100:	20006348 	andcs	r6, r0, r8, asr #6
    8104:	b66247b8 			; <UNDEFINED> instruction: 0xb66247b8
    8108:	0280bdf8 	addeq	fp, r0, #248, 26	; 0x3e00
    810c:	00882100 	addeq	r2, r8, r0, lsl #2
    8110:	029b2100 	addseq	r2, fp, #0, 2
    8114:	3f7b2100 	svccc	0x007b2100
    8118:	40400000 	submi	r0, r0, r0
    811c:	b5104004 	ldrlt	r4, [r0, #-4]
    8120:	21004a22 	tstcs	r0, r2, lsr #20
    8124:	49216151 	stmdbmi	r1!, {r0, r4, r6, r8, sp, lr}
    8128:	00c96889 	sbceq	r6, r9, r9, lsl #17
    812c:	4921d409 	stmdbmi	r1!, {r0, r3, sl, ip, lr, pc}
    8130:	05ca4b20 	strbeq	r4, [sl, #2848]	; 0xb20
    8134:	6b4b4298 	blvs	12d8b9c <__ccfg+0x12b8bf4>
    8138:	4313d801 	tstmi	r3, #65536	; 0x10000
    813c:	4393e000 	orrsmi	lr, r3, #0
    8140:	491d634b 	ldmdbmi	sp, {r0, r1, r3, r6, r8, r9, sp, lr}
    8144:	ff77f7ff 			; <UNDEFINED> instruction: 0xff77f7ff
    8148:	b538bd10 	ldrlt	fp, [r8, #-3344]!	; 0xfffff2f0
    814c:	7f284d1a 	svcvc	0x00284d1a
    8150:	d1272800 			; <UNDEFINED> instruction: 0xd1272800
    8154:	8800481a 	stmdahi	r0, {r1, r3, r4, fp, lr}
    8158:	07c009c0 	strbeq	r0, [r0, r0, asr #19]
    815c:	4c12d122 	ldfmid	f5, [r2], {34}	; 0x22
    8160:	28006960 	stmdacs	r0, {r5, r6, r8, fp, sp, lr}
    8164:	4668d11e 			; <UNDEFINED> instruction: 0x4668d11e
    8168:	f845f000 			; <UNDEFINED> instruction: 0xf845f000
    816c:	78004668 	stmdavc	r0, {r3, r5, r6, r9, sl, lr}
    8170:	d1172801 	tstle	r7, r1, lsl #16
    8174:	78404668 	stmdavc	r0, {r3, r5, r6, r9, sl, lr}^
    8178:	d2132810 	andsle	r2, r3, #16, 16	; 0x100000
    817c:	61602008 	cmnvs	r0, r8
    8180:	09406a68 	stmdbeq	r0, {r3, r5, r6, r9, fp, sp, lr}^
    8184:	60200140 	eorvs	r0, r0, r0, asr #2
    8188:	21004a0e 	tstcs	r0, lr, lsl #20
    818c:	4a0d62d1 	bmi	360cd8 <__ccfg+0x340d30>
    8190:	60112102 	andsvs	r2, r1, r2, lsl #2
    8194:	43082101 	movwmi	r2, #33025	; 0x8101
    8198:	21036020 	tstcs	r3, r0, lsr #32
    819c:	62684308 	rsbvs	r4, r8, #8, 6	; 0x20000000
    81a0:	bd386020 	ldclt	0, cr6, [r8, #-128]!	; 0xffffff80
    81a4:	47804809 	strmi	r4, [r0, r9, lsl #16]
    81a8:	4000bd38 	andmi	fp, r0, r8, lsr sp
    81ac:	00184004 	andseq	r4, r8, r4
    81b0:	00002100 	andeq	r2, r0, r0, lsl #2
    81b4:	02800893 	addeq	r0, r0, #9633792	; 0x930000
    81b8:	68cf2100 	stmiavs	pc, {r8, sp}^	; <UNPREDICTABLE>
    81bc:	00680000 	rsbeq	r0, r8, r0
    81c0:	11002100 	mrsne	r2, (UNDEF: 16)
    81c4:	e2804004 	add	r4, r0, #4
    81c8:	3bc3e000 	blcc	ff1001d0 <_estack+0xdf0fb1d0>
    81cc:	49070000 	stmdbmi	r7, {}	; <UNPREDICTABLE>
    81d0:	d0002800 	andle	r2, r0, r0, lsl #16
    81d4:	4a062004 	bmi	1901ec <__ccfg+0x170244>
    81d8:	7809b672 	stmdavc	r9, {r1, r4, r5, r6, r9, sl, ip, sp, pc}
    81dc:	d00107c9 	andle	r0, r1, r9, asr #15
    81e0:	e0005810 	and	r5, r0, r0, lsl r8
    81e4:	b6622080 	strbtlt	r2, [r2], -r0, lsl #1
    81e8:	4770b240 	ldrbmi	fp, [r0, -r0, asr #4]!
    81ec:	026b0000 	rsbeq	r0, fp, #0
    81f0:	60582100 	subsvs	r2, r8, r0, lsl #2
    81f4:	b4034004 	strlt	r4, [r3], #-4
    81f8:	90014801 	andls	r4, r1, r1, lsl #16
    81fc:	6fa5bd01 	svcvs	0x00a5bd01
    8200:	00000000 	andeq	r0, r0, r0
    8204:	00010000 	andeq	r0, r1, r0
    8208:	000a0003 	andeq	r0, sl, r3
    820c:	0059001f 	subseq	r0, r9, pc, lsl r0
    8210:	023900eb 	eorseq	r0, r9, #235	; 0xeb
    8214:	09f904ea 	ldmibeq	r9!, {r1, r3, r5, r6, r7, sl}^
    8218:	1feb1297 	svcne	0x00eb1297
    821c:	4a7832a1 	bmi	1e14ca8 <__ccfg+0x1df4d00>
    8220:	82fa660a 	rscshi	r6, sl, #10485760	; 0xa00000
    8224:	b6639e8c 	strbtlt	r9, [r3], -ip, lsl #29
    8228:	d664c917 			; <UNDEFINED> instruction: 0xd664c917
    822c:	e3c1deed 	bic	sp, r1, #3792	; 0xed0
    8230:	00ffe5e0 	rscseq	lr, pc, r0, ror #11
    8234:	770f0000 	strvc	r0, [pc, -r0]
    8238:	ad000000 	stcge	0, cr0, [r0, #-0]
    823c:	1200000c 	andne	r0, r0, #12
    8240:	00000091 	muleq	r0, r1, r0
    8244:	040001ac 	streq	r0, [r0], #-428	; 0xfffffe54
    8248:	00000c9c 	muleq	r0, ip, ip
    824c:	00182e11 	andseq	r2, r8, r1, lsl lr
    8250:	103a0600 	eorsne	r0, sl, r0, lsl #12
    8254:	00000cad 	andeq	r0, r0, sp, lsr #25
    8258:	61a306b4 			; <UNDEFINED> instruction: 0x61a306b4
    825c:	147f0000 	ldrbtne	r0, [pc], #-0	; 8264 <__exidx_end+0x3337>
    8260:	004d1307 	subeq	r1, sp, r7, lsl #6
    8264:	1f2e24f1 	svcne	0x002e24f1
    8268:	0ab03f13 	beq	fec17ebc <_estack+0xdec12ebc>
    826c:	ff07003f 			; <UNDEFINED> instruction: 0xff07003f
    8270:	40300000 	eorsmi	r0, r0, r0
    8274:	40014000 	andmi	r4, r1, r0
    8278:	40074003 	andmi	r4, r7, r3
    827c:	404f400f 	submi	r4, pc, pc
    8280:	41cf40cf 	bicmi	r4, pc, pc, asr #1
    8284:	47cf43cf 	strbmi	r4, [pc, pc, asr #7]
    8288:	3fcf4fcf 	svccc	0x00cf4fcf
    828c:	1fcf2fcf 	svcne	0x00cf2fcf
    8290:	00000fcf 	andeq	r0, r0, pc, asr #31
    8294:	000f0000 	andeq	r0, pc, r0
    8298:	00000008 	andeq	r0, r0, r8
    829c:	0000003f 	andeq	r0, r0, pc, lsr r0
    82a0:	003f0040 	eorseq	r0, pc, r0, asr #32
    82a4:	00040000 	andeq	r0, r4, r0
    82a8:	000e0068 	andeq	r0, lr, r8, rrx
    82ac:	000600dc 	ldrdeq	r0, [r6], -ip
    82b0:	001a0043 	andseq	r0, sl, r3, asr #32
    82b4:	00000005 	andeq	r0, r0, r5
    82b8:	00020000 	andeq	r0, r2, r0
    82bc:	003f0000 	eorseq	r0, pc, r0
    82c0:	00000000 	andeq	r0, r0, r0
    82c4:	00c00004 	sbceq	r0, r0, r4
    82c8:	00040000 	andeq	r0, r4, r0
    82cc:	000000c0 	andeq	r0, r0, r0, asr #1
    82d0:	c0500007 	subsgt	r0, r0, r7
    82d4:	70009100 	andvc	r9, r0, r0, lsl #2
    82d8:	9100c070 	tstls	r0, r0, ror r0
    82dc:	31827000 	orrcc	r7, r2, r0
    82e0:	91310021 	teqls	r1, r1, lsr #32
    82e4:	7000b110 	andvc	fp, r0, r0, lsl r1
    82e8:	b1018101 	tstlt	r1, r1, lsl #2
    82ec:	3182a100 	orrcc	sl, r2, r0, lsl #2
    82f0:	b1109132 	tstlt	r0, r2, lsr r1
    82f4:	10119101 	andsne	r9, r1, r1, lsl #2
    82f8:	22418141 	subcs	r8, r1, #1073741840	; 0x40000010
    82fc:	06f1404f 	ldrbteq	r4, [r1], pc, asr #32
    8300:	c0517000 	subsgt	r7, r1, r0
    8304:	18309101 	ldmdane	r0!, {r0, r8, ip, pc}
    8308:	31833910 	orrcc	r3, r3, r0, lsl r9
    830c:	3118d008 	tstcc	r8, r8
    8310:	00316f41 	eorseq	r6, r1, r1, asr #30
    8314:	b1109131 	tstlt	r0, r1, lsr r1
    8318:	16141483 	ldrne	r1, [r4], -r3, lsl #9
    831c:	7000685b 	andvc	r6, r0, fp, asr r8
    8320:	c0501025 	subsgt	r1, r0, r5, lsr #32
    8324:	c3f49100 	mvnsgt	r9, #0, 2
    8328:	1420c0c0 	strtne	ip, [r0], #-192	; 0xffffff40
    832c:	10316f03 	eorsne	r6, r1, r3, lsl #30
    8330:	c0220441 	eorgt	r0, r2, r1, asr #8
    8334:	00213182 	eoreq	r3, r1, r2, lsl #3
    8338:	b1109131 	tstlt	r0, r1, lsr r1
    833c:	10313963 	eorsne	r3, r1, r3, ror #18
    8340:	c0820441 	addgt	r0, r2, r1, asr #8
    8344:	00213182 	eoreq	r3, r1, r2, lsl #3
    8348:	b1109131 	tstlt	r0, r1, lsr r1
    834c:	10313963 	eorsne	r3, r1, r3, ror #18
    8350:	3182c0a2 	orrcc	ip, r2, r2, lsr #1
    8354:	91310021 	teqls	r1, r1, lsr #32
    8358:	1050b110 	subsne	fp, r0, r0, lsl r1
    835c:	14053115 	strne	r3, [r5], #-277	; 0xfffffeeb
    8360:	70009205 	andvc	r9, r0, r5, lsl #4
    8364:	c052643f 	subsgt	r6, r2, pc, lsr r4
    8368:	06311031 			; <UNDEFINED> instruction: 0x06311031
    836c:	02c13161 	sbceq	r3, r1, #1073741848	; 0x40000018
    8370:	c1126442 	tstgt	r2, r2, asr #8
    8374:	39211031 	stmdbcc	r1!, {r0, r4, r5, ip}
    8378:	31510671 	cmpcc	r1, r1, ror r6
    837c:	644202e1 	strbvs	r0, [r2], #-737	; 0xfffffd1f
    8380:	658a7000 	strvs	r7, [sl]
    8384:	c0886599 	umullgt	r6, r8, r9, r5
    8388:	39508220 	ldmdbcc	r0, {r5, r9, pc}^
    838c:	1e003980 	vmlane.f16	s6, s1, s0	; <UNPREDICTABLE>
    8390:	c041409f 	umaalgt	r4, r1, pc, r0	; <UNPREDICTABLE>
    8394:	14183001 	ldrne	r3, [r8], #-1
    8398:	c0891a18 	addgt	r1, r9, r8, lsl sl
    839c:	39608230 	stmdbcc	r0!, {r4, r5, r9, pc}^
    83a0:	1e003980 	vmlane.f16	s6, s1, s0	; <UNPREDICTABLE>
    83a4:	c04140a9 	subgt	r4, r1, r9, lsr #1
    83a8:	14193001 	ldrne	r3, [r9], #-1
    83ac:	643c1a19 	ldrtvs	r1, [ip], #-2585	; 0xfffff5e7
    83b0:	b1109136 	tstlt	r0, r6, lsr r1
    83b4:	b1109134 	tstlt	r0, r4, lsr r1
    83b8:	7100b054 	qaddvc	fp, r4, r0
    83bc:	b064a054 	rsblt	sl, r4, r4, asr r0
    83c0:	220080f0 	andcs	r8, r0, #240	; 0xf0
    83c4:	124040af 	subne	r4, r0, #175	; 0xaf
    83c8:	b03290b0 	ldrhtlt	r9, [r2], -r0
    83cc:	39538253 	ldmdbcc	r3, {r0, r1, r4, r6, r9, pc}^
    83d0:	64853953 	strvs	r3, [r5], #2387	; 0x953
    83d4:	c111643f 	tstgt	r1, pc, lsr r4
    83d8:	6442c122 	strbvs	ip, [r2], #-290	; 0xfffffede
    83dc:	68c2c170 	stmiavs	r2, {r4, r5, r6, r8, lr, pc}^
    83e0:	c0c2c111 	sbcgt	ip, r2, r1, lsl r1
    83e4:	c1706442 	cmngt	r0, r2, asr #8
    83e8:	c05068c7 	subsgt	r6, r0, r7, asr #17
    83ec:	72279100 	eorvc	r9, r7, #0, 2
    83f0:	16159298 			; <UNDEFINED> instruction: 0x16159298
    83f4:	10421614 	subne	r1, r2, r4, lsl r6
    83f8:	c1f01053 	mvnsgt	r1, r3, asr r0
    83fc:	31318221 	teqcc	r1, r1, lsr #4
    8400:	39813931 	stmibcc	r1, {r0, r4, r5, r8, fp, ip, sp}
    8404:	b0513131 	subslt	r3, r1, r1, lsr r1
    8408:	6572b270 	ldrbvs	fp, [r2, #-624]!	; 0xfffffd90
    840c:	92997227 	addsls	r7, r9, #1879048194	; 0x70000002
    8410:	1062b270 	rsbne	fp, r2, r0, ror r2
    8414:	c3f01073 	mvnsgt	r1, #115	; 0x73
    8418:	31218231 			; <UNDEFINED> instruction: 0x31218231
    841c:	39813921 	stmibcc	r1, {r0, r5, r8, fp, ip, sp}
    8420:	6572101b 	ldrbvs	r1, [r2, #-27]!	; 0xffffffe5
    8424:	3182c0e2 	orrcc	ip, r2, r2, ror #1
    8428:	31808260 	orrcc	r8, r0, r0, ror #4
    842c:	00023980 	andeq	r3, r2, r0, lsl #19
    8430:	7100b061 	tstvc	r0, r1, rrx
    8434:	b1109132 	tstlt	r0, r2, lsr r1
    8438:	b061a051 	rsblt	sl, r1, r1, asr r0
    843c:	c2307227 	eorsgt	r7, r0, #1879048194	; 0x70000002
    8440:	000068f3 	strdeq	r6, [r0], -r3
    8444:	90b01280 	adcsls	r1, r0, r0, lsl #5
    8448:	7000b032 	andvc	fp, r0, r2, lsr r0
    844c:	9100c050 	qaddls	ip, r0, r0
    8450:	92997227 	addsls	r7, r9, #1879048194	; 0x70000002
    8454:	10731062 	rsbsne	r1, r3, r2, rrx
    8458:	8231c3f0 	eorshi	ip, r1, #240, 6	; 0xc0000003
    845c:	39213121 	stmdbcc	r1!, {r0, r5, r8, ip, sp}
    8460:	b0513981 	subslt	r3, r1, r1, lsl #19
    8464:	657eb270 	ldrbvs	fp, [lr, #-624]!	; 0xfffffd90
    8468:	92987227 	addsls	r7, r8, #1879048194	; 0x70000002
    846c:	1042b270 	subne	fp, r2, r0, ror r2
    8470:	c1f01053 	mvnsgt	r1, r3, asr r0
    8474:	31318221 	teqcc	r1, r1, lsr #4
    8478:	39813931 	stmibcc	r1, {r0, r4, r5, r8, fp, ip, sp}
    847c:	101a3131 	andsne	r3, sl, r1, lsr r1
    8480:	a051657e 	subsge	r6, r1, lr, ror r5
    8484:	7227b061 	eorvc	fp, r7, #97	; 0x61
    8488:	6918c0b0 	ldmdbvs	r8, {r4, r5, r7, lr, pc}
    848c:	c101643f 	tstgt	r1, pc, lsr r4
    8490:	6442c122 	strbvs	ip, [r2], #-290	; 0xfffffede
    8494:	c0c2c101 	sbcgt	ip, r2, r1, lsl #2
    8498:	1a156442 	bne	5615a8 <__ccfg+0x541600>
    849c:	9135643c 	teqls	r5, ip, lsr r4
    84a0:	8253b110 	subshi	fp, r3, #16, 2
    84a4:	12c06485 	sbcne	r6, r0, #-2063597568	; 0x85000000
    84a8:	b03290b0 	ldrhtlt	r9, [r2], -r0
    84ac:	643f7000 	ldrtvs	r7, [pc], #-0	; 84b4 <__exidx_end+0x3587>
    84b0:	c081c272 	addgt	ip, r1, r2, ror r2
    84b4:	c1226442 			; <UNDEFINED> instruction: 0xc1226442
    84b8:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    84bc:	c111c002 	tstgt	r1, r2
    84c0:	c0626442 	rsbgt	r6, r2, r2, asr #8
    84c4:	6442c331 	strbvs	ip, [r2], #-817	; 0xfffffccf
    84c8:	c111c362 	tstgt	r1, r2, ror #6
    84cc:	c3026442 	movwgt	r6, #9282	; 0x2442
    84d0:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    84d4:	39538253 	ldmdbcc	r3, {r0, r1, r4, r6, r9, pc}^
    84d8:	c3e26485 	mvngt	r6, #-2063597568	; 0x85000000
    84dc:	22116447 	andscs	r6, r1, #1191182336	; 0x47000000
    84e0:	c2424140 	subgt	r4, r2, #64, 2
    84e4:	6442c881 	strbvs	ip, [r2], #-2177	; 0xfffff77f
    84e8:	c111c252 	tstgt	r1, r2, asr r2
    84ec:	c2726442 	rsbsgt	r6, r2, #1107296256	; 0x42000000
    84f0:	6442cee1 	strbvs	ip, [r2], #-3809	; 0xfffff11f
    84f4:	c881c202 	stmgt	r1, {r1, r9, lr, pc}
    84f8:	c2026442 	andgt	r6, r2, #1107296256	; 0x42000000
    84fc:	6442c801 	strbvs	ip, [r2], #-2049	; 0xfffff7ff
    8500:	6954c0b0 	ldmdbvs	r4, {r4, r5, r7, lr, pc}^
    8504:	643f7000 	ldrtvs	r7, [pc], #-0	; 850c <__exidx_end+0x35df>
    8508:	c801c242 	stmdagt	r1, {r1, r6, r9, lr, pc}
    850c:	c2526442 	subsgt	r6, r2, #1107296256	; 0x42000000
    8510:	6442c011 	strbvs	ip, [r2], #-17	; 0xffffffef
    8514:	c0e1c272 	rscgt	ip, r1, r2, ror r2
    8518:	c0026442 	andgt	r6, r2, r2, asr #8
    851c:	6442c101 	strbvs	ip, [r2], #-257	; 0xfffffeff
    8520:	c301c062 	movwgt	ip, #4194	; 0x1062
    8524:	c1226442 			; <UNDEFINED> instruction: 0xc1226442
    8528:	6442c101 	strbvs	ip, [r2], #-257	; 0xfffffeff
    852c:	c101c362 	tstgt	r1, r2, ror #6
    8530:	c3026442 	movwgt	r6, #9282	; 0x2442
    8534:	6442c101 	strbvs	ip, [r2], #-257	; 0xfffffeff
    8538:	64858253 	strvs	r8, [r5], #595	; 0x253
    853c:	b0617000 	rsblt	r7, r1, r0
    8540:	14127100 	ldrne	r7, [r2], #-256	; 0xffffff00
    8544:	4d7a1c23 	ldclmi	12, cr1, [sl, #-140]!	; 0xffffff74
    8548:	b1109133 	tstlt	r0, r3, lsr r1
    854c:	91327000 	teqls	r2, r0
    8550:	6972b110 	ldmdbvs	r2!, {r4, r8, ip, sp, pc}^
    8554:	b0617000 	rsblt	r7, r1, r0
    8558:	18137100 	ldmdane	r3, {r8, ip, sp, lr}
    855c:	49861c32 	stmibmi	r6, {r1, r4, r5, sl, fp, ip}
    8560:	b1109132 	tstlt	r0, r2, lsr r1
    8564:	91337000 	teqls	r3, r0
    8568:	697eb110 	ldmdbvs	lr!, {r4, r8, ip, sp, pc}^
    856c:	c0c27000 	sbcgt	r7, r2, r0
    8570:	10156447 	andsne	r6, r5, r7, asr #8
    8574:	1612c0c2 	ldrne	ip, [r2], -r2, asr #1
    8578:	31416447 	cmpcc	r1, r7, asr #8
    857c:	c0c01415 	sbcgt	r1, r0, r5, lsl r4
    8580:	14053180 	strne	r3, [r5], #-384	; 0xfffffe80
    8584:	78a01054 	stmiavc	r0!, {r2, r4, r6, ip}
    8588:	70000404 	andvc	r0, r0, r4, lsl #8
    858c:	3186c0e6 	orrcc	ip, r6, r6, ror #1
    8590:	1416cc01 	ldrne	ip, [r6], #-3073	; 0xfffff3ff
    8594:	82611067 	rsbhi	r1, r1, #103	; 0x67
    8598:	0401c3f0 	streq	ip, [r1], #-1008	; 0xfffffc10
    859c:	70001417 	andvc	r1, r0, r7, lsl r4
    85a0:	72057306 	andvc	r7, r5, #402653184	; 0x18000000
    85a4:	720e720b 	andvc	r7, lr, #-1342177280	; 0xb0000000
    85a8:	7100b050 	qaddvc	fp, r0, r0
    85ac:	b0608081 	rsblt	r8, r0, r1, lsl #1
    85b0:	8092a050 	addshi	sl, r2, r0, asr r0
    85b4:	45c32241 	strbmi	r2, [r3, #577]	; 0x241
    85b8:	c1f18080 	mvnsgt	r8, r0, lsl #1
    85bc:	16300410 			; <UNDEFINED> instruction: 0x16300410
    85c0:	14011101 	strne	r1, [r1], #-257	; 0xfffffeff
    85c4:	61d66c01 	bicsvs	r6, r6, r1, lsl #24
    85c8:	61d861d7 	ldrsbvs	r6, [r8, #23]
    85cc:	61da61d9 	ldrsbvs	r6, [sl, #25]
    85d0:	61dc61db 	ldrsbvs	r6, [ip, #27]
    85d4:	61e061de 	ldrdvs	r6, [r0, #30]!
    85d8:	61e461e2 	mvnvs	r6, r2, ror #3
    85dc:	63396336 	teqvs	r9, #-671088640	; 0xd8000000
    85e0:	c0f28091 	smlalsgt	r8, r2, r1, r0
    85e4:	31210421 			; <UNDEFINED> instruction: 0x31210421
    85e8:	2a428082 	bcs	10a87f8 <__ccfg+0x1088850>
    85ec:	16321412 			; <UNDEFINED> instruction: 0x16321412
    85f0:	14211101 	strtne	r1, [r1], #-257	; 0xfffffeff
    85f4:	61ee6c01 	mvnvs	r6, r1, lsl #24
    85f8:	61f4620b 	mvnsvs	r6, fp, lsl #4
    85fc:	61ee6339 	mvnvs	r6, r9, lsr r3
    8600:	61f4620b 	mvnsvs	r6, fp, lsl #4
    8604:	61e66339 	mvnvs	r6, r9, lsr r3
    8608:	61e661e6 	mvnvs	r6, r6, ror #3
    860c:	61e661e6 	mvnvs	r6, r6, ror #3
    8610:	649461e6 	ldrvs	r6, [r4], #486	; 0x1e6
    8614:	64f961e6 	ldrbtvs	r6, [r9], #486	; 0x1e6
    8618:	652a61e6 	strvs	r6, [sl, #-486]!	; 0xfffffe1a
    861c:	655661e6 	ldrbvs	r6, [r6, #-486]	; 0xfffffe1a
    8620:	674661e6 	strbvs	r6, [r6, -r6, ror #3]
    8624:	121061e6 	andsne	r6, r0, #-2147483591	; 0x80000039
    8628:	720e90b0 	andvc	r9, lr, #176	; 0xb0
    862c:	72057306 	andvc	r7, r5, #402653184	; 0x18000000
    8630:	90301210 	eorsls	r1, r0, r0, lsl r2
    8634:	cff061a7 	svcgt	0x00f061a7
    8638:	c1d4673c 	bicsgt	r6, r4, ip, lsr r7
    863c:	c3c0c003 	bicgt	ip, r0, #3
    8640:	78406454 	stmdavc	r0, {r2, r4, r6, sl, sp, lr}^
    8644:	78509150 	ldmdavc	r0, {r4, r6, r8, ip, pc}^
    8648:	78609210 	stmdavc	r0!, {r4, r9, ip, pc}^
    864c:	78709220 	ldmdavc	r0!, {r5, r9, ip, pc}^
    8650:	78809230 	stmvc	r0, {r4, r5, r9, ip, pc}
    8654:	78909240 	ldmvc	r0, {r6, r9, ip, pc}
    8658:	78309260 	ldmdavc	r0!, {r5, r6, r9, ip, pc}
    865c:	82109190 	andshi	r9, r0, #144, 2	; 0x24
    8660:	06f03940 	ldrbteq	r3, [r0], r0, asr #18
    8664:	31101001 	tstcc	r0, r1
    8668:	92001410 	andls	r1, r0, #16, 8	; 0x10000000
    866c:	61e66742 	mvnvs	r6, r2, asr #14
    8670:	a0e2a0bc 	strhtge	sl, [r2], #12
    8674:	80f0a054 	rscshi	sl, r0, r4, asr r0
    8678:	46152250 			; <UNDEFINED> instruction: 0x46152250
    867c:	22008040 	andcs	r8, r0, #64	; 0x40
    8680:	620d472b 	andvs	r4, sp, #11272192	; 0xac0000
    8684:	822da040 	eorhi	sl, sp, #64	; 0x40
    8688:	398d318d 	stmibcc	sp, {r0, r2, r3, r7, r8, ip, sp}
    868c:	c0f18210 	rscsgt	r8, r1, r0, lsl r2
    8690:	10090410 	andne	r0, r9, r0, lsl r4
    8694:	394a821a 	stmdbcc	sl, {r1, r3, r4, r9, pc}^
    8698:	8210041a 	andshi	r0, r0, #436207616	; 0x1a000000
    869c:	04103980 	ldreq	r3, [r0], #-2432	; 0xfffff680
    86a0:	10ab100e 	adcne	r1, fp, lr
    86a4:	10c210bc 	strhne	r1, [r2], #12
    86a8:	72296463 	eorvc	r6, r9, #1660944384	; 0x63000000
    86ac:	673ccfe0 	ldrvs	ip, [ip, -r0, ror #31]!
    86b0:	b003b013 	andlt	fp, r3, r3, lsl r0
    86b4:	b05366c8 	subslt	r6, r3, r8, asr #13
    86b8:	b054b050 	subslt	fp, r4, r0, asr r0
    86bc:	b013b064 	andslt	fp, r3, r4, rrx
    86c0:	821066a5 	andshi	r6, r0, #173015040	; 0xa500000
    86c4:	463822e0 	ldrtmi	r2, [r8], -r0, ror #5
    86c8:	710066ae 	smlatbvc	r0, lr, r6, r6
    86cc:	22018041 	andcs	r8, r1, #65	; 0x41
    86d0:	80f0472b 	rscshi	r4, r0, fp, lsr #14
    86d4:	464b2210 			; <UNDEFINED> instruction: 0x464b2210
    86d8:	471822f0 			; <UNDEFINED> instruction: 0x471822f0
    86dc:	2231b064 	eorscs	fp, r1, #100	; 0x64
    86e0:	b0634238 	rsblt	r4, r3, r8, lsr r2
    86e4:	821066ce 	andshi	r6, r0, #216006656	; 0xce00000
    86e8:	463822e0 	ldrtmi	r2, [r8], -r0, ror #5
    86ec:	62386670 	eorsvs	r6, r8, #112, 12	; 0x7000000
    86f0:	816fb064 	cmnhi	pc, r4, rrx
    86f4:	3d8f318f 	stfccs	f3, [pc, #572]	; 8938 <__exidx_end+0x3a0b>
    86f8:	92ffdfd0 	rscsls	sp, pc, #208, 30	; 0x340
    86fc:	7100673c 	tstvc	r0, ip, lsr r7
    8700:	22018041 	andcs	r8, r1, #65	; 0x41
    8704:	b064472b 	rsblt	r4, r4, fp, lsr #14
    8708:	225080f0 	subscs	r8, r0, #240	; 0xf0
    870c:	b0634265 	rsblt	r4, r3, r5, ror #4
    8710:	22c18211 	sbccs	r8, r1, #268435457	; 0x10000001
    8714:	66ce4660 	strbvs	r4, [lr], r0, ror #12
    8718:	82116705 	andshi	r6, r1, #1310720	; 0x140000
    871c:	465222d1 			; <UNDEFINED> instruction: 0x465222d1
    8720:	62526670 	subsvs	r6, r2, #112, 12	; 0x7000000
    8724:	81728161 	cmnhi	r2, r1, ror #2
    8728:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    872c:	3d823182 	stfccs	f3, [r2, #520]	; 0x208
    8730:	92f1efc0 	rscsls	lr, r1, #192, 30	; 0x300
    8734:	673c9302 	ldrvs	r9, [ip, -r2, lsl #6]!
    8738:	81b0620b 	lslshi	r6, fp, #4
    873c:	81d391c0 	bicshi	r9, r3, r0, asr #3
    8740:	a2908297 	addsge	r8, r0, #1879048201	; 0x70000009
    8744:	4e7f18d3 	mrcmi	8, 3, r1, cr15, cr3, {6}
    8748:	16130bf3 			; <UNDEFINED> instruction: 0x16130bf3
    874c:	4aa41ce3 	bmi	fe90fae0 <_estack+0xde90aae0>
    8750:	81e391c3 	mvnhi	r9, r3, asr #3
    8754:	6290143b 	addsvs	r1, r0, #989855744	; 0x3b000000
    8758:	468b1cba 			; <UNDEFINED> instruction: 0x468b1cba
    875c:	4a8b1e23 	bmi	fe2cfff0 <_estack+0xde2caff0>
    8760:	4e8b1ce3 	cdpmi	12, 8, cr1, cr11, cr3, {7}
    8764:	2207b290 	andcs	fp, r7, #144, 4
    8768:	a290428b 	addsge	r4, r0, #-1342177272	; 0xb0000008
    876c:	62961a1b 	addsvs	r1, r6, #110592	; 0x1b000
    8770:	4aa41ce3 	bmi	fe90fb04 <_estack+0xde90ab04>
    8774:	81e391c3 	mvnhi	r9, r3, asr #3
    8778:	1cab183b 	stcne	8, cr1, [fp], #236	; 0xec
    877c:	1c9b4ea0 	ldcne	14, cr4, [fp], {160}	; 0xa0
    8780:	1cbc4aa2 	vldmiane	ip!, {s8-s169}
    8784:	10b242a4 	adcsne	r4, r2, r4, lsr #5
    8788:	22d08210 	sbcscs	r8, r0, #16, 4
    878c:	80f0429d 	smlalshi	r4, r0, sp, r2
    8790:	46a42210 	ssatmi	r2, #5, r0, lsl #4
    8794:	66a56463 	strtvs	r6, [r5], r3, ror #8
    8798:	10ab62a4 	adcne	r6, fp, r4, lsr #5
    879c:	109b6294 	umullsne	r6, fp, r4, r2
    87a0:	70006294 	mulvc	r0, r4, r2
    87a4:	c0f18230 	rscsgt	r8, r1, r0, lsr r2
    87a8:	b0630410 	rsblt	r0, r3, r0, lsl r4
    87ac:	6aa87100 	bvs	fea24bb4 <_estack+0xdea1fbb4>
    87b0:	b0e010bc 	strhtlt	r1, [r0], #12
    87b4:	81b27000 			; <UNDEFINED> instruction: 0x81b27000
    87b8:	81d291c2 	bicshi	r9, r2, r2, asr #3
    87bc:	18128201 	ldmdane	r2, {r0, r9, pc}
    87c0:	18128151 	ldmdane	r2, {r0, r4, r6, r8, pc}
    87c4:	31818241 	orrcc	r8, r1, r1, asr #4
    87c8:	1c123d81 	ldcne	13, cr3, [r2], {129}	; 0x81
    87cc:	b0e24abf 	strhtlt	r4, [r2], #175	; 0xaf
    87d0:	dfb0b032 	svcle	0x00b0b032
    87d4:	673c92f2 			; <UNDEFINED> instruction: 0x673c92f2
    87d8:	1421c7f1 	strtne	ip, [r1], #-2033	; 0xfffff80f
    87dc:	c8124ec3 	ldmdagt	r2, {r0, r1, r6, r7, r9, sl, fp, lr}
    87e0:	91729162 	cmnls	r2, r2, ror #2
    87e4:	b0e1b031 	rsclt	fp, r1, r1, lsr r0
    87e8:	c0087000 	andgt	r7, r8, r0
    87ec:	c800c006 	stmdagt	r0, {r1, r2, lr, pc}
    87f0:	91709160 	cmnls	r0, r0, ror #2
    87f4:	82017000 	andhi	r7, r1, #0
    87f8:	91c081b0 	strhls	r8, [r0, #16]
    87fc:	181081d0 	ldmdane	r0, {r4, r6, r7, r8, pc}
    8800:	18108151 	ldmdane	r0, {r0, r4, r6, r8, pc}
    8804:	80e11406 	rschi	r1, r1, r6, lsl #8
    8808:	31828242 	orrcc	r8, r2, r2, asr #4
    880c:	1c203d82 	stcne	13, cr3, [r0], #-520	; 0xfffffdf8
    8810:	b0e24ae4 	rsclt	r4, r2, r4, ror #21
    8814:	46e82221 	strbtmi	r2, [r8], r1, lsr #4
    8818:	1005b032 	andne	fp, r5, r2, lsr r0
    881c:	92f5dfa0 	rscsls	sp, r5, #160, 30	; 0x280
    8820:	2221673c 	eorcs	r6, r1, #60, 14	; 0xf00000
    8824:	a0e242e8 	rscge	r4, r2, r8, ror #5
    8828:	8231b032 	eorshi	fp, r1, #50	; 0x32
    882c:	c0f03941 	rscsgt	r3, r0, r1, asr #18
    8830:	1e010401 	cdpne	4, 0, cr0, cr1, cr1, {0}
    8834:	161842f6 			; <UNDEFINED> instruction: 0x161842f6
    8838:	3010c010 	andscc	ip, r0, r0, lsl r0
    883c:	47041c08 	strmi	r1, [r4, -r8, lsl #24]
    8840:	3c101060 	ldccc	0, cr1, [r0], {96}	; 0x60
    8844:	c7f11006 	ldrbgt	r1, [r1, r6]!
    8848:	4efa1461 	cdpmi	4, 15, cr1, cr10, cr1, {3}
    884c:	9166c816 	cmnls	r6, r6, lsl r8
    8850:	31818171 	orrcc	r8, r1, r1, ror r1
    8854:	1c163d81 	ldcne	13, cr3, [r6], {129}	; 0x81
    8858:	91764b01 	cmnls	r6, r1, lsl #22
    885c:	c006b031 	andgt	fp, r6, r1, lsr r0
    8860:	7000c008 	andvc	ip, r0, r8
    8864:	31818161 	orrcc	r8, r1, r1, ror #2
    8868:	82403d81 	subhi	r3, r0, #8256	; 0x2040
    886c:	18013980 	stmdane	r1, {r7, r8, fp, ip, sp}
    8870:	4b171cf1 	blmi	5cfc3c <__ccfg+0x5afc94>
    8874:	80b01401 	adcshi	r1, r0, r1, lsl #8
    8878:	471722c0 	ldrmi	r2, [r7, -r0, asr #5]
    887c:	b033b0bc 	ldrhtlt	fp, [r3], -ip
    8880:	92f1ef90 	rscsls	lr, r1, #144, 30	; 0x240
    8884:	673c930f 	ldrvs	r9, [ip, -pc, lsl #6]!
    8888:	a0037000 	andge	r7, r3, r0
    888c:	b064b063 	rsblt	fp, r4, r3, rrx
    8890:	6556b0ef 	ldrbvs	fp, [r6, #-239]	; 0xffffff11
    8894:	80407100 	subhi	r7, r0, r0, lsl #2
    8898:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    889c:	652ab064 	strvs	fp, [sl, #-100]!	; 0xffffff9c
    88a0:	7100a0ef 	smlattvc	r0, pc, r0, sl
    88a4:	22008040 	andcs	r8, r0, #64	; 0x40
    88a8:	b064472b 	rsblt	r4, r4, fp, lsr #14
    88ac:	6238b003 	eorsvs	fp, r8, #3
    88b0:	81628201 	cmnhi	r2, r1, lsl #4
    88b4:	3d823182 	stfccs	f3, [r2, #520]	; 0x208
    88b8:	92f1ef80 	rscsls	lr, r1, #128, 30	; 0x200
    88bc:	673c9302 	ldrvs	r9, [ip, -r2, lsl #6]!
    88c0:	6556a003 	ldrbvs	sl, [r6, #-3]
    88c4:	80a261e6 	adchi	r6, r2, r6, ror #3
    88c8:	61e66463 	mvnvs	r6, r3, ror #8
    88cc:	7100b050 	qaddvc	fp, r0, r0
    88d0:	92e061e6 	rscls	r6, r0, #-2147483591	; 0x80000039
    88d4:	220082d0 	andcs	r8, r0, #208, 4
    88d8:	b2c0473d 	sbclt	r4, r0, #15990784	; 0xf40000
    88dc:	80a07000 	adchi	r7, r0, r0
    88e0:	435922f0 	cmpmi	r9, #240, 4
    88e4:	c102b030 	tstgt	r2, r0, lsr r0
    88e8:	c0013162 	andgt	r3, r1, r2, ror #2
    88ec:	1e0080a0 	cdpne	0, 0, cr8, cr0, cr0, {5}
    88f0:	22f04352 	rscscs	r4, r0, #1207959553	; 0x48000001
    88f4:	f5a04353 			; <UNDEFINED> instruction: 0xf5a04353
    88f8:	39603160 	stmdbcc	r0!, {r5, r6, r8, ip, sp}^
    88fc:	10206353 	eorne	r6, r0, r3, asr r3
    8900:	6f131a10 	svcvs	0x00131a10
    8904:	16116e23 	ldrne	r6, [r1], -r3, lsr #28
    8908:	6b541612 	blvs	150e158 <__ccfg+0x14ee1b0>
    890c:	5a137000 	bpl	4e4914 <__ccfg+0x4c496c>
    8910:	07000015 	smladeq	r0, r5, r0, r0
    8914:	04c22739 	strbeq	r2, [r2], #1849	; 0x739
    8918:	01010000 	mrseq	r0, (UNDEF: 1)
    891c:	00180b13 	andseq	r0, r8, r3, lsl fp
    8920:	153a0700 	ldrne	r0, [sl, #-1792]!	; 0xfffff900
    8924:	00000155 	andeq	r0, r0, r5, asr r1
    8928:	51130101 	tstpl	r3, r1, lsl #2
    892c:	0700001c 	smladeq	r0, ip, r0, r0
    8930:	033c1a3b 	teqeq	ip, #241664	; 0x3b000
    8934:	01010000 	mrseq	r0, (UNDEF: 1)
    8938:	001ad113 	andseq	sp, sl, r3, lsl r1
    893c:	1a3c0700 	bne	f0a544 <__ccfg+0xeea59c>
    8940:	000003d8 	ldrdeq	r0, [r0], -r8
    8944:	6b0f0101 	blvs	3c8d50 <__ccfg+0x3a8da8>
    8948:	bc000000 	stclt	0, cr0, [r0], {-0}
    894c:	10000013 	andne	r0, r0, r3, lsl r0
    8950:	00000091 	muleq	r0, r1, r0
    8954:	b4140014 	ldrlt	r0, [r4], #-20	; 0xffffffec
    8958:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    895c:	13ac113d 			; <UNDEFINED> instruction: 0x13ac113d
    8960:	03050000 	movweq	r0, #20480	; 0x5000
    8964:	200000b4 	strhcs	r0, [r0], -r4
    8968:	00137415 	andseq	r7, r3, r5, lsl r4
    896c:	20720800 	rsbscs	r0, r2, r0, lsl #16
    8970:	00500305 	subseq	r0, r0, r5, lsl #6
    8974:	82152000 	andshi	r2, r5, #0
    8978:	08000013 	stmdaeq	r0, {r0, r1, r4}
    897c:	03050e96 	movweq	r0, #24214	; 0x5e96
    8980:	20000038 	andcs	r0, r0, r8, lsr r0
    8984:	00139015 	andseq	r9, r3, r5, lsl r0
    8988:	13ad0800 			; <UNDEFINED> instruction: 0x13ad0800
    898c:	009c0305 	addseq	r0, ip, r5, lsl #6
    8990:	9e152000 	cdpls	0, 1, cr2, cr5, cr0, {0}
    8994:	08000013 	stmdaeq	r0, {r0, r1, r4}
    8998:	030513c2 	movweq	r1, #21442	; 0x53c2
    899c:	20000078 	andcs	r0, r0, r8, ror r0
    89a0:	00018a00 	andeq	r8, r1, r0, lsl #20
    89a4:	57000400 	strpl	r0, [r0, -r0, lsl #8]
    89a8:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    89ac:	001f5601 	andseq	r5, pc, r1, lsl #12
    89b0:	1f3b0100 	svcne	0x003b0100
    89b4:	201d0000 	andscs	r0, sp, r0
    89b8:	0e700000 	cdpeq	0, 7, cr0, cr0, cr0, {0}
    89bc:	00000000 	andeq	r0, r0, r0
    89c0:	5fe70000 	svcpl	0x00e70000
    89c4:	01020000 	mrseq	r0, (UNDEF: 2)
    89c8:	00029d06 	andeq	r9, r2, r6, lsl #26
    89cc:	1f310300 	svcne	0x00310300
    89d0:	1d020000 	stcne	0, cr0, [r2, #-0]
    89d4:	00000037 	andeq	r0, r0, r7, lsr r0
    89d8:	9b080102 	blls	208de8 <__ccfg+0x1e8e40>
    89dc:	02000002 	andeq	r0, r0, #2
    89e0:	02b90502 	adcseq	r0, r9, #8388608	; 0x800000
    89e4:	02020000 	andeq	r0, r2, #0
    89e8:	0001ca07 	andeq	ip, r1, r7, lsl #20
    89ec:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    89f0:	0000005c 	andeq	r0, r0, ip, asr r0
    89f4:	001ec903 	andseq	ip, lr, r3, lsl #18
    89f8:	5e410200 	cdppl	2, 4, cr0, cr1, cr0, {0}
    89fc:	02000000 	andeq	r0, r0, #0
    8a00:	00450704 	subeq	r0, r5, r4, lsl #14
    8a04:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    8a08:	00005705 	andeq	r5, r0, r5, lsl #14
    8a0c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    8a10:	00000040 	andeq	r0, r0, r0, asr #32
    8a14:	69050404 	stmdbvs	r5, {r2, sl}
    8a18:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    8a1c:	004a0704 	subeq	r0, sl, r4, lsl #14
    8a20:	33030000 	movwcc	r0, #12288	; 0x3000
    8a24:	0300001f 	movweq	r0, #31
    8a28:	00002c14 	andeq	r2, r0, r4, lsl ip
    8a2c:	1ecb0300 	cdpne	3, 12, cr0, cr11, cr0, {0}
    8a30:	20030000 	andcs	r0, r3, r0
    8a34:	00000053 	andeq	r0, r0, r3, asr r0
    8a38:	001ef503 	andseq	pc, lr, r3, lsl #10
    8a3c:	a2330400 	eorsge	r0, r3, #0, 8
    8a40:	05000000 	streq	r0, [r0, #-0]
    8a44:	0000a804 	andeq	sl, r0, r4, lsl #16
    8a48:	0b030600 	bleq	ca250 <__ccfg+0xaa2a8>
    8a4c:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
    8a50:	0000b434 	andeq	fp, r0, r4, lsr r4
    8a54:	ba040500 	blt	109e5c <__ccfg+0xe9eb4>
    8a58:	07000000 	streq	r0, [r0, -r0]
    8a5c:	000000c5 	andeq	r0, r0, r5, asr #1
    8a60:	00008108 	andeq	r8, r0, r8, lsl #2
    8a64:	24090000 	strcs	r0, [r9], #-0
    8a68:	0500001f 	streq	r0, [r0, #-31]	; 0xffffffe1
    8a6c:	00301c99 	mlaseq	r0, r9, ip, r1
    8a70:	00002800 	andeq	r2, r0, r0, lsl #16
    8a74:	0b9c0100 	bleq	fe708e7c <_estack+0xde703e7c>
    8a78:	0a000001 	beq	8a84 <__exidx_end+0x3b57>
    8a7c:	00002006 	andeq	r2, r0, r6
    8a80:	00973501 	addseq	r3, r7, r1, lsl #10
    8a84:	328f0000 	addcc	r0, pc, #0
    8a88:	d40b0000 	strle	r0, [fp], #-0
    8a8c:	0100001e 	tsteq	r0, lr, lsl r0
    8a90:	00010b37 	andeq	r0, r1, r7, lsr fp
    8a94:	0032d400 	eorseq	sp, r2, r0, lsl #8
    8a98:	30240c00 	eorcc	r0, r4, r0, lsl #24
    8a9c:	01770000 	cmneq	r7, r0
    8aa0:	3e0d0000 	cdpcc	0, 0, cr0, cr13, cr0, {0}
    8aa4:	82000030 	andhi	r0, r0, #48	; 0x30
    8aa8:	00000001 	andeq	r0, r0, r1
    8aac:	c2020102 	andgt	r0, r2, #-2147483648	; 0x80000000
    8ab0:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    8ab4:	00001ee0 	andeq	r1, r0, r0, ror #29
    8ab8:	00009a05 	andeq	r9, r0, r5, lsl #20
    8abc:	002c0000 	eoreq	r0, ip, r0
    8ac0:	9c010000 	stcls	0, cr0, [r1], {-0}
    8ac4:	00000177 	andeq	r0, r0, r7, ror r1
    8ac8:	0020060a 	eoreq	r0, r0, sl, lsl #12
    8acc:	a9400100 	stmdbge	r0, {r8}^
    8ad0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8ad4:	0a000033 	beq	8ba8 <__exidx_end+0x3c7b>
    8ad8:	0000207d 	andeq	r2, r0, sp, ror r0
    8adc:	00814001 	addeq	r4, r1, r1
    8ae0:	334e0000 	movtcc	r0, #57344	; 0xe000
    8ae4:	d40b0000 	strle	r0, [fp], #-0
    8ae8:	0100001e 	tsteq	r0, lr, lsl r0
    8aec:	00010b42 	andeq	r0, r1, r2, asr #22
    8af0:	00336f00 	eorseq	r6, r3, r0, lsl #30
    8af4:	00000c00 	andeq	r0, r0, r0, lsl #24
    8af8:	01770000 	cmneq	r7, r0
    8afc:	000f0000 	andeq	r0, pc, r0
    8b00:	6d000000 	stcvs	0, cr0, [r0, #-0]
    8b04:	10000001 	andne	r0, r0, r1
    8b08:	77025001 	strvc	r5, [r2, -r1]
    8b0c:	000d0000 	andeq	r0, sp, r0
    8b10:	82000000 	andhi	r0, r0, #0
    8b14:	00000001 	andeq	r0, r0, r1
    8b18:	001f0611 	andseq	r0, pc, r1, lsl r6	; <UNPREDICTABLE>
    8b1c:	8c6a0600 	stclhi	6, cr0, [sl], #-0
    8b20:	11000000 	mrsne	r0, (UNDEF: 0)
    8b24:	00001f15 	andeq	r1, r0, r5, lsl pc
    8b28:	008c8406 	addeq	r8, ip, r6, lsl #8
    8b2c:	d5000000 	strle	r0, [r0, #-0]
    8b30:	04000000 	streq	r0, [r0], #-0
    8b34:	00244300 	eoreq	r4, r4, r0, lsl #6
    8b38:	56010400 	strpl	r0, [r1], -r0, lsl #8
    8b3c:	0100001f 	tsteq	r0, pc, lsl r0
    8b40:	000020c9 	andeq	r2, r0, r9, asr #1
    8b44:	0000201d 	andeq	r2, r0, sp, lsl r0
    8b48:	00000e88 	andeq	r0, r0, r8, lsl #29
    8b4c:	00000000 	andeq	r0, r0, r0
    8b50:	00006187 	andeq	r6, r0, r7, lsl #3
    8b54:	0020c002 	eoreq	ip, r0, r2
    8b58:	301b0200 	andscc	r0, fp, r0, lsl #4
    8b5c:	03000000 	movweq	r0, #0
    8b60:	029d0601 	addseq	r0, sp, #1048576	; 0x100000
    8b64:	01030000 	mrseq	r0, (UNDEF: 3)
    8b68:	00029b08 	andeq	r9, r2, r8, lsl #22
    8b6c:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
    8b70:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
    8b74:	ca070203 	bgt	1c9388 <__ccfg+0x1a93e0>
    8b78:	02000001 	andeq	r0, r0, #1
    8b7c:	000020b6 	strheq	r2, [r0], -r6
    8b80:	00573f02 	subseq	r3, r7, r2, lsl #30
    8b84:	04030000 	streq	r0, [r3], #-0
    8b88:	00005c05 	andeq	r5, r0, r5, lsl #24
    8b8c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    8b90:	00000045 	andeq	r0, r0, r5, asr #32
    8b94:	57050803 	strpl	r0, [r5, -r3, lsl #16]
    8b98:	03000000 	movweq	r0, #0
    8b9c:	00400708 	subeq	r0, r0, r8, lsl #14
    8ba0:	04040000 	streq	r0, [r4], #-0
    8ba4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    8ba8:	07040300 	streq	r0, [r4, -r0, lsl #6]
    8bac:	0000004a 	andeq	r0, r0, sl, asr #32
    8bb0:	0020c202 	eoreq	ip, r0, r2, lsl #4
    8bb4:	25130300 	ldrcs	r0, [r3, #-768]	; 0xfffffd00
    8bb8:	02000000 	andeq	r0, r0, #0
    8bbc:	000020b8 	strheq	r2, [r0], -r8
    8bc0:	004c1f03 	subeq	r1, ip, r3, lsl #30
    8bc4:	87050000 	strhi	r0, [r5, -r0]
    8bc8:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
    8bcc:	00008caa 	andeq	r8, r0, sl, lsr #25
    8bd0:	00304400 	eorseq	r4, r0, r0, lsl #8
    8bd4:	00003000 	andeq	r3, r0, r0
    8bd8:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    8bdc:	000020fa 	strdeq	r2, [r0], -sl
    8be0:	008c3e01 	addeq	r3, ip, r1, lsl #28
    8be4:	33a40000 			; <UNDEFINED> instruction: 0x33a40000
    8be8:	eb060000 	bl	188bf0 <__ccfg+0x168c48>
    8bec:	01000020 	tsteq	r0, r0, lsr #32
    8bf0:	00008c3f 	andeq	r8, r0, pc, lsr ip
    8bf4:	0033bd00 	eorseq	fp, r3, r0, lsl #26
    8bf8:	20a90700 	adccs	r0, r9, r0, lsl #14
    8bfc:	40010000 	andmi	r0, r1, r0
    8c00:	00000081 	andeq	r0, r0, r1, lsl #1
    8c04:	00005101 	andeq	r5, r0, r1, lsl #2
    8c08:	00000143 	andeq	r0, r0, r3, asr #2
    8c0c:	24b20004 	ldrtcs	r0, [r2], #4
    8c10:	01040000 	mrseq	r0, (UNDEF: 4)
    8c14:	00001f56 	andeq	r1, r0, r6, asr pc
    8c18:	0021ab01 	eoreq	sl, r1, r1, lsl #22
    8c1c:	00201d00 	eoreq	r1, r0, r0, lsl #26
    8c20:	000e9800 	andeq	r9, lr, r0, lsl #16
    8c24:	00000000 	andeq	r0, r0, r0
    8c28:	0062f200 	rsbeq	pc, r2, r0, lsl #4
    8c2c:	06010200 	streq	r0, [r1], -r0, lsl #4
    8c30:	0000029d 	muleq	r0, sp, r2
    8c34:	9b080102 	blls	209044 <__ccfg+0x1e909c>
    8c38:	02000002 	andeq	r0, r0, #2
    8c3c:	02b90502 	adcseq	r0, r9, #8388608	; 0x800000
    8c40:	02020000 	andeq	r0, r2, #0
    8c44:	0001ca07 	andeq	ip, r1, r7, lsl #20
    8c48:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    8c4c:	0000005c 	andeq	r0, r0, ip, asr r0
    8c50:	001ec903 	andseq	ip, lr, r3, lsl #18
    8c54:	53410200 	movtpl	r0, #4608	; 0x1200
    8c58:	02000000 	andeq	r0, r0, #0
    8c5c:	00450704 	subeq	r0, r5, r4, lsl #14
    8c60:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    8c64:	00005705 	andeq	r5, r0, r5, lsl #14
    8c68:	21550300 	cmpcs	r5, r0, lsl #6
    8c6c:	5b020000 	blpl	88c74 <__ccfg+0x68ccc>
    8c70:	0000006c 	andeq	r0, r0, ip, rrx
    8c74:	40070802 	andmi	r0, r7, r2, lsl #16
    8c78:	04000000 	streq	r0, [r0], #-0
    8c7c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    8c80:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    8c84:	00004a07 	andeq	r4, r0, r7, lsl #20
    8c88:	1ecb0300 	cdpne	3, 12, cr0, cr11, cr0, {0}
    8c8c:	20030000 	andcs	r0, r3, r0
    8c90:	00000048 	andeq	r0, r0, r8, asr #32
    8c94:	00215703 	eoreq	r5, r1, r3, lsl #14
    8c98:	61260300 			; <UNDEFINED> instruction: 0x61260300
    8c9c:	05000000 	streq	r0, [r0, #-0]
    8ca0:	00002120 	andeq	r2, r0, r0, lsr #2
    8ca4:	81034504 	tsthi	r3, r4, lsl #10
    8ca8:	74000000 	strvc	r0, [r0], #-0
    8cac:	20000030 	andcs	r0, r0, r0, lsr r0
    8cb0:	01000000 	mrseq	r0, (UNDEF: 0)
    8cb4:	0000dd9c 	muleq	r0, ip, sp
    8cb8:	21110600 	tstcs	r1, r0, lsl #12
    8cbc:	40010000 	andmi	r0, r1, r0
    8cc0:	00000081 	andeq	r0, r0, r1, lsl #1
    8cc4:	000033f2 	strdeq	r3, [r0], -r2
    8cc8:	00216006 	eoreq	r6, r1, r6
    8ccc:	81410100 	mrshi	r0, (UNDEF: 81)
    8cd0:	05000000 	streq	r0, [r0, #-0]
    8cd4:	07000034 	smladxeq	r0, r4, r0, r0
    8cd8:	00002143 	andeq	r2, r0, r3, asr #2
    8cdc:	00814201 	addeq	r4, r1, r1, lsl #4
    8ce0:	52010000 	andpl	r0, r1, #0
    8ce4:	21720500 	cmncs	r2, r0, lsl #10
    8ce8:	53040000 	movwpl	r0, #16384	; 0x4000
    8cec:	00008c03 	andeq	r8, r0, r3, lsl #24
    8cf0:	00309400 	eorseq	r9, r0, r0, lsl #8
    8cf4:	00001800 	andeq	r1, r0, r0, lsl #16
    8cf8:	2f9c0100 	svccs	0x009c0100
    8cfc:	08000001 	stmdaeq	r0, {r0}
    8d00:	16590108 	ldrbne	r0, [r9], -r8, lsl #2
    8d04:	09000001 	stmdbeq	r0, {r0}
    8d08:	00002105 	andeq	r2, r0, r5, lsl #2
    8d0c:	008c5a01 	addeq	r5, ip, r1, lsl #20
    8d10:	9e090000 	cdpls	0, 0, cr0, cr9, cr0, {0}
    8d14:	01000021 	tsteq	r0, r1, lsr #32
    8d18:	00012f5b 	andeq	r2, r1, fp, asr pc
    8d1c:	930a0000 	movwls	r0, #40960	; 0xa000
    8d20:	01000021 	tsteq	r0, r1, lsr #32
    8d24:	0000f75c 	andeq	pc, r0, ip, asr r7	; <UNPREDICTABLE>
    8d28:	21430700 	cmpcs	r3, r0, lsl #14
    8d2c:	5d010000 	stcpl	0, cr0, [r1, #-0]
    8d30:	00000081 	andeq	r0, r0, r1, lsl #1
    8d34:	0b005101 	bleq	1d140 <__exidx_end+0x18213>
    8d38:	00000081 	andeq	r0, r0, r1, lsl #1
    8d3c:	0000013f 	andeq	r0, r0, pc, lsr r1
    8d40:	00013f0c 	andeq	r3, r1, ip, lsl #30
    8d44:	02000100 	andeq	r0, r0, #0, 2
    8d48:	21ca0704 	biccs	r0, sl, r4, lsl #14
    8d4c:	36000000 	strcc	r0, [r0], -r0
    8d50:	04000001 	streq	r0, [r0], #-1
    8d54:	00255c00 	eoreq	r5, r5, r0, lsl #24
    8d58:	56010400 	strpl	r0, [r1], -r0, lsl #8
    8d5c:	0100001f 	tsteq	r0, pc, lsl r0
    8d60:	00002208 	andeq	r2, r0, r8, lsl #4
    8d64:	0000201d 	andeq	r2, r0, sp, lsl r0
    8d68:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
    8d6c:	00000000 	andeq	r0, r0, r0
    8d70:	0000649f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    8d74:	9d060102 	stflss	f0, [r6, #-8]
    8d78:	02000002 	andeq	r0, r0, #2
    8d7c:	029b0801 	addseq	r0, fp, #65536	; 0x10000
    8d80:	02020000 	andeq	r0, r2, #0
    8d84:	0002b905 	andeq	fp, r2, r5, lsl #18
    8d88:	07020200 	streq	r0, [r2, -r0, lsl #4]
    8d8c:	000001ca 	andeq	r0, r0, sl, asr #3
    8d90:	5c050402 	cfstrspl	mvf0, [r5], {2}
    8d94:	03000000 	movweq	r0, #0
    8d98:	00001ec9 	andeq	r1, r0, r9, asr #29
    8d9c:	00534102 	subseq	r4, r3, r2, lsl #2
    8da0:	04020000 	streq	r0, [r2], #-0
    8da4:	00004507 	andeq	r4, r0, r7, lsl #10
    8da8:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    8dac:	00000057 	andeq	r0, r0, r7, asr r0
    8db0:	40070802 	andmi	r0, r7, r2, lsl #16
    8db4:	04000000 	streq	r0, [r0], #-0
    8db8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    8dbc:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    8dc0:	00004a07 	andeq	r4, r0, r7, lsl #20
    8dc4:	1ecb0300 	cdpne	3, 12, cr0, cr11, cr0, {0}
    8dc8:	20030000 	andcs	r0, r3, r0
    8dcc:	00000048 	andeq	r0, r0, r8, asr #32
    8dd0:	001f0605 	andseq	r0, pc, r5, lsl #12
    8dd4:	766a0400 	strbtvc	r0, [sl], -r0, lsl #8
    8dd8:	ac000000 	stcge	0, cr0, [r0], {-0}
    8ddc:	08000030 	stmdaeq	r0, {r4, r5}
    8de0:	01000000 	mrseq	r0, (UNDEF: 0)
    8de4:	0000a69c 	muleq	r0, ip, r6
    8de8:	21f60600 	mvnscs	r0, r0, lsl #12
    8dec:	77010000 	strvc	r0, [r1, -r0]
    8df0:	00000076 	andeq	r0, r0, r6, ror r0
    8df4:	22230500 	eorcs	r0, r3, #0, 10
    8df8:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
    8dfc:	00000076 	andeq	r0, r0, r6, ror r0
    8e00:	00000000 	andeq	r0, r0, r0
    8e04:	00000006 	andeq	r0, r0, r6
    8e08:	00cb9c01 	sbceq	r9, fp, r1, lsl #24
    8e0c:	f6060000 			; <UNDEFINED> instruction: 0xf6060000
    8e10:	01000021 	tsteq	r0, r1, lsr #32
    8e14:	000076c2 	andeq	r7, r0, r2, asr #13
    8e18:	15050000 	strne	r0, [r5, #-0]
    8e1c:	0400001f 	streq	r0, [r0], #-31	; 0xffffffe1
    8e20:	00007684 	andeq	r7, r0, r4, lsl #13
    8e24:	0030b400 	eorseq	fp, r0, r0, lsl #8
    8e28:	00000800 	andeq	r0, r0, r0, lsl #16
    8e2c:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    8e30:	07000000 	streq	r0, [r0, -r0]
    8e34:	000021f6 	strdeq	r2, [r0], -r6
    8e38:	76010f01 	strvc	r0, [r1], -r1, lsl #30
    8e3c:	00000000 	andeq	r0, r0, r0
    8e40:	0021d308 	eoreq	sp, r1, r8, lsl #6
    8e44:	015b0400 	cmpeq	fp, r0, lsl #8
    8e48:	00000076 	andeq	r0, r0, r6, ror r0
    8e4c:	00000000 	andeq	r0, r0, r0
    8e50:	00000006 	andeq	r0, r0, r6
    8e54:	01189c01 	tsteq	r8, r1, lsl #24
    8e58:	f6070000 			; <UNDEFINED> instruction: 0xf6070000
    8e5c:	01000021 	tsteq	r0, r1, lsr #32
    8e60:	0076015a 	rsbseq	r0, r6, sl, asr r1
    8e64:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8e68:	000021e7 	andeq	r2, r0, r7, ror #3
    8e6c:	00016c04 	andeq	r6, r1, r4, lsl #24
    8e70:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8e74:	01000000 	mrseq	r0, (UNDEF: 0)
    8e78:	21fe0a9c 			; <UNDEFINED> instruction: 0x21fe0a9c
    8e7c:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    8e80:	00007601 	andeq	r7, r0, r1, lsl #12
    8e84:	00500100 	subseq	r0, r0, r0, lsl #2
    8e88:	0008bf00 	andeq	fp, r8, r0, lsl #30
    8e8c:	0c000400 	cfstrseq	mvf0, [r0], {-0}
    8e90:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    8e94:	001f5601 	andseq	r5, pc, r1, lsl #12
    8e98:	235b0100 	cmpcs	fp, #0, 2
    8e9c:	201d0000 	andscs	r0, sp, r0
    8ea0:	0ef80000 	cdpeq	0, 15, cr0, cr8, cr0, {0}
    8ea4:	00000000 	andeq	r0, r0, r0
    8ea8:	663f0000 	ldrtvs	r0, [pc], -r0
    8eac:	01020000 	mrseq	r0, (UNDEF: 2)
    8eb0:	00029d06 	andeq	r9, r2, r6, lsl #26
    8eb4:	1f310300 	svcne	0x00310300
    8eb8:	1d030000 	stcne	0, cr0, [r3, #-0]
    8ebc:	00000037 	andeq	r0, r0, r7, lsr r0
    8ec0:	9b080102 	blls	2092d0 <__ccfg+0x1e9328>
    8ec4:	03000002 	movweq	r0, #2
    8ec8:	00002702 	andeq	r2, r0, r2, lsl #14
    8ecc:	00492903 	subeq	r2, r9, r3, lsl #18
    8ed0:	02020000 	andeq	r0, r2, #0
    8ed4:	0002b905 	andeq	fp, r2, r5, lsl #18
    8ed8:	23270300 			; <UNDEFINED> instruction: 0x23270300
    8edc:	2b030000 	blcs	c8ee4 <__ccfg+0xa8f3c>
    8ee0:	0000005b 	andeq	r0, r0, fp, asr r0
    8ee4:	ca070202 	bgt	1c96f4 <__ccfg+0x1a974c>
    8ee8:	03000001 	movweq	r0, #1
    8eec:	000020b6 	strheq	r2, [r0], -r6
    8ef0:	006d3f03 	rsbeq	r3, sp, r3, lsl #30
    8ef4:	04020000 	streq	r0, [r2], #-0
    8ef8:	00005c05 	andeq	r5, r0, r5, lsl #24
    8efc:	1ec90300 	cdpne	3, 12, cr0, cr9, cr0, {0}
    8f00:	41030000 	mrsmi	r0, (UNDEF: 3)
    8f04:	0000007f 	andeq	r0, r0, pc, ror r0
    8f08:	45070402 	strmi	r0, [r7, #-1026]	; 0xfffffbfe
    8f0c:	02000000 	andeq	r0, r0, #0
    8f10:	00570508 	subseq	r0, r7, r8, lsl #10
    8f14:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    8f18:	00004007 	andeq	r4, r0, r7
    8f1c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    8f20:	00746e69 	rsbseq	r6, r4, r9, ror #28
    8f24:	4a070402 	bmi	1c9f34 <__ccfg+0x1a9f8c>
    8f28:	03000000 	movweq	r0, #0
    8f2c:	00001f33 	andeq	r1, r0, r3, lsr pc
    8f30:	002c1404 	eoreq	r1, ip, r4, lsl #8
    8f34:	04030000 	streq	r0, [r3], #-0
    8f38:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    8f3c:	00003e19 	andeq	r3, r0, r9, lsl lr
    8f40:	23290300 			; <UNDEFINED> instruction: 0x23290300
    8f44:	1a040000 	bne	108f4c <__ccfg+0xe8fa4>
    8f48:	00000050 	andeq	r0, r0, r0, asr r0
    8f4c:	0020b803 	eoreq	fp, r0, r3, lsl #16
    8f50:	621f0400 	andsvs	r0, pc, #0, 8
    8f54:	03000000 	movweq	r0, #0
    8f58:	00001ecb 	andeq	r1, r0, fp, asr #29
    8f5c:	00742004 	rsbseq	r2, r4, r4
    8f60:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
    8f64:	0500001e 	streq	r0, [r0, #-30]	; 0xffffffe2
    8f68:	0000e433 	andeq	lr, r0, r3, lsr r4
    8f6c:	ea040500 	b	10a374 <__ccfg+0xea3cc>
    8f70:	06000000 	streq	r0, [r0], -r0
    8f74:	00f10405 	rscseq	r0, r1, r5, lsl #8
    8f78:	fc070000 	stc2	0, cr0, [r7], {-0}
    8f7c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8f80:	000000a2 	andeq	r0, r0, r2, lsr #1
    8f84:	262b0300 	strtcs	r0, [fp], -r0, lsl #6
    8f88:	42060000 	andmi	r0, r6, #0
    8f8c:	00000107 	andeq	r0, r0, r7, lsl #2
    8f90:	010d0405 	tsteq	sp, r5, lsl #8
    8f94:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    8f98:	26000000 	strcs	r0, [r0], -r0
    8f9c:	08000001 	stmdaeq	r0, {r0}
    8fa0:	00000126 	andeq	r0, r0, r6, lsr #2
    8fa4:	0000ce08 	andeq	ip, r0, r8, lsl #28
    8fa8:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    8fac:	05000000 	streq	r0, [r0, #-0]
    8fb0:	0000a204 	andeq	sl, r0, r4, lsl #4
    8fb4:	27930300 	ldrcs	r0, [r3, r0, lsl #6]
    8fb8:	46060000 	strmi	r0, [r6], -r0
    8fbc:	00000137 	andeq	r0, r0, r7, lsr r1
    8fc0:	013d0405 	teqeq	sp, r5, lsl #8
    8fc4:	ce0a0000 	cdpgt	0, 0, cr0, cr10, cr0, {0}
    8fc8:	03000000 	movweq	r0, #0
    8fcc:	000027dc 	ldrdeq	r2, [r0], -ip
    8fd0:	01374806 	teqeq	r7, r6, lsl #16
    8fd4:	c3030000 	movwgt	r0, #12288	; 0x3000
    8fd8:	06000024 	streq	r0, [r0], -r4, lsr #32
    8fdc:	0001584a 	andeq	r5, r1, sl, asr #16
    8fe0:	5e040500 	cfsh32pl	mvfx0, mvfx4, #0
    8fe4:	09000001 	stmdbeq	r0, {r0}
    8fe8:	000000ce 	andeq	r0, r0, lr, asr #1
    8fec:	0000016d 	andeq	r0, r0, sp, ror #2
    8ff0:	0000ce08 	andeq	ip, r0, r8, lsl #28
    8ff4:	d2030000 	andle	r0, r3, #0
    8ff8:	06000023 	streq	r0, [r0], -r3, lsr #32
    8ffc:	0001374c 	andeq	r3, r1, ip, asr #14
    9000:	23320300 	teqcs	r2, #0, 6
    9004:	4e060000 	cdpmi	0, 0, cr0, cr6, cr0, {0}
    9008:	00000107 	andeq	r0, r0, r7, lsl #2
    900c:	0023c203 	eoreq	ip, r3, r3, lsl #4
    9010:	e4510600 	ldrb	r0, [r1], #-1536	; 0xfffffa00
    9014:	03000000 	movweq	r0, #0
    9018:	0000224c 	andeq	r2, r0, ip, asr #4
    901c:	01995306 	orrseq	r5, r9, r6, lsl #6
    9020:	04050000 	streq	r0, [r5], #-0
    9024:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    9028:	0000ce09 	andeq	ip, r0, r9, lsl #28
    902c:	0001b800 	andeq	fp, r1, r0, lsl #16
    9030:	01b80800 			; <UNDEFINED> instruction: 0x01b80800
    9034:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
    9038:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    903c:	000000b8 	strheq	r0, [r0], -r8
    9040:	b8040500 	stmdalt	r4, {r8, sl}
    9044:	03000000 	movweq	r0, #0
    9048:	00002641 	andeq	r2, r0, r1, asr #12
    904c:	01c95706 	biceq	r5, r9, r6, lsl #14
    9050:	04050000 	streq	r0, [r5], #-0
    9054:	000001cf 	andeq	r0, r0, pc, asr #3
    9058:	0000ce09 	andeq	ip, r0, r9, lsl #28
    905c:	0001e300 	andeq	lr, r1, r0, lsl #6
    9060:	01e30800 	mvneq	r0, r0, lsl #16
    9064:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    9068:	00000000 	andeq	r0, r0, r0
    906c:	00ce0405 	sbceq	r0, lr, r5, lsl #8
    9070:	35030000 	strcc	r0, [r3, #-0]
    9074:	06000024 	streq	r0, [r0], -r4, lsr #32
    9078:	0001c95a 	andeq	ip, r1, sl, asr r9
    907c:	24ef0300 	strbtcs	r0, [pc], #768	; 9084 <__exidx_end+0x4157>
    9080:	5d060000 	stcpl	0, cr0, [r6, #-0]
    9084:	000001c9 	andeq	r0, r0, r9, asr #3
    9088:	00225e03 	eoreq	r5, r2, r3, lsl #28
    908c:	c9600600 	stmdbgt	r0!, {r9, sl}^
    9090:	03000001 	movweq	r0, #1
    9094:	0000264f 	andeq	r2, r0, pc, asr #12
    9098:	00e46306 	rsceq	r6, r4, r6, lsl #6
    909c:	9c030000 	stcls	0, cr0, [r3], {-0}
    90a0:	06000022 	streq	r0, [r0], -r2, lsr #32
    90a4:	00022065 	andeq	r2, r2, r5, rrx
    90a8:	26040500 	strcs	r0, [r4], -r0, lsl #10
    90ac:	07000002 	streq	r0, [r0, -r2]
    90b0:	00000231 	andeq	r0, r0, r1, lsr r2
    90b4:	0000ce08 	andeq	ip, r0, r8, lsl #28
    90b8:	ed030000 	stc	0, cr0, [r3, #-0]
    90bc:	06000027 	streq	r0, [r0], -r7, lsr #32
    90c0:	00022067 	andeq	r2, r2, r7, rrx
    90c4:	25310300 	ldrcs	r0, [r1, #-768]!	; 0xfffffd00
    90c8:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
    90cc:	000000eb 	andeq	r0, r0, fp, ror #1
    90d0:	0027cc03 	eoreq	ip, r7, r3, lsl #24
    90d4:	eb6b0600 	bl	1aca8dc <__ccfg+0x1aaa934>
    90d8:	03000000 	movweq	r0, #0
    90dc:	000024fe 	strdeq	r2, [r0], -lr
    90e0:	00eb6d06 	rsceq	r6, fp, r6, lsl #26
    90e4:	10030000 	andne	r0, r3, r0
    90e8:	06000025 	streq	r0, [r0], -r5, lsr #32
    90ec:	0000eb6f 	andeq	lr, r0, pc, ror #22
    90f0:	064c0b00 	strbeq	r0, [ip], -r0, lsl #22
    90f4:	0003557a 	andeq	r5, r3, sl, ror r5
    90f8:	24d40c00 	ldrbcs	r0, [r4], #3072	; 0xc00
    90fc:	7c060000 	stcvc	0, cr0, [r6], {-0}
    9100:	000000fc 	strdeq	r0, [r0], -ip
    9104:	27bf0c00 	ldrcs	r0, [pc, r0, lsl #24]!
    9108:	7d060000 	stcvc	0, cr0, [r6, #-0]
    910c:	0000012c 	andeq	r0, r0, ip, lsr #2
    9110:	24e50c04 	strbtcs	r0, [r5], #3076	; 0xc04
    9114:	7e060000 	cdpvc	0, 0, cr0, cr6, cr0, {0}
    9118:	00000142 	andeq	r0, r0, r2, asr #2
    911c:	26de0c08 	ldrbcs	r0, [lr], r8, lsl #24
    9120:	7f060000 	svcvc	0x00060000
    9124:	0000014d 	andeq	r0, r0, sp, asr #2
    9128:	26f00c0c 	ldrbtcs	r0, [r0], ip, lsl #24
    912c:	80060000 	andhi	r0, r6, r0
    9130:	0000016d 	andeq	r0, r0, sp, ror #2
    9134:	23e30c10 	mvncs	r0, #16, 24	; 0x1000
    9138:	81060000 	mrshi	r0, (UNDEF: 6)
    913c:	00000178 	andeq	r0, r0, r8, ror r1
    9140:	239f0c14 	orrscs	r0, pc, #20, 24	; 0x1400
    9144:	82060000 	andhi	r0, r6, #0
    9148:	00000183 	andeq	r0, r0, r3, lsl #3
    914c:	24da0c18 	ldrbcs	r0, [sl], #3096	; 0xc18
    9150:	83060000 	movwhi	r0, #24576	; 0x6000
    9154:	0000018e 	andeq	r0, r0, lr, lsl #3
    9158:	26690c1c 			; <UNDEFINED> instruction: 0x26690c1c
    915c:	84060000 	strhi	r0, [r6], #-0
    9160:	000001be 			; <UNDEFINED> instruction: 0x000001be
    9164:	24610c20 	strbtcs	r0, [r1], #-3104	; 0xfffff3e0
    9168:	85060000 	strhi	r0, [r6, #-0]
    916c:	000001e9 	andeq	r0, r0, r9, ror #3
    9170:	24b90c24 	ldrtcs	r0, [r9], #3108	; 0xc24
    9174:	86060000 	strhi	r0, [r6], -r0
    9178:	000001f4 	strdeq	r0, [r0], -r4
    917c:	271e0c28 	ldrcs	r0, [lr, -r8, lsr #24]
    9180:	87060000 	strhi	r0, [r6, -r0]
    9184:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    9188:	23fe0c2c 	mvnscs	r0, #44, 24	; 0x2c00
    918c:	88060000 	stmdahi	r6, {}	; <UNPREDICTABLE>
    9190:	00000215 	andeq	r0, r0, r5, lsl r2
    9194:	270c0c30 	smladxcs	ip, r0, ip, r0
    9198:	89060000 	stmdbhi	r6, {}	; <UNPREDICTABLE>
    919c:	00000231 	andeq	r0, r0, r1, lsr r2
    91a0:	22dd0c34 	sbcscs	r0, sp, #52, 24	; 0x3400
    91a4:	8a060000 	bhi	1891ac <__ccfg+0x169204>
    91a8:	0000020a 	andeq	r0, r0, sl, lsl #4
    91ac:	25200c38 	strcs	r0, [r0, #-3128]!	; 0xfffff3c8
    91b0:	8b060000 	blhi	1891b8 <__ccfg+0x169210>
    91b4:	0000023c 	andeq	r0, r0, ip, lsr r2
    91b8:	26bf0c3c 			; <UNDEFINED> instruction: 0x26bf0c3c
    91bc:	8c060000 	stchi	0, cr0, [r6], {-0}
    91c0:	00000247 	andeq	r0, r0, r7, asr #4
    91c4:	24430c40 	strbcs	r0, [r3], #-3136	; 0xfffff3c0
    91c8:	8d060000 	stchi	0, cr0, [r6, #-0]
    91cc:	00000252 	andeq	r0, r0, r2, asr r2
    91d0:	228d0c44 	addcs	r0, sp, #68, 24	; 0x4400
    91d4:	8e060000 	cdphi	0, 0, cr0, cr6, cr0, {0}
    91d8:	0000025d 	andeq	r0, r0, sp, asr r2
    91dc:	ef030048 	svc	0x00030048
    91e0:	06000025 	streq	r0, [r0], -r5, lsr #32
    91e4:	0002688f 	andeq	r6, r2, pc, lsl #17
    91e8:	01140b00 	tsteq	r4, r0, lsl #22
    91ec:	0003a554 	andeq	sl, r3, r4, asr r5
    91f0:	23430c00 	movtcs	r0, #15360	; 0x3c00
    91f4:	55010000 	strpl	r0, [r1, #-0]
    91f8:	000000ce 	andeq	r0, r0, lr, asr #1
    91fc:	25b50c00 	ldrcs	r0, [r5, #3072]!	; 0xc00
    9200:	56010000 	strpl	r0, [r1], -r0
    9204:	000000ce 	andeq	r0, r0, lr, asr #1
    9208:	22ad0c04 	adccs	r0, sp, #4, 24	; 0x400
    920c:	57010000 	strpl	r0, [r1, -r0]
    9210:	000000ce 	andeq	r0, r0, lr, asr #1
    9214:	23760c08 	cmncs	r6, #8, 24	; 0x800
    9218:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    921c:	000000ce 	andeq	r0, r0, lr, asr #1
    9220:	22f00c0c 	rscscs	r0, r0, #12, 24	; 0xc00
    9224:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    9228:	000000c3 	andeq	r0, r0, r3, asr #1
    922c:	e0030010 	and	r0, r3, r0, lsl r0
    9230:	01000025 	tsteq	r0, r5, lsr #32
    9234:	0003605a 	andeq	r6, r3, sl, asr r0
    9238:	22340d00 	eorscs	r0, r4, #0, 26
    923c:	f9020000 			; <UNDEFINED> instruction: 0xf9020000
    9240:	0003d301 	andeq	sp, r3, r1, lsl #6
    9244:	260e0e00 	strcs	r0, [lr], -r0, lsl #28
    9248:	65010000 	strvs	r0, [r1, #-0]
    924c:	000000ce 	andeq	r0, r0, lr, asr #1
    9250:	0022850e 	eoreq	r8, r2, lr, lsl #10
    9254:	ce650100 	powgts	f0, f5, f0
    9258:	00000000 	andeq	r0, r0, r0
    925c:	00226d0f 	eoreq	r6, r2, pc, lsl #26
    9260:	01100200 	tsteq	r0, r0, lsl #4
    9264:	000000ce 	andeq	r0, r0, lr, asr #1
    9268:	0003fb01 	andeq	pc, r3, r1, lsl #22
    926c:	260e0e00 	strcs	r0, [lr], -r0, lsl #28
    9270:	a0010000 	andge	r0, r1, r0
    9274:	000000ce 	andeq	r0, r0, lr, asr #1
    9278:	0026ce10 	eoreq	ip, r6, r0, lsl lr
    927c:	cea20100 	fdvgts	f0, f2, f0
    9280:	00000000 	andeq	r0, r0, r0
    9284:	0003b011 	andeq	fp, r3, r1, lsl r0
    9288:	0030bc00 	eorseq	fp, r0, r0, lsl #24
    928c:	00005c00 	andeq	r5, r0, r0, lsl #24
    9290:	b69c0100 	ldrlt	r0, [ip], r0, lsl #2
    9294:	12000004 	andne	r0, r0, #4
    9298:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    929c:	00003418 	andeq	r3, r0, r8, lsl r4
    92a0:	0003c712 	andeq	ip, r3, r2, lsl r7
    92a4:	00344400 	eorseq	r4, r4, r0, lsl #8
    92a8:	30f61300 	rscscc	r1, r6, r0, lsl #6
    92ac:	00140000 	andseq	r0, r4, r0
    92b0:	04610000 	strbteq	r0, [r1], #-0
    92b4:	bc120000 	ldclt	0, cr0, [r2], {-0}
    92b8:	70000003 	andvc	r0, r0, r3
    92bc:	12000034 	andne	r0, r0, #52	; 0x34
    92c0:	000003c7 	andeq	r0, r0, r7, asr #7
    92c4:	00003483 	andeq	r3, r0, r3, lsl #9
    92c8:	00310a14 	eorseq	r0, r1, r4, lsl sl
    92cc:	00740200 	rsbseq	r0, r4, r0, lsl #4
    92d0:	01530115 	cmpeq	r3, r5, lsl r1
    92d4:	52011532 	andpl	r1, r1, #209715200	; 0xc800000
    92d8:	01153c01 	tsteq	r5, r1, lsl #24
    92dc:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    92e0:	0c055001 	stceq	0, cr5, [r5], {1}
    92e4:	400ca000 	andmi	sl, ip, r0
    92e8:	da160000 	ble	5892f0 <__ccfg+0x569348>
    92ec:	02000030 	andeq	r0, r0, #48	; 0x30
    92f0:	048d0076 	streq	r0, [sp], #118	; 0x76
    92f4:	01150000 	tsteq	r5, r0
    92f8:	15300153 	ldrne	r0, [r0, #-339]!	; 0xfffffead
    92fc:	31015201 	tstcc	r1, r1, lsl #4
    9300:	01510115 	cmpeq	r1, r5, lsl r1
    9304:	50011530 	andpl	r1, r1, r0, lsr r5
    9308:	a0000c05 	andge	r0, r0, r5, lsl #24
    930c:	0215400c 	andseq	r4, r5, #12
    9310:	7402007d 	strvc	r0, [r2], #-125	; 0xffffff83
    9314:	f2140000 	vhadd.s16	d0, d4, d0
    9318:	02000030 	andeq	r0, r0, #48	; 0x30
    931c:	01150076 	tsteq	r5, r6, ror r0
    9320:	15310153 	ldrne	r0, [r1, #-339]!	; 0xfffffead
    9324:	32015201 	andcc	r5, r1, #268435456	; 0x10000000
    9328:	01510115 	cmpeq	r1, r5, lsl r1
    932c:	50011530 	andpl	r1, r1, r0, lsr r5
    9330:	a0000c05 	andge	r0, r0, r5, lsl #24
    9334:	0215400c 	andseq	r4, r5, #12
    9338:	7402007d 	strvc	r0, [r2], #-125	; 0xffffff83
    933c:	11000000 	mrsne	r0, (UNDEF: 0)
    9340:	000003d3 	ldrdeq	r0, [r0], -r3
    9344:	00003118 	andeq	r3, r0, r8, lsl r1
    9348:	0000002c 	andeq	r0, r0, ip, lsr #32
    934c:	050d9c01 	streq	r9, [sp, #-3073]	; 0xfffff3ff
    9350:	e4120000 	ldr	r0, [r2], #-0
    9354:	a4000003 	strge	r0, [r0], #-3
    9358:	17000034 	smladxne	r0, r4, r0, r0
    935c:	000003ef 	andeq	r0, r0, pc, ror #7
    9360:	e0185001 	ands	r5, r8, r1
    9364:	f400000e 	vst4.8	{d0-d3}, [r0], lr
    9368:	19000004 	stmdbne	r0, {r2}
    936c:	000003e4 	andeq	r0, r0, r4, ror #7
    9370:	0ee01a04 	vfmaeq.f32	s3, s0, s8
    9374:	ef1b0000 	svc	0x001b0000
    9378:	00000003 	andeq	r0, r0, r3
    937c:	31381400 	teqcc	r8, r0, lsl #8
    9380:	74020000 	strvc	r0, [r2], #-0
    9384:	51011500 	tstpl	r1, r0, lsl #10
    9388:	15340802 	ldrne	r0, [r4, #-2050]!	; 0xfffff7fe
    938c:	0c055001 	stceq	0, cr5, [r5], {1}
    9390:	400ca000 	andmi	sl, ip, r0
    9394:	a41c0000 	ldrge	r0, [ip], #-0
    9398:	02000027 	andeq	r0, r0, #39	; 0x27
    939c:	00ce0184 	sbceq	r0, lr, r4, lsl #3
    93a0:	00000000 	andeq	r0, r0, r0
    93a4:	00900000 	addseq	r0, r0, r0
    93a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    93ac:	00000576 	andeq	r0, r0, r6, ror r5
    93b0:	0025fa1d 	eoreq	pc, r5, sp, lsl sl	; <UNPREDICTABLE>
    93b4:	cec20100 	polgts	f0, f2, f0
    93b8:	c5000000 	strgt	r0, [r0, #-0]
    93bc:	1e000034 	mcrne	0, 0, r0, cr0, cr4, {1}
    93c0:	0000256d 	andeq	r2, r0, sp, ror #10
    93c4:	00cec401 	sbceq	ip, lr, r1, lsl #8
    93c8:	34f10000 	ldrbtcc	r0, [r1], #0
    93cc:	861e0000 	ldrhi	r0, [lr], -r0
    93d0:	01000025 	tsteq	r0, r5, lsr #32
    93d4:	0000c3c5 	andeq	ip, r0, r5, asr #7
    93d8:	00350400 	eorseq	r0, r5, r0, lsl #8
    93dc:	22fc1e00 	rscscs	r1, ip, #0, 28
    93e0:	c6010000 	strgt	r0, [r1], -r0
    93e4:	000000ce 	andeq	r0, r0, lr, asr #1
    93e8:	0000352b 	andeq	r3, r0, fp, lsr #10
    93ec:	0000001f 	andeq	r0, r0, pc, lsl r0
    93f0:	00089e00 	andeq	r9, r8, r0, lsl #28
    93f4:	00001f00 	andeq	r1, r0, r0, lsl #30
    93f8:	08aa0000 	stmiaeq	sl!, {}	; <UNPREDICTABLE>
    93fc:	20000000 	andcs	r0, r0, r0
    9400:	000023ab 	andeq	r2, r0, fp, lsr #7
    9404:	44019102 	strmi	r9, [r1], #-258	; 0xfffffefe
    9408:	18000031 	stmdane	r0, {r0, r4, r5}
    940c:	01000000 	mrseq	r0, (UNDEF: 0)
    9410:	0005ae9c 	muleq	r5, ip, lr
    9414:	314e2100 	mrscc	r2, (UNDEF: 94)
    9418:	03b00000 	movseq	r0, #0
    941c:	05a40000 	streq	r0, [r4, #0]!
    9420:	01150000 	tsteq	r5, r0
    9424:	15310151 	ldrne	r0, [r1, #-337]!	; 0xfffffeaf
    9428:	33015001 	movwcc	r5, #4097	; 0x1001
    942c:	31521f00 	cmpcc	r2, r0, lsl #30
    9430:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    9434:	22000000 	andcs	r0, r0, #0
    9438:	000025c4 	andeq	r2, r0, r4, asr #11
    943c:	bb012202 	bllt	51c4c <__ccfg+0x31ca4>
    9440:	03000005 	movweq	r0, #5
    9444:	c2020102 	andgt	r0, r2, #-2147483648	; 0x80000000
    9448:	2300000b 	movwcs	r0, #11
    944c:	00002619 	andeq	r2, r0, r9, lsl r6
    9450:	03014002 	movweq	r4, #4098	; 0x1002
    9454:	0022bb1c 	eoreq	fp, r2, ip, lsl fp
    9458:	01a10200 			; <UNDEFINED> instruction: 0x01a10200
    945c:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    9460:	0000315c 	andeq	r3, r0, ip, asr r1
    9464:	00000060 	andeq	r0, r0, r0, rrx
    9468:	06779c01 	ldrbteq	r9, [r7], -r1, lsl #24
    946c:	a5240000 	strge	r0, [r4, #-0]!
    9470:	01000025 	tsteq	r0, r5, lsr #32
    9474:	00ce0102 	sbceq	r0, lr, r2, lsl #2
    9478:	357f0000 	ldrbcc	r0, [pc, #-0]!	; 9480 <__exidx_end+0x4553>
    947c:	72240000 	eorvc	r0, r4, #0
    9480:	01000026 	tsteq	r0, r6, lsr #32
    9484:	00ce0103 	sbceq	r0, lr, r3, lsl #2
    9488:	35920000 	ldrcc	r0, [r2]
    948c:	ae250000 	cdpge	0, 2, cr0, cr5, cr0, {0}
    9490:	68000005 	stmdavs	r0, {r0, r2}
    9494:	10000031 	andne	r0, r0, r1, lsr r0
    9498:	01000000 	mrseq	r0, (UNDEF: 0)
    949c:	063c0109 	ldrteq	r0, [ip], -r9, lsl #2
    94a0:	78140000 	ldmdavc	r4, {}	; <UNPREDICTABLE>
    94a4:	02000031 	andeq	r0, r0, #49	; 0x31
    94a8:	01150074 	tsteq	r5, r4, ror r0
    94ac:	15300153 	ldrne	r0, [r0, #-339]!	; 0xfffffead
    94b0:	31015201 	tstcc	r1, r1, lsl #4
    94b4:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    94b8:	01153408 	tsteq	r5, r8, lsl #8
    94bc:	000c0550 	andeq	r0, ip, r0, asr r5
    94c0:	00400ca0 	subeq	r0, r0, r0, lsr #25
    94c4:	05c22500 	strbeq	r2, [r2, #1280]	; 0x500
    94c8:	317a0000 	cmncc	sl, r0
    94cc:	00080000 	andeq	r0, r8, r0
    94d0:	0a010000 	beq	494d8 <__ccfg+0x29530>
    94d4:	00065a01 	andeq	r5, r6, r1, lsl #20
    94d8:	31821f00 	orrcc	r1, r2, r0, lsl #30
    94dc:	08b50000 	ldmeq	r5!, {}	; <UNPREDICTABLE>
    94e0:	21000000 	mrscs	r0, (UNDEF: 0)
    94e4:	00003164 	andeq	r3, r0, r4, ror #2
    94e8:	000003d3 	ldrdeq	r0, [r0], -r3
    94ec:	0000066d 	andeq	r0, r0, sp, ror #12
    94f0:	01500115 	cmpeq	r0, r5, lsl r1
    94f4:	861f0031 			; <UNDEFINED> instruction: 0x861f0031
    94f8:	9e000031 	mcrls	0, 0, r0, cr0, cr1, {1}
    94fc:	00000008 	andeq	r0, r0, r8
    9500:	00241020 	eoreq	r1, r4, r0, lsr #32
    9504:	01ae0200 			; <UNDEFINED> instruction: 0x01ae0200
    9508:	000031bc 			; <UNDEFINED> instruction: 0x000031bc
    950c:	00000034 	andeq	r0, r0, r4, lsr r0
    9510:	06e99c01 	strbteq	r9, [r9], r1, lsl #24
    9514:	c2250000 	eorgt	r0, r5, #0
    9518:	ce000005 	cdpgt	0, 0, cr0, cr0, cr5, {0}
    951c:	08000031 	stmdaeq	r0, {r0, r4, r5}
    9520:	01000000 	mrseq	r0, (UNDEF: 0)
    9524:	06ab012f 	strteq	r0, [fp], pc, lsr #2
    9528:	d61f0000 	ldrle	r0, [pc], -r0
    952c:	b5000031 	strlt	r0, [r0, #-49]	; 0xffffffcf
    9530:	00000008 	andeq	r0, r0, r8
    9534:	0031c621 	eorseq	ip, r1, r1, lsr #12
    9538:	0003b000 	andeq	fp, r3, r0
    953c:	0006c300 	andeq	ip, r6, r0, lsl #6
    9540:	51011500 	tstpl	r1, r0, lsl #10
    9544:	01153001 	tsteq	r5, r1
    9548:	00330150 	eorseq	r0, r3, r0, asr r1
    954c:	0031cc21 	eorseq	ip, r1, r1, lsr #24
    9550:	0003d300 	andeq	sp, r3, r0, lsl #6
    9554:	0006d600 	andeq	sp, r6, r0, lsl #12
    9558:	50011500 	andpl	r1, r1, r0, lsl #10
    955c:	1f003101 	svcne	0x00003101
    9560:	000031da 	ldrdeq	r3, [r0], -sl
    9564:	0000089e 	muleq	r0, lr, r8
    9568:	0031e21f 	eorseq	lr, r1, pc, lsl r2
    956c:	0008aa00 	andeq	sl, r8, r0, lsl #20
    9570:	6a1c0000 	bvs	709578 <__ccfg+0x6e95d0>
    9574:	02000024 	andeq	r0, r0, #36	; 0x24
    9578:	00c301f2 	strdeq	r0, [r3], #18
    957c:	00000000 	andeq	r0, r0, r0
    9580:	00380000 	eorseq	r0, r8, r0
    9584:	9c010000 	stcls	0, cr0, [r1], {-0}
    9588:	0000079a 	muleq	r0, sl, r7
    958c:	00263826 	eoreq	r3, r6, r6, lsr #16
    9590:	013c0100 	teqeq	ip, r0, lsl #2
    9594:	000000c3 	andeq	r0, r0, r3, asr #1
    9598:	000035a5 	andeq	r3, r0, r5, lsr #11
    959c:	00259b27 	eoreq	r9, r5, r7, lsr #22
    95a0:	013f0100 	teqeq	pc, r0, lsl #2
    95a4:	000000ce 	andeq	r0, r0, lr, asr #1
    95a8:	fe275101 	cdp2	1, 2, cr5, cr7, cr1, {0}
    95ac:	01000027 	tsteq	r0, r7, lsr #32
    95b0:	00c30141 	sbceq	r0, r3, r1, asr #2
    95b4:	71050000 	mrsvc	r0, (UNDEF: 5)
    95b8:	9f264000 	svcls	0x00264000
    95bc:	00230f27 	eoreq	r0, r3, r7, lsr #30
    95c0:	01430100 	mrseq	r0, (UNDEF: 83)
    95c4:	000000c3 	andeq	r0, r0, r3, asr #1
    95c8:	40007107 	andmi	r7, r0, r7, lsl #2
    95cc:	9f264824 	svcls	0x00264824
    95d0:	00231727 	eoreq	r1, r3, r7, lsr #14
    95d4:	01450100 	mrseq	r0, (UNDEF: 85)
    95d8:	000000c3 	andeq	r0, r0, r3, asr #1
    95dc:	48007107 	stmdami	r0, {r0, r1, r2, r8, ip, sp, lr}
    95e0:	9f264824 	svcls	0x00264824
    95e4:	00231f24 	eoreq	r1, r3, r4, lsr #30
    95e8:	01470100 	mrseq	r0, (UNDEF: 87)
    95ec:	000000c3 	andeq	r0, r0, r3, asr #1
    95f0:	000035d3 	ldrdeq	r3, [r0], -r3	; <UNPREDICTABLE>
    95f4:	00238824 	eoreq	r8, r3, r4, lsr #16
    95f8:	01560100 	cmpeq	r6, r0, lsl #2
    95fc:	000000c3 	andeq	r0, r0, r3, asr #1
    9600:	000035ec 	andeq	r3, r0, ip, ror #11
    9604:	00254024 	eoreq	r4, r5, r4, lsr #32
    9608:	01570100 	cmpeq	r7, r0, lsl #2
    960c:	000000c3 	andeq	r0, r0, r3, asr #1
    9610:	0000360f 	andeq	r3, r0, pc, lsl #12
    9614:	01006428 	tsteq	r0, r8, lsr #8
    9618:	00c30158 	sbceq	r0, r3, r8, asr r1
    961c:	36380000 	ldrtcc	r0, [r8], -r0
    9620:	1c000000 	stcne	0, cr0, [r0], {-0}
    9624:	00002683 	andeq	r2, r0, r3, lsl #13
    9628:	ad020e02 	stcge	14, cr0, [r2, #-8]
    962c:	00000000 	andeq	r0, r0, r0
    9630:	0c000000 	stceq	0, cr0, [r0], {-0}
    9634:	01000000 	mrseq	r0, (UNDEF: 0)
    9638:	0007d59c 	muleq	r7, ip, r5
    963c:	25592600 	ldrbcs	r2, [r9, #-1536]	; 0xfffffa00
    9640:	63010000 	movwvs	r0, #4096	; 0x1000
    9644:	0000c301 	andeq	ip, r0, r1, lsl #6
    9648:	0036b200 	eorseq	fp, r6, r0, lsl #4
    964c:	27322400 	ldrcs	r2, [r2, -r0, lsl #8]!
    9650:	85010000 	strhi	r0, [r1, #-0]
    9654:	0000c301 	andeq	ip, r0, r1, lsl #6
    9658:	0036d300 	eorseq	sp, r6, r0, lsl #6
    965c:	941c0000 	ldrls	r0, [ip], #-0
    9660:	02000024 	andeq	r0, r0, #36	; 0x24
    9664:	00ce01c2 	sbceq	r0, lr, r2, asr #3
    9668:	00000000 	andeq	r0, r0, r0
    966c:	00340000 	eorseq	r0, r4, r0
    9670:	9c010000 	stcls	0, cr0, [r1], {-0}
    9674:	00000842 	andeq	r0, r0, r2, asr #16
    9678:	00278524 	eoreq	r8, r7, r4, lsr #10
    967c:	01920100 	orrseq	r0, r2, r0, lsl #2
    9680:	000000ce 	andeq	r0, r0, lr, asr #1
    9684:	00003713 	andeq	r3, r0, r3, lsl r7
    9688:	00155024 	andseq	r5, r5, r4, lsr #32
    968c:	01930100 	orrseq	r0, r3, r0, lsl #2
    9690:	000000ce 	andeq	r0, r0, lr, asr #1
    9694:	00003735 	andeq	r3, r0, r5, lsr r7
    9698:	00245724 	eoreq	r5, r4, r4, lsr #14
    969c:	01940100 	orrseq	r0, r4, r0, lsl #2
    96a0:	000000ce 	andeq	r0, r0, lr, asr #1
    96a4:	00003748 	andeq	r3, r0, r8, asr #14
    96a8:	0023f524 	eoreq	pc, r3, r4, lsr #10
    96ac:	01950100 	orrseq	r0, r5, r0, lsl #2
    96b0:	000000ce 	andeq	r0, r0, lr, asr #1
    96b4:	0000376b 	andeq	r3, r0, fp, ror #14
    96b8:	0000001f 	andeq	r0, r0, pc, lsl r0
    96bc:	00089e00 	andeq	r9, r8, r0, lsl #28
    96c0:	00001f00 	andeq	r1, r0, r0, lsl #30
    96c4:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    96c8:	1c000000 	stcne	0, cr0, [r0], {-0}
    96cc:	00002751 	andeq	r2, r0, r1, asr r7
    96d0:	ce01d302 	cdpgt	3, 0, cr13, cr1, cr2, {0}
    96d4:	00000000 	andeq	r0, r0, r0
    96d8:	1c000000 	stcne	0, cr0, [r0], {-0}
    96dc:	01000000 	mrseq	r0, (UNDEF: 0)
    96e0:	00088d9c 	muleq	r8, ip, sp
    96e4:	25d52400 	ldrbcs	r2, [r5, #1024]	; 0x400
    96e8:	b7010000 	strlt	r0, [r1, -r0]
    96ec:	0000ce01 	andeq	ip, r0, r1, lsl #28
    96f0:	00378700 	eorseq	r8, r7, r0, lsl #14
    96f4:	27432400 	strbcs	r2, [r3, -r0, lsl #8]
    96f8:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    96fc:	0000ce01 	andeq	ip, r0, r1, lsl #28
    9700:	00379a00 	eorseq	r9, r7, r0, lsl #20
    9704:	23922400 	orrscs	r2, r2, #0, 8
    9708:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    970c:	0000ce01 	andeq	ip, r0, r1, lsl #28
    9710:	0037b500 	eorseq	fp, r7, r0, lsl #10
    9714:	4c290000 	stcmi	0, cr0, [r9], #-0
    9718:	01000025 	tsteq	r0, r5, lsr #32
    971c:	0003a55c 	andeq	sl, r3, ip, asr r5
    9720:	20030500 	andcs	r0, r3, r0, lsl #10
    9724:	2a200002 	bcs	809734 <__ccfg+0x7e978c>
    9728:	00002120 	andeq	r2, r0, r0, lsr #2
    972c:	ce034507 	cfsh32gt	mvfx4, mvfx3, #7
    9730:	2b000000 	blcs	9738 <__exidx_end+0x480b>
    9734:	00002087 	andeq	r2, r0, r7, lsl #1
    9738:	00c3aa08 	sbceq	sl, r3, r8, lsl #20
    973c:	242c0000 	strtcs	r0, [ip], #-0
    9740:	0600001f 			; <UNDEFINED> instruction: 0x0600001f
    9744:	00d90899 	smullseq	r0, r9, r9, r8
    9748:	00000000 	andeq	r0, r0, r0
    974c:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
    9750:	28690004 	stmdacs	r9!, {r2}^
    9754:	01040000 	mrseq	r0, (UNDEF: 4)
    9758:	00001f56 	andeq	r1, r0, r6, asr pc
    975c:	00292201 	eoreq	r2, r9, r1, lsl #4
    9760:	00201d00 	eoreq	r1, r0, r0, lsl #26
    9764:	000f5000 	andeq	r5, pc, r0
    9768:	00000000 	andeq	r0, r0, r0
    976c:	00691900 	rsbeq	r1, r9, r0, lsl #18
    9770:	06010200 	streq	r0, [r1], -r0, lsl #4
    9774:	0000029d 	muleq	r0, sp, r2
    9778:	001f3103 	andseq	r3, pc, r3, lsl #2
    977c:	371d0300 	ldrcc	r0, [sp, -r0, lsl #6]
    9780:	02000000 	andeq	r0, r0, #0
    9784:	029b0801 	addseq	r0, fp, #65536	; 0x10000
    9788:	02030000 	andeq	r0, r3, #0
    978c:	03000027 	movweq	r0, #39	; 0x27
    9790:	00004929 	andeq	r4, r0, r9, lsr #18
    9794:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    9798:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
    979c:	00232703 	eoreq	r2, r3, r3, lsl #14
    97a0:	5b2b0300 	blpl	aca3a8 <__ccfg+0xaaa400>
    97a4:	02000000 	andeq	r0, r0, #0
    97a8:	01ca0702 	biceq	r0, sl, r2, lsl #14
    97ac:	b6030000 	strlt	r0, [r3], -r0
    97b0:	03000020 	movweq	r0, #32
    97b4:	00006d3f 	andeq	r6, r0, pc, lsr sp
    97b8:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    97bc:	0000005c 	andeq	r0, r0, ip, asr r0
    97c0:	001ec903 	andseq	ip, lr, r3, lsl #18
    97c4:	7f410300 	svcvc	0x00410300
    97c8:	02000000 	andeq	r0, r0, #0
    97cc:	00450704 	subeq	r0, r5, r4, lsl #14
    97d0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    97d4:	00005705 	andeq	r5, r0, r5, lsl #14
    97d8:	07080200 	streq	r0, [r8, -r0, lsl #4]
    97dc:	00000040 	andeq	r0, r0, r0, asr #32
    97e0:	69050404 	stmdbvs	r5, {r2, sl}
    97e4:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    97e8:	004a0704 	subeq	r0, sl, r4, lsl #14
    97ec:	33030000 	movwcc	r0, #12288	; 0x3000
    97f0:	0400001f 	streq	r0, [r0], #-31	; 0xffffffe1
    97f4:	00002c14 	andeq	r2, r0, r4, lsl ip
    97f8:	27040300 	strcs	r0, [r4, -r0, lsl #6]
    97fc:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
    9800:	0000003e 	andeq	r0, r0, lr, lsr r0
    9804:	00232903 	eoreq	r2, r3, r3, lsl #18
    9808:	501a0400 	andspl	r0, sl, r0, lsl #8
    980c:	03000000 	movweq	r0, #0
    9810:	000020b8 	strheq	r2, [r0], -r8
    9814:	00621f04 	rsbeq	r1, r2, r4, lsl #30
    9818:	cb030000 	blgt	c9820 <__ccfg+0xa9878>
    981c:	0400001e 	streq	r0, [r0], #-30	; 0xffffffe2
    9820:	00007420 	andeq	r7, r0, r0, lsr #8
    9824:	282b0300 	stmdacs	fp!, {r8, r9}
    9828:	d4050000 	strle	r0, [r5], #-0
    982c:	0000009b 	muleq	r0, fp, r0
    9830:	ca070402 	bgt	1ca840 <__ccfg+0x1aa898>
    9834:	05000021 	streq	r0, [r0, #-33]	; 0xffffffdf
    9838:	08010204 	stmdaeq	r1, {r2, r9}
    983c:	000002a4 	andeq	r0, r0, r4, lsr #5
    9840:	0019b103 	andseq	fp, r9, r3, lsl #2
    9844:	ce3b0600 	cfmsuba32gt	mvax0, mvax0, mvfx11, mvfx0
    9848:	06000000 	streq	r0, [r0], -r0
    984c:	0000a204 	andeq	sl, r0, r4, lsl #4
    9850:	1a420300 	bne	108a458 <__ccfg+0x106a4b0>
    9854:	3c070000 	stccc	0, cr0, [r7], {-0}
    9858:	00000110 	andeq	r0, r0, r0, lsl r1
    985c:	001a3407 	andseq	r3, sl, r7, lsl #8
    9860:	6f071000 	svcvs	0x00071000
    9864:	00000165 	andeq	r0, r0, r5, ror #2
    9868:	00143308 	andseq	r3, r4, r8, lsl #6
    986c:	b8700700 	ldmdalt	r0!, {r8, r9, sl}^
    9870:	00000000 	andeq	r0, r0, r0
    9874:	00170b08 	andseq	r0, r7, r8, lsl #22
    9878:	b8710700 	ldmdalt	r1!, {r8, r9, sl}^
    987c:	02000000 	andeq	r0, r0, #0
    9880:	0017b008 	andseq	fp, r7, r8
    9884:	6d740700 	ldclvs	7, cr0, [r4, #-0]
    9888:	04000002 	streq	r0, [r0], #-2
    988c:	00155008 	andseq	r5, r5, r8
    9890:	f4750700 			; <UNDEFINED> instruction: 0xf4750700
    9894:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9898:	0017d208 	andseq	sp, r7, r8, lsl #4
    989c:	017d0700 	cmneq	sp, r0, lsl #14
    98a0:	0c000002 	stceq	0, cr0, [r0], {2}
    98a4:	001c7508 	andseq	r7, ip, r8, lsl #10
    98a8:	46810700 	strmi	r0, [r1], r0, lsl #14
    98ac:	0d000002 	stceq	0, cr0, [r0, #-8]
    98b0:	29530300 	ldmdbcs	r3, {r8, r9}^
    98b4:	3e070000 	cdpcc	0, 0, cr0, cr7, cr0, {0}
    98b8:	00000170 	andeq	r0, r0, r0, ror r1
    98bc:	00293d07 	eoreq	r3, r9, r7, lsl #26
    98c0:	a5071800 	strge	r1, [r7, #-2048]	; 0xfffff800
    98c4:	00000201 	andeq	r0, r0, r1, lsl #4
    98c8:	00143308 	andseq	r3, r4, r8, lsl #6
    98cc:	b8a60700 	stmialt	r6!, {r8, r9, sl}
    98d0:	00000000 	andeq	r0, r0, r0
    98d4:	00170b08 	andseq	r0, r7, r8, lsl #22
    98d8:	b8a70700 	stmialt	r7!, {r8, r9, sl}
    98dc:	02000000 	andeq	r0, r0, #0
    98e0:	0017b008 	andseq	fp, r7, r8
    98e4:	6daa0700 	stcvs	7, cr0, [sl]
    98e8:	04000002 	streq	r0, [r0], #-2
    98ec:	00155008 	andseq	r5, r5, r8
    98f0:	f4ab0700 	vld4.16	{d0[0],d1[0],d2[0],d3[0]}, [fp], r0
    98f4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    98f8:	0017d208 	andseq	sp, r7, r8, lsl #4
    98fc:	73b30700 			; <UNDEFINED> instruction: 0x73b30700
    9900:	0c000002 	stceq	0, cr0, [r0], {2}
    9904:	001c7508 	andseq	r7, ip, r8, lsl #10
    9908:	b8b70700 	ldmlt	r7!, {r8, r9, sl}
    990c:	0d000002 	stceq	0, cr0, [r0, #-8]
    9910:	00069908 	andeq	r9, r6, r8, lsl #18
    9914:	a2b80700 	adcsge	r0, r8, #0, 14
    9918:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    991c:	00189e08 	andseq	r9, r8, r8, lsl #28
    9920:	a2bf0700 	adcsge	r0, pc, #0, 14
    9924:	0f000000 	svceq	0x00000000
    9928:	0009e008 	andeq	lr, r9, r8
    992c:	dfd40700 	svcle	0x00d40700
    9930:	10000002 	andne	r0, r0, r2
    9934:	001bf608 	andseq	pc, fp, r8, lsl #12
    9938:	b8d50700 	ldmlt	r5, {r8, r9, sl}^
    993c:	12000000 	andne	r0, r0, #0
    9940:	0019a408 	andseq	sl, r9, r8, lsl #8
    9944:	24d60700 	ldrbcs	r0, [r6], #1792	; 0x700
    9948:	14000003 	strne	r0, [r0], #-3
    994c:	07010900 	streq	r0, [r1, -r0, lsl #18]
    9950:	00024676 	andeq	r4, r2, r6, ror r6
    9954:	1c940a00 	vldmiane	r4, {s0-s-1}
    9958:	77070000 	strvc	r0, [r7, -r0]
    995c:	000000a2 	andeq	r0, r0, r2, lsr #1
    9960:	00040401 	andeq	r0, r4, r1, lsl #8
    9964:	00161a0a 	andseq	r1, r6, sl, lsl #20
    9968:	a2780700 	rsbsge	r0, r8, #0, 14
    996c:	01000000 	mrseq	r0, (UNDEF: 0)
    9970:	0a000301 	beq	a57c <__exidx_end+0x564f>
    9974:	000016cf 	andeq	r1, r0, pc, asr #13
    9978:	00a27a07 	adceq	r7, r2, r7, lsl #20
    997c:	02010000 	andeq	r0, r1, #0
    9980:	860a0001 	strhi	r0, [sl], -r1
    9984:	07000014 	smladeq	r0, r4, r0, r0
    9988:	0000a27b 	andeq	sl, r0, fp, ror r2
    998c:	00010100 	andeq	r0, r1, r0, lsl #2
    9990:	01090000 	mrseq	r0, (UNDEF: 9)
    9994:	026d7e07 	rsbeq	r7, sp, #7, 28	; 0x70
    9998:	cc0a0000 	stcgt	0, cr0, [sl], {-0}
    999c:	0700001a 	smladeq	r0, sl, r0, r0
    99a0:	0000a27f 	andeq	sl, r0, pc, ror r2
    99a4:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    99a8:	1c380a00 			; <UNDEFINED> instruction: 0x1c380a00
    99ac:	80070000 	andhi	r0, r7, r0
    99b0:	000000a2 	andeq	r0, r0, r2, lsr #1
    99b4:	00000401 	andeq	r0, r0, r1, lsl #8
    99b8:	05040600 	streq	r0, [r4, #-1536]	; 0xfffffa00
    99bc:	09000001 	stmdbeq	r0, {r0}
    99c0:	b8ac0701 	stmialt	ip!, {r0, r8, r9, sl}
    99c4:	0a000002 	beq	99d4 <__exidx_end+0x4aa7>
    99c8:	00001c94 	muleq	r0, r4, ip
    99cc:	00a2ad07 	adceq	sl, r2, r7, lsl #26
    99d0:	04010000 	streq	r0, [r1], #-0
    99d4:	1a0a0004 	bne	2899ec <__ccfg+0x269a44>
    99d8:	07000016 	smladeq	r0, r6, r0, r0
    99dc:	0000a2ae 	andeq	sl, r0, lr, lsr #5
    99e0:	03010100 	movweq	r0, #4352	; 0x1100
    99e4:	16cf0a00 	strbne	r0, [pc], r0, lsl #20
    99e8:	b0070000 	andlt	r0, r7, r0
    99ec:	000000a2 	andeq	r0, r0, r2, lsr #1
    99f0:	00010201 	andeq	r0, r1, r1, lsl #4
    99f4:	0014860a 	andseq	r8, r4, sl, lsl #12
    99f8:	a2b10700 	adcsge	r0, r1, #0, 14
    99fc:	01000000 	mrseq	r0, (UNDEF: 0)
    9a00:	00000001 	andeq	r0, r0, r1
    9a04:	b4070109 	strlt	r0, [r7], #-265	; 0xfffffef7
    9a08:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    9a0c:	001acc0a 	andseq	ip, sl, sl, lsl #24
    9a10:	a2b50700 	adcsge	r0, r5, #0, 14
    9a14:	01000000 	mrseq	r0, (UNDEF: 0)
    9a18:	0a000404 	beq	aa30 <__exidx_end+0x5b03>
    9a1c:	00001c38 	andeq	r1, r0, r8, lsr ip
    9a20:	00a2b607 	adceq	fp, r2, r7, lsl #12
    9a24:	04010000 	streq	r0, [r1], #-0
    9a28:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    9a2c:	24c20702 	strbcs	r0, [r2], #1794	; 0x702
    9a30:	0a000003 	beq	9a44 <__exidx_end+0x4b17>
    9a34:	000016c2 	andeq	r1, r0, r2, asr #13
    9a38:	00b8c307 	adcseq	ip, r8, r7, lsl #6
    9a3c:	03020000 	movweq	r0, #8192	; 0x2000
    9a40:	5f0a000d 	svcpl	0x000a000d
    9a44:	07000016 	smladeq	r0, r6, r0, r0
    9a48:	0000b8c9 	andeq	fp, r0, r9, asr #17
    9a4c:	0c010200 	sfmeq	f0, 4, [r1], {-0}
    9a50:	160c0a00 	strne	r0, [ip], -r0, lsl #20
    9a54:	cb070000 	blgt	1c9a5c <__ccfg+0x1a9ab4>
    9a58:	000000b8 	strheq	r0, [r0], -r8
    9a5c:	00060602 	andeq	r0, r6, r2, lsl #12
    9a60:	0018b60a 	andseq	fp, r8, sl, lsl #12
    9a64:	b8d20700 	ldmlt	r2, {r8, r9, sl}^
    9a68:	02000000 	andeq	r0, r0, #0
    9a6c:	00000501 	andeq	r0, r0, r1, lsl #10
    9a70:	00ce0406 	sbceq	r0, lr, r6, lsl #8
    9a74:	60030000 	andvs	r0, r3, r0
    9a78:	08000028 	stmdaeq	r0, {r3, r5}
    9a7c:	00033542 	andeq	r3, r3, r2, asr #10
    9a80:	28f00b00 	ldmcs	r0!, {r8, r9, fp}^
    9a84:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
    9a88:	03f901c1 	mvnseq	r0, #1073741872	; 0x40000030
    9a8c:	330c0000 	movwcc	r0, #49152	; 0xc000
    9a90:	08000014 	stmdaeq	r0, {r2, r4}
    9a94:	00b801c2 	adcseq	r0, r8, r2, asr #3
    9a98:	0c000000 	stceq	0, cr0, [r0], {-0}
    9a9c:	0000170b 	andeq	r1, r0, fp, lsl #14
    9aa0:	b801c308 	stmdalt	r1, {r3, r8, r9, lr, pc}
    9aa4:	02000000 	andeq	r0, r0, #0
    9aa8:	0017b00c 	andseq	fp, r7, ip
    9aac:	01c60800 	biceq	r0, r6, r0, lsl #16
    9ab0:	0000026d 	andeq	r0, r0, sp, ror #4
    9ab4:	15500c04 	ldrbne	r0, [r0, #-3076]	; 0xfffff3fc
    9ab8:	c7080000 	strgt	r0, [r8, -r0]
    9abc:	0000f401 	andeq	pc, r0, r1, lsl #8
    9ac0:	d20c0800 	andle	r0, ip, #0, 16
    9ac4:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    9ac8:	04ef01cf 	strbteq	r0, [pc], #463	; 9ad0 <__exidx_end+0x4ba3>
    9acc:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    9ad0:	00001c75 	andeq	r1, r0, r5, ror ip
    9ad4:	3901d308 	stmdbcc	r1, {r3, r8, r9, ip, lr, pc}
    9ad8:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    9adc:	0014280c 	andseq	r2, r4, ip, lsl #16
    9ae0:	01d90800 	bicseq	r0, r9, r0, lsl #16
    9ae4:	00000563 	andeq	r0, r0, r3, ror #10
    9ae8:	178f0c0e 	strne	r0, [pc, lr, lsl #24]
    9aec:	de080000 	cdple	0, 0, cr0, cr8, cr0, {0}
    9af0:	00058d01 	andeq	r8, r5, r1, lsl #26
    9af4:	c30c1000 	movwgt	r1, #49152	; 0xc000
    9af8:	08000015 	stmdaeq	r0, {r0, r2, r4}
    9afc:	00a201df 	ldrdeq	r0, [r2], pc	; <UNPREDICTABLE>
    9b00:	0c140000 	ldceq	0, cr0, [r4], {-0}
    9b04:	00001814 	andeq	r1, r0, r4, lsl r8
    9b08:	b701e708 	strlt	lr, [r1, -r8, lsl #14]
    9b0c:	15000005 	strne	r0, [r0, #-5]
    9b10:	0015450c 	andseq	r4, r5, ip, lsl #10
    9b14:	01fb0800 	mvnseq	r0, r0, lsl #16
    9b18:	000005e1 	andeq	r0, r0, r1, ror #11
    9b1c:	09e00c16 	stmibeq	r0!, {r1, r2, r4, sl, fp}^
    9b20:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    9b24:	00063b02 	andeq	r3, r6, r2, lsl #22
    9b28:	f60c1800 			; <UNDEFINED> instruction: 0xf60c1800
    9b2c:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    9b30:	00b8020f 	adcseq	r0, r8, pc, lsl #4
    9b34:	0c1a0000 	ldceq	0, cr0, [sl], {-0}
    9b38:	000019a4 	andeq	r1, r0, r4, lsr #19
    9b3c:	24021008 	strcs	r1, [r2], #-8
    9b40:	1c000003 	stcne	0, cr0, [r0], {3}
    9b44:	19320300 	ldmdbne	r2!, {r8, r9}
    9b48:	43080000 	movwmi	r0, #32768	; 0x8000
    9b4c:	00000404 	andeq	r0, r0, r4, lsl #8
    9b50:	0019130b 	andseq	r1, r9, fp, lsl #6
    9b54:	1a082800 	bne	213b5c <__ccfg+0x1f3bb4>
    9b58:	0004ef02 	andeq	lr, r4, r2, lsl #30
    9b5c:	14330c00 	ldrtne	r0, [r3], #-3072	; 0xfffff400
    9b60:	1b080000 	blne	209b68 <__ccfg+0x1e9bc0>
    9b64:	0000b802 	andeq	fp, r0, r2, lsl #16
    9b68:	0b0c0000 	bleq	309b70 <__ccfg+0x2e9bc8>
    9b6c:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    9b70:	00b8021d 	adcseq	r0, r8, sp, lsl r2
    9b74:	0c020000 	stceq	0, cr0, [r2], {-0}
    9b78:	000017b0 			; <UNDEFINED> instruction: 0x000017b0
    9b7c:	6d022008 	stcvs	0, cr2, [r2, #-32]	; 0xffffffe0
    9b80:	04000002 	streq	r0, [r0], #-2
    9b84:	0015500c 	andseq	r5, r5, ip
    9b88:	02210800 	eoreq	r0, r1, #0, 16
    9b8c:	000000f4 	strdeq	r0, [r0], -r4
    9b90:	17d20c08 	ldrbne	r0, [r2, r8, lsl #24]
    9b94:	29080000 	stmdbcs	r8, {}	; <UNPREDICTABLE>
    9b98:	00068502 	andeq	r8, r6, r2, lsl #10
    9b9c:	750c0c00 	strvc	r0, [ip, #-3072]	; 0xfffff400
    9ba0:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    9ba4:	06cf022d 	strbeq	r0, [pc], sp, lsr #4
    9ba8:	0c0d0000 	stceq	0, cr0, [sp], {-0}
    9bac:	00001428 	andeq	r1, r0, r8, lsr #8
    9bb0:	f9023308 			; <UNDEFINED> instruction: 0xf9023308
    9bb4:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    9bb8:	00178f0c 	andseq	r8, r7, ip, lsl #30
    9bbc:	02380800 	eorseq	r0, r8, #0, 16
    9bc0:	00000723 	andeq	r0, r0, r3, lsr #14
    9bc4:	15c30c10 	strbne	r0, [r3, #3088]	; 0xc10
    9bc8:	39080000 	stmdbcc	r8, {}	; <UNPREDICTABLE>
    9bcc:	0000a202 	andeq	sl, r0, r2, lsl #4
    9bd0:	140c1400 	strne	r1, [ip], #-1024	; 0xfffffc00
    9bd4:	08000018 	stmdaeq	r0, {r3, r4}
    9bd8:	074d0241 	strbeq	r0, [sp, -r1, asr #4]
    9bdc:	0c150000 	ldceq	0, cr0, [r5], {-0}
    9be0:	00001545 	andeq	r1, r0, r5, asr #10
    9be4:	77025508 	strvc	r5, [r2, -r8, lsl #10]
    9be8:	16000007 	strne	r0, [r0], -r7
    9bec:	0009e00c 	andeq	lr, r9, ip
    9bf0:	02680800 	rsbeq	r0, r8, #0, 16
    9bf4:	000007d1 	ldrdeq	r0, [r0], -r1
    9bf8:	1bf60c18 	blne	ffd8cc60 <_estack+0xdfd87c60>
    9bfc:	69080000 	stmdbvs	r8, {}	; <UNPREDICTABLE>
    9c00:	0000b802 	andeq	fp, r0, r2, lsl #16
    9c04:	a40c1a00 	strge	r1, [ip], #-2560	; 0xfffff600
    9c08:	08000019 	stmdaeq	r0, {r0, r3, r4}
    9c0c:	0324026a 			; <UNDEFINED> instruction: 0x0324026a
    9c10:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    9c14:	0000145e 	andeq	r1, r0, lr, asr r4
    9c18:	b8026c08 	stmdalt	r2, {r3, sl, fp, sp, lr}
    9c1c:	20000000 	andcs	r0, r0, r0
    9c20:	0017b80c 	andseq	fp, r7, ip, lsl #16
    9c24:	02700800 	rsbseq	r0, r0, #0, 16
    9c28:	000000ad 	andeq	r0, r0, sp, lsr #1
    9c2c:	189e0c22 	ldmne	lr, {r1, r5, sl, fp}
    9c30:	73080000 	movwvc	r0, #32768	; 0x8000
    9c34:	0000a202 	andeq	sl, r0, r2, lsl #4
    9c38:	0d002400 	cfstrseq	mvf2, [r0, #-0]
    9c3c:	01c80801 	biceq	r0, r8, r1, lsl #16
    9c40:	00000539 	andeq	r0, r0, r9, lsr r5
    9c44:	001c940e 	andseq	r9, ip, lr, lsl #8
    9c48:	01c90800 	biceq	r0, r9, r0, lsl #16
    9c4c:	000000a2 	andeq	r0, r0, r2, lsr #1
    9c50:	00040401 	andeq	r0, r4, r1, lsl #8
    9c54:	00161a0e 	andseq	r1, r6, lr, lsl #20
    9c58:	01ca0800 	biceq	r0, sl, r0, lsl #16
    9c5c:	000000a2 	andeq	r0, r0, r2, lsr #1
    9c60:	00030101 	andeq	r0, r3, r1, lsl #2
    9c64:	0016cf0e 	andseq	ip, r6, lr, lsl #30
    9c68:	01cc0800 	biceq	r0, ip, r0, lsl #16
    9c6c:	000000a2 	andeq	r0, r0, r2, lsr #1
    9c70:	00010201 	andeq	r0, r1, r1, lsl #4
    9c74:	0014860e 	andseq	r8, r4, lr, lsl #12
    9c78:	01cd0800 	biceq	r0, sp, r0, lsl #16
    9c7c:	000000a2 	andeq	r0, r0, r2, lsr #1
    9c80:	00000101 	andeq	r0, r0, r1, lsl #2
    9c84:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    9c88:	056301d0 	strbeq	r0, [r3, #-464]!	; 0xfffffe30
    9c8c:	cc0e0000 	stcgt	0, cr0, [lr], {-0}
    9c90:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    9c94:	00a201d1 	ldrdeq	r0, [r2], r1	; <UNPREDICTABLE>
    9c98:	04010000 	streq	r0, [r1], #-0
    9c9c:	380e0004 	stmdacc	lr, {r2}
    9ca0:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    9ca4:	00a201d2 	ldrdeq	r0, [r2], r2	; <UNPREDICTABLE>
    9ca8:	04010000 	streq	r0, [r1], #-0
    9cac:	0d000000 	stceq	0, cr0, [r0, #-0]
    9cb0:	01d40802 	bicseq	r0, r4, r2, lsl #16
    9cb4:	0000058d 	andeq	r0, r0, sp, lsl #11
    9cb8:	00173d0e 	andseq	r3, r7, lr, lsl #26
    9cbc:	01d50800 	bicseq	r0, r5, r0, lsl #16
    9cc0:	000000b8 	strheq	r0, [r0], -r8
    9cc4:	000d0302 	andeq	r0, sp, r2, lsl #6
    9cc8:	001c1a0e 	andseq	r1, ip, lr, lsl #20
    9ccc:	01d80800 	bicseq	r0, r8, r0, lsl #16
    9cd0:	000000b8 	strheq	r0, [r0], -r8
    9cd4:	00000d02 	andeq	r0, r0, r2, lsl #26
    9cd8:	08040d00 	stmdaeq	r4, {r8, sl, fp}
    9cdc:	05b701da 	ldreq	r0, [r7, #474]!	; 0x1da
    9ce0:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
    9ce4:	08000018 	stmdaeq	r0, {r3, r4}
    9ce8:	00ce01db 	ldrdeq	r0, [lr], #27
    9cec:	04040000 	streq	r0, [r4], #-0
    9cf0:	940e001c 	strls	r0, [lr], #-28	; 0xffffffe4
    9cf4:	08000019 	stmdaeq	r0, {r0, r3, r4}
    9cf8:	00ce01dd 	ldrdeq	r0, [lr], #29
    9cfc:	15040000 	strne	r0, [r4, #-0]
    9d00:	0d000003 	stceq	0, cr0, [r0, #-12]
    9d04:	01e00801 	mvneq	r0, r1, lsl #16
    9d08:	000005e1 	andeq	r0, r0, r1, ror #11
    9d0c:	001b360e 	andseq	r3, fp, lr, lsl #12
    9d10:	01e10800 	mvneq	r0, r0, lsl #16
    9d14:	000000a2 	andeq	r0, r0, r2, lsr #1
    9d18:	00020601 	andeq	r0, r2, r1, lsl #12
    9d1c:	0014f30e 	andseq	pc, r4, lr, lsl #6
    9d20:	01e30800 	mvneq	r0, r0, lsl #16
    9d24:	000000a2 	andeq	r0, r0, r2, lsr #1
    9d28:	00000201 	andeq	r0, r0, r1, lsl #4
    9d2c:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    9d30:	063b01e8 	ldrteq	r0, [fp], -r8, ror #3
    9d34:	f70e0000 			; <UNDEFINED> instruction: 0xf70e0000
    9d38:	08000016 	stmdaeq	r0, {r1, r2, r4}
    9d3c:	00b801e9 	adcseq	r0, r8, r9, ror #3
    9d40:	06020000 	streq	r0, [r2], -r0
    9d44:	710e000a 	tstvc	lr, sl
    9d48:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    9d4c:	00b801ea 	adcseq	r0, r8, sl, ror #3
    9d50:	01020000 	mrseq	r0, (UNDEF: 2)
    9d54:	e30e0009 	movw	r0, #57353	; 0xe009
    9d58:	08000018 	stmdaeq	r0, {r3, r4}
    9d5c:	00b801ec 	adcseq	r0, r8, ip, ror #3
    9d60:	01020000 	mrseq	r0, (UNDEF: 2)
    9d64:	d10e0008 	tstle	lr, r8
    9d68:	08000014 	stmdaeq	r0, {r2, r4}
    9d6c:	00b801ee 	adcseq	r0, r8, lr, ror #3
    9d70:	04020000 	streq	r0, [r2], #-0
    9d74:	690e0004 	stmdbvs	lr, {r2}
    9d78:	08000014 	stmdaeq	r0, {r2, r4}
    9d7c:	00b801f3 	ldrshteq	r0, [r8], r3
    9d80:	03020000 	movweq	r0, #8192	; 0x2000
    9d84:	0d000000 	stceq	0, cr0, [r0, #-0]
    9d88:	01fc0802 	mvnseq	r0, r2, lsl #16
    9d8c:	00000685 	andeq	r0, r0, r5, lsl #13
    9d90:	0016c20e 	andseq	ip, r6, lr, lsl #4
    9d94:	01fd0800 	mvnseq	r0, r0, lsl #16
    9d98:	000000b8 	strheq	r0, [r0], -r8
    9d9c:	000d0302 	andeq	r0, sp, r2, lsl #6
    9da0:	00165f0e 	andseq	r5, r6, lr, lsl #30
    9da4:	02030800 	andeq	r0, r3, #0, 16
    9da8:	000000b8 	strheq	r0, [r0], -r8
    9dac:	000c0102 	andeq	r0, ip, r2, lsl #2
    9db0:	00160c0e 	andseq	r0, r6, lr, lsl #24
    9db4:	02050800 	andeq	r0, r5, #0, 16
    9db8:	000000b8 	strheq	r0, [r0], -r8
    9dbc:	00060602 	andeq	r0, r6, r2, lsl #12
    9dc0:	0018b60e 	andseq	fp, r8, lr, lsl #12
    9dc4:	020c0800 	andeq	r0, ip, #0, 16
    9dc8:	000000b8 	strheq	r0, [r0], -r8
    9dcc:	00050102 	andeq	r0, r5, r2, lsl #2
    9dd0:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    9dd4:	06cf0222 	strbeq	r0, [pc], r2, lsr #4
    9dd8:	940e0000 	strls	r0, [lr], #-0
    9ddc:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    9de0:	00a20223 	adceq	r0, r2, r3, lsr #4
    9de4:	04010000 	streq	r0, [r1], #-0
    9de8:	1a0e0004 	bne	389e00 <__ccfg+0x369e58>
    9dec:	08000016 	stmdaeq	r0, {r1, r2, r4}
    9df0:	00a20224 	adceq	r0, r2, r4, lsr #4
    9df4:	01010000 	mrseq	r0, (UNDEF: 1)
    9df8:	cf0e0003 	svcgt	0x000e0003
    9dfc:	08000016 	stmdaeq	r0, {r1, r2, r4}
    9e00:	00a20226 	adceq	r0, r2, r6, lsr #4
    9e04:	02010000 	andeq	r0, r1, #0
    9e08:	860e0001 	strhi	r0, [lr], -r1
    9e0c:	08000014 	stmdaeq	r0, {r2, r4}
    9e10:	00a20227 	adceq	r0, r2, r7, lsr #4
    9e14:	01010000 	mrseq	r0, (UNDEF: 1)
    9e18:	0d000000 	stceq	0, cr0, [r0, #-0]
    9e1c:	022a0801 	eoreq	r0, sl, #65536	; 0x10000
    9e20:	000006f9 	strdeq	r0, [r0], -r9
    9e24:	001acc0e 	andseq	ip, sl, lr, lsl #24
    9e28:	022b0800 	eoreq	r0, fp, #0, 16
    9e2c:	000000a2 	andeq	r0, r0, r2, lsr #1
    9e30:	00040401 	andeq	r0, r4, r1, lsl #8
    9e34:	001c380e 	andseq	r3, ip, lr, lsl #16
    9e38:	022c0800 	eoreq	r0, ip, #0, 16
    9e3c:	000000a2 	andeq	r0, r0, r2, lsr #1
    9e40:	00000401 	andeq	r0, r0, r1, lsl #8
    9e44:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    9e48:	0723022e 	streq	r0, [r3, -lr, lsr #4]!
    9e4c:	3d0e0000 	stccc	0, cr0, [lr, #-0]
    9e50:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    9e54:	00b8022f 	adcseq	r0, r8, pc, lsr #4
    9e58:	03020000 	movweq	r0, #8192	; 0x2000
    9e5c:	1a0e000d 	bne	389e98 <__ccfg+0x369ef0>
    9e60:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    9e64:	00b80232 	adcseq	r0, r8, r2, lsr r2
    9e68:	0d020000 	stceq	0, cr0, [r2, #-0]
    9e6c:	0d000000 	stceq	0, cr0, [r0, #-0]
    9e70:	02340804 	eorseq	r0, r4, #4, 16	; 0x40000
    9e74:	0000074d 	andeq	r0, r0, sp, asr #14
    9e78:	00188e0e 	andseq	r8, r8, lr, lsl #28
    9e7c:	02350800 	eorseq	r0, r5, #0, 16
    9e80:	000000ce 	andeq	r0, r0, lr, asr #1
    9e84:	001c0404 	andseq	r0, ip, r4, lsl #8
    9e88:	0019940e 	andseq	r9, r9, lr, lsl #8
    9e8c:	02370800 	eorseq	r0, r7, #0, 16
    9e90:	000000ce 	andeq	r0, r0, lr, asr #1
    9e94:	00031504 	andeq	r1, r3, r4, lsl #10
    9e98:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    9e9c:	0777023a 			; <UNDEFINED> instruction: 0x0777023a
    9ea0:	360e0000 	strcc	r0, [lr], -r0
    9ea4:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    9ea8:	00a2023b 	adceq	r0, r2, fp, lsr r2
    9eac:	06010000 	streq	r0, [r1], -r0
    9eb0:	f30e0002 	vhadd.u8	d0, d14, d2
    9eb4:	08000014 	stmdaeq	r0, {r2, r4}
    9eb8:	00a2023d 	adceq	r0, r2, sp, lsr r2
    9ebc:	02010000 	andeq	r0, r1, #0
    9ec0:	0d000000 	stceq	0, cr0, [r0, #-0]
    9ec4:	02420802 	subeq	r0, r2, #131072	; 0x20000
    9ec8:	000007d1 	ldrdeq	r0, [r0], -r1
    9ecc:	0016f70e 	andseq	pc, r6, lr, lsl #14
    9ed0:	02430800 	subeq	r0, r3, #0, 16
    9ed4:	000000b8 	strheq	r0, [r0], -r8
    9ed8:	000a0602 	andeq	r0, sl, r2, lsl #12
    9edc:	0017710e 	andseq	r7, r7, lr, lsl #2
    9ee0:	02440800 	subeq	r0, r4, #0, 16
    9ee4:	000000b8 	strheq	r0, [r0], -r8
    9ee8:	00090102 	andeq	r0, r9, r2, lsl #2
    9eec:	0018e30e 	andseq	lr, r8, lr, lsl #6
    9ef0:	02460800 	subeq	r0, r6, #0, 16
    9ef4:	000000b8 	strheq	r0, [r0], -r8
    9ef8:	00080102 	andeq	r0, r8, r2, lsl #2
    9efc:	0014d10e 	andseq	sp, r4, lr, lsl #2
    9f00:	02480800 	subeq	r0, r8, #0, 16
    9f04:	000000b8 	strheq	r0, [r0], -r8
    9f08:	00040402 	andeq	r0, r4, r2, lsl #8
    9f0c:	0014690e 	andseq	r6, r4, lr, lsl #18
    9f10:	024d0800 	subeq	r0, sp, #0, 16
    9f14:	000000b8 	strheq	r0, [r0], -r8
    9f18:	00000302 	andeq	r0, r0, r2, lsl #6
    9f1c:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    9f20:	081b0256 	ldmdaeq	fp, {r1, r2, r4, r6, r9}
    9f24:	c20e0000 	andgt	r0, lr, #0
    9f28:	08000016 	stmdaeq	r0, {r1, r2, r4}
    9f2c:	00b80257 	adcseq	r0, r8, r7, asr r2
    9f30:	03020000 	movweq	r0, #8192	; 0x2000
    9f34:	5f0e000d 	svcpl	0x000e000d
    9f38:	08000016 	stmdaeq	r0, {r1, r2, r4}
    9f3c:	00b8025d 	adcseq	r0, r8, sp, asr r2
    9f40:	01020000 	mrseq	r0, (UNDEF: 2)
    9f44:	0c0e000c 	stceq	0, cr0, [lr], {12}
    9f48:	08000016 	stmdaeq	r0, {r1, r2, r4}
    9f4c:	00b8025f 	adcseq	r0, r8, pc, asr r2
    9f50:	06020000 	streq	r0, [r2], -r0
    9f54:	b60e0006 	strlt	r0, [lr], -r6
    9f58:	08000018 	stmdaeq	r0, {r3, r4}
    9f5c:	00b80266 	adcseq	r0, r8, r6, ror #4
    9f60:	01020000 	mrseq	r0, (UNDEF: 2)
    9f64:	09000005 	stmdbeq	r0, {r0, r2}
    9f68:	54480210 	strbpl	r0, [r8], #-528	; 0xfffffdf0
    9f6c:	08000008 	stmdaeq	r0, {r3}
    9f70:	00001685 	andeq	r1, r0, r5, lsl #13
    9f74:	00ce4902 	sbceq	r4, lr, r2, lsl #18
    9f78:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9f7c:	0000172c 	andeq	r1, r0, ip, lsr #14
    9f80:	00ce4a02 	sbceq	r4, lr, r2, lsl #20
    9f84:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    9f88:	00001a0e 	andeq	r1, r0, lr, lsl #20
    9f8c:	00ce4b02 	sbceq	r4, lr, r2, lsl #22
    9f90:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    9f94:	00001b6d 	andeq	r1, r0, sp, ror #22
    9f98:	00ce4c02 	sbceq	r4, lr, r2, lsl #24
    9f9c:	000c0000 	andeq	r0, ip, r0
    9fa0:	00148f03 	andseq	r8, r4, r3, lsl #30
    9fa4:	1b4d0200 	blne	134a7ac <__ccfg+0x132a804>
    9fa8:	0f000008 	svceq	0x00000008
    9fac:	000029a4 	andeq	r2, r0, r4, lsr #19
    9fb0:	03013e02 	movweq	r3, #7682	; 0x1e02
    9fb4:	00280610 	eoreq	r0, r8, r0, lsl r6
    9fb8:	01140200 	tsteq	r4, r0, lsl #4
    9fbc:	000000ce 	andeq	r0, r0, lr, asr #1
    9fc0:	00000000 	andeq	r0, r0, r0
    9fc4:	00000014 	andeq	r0, r0, r4, lsl r0
    9fc8:	08909c01 	ldmeq	r0, {r0, sl, fp, ip, pc}
    9fcc:	be110000 	cdplt	0, 1, cr0, cr1, cr0, {0}
    9fd0:	01000028 	tsteq	r0, r8, lsr #32
    9fd4:	0000ce6a 	andeq	ip, r0, sl, ror #28
    9fd8:	00500100 	subseq	r0, r0, r0, lsl #2
    9fdc:	00298c10 	eoreq	r8, r9, r0, lsl ip
    9fe0:	014c0200 	mrseq	r0, (UNDEF: 108)
    9fe4:	000000ce 	andeq	r0, r0, lr, asr #1
    9fe8:	000031f0 	strdeq	r3, [r0], -r0
    9fec:	00000028 	andeq	r0, r0, r8, lsr #32
    9ff0:	08d89c01 	ldmeq	r8, {r0, sl, fp, ip, pc}^
    9ff4:	70120000 	andsvc	r0, r2, r0
    9ff8:	0100704f 	tsteq	r0, pc, asr #32
    9ffc:	0000ce7a 	andeq	ip, r0, sl, ror lr
    a000:	0037d100 	eorseq	sp, r7, r0, lsl #2
    a004:	085f1300 	ldmdaeq	pc, {r8, r9, ip}^	; <UNPREDICTABLE>
    a008:	31f80000 	mvnscc	r0, r0
    a00c:	00040000 	andeq	r0, r4, r0
    a010:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    a014:	00085f13 	andeq	r5, r8, r3, lsl pc
    a018:	00320400 	eorseq	r0, r2, r0, lsl #8
    a01c:	00000600 	andeq	r0, r0, r0, lsl #12
    a020:	00830100 	addeq	r0, r3, r0, lsl #2
    a024:	00288e14 	eoreq	r8, r8, r4, lsl lr
    a028:	01540200 	cmpeq	r4, r0, lsl #4
    a02c:	00003218 	andeq	r3, r0, r8, lsl r2
    a030:	0000004c 	andeq	r0, r0, ip, asr #32
    a034:	bb159c01 	bllt	571040 <__ccfg+0x551098>
    a038:	02000029 	andeq	r0, r0, #41	; 0x29
    a03c:	3264015c 	rsbcc	r0, r4, #92, 2
    a040:	01500000 	cmpeq	r0, r0
    a044:	9c010000 	stcls	0, cr0, [r1], {-0}
    a048:	0000092a 	andeq	r0, r0, sl, lsr #18
    a04c:	0028b516 	eoreq	fp, r8, r6, lsl r5
    a050:	6da40100 	stfvss	f0, [r4]
    a054:	01000002 	tsteq	r0, r2
    a058:	290b1650 	stmdbcs	fp, {r4, r6, r9, sl, ip}
    a05c:	a4010000 	strge	r0, [r1], #-0
    a060:	0000092a 	andeq	r0, r0, sl, lsr #18
    a064:	b3175101 	tstlt	r7, #1073741824	; 0x40000000
    a068:	01000029 	tsteq	r0, r9, lsr #32
    a06c:	000094a6 	andeq	r9, r0, r6, lsr #9
    a070:	0037f200 	eorseq	pc, r7, r0, lsl #4
    a074:	04060000 	streq	r0, [r6], #-0
    a078:	00000854 	andeq	r0, r0, r4, asr r8
    a07c:	00297d15 	eoreq	r7, r9, r5, lsl sp
    a080:	016c0200 	cmneq	ip, r0, lsl #4
    a084:	000033b4 			; <UNDEFINED> instruction: 0x000033b4
    a088:	00000118 	andeq	r0, r0, r8, lsl r1
    a08c:	09ac9c01 	stmibeq	ip!, {r0, sl, fp, ip, pc}
    a090:	b5180000 	ldrlt	r0, [r8, #-0]
    a094:	01000028 	tsteq	r0, r8, lsr #32
    a098:	00026df3 	strdeq	r6, [r2], -r3
    a09c:	00381000 	eorseq	r1, r8, r0
    a0a0:	29b31700 	ldmibcs	r3!, {r8, r9, sl, ip}
    a0a4:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    a0a8:	000000c3 	andeq	r0, r0, r3, asr #1
    a0ac:	00003831 	andeq	r3, r0, r1, lsr r8
    a0b0:	00297117 	eoreq	r7, r9, r7, lsl r1
    a0b4:	cef60100 	cdpgt	1, 15, cr0, cr6, cr0, {0}
    a0b8:	80000000 	andhi	r0, r0, r0
    a0bc:	17000038 	smladxne	r0, r8, r0, r0
    a0c0:	00002821 	andeq	r2, r0, r1, lsr #16
    a0c4:	0324f701 	msreq	CPSR_s, #262144	; 0x40000
    a0c8:	38ca0000 	stmiacc	sl, {}^	; <UNPREDICTABLE>
    a0cc:	32190000 	andscc	r0, r9, #0
    a0d0:	01000028 	tsteq	r0, r8, lsr #32
    a0d4:	0000c3f8 	strdeq	ip, [r0], -r8
    a0d8:	29131700 	ldmdbcs	r3, {r8, r9, sl, ip}
    a0dc:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    a0e0:	000000ce 	andeq	r0, r0, lr, asr #1
    a0e4:	0000390d 	andeq	r3, r0, sp, lsl #18
    a0e8:	0028a617 	eoreq	sl, r8, r7, lsl r6
    a0ec:	cefa0100 	cdpgt	1, 15, cr0, cr10, cr0, {0}
    a0f0:	65000000 	strvs	r0, [r0, #-0]
    a0f4:	00000039 	andeq	r0, r0, r9, lsr r0
    a0f8:	00287b15 	eoreq	r7, r8, r5, lsl fp
    a0fc:	01640200 	cmneq	r4, r0, lsl #4
    a100:	000034cc 	andeq	r3, r0, ip, asr #9
    a104:	00000020 	andeq	r0, r0, r0, lsr #32
    a108:	09d39c01 	ldmibeq	r3, {r0, sl, fp, ip, pc}^
    a10c:	0b1a0000 	bleq	68a114 <__ccfg+0x66a16c>
    a110:	01000029 	tsteq	r0, r9, lsr #32
    a114:	092a0177 	stmdbeq	sl!, {r0, r1, r2, r4, r5, r6, r8}
    a118:	399b0000 	ldmibcc	fp, {}	; <UNPREDICTABLE>
    a11c:	15000000 	strne	r0, [r0, #-0]
    a120:	000028d9 	ldrdeq	r2, [r0], -r9
    a124:	00017402 	andeq	r7, r1, r2, lsl #8
    a128:	60000000 	andvs	r0, r0, r0
    a12c:	01000000 	mrseq	r0, (UNDEF: 0)
    a130:	000a379c 	muleq	sl, ip, r7
    a134:	1b7b1b00 	blne	1ed0d3c <__ccfg+0x1eb0d94>
    a138:	84010000 	strhi	r0, [r1], #-0
    a13c:	0000ff01 	andeq	pc, r0, r1, lsl #30
    a140:	00033800 	andeq	r3, r3, r0, lsl #16
    a144:	162d1b21 	strtne	r1, [sp], -r1, lsr #22
    a148:	85010000 	strhi	r0, [r1, #-0]
    a14c:	00032401 	andeq	r2, r3, r1, lsl #8
    a150:	0003bc00 	andeq	fp, r3, r0, lsl #24
    a154:	00691c21 	rsbeq	r1, r9, r1, lsr #24
    a158:	94018901 	strls	r8, [r1], #-2305	; 0xfffff6ff
    a15c:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    a160:	1d000039 	stcne	0, cr0, [r0, #-228]	; 0xffffff1c
    a164:	00000000 	andeq	r0, r0, r0
    a168:	00000a9c 	muleq	r0, ip, sl
    a16c:	0252011e 	subseq	r0, r2, #-2147483641	; 0x80000007
    a170:	011e8408 	tsteq	lr, r8, lsl #8
    a174:	ff080251 			; <UNDEFINED> instruction: 0xff080251
    a178:	0550011e 	ldrbeq	r0, [r0, #-286]	; 0xfffffee2
    a17c:	0003380c 	andeq	r3, r3, ip, lsl #16
    a180:	15000021 	strne	r0, [r0, #-33]	; 0xffffffdf
    a184:	00002841 	andeq	r2, r0, r1, asr #16
    a188:	ec017c02 	stc	12, cr7, [r1], {2}
    a18c:	1c000034 	stcne	0, cr0, [r0], {52}	; 0x34
    a190:	01000000 	mrseq	r0, (UNDEF: 0)
    a194:	000a5c9c 	muleq	sl, ip, ip
    a198:	29691f00 	stmdbcs	r9!, {r8, r9, sl, fp, ip}^
    a19c:	96010000 	strls	r0, [r1], -r0
    a1a0:	000a5c01 	andeq	r5, sl, r1, lsl #24
    a1a4:	00500100 	subseq	r0, r0, r0, lsl #2
    a1a8:	c2020102 	andgt	r0, r2, #-2147483648	; 0x80000000
    a1ac:	2000000b 	andcs	r0, r0, fp
    a1b0:	000000b8 	strheq	r0, [r0], -r8
    a1b4:	00000a73 	andeq	r0, r0, r3, ror sl
    a1b8:	0000e421 	andeq	lr, r0, r1, lsr #8
    a1bc:	22000b00 	andcs	r0, r0, #0, 22
    a1c0:	000028c6 	andeq	r2, r0, r6, asr #17
    a1c4:	0a975201 	beq	fe5de9d0 <_estack+0xde5d99d0>
    a1c8:	c3180000 	tstgt	r8, #0
    a1cc:	5d3a3d3b 	ldcpl	13, cr3, [sl, #-236]!	; 0xffffff14
    a1d0:	a13a713a 	teqge	sl, sl, lsr r1
    a1d4:	0f3a8f0a 	svceq	0x003a8f0a
    a1d8:	4909b33b 	stmdbmi	r9, {r0, r1, r3, r4, r5, r8, r9, ip, sp, pc}
    a1dc:	2f0a855e 	svccs	0x000a855e
    a1e0:	233b853b 	teqcs	fp, #247463936	; 0xec00000
    a1e4:	00000a63 	andeq	r0, r0, r3, ror #20
    a1e8:	000c3c24 	andeq	r3, ip, r4, lsr #24
    a1ec:	eb190900 	bl	64c5f4 <__ccfg+0x62c64c>
    a1f0:	25000000 	strcs	r0, [r0, #-0]
    a1f4:	000000eb 	andeq	r0, r0, fp, ror #1
    a1f8:	00009425 	andeq	r9, r0, r5, lsr #8
    a1fc:	00d92500 	sbcseq	r2, r9, r0, lsl #10
    a200:	00000000 	andeq	r0, r0, r0
    a204:	00000207 	andeq	r0, r0, r7, lsl #4
    a208:	2a890004 	bcs	fe24a220 <_estack+0xde245220>
    a20c:	01040000 	mrseq	r0, (UNDEF: 4)
    a210:	00001f56 	andeq	r1, r0, r6, asr pc
    a214:	002a8b01 	eoreq	r8, sl, r1, lsl #22
    a218:	00201d00 	eoreq	r1, r0, r0, lsl #26
    a21c:	000f9800 	andeq	r9, pc, r0, lsl #16
    a220:	00000000 	andeq	r0, r0, r0
    a224:	006cc400 	rsbeq	ip, ip, r0, lsl #8
    a228:	06010200 	streq	r0, [r1], -r0, lsl #4
    a22c:	0000029d 	muleq	r0, sp, r2
    a230:	9b080102 	blls	20a640 <__ccfg+0x1ea698>
    a234:	02000002 	andeq	r0, r0, #2
    a238:	02b90502 	adcseq	r0, r9, #8388608	; 0x800000
    a23c:	02020000 	andeq	r0, r2, #0
    a240:	0001ca07 	andeq	ip, r1, r7, lsl #20
    a244:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    a248:	0000005c 	andeq	r0, r0, ip, asr r0
    a24c:	001ec903 	andseq	ip, lr, r3, lsl #18
    a250:	53410300 	movtpl	r0, #4864	; 0x1300
    a254:	02000000 	andeq	r0, r0, #0
    a258:	00450704 	subeq	r0, r5, r4, lsl #14
    a25c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    a260:	00005705 	andeq	r5, r0, r5, lsl #14
    a264:	07080200 	streq	r0, [r8, -r0, lsl #4]
    a268:	00000040 	andeq	r0, r0, r0, asr #32
    a26c:	69050404 	stmdbvs	r5, {r2, sl}
    a270:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    a274:	004a0704 	subeq	r0, sl, r4, lsl #14
    a278:	cb030000 	blgt	ca280 <__ccfg+0xaa2d8>
    a27c:	0400001e 	streq	r0, [r0], #-30	; 0xffffffe2
    a280:	00004820 	andeq	r4, r0, r0, lsr #16
    a284:	2ae80500 	bcs	ffa0b68c <_estack+0xdfa0668c>
    a288:	30020000 	andcc	r0, r2, r0
    a28c:	53060303 	movwpl	r0, #25347	; 0x6303
    a290:	0100002b 	tsteq	r0, fp, lsr #32
    a294:	fb0501fd 	blx	14aa92 <__ccfg+0x12aaea>
    a298:	0100002a 	tsteq	r0, sl, lsr #32
    a29c:	07010182 	streq	r0, [r1, -r2, lsl #3]
    a2a0:	000029d6 	ldrdeq	r2, [r0], -r6
    a2a4:	08010d01 	stmdaeq	r1, {r0, r8, sl, fp}
    a2a8:	d4000035 	strle	r0, [r0], #-53	; 0xffffffcb
    a2ac:	01000000 	mrseq	r0, (UNDEF: 0)
    a2b0:	00016d9c 	muleq	r1, ip, sp
    a2b4:	2ad60800 	bcs	ff58c2bc <_estack+0xdf5872bc>
    a2b8:	0d010000 	stceq	0, cr0, [r1, #-0]
    a2bc:	00007601 	andeq	r7, r0, r1, lsl #12
    a2c0:	003a6d00 	eorseq	r6, sl, r0, lsl #26
    a2c4:	2b420900 	blcs	108c6cc <__ccfg+0x106c724>
    a2c8:	0f010000 	svceq	0x00010000
    a2cc:	00007601 	andeq	r7, r0, r1, lsl #12
    a2d0:	003a9900 	eorseq	r9, sl, r0, lsl #18
    a2d4:	29cf0900 	stmibcs	pc, {r8, fp}^	; <UNPREDICTABLE>
    a2d8:	10010000 	andne	r0, r1, r0
    a2dc:	00007601 	andeq	r7, r0, r1, lsl #12
    a2e0:	003aac00 	eorseq	sl, sl, r0, lsl #24
    a2e4:	00810a00 	addeq	r0, r1, r0, lsl #20
    a2e8:	353a0000 	ldrcc	r0, [sl, #-0]!
    a2ec:	00060000 	andeq	r0, r6, r0
    a2f0:	36010000 	strcc	r0, [r1], -r0
    a2f4:	35600b01 	strbcc	r0, [r0, #-2817]!	; 0xfffff4ff
    a2f8:	002a0000 	eoreq	r0, sl, r0
    a2fc:	011f0000 	tsteq	pc, r0
    a300:	c8090000 	stmdagt	r9, {}	; <UNPREDICTABLE>
    a304:	0100002b 	tsteq	r0, fp, lsr #32
    a308:	00760153 	rsbseq	r0, r6, r3, asr r1
    a30c:	3ac50000 	bcc	ff14a314 <_estack+0xdf145314>
    a310:	24090000 	strcs	r0, [r9], #-0
    a314:	0100002b 	tsteq	r0, fp, lsr #32
    a318:	00760154 	rsbseq	r0, r6, r4, asr r1
    a31c:	3ad80000 	bcc	ff60a324 <_estack+0xdf605324>
    a320:	0c000000 	stceq	0, cr0, [r0], {-0}
    a324:	0000354a 	andeq	r3, r0, sl, asr #10
    a328:	000001c3 	andeq	r0, r0, r3, asr #3
    a32c:	00000133 	andeq	r0, r0, r3, lsr r1
    a330:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    a334:	0c000074 	stceq	0, cr0, [r0], {116}	; 0x74
    a338:	00003552 	andeq	r3, r0, r2, asr r5
    a33c:	000001d4 	ldrdeq	r0, [r0], -r4
    a340:	0000014d 	andeq	r0, r0, sp, asr #2
    a344:	0251010d 	subseq	r0, r1, #1073741827	; 0x40000003
    a348:	010d0074 	tsteq	sp, r4, ror r0
    a34c:	00750250 	rsbseq	r0, r5, r0, asr r2
    a350:	35900c00 	ldrcc	r0, [r0, #3072]	; 0xc00
    a354:	01ea0000 	mvneq	r0, r0
    a358:	01610000 	cmneq	r1, r0
    a35c:	010d0000 	mrseq	r0, (UNDEF: 13)
    a360:	00740250 	rsbseq	r0, r4, r0, asr r2
    a364:	359a0e00 	ldrcc	r0, [sl, #3584]	; 0xe00
    a368:	010d0000 	mrseq	r0, (UNDEF: 13)
    a36c:	00320150 	eorseq	r0, r2, r0, asr r1
    a370:	2b0e0f00 	blcs	38df78 <__ccfg+0x36dfd0>
    a374:	5f070000 	svcpl	0x00070000
    a378:	000035dc 	ldrdeq	r3, [r0], -ip
    a37c:	000000a4 	andeq	r0, r0, r4, lsr #1
    a380:	01c39c01 	biceq	r9, r3, r1, lsl #24
    a384:	d6100000 	ldrle	r0, [r0], -r0
    a388:	0100002a 	tsteq	r0, sl, lsr #32
    a38c:	00007672 	andeq	r7, r0, r2, ror r6
    a390:	003b0300 	eorseq	r0, fp, r0, lsl #6
    a394:	2b2f1000 	blcs	bce39c <__ccfg+0xbae3f4>
    a398:	73010000 	movwvc	r0, #4096	; 0x1000
    a39c:	00000076 	andeq	r0, r0, r6, ror r0
    a3a0:	00003b16 	andeq	r3, r0, r6, lsl fp
    a3a4:	0035ec11 	eorseq	lr, r5, r1, lsl ip
    a3a8:	0001fb00 	andeq	pc, r1, r0, lsl #22
    a3ac:	36001100 	strcc	r1, [r0], -r0, lsl #2
    a3b0:	02030000 	andeq	r0, r3, #0
    a3b4:	10120000 	andsne	r0, r2, r0
    a3b8:	9b000036 	blls	a498 <__exidx_end+0x556b>
    a3bc:	0d000000 	stceq	0, cr0, [r0, #-0]
    a3c0:	74025001 	strvc	r5, [r2], #-1
    a3c4:	13000000 	movwne	r0, #0
    a3c8:	000029fb 	strdeq	r2, [r0], -fp
    a3cc:	01d46c05 	bicseq	r6, r4, r5, lsl #24
    a3d0:	76140000 	ldrvc	r0, [r4], -r0
    a3d4:	00000000 	andeq	r0, r0, r0
    a3d8:	002a2b13 	eoreq	r2, sl, r3, lsl fp
    a3dc:	ea730500 	b	1ccb7e4 <__ccfg+0x1cab83c>
    a3e0:	14000001 	strne	r0, [r0], #-1
    a3e4:	00000076 	andeq	r0, r0, r6, ror r0
    a3e8:	00007614 	andeq	r7, r0, r4, lsl r6
    a3ec:	5b130000 	blpl	4ca3f4 <__ccfg+0x4aa44c>
    a3f0:	0500002a 	streq	r0, [r0, #-42]	; 0xffffffd6
    a3f4:	0001fb7a 	andeq	pc, r1, sl, ror fp	; <UNPREDICTABLE>
    a3f8:	00761400 	rsbseq	r1, r6, r0, lsl #8
    a3fc:	15000000 	strne	r0, [r0, #-0]
    a400:	00002b8b 	andeq	r2, r0, fp, lsl #23
    a404:	16024306 	strne	r4, [r2], -r6, lsl #6
    a408:	00002aa8 	andeq	r2, r0, r8, lsr #21
    a40c:	1700fd05 	strne	pc, [r0, -r5, lsl #26]
    a410:	0400000b 	streq	r0, [r0], #-11
    a414:	002bcb00 	eoreq	ip, fp, r0, lsl #22
    a418:	56010400 	strpl	r0, [r1], -r0, lsl #8
    a41c:	0100001f 	tsteq	r0, pc, lsl r0
    a420:	00002e0b 	andeq	r2, r0, fp, lsl #28
    a424:	0000201d 	andeq	r2, r0, sp, lsl r0
    a428:	00000fe0 	andeq	r0, r0, r0, ror #31
    a42c:	00000000 	andeq	r0, r0, r0
    a430:	00006eb1 			; <UNDEFINED> instruction: 0x00006eb1
    a434:	9d060102 	stflss	f0, [r6, #-8]
    a438:	02000002 	andeq	r0, r0, #2
    a43c:	029b0801 	addseq	r0, fp, #65536	; 0x10000
    a440:	02020000 	andeq	r0, r2, #0
    a444:	0002b905 	andeq	fp, r2, r5, lsl #18
    a448:	07020200 	streq	r0, [r2, -r0, lsl #4]
    a44c:	000001ca 	andeq	r0, r0, sl, asr #3
    a450:	0020b603 	eoreq	fp, r0, r3, lsl #12
    a454:	4c3f0400 	cfldrsmi	mvf0, [pc], #-0	; a45c <__exidx_end+0x552f>
    a458:	02000000 	andeq	r0, r0, #0
    a45c:	005c0504 	subseq	r0, ip, r4, lsl #10
    a460:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
    a464:	0400001e 	streq	r0, [r0], #-30	; 0xffffffe2
    a468:	00005e41 	andeq	r5, r0, r1, asr #28
    a46c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a470:	00000045 	andeq	r0, r0, r5, asr #32
    a474:	57050802 	strpl	r0, [r5, -r2, lsl #16]
    a478:	02000000 	andeq	r0, r0, #0
    a47c:	00400708 	subeq	r0, r0, r8, lsl #14
    a480:	04040000 	streq	r0, [r4], #-0
    a484:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    a488:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a48c:	0000004a 	andeq	r0, r0, sl, asr #32
    a490:	0020b803 	eoreq	fp, r0, r3, lsl #16
    a494:	411f0500 	tstmi	pc, r0, lsl #10
    a498:	03000000 	movweq	r0, #0
    a49c:	00001ecb 	andeq	r1, r0, fp, asr #29
    a4a0:	00532005 	subseq	r2, r3, r5
    a4a4:	9e050000 	cdpls	0, 0, cr0, cr5, cr0, {0}
    a4a8:	0200002e 	andeq	r0, r0, #46	; 0x2e
    a4ac:	000081e9 	andeq	r8, r0, r9, ror #3
    a4b0:	00be0300 	adcseq	r0, lr, r0, lsl #6
    a4b4:	ee060000 	cdp	0, 0, cr0, cr6, cr0, {0}
    a4b8:	0200002b 	andeq	r0, r0, #43	; 0x2b
    a4bc:	00008ce9 	andeq	r8, r0, r9, ror #25
    a4c0:	2ef70700 	cdpcs	7, 15, cr0, cr7, cr0, {0}
    a4c4:	ef020000 	svc	0x00020000
    a4c8:	00000081 	andeq	r0, r0, r1, lsl #1
    a4cc:	2c230800 	stccs	8, cr0, [r3], #-0
    a4d0:	ab020000 	blge	8a4d8 <__ccfg+0x6a530>
    a4d4:	0000008c 	andeq	r0, r0, ip, lsl #1
    a4d8:	0000e701 	andeq	lr, r0, r1, lsl #14
    a4dc:	2ad60900 	bcs	ff58c8e4 <_estack+0xdf5878e4>
    a4e0:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    a4e4:	00008c03 	andeq	r8, r0, r3, lsl #24
    a4e8:	2f800a00 	svccs	0x00800a00
    a4ec:	2b010000 	blcs	4a4f4 <__ccfg+0x2a54c>
    a4f0:	00008c03 	andeq	r8, r0, r3, lsl #24
    a4f4:	d6080000 	strle	r0, [r8], -r0
    a4f8:	0200002e 	andeq	r0, r0, #46	; 0x2e
    a4fc:	00008c81 	andeq	r8, r0, r1, lsl #25
    a500:	01100100 	tsteq	r0, r0, lsl #2
    a504:	d6090000 	strle	r0, [r9], -r0
    a508:	0100002a 	tsteq	r0, sl, lsr #32
    a50c:	008c033c 	addeq	r0, ip, ip, lsr r3
    a510:	470a0000 	strmi	r0, [sl, -r0]
    a514:	0100002f 	tsteq	r0, pc, lsr #32
    a518:	008c033e 	addeq	r0, ip, lr, lsr r3
    a51c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a520:	00002d84 	andeq	r2, r0, r4, lsl #27
    a524:	008c8802 	addeq	r8, ip, r2, lsl #16
    a528:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    a52c:	09000001 	stmdbeq	r0, {r0}
    a530:	00002ad6 	ldrdeq	r2, [r0], -r6
    a534:	8c034f01 	stchi	15, cr4, [r3], {1}
    a538:	0a000000 	beq	a540 <__exidx_end+0x5613>
    a53c:	00002ebb 			; <UNDEFINED> instruction: 0x00002ebb
    a540:	8c035101 	stfhis	f5, [r3], {1}
    a544:	00000000 	andeq	r0, r0, r0
    a548:	002ce808 	eoreq	lr, ip, r8, lsl #16
    a54c:	8cc80200 	sfmhi	f0, 2, [r8], {0}
    a550:	01000000 	mrseq	r0, (UNDEF: 0)
    a554:	0000016e 	andeq	r0, r0, lr, ror #2
    a558:	002ad609 	eoreq	sp, sl, r9, lsl #12
    a55c:	03620100 	cmneq	r2, #0, 2
    a560:	0000008c 	andeq	r0, r0, ip, lsl #1
    a564:	002c780a 	eoreq	r7, ip, sl, lsl #16
    a568:	03640100 	cmneq	r4, #0, 2
    a56c:	0000008c 	andeq	r0, r0, ip, lsl #1
    a570:	002db90a 	eoreq	fp, sp, sl, lsl #18
    a574:	03650100 	cmneq	r5, #0, 2
    a578:	0000008c 	andeq	r0, r0, ip, lsl #1
    a57c:	2deb0800 	stclcs	8, cr0, [fp]
    a580:	b2020000 	andlt	r0, r2, #0
    a584:	0000008c 	andeq	r0, r0, ip, lsl #1
    a588:	0001a301 	andeq	sl, r1, r1, lsl #6
    a58c:	2ad60900 	bcs	ff58c994 <_estack+0xdf587994>
    a590:	94010000 	strls	r0, [r1], #-0
    a594:	00008c03 	andeq	r8, r0, r3, lsl #24
    a598:	2d070a00 	vstrcs	s0, [r7, #-0]
    a59c:	96010000 	strls	r0, [r1], -r0
    a5a0:	00008c03 	andeq	r8, r0, r3, lsl #24
    a5a4:	2db90a00 			; <UNDEFINED> instruction: 0x2db90a00
    a5a8:	97010000 	strls	r0, [r1, -r0]
    a5ac:	00008c03 	andeq	r8, r0, r3, lsl #24
    a5b0:	b6080000 	strlt	r0, [r8], -r0
    a5b4:	0200002c 	andeq	r0, r0, #44	; 0x2c
    a5b8:	00008cb9 			; <UNDEFINED> instruction: 0x00008cb9
    a5bc:	01cc0100 	biceq	r0, ip, r0, lsl #2
    a5c0:	d6090000 	strle	r0, [r9], -r0
    a5c4:	0100002a 	tsteq	r0, sl, lsr #32
    a5c8:	008c03b4 			; <UNDEFINED> instruction: 0x008c03b4
    a5cc:	c30a0000 	movwgt	r0, #40960	; 0xa000
    a5d0:	0100002d 	tsteq	r0, sp, lsr #32
    a5d4:	008c03b6 			; <UNDEFINED> instruction: 0x008c03b6
    a5d8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a5dc:	00002e61 	andeq	r2, r0, r1, ror #28
    a5e0:	008cdf02 	addeq	sp, ip, r2, lsl #30
    a5e4:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    a5e8:	09000001 	stmdbeq	r0, {r0}
    a5ec:	00002ad6 	ldrdeq	r2, [r0], -r6
    a5f0:	8c03c801 	stchi	8, cr12, [r3], {1}
    a5f4:	0a000000 	beq	a5fc <__exidx_end+0x56cf>
    a5f8:	00002fa0 	andeq	r2, r0, r0, lsr #31
    a5fc:	8c03ca01 			; <UNDEFINED> instruction: 0x8c03ca01
    a600:	00000000 	andeq	r0, r0, r0
    a604:	002f2108 	eoreq	r2, pc, r8, lsl #2
    a608:	8cd70200 	lfmhi	f0, 2, [r7], {0}
    a60c:	01000000 	mrseq	r0, (UNDEF: 0)
    a610:	00000212 	andeq	r0, r0, r2, lsl r2
    a614:	0030530a 	eorseq	r5, r0, sl, lsl #6
    a618:	02830100 	addeq	r0, r3, #0, 2
    a61c:	0000008c 	andeq	r0, r0, ip, lsl #1
    a620:	07c80b00 	strbeq	r0, [r8, r0, lsl #22]
    a624:	c4030000 	strgt	r0, [r3], #-0
    a628:	30300c03 	eorscc	r0, r0, r3, lsl #24
    a62c:	0f020000 	svceq	0x00020000
    a630:	00368001 	eorseq	r8, r6, r1
    a634:	00007c00 	andeq	r7, r0, r0, lsl #24
    a638:	c49c0100 	ldrgt	r0, [ip], #256	; 0x100
    a63c:	0d000002 	stceq	0, cr0, [r0, #-8]
    a640:	00002b42 	andeq	r2, r0, r2, asr #22
    a644:	008c7f01 	addeq	r7, ip, r1, lsl #30
    a648:	3b290000 	blcc	a4a650 <__ccfg+0xa2a6a8>
    a64c:	48070000 	stmdami	r7, {}	; <UNPREDICTABLE>
    a650:	01000030 	tsteq	r0, r0, lsr r0
    a654:	00008c81 	andeq	r8, r0, r1, lsl #25
    a658:	2de00e00 	stclcs	14, cr0, [r0]
    a65c:	82010000 	andhi	r0, r1, #0
    a660:	00000081 	andeq	r0, r0, r1, lsl #1
    a664:	530f5201 	movwpl	r5, #61953	; 0xf201
    a668:	0100002c 	tsteq	r0, ip, lsr #32
    a66c:	00008183 	andeq	r8, r0, r3, lsl #3
    a670:	003b4a00 	eorseq	r4, fp, r0, lsl #20
    a674:	2d210f00 	stccs	15, cr0, [r1, #-0]
    a678:	84010000 	strhi	r0, [r1], #-0
    a67c:	00000081 	andeq	r0, r0, r1, lsl #1
    a680:	00003b5d 	andeq	r3, r0, sp, asr fp
    a684:	00009710 	andeq	r9, r0, r0, lsl r7
    a688:	00368e00 	eorseq	r8, r6, r0, lsl #28
    a68c:	000fb000 	andeq	fp, pc, r0
    a690:	9b970100 	blls	fe5caa98 <_estack+0xde5c5a98>
    a694:	11000002 	tstne	r0, r2
    a698:	000000a7 	andeq	r0, r0, r7, lsr #1
    a69c:	000fb012 	andeq	fp, pc, r2, lsl r0	; <UNPREDICTABLE>
    a6a0:	00b21300 	adcseq	r1, r2, r0, lsl #6
    a6a4:	52010000 	andpl	r0, r1, #0
    a6a8:	97140000 	ldrls	r0, [r4, -r0]
    a6ac:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    a6b0:	06000036 			; <UNDEFINED> instruction: 0x06000036
    a6b4:	01000000 	mrseq	r0, (UNDEF: 0)
    a6b8:	00a71198 	umlaleq	r1, r7, r8, r1
    a6bc:	98150000 	ldmdals	r5, {}	; <UNPREDICTABLE>
    a6c0:	06000036 			; <UNDEFINED> instruction: 0x06000036
    a6c4:	16000000 	strne	r0, [r0], -r0
    a6c8:	000000b2 	strheq	r0, [r0], -r2
    a6cc:	00003b8b 	andeq	r3, r0, fp, lsl #23
    a6d0:	17000000 	strne	r0, [r0, -r0]
    a6d4:	000029fb 	strdeq	r2, [r0], -fp
    a6d8:	36fc6c02 	ldrbtcc	r6, [ip], r2, lsl #24
    a6dc:	00ac0000 	adceq	r0, ip, r0
    a6e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    a6e4:	00000343 	andeq	r0, r0, r3, asr #6
    a6e8:	002b420d 	eoreq	r4, fp, sp, lsl #4
    a6ec:	8cbf0100 	ldfhis	f0, [pc]	; a6f4 <__exidx_end+0x57c7>
    a6f0:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    a6f4:	0f00003b 	svceq	0x0000003b
    a6f8:	00002f62 	andeq	r2, r0, r2, ror #30
    a6fc:	0081c101 	addeq	ip, r1, r1, lsl #2
    a700:	3bd20000 	blcc	ff48a708 <_estack+0xdf485708>
    a704:	780f0000 	stmdavc	pc, {}	; <UNPREDICTABLE>
    a708:	01000030 	tsteq	r0, r0, lsr r0
    a70c:	000081c2 	andeq	r8, r0, r2, asr #3
    a710:	003bfb00 	eorseq	pc, fp, r0, lsl #22
    a714:	00971800 	addseq	r1, r7, r0, lsl #16
    a718:	37320000 	ldrcc	r0, [r2, -r0]!
    a71c:	00060000 	andeq	r0, r6, r0
    a720:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    a724:	00000332 	andeq	r0, r0, r2, lsr r3
    a728:	0000a711 	andeq	sl, r0, r1, lsl r7
    a72c:	37321500 	ldrcc	r1, [r2, -r0, lsl #10]!
    a730:	00060000 	andeq	r0, r6, r0
    a734:	b2160000 	andslt	r0, r6, #0
    a738:	22000000 	andcs	r0, r0, #0
    a73c:	0000003c 	andeq	r0, r0, ip, lsr r0
    a740:	37201900 	strcc	r1, [r0, -r0, lsl #18]!
    a744:	021a0000 	andseq	r0, sl, #0
    a748:	011a0000 	tsteq	sl, r0
    a74c:	00740250 	rsbseq	r0, r4, r0, asr r2
    a750:	fe1b0000 	cdp2	0, 1, cr0, cr11, cr0, {0}
    a754:	0200002b 	andeq	r0, r0, #43	; 0x2b
    a758:	00008ca4 	andeq	r8, r0, r4, lsr #25
    a75c:	0037a800 	eorseq	sl, r7, r0, lsl #16
    a760:	00005c00 	andeq	r5, r0, r0, lsl #24
    a764:	bd9c0100 	ldflts	f0, [ip]
    a768:	1c000003 	stcne	0, cr0, [r0], {3}
    a76c:	00002b42 	andeq	r2, r0, r2, asr #22
    a770:	8c021f01 	stchi	15, cr1, [r2], {1}
    a774:	35000000 	strcc	r0, [r0, #-0]
    a778:	1d00003c 	stcne	0, cr0, [r0, #-240]	; 0xffffff10
    a77c:	00002f12 	andeq	r2, r0, r2, lsl pc
    a780:	8c022101 	stfhis	f2, [r2], {1}
    a784:	56000000 	strpl	r0, [r0], -r0
    a788:	1d00003c 	stcne	0, cr0, [r0, #-240]	; 0xffffff10
    a78c:	00003014 	andeq	r3, r0, r4, lsl r0
    a790:	8c022201 	sfmhi	f2, 4, [r2], {1}
    a794:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
    a798:	1d00003c 	stcne	0, cr0, [r0, #-240]	; 0xffffff10
    a79c:	00003022 	andeq	r3, r0, r2, lsr #32
    a7a0:	8c022301 	stchi	3, cr2, [r2], {1}
    a7a4:	b7000000 	strlt	r0, [r0, -r0]
    a7a8:	1d00003c 	stcne	0, cr0, [r0, #-240]	; 0xffffff10
    a7ac:	00003061 	andeq	r3, r0, r1, rrx
    a7b0:	81022401 	tsthi	r2, r1, lsl #8
    a7b4:	1f000000 	svcne	0x00000000
    a7b8:	1d00003d 	stcne	0, cr0, [r0, #-244]	; 0xffffff0c
    a7bc:	00003053 	andeq	r3, r0, r3, asr r0
    a7c0:	8c022501 	cfstr32hi	mvfx2, [r2], {1}
    a7c4:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    a7c8:	0000003d 	andeq	r0, r0, sp, lsr r0
    a7cc:	002e361b 	eoreq	r3, lr, fp, lsl r6
    a7d0:	8cc10200 	sfmhi	f0, 2, [r1], {0}
    a7d4:	04000000 	streq	r0, [r0], #-0
    a7d8:	18000038 	stmdane	r0, {r3, r4, r5}
    a7dc:	01000000 	mrseq	r0, (UNDEF: 0)
    a7e0:	0003e79c 	muleq	r3, ip, r7
    a7e4:	30531d00 	subscc	r1, r3, r0, lsl #26
    a7e8:	67010000 	strvs	r0, [r1, -r0]
    a7ec:	00008c02 	andeq	r8, r0, r2, lsl #24
    a7f0:	003d6300 	eorseq	r6, sp, r0, lsl #6
    a7f4:	f51e0000 			; <UNDEFINED> instruction: 0xf51e0000
    a7f8:	00000001 	andeq	r0, r0, r1
    a7fc:	10000000 	andne	r0, r0, r0
    a800:	01000000 	mrseq	r0, (UNDEF: 0)
    a804:	0004049c 	muleq	r4, ip, r4
    a808:	02051600 	andeq	r1, r5, #0, 12
    a80c:	3d8a0000 	stccc	0, cr0, [sl]
    a810:	1b000000 	blne	a818 <__exidx_end+0x58eb>
    a814:	00002d64 	andeq	r2, r0, r4, ror #26
    a818:	008c9d02 	addeq	r9, ip, r2, lsl #26
    a81c:	381c0000 	ldmdacc	ip, {}	; <UNPREDICTABLE>
    a820:	00100000 	andseq	r0, r0, r0
    a824:	9c010000 	stcls	0, cr0, [r1], {-0}
    a828:	0000043e 	andeq	r0, r0, lr, lsr r4
    a82c:	0030531d 	eorseq	r5, r0, sp, lsl r3
    a830:	02970100 	addseq	r0, r7, #0, 2
    a834:	0000008c 	andeq	r0, r0, ip, lsl #1
    a838:	00003da3 	andeq	r3, r0, r3, lsr #27
    a83c:	002f121d 	eoreq	r1, pc, sp, lsl r2	; <UNPREDICTABLE>
    a840:	02980100 	addseq	r0, r8, #0, 2
    a844:	0000008c 	andeq	r0, r0, ip, lsl #1
    a848:	00003dc4 	andeq	r3, r0, r4, asr #27
    a84c:	2d441b00 	vstrcs	d17, [r4, #-0]
    a850:	96020000 	strls	r0, [r2], -r0
    a854:	0000008c 	andeq	r0, r0, ip, lsl #1
    a858:	0000382c 	andeq	r3, r0, ip, lsr #16
    a85c:	00000014 	andeq	r0, r0, r4, lsl r0
    a860:	04789c01 	ldrbteq	r9, [r8], #-3073	; 0xfffff3ff
    a864:	531d0000 	tstpl	sp, #0
    a868:	01000030 	tsteq	r0, r0, lsr r0
    a86c:	008c02ba 			; <UNDEFINED> instruction: 0x008c02ba
    a870:	3dd70000 	ldclcc	0, cr0, [r7]
    a874:	121d0000 	andsne	r0, sp, #0
    a878:	0100002f 	tsteq	r0, pc, lsr #32
    a87c:	008c02bb 			; <UNDEFINED> instruction: 0x008c02bb
    a880:	3df80000 	ldclcc	0, cr0, [r8]
    a884:	1b000000 	blne	a88c <__exidx_end+0x595f>
    a888:	00002ff3 	strdeq	r2, [r0], -r3
    a88c:	008c8f02 	addeq	r8, ip, r2, lsl #30
    a890:	38400000 	stmdacc	r0, {}^	; <UNPREDICTABLE>
    a894:	00640000 	rsbeq	r0, r4, r0
    a898:	9c010000 	stcls	0, cr0, [r1], {-0}
    a89c:	000004fe 	strdeq	r0, [r0], -lr
    a8a0:	002ad61c 	eoreq	sp, sl, ip, lsl r6
    a8a4:	02db0100 	sbcseq	r0, fp, #0, 2
    a8a8:	0000008c 	andeq	r0, r0, ip, lsl #1
    a8ac:	00003e0b 	andeq	r3, r0, fp, lsl #28
    a8b0:	0030531d 	eorseq	r5, r0, sp, lsl r3
    a8b4:	02dd0100 	sbcseq	r0, sp, #0, 2
    a8b8:	0000008c 	andeq	r0, r0, ip, lsl #1
    a8bc:	00003e2c 	andeq	r3, r0, ip, lsr #28
    a8c0:	002f121d 	eoreq	r1, pc, sp, lsl r2	; <UNPREDICTABLE>
    a8c4:	02de0100 	sbcseq	r0, lr, #0, 2
    a8c8:	0000008c 	andeq	r0, r0, ip, lsl #1
    a8cc:	00003e60 	andeq	r3, r0, r0, ror #28
    a8d0:	002c6c1d 	eoreq	r6, ip, sp, lsl ip
    a8d4:	02df0100 	sbcseq	r0, pc, #0, 2
    a8d8:	0000008c 	andeq	r0, r0, ip, lsl #1
    a8dc:	00003e73 	andeq	r3, r0, r3, ror lr
    a8e0:	002fcb1d 	eoreq	ip, pc, sp, lsl fp	; <UNPREDICTABLE>
    a8e4:	02e00100 	rsceq	r0, r0, #0, 2
    a8e8:	0000008c 	andeq	r0, r0, ip, lsl #1
    a8ec:	00003ea1 	andeq	r3, r0, r1, lsr #29
    a8f0:	002f080a 	eoreq	r0, pc, sl, lsl #16
    a8f4:	02e10100 	rsceq	r0, r1, #0, 2
    a8f8:	0000008c 	andeq	r0, r0, ip, lsl #1
    a8fc:	002cdc1d 	eoreq	sp, ip, sp, lsl ip
    a900:	02e20100 	rsceq	r0, r2, #0, 2
    a904:	00000081 	andeq	r0, r0, r1, lsl #1
    a908:	00003ecf 	andeq	r3, r0, pc, asr #29
    a90c:	00be1e00 	adcseq	r1, lr, r0, lsl #28
    a910:	38a40000 	stmiacc	r4!, {}	; <UNPREDICTABLE>
    a914:	00140000 	andseq	r0, r4, r0
    a918:	9c010000 	stcls	0, cr0, [r1], {-0}
    a91c:	0000054a 	andeq	r0, r0, sl, asr #10
    a920:	0000ce1f 	andeq	ip, r0, pc, lsl lr
    a924:	003f4a00 	eorseq	r4, pc, r0, lsl #20
    a928:	00da1600 	sbcseq	r1, sl, r0, lsl #12
    a92c:	3f6b0000 	svccc	0x006b0000
    a930:	a6150000 	ldrge	r0, [r5], -r0
    a934:	0a000038 	beq	aa1c <__exidx_end+0x5aef>
    a938:	1f000000 	svcne	0x00000000
    a93c:	000000ce 	andeq	r0, r0, lr, asr #1
    a940:	00003f8a 	andeq	r3, r0, sl, lsl #31
    a944:	0038a615 	eorseq	sl, r8, r5, lsl r6
    a948:	00000a00 	andeq	r0, r0, r0, lsl #20
    a94c:	00da1600 	sbcseq	r1, sl, r0, lsl #12
    a950:	3fab0000 	svccc	0x00ab0000
    a954:	00000000 	andeq	r0, r0, r0
    a958:	00e71e00 	rsceq	r1, r7, r0, lsl #28
    a95c:	38b80000 	ldmcc	r8!, {}	; <UNPREDICTABLE>
    a960:	00140000 	andseq	r0, r4, r0
    a964:	9c010000 	stcls	0, cr0, [r1], {-0}
    a968:	00000596 	muleq	r0, r6, r5
    a96c:	0000f71f 	andeq	pc, r0, pc, lsl r7	; <UNPREDICTABLE>
    a970:	003fbe00 	eorseq	fp, pc, r0, lsl #28
    a974:	01031600 	tsteq	r3, r0, lsl #12
    a978:	3fdf0000 	svccc	0x00df0000
    a97c:	ba150000 	blt	54a984 <__ccfg+0x52a9dc>
    a980:	0a000038 	beq	aa68 <__exidx_end+0x5b3b>
    a984:	1f000000 	svcne	0x00000000
    a988:	000000f7 	strdeq	r0, [r0], -r7
    a98c:	00003ffe 	strdeq	r3, [r0], -lr
    a990:	0038ba15 	eorseq	fp, r8, r5, lsl sl
    a994:	00000a00 	andeq	r0, r0, r0, lsl #20
    a998:	01031600 	tsteq	r3, r0, lsl #12
    a99c:	401f0000 	andsmi	r0, pc, r0
    a9a0:	00000000 	andeq	r0, r0, r0
    a9a4:	01101e00 	tsteq	r0, r0, lsl #28
    a9a8:	38cc0000 	stmiacc	ip, {}^	; <UNPREDICTABLE>
    a9ac:	00140000 	andseq	r0, r4, r0
    a9b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    a9b4:	000005e2 	andeq	r0, r0, r2, ror #11
    a9b8:	0001201f 	andeq	r2, r1, pc, lsl r0
    a9bc:	00403200 	subeq	r3, r0, r0, lsl #4
    a9c0:	012c1600 			; <UNDEFINED> instruction: 0x012c1600
    a9c4:	40530000 	subsmi	r0, r3, r0
    a9c8:	ce150000 	cdpgt	0, 1, cr0, cr5, cr0, {0}
    a9cc:	0a000038 	beq	aab4 <__exidx_end+0x5b87>
    a9d0:	1f000000 	svcne	0x00000000
    a9d4:	00000120 	andeq	r0, r0, r0, lsr #2
    a9d8:	00004072 	andeq	r4, r0, r2, ror r0
    a9dc:	0038ce15 	eorseq	ip, r8, r5, lsl lr
    a9e0:	00000a00 	andeq	r0, r0, r0, lsl #20
    a9e4:	012c1600 			; <UNDEFINED> instruction: 0x012c1600
    a9e8:	40930000 	addsmi	r0, r3, r0
    a9ec:	00000000 	andeq	r0, r0, r0
    a9f0:	01391e00 	teqeq	r9, r0, lsl #28
    a9f4:	38e00000 	stmiacc	r0!, {}^	; <UNPREDICTABLE>
    a9f8:	00280000 	eoreq	r0, r8, r0
    a9fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    aa00:	0000063c 	andeq	r0, r0, ip, lsr r6
    aa04:	0001491f 	andeq	r4, r1, pc, lsl r9
    aa08:	0040a600 	subeq	sl, r0, r0, lsl #12
    aa0c:	01551600 	cmpeq	r5, r0, lsl #12
    aa10:	40c70000 	sbcmi	r0, r7, r0
    aa14:	61200000 			; <UNDEFINED> instruction: 0x61200000
    aa18:	15000001 	strne	r0, [r0, #-1]
    aa1c:	000038e2 	andeq	r3, r0, r2, ror #17
    aa20:	0000001c 	andeq	r0, r0, ip, lsl r0
    aa24:	0001491f 	andeq	r4, r1, pc, lsl r9
    aa28:	0040e600 	subeq	lr, r0, r0, lsl #12
    aa2c:	38e21500 	stmiacc	r2!, {r8, sl, ip}^
    aa30:	001c0000 	andseq	r0, ip, r0
    aa34:	55160000 	ldrpl	r0, [r6, #-0]
    aa38:	07000001 	streq	r0, [r0, -r1]
    aa3c:	16000041 	strne	r0, [r0], -r1, asr #32
    aa40:	00000161 	andeq	r0, r0, r1, ror #2
    aa44:	00004134 	andeq	r4, r0, r4, lsr r1
    aa48:	1b000000 	blne	aa50 <__exidx_end+0x5b23>
    aa4c:	00002c91 	muleq	r0, r1, ip
    aa50:	008ccf02 	addeq	ip, ip, r2, lsl #30
    aa54:	39080000 	stmdbcc	r8, {}	; <UNPREDICTABLE>
    aa58:	00100000 	andseq	r0, r0, r0
    aa5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    aa60:	00000666 	andeq	r0, r0, r6, ror #12
    aa64:	002d2b1d 	eoreq	r2, sp, sp, lsl fp
    aa68:	03840100 	orreq	r0, r4, #0, 2
    aa6c:	0000008c 	andeq	r0, r0, ip, lsl #1
    aa70:	00004147 	andeq	r4, r0, r7, asr #2
    aa74:	016e1e00 	cmneq	lr, r0, lsl #28
    aa78:	39180000 	ldmdbcc	r8, {}	; <UNPREDICTABLE>
    aa7c:	002c0000 	eoreq	r0, ip, r0
    aa80:	9c010000 	stcls	0, cr0, [r1], {-0}
    aa84:	000006c0 	andeq	r0, r0, r0, asr #13
    aa88:	00017e1f 	andeq	r7, r1, pc, lsl lr
    aa8c:	00416200 	subeq	r6, r1, r0, lsl #4
    aa90:	018a1600 	orreq	r1, sl, r0, lsl #12
    aa94:	41830000 	orrmi	r0, r3, r0
    aa98:	96200000 	strtls	r0, [r0], -r0
    aa9c:	15000001 	strne	r0, [r0, #-1]
    aaa0:	0000391a 	andeq	r3, r0, sl, lsl r9
    aaa4:	0000001e 	andeq	r0, r0, lr, lsl r0
    aaa8:	00017e1f 	andeq	r7, r1, pc, lsl lr
    aaac:	0041a600 	subeq	sl, r1, r0, lsl #12
    aab0:	391a1500 	ldmdbcc	sl, {r8, sl, ip}
    aab4:	001e0000 	andseq	r0, lr, r0
    aab8:	8a160000 	bhi	58aac0 <__ccfg+0x56ab18>
    aabc:	c7000001 	strgt	r0, [r0, -r1]
    aac0:	16000041 	strne	r0, [r0], -r1, asr #32
    aac4:	00000196 	muleq	r0, r6, r1
    aac8:	000041f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    aacc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    aad0:	000001a3 	andeq	r0, r0, r3, lsr #3
    aad4:	00003944 	andeq	r3, r0, r4, asr #18
    aad8:	00000014 	andeq	r0, r0, r4, lsl r0
    aadc:	070c9c01 	streq	r9, [ip, -r1, lsl #24]
    aae0:	b31f0000 	tstlt	pc, #0
    aae4:	07000001 	streq	r0, [r0, -r1]
    aae8:	16000042 	strne	r0, [r0], -r2, asr #32
    aaec:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
    aaf0:	00004228 	andeq	r4, r0, r8, lsr #4
    aaf4:	00394615 	eorseq	r4, r9, r5, lsl r6
    aaf8:	00000a00 	andeq	r0, r0, r0, lsl #20
    aafc:	01b31f00 			; <UNDEFINED> instruction: 0x01b31f00
    ab00:	42470000 	submi	r0, r7, #0
    ab04:	46150000 	ldrmi	r0, [r5], -r0
    ab08:	0a000039 	beq	abf4 <__exidx_end+0x5cc7>
    ab0c:	16000000 	strne	r0, [r0], -r0
    ab10:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
    ab14:	00004268 	andeq	r4, r0, r8, ror #4
    ab18:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    ab1c:	000001cc 	andeq	r0, r0, ip, asr #3
    ab20:	00003958 	andeq	r3, r0, r8, asr r9
    ab24:	00000014 	andeq	r0, r0, r4, lsl r0
    ab28:	07589c01 	ldrbeq	r9, [r8, -r1, lsl #24]
    ab2c:	dc1f0000 	ldcle	0, cr0, [pc], {-0}
    ab30:	7b000001 	blvc	ab3c <__exidx_end+0x5c0f>
    ab34:	16000042 	strne	r0, [r0], -r2, asr #32
    ab38:	000001e8 	andeq	r0, r0, r8, ror #3
    ab3c:	0000429c 	muleq	r0, ip, r2
    ab40:	00395a15 	eorseq	r5, r9, r5, lsl sl
    ab44:	00000a00 	andeq	r0, r0, r0, lsl #20
    ab48:	01dc1f00 	bicseq	r1, ip, r0, lsl #30
    ab4c:	42bb0000 	adcsmi	r0, fp, #0
    ab50:	5a150000 	bpl	54ab58 <__ccfg+0x52abb0>
    ab54:	0a000039 	beq	ac40 <__exidx_end+0x5d13>
    ab58:	16000000 	strne	r0, [r0], -r0
    ab5c:	000001e8 	andeq	r0, r0, r8, ror #3
    ab60:	000042dc 	ldrdeq	r4, [r0], -ip
    ab64:	17000000 	strne	r0, [r0, -r0]
    ab68:	00002a2b 	andeq	r2, r0, fp, lsr #20
    ab6c:	396c7302 	stmdbcc	ip!, {r1, r8, r9, ip, sp, lr}^
    ab70:	01100000 	tsteq	r0, r0
    ab74:	9c010000 	stcls	0, cr0, [r1], {-0}
    ab78:	00000963 	andeq	r0, r0, r3, ror #18
    ab7c:	002ad61c 	eoreq	sp, sl, ip, lsl r6
    ab80:	01270100 			; <UNDEFINED> instruction: 0x01270100
    ab84:	0000008c 	andeq	r0, r0, ip, lsl #1
    ab88:	000042ef 	andeq	r4, r0, pc, ror #5
    ab8c:	002b421c 	eoreq	r4, fp, ip, lsl r2
    ab90:	01270100 			; <UNDEFINED> instruction: 0x01270100
    ab94:	0000008c 	andeq	r0, r0, ip, lsl #1
    ab98:	0000431b 	andeq	r4, r0, fp, lsl r3
    ab9c:	002e951d 	eoreq	r9, lr, sp, lsl r5
    aba0:	01290100 			; <UNDEFINED> instruction: 0x01290100
    aba4:	0000008c 	andeq	r0, r0, ip, lsl #1
    aba8:	0000433c 	andeq	r4, r0, ip, lsr r3
    abac:	0001f521 	andeq	pc, r1, r1, lsr #10
    abb0:	00399c00 	eorseq	r9, r9, r0, lsl #24
    abb4:	000fc800 	andeq	ip, pc, r0, lsl #16
    abb8:	01400100 	mrseq	r0, (UNDEF: 80)
    abbc:	000007c1 	andeq	r0, r0, r1, asr #15
    abc0:	000fc812 	andeq	ip, pc, r2, lsl r8	; <UNPREDICTABLE>
    abc4:	02051600 	andeq	r1, r5, #0, 12
    abc8:	440a0000 	strmi	r0, [sl], #-0
    abcc:	00000000 	andeq	r0, r0, r0
    abd0:	00397622 	eorseq	r7, r9, r2, lsr #12
    abd4:	00034300 	andeq	r4, r3, r0, lsl #6
    abd8:	0007d600 	andeq	sp, r7, r0, lsl #12
    abdc:	50011a00 	andpl	r1, r1, r0, lsl #20
    abe0:	5101f303 	tstpl	r1, r3, lsl #6	; <UNPREDICTABLE>
    abe4:	39822200 	stmibcc	r2, {r9, sp}
    abe8:	0ad60000 	beq	ff58abf0 <_estack+0xdf585bf0>
    abec:	07ef0000 	strbeq	r0, [pc, r0]!
    abf0:	011a0000 	tsteq	sl, r0
    abf4:	1a480151 	bne	120b140 <__ccfg+0x11eb198>
    abf8:	74025001 	strvc	r5, [r2], #-1
    abfc:	86230000 	strthi	r0, [r3], -r0
    ac00:	bd000039 	stclt	0, cr0, [r0, #-228]	; 0xffffff1c
    ac04:	24000003 	strcs	r0, [r0], #-3
    ac08:	0000399c 	muleq	r0, ip, r9
    ac0c:	1d007602 	stcne	6, cr7, [r0, #-8]
    ac10:	1a000008 	bne	ac38 <__exidx_end+0x5d0b>
    ac14:	30015301 	andcc	r5, r1, r1, lsl #6
    ac18:	0352011a 	cmpeq	r2, #-2147483642	; 0x80000006
    ac1c:	1a03ff0a 	bne	10a84c <__ccfg+0xea8a4>
    ac20:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    ac24:	50011a2c 	andpl	r1, r1, ip, lsr #20
    ac28:	00007402 	andeq	r7, r0, r2, lsl #8
    ac2c:	0039ac22 	eorseq	sl, r9, r2, lsr #24
    ac30:	000ad600 	andeq	sp, sl, r0, lsl #12
    ac34:	00083600 	andeq	r3, r8, r0, lsl #12
    ac38:	51011a00 	tstpl	r1, r0, lsl #20
    ac3c:	011a4c01 	tsteq	sl, r1, lsl #24
    ac40:	00740250 	rsbseq	r0, r4, r0, asr r2
    ac44:	39b02300 	ldmibcc	r0!, {r8, r9, sp}
    ac48:	04040000 	streq	r0, [r4], #-0
    ac4c:	ba220000 	blt	88ac54 <__ccfg+0x86acac>
    ac50:	d6000039 			; <UNDEFINED> instruction: 0xd6000039
    ac54:	5800000a 	stmdapl	r0, {r1, r3}
    ac58:	1a000008 	bne	ac80 <__exidx_end+0x5d53>
    ac5c:	44015101 	strmi	r5, [r1], #-257	; 0xfffffeff
    ac60:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    ac64:	23000074 	movwcs	r0, #116	; 0x74
    ac68:	000039be 			; <UNDEFINED> instruction: 0x000039be
    ac6c:	0000043e 	andeq	r0, r0, lr, lsr r4
    ac70:	0039c822 	eorseq	ip, r9, r2, lsr #16
    ac74:	000ad600 	andeq	sp, sl, r0, lsl #12
    ac78:	00087a00 	andeq	r7, r8, r0, lsl #20
    ac7c:	51011a00 	tstpl	r1, r0, lsl #20
    ac80:	011a4001 	tsteq	sl, r1
    ac84:	00740250 	rsbseq	r0, r4, r0, asr r2
    ac88:	39ce2200 	stmibcc	lr, {r9, sp}^
    ac8c:	04780000 	ldrbteq	r0, [r8], #-0
    ac90:	088e0000 	stmeq	lr, {}	; <UNPREDICTABLE>
    ac94:	011a0000 	tsteq	sl, r0
    ac98:	00750250 	rsbseq	r0, r5, r0, asr r2
    ac9c:	39d82200 	ldmibcc	r8, {r9, sp}^
    aca0:	0ad60000 	beq	ff58aca8 <_estack+0xdf585ca8>
    aca4:	08a70000 	stmiaeq	r7!, {}	; <UNPREDICTABLE>
    aca8:	011a0000 	tsteq	sl, r0
    acac:	1a3c0151 	bne	f0b1f8 <__ccfg+0xeeb250>
    acb0:	74025001 	strvc	r5, [r2], #-1
    acb4:	de220000 	cdple	0, 2, cr0, cr2, cr0, {0}
    acb8:	e7000039 	smladx	r0, r9, r0, r0
    acbc:	bb000000 	bllt	acc4 <__exidx_end+0x5d97>
    acc0:	1a000008 	bne	ace8 <__exidx_end+0x5dbb>
    acc4:	75025001 	strvc	r5, [r2, #-1]
    acc8:	f0220000 			; <UNDEFINED> instruction: 0xf0220000
    accc:	10000039 	andne	r0, r0, r9, lsr r0
    acd0:	cf000001 	svcgt	0x00000001
    acd4:	1a000008 	bne	acfc <__exidx_end+0x5dcf>
    acd8:	75025001 	strvc	r5, [r2, #-1]
    acdc:	fe220000 	cdp2	0, 2, cr0, cr2, cr0, {0}
    ace0:	39000039 	stmdbcc	r0, {r0, r3, r4, r5}
    ace4:	e3000001 	movw	r0, #1
    ace8:	1a000008 	bne	ad10 <__exidx_end+0x5de3>
    acec:	75025001 	strvc	r5, [r2, #-1]
    acf0:	08220000 	stmdaeq	r2!, {}	; <UNPREDICTABLE>
    acf4:	d600003a 			; <UNDEFINED> instruction: 0xd600003a
    acf8:	fd00000a 	stc2	0, cr0, [r0, #-40]	; 0xffffffd8
    acfc:	1a000008 	bne	ad24 <__exidx_end+0x5df7>
    ad00:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    ad04:	50011a28 	andpl	r1, r1, r8, lsr #20
    ad08:	00007402 	andeq	r7, r0, r2, lsl #8
    ad0c:	003a0e22 	eorseq	r0, sl, r2, lsr #28
    ad10:	0000be00 	andeq	fp, r0, r0, lsl #28
    ad14:	00091100 	andeq	r1, r9, r0, lsl #2
    ad18:	50011a00 	andpl	r1, r1, r0, lsl #20
    ad1c:	00007502 	andeq	r7, r0, r2, lsl #10
    ad20:	003a2022 	eorseq	r2, sl, r2, lsr #32
    ad24:	0001a300 	andeq	sl, r1, r0, lsl #6
    ad28:	00092500 	andeq	r2, r9, r0, lsl #10
    ad2c:	50011a00 	andpl	r1, r1, r0, lsl #20
    ad30:	00007502 	andeq	r7, r0, r2, lsl #10
    ad34:	003a3222 	eorseq	r3, sl, r2, lsr #4
    ad38:	0001cc00 	andeq	ip, r1, r0, lsl #24
    ad3c:	00093900 	andeq	r3, r9, r0, lsl #18
    ad40:	50011a00 	andpl	r1, r1, r0, lsl #20
    ad44:	00007502 	andeq	r7, r0, r2, lsl #10
    ad48:	003a4622 	eorseq	r4, sl, r2, lsr #12
    ad4c:	00016e00 	andeq	r6, r1, r0, lsl #28
    ad50:	00094d00 	andeq	r4, r9, r0, lsl #26
    ad54:	50011a00 	andpl	r1, r1, r0, lsl #20
    ad58:	00007502 	andeq	r7, r0, r2, lsl #10
    ad5c:	003a5019 	eorseq	r5, sl, r9, lsl r0
    ad60:	000ad600 	andeq	sp, sl, r0, lsl #12
    ad64:	51011a00 	tstpl	r1, r0, lsl #20
    ad68:	011a3801 	tsteq	sl, r1, lsl #16
    ad6c:	00740250 	rsbseq	r0, r4, r0, asr r2
    ad70:	a8170000 	ldmdage	r7, {}	; <UNPREDICTABLE>
    ad74:	0200002a 	andeq	r0, r0, #42	; 0x2a
    ad78:	003a7cfd 	ldrshteq	r7, [sl], -sp
    ad7c:	00006400 	andeq	r6, r0, r0, lsl #8
    ad80:	899c0100 	ldmibhi	ip, {r8}
    ad84:	1d000009 	stcne	0, cr0, [r0, #-36]	; 0xffffffdc
    ad88:	00002c5f 	andeq	r2, r0, pc, asr ip
    ad8c:	8c03eb01 			; <UNDEFINED> instruction: 0x8c03eb01
    ad90:	23000000 	movwcs	r0, #0
    ad94:	00000044 	andeq	r0, r0, r4, asr #32
    ad98:	002fd50c 	eoreq	sp, pc, ip, lsl #10
    ad9c:	01060200 	mrseq	r0, LR_usr
    ada0:	00003ae0 	andeq	r3, r0, r0, ror #21
    ada4:	00000028 	andeq	r0, r0, r8, lsr #32
    ada8:	09b09c01 	ldmibeq	r0!, {r0, sl, fp, ip, pc}
    adac:	2c1c0000 	ldccs	0, cr0, [ip], {-0}
    adb0:	0100002e 	tsteq	r0, lr, lsr #32
    adb4:	008c0413 	addeq	r0, ip, r3, lsl r4
    adb8:	443e0000 	ldrtmi	r0, [lr], #-0
    adbc:	17000000 	strne	r0, [r0, -r0]
    adc0:	00002a5b 	andeq	r2, r0, fp, asr sl
    adc4:	3b087a02 	blcc	2295d4 <__ccfg+0x20962c>
    adc8:	01500000 	cmpeq	r0, r0
    adcc:	9c010000 	stcls	0, cr0, [r1], {-0}
    add0:	00000ad6 	ldrdeq	r0, [r0], -r6
    add4:	002b421c 	eoreq	r4, fp, ip, lsl r2
    add8:	019b0100 	orrseq	r0, fp, r0, lsl #2
    addc:	0000008c 	andeq	r0, r0, ip, lsl #1
    ade0:	0000445f 	andeq	r4, r0, pc, asr r4
    ade4:	002f731d 	eoreq	r7, pc, sp, lsl r3	; <UNPREDICTABLE>
    ade8:	019d0100 	orrseq	r0, sp, r0, lsl #2
    adec:	0000008c 	andeq	r0, r0, ip, lsl #1
    adf0:	000044ba 			; <UNDEFINED> instruction: 0x000044ba
    adf4:	002e951d 	eoreq	r9, lr, sp, lsl r5
    adf8:	019e0100 	orrseq	r0, lr, r0, lsl #2
    adfc:	0000008c 	andeq	r0, r0, ip, lsl #1
    ae00:	000044cd 	andeq	r4, r0, sp, asr #9
    ae04:	002bdf1d 	eoreq	sp, fp, sp, lsl pc
    ae08:	019f0100 	orrseq	r0, pc, r0, lsl #2
    ae0c:	0000008c 	andeq	r0, r0, ip, lsl #1
    ae10:	000044e0 	andeq	r4, r0, r0, ror #9
    ae14:	002bd21d 	eoreq	sp, fp, sp, lsl r2
    ae18:	01a00100 	lsleq	r0, r0, #2
    ae1c:	0000008c 	andeq	r0, r0, ip, lsl #1
    ae20:	000044fe 	strdeq	r4, [r0], -lr
    ae24:	00021225 	andeq	r1, r2, r5, lsr #4
    ae28:	003c1a00 	eorseq	r1, ip, r0, lsl #20
    ae2c:	00003e00 	andeq	r3, r0, r0, lsl #28
    ae30:	02160100 	andseq	r0, r6, #0, 2
    ae34:	003b9223 	eorseq	r9, fp, r3, lsr #4
    ae38:	00063c00 	andeq	r3, r6, r0, lsl #24
    ae3c:	3bb42200 	blcc	fed13644 <_estack+0xded0e644>
    ae40:	0af20000 	beq	ffc8ae48 <_estack+0xdfc85e48>
    ae44:	0a460000 	beq	118ae4c <__ccfg+0x116aea4>
    ae48:	011a0000 	tsteq	sl, r0
    ae4c:	1a310151 	bne	c4b398 <__ccfg+0xc2b3f0>
    ae50:	34015001 	strcc	r5, [r1], #-1
    ae54:	3bba2200 	blcc	fee9365c <_estack+0xdee8e65c>
    ae58:	09890000 	stmibeq	r9, {}	; <UNPREDICTABLE>
    ae5c:	0a5d0000 	beq	174ae64 <__ccfg+0x172aebc>
    ae60:	011a0000 	tsteq	sl, r0
    ae64:	bd0c0550 	cfstr32lt	mvfx0, [ip, #-320]	; 0xfffffec0
    ae68:	00008637 	andeq	r8, r0, r7, lsr r6
    ae6c:	003bc023 	eorseq	ip, fp, r3, lsr #32
    ae70:	000b0800 	andeq	r0, fp, r0, lsl #16
    ae74:	3bca2200 	blcc	ff29367c <_estack+0xdf28e67c>
    ae78:	0af20000 	beq	ffc8ae80 <_estack+0xdfc85e80>
    ae7c:	0a7f0000 	beq	1fcae84 <__ccfg+0x1faaedc>
    ae80:	011a0000 	tsteq	sl, r0
    ae84:	00740251 	rsbseq	r0, r4, r1, asr r2
    ae88:	0150011a 	cmpeq	r0, sl, lsl r1
    ae8c:	d0220034 	eorle	r0, r2, r4, lsr r0
    ae90:	0800003b 	stmdaeq	r0, {r0, r1, r3, r4, r5}
    ae94:	9200000b 	andls	r0, r0, #11
    ae98:	1a00000a 	bne	aec8 <__exidx_end+0x5f9b>
    ae9c:	34015001 	strcc	r5, [r1], #-1
    aea0:	3be02200 	blcc	ff8136a8 <_estack+0xdf80e6a8>
    aea4:	09890000 	stmibeq	r9, {}	; <UNPREDICTABLE>
    aea8:	0aac0000 	beq	feb0aeb0 <_estack+0xdeb05eb0>
    aeac:	011a0000 	tsteq	sl, r0
    aeb0:	00740850 	rsbseq	r0, r4, r0, asr r8
    aeb4:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
    aeb8:	26001a00 	strcs	r1, [r0], -r0, lsl #20
    aebc:	00003bf0 	strdeq	r3, [r0], -r0
    aec0:	00000acc 	andeq	r0, r0, ip, asr #21
    aec4:	0552011a 	ldrbeq	r0, [r2, #-282]	; 0xfffffee6
    aec8:	0060000c 	rsbeq	r0, r0, ip
    aecc:	51011a60 	tstpl	r1, r0, ror #20
    aed0:	011a3701 	tsteq	sl, r1, lsl #14
    aed4:	00740450 	rsbseq	r0, r4, r0, asr r4
    aed8:	23002548 	movwcs	r2, #1352	; 0x548
    aedc:	00003c06 	andeq	r3, r0, r6, lsl #24
    aee0:	00000af2 	strdeq	r0, [r0], -r2
    aee4:	2da52700 	stccs	7, cr2, [r5]
    aee8:	ca060000 	bgt	18aef0 <__ccfg+0x16af48>
    aeec:	000af201 	andeq	pc, sl, r1, lsl #4
    aef0:	008c2800 	addeq	r2, ip, r0, lsl #16
    aef4:	8c280000 	stchi	0, cr0, [r8], #-0
    aef8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    aefc:	0000008c 	andeq	r0, r0, ip, lsl #1
    af00:	22342900 	eorscs	r2, r4, #0, 18
    af04:	f9070000 			; <UNDEFINED> instruction: 0xf9070000
    af08:	00000b08 	andeq	r0, r0, r8, lsl #22
    af0c:	00008c28 	andeq	r8, r0, r8, lsr #24
    af10:	008c2800 	addeq	r2, ip, r0, lsl #16
    af14:	2a000000 	bcs	af1c <__exidx_end+0x5fef>
    af18:	0000226d 	andeq	r2, r0, sp, ror #4
    af1c:	8c011007 	stchi	0, cr1, [r1], {7}
    af20:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    af24:	0000008c 	andeq	r0, r0, ip, lsl #1
    af28:	09230000 	stmdbeq	r3!, {}	; <UNPREDICTABLE>
    af2c:	00040000 	andeq	r0, r4, r0
    af30:	00002e2c 	andeq	r2, r0, ip, lsr #28
    af34:	1f560104 	svcne	0x00560104
    af38:	17010000 	strne	r0, [r1, -r0]
    af3c:	1d000031 	stcne	0, cr0, [r0, #-196]	; 0xffffff3c
    af40:	b8000020 	stmdalt	r0, {r5}
    af44:	00000010 	andeq	r0, r0, r0, lsl r0
    af48:	0c000000 	stceq	0, cr0, [r0], {-0}
    af4c:	02000073 	andeq	r0, r0, #115	; 0x73
    af50:	000020c0 	andeq	r2, r0, r0, asr #1
    af54:	00301b06 	eorseq	r1, r0, r6, lsl #22
    af58:	01030000 	mrseq	r0, (UNDEF: 3)
    af5c:	00029d06 	andeq	r9, r2, r6, lsl #26
    af60:	1f310200 	svcne	0x00310200
    af64:	1d060000 	stcne	0, cr0, [r6, #-0]
    af68:	00000042 	andeq	r0, r0, r2, asr #32
    af6c:	9b080103 	blls	20b380 <__ccfg+0x1eb3d8>
    af70:	03000002 	movweq	r0, #2
    af74:	02b90502 	adcseq	r0, r9, #8388608	; 0x800000
    af78:	27020000 	strcs	r0, [r2, -r0]
    af7c:	06000023 	streq	r0, [r0], -r3, lsr #32
    af80:	00005b2b 	andeq	r5, r0, fp, lsr #22
    af84:	07020300 	streq	r0, [r2, -r0, lsl #6]
    af88:	000001ca 	andeq	r0, r0, sl, asr #3
    af8c:	0020b602 	eoreq	fp, r0, r2, lsl #12
    af90:	6d3f0600 	ldcvs	6, cr0, [pc, #-0]	; af98 <__exidx_end+0x606b>
    af94:	03000000 	movweq	r0, #0
    af98:	005c0504 	subseq	r0, ip, r4, lsl #10
    af9c:	c9020000 	stmdbgt	r2, {}	; <UNPREDICTABLE>
    afa0:	0600001e 			; <UNDEFINED> instruction: 0x0600001e
    afa4:	00007f41 	andeq	r7, r0, r1, asr #30
    afa8:	07040300 	streq	r0, [r4, -r0, lsl #6]
    afac:	00000045 	andeq	r0, r0, r5, asr #32
    afb0:	57050803 	strpl	r0, [r5, -r3, lsl #16]
    afb4:	03000000 	movweq	r0, #0
    afb8:	00400708 	subeq	r0, r0, r8, lsl #14
    afbc:	04040000 	streq	r0, [r4], #-0
    afc0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    afc4:	07040300 	streq	r0, [r4, -r0, lsl #6]
    afc8:	0000004a 	andeq	r0, r0, sl, asr #32
    afcc:	0020c202 	eoreq	ip, r0, r2, lsl #4
    afd0:	25130700 	ldrcs	r0, [r3, #-1792]	; 0xfffff900
    afd4:	02000000 	andeq	r0, r0, #0
    afd8:	00001f33 	andeq	r1, r0, r3, lsr pc
    afdc:	00371407 	eorseq	r1, r7, r7, lsl #8
    afe0:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
    afe4:	07000023 	streq	r0, [r0, -r3, lsr #32]
    afe8:	0000501a 	andeq	r5, r0, sl, lsl r0
    afec:	20b80200 	adcscs	r0, r8, r0, lsl #4
    aff0:	1f070000 	svcne	0x00070000
    aff4:	00000062 	andeq	r0, r0, r2, rrx
    aff8:	001ecb02 	andseq	ip, lr, r2, lsl #22
    affc:	74200700 	strtvc	r0, [r0], #-1792	; 0xfffff900
    b000:	02000000 	andeq	r0, r0, #0
    b004:	00001ef5 	strdeq	r1, [r0], -r5
    b008:	00e43308 	rsceq	r3, r4, r8, lsl #6
    b00c:	04050000 	streq	r0, [r5], #-0
    b010:	000000ea 	andeq	r0, r0, sl, ror #1
    b014:	f1040506 			; <UNDEFINED> instruction: 0xf1040506
    b018:	07000000 	streq	r0, [r0, -r0]
    b01c:	000000fc 	strdeq	r0, [r0], -ip
    b020:	0000ad08 	andeq	sl, r0, r8, lsl #26
    b024:	2b020000 	blcs	8b02c <__ccfg+0x6b084>
    b028:	09000026 	stmdbeq	r0, {r1, r2, r5}
    b02c:	00010742 	andeq	r0, r1, r2, asr #14
    b030:	0d040500 	cfstr32eq	mvfx0, [r4, #-0]
    b034:	09000001 	stmdbeq	r0, {r0}
    b038:	000000ce 	andeq	r0, r0, lr, asr #1
    b03c:	00000126 	andeq	r0, r0, r6, lsr #2
    b040:	00012608 	andeq	r2, r1, r8, lsl #12
    b044:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    b048:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    b04c:	00000000 	andeq	r0, r0, r0
    b050:	00ad0405 	adceq	r0, sp, r5, lsl #8
    b054:	93020000 	movwls	r0, #8192	; 0x2000
    b058:	09000027 	stmdbeq	r0, {r0, r1, r2, r5}
    b05c:	00013746 	andeq	r3, r1, r6, asr #14
    b060:	3d040500 	cfstr32cc	mvfx0, [r4, #-0]
    b064:	0a000001 	beq	b070 <__exidx_end+0x6143>
    b068:	000000ce 	andeq	r0, r0, lr, asr #1
    b06c:	0027dc02 	eoreq	sp, r7, r2, lsl #24
    b070:	37480900 	strbcc	r0, [r8, -r0, lsl #18]
    b074:	02000001 	andeq	r0, r0, #1
    b078:	000024c3 	andeq	r2, r0, r3, asr #9
    b07c:	01584a09 	cmpeq	r8, r9, lsl #20
    b080:	04050000 	streq	r0, [r5], #-0
    b084:	0000015e 	andeq	r0, r0, lr, asr r1
    b088:	0000ce09 	andeq	ip, r0, r9, lsl #28
    b08c:	00016d00 	andeq	r6, r1, r0, lsl #26
    b090:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    b094:	02000000 	andeq	r0, r0, #0
    b098:	000023d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    b09c:	01374c09 	teqeq	r7, r9, lsl #24
    b0a0:	32020000 	andcc	r0, r2, #0
    b0a4:	09000023 	stmdbeq	r0, {r0, r1, r5}
    b0a8:	0001074e 	andeq	r0, r1, lr, asr #14
    b0ac:	23c20200 	biccs	r0, r2, #0, 4
    b0b0:	51090000 	mrspl	r0, (UNDEF: 9)
    b0b4:	000000e4 	andeq	r0, r0, r4, ror #1
    b0b8:	00224c02 	eoreq	r4, r2, r2, lsl #24
    b0bc:	99530900 	ldmdbls	r3, {r8, fp}^
    b0c0:	05000001 	streq	r0, [r0, #-1]
    b0c4:	00019f04 	andeq	r9, r1, r4, lsl #30
    b0c8:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    b0cc:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
    b0d0:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
    b0d4:	08000001 	stmdaeq	r0, {r0}
    b0d8:	000000b8 	strheq	r0, [r0], -r8
    b0dc:	0000b808 	andeq	fp, r0, r8, lsl #16
    b0e0:	04050000 	streq	r0, [r5], #-0
    b0e4:	000000b8 	strheq	r0, [r0], -r8
    b0e8:	00264102 	eoreq	r4, r6, r2, lsl #2
    b0ec:	c9570900 	ldmdbgt	r7, {r8, fp}^
    b0f0:	05000001 	streq	r0, [r0, #-1]
    b0f4:	0001cf04 	andeq	ip, r1, r4, lsl #30
    b0f8:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    b0fc:	01e30000 	mvneq	r0, r0
    b100:	e3080000 	movw	r0, #32768	; 0x8000
    b104:	08000001 	stmdaeq	r0, {r0}
    b108:	000000ce 	andeq	r0, r0, lr, asr #1
    b10c:	ce040500 	cfsh32gt	mvfx0, mvfx4, #0
    b110:	02000000 	andeq	r0, r0, #0
    b114:	00002435 	andeq	r2, r0, r5, lsr r4
    b118:	01c95a09 	biceq	r5, r9, r9, lsl #20
    b11c:	ef020000 	svc	0x00020000
    b120:	09000024 	stmdbeq	r0, {r2, r5}
    b124:	0001c95d 	andeq	ip, r1, sp, asr r9
    b128:	225e0200 	subscs	r0, lr, #0, 4
    b12c:	60090000 	andvs	r0, r9, r0
    b130:	000001c9 	andeq	r0, r0, r9, asr #3
    b134:	00264f02 	eoreq	r4, r6, r2, lsl #30
    b138:	e4630900 	strbt	r0, [r3], #-2304	; 0xfffff700
    b13c:	02000000 	andeq	r0, r0, #0
    b140:	0000229c 	muleq	r0, ip, r2
    b144:	02206509 	eoreq	r6, r0, #37748736	; 0x2400000
    b148:	04050000 	streq	r0, [r5], #-0
    b14c:	00000226 	andeq	r0, r0, r6, lsr #4
    b150:	00023107 	andeq	r3, r2, r7, lsl #2
    b154:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    b158:	02000000 	andeq	r0, r0, #0
    b15c:	000027ed 	andeq	r2, r0, sp, ror #15
    b160:	02206709 	eoreq	r6, r0, #2359296	; 0x240000
    b164:	31020000 	mrscc	r0, (UNDEF: 2)
    b168:	09000025 	stmdbeq	r0, {r0, r2, r5}
    b16c:	0000eb69 	andeq	lr, r0, r9, ror #22
    b170:	27cc0200 	strbcs	r0, [ip, r0, lsl #4]
    b174:	6b090000 	blvs	24b17c <__ccfg+0x22b1d4>
    b178:	000000eb 	andeq	r0, r0, fp, ror #1
    b17c:	0024fe02 	eoreq	pc, r4, r2, lsl #28
    b180:	eb6d0900 	bl	1b4d588 <__ccfg+0x1b2d5e0>
    b184:	02000000 	andeq	r0, r0, #0
    b188:	00002510 	andeq	r2, r0, r0, lsl r5
    b18c:	00eb6f09 	rsceq	r6, fp, r9, lsl #30
    b190:	4c0b0000 	stcmi	0, cr0, [fp], {-0}
    b194:	03557a09 	cmpeq	r5, #36864	; 0x9000
    b198:	d40c0000 	strle	r0, [ip], #-0
    b19c:	09000024 	stmdbeq	r0, {r2, r5}
    b1a0:	0000fc7c 	andeq	pc, r0, ip, ror ip	; <UNPREDICTABLE>
    b1a4:	bf0c0000 	svclt	0x000c0000
    b1a8:	09000027 	stmdbeq	r0, {r0, r1, r2, r5}
    b1ac:	00012c7d 	andeq	r2, r1, sp, ror ip
    b1b0:	e50c0400 	str	r0, [ip, #-1024]	; 0xfffffc00
    b1b4:	09000024 	stmdbeq	r0, {r2, r5}
    b1b8:	0001427e 	andeq	r4, r1, lr, ror r2
    b1bc:	de0c0800 	cdple	8, 0, cr0, cr12, cr0, {0}
    b1c0:	09000026 	stmdbeq	r0, {r1, r2, r5}
    b1c4:	00014d7f 	andeq	r4, r1, pc, ror sp
    b1c8:	f00c0c00 			; <UNDEFINED> instruction: 0xf00c0c00
    b1cc:	09000026 	stmdbeq	r0, {r1, r2, r5}
    b1d0:	00016d80 	andeq	r6, r1, r0, lsl #27
    b1d4:	e30c1000 	movw	r1, #49152	; 0xc000
    b1d8:	09000023 	stmdbeq	r0, {r0, r1, r5}
    b1dc:	00017881 	andeq	r7, r1, r1, lsl #17
    b1e0:	9f0c1400 	svcls	0x000c1400
    b1e4:	09000023 	stmdbeq	r0, {r0, r1, r5}
    b1e8:	00018382 	andeq	r8, r1, r2, lsl #7
    b1ec:	da0c1800 	ble	3111f4 <__ccfg+0x2f124c>
    b1f0:	09000024 	stmdbeq	r0, {r2, r5}
    b1f4:	00018e83 	andeq	r8, r1, r3, lsl #29
    b1f8:	690c1c00 	stmdbvs	ip, {sl, fp, ip}
    b1fc:	09000026 	stmdbeq	r0, {r1, r2, r5}
    b200:	0001be84 	andeq	fp, r1, r4, lsl #29
    b204:	610c2000 	mrsvs	r2, (UNDEF: 12)
    b208:	09000024 	stmdbeq	r0, {r2, r5}
    b20c:	0001e985 	andeq	lr, r1, r5, lsl #19
    b210:	b90c2400 	stmdblt	ip, {sl, sp}
    b214:	09000024 	stmdbeq	r0, {r2, r5}
    b218:	0001f486 	andeq	pc, r1, r6, lsl #9
    b21c:	1e0c2800 	cdpne	8, 0, cr2, cr12, cr0, {0}
    b220:	09000027 	stmdbeq	r0, {r0, r1, r2, r5}
    b224:	0001ff87 	andeq	pc, r1, r7, lsl #31
    b228:	fe0c2c00 	cdp2	12, 0, cr2, cr12, cr0, {0}
    b22c:	09000023 	stmdbeq	r0, {r0, r1, r5}
    b230:	00021588 	andeq	r1, r2, r8, lsl #11
    b234:	0c0c3000 	stceq	0, cr3, [ip], {-0}
    b238:	09000027 	stmdbeq	r0, {r0, r1, r2, r5}
    b23c:	00023189 	andeq	r3, r2, r9, lsl #3
    b240:	dd0c3400 	cfstrsle	mvf3, [ip, #-0]
    b244:	09000022 	stmdbeq	r0, {r1, r5}
    b248:	00020a8a 	andeq	r0, r2, sl, lsl #21
    b24c:	200c3800 	andcs	r3, ip, r0, lsl #16
    b250:	09000025 	stmdbeq	r0, {r0, r2, r5}
    b254:	00023c8b 	andeq	r3, r2, fp, lsl #25
    b258:	bf0c3c00 	svclt	0x000c3c00
    b25c:	09000026 	stmdbeq	r0, {r1, r2, r5}
    b260:	0002478c 	andeq	r4, r2, ip, lsl #15
    b264:	430c4000 	movwmi	r4, #49152	; 0xc000
    b268:	09000024 	stmdbeq	r0, {r2, r5}
    b26c:	0002528d 	andeq	r5, r2, sp, lsl #5
    b270:	8d0c4400 	cfstrshi	mvf4, [ip, #-0]
    b274:	09000022 	stmdbeq	r0, {r1, r5}
    b278:	00025d8e 	andeq	r5, r2, lr, lsl #27
    b27c:	02004800 	andeq	r4, r0, #0, 16
    b280:	000025ef 	andeq	r2, r0, pc, ror #11
    b284:	02688f09 	rsbeq	r8, r8, #9, 30	; 0x24
    b288:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    b28c:	03994e01 	orrseq	r4, r9, #1, 28
    b290:	460c0000 	strmi	r0, [ip], -r0
    b294:	01000032 	tsteq	r0, r2, lsr r0
    b298:	0000ce4f 	andeq	ip, r0, pc, asr #28
    b29c:	770c0000 	strvc	r0, [ip, -r0]
    b2a0:	01000032 	tsteq	r0, r2, lsr r0
    b2a4:	0000b850 	andeq	fp, r0, r0, asr r8
    b2a8:	b10c0400 	tstlt	ip, r0, lsl #8
    b2ac:	01000031 	tsteq	r0, r1, lsr r0
    b2b0:	0000ad51 	andeq	sl, r0, r1, asr sp
    b2b4:	640c0600 	strvs	r0, [ip], #-1536	; 0xfffffa00
    b2b8:	01000031 	tsteq	r0, r1, lsr r0
    b2bc:	0000a252 	andeq	sl, r0, r2, asr r2
    b2c0:	02000700 	andeq	r0, r0, #0, 14
    b2c4:	000032a3 	andeq	r3, r0, r3, lsr #5
    b2c8:	03605301 	cmneq	r0, #67108864	; 0x4000000
    b2cc:	6d0d0000 	stcvs	0, cr0, [sp, #-0]
    b2d0:	02000004 	andeq	r0, r0, #4
    b2d4:	be0301dc 	mcrlt	1, 0, r0, cr3, cr12, {6}
    b2d8:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    b2dc:	00000420 	andeq	r0, r0, r0, lsr #8
    b2e0:	ce01dc02 	cdpgt	12, 0, cr13, cr1, cr2, {0}
    b2e4:	00000000 	andeq	r0, r0, r0
    b2e8:	0004820f 	andeq	r8, r4, pc, lsl #4
    b2ec:	022c0200 	eoreq	r0, ip, #0, 4
    b2f0:	000000ce 	andeq	r0, r0, lr, asr #1
    b2f4:	05931003 	ldreq	r1, [r3, #3]
    b2f8:	2a040000 	bcs	10b300 <__ccfg+0xeb358>
    b2fc:	9e110302 	cdpls	3, 1, cr0, cr1, cr2, {0}
    b300:	0500002e 	streq	r0, [r0, #-46]	; 0xffffffd2
    b304:	0000c3e9 	andeq	ip, r0, r9, ror #7
    b308:	03fb0300 	mvnseq	r0, #0, 6
    b30c:	ee120000 	cdp	0, 1, cr0, cr2, cr0, {0}
    b310:	0500002b 	streq	r0, [r0, #-43]	; 0xffffffd5
    b314:	0000cee9 	andeq	ip, r0, r9, ror #29
    b318:	2ef71300 	cdpcs	3, 15, cr1, cr7, cr0, {0}
    b31c:	ef050000 	svc	0x00050000
    b320:	000000c3 	andeq	r0, r0, r3, asr #1
    b324:	31790d00 	cmncc	r9, r0, lsl #26
    b328:	5c040000 	stcpl	0, cr0, [r4], {-0}
    b32c:	04150302 	ldreq	r0, [r5], #-770	; 0xfffffcfe
    b330:	530e0000 	movwpl	r0, #57344	; 0xe000
    b334:	04000031 	streq	r0, [r0], #-49	; 0xffffffcf
    b338:	00ce025c 	sbceq	r0, lr, ip, asr r2
    b33c:	10000000 	andne	r0, r0, r0
    b340:	00002619 	andeq	r2, r0, r9, lsl r6
    b344:	03014003 	movweq	r4, #4099	; 0x1003
    b348:	0031fd0f 	eorseq	pc, r1, pc, lsl #26
    b34c:	023e0400 	eorseq	r0, lr, #0, 8
    b350:	0000042b 	andeq	r0, r0, fp, lsr #8
    b354:	02010303 	andeq	r0, r1, #201326592	; 0xc000000
    b358:	00000bc2 	andeq	r0, r0, r2, asr #23
    b35c:	00324d14 	eorseq	r4, r2, r4, lsl sp
    b360:	009e0a00 	addseq	r0, lr, r0, lsl #20
    b364:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    b368:	01000000 	mrseq	r0, (UNDEF: 0)
    b36c:	0005cd9c 	muleq	r5, ip, sp
    b370:	31a91500 			; <UNDEFINED> instruction: 0x31a91500
    b374:	7b010000 	blvc	4b37c <__ccfg+0x2b3d4>
    b378:	000000ce 	andeq	r0, r0, lr, asr #1
    b37c:	00004511 	andeq	r4, r0, r1, lsl r5
    b380:	00316b16 	eorseq	r6, r1, r6, lsl fp
    b384:	ce7c0100 	rpwgte	f0, f4, f0
    b388:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    b38c:	03a41707 			; <UNDEFINED> instruction: 0x03a41707
    b390:	00000000 	andeq	r0, r0, r0
    b394:	10880000 	addne	r0, r8, r0
    b398:	81010000 	mrshi	r0, (UNDEF: 1)
    b39c:	0000047d 	andeq	r0, r0, sp, ror r4
    b3a0:	0003b118 	andeq	fp, r3, r8, lsl r1
    b3a4:	19000100 	stmdbne	r0, {r8}
    b3a8:	000003be 			; <UNDEFINED> instruction: 0x000003be
    b3ac:	00000000 	andeq	r0, r0, r0
    b3b0:	00000004 	andeq	r0, r0, r4
    b3b4:	151a8201 	ldrne	r8, [sl, #-513]	; 0xfffffdff
    b3b8:	00000004 	andeq	r0, r0, r4
    b3bc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b3c0:	01000000 	mrseq	r0, (UNDEF: 0)
    b3c4:	0004a9a1 	andeq	sl, r4, r1, lsr #19
    b3c8:	00001b00 	andeq	r1, r0, r0, lsl #22
    b3cc:	08de0000 	ldmeq	lr, {}^	; <UNPREDICTABLE>
    b3d0:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    b3d4:	000003cb 	andeq	r0, r0, fp, asr #7
    b3d8:	00000000 	andeq	r0, r0, r0
    b3dc:	00000006 	andeq	r0, r0, r6
    b3e0:	1e19b101 	mnfnee	f3, f1
    b3e4:	00000004 	andeq	r0, r0, r4
    b3e8:	04000000 	streq	r0, [r0], #-0
    b3ec:	01000000 	mrseq	r0, (UNDEF: 0)
    b3f0:	03fb1ab2 	mvnseq	r1, #729088	; 0xb2000
    b3f4:	00000000 	andeq	r0, r0, r0
    b3f8:	000a0000 	andeq	r0, sl, r0
    b3fc:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    b400:	000004e1 	andeq	r0, r0, r1, ror #9
    b404:	00040818 	andeq	r0, r4, r8, lsl r8
    b408:	19001100 	stmdbne	r0, {r8, ip}
    b40c:	000003cb 	andeq	r0, r0, fp, asr #7
    b410:	00000000 	andeq	r0, r0, r0
    b414:	00000004 	andeq	r0, r0, r4
    b418:	1e19b901 	vnmlsne.f16	s22, s18, s2	; <UNPREDICTABLE>
    b41c:	00000004 	andeq	r0, r0, r4
    b420:	02000000 	andeq	r0, r0, #0
    b424:	01000000 	mrseq	r0, (UNDEF: 0)
    b428:	03cb19ba 	biceq	r1, fp, #3047424	; 0x2e8000
    b42c:	00000000 	andeq	r0, r0, r0
    b430:	00060000 	andeq	r0, r6, r0
    b434:	cf010000 	svcgt	0x00010000
    b438:	00041e19 	andeq	r1, r4, r9, lsl lr
    b43c:	00000000 	andeq	r0, r0, r0
    b440:	00000200 	andeq	r0, r0, r0, lsl #4
    b444:	1cd00100 	ldfnee	f0, [r0], {0}
    b448:	00000000 	andeq	r0, r0, r0
    b44c:	0000052e 	andeq	r0, r0, lr, lsr #10
    b450:	0350011d 	cmpeq	r0, #1073741831	; 0x40000007
    b454:	0007ff0a 	andeq	pc, r7, sl, lsl #30
    b458:	0000001c 	andeq	r0, r0, ip, lsl r0
    b45c:	00053f00 	andeq	r3, r5, r0, lsl #30
    b460:	50011d00 	andpl	r1, r1, r0, lsl #26
    b464:	07ff0a03 	ldrbeq	r0, [pc, r3, lsl #20]!
    b468:	00001e00 	andeq	r1, r0, r0, lsl #28
    b46c:	08ef0000 	stmiaeq	pc!, {}^	; <UNPREDICTABLE>
    b470:	05570000 	ldrbeq	r0, [r7, #-0]
    b474:	011d0000 	tsteq	sp, r0
    b478:	1d310151 	ldfnes	f0, [r1, #-324]!	; 0xfffffebc
    b47c:	33015001 	movwcc	r5, #4097	; 0x1001
    b480:	00001e00 	andeq	r1, r0, r0, lsl #28
    b484:	08ef0000 	stmiaeq	pc!, {}^	; <UNPREDICTABLE>
    b488:	056f0000 	strbeq	r0, [pc, #-0]!	; b490 <__exidx_end+0x6563>
    b48c:	011d0000 	tsteq	sp, r0
    b490:	1d330151 	ldfnes	f0, [r3, #-324]!	; 0xfffffebc
    b494:	34015001 	strcc	r5, [r1], #-1
    b498:	00001e00 	andeq	r1, r0, r0, lsl #28
    b49c:	09050000 	stmdbeq	r5, {}	; <UNPREDICTABLE>
    b4a0:	05820000 	streq	r0, [r2]
    b4a4:	011d0000 	tsteq	sp, r0
    b4a8:	00310150 	eorseq	r0, r1, r0, asr r1
    b4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
    b4b0:	00059100 	andeq	r9, r5, r0, lsl #2
    b4b4:	50011d00 	andpl	r1, r1, r0, lsl #26
    b4b8:	1c003701 	stcne	7, cr3, [r0], {1}
    b4bc:	00000000 	andeq	r0, r0, r0
    b4c0:	000005a0 	andeq	r0, r0, r0, lsr #11
    b4c4:	0150011d 	cmpeq	r0, sp, lsl r1
    b4c8:	001c0037 	andseq	r0, ip, r7, lsr r0
    b4cc:	b0000000 	andlt	r0, r0, r0
    b4d0:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    b4d4:	76025001 	strvc	r5, [r2], -r1
    b4d8:	001c0000 	andseq	r0, ip, r0
    b4dc:	c0000000 	andgt	r0, r0, r0
    b4e0:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    b4e4:	76025001 	strvc	r5, [r2], -r1
    b4e8:	001f0000 	andseq	r0, pc, r0
    b4ec:	1d000000 	stcne	0, cr0, [r0, #-0]
    b4f0:	76025001 	strvc	r5, [r2], -r1
    b4f4:	20000000 	andcs	r0, r0, r0
    b4f8:	000030ef 	andeq	r3, r0, pc, ror #1
    b4fc:	5801010a 	stmdapl	r1, {r1, r3, r8}
    b500:	2000003c 	andcs	r0, r0, ip, lsr r0
    b504:	01000002 	tsteq	r0, r2
    b508:	0007c89c 	muleq	r7, ip, r8
    b50c:	31ef2100 	mvncc	r2, r0, lsl #2
    b510:	da010000 	ble	4b518 <__ccfg+0x2b570>
    b514:	000000ce 	andeq	r0, r0, lr, asr #1
    b518:	0000453c 	andeq	r4, r0, ip, lsr r5
    b51c:	00309815 	eorseq	r9, r0, r5, lsl r8
    b520:	c3dc0100 	bicsgt	r0, ip, #0, 2
    b524:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    b528:	15000045 	strne	r0, [r0, #-69]	; 0xffffffbb
    b52c:	00003209 	andeq	r3, r0, r9, lsl #4
    b530:	00c3dd01 	sbceq	sp, r3, r1, lsl #26
    b534:	45860000 	strmi	r0, [r6]
    b538:	cf150000 	svcgt	0x00150000
    b53c:	01000031 	tsteq	r0, r1, lsr r0
    b540:	0000c3de 	ldrdeq	ip, [r0], -lr
    b544:	0045e000 	subeq	lr, r5, r0
    b548:	32951500 	addscc	r1, r5, #0, 10
    b54c:	df010000 	svcle	0x00010000
    b550:	000000c3 	andeq	r0, r0, r3, asr #1
    b554:	000045fe 	strdeq	r4, [r0], -lr
    b558:	00308a15 	eorseq	r8, r0, r5, lsl sl
    b55c:	c3e00100 	mvngt	r0, #0, 2
    b560:	1c000000 	stcne	0, cr0, [r0], {-0}
    b564:	22000046 	andcs	r0, r0, #70	; 0x46
    b568:	000030a0 	andeq	r3, r0, r0, lsr #1
    b56c:	00c3e101 	sbceq	lr, r3, r1, lsl #2
    b570:	53010000 	movwpl	r0, #4096	; 0x1000
    b574:	002b4215 	eoreq	r4, fp, r5, lsl r2
    b578:	cee20100 	cdpgt	1, 14, cr0, cr2, cr0, {0}
    b57c:	2f000000 	svccs	0x00000000
    b580:	15000046 	strne	r0, [r0, #-70]	; 0xffffffba
    b584:	0000322d 	andeq	r3, r0, sp, lsr #4
    b588:	00cee301 	sbceq	lr, lr, r1, lsl #6
    b58c:	46420000 	strbmi	r0, [r2], -r0
    b590:	b4150000 	ldrlt	r0, [r5], #-0
    b594:	01000030 	tsteq	r0, r0, lsr r0
    b598:	0000cee4 	andeq	ip, r0, r4, ror #29
    b59c:	00466100 	subeq	r6, r6, r0, lsl #2
    b5a0:	69642300 	stmdbvs	r4!, {r8, r9, sp}^
    b5a4:	cee50100 	cdpgt	1, 14, cr0, cr5, cr0, {0}
    b5a8:	74000000 	strvc	r0, [r0], #-0
    b5ac:	23000046 	movwcs	r0, #70	; 0x46
    b5b0:	00696964 	rsbeq	r6, r9, r4, ror #18
    b5b4:	00cee601 	sbceq	lr, lr, r1, lsl #12
    b5b8:	46aa0000 	strtmi	r0, [sl], r0
    b5bc:	74230000 	strtvc	r0, [r3], #-0
    b5c0:	e7010069 	str	r0, [r1, -r9, rrx]
    b5c4:	000000ce 	andeq	r0, r0, lr, asr #1
    b5c8:	000046e0 	andeq	r4, r0, r0, ror #13
    b5cc:	00646323 	rsbeq	r6, r4, r3, lsr #6
    b5d0:	00cee801 	sbceq	lr, lr, r1, lsl #16
    b5d4:	47500000 	ldrbmi	r0, [r0, -r0]
    b5d8:	63230000 			; <UNDEFINED> instruction: 0x63230000
    b5dc:	e901006c 	stmdb	r1, {r2, r3, r5, r6}
    b5e0:	000000ce 	andeq	r0, r0, lr, asr #1
    b5e4:	00004763 	andeq	r4, r0, r3, ror #14
    b5e8:	00027015 	andeq	r7, r2, r5, lsl r0
    b5ec:	ceea0100 	cdpgt	1, 14, cr0, cr10, cr0, {0}
    b5f0:	76000000 	strvc	r0, [r0], -r0
    b5f4:	24000047 	strcs	r0, [r0], #-71	; 0xffffffb9
    b5f8:	eb01006b 	bl	4b7ac <__ccfg+0x2b804>
    b5fc:	000000ce 	andeq	r0, r0, lr, asr #1
    b600:	0031a113 	eorseq	sl, r1, r3, lsl r1
    b604:	ceec0100 	cdpgt	1, 14, cr0, cr12, cr0, {0}
    b608:	15000000 	strne	r0, [r0, #-0]
    b60c:	0000318f 	andeq	r3, r0, pc, lsl #3
    b610:	00ceed01 	sbceq	lr, lr, r1, lsl #26
    b614:	47940000 	ldrmi	r0, [r4, r0]
    b618:	5f150000 	svcpl	0x00150000
    b61c:	01000031 	tsteq	r0, r1, lsr r0
    b620:	0000ceee 	andeq	ip, r0, lr, ror #29
    b624:	0047bd00 	subeq	fp, r7, r0, lsl #26
    b628:	318a1500 	orrcc	r1, sl, r0, lsl #10
    b62c:	ef010000 	svc	0x00010000
    b630:	000000ce 	andeq	r0, r0, lr, asr #1
    b634:	000047dc 	ldrdeq	r4, [r0], -ip
    b638:	00326a15 	eorseq	r6, r2, r5, lsl sl
    b63c:	c8f00100 	ldmgt	r0!, {r8}^
    b640:	20000007 	andcs	r0, r0, r7
    b644:	25000048 	strcs	r0, [r0, #-72]	; 0xffffffb8
    b648:	00003c86 	andeq	r3, r0, r6, lsl #25
    b64c:	00000012 	andeq	r0, r0, r2, lsl r0
    b650:	0000073b 	andeq	r0, r0, fp, lsr r7
    b654:	00321526 	eorseq	r1, r2, r6, lsr #10
    b658:	010a0100 	mrseq	r0, (UNDEF: 26)
    b65c:	000000c3 	andeq	r0, r0, r3, asr #1
    b660:	00004838 	andeq	r4, r0, r8, lsr r8
    b664:	03d42700 	bicseq	r2, r4, #0, 14
    b668:	3cac0000 	stccc	0, cr0, [ip]
    b66c:	00060000 	andeq	r0, r6, r0
    b670:	11010000 	mrsne	r0, (UNDEF: 1)
    b674:	00076801 	andeq	r6, r7, r1, lsl #16
    b678:	03e42800 	mvneq	r2, #0, 16
    b67c:	ac290000 	stcge	0, cr0, [r9], #-0
    b680:	0600003c 			; <UNDEFINED> instruction: 0x0600003c
    b684:	2a000000 	bcs	b68c <__exidx_end+0x675f>
    b688:	000003ef 	andeq	r0, r0, pc, ror #7
    b68c:	0000484b 	andeq	r4, r0, fp, asr #16
    b690:	d4270000 	strtle	r0, [r7], #-0
    b694:	c4000003 	strgt	r0, [r0], #-3
    b698:	0600003c 			; <UNDEFINED> instruction: 0x0600003c
    b69c:	01000000 	mrseq	r0, (UNDEF: 0)
    b6a0:	0795011b 			; <UNDEFINED> instruction: 0x0795011b
    b6a4:	e4280000 	strt	r0, [r8], #-0
    b6a8:	29000003 	stmdbcs	r0, {r0, r1}
    b6ac:	00003cc4 	andeq	r3, r0, r4, asr #25
    b6b0:	00000006 	andeq	r0, r0, r6
    b6b4:	0003ef2a 	andeq	lr, r3, sl, lsr #30
    b6b8:	00485e00 	subeq	r5, r8, r0, lsl #28
    b6bc:	2b000000 	blcs	b6c4 <__exidx_end+0x6797>
    b6c0:	000003d4 	ldrdeq	r0, [r0], -r4
    b6c4:	00003cce 	andeq	r3, r0, lr, asr #25
    b6c8:	000010a0 	andeq	r1, r0, r0, lsr #1
    b6cc:	be011f01 	cdplt	15, 0, cr1, cr1, cr1, {0}
    b6d0:	28000007 	stmdacs	r0, {r0, r1, r2}
    b6d4:	000003e4 	andeq	r0, r0, r4, ror #7
    b6d8:	0010a02c 	andseq	sl, r0, ip, lsr #32
    b6dc:	03ef2a00 	mvneq	r2, #0, 20
    b6e0:	48710000 	ldmdami	r1!, {}^	; <UNPREDICTABLE>
    b6e4:	00000000 	andeq	r0, r0, r0
    b6e8:	003c781b 	eorseq	r7, ip, fp, lsl r8
    b6ec:	00091b00 	andeq	r1, r9, r0, lsl #22
    b6f0:	04050000 	streq	r0, [r5], #-0
    b6f4:	000007ce 	andeq	r0, r0, lr, asr #15
    b6f8:	0000ce2d 	andeq	ip, r0, sp, lsr #28
    b6fc:	30c52000 	sbccc	r2, r5, r0
    b700:	170a0000 	strne	r0, [sl, -r0]
    b704:	003e7801 	eorseq	r7, lr, r1, lsl #16
    b708:	00006000 	andeq	r6, r0, r0
    b70c:	339c0100 	orrscc	r0, ip, #0, 2
    b710:	26000008 	strcs	r0, [r0], -r8
    b714:	00003098 	muleq	r0, r8, r0
    b718:	c301b801 	movwgt	fp, #6145	; 0x1801
    b71c:	84000000 	strhi	r0, [r0], #-0
    b720:	26000048 	strcs	r0, [r0], -r8, asr #32
    b724:	000031b9 			; <UNDEFINED> instruction: 0x000031b9
    b728:	ce01b901 	vmlagt.f16	s22, s2, s2	; <UNPREDICTABLE>
    b72c:	af000000 	svcge	0x00000000
    b730:	26000048 	strcs	r0, [r0], -r8, asr #32
    b734:	00002457 	andeq	r2, r0, r7, asr r4
    b738:	ce01ba01 	vmlagt.f32	s22, s2, s2
    b73c:	c2000000 	andgt	r0, r0, #0
    b740:	26000048 	strcs	r0, [r0], -r8, asr #32
    b744:	0000318f 	andeq	r3, r0, pc, lsl #3
    b748:	ce01bb01 	vmlagt.f64	d11, d1, d1
    b74c:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
    b750:	1b000048 	blne	b878 <__exidx_end+0x694b>
    b754:	00003e86 	andeq	r3, r0, r6, lsl #29
    b758:	0000091b 	andeq	r0, r0, fp, lsl r9
    b75c:	32b62000 	adcscc	r2, r6, #0
    b760:	290a0000 	stmdbcs	sl, {}	; <UNPREDICTABLE>
    b764:	00000001 	andeq	r0, r0, r1
    b768:	00007800 	andeq	r7, r0, r0, lsl #16
    b76c:	8a9c0100 	bhi	fe70bb74 <_estack+0xde706b74>
    b770:	26000008 	strcs	r0, [r0], -r8
    b774:	000031e2 	andeq	r3, r0, r2, ror #3
    b778:	ce01e701 	cdpgt	7, 0, cr14, cr1, cr1, {0}
    b77c:	12000000 	andne	r0, r0, #0
    b780:	26000049 	strcs	r0, [r0], -r9, asr #32
    b784:	00003288 	andeq	r3, r0, r8, lsl #5
    b788:	ce01e801 	cdpgt	8, 0, cr14, cr1, cr1, {0}
    b78c:	25000000 	strcs	r0, [r0, #-0]
    b790:	26000049 	strcs	r0, [r0], -r9, asr #32
    b794:	00002b42 	andeq	r2, r0, r2, asr #22
    b798:	ce01e901 	vmlagt.f16	s28, s2, s2	; <UNPREDICTABLE>
    b79c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    b7a0:	26000049 	strcs	r0, [r0], -r9, asr #32
    b7a4:	00003236 	andeq	r3, r0, r6, lsr r2
    b7a8:	ce01ea01 	vmlagt.f32	s28, s2, s2
    b7ac:	4b000000 	blmi	b7b4 <__exidx_end+0x6887>
    b7b0:	00000049 	andeq	r0, r0, r9, asr #32
    b7b4:	0031372e 	eorseq	r3, r1, lr, lsr #14
    b7b8:	01420a00 	cmpeq	r2, r0, lsl #20
    b7bc:	000000ce 	andeq	r0, r0, lr, asr #1
    b7c0:	00003ed8 	ldrdeq	r3, [r0], -r8
    b7c4:	00000018 	andeq	r0, r0, r8, lsl r0
    b7c8:	e3229c01 			; <UNDEFINED> instruction: 0xe3229c01
    b7cc:	01000032 	tsteq	r0, r2, lsr r0
    b7d0:	00039955 	andeq	r9, r3, r5, asr r9
    b7d4:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
    b7d8:	2f200002 	svccs	0x00200002
    b7dc:	000000ce 	andeq	r0, r0, lr, asr #1
    b7e0:	000008c1 	andeq	r0, r0, r1, asr #17
    b7e4:	0008c130 	andeq	ip, r8, r0, lsr r1
    b7e8:	03000c00 	movweq	r0, #3072	; 0xc00
    b7ec:	21ca0704 	biccs	r0, sl, r4, lsl #14
    b7f0:	1d220000 	stcne	0, cr0, [r2, #-0]
    b7f4:	01000032 	tsteq	r0, r2, lsr r0
    b7f8:	0008d961 	andeq	sp, r8, r1, ror #18
    b7fc:	00030500 	andeq	r0, r3, r0, lsl #10
    b800:	2d000000 	stccs	0, cr0, [r0, #-0]
    b804:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
    b808:	001f2431 	andseq	r2, pc, r1, lsr r4	; <UNPREDICTABLE>
    b80c:	ef990900 	svc	0x00990900
    b810:	08000008 	stmdaeq	r0, {r3}
    b814:	000000d9 	ldrdeq	r0, [r0], -r9
    b818:	22343100 	eorscs	r3, r4, #0, 2
    b81c:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    b820:	00000905 	andeq	r0, r0, r5, lsl #18
    b824:	0000ce08 	andeq	ip, r0, r8, lsl #28
    b828:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    b82c:	32000000 	andcc	r0, r0, #0
    b830:	0000226d 	andeq	r2, r0, sp, ror #4
    b834:	ce011003 	cdpgt	0, 0, cr1, cr1, cr3, {0}
    b838:	1b000000 	blne	b840 <__exidx_end+0x6913>
    b83c:	08000009 	stmdaeq	r0, {r0, r3}
    b840:	000000ce 	andeq	r0, r0, lr, asr #1
    b844:	20873300 	addcs	r3, r7, r0, lsl #6
    b848:	aa0b0000 	bge	2cb850 <__ccfg+0x2ab8a8>
    b84c:	000000c3 	andeq	r0, r0, r3, asr #1
    b850:	0003cc00 	andeq	ip, r3, r0, lsl #24
    b854:	e6000400 	str	r0, [r0], -r0, lsl #8
    b858:	04000030 	streq	r0, [r0], #-48	; 0xffffffd0
    b85c:	001f5601 	andseq	r5, pc, r1, lsl #12
    b860:	35ca0100 	strbcc	r0, [sl, #256]	; 0x100
    b864:	201d0000 	andscs	r0, sp, r0
    b868:	11180000 	tstne	r8, r0
    b86c:	00000000 	andeq	r0, r0, r0
    b870:	76750000 	ldrbtvc	r0, [r5], -r0
    b874:	01020000 	mrseq	r0, (UNDEF: 2)
    b878:	00029d06 	andeq	r9, r2, r6, lsl #26
    b87c:	08010200 	stmdaeq	r1, {r9}
    b880:	0000029b 	muleq	r0, fp, r2
    b884:	b9050202 	stmdblt	r5, {r1, r9}
    b888:	02000002 	andeq	r0, r0, #2
    b88c:	01ca0702 	biceq	r0, sl, r2, lsl #14
    b890:	04020000 	streq	r0, [r2], #-0
    b894:	00005c05 	andeq	r5, r0, r5, lsl #24
    b898:	1ec90300 	cdpne	3, 12, cr0, cr9, cr0, {0}
    b89c:	41030000 	mrsmi	r0, (UNDEF: 3)
    b8a0:	00000053 	andeq	r0, r0, r3, asr r0
    b8a4:	45070402 	strmi	r0, [r7, #-1026]	; 0xfffffbfe
    b8a8:	02000000 	andeq	r0, r0, #0
    b8ac:	00570508 	subseq	r0, r7, r8, lsl #10
    b8b0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    b8b4:	00004007 	andeq	r4, r0, r7
    b8b8:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    b8bc:	00746e69 	rsbseq	r6, r4, r9, ror #28
    b8c0:	4a070402 	bmi	1cc8d0 <__ccfg+0x1ac928>
    b8c4:	03000000 	movweq	r0, #0
    b8c8:	00001ecb 	andeq	r1, r0, fp, asr #29
    b8cc:	00482004 	subeq	r2, r8, r4
    b8d0:	01050000 	mrseq	r0, (UNDEF: 5)
    b8d4:	00a26302 	adceq	r6, r2, r2, lsl #6
    b8d8:	04060000 	streq	r0, [r6], #-0
    b8dc:	00000035 	andeq	r0, r0, r5, lsr r0
    b8e0:	00354406 	eorseq	r4, r5, r6, lsl #8
    b8e4:	b4060200 	strlt	r0, [r6], #-512	; 0xfffffe00
    b8e8:	04000034 	streq	r0, [r0], #-52	; 0xffffffcc
    b8ec:	0032f406 	eorseq	pc, r2, r6, lsl #8
    b8f0:	03000800 	movweq	r0, #2048	; 0x800
    b8f4:	000034a0 	andeq	r3, r0, r0, lsr #9
    b8f8:	00816802 	addeq	r6, r1, r2, lsl #16
    b8fc:	01050000 	mrseq	r0, (UNDEF: 5)
    b900:	00daa502 	sbcseq	sl, sl, r2, lsl #10
    b904:	ba060000 	blt	18b90c <__ccfg+0x16b964>
    b908:	7f000035 	svcvc	0x00000035
    b90c:	00330c06 	eorseq	r0, r3, r6, lsl #24
    b910:	6b060000 	blvs	18b918 <__ccfg+0x16b970>
    b914:	01000036 	tsteq	r0, r6, lsr r0
    b918:	0034f806 	eorseq	pc, r4, r6, lsl #16
    b91c:	5d060200 	sfmpl	f0, 4, [r6, #-0]
    b920:	03000036 	movweq	r0, #54	; 0x36
    b924:	0033f106 	eorseq	pc, r3, r6, lsl #2
    b928:	03000400 	movweq	r0, #1024	; 0x400
    b92c:	00003677 	andeq	r3, r0, r7, ror r6
    b930:	00adac02 	adceq	sl, sp, r2, lsl #24
    b934:	01070000 	mrseq	r0, (UNDEF: 7)
    b938:	25013d02 	strcs	r3, [r1, #-3330]	; 0xfffff2fe
    b93c:	06000001 	streq	r0, [r0], -r1
    b940:	000034ce 	andeq	r3, r0, lr, asr #9
    b944:	33bc067f 			; <UNDEFINED> instruction: 0x33bc067f
    b948:	06000000 	streq	r0, [r0], -r0
    b94c:	00003418 	andeq	r3, r0, r8, lsl r4
    b950:	34540601 	ldrbcc	r0, [r4], #-1537	; 0xfffff9ff
    b954:	06020000 	streq	r0, [r2], -r0
    b958:	0000359f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
    b95c:	33180603 	tstcc	r8, #3145728	; 0x300000
    b960:	06040000 	streq	r0, [r4], -r0
    b964:	000033e0 	andeq	r3, r0, r0, ror #7
    b968:	35790605 	ldrbcc	r0, [r9, #-1541]!	; 0xfffff9fb
    b96c:	06060000 	streq	r0, [r6], -r0
    b970:	0000358c 	andeq	r3, r0, ip, lsl #11
    b974:	a4080007 	strge	r0, [r8], #-7
    b978:	02000033 	andeq	r0, r0, #51	; 0x33
    b97c:	00e50147 	rsceq	r0, r5, r7, asr #2
    b980:	01070000 	mrseq	r0, (UNDEF: 7)
    b984:	5f015902 	svcpl	0x00015902
    b988:	06000001 	streq	r0, [r0], -r1
    b98c:	00003445 	andeq	r3, r0, r5, asr #8
    b990:	346e067f 	strbtcc	r0, [lr], #-1663	; 0xfffff981
    b994:	06000000 	streq	r0, [r0], -r0
    b998:	000034ea 	andeq	r3, r0, sl, ror #9
    b99c:	33310601 	teqcc	r1, #1048576	; 0x100000
    b9a0:	06020000 	streq	r0, [r2], -r0
    b9a4:	00003554 	andeq	r3, r0, r4, asr r5
    b9a8:	34070603 	strcc	r0, [r7], #-1539	; 0xfffff9fd
    b9ac:	00040000 	andeq	r0, r4, r0
    b9b0:	0033cd08 	eorseq	ip, r3, r8, lsl #26
    b9b4:	01600200 	cmneq	r0, r0, lsl #4
    b9b8:	00000131 	andeq	r0, r0, r1, lsr r1
    b9bc:	b8020107 	stmdalt	r2, {r0, r1, r2, r8}
    b9c0:	00019901 	andeq	r9, r1, r1, lsl #18
    b9c4:	34840600 	strcc	r0, [r4], #1536	; 0x600
    b9c8:	067f0000 	ldrbteq	r0, [pc], -r0
    b9cc:	000035b0 			; <UNDEFINED> instruction: 0x000035b0
    b9d0:	3515060a 	ldrcc	r0, [r5, #-1546]	; 0xfffff9f6
    b9d4:	06140000 	ldreq	r0, [r4], -r0
    b9d8:	0000353a 	andeq	r3, r0, sl, lsr r5
    b9dc:	34e00615 	strbtcc	r0, [r0], #1557	; 0x615
    b9e0:	06160000 	ldreq	r0, [r6], -r0
    b9e4:	00003566 	andeq	r3, r0, r6, ror #10
    b9e8:	af080017 	svcge	0x00080017
    b9ec:	02000033 	andeq	r0, r0, #51	; 0x33
    b9f0:	016b01bf 	strheq	r0, [fp, #-31]!	; 0xffffffe1
    b9f4:	f6090000 			; <UNDEFINED> instruction: 0xf6090000
    b9f8:	02000035 	andeq	r0, r0, #53	; 0x35
    b9fc:	00760107 	rsbseq	r0, r6, r7, lsl #2
    ba00:	0a030000 	beq	cba08 <__ccfg+0xaba60>
    ba04:	00003343 	andeq	r3, r0, r3, asr #6
    ba08:	5f016a02 	svcpl	0x00016a02
    ba0c:	01000001 	tsteq	r0, r1
    ba10:	000001da 	ldrdeq	r0, [r0], -sl
    ba14:	00347c0b 	eorseq	r7, r4, fp, lsl #24
    ba18:	5f680100 	svcpl	0x00680100
    ba1c:	0b000001 	bleq	ba28 <__exidx_end+0x6afb>
    ba20:	00003329 	andeq	r3, r0, r9, lsr #6
    ba24:	00766901 	rsbseq	r6, r6, r1, lsl #18
    ba28:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    ba2c:	000036a4 	andeq	r3, r0, r4, lsr #13
    ba30:	76013202 	strvc	r3, [r1], -r2, lsl #4
    ba34:	03000000 	movweq	r0, #0
    ba38:	0036360c 	eorseq	r3, r6, ip, lsl #12
    ba3c:	a2720200 	rsbsge	r0, r2, #0, 4
    ba40:	00000000 	andeq	r0, r0, r0
    ba44:	10000000 	andne	r0, r0, r0
    ba48:	01000000 	mrseq	r0, (UNDEF: 0)
    ba4c:	33600d9c 	cmncc	r0, #156, 26	; 0x2700
    ba50:	b6020000 	strlt	r0, [r2], -r0
    ba54:	000000da 	ldrdeq	r0, [r0], -sl
    ba58:	00000000 	andeq	r0, r0, r0
    ba5c:	00000018 	andeq	r0, r0, r8, lsl r0
    ba60:	02259c01 	eoreq	r9, r5, #256	; 0x100
    ba64:	9b0e0000 	blls	38ba6c <__ccfg+0x36bac4>
    ba68:	01000033 	tsteq	r0, r3, lsr r0
    ba6c:	0000da52 	andeq	sp, r0, r2, asr sl
    ba70:	00495e00 	subeq	r5, r9, r0, lsl #28
    ba74:	b20f0000 	andlt	r0, pc, #0
    ba78:	f0000001 			; <UNDEFINED> instruction: 0xf0000001
    ba7c:	4c00003e 	stcmi	0, cr0, [r0], {62}	; 0x3e
    ba80:	01000000 	mrseq	r0, (UNDEF: 0)
    ba84:	00026e9c 	muleq	r2, ip, lr
    ba88:	01c31000 	biceq	r1, r3, r0
    ba8c:	49860000 	stmibmi	r6, {}	; <UNPREDICTABLE>
    ba90:	ce100000 	cdpgt	0, 1, cr0, cr0, cr0, {0}
    ba94:	a6000001 	strge	r0, [r0], -r1
    ba98:	11000049 	tstne	r0, r9, asr #32
    ba9c:	00003f00 	andeq	r3, r0, r0, lsl #30
    baa0:	0000000e 	andeq	r0, r0, lr
    baa4:	0001c312 	andeq	ip, r1, r2, lsl r3
    baa8:	01ce1200 	biceq	r1, lr, r0, lsl #4
    baac:	a5130000 	ldrge	r0, [r3, #-0]
    bab0:	00000001 	andeq	r0, r0, r1
    bab4:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    bab8:	01000000 	mrseq	r0, (UNDEF: 0)
    babc:	14000070 	strne	r0, [r0], #-112	; 0xffffff90
    bac0:	0000351f 	andeq	r3, r0, pc, lsl r5
    bac4:	25015102 	strcs	r5, [r1, #-258]	; 0xfffffefe
    bac8:	00000001 	andeq	r0, r0, r1
    bacc:	30000000 	andcc	r0, r0, r0
    bad0:	01000000 	mrseq	r0, (UNDEF: 0)
    bad4:	0002ca9c 	muleq	r2, ip, sl
    bad8:	35700e00 	ldrbcc	r0, [r0, #-3584]!	; 0xfffff200
    badc:	85010000 	strhi	r0, [r1, #-0]
    bae0:	00000125 	andeq	r0, r0, r5, lsr #2
    bae4:	000049da 	ldrdeq	r4, [r0], -sl
    bae8:	0035ea0b 	eorseq	lr, r5, fp, lsl #20
    baec:	76860100 	strvc	r0, [r6], r0, lsl #2
    baf0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    baf4:	00003492 	muleq	r0, r2, r4
    baf8:	00768701 	rsbseq	r8, r6, r1, lsl #14
    bafc:	49fa0000 	ldmibmi	sl!, {}^	; <UNPREDICTABLE>
    bb00:	da130000 	ble	4cbb08 <__ccfg+0x4abb60>
    bb04:	00000001 	andeq	r0, r0, r1
    bb08:	04000000 	streq	r0, [r0], #-0
    bb0c:	01000000 	mrseq	r0, (UNDEF: 0)
    bb10:	00001586 	andeq	r1, r0, r6, lsl #11
    bb14:	01b20000 			; <UNDEFINED> instruction: 0x01b20000
    bb18:	16000000 	strne	r0, [r0], -r0
    bb1c:	00003614 	andeq	r3, r0, r4, lsl r6
    bb20:	76011902 	strvc	r1, [r1], -r2, lsl #18
    bb24:	03000000 	movweq	r0, #0
    bb28:	000002e8 	andeq	r0, r0, r8, ror #5
    bb2c:	0033fe17 	eorseq	pc, r3, r7, lsl lr	; <UNPREDICTABLE>
    bb30:	011b0200 	tsteq	fp, r0, lsl #4
    bb34:	00000076 	andeq	r0, r0, r6, ror r0
    bb38:	337e1400 	cmncc	lr, #0, 8
    bb3c:	c9020000 	stmdbgt	r2, {}	; <UNPREDICTABLE>
    bb40:	00019901 	andeq	r9, r1, r1, lsl #18
    bb44:	003f3c00 	eorseq	r3, pc, r0, lsl #24
    bb48:	00006c00 	andeq	r6, r0, r0, lsl #24
    bb4c:	659c0100 	ldrvs	r0, [ip, #256]	; 0x100
    bb50:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    bb54:	000033da 	ldrdeq	r3, [r0], -sl
    bb58:	0199a801 	orrseq	sl, r9, r1, lsl #16
    bb5c:	4a0d0000 	bmi	34bb64 <__ccfg+0x32bbbc>
    bb60:	650b0000 	strvs	r0, [fp, #-0]
    bb64:	01000034 	tsteq	r0, r4, lsr r0
    bb68:	000076a9 	andeq	r7, r0, r9, lsr #13
    bb6c:	362b1800 	strtcc	r1, [fp], -r0, lsl #16
    bb70:	aa010000 	bge	4bb78 <__ccfg+0x2bbd0>
    bb74:	00000076 	andeq	r0, r0, r6, ror r0
    bb78:	a5195401 	ldrge	r5, [r9, #-1025]	; 0xfffffbff
    bb7c:	3e000001 	cdpcc	0, 0, cr0, cr0, cr1, {0}
    bb80:	e800003f 	stmda	r0, {r0, r1, r2, r3, r4, r5}
    bb84:	01000010 	tsteq	r0, r0, lsl r0
    bb88:	02ca1aa9 	sbceq	r1, sl, #692224	; 0xa9000
    bb8c:	3f420000 	svccc	0x00420000
    bb90:	11000000 	mrsne	r0, (UNDEF: 0)
    bb94:	aa010000 	bge	4bb9c <__ccfg+0x2bbf4>
    bb98:	0000035b 	andeq	r0, r0, fp, asr r3
    bb9c:	0011001b 	andseq	r0, r1, fp, lsl r0
    bba0:	02db1000 	sbcseq	r1, fp, #0
    bba4:	4a6a0000 	bmi	1a8bbac <__ccfg+0x1a6bc04>
    bba8:	00000000 	andeq	r0, r0, r0
    bbac:	003f5615 	eorseq	r5, pc, r5, lsl r6	; <UNPREDICTABLE>
    bbb0:	0001b200 	andeq	fp, r1, r0, lsl #4
    bbb4:	29090000 	stmdbcs	r9, {}	; <UNPREDICTABLE>
    bbb8:	02000034 	andeq	r0, r0, #52	; 0x34
    bbbc:	03720183 	cmneq	r2, #-1073741792	; 0xc0000020
    bbc0:	02030000 	andeq	r0, r3, #0
    bbc4:	0bc20201 	bleq	ff08c3d0 <_estack+0xdf0873d0>
    bbc8:	85090000 	strhi	r0, [r9, #-0]
    bbcc:	02000036 	andeq	r0, r0, #54	; 0x36
    bbd0:	037201f0 	cmneq	r2, #240, 2	; 0x3c
    bbd4:	1c030000 	stcne	0, cr0, [r3], {-0}
    bbd8:	00002b8b 	andeq	r2, r0, fp, lsl #23
    bbdc:	a8024302 	stmdage	r2, {r1, r8, r9, lr}
    bbe0:	1600003f 			; <UNDEFINED> instruction: 0x1600003f
    bbe4:	01000000 	mrseq	r0, (UNDEF: 0)
    bbe8:	03651d9c 	cmneq	r5, #156, 26	; 0x2700
    bbec:	3faa0000 	svccc	0x00aa0000
    bbf0:	00040000 	andeq	r0, r4, r0
    bbf4:	e2010000 	and	r0, r1, #0
    bbf8:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
    bbfc:	003fae15 	eorseq	sl, pc, r5, lsl lr	; <UNPREDICTABLE>
    bc00:	0001b200 	andeq	fp, r1, r0, lsl #4
    bc04:	791e0000 	ldmdbvc	lr, {}	; <UNPREDICTABLE>
    bc08:	b2000003 	andlt	r0, r0, #3
    bc0c:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    bc10:	01000000 	mrseq	r0, (UNDEF: 0)
    bc14:	3fb615e3 	svccc	0x00b615e3
    bc18:	02e80000 	rsceq	r0, r8, #0
    bc1c:	00000000 	andeq	r0, r0, r0
    bc20:	0005a700 	andeq	sl, r5, r0, lsl #14
    bc24:	b4000400 	strlt	r0, [r0], #-1024	; 0xfffffc00
    bc28:	04000032 	streq	r0, [r0], #-50	; 0xffffffce
    bc2c:	001f5601 	andseq	r5, pc, r1, lsl #12
    bc30:	377c0100 	ldrbcc	r0, [ip, -r0, lsl #2]!
    bc34:	201d0000 	andscs	r0, sp, r0
    bc38:	11500000 	cmpne	r0, r0
    bc3c:	00000000 	andeq	r0, r0, r0
    bc40:	78a40000 	stmiavc	r4!, {}	; <UNPREDICTABLE>
    bc44:	01020000 	mrseq	r0, (UNDEF: 2)
    bc48:	00029d06 	andeq	r9, r2, r6, lsl #26
    bc4c:	1f310300 	svcne	0x00310300
    bc50:	1d030000 	stcne	0, cr0, [r3, #-0]
    bc54:	00000037 	andeq	r0, r0, r7, lsr r0
    bc58:	9b080102 	blls	20c068 <__ccfg+0x1ec0c0>
    bc5c:	02000002 	andeq	r0, r0, #2
    bc60:	02b90502 	adcseq	r0, r9, #8388608	; 0x800000
    bc64:	27030000 	strcs	r0, [r3, -r0]
    bc68:	03000023 	movweq	r0, #35	; 0x23
    bc6c:	0000502b 	andeq	r5, r0, fp, lsr #32
    bc70:	07020200 	streq	r0, [r2, -r0, lsl #4]
    bc74:	000001ca 	andeq	r0, r0, sl, asr #3
    bc78:	5c050402 	cfstrspl	mvf0, [r5], {2}
    bc7c:	03000000 	movweq	r0, #0
    bc80:	00001ec9 	andeq	r1, r0, r9, asr #29
    bc84:	00694103 	rsbeq	r4, r9, r3, lsl #2
    bc88:	04020000 	streq	r0, [r2], #-0
    bc8c:	00004507 	andeq	r4, r0, r7, lsl #10
    bc90:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    bc94:	00000057 	andeq	r0, r0, r7, asr r0
    bc98:	40070802 	andmi	r0, r7, r2, lsl #16
    bc9c:	04000000 	streq	r0, [r0], #-0
    bca0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    bca4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    bca8:	00004a07 	andeq	r4, r0, r7, lsl #20
    bcac:	1f330300 	svcne	0x00330300
    bcb0:	14040000 	strne	r0, [r4], #-0
    bcb4:	0000002c 	andeq	r0, r0, ip, lsr #32
    bcb8:	00232903 	eoreq	r2, r3, r3, lsl #18
    bcbc:	451a0400 	ldrmi	r0, [sl, #-1024]	; 0xfffffc00
    bcc0:	03000000 	movweq	r0, #0
    bcc4:	00001ecb 	andeq	r1, r0, fp, asr #29
    bcc8:	005e2004 	subseq	r2, lr, r4
    bccc:	f5050000 			; <UNDEFINED> instruction: 0xf5050000
    bcd0:	01000036 	tsteq	r0, r6, lsr r0
    bcd4:	00e60389 	rsceq	r0, r6, r9, lsl #7
    bcd8:	d7060000 	strle	r0, [r6, -r0]
    bcdc:	01000036 	tsteq	r0, r6, lsr r0
    bce0:	0000a289 	andeq	sl, r0, r9, lsl #5
    bce4:	37480600 	strbcc	r0, [r8, -r0, lsl #12]
    bce8:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    bcec:	000000a2 	andeq	r0, r0, r2, lsr #1
    bcf0:	0037a306 	eorseq	sl, r7, r6, lsl #6
    bcf4:	a2890100 	addge	r0, r9, #0, 2
    bcf8:	07000000 	streq	r0, [r0, -r0]
    bcfc:	00001ed4 	ldrdeq	r1, [r0], -r4
    bd00:	00e68c01 	rsceq	r8, r6, r1, lsl #24
    bd04:	02000000 	andeq	r0, r0, #0
    bd08:	0bc20201 	bleq	ff08c514 <_estack+0xdf087514>
    bd0c:	56080000 	strpl	r0, [r8], -r0
    bd10:	01000037 	tsteq	r0, r7, lsr r0
    bd14:	0000a2a9 	andeq	sl, r0, r9, lsr #5
    bd18:	012a0300 			; <UNDEFINED> instruction: 0x012a0300
    bd1c:	d7060000 	strle	r0, [r6, -r0]
    bd20:	01000036 	tsteq	r0, r6, lsr r0
    bd24:	0000a2a9 	andeq	sl, r0, r9, lsr #5
    bd28:	37a30600 	strcc	r0, [r3, r0, lsl #12]!
    bd2c:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    bd30:	000000a2 	andeq	r0, r0, r2, lsr #1
    bd34:	0036f007 	eorseq	pc, r6, r7
    bd38:	a2ab0100 	adcge	r0, fp, #0, 2
    bd3c:	07000000 	streq	r0, [r0, -r0]
    bd40:	00001ed4 	ldrdeq	r1, [r0], -r4
    bd44:	00e6ad01 	rsceq	sl, r6, r1, lsl #26
    bd48:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    bd4c:	000000ad 	andeq	r0, r0, sp, lsr #1
    bd50:	00003fc0 	andeq	r3, r0, r0, asr #31
    bd54:	00000028 	andeq	r0, r0, r8, lsr #32
    bd58:	01719c01 	cmneq	r1, r1, lsl #24
    bd5c:	b90a0000 	stmdblt	sl, {}	; <UNPREDICTABLE>
    bd60:	7d000000 	stcvc	0, cr0, [r0, #-0]
    bd64:	0a00004a 	beq	be94 <__exidx_end+0x6f67>
    bd68:	000000c4 	andeq	r0, r0, r4, asr #1
    bd6c:	00004ac2 	andeq	r4, r0, r2, asr #21
    bd70:	0000da0b 	andeq	sp, r0, fp, lsl #20
    bd74:	004b0700 	subeq	r0, fp, r0, lsl #14
    bd78:	00cf0c00 	sbceq	r0, pc, r0, lsl #24
    bd7c:	0d040000 	stceq	0, cr0, [r4, #-0]
    bd80:	00003fca 	andeq	r3, r0, sl, asr #31
    bd84:	00000594 	muleq	r0, r4, r5
    bd88:	003fe20e 	eorseq	lr, pc, lr, lsl #4
    bd8c:	00059f00 	andeq	r9, r5, r0, lsl #30
    bd90:	a50f0000 	strge	r0, [pc, #-0]	; bd98 <__exidx_end+0x6e6b>
    bd94:	0100002d 	tsteq	r0, sp, lsr #32
    bd98:	3fe801ca 	svccc	0x00e801ca
    bd9c:	00080000 	andeq	r0, r8, r0
    bda0:	9c010000 	stcls	0, cr0, [r1], {-0}
    bda4:	000001d1 	ldrdeq	r0, [r0], -r1
    bda8:	0006c110 	andeq	ip, r6, r0, lsl r1
    bdac:	a2420200 	subge	r0, r2, #0, 4
    bdb0:	2d000000 	stccs	0, cr0, [r0, #-0]
    bdb4:	1000004b 	andne	r0, r0, fp, asr #32
    bdb8:	000036b7 			; <UNDEFINED> instruction: 0x000036b7
    bdbc:	00a24202 	adceq	r4, r2, r2, lsl #4
    bdc0:	4b4e0000 	blmi	138bdc8 <__ccfg+0x136be20>
    bdc4:	4e100000 	cdpmi	0, 1, cr0, cr0, cr0, {0}
    bdc8:	02000037 	andeq	r0, r0, #55	; 0x37
    bdcc:	0000a243 	andeq	sl, r0, r3, asr #4
    bdd0:	004b6f00 	subeq	r6, fp, r0, lsl #30
    bdd4:	3ff01100 	svccc	0x00f01100
    bdd8:	012a0000 			; <UNDEFINED> instruction: 0x012a0000
    bddc:	01120000 	tsteq	r2, r0
    bde0:	01f30351 	mvnseq	r0, r1, asr r3
    bde4:	50011252 	andpl	r1, r1, r2, asr r2
    bde8:	5001f307 	andpl	pc, r1, r7, lsl #6
    bdec:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    bdf0:	680f0000 	stmdavs	pc, {}	; <UNPREDICTABLE>
    bdf4:	01000037 	tsteq	r0, r7, lsr r0
    bdf8:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    bdfc:	00220000 	eoreq	r0, r2, r0
    be00:	9c010000 	stcls	0, cr0, [r1], {-0}
    be04:	000002ea 	andeq	r0, r0, sl, ror #5
    be08:	0006c110 	andeq	ip, r6, r0, lsl r1
    be0c:	a2570200 	subsge	r0, r7, #0, 4
    be10:	90000000 	andls	r0, r0, r0
    be14:	1000004b 	andne	r0, r0, fp, asr #32
    be18:	000036b7 			; <UNDEFINED> instruction: 0x000036b7
    be1c:	00a25702 	adceq	r5, r2, r2, lsl #14
    be20:	4bb10000 	blmi	fec4be28 <_estack+0xdec46e28>
    be24:	5b100000 	blpl	40be2c <__ccfg+0x3ebe84>
    be28:	02000017 	andeq	r0, r0, #23
    be2c:	0000a258 	andeq	sl, r0, r8, asr r2
    be30:	004bd200 	subeq	sp, fp, r0, lsl #4
    be34:	37111000 	ldrcc	r1, [r1, -r0]
    be38:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
    be3c:	000000a2 	andeq	r0, r0, r2, lsr #1
    be40:	00004c1d 	andeq	r4, r0, sp, lsl ip
    be44:	00379713 	eorseq	r9, r7, r3, lsl r7
    be48:	a25a0200 	subsge	r0, sl, #0, 4
    be4c:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    be50:	1300004c 	movwne	r0, #76	; 0x4c
    be54:	0000371c 	andeq	r3, r0, ip, lsl r7
    be58:	00a25b02 	adceq	r5, r2, r2, lsl #22
    be5c:	4cd20000 	ldclmi	0, cr0, [r2], {0}
    be60:	00110000 	andseq	r0, r1, r0
    be64:	2a000000 	bcs	be6c <__exidx_end+0x6f3f>
    be68:	12000001 	andne	r0, r0, #1
    be6c:	f3455101 	vrhadd.u8	d21, d5, d1
    be70:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    be74:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    be78:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    be7c:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    be80:	40131600 	andsmi	r1, r3, r0, lsl #12
    be84:	01f33024 	mvnseq	r3, r4, lsr #32
    be88:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    be8c:	01f35201 	mvnseq	r5, r1, lsl #4
    be90:	30254052 	eorcc	r4, r5, r2, asr r0
    be94:	0001282e 	andeq	r2, r1, lr, lsr #16
    be98:	01f31316 	mvnseq	r1, r6, lsl r3
    be9c:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    bea0:	2e305301 	cdpcs	3, 3, cr5, cr0, cr1, {0}
    bea4:	16000128 	strne	r0, [r0], -r8, lsr #2
    bea8:	5301f313 	movwpl	pc, #4883	; 0x1313	; <UNPREDICTABLE>
    beac:	01282930 			; <UNDEFINED> instruction: 0x01282930
    beb0:	21131600 	tstcs	r3, r0, lsl #12
    beb4:	51500112 	cmppl	r0, r2, lsl r1
    beb8:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    bebc:	5001f324 	andpl	pc, r1, r4, lsr #6
    bec0:	04802322 	streq	r2, [r0], #802	; 0x322
    bec4:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    bec8:	5001f324 	andpl	pc, r1, r4, lsr #6
    becc:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
    bed0:	29302540 	ldmdbcs	r0!, {r6, r8, sl, sp}
    bed4:	16000128 	strne	r0, [r0], -r8, lsr #2
    bed8:	04842313 	streq	r2, [r4], #787	; 0x313
    bedc:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    bee0:	5001f324 	andpl	pc, r1, r4, lsr #6
    bee4:	04802322 	streq	r2, [r0], #802	; 0x322
    bee8:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    beec:	5001f324 	andpl	pc, r1, r4, lsr #6
    bef0:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
    bef4:	29302540 	ldmdbcs	r0!, {r6, r8, sl, sp}
    bef8:	16000128 	strne	r0, [r0], -r8, lsr #2
    befc:	5201f313 	andpl	pc, r1, #1275068416	; 0x4c000000
    bf00:	2e302540 	cfneg32cs	mvfx2, mvfx0
    bf04:	16000128 	strne	r0, [r0], -r8, lsr #2
    bf08:	0f000013 	svceq	0x00000013
    bf0c:	0000372f 	andeq	r3, r0, pc, lsr #14
    bf10:	0001f601 	andeq	pc, r1, r1, lsl #12
    bf14:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    bf18:	01000000 	mrseq	r0, (UNDEF: 0)
    bf1c:	00041f9c 	muleq	r4, ip, pc	; <UNPREDICTABLE>
    bf20:	06c11000 	strbeq	r1, [r1], r0
    bf24:	83020000 	movwhi	r0, #8192	; 0x2000
    bf28:	000000a2 	andeq	r0, r0, r2, lsr #1
    bf2c:	00004d1e 	andeq	r4, r0, lr, lsl sp
    bf30:	0036b710 	eorseq	fp, r6, r0, lsl r7
    bf34:	a2830200 	addge	r0, r3, #0, 4
    bf38:	3f000000 	svccc	0x00000000
    bf3c:	1000004d 	andne	r0, r0, sp, asr #32
    bf40:	0000175b 	andeq	r1, r0, fp, asr r7
    bf44:	00a28402 	adceq	r8, r2, r2, lsl #8
    bf48:	4d600000 	stclmi	0, cr0, [r0, #-0]
    bf4c:	25100000 	ldrcs	r0, [r0, #-0]
    bf50:	02000037 	andeq	r0, r0, #55	; 0x37
    bf54:	0000a284 	andeq	sl, r0, r4, lsl #5
    bf58:	004db100 	subeq	fp, sp, r0, lsl #2
    bf5c:	371c1000 	ldrcc	r1, [ip, -r0]
    bf60:	85020000 	strhi	r0, [r2, #-0]
    bf64:	00000097 	muleq	r0, r7, r0
    bf68:	00004e02 	andeq	r4, r0, r2, lsl #28
    bf6c:	00379713 	eorseq	r9, r7, r3, lsl r7
    bf70:	a2870200 	addge	r0, r7, #0, 4
    bf74:	22000000 	andcs	r0, r0, #0
    bf78:	1300004e 	movwne	r0, #78	; 0x4e
    bf7c:	00003711 	andeq	r3, r0, r1, lsl r7
    bf80:	00a28802 	adceq	r8, r2, r2, lsl #16
    bf84:	4ec80000 	cdpmi	0, 12, cr0, cr8, cr0, {0}
    bf88:	00110000 	andseq	r0, r1, r0
    bf8c:	2a000000 	bcs	bf94 <__exidx_end+0x7067>
    bf90:	12000001 	andne	r0, r0, #1
    bf94:	f3405101 	vrhadd.u8	d21, d0, d1
    bf98:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    bf9c:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    bfa0:	4b405301 	blmi	1020bac <__ccfg+0x1000c04>
    bfa4:	0f0c2224 	svceq	0x000c2224
    bfa8:	2b800000 	blcs	fe00bfb0 <_estack+0xde006fb0>
    bfac:	16000128 	strne	r0, [r0], -r8, lsr #2
    bfb0:	7d244013 	stcvc	0, cr4, [r4, #-76]!	; 0xffffffb4
    bfb4:	0a029400 	beq	b0fbc <__ccfg+0x91014>
    bfb8:	f31affff 	vmaxnm.f16	<illegal reg q7.5>, q13, <illegal reg q15.5>
    bfbc:	1c405301 	mcrrne	3, 0, r5, r0, cr1
    bfc0:	f35301f3 	vbsl	q8, <illegal reg q9.5>, <illegal reg q9.5>
    bfc4:	4b405301 	blmi	1020bd0 <__ccfg+0x1000c28>
    bfc8:	0f0c2224 	svceq	0x000c2224
    bfcc:	2b800000 	blcs	fe00bfd4 <_estack+0xde006fd4>
    bfd0:	16000128 	strne	r0, [r0], -r8, lsr #2
    bfd4:	12212413 	eorne	r2, r1, #318767104	; 0x13000000
    bfd8:	f3635001 	vhadd.u32	d21, d3, d1
    bfdc:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    bfe0:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    bfe4:	f3048023 	vhadd.u8	d8, d4, d19
    bfe8:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    bfec:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    bff0:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    bff4:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    bff8:	8000000f 	andhi	r0, r0, pc
    bffc:	0001282c 	andeq	r2, r1, ip, lsr #16
    c000:	84231316 	strthi	r1, [r3], #-790	; 0xfffffcea
    c004:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    c008:	01f32431 	mvnseq	r2, r1, lsr r4
    c00c:	80232250 	eorhi	r2, r3, r0, asr r2
    c010:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    c014:	01f32431 	mvnseq	r2, r1, lsr r4
    c018:	01f32250 	mvnseq	r2, r0, asr r2
    c01c:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    c020:	000f0c22 	andeq	r0, pc, r2, lsr #24
    c024:	282c8000 	stmdacs	ip!, {pc}
    c028:	13160001 	tstne	r6, #1
    c02c:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    c030:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    c034:	8000000f 	andhi	r0, r0, pc
    c038:	0001282b 	andeq	r2, r1, fp, lsr #16
    c03c:	00001316 	andeq	r1, r0, r6, lsl r3
    c040:	0036dd14 	eorseq	sp, r6, r4, lsl sp
    c044:	02080100 	andeq	r0, r8, #0, 2
    c048:	00000097 	muleq	r0, r7, r0
    c04c:	00000000 	andeq	r0, r0, r0
    c050:	00000034 	andeq	r0, r0, r4, lsr r0
    c054:	04d29c01 	ldrbeq	r9, [r2], #3073	; 0xc01
    c058:	c1100000 	tstgt	r0, r0
    c05c:	02000006 	andeq	r0, r0, #6
    c060:	0000a2af 	andeq	sl, r0, pc, lsr #5
    c064:	004f2800 	subeq	r2, pc, r0, lsl #16
    c068:	36b71000 	ldrtcc	r1, [r7], r0
    c06c:	af020000 	svcge	0x00020000
    c070:	000000a2 	andeq	r0, r0, r2, lsr #1
    c074:	00004f49 	andeq	r4, r0, r9, asr #30
    c078:	00175b10 	andseq	r5, r7, r0, lsl fp
    c07c:	a2af0200 	adcge	r0, pc, #0, 4
    c080:	6a000000 	bvs	c088 <__exidx_end+0x715b>
    c084:	1300004f 	movwne	r0, #79	; 0x4f
    c088:	00003797 	muleq	r0, r7, r7
    c08c:	00a2b102 	adceq	fp, r2, r2, lsl #2
    c090:	4fa70000 	svcmi	0x00a70000
    c094:	08130000 	ldmdaeq	r3, {}	; <UNPREDICTABLE>
    c098:	02000037 	andeq	r0, r0, #55	; 0x37
    c09c:	000097b2 			; <UNDEFINED> instruction: 0x000097b2
    c0a0:	004fe100 	subeq	lr, pc, r0, lsl #2
    c0a4:	00ed1500 	rsceq	r1, sp, r0, lsl #10
    c0a8:	00000000 	andeq	r0, r0, r0
    c0ac:	001a0000 	andseq	r0, sl, r0
    c0b0:	ca020000 	bgt	8c0b8 <__ccfg+0x6c110>
    c0b4:	0001080c 	andeq	r0, r1, ip, lsl #16
    c0b8:	fd0a0200 	stc2	2, cr0, [sl, #-0]
    c0bc:	f9000000 			; <UNDEFINED> instruction: 0xf9000000
    c0c0:	1600004f 	strne	r0, [r0], -pc, asr #32
    c0c4:	00000000 	andeq	r0, r0, r0
    c0c8:	0000001a 	andeq	r0, r0, sl, lsl r0
    c0cc:	0001130b 	andeq	r1, r1, fp, lsl #6
    c0d0:	00503300 	subseq	r3, r0, r0, lsl #6
    c0d4:	011e0b00 	tsteq	lr, r0, lsl #22
    c0d8:	504c0000 	subpl	r0, ip, r0
    c0dc:	000d0000 	andeq	r0, sp, r0
    c0e0:	94000000 	strls	r0, [r0], #-0
    c0e4:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    c0e8:	00000000 	andeq	r0, r0, r0
    c0ec:	0000059f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
    c0f0:	14000000 	strne	r0, [r0], #-0
    c0f4:	000036bf 			; <UNDEFINED> instruction: 0x000036bf
    c0f8:	97021d01 	strls	r1, [r2, -r1, lsl #26]
    c0fc:	00000000 	andeq	r0, r0, r0
    c100:	40000000 	andmi	r0, r0, r0
    c104:	01000000 	mrseq	r0, (UNDEF: 0)
    c108:	0005949c 	muleq	r5, ip, r4
    c10c:	06c11000 	strbeq	r1, [r1], r0
    c110:	dd020000 	stcle	0, cr0, [r2, #-0]
    c114:	000000a2 	andeq	r0, r0, r2, lsr #1
    c118:	00005063 	andeq	r5, r0, r3, rrx
    c11c:	0036b710 	eorseq	fp, r6, r0, lsl r7
    c120:	a2dd0200 	sbcsge	r0, sp, #0, 4
    c124:	84000000 	strhi	r0, [r0], #-0
    c128:	10000050 	andne	r0, r0, r0, asr r0
    c12c:	0000175b 	andeq	r1, r0, fp, asr r7
    c130:	00a2de02 	adceq	sp, r2, r2, lsl #28
    c134:	50a50000 	adcpl	r0, r5, r0
    c138:	25100000 	ldrcs	r0, [r0, #-0]
    c13c:	02000037 	andeq	r0, r0, #55	; 0x37
    c140:	0000a2de 	ldrdeq	sl, [r0], -lr
    c144:	0050e800 	subseq	lr, r0, r0, lsl #16
    c148:	37971300 	ldrcc	r1, [r7, r0, lsl #6]
    c14c:	e0020000 	and	r0, r2, r0
    c150:	000000a2 	andeq	r0, r0, r2, lsr #1
    c154:	0000512b 	andeq	r5, r0, fp, lsr #2
    c158:	00370813 	eorseq	r0, r7, r3, lsl r8
    c15c:	97e10200 	strbls	r0, [r1, r0, lsl #4]!
    c160:	86000000 	strhi	r0, [r0], -r0
    c164:	15000051 	strne	r0, [r0, #-81]	; 0xffffffaf
    c168:	000000ed 	andeq	r0, r0, sp, ror #1
    c16c:	00000000 	andeq	r0, r0, r0
    c170:	0000001a 	andeq	r0, r0, sl, lsl r0
    c174:	080cfa02 	stmdaeq	ip, {r1, r9, fp, ip, sp, lr, pc}
    c178:	02000001 	andeq	r0, r0, #1
    c17c:	0000fd0a 	andeq	pc, r0, sl, lsl #26
    c180:	0051a900 	subseq	sl, r1, r0, lsl #18
    c184:	00001600 	andeq	r1, r0, r0, lsl #12
    c188:	001a0000 	andseq	r0, sl, r0
    c18c:	130b0000 	movwne	r0, #45056	; 0xb000
    c190:	e9000001 	stmdb	r0, {r0}
    c194:	0b000051 	bleq	c2e0 <__exidx_end+0x73b3>
    c198:	0000011e 	andeq	r0, r0, lr, lsl r1
    c19c:	00005202 	andeq	r5, r0, r2, lsl #4
    c1a0:	0000000d 	andeq	r0, r0, sp
    c1a4:	00059400 	andeq	r9, r5, r0, lsl #8
    c1a8:	00000d00 	andeq	r0, r0, r0, lsl #26
    c1ac:	059f0000 	ldreq	r0, [pc]	; c1b4 <__exidx_end+0x7287>
    c1b0:	00000000 	andeq	r0, r0, r0
    c1b4:	1f061700 	svcne	0x00061700
    c1b8:	6a050000 	bvs	14c1c0 <__ccfg+0x12c218>
    c1bc:	000000a2 	andeq	r0, r0, r2, lsr #1
    c1c0:	001f1517 	andseq	r1, pc, r7, lsl r5	; <UNPREDICTABLE>
    c1c4:	a2840500 	addge	r0, r4, #0, 10
    c1c8:	00000000 	andeq	r0, r0, r0
    c1cc:	00000158 	andeq	r0, r0, r8, asr r1
    c1d0:	34080004 	strcc	r0, [r8], #-4
    c1d4:	01040000 	mrseq	r0, (UNDEF: 4)
    c1d8:	000037a9 	andeq	r3, r0, r9, lsr #15
    c1dc:	0038260c 	eorseq	r2, r8, ip, lsl #12
    c1e0:	00388600 	eorseq	r8, r8, r0, lsl #12
    c1e4:	003ff000 	eorseq	pc, pc, r0
    c1e8:	0000a600 	andeq	sl, r0, r0, lsl #12
    c1ec:	007ac600 	rsbseq	ip, sl, r0, lsl #12
    c1f0:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    c1f4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    c1f8:	00282b03 	eoreq	r2, r8, r3, lsl #22
    c1fc:	17d10200 	ldrbne	r0, [r1, r0, lsl #4]
    c200:	00000038 	andeq	r0, r0, r8, lsr r0
    c204:	4a070404 	bmi	1cd21c <__ccfg+0x1ad274>
    c208:	04000000 	streq	r0, [r0], #-0
    c20c:	00570508 	subseq	r0, r7, r8, lsl #10
    c210:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    c214:	0038e404 	eorseq	lr, r8, r4, lsl #8
    c218:	06010400 	streq	r0, [r1], -r0, lsl #8
    c21c:	0000029d 	muleq	r0, sp, r2
    c220:	9b080104 	blls	20c638 <__ccfg+0x1ec690>
    c224:	04000002 	streq	r0, [r0], #-2
    c228:	02b90502 	adcseq	r0, r9, #8388608	; 0x800000
    c22c:	02040000 	andeq	r0, r4, #0
    c230:	0001ca07 	andeq	ip, r1, r7, lsl #20
    c234:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    c238:	0000005c 	andeq	r0, r0, ip, asr r0
    c23c:	00006905 	andeq	r6, r0, r5, lsl #18
    c240:	07040400 	streq	r0, [r4, -r0, lsl #8]
    c244:	00000045 	andeq	r0, r0, r5, asr #32
    c248:	40070804 	andmi	r0, r7, r4, lsl #16
    c24c:	06000000 	streq	r0, [r0], -r0
    c250:	00830704 	addeq	r0, r3, r4, lsl #14
    c254:	04080000 	streq	r0, [r8], #-0
    c258:	00000090 	muleq	r0, r0, r0
    c25c:	a4080104 	strge	r0, [r8], #-260	; 0xfffffefc
    c260:	05000002 	streq	r0, [r0, #-2]
    c264:	00000090 	muleq	r0, r0, r0
    c268:	00970408 	addseq	r0, r7, r8, lsl #8
    c26c:	04080000 	streq	r0, [r8], #-0
    c270:	000000ad 	andeq	r0, r0, sp, lsr #1
    c274:	0000a207 	andeq	sl, r0, r7, lsl #4
    c278:	f90a0900 			; <UNDEFINED> instruction: 0xf90a0900
    c27c:	0300000b 	movweq	r0, #11
    c280:	0083091f 	addeq	r0, r3, pc, lsl r9
    c284:	3ff00000 	svccc	0x00f00000	; IMB
    c288:	00a60000 	adceq	r0, r6, r0
    c28c:	9c010000 	stcls	0, cr0, [r1], {-0}
    c290:	0000014f 	andeq	r0, r0, pc, asr #2
    c294:	0038690b 	eorseq	r6, r8, fp, lsl #18
    c298:	1a310100 	bne	c4c6a0 <__ccfg+0xc2c6f8>
    c29c:	00000085 	andeq	r0, r0, r5, lsl #1
    c2a0:	640c5001 	strvs	r5, [ip], #-1
    c2a4:	01000038 	tsteq	r0, r8, lsr r0
    c2a8:	00a81932 	adceq	r1, r8, r2, lsr r9
    c2ac:	52250000 	eorpl	r0, r5, #0
    c2b0:	52190000 	andspl	r0, r9, #0
    c2b4:	df0c0000 	svcle	0x000c0000
    c2b8:	01000038 	tsteq	r0, r8, lsr r0
    c2bc:	002c0933 	eoreq	r0, ip, r3, lsr r9
    c2c0:	529e0000 	addspl	r0, lr, #0
    c2c4:	52780000 	rsbspl	r0, r8, #0
    c2c8:	640d0000 	strvs	r0, [sp], #-0
    c2cc:	01007473 	tsteq	r0, r3, ror r4
    c2d0:	008a0942 	addeq	r0, sl, r2, asr #18
    c2d4:	53ca0000 	bicpl	r0, sl, #0
    c2d8:	53ba0000 			; <UNDEFINED> instruction: 0x53ba0000
    c2dc:	730d0000 	movwvc	r0, #53248	; 0xd000
    c2e0:	01006372 	tsteq	r0, r2, ror r3
    c2e4:	009c0f43 	addseq	r0, ip, r3, asr #30
    c2e8:	544d0000 	strbpl	r0, [sp], #-0
    c2ec:	543d0000 	ldrtpl	r0, [sp], #-0
    c2f0:	6e0e0000 	cdpvs	0, 0, cr0, cr14, cr0, {0}
    c2f4:	01000038 	tsteq	r0, r8, lsr r0
    c2f8:	014f0944 	cmpeq	pc, r4, asr #18
    c2fc:	54de0000 	ldrbpl	r0, [lr], #0
    c300:	54c60000 	strbpl	r0, [r6], #0
    c304:	7a0e0000 	bvc	38c30c <__ccfg+0x36c364>
    c308:	01000038 	tsteq	r0, r8, lsr r0
    c30c:	01550f45 	cmpeq	r5, r5, asr #30
    c310:	55d50000 	ldrbpl	r0, [r5]
    c314:	55bd0000 	ldrpl	r0, [sp, #0]!
    c318:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    c31c:	00006904 	andeq	r6, r0, r4, lsl #18
    c320:	70040800 	andvc	r0, r4, r0, lsl #16
    c324:	00000000 	andeq	r0, r0, r0
    c328:	00000139 	andeq	r0, r0, r9, lsr r1
    c32c:	34cf0004 	strbcc	r0, [pc], #4	; c334 <__exidx_end+0x7407>
    c330:	01040000 	mrseq	r0, (UNDEF: 4)
    c334:	000037a9 	andeq	r3, r0, r9, lsr #15
    c338:	0038f00c 	eorseq	pc, r8, ip
    c33c:	00392e00 	eorseq	r2, r9, r0, lsl #28
    c340:	00409800 	subeq	r9, r0, r0, lsl #16
    c344:	0000ae00 	andeq	sl, r0, r0, lsl #28
    c348:	007c7300 	rsbseq	r7, ip, r0, lsl #6
    c34c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    c350:	00746e69 	rsbseq	r6, r4, r9, ror #28
    c354:	00282b03 	eoreq	r2, r8, r3, lsl #22
    c358:	17d10200 	ldrbne	r0, [r1, r0, lsl #4]
    c35c:	00000038 	andeq	r0, r0, r8, lsr r0
    c360:	4a070404 	bmi	1cd378 <__ccfg+0x1ad3d0>
    c364:	04000000 	streq	r0, [r0], #-0
    c368:	00570508 	subseq	r0, r7, r8, lsl #10
    c36c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    c370:	0038e404 	eorseq	lr, r8, r4, lsl #8
    c374:	06010400 	streq	r0, [r1], -r0, lsl #8
    c378:	0000029d 	muleq	r0, sp, r2
    c37c:	9b080104 	blls	20c794 <__ccfg+0x1ec7ec>
    c380:	04000002 	streq	r0, [r0], #-2
    c384:	02b90502 	adcseq	r0, r9, #8388608	; 0x800000
    c388:	02040000 	andeq	r0, r4, #0
    c38c:	0001ca07 	andeq	ip, r1, r7, lsl #20
    c390:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    c394:	0000005c 	andeq	r0, r0, ip, asr r0
    c398:	45070404 	strmi	r0, [r7, #-1028]	; 0xfffffbfc
    c39c:	04000000 	streq	r0, [r0], #-0
    c3a0:	00400708 	subeq	r0, r0, r8, lsl #14
    c3a4:	04050000 	streq	r0, [r5], #-0
    c3a8:	00860406 	addeq	r0, r6, r6, lsl #8
    c3ac:	01040000 	mrseq	r0, (UNDEF: 4)
    c3b0:	0002a408 	andeq	sl, r2, r8, lsl #8
    c3b4:	0c3c0700 	ldceq	7, cr0, [ip], #-0
    c3b8:	21030000 	mrscs	r0, (UNDEF: 3)
    c3bc:	00007e09 	andeq	r7, r0, r9, lsl #28
    c3c0:	00409800 	subeq	r9, r0, r0, lsl #16
    c3c4:	0000ae00 	andeq	sl, r0, r0, lsl #28
    c3c8:	369c0100 	ldrcc	r0, [ip], r0, lsl #2
    c3cc:	08000001 	stmdaeq	r0, {r0}
    c3d0:	2601006d 	strcs	r0, [r1], -sp, rrx
    c3d4:	00007e0f 	andeq	r7, r0, pc, lsl #28
    c3d8:	09500100 	ldmdbeq	r0, {r8}^
    c3dc:	27010063 	strcs	r0, [r1, -r3, rrx]
    c3e0:	00002506 	andeq	r2, r0, r6, lsl #10
    c3e4:	00568b00 	subseq	r8, r6, r0, lsl #22
    c3e8:	00568500 	subseq	r8, r6, r0, lsl #10
    c3ec:	006e0900 	rsbeq	r0, lr, r0, lsl #18
    c3f0:	2c092801 	stccs	8, cr2, [r9], {1}
    c3f4:	cd000000 	stcgt	0, cr0, [r0, #-0]
    c3f8:	b7000056 	smlsdlt	r0, r6, r0, r0
    c3fc:	0a000056 	beq	c55c <__exidx_end+0x762f>
    c400:	2a010073 	bcs	4c5d4 <__ccfg+0x2c62c>
    c404:	00008009 	andeq	r8, r0, r9
    c408:	00579100 	subseq	r9, r7, r0, lsl #2
    c40c:	00577f00 	subseq	r7, r7, r0, lsl #30
    c410:	00690a00 	rsbeq	r0, r9, r0, lsl #20
    c414:	38102d01 	ldmdacc	r0, {r0, r8, sl, fp, sp}
    c418:	04000000 	streq	r0, [r0], #-0
    c41c:	00000058 	andeq	r0, r0, r8, asr r0
    c420:	0b000058 	bleq	c588 <__exidx_end+0x765b>
    c424:	00003982 	andeq	r3, r0, r2, lsl #19
    c428:	70112e01 	andsvc	r2, r1, r1, lsl #28
    c42c:	2a000000 	bcs	c434 <__exidx_end+0x7507>
    c430:	26000058 			; <UNDEFINED> instruction: 0x26000058
    c434:	0b000058 	bleq	c59c <__exidx_end+0x766f>
    c438:	00003921 	andeq	r3, r0, r1, lsr #18
    c43c:	36122f01 	ldrcc	r2, [r2], -r1, lsl #30
    c440:	5e000001 	cdppl	0, 0, cr0, cr0, cr1, {0}
    c444:	48000058 	stmdami	r0, {r3, r4, r6}
    c448:	0a000058 	beq	c5b0 <__exidx_end+0x7683>
    c44c:	30010064 	andcc	r0, r1, r4, rrx
    c450:	00003810 	andeq	r3, r0, r0, lsl r8
    c454:	0058ef00 	subseq	lr, r8, r0, lsl #30
    c458:	0058e900 	subseq	lr, r8, r0, lsl #18
    c45c:	04060000 	streq	r0, [r6], #-0
    c460:	00000070 	andeq	r0, r0, r0, ror r0
    c464:	0000c000 	andeq	ip, r0, r0
    c468:	83000400 	movwhi	r0, #1024	; 0x400
    c46c:	04000035 	streq	r0, [r0], #-53	; 0xffffffcb
    c470:	0037a901 	eorseq	sl, r7, r1, lsl #18
    c474:	39890c00 	stmibcc	r9, {sl, fp}
    c478:	39ba0000 	ldmibcc	sl!, {}	; <UNPREDICTABLE>
    c47c:	41480000 	mrsmi	r0, (UNDEF: 72)
    c480:	00140000 	andseq	r0, r4, r0
    c484:	7e410000 	cdpvc	0, 4, cr0, cr1, cr0, {0}
    c488:	01020000 	mrseq	r0, (UNDEF: 2)
    c48c:	00029d06 	andeq	r9, r2, r6, lsl #26
    c490:	08010200 	stmdaeq	r1, {r9}
    c494:	0000029b 	muleq	r0, fp, r2
    c498:	b9050202 	stmdblt	r5, {r1, r9}
    c49c:	02000002 	andeq	r0, r0, #2
    c4a0:	01ca0702 	biceq	r0, sl, r2, lsl #14
    c4a4:	04020000 	streq	r0, [r2], #-0
    c4a8:	00005c05 	andeq	r5, r0, r5, lsl #24
    c4ac:	07040200 	streq	r0, [r4, -r0, lsl #4]
    c4b0:	00000045 	andeq	r0, r0, r5, asr #32
    c4b4:	57050802 	strpl	r0, [r5, -r2, lsl #16]
    c4b8:	02000000 	andeq	r0, r0, #0
    c4bc:	00400708 	subeq	r0, r0, r8, lsl #14
    c4c0:	04030000 	streq	r0, [r3], #-0
    c4c4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    c4c8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    c4cc:	0000004a 	andeq	r0, r0, sl, asr #32
    c4d0:	e4040802 	str	r0, [r4], #-2050	; 0xfffff7fe
    c4d4:	04000038 	streq	r0, [r0], #-56	; 0xffffffc8
    c4d8:	00000089 	andeq	r0, r0, r9, lsl #1
    c4dc:	0000007d 	andeq	r0, r0, sp, ror r0
    c4e0:	72060005 	andvc	r0, r6, #5
    c4e4:	02000000 	andeq	r0, r0, #0
    c4e8:	02a40801 	adceq	r0, r4, #65536	; 0x10000
    c4ec:	82060000 	andhi	r0, r6, #0
    c4f0:	07000000 	streq	r0, [r0, -r0]
    c4f4:	00003a0d 	andeq	r3, r0, sp, lsl #20
    c4f8:	7d1cae02 	ldcvc	14, cr10, [ip, #-8]
    c4fc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    c500:	00000094 	muleq	r0, r4, r0
    c504:	5d051902 	vstrpl.16	s2, [r5, #-4]	; <UNPREDICTABLE>
    c508:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    c50c:	14000041 	strne	r0, [r0], #-65	; 0xffffffbf
    c510:	01000000 	mrseq	r0, (UNDEF: 0)
    c514:	0063099c 	mlseq	r3, ip, r9, r0
    c518:	5d0e4101 	stfpls	f4, [lr, #-4]
    c51c:	2c000000 	stccs	0, cr0, [r0], {-0}
    c520:	28000059 	stmdacs	r0, {r0, r3, r4, r6}
    c524:	00000059 	andeq	r0, r0, r9, asr r0
    c528:	0000b400 	andeq	fp, r0, r0, lsl #8
    c52c:	05000400 	streq	r0, [r0, #-1024]	; 0xfffffc00
    c530:	04000036 	streq	r0, [r0], #-54	; 0xffffffca
    c534:	0037a901 	eorseq	sl, r7, r1, lsl #18
    c538:	3a150c00 	bcc	54f540 <__ccfg+0x52f598>
    c53c:	39ba0000 	ldmibcc	sl!, {}	; <UNPREDICTABLE>
    c540:	7efa0000 	cdpvc	0, 15, cr0, cr10, cr0, {0}
    c544:	01020000 	mrseq	r0, (UNDEF: 2)
    c548:	00029d06 	andeq	r9, r2, r6, lsl #26
    c54c:	08010200 	stmdaeq	r1, {r9}
    c550:	0000029b 	muleq	r0, fp, r2
    c554:	b9050202 	stmdblt	r5, {r1, r9}
    c558:	02000002 	andeq	r0, r0, #2
    c55c:	01ca0702 	biceq	r0, sl, r2, lsl #14
    c560:	04020000 	streq	r0, [r2], #-0
    c564:	00005c05 	andeq	r5, r0, r5, lsl #24
    c568:	07040200 	streq	r0, [r4, -r0, lsl #4]
    c56c:	00000045 	andeq	r0, r0, r5, asr #32
    c570:	57050802 	strpl	r0, [r5, -r2, lsl #16]
    c574:	02000000 	andeq	r0, r0, #0
    c578:	00400708 	subeq	r0, r0, r8, lsl #14
    c57c:	04030000 	streq	r0, [r3], #-0
    c580:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    c584:	07040200 	streq	r0, [r4, -r0, lsl #4]
    c588:	0000004a 	andeq	r0, r0, sl, asr #32
    c58c:	e4040802 	str	r0, [r4], #-2050	; 0xfffff7fe
    c590:	04000038 	streq	r0, [r0], #-56	; 0xffffffc8
    c594:	00000081 	andeq	r0, r0, r1, lsl #1
    c598:	00000075 	andeq	r0, r0, r5, ror r0
    c59c:	6a060005 	bvs	18c5b8 <__ccfg+0x16c610>
    c5a0:	02000000 	andeq	r0, r0, #0
    c5a4:	02a40801 	adceq	r0, r4, #65536	; 0x10000
    c5a8:	7a060000 	bvc	18c5b0 <__ccfg+0x16c608>
    c5ac:	07000000 	streq	r0, [r0, -r0]
    c5b0:	00003a0d 	andeq	r3, r0, sp, lsl #20
    c5b4:	751cae01 	ldrvc	sl, [ip, #-3585]	; 0xfffff1ff
    c5b8:	04000000 	streq	r0, [r0], #-0
    c5bc:	00000081 	andeq	r0, r0, r1, lsl #1
    c5c0:	000000a3 	andeq	r0, r0, r3, lsr #1
    c5c4:	00005c08 	andeq	r5, r0, r8, lsl #24
    c5c8:	00010000 	andeq	r0, r1, r0
    c5cc:	00009206 	andeq	r9, r0, r6, lsl #4
    c5d0:	00860900 	addeq	r0, r6, r0, lsl #18
    c5d4:	00a30000 	adceq	r0, r3, r0
    c5d8:	03050000 	movweq	r0, #20480	; 0x5000
    c5dc:	00004e2c 	andeq	r4, r0, ip, lsr #28
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
       c:	10011106 	andne	r1, r1, r6, lsl #2
      10:	02000006 	andeq	r0, r0, #6
      14:	0b0b0024 	bleq	2c00ac <__ccfg+0x2a0104>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	16030000 	strne	r0, [r3], -r0
      20:	3a0e0300 	bcc	380c28 <__ccfg+0x360c80>
      24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	0013490b 	andseq	r4, r3, fp, lsl #18
      2c:	00240400 	eoreq	r0, r4, r0, lsl #8
      30:	0b3e0b0b 	bleq	f82c64 <__ccfg+0xf62cbc>
      34:	00000803 	andeq	r0, r0, r3, lsl #16
      38:	03011305 	movweq	r1, #4869	; 0x1305
      3c:	3a0b0b0e 	bcc	2c2c7c <__ccfg+0x2a2cd4>
		where = 1;
      40:	010b3b0b 	tsteq	fp, fp, lsl #22
		delay (1, st);
      44:	06000013 			; <UNDEFINED> instruction: 0x06000013
		release;
      48:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
      4c:	0b381349 	bleq	e04d78 <__ccfg+0xde4dd0>
      50:	00000c34 	andeq	r0, r0, r4, lsr ip
}
      54:	0b000f07 	bleq	3c78 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20>
      58:	0800000b 	stmdaeq	r0, {r0, r1, r3}
      5c:	0b0b000f 	bleq	2c00a0 <__ccfg+0x2a00f8>
			nq++;
      60:	00001349 	andeq	r1, r0, r9, asr #6
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	03001609 	movweq	r1, #1545	; 0x609
      68:	3b0b3a0e 	blcc	2ce8a8 <__ccfg+0x2ae900>
      6c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
      70:	0a000013 	beq	c4 <g_pfnVectors+0xc4>
      74:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
      78:	00001301 	andeq	r1, r0, r1, lsl #6
      7c:	4900050b 	stmdbmi	r0, {r0, r1, r3, r8, sl}
      80:	0c000013 	stceq	0, cr0, [r0], {19}
      84:	0b0b0113 	bleq	2c04d8 <__ccfg+0x2a0530>
      88:	0b3b0b3a 	bleq	ec2d78 <__ccfg+0xea2dd0>
      8c:	13010b39 	movwne	r0, #6969	; 0x1b39
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      90:	0d0d0000 	stceq	0, cr0, [sp, #-0]
	if (!button_still_pressed (__button_list [pbutton]))
      94:	3a0e0300 	bcc	380c9c <__ccfg+0x360cf4>
      98:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      9c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      a0:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
	if (baction == NULL)
      a4:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
      a8:	13011349 	movwne	r1, #4937	; 0x1349
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	260f0000 	strcs	r0, [pc], -r0
endthread
      b0:	00134900 	andseq	r4, r3, r0, lsl #18
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      b4:	01131000 	tsteq	r3, r0
      b8:	0b3a0b0b 	bleq	e82cec <__ccfg+0xe62d44>
endthread
      bc:	0b39053b 	bleq	e415b0 <__ccfg+0xe21608>
      c0:	00001301 	andeq	r1, r0, r1, lsl #6
      c4:	03000d11 	movweq	r0, #3345	; 0xd11
fsm receiver {
      c8:	3b0b3a0e 	blcc	2ce908 <__ccfg+0x2ae960>
      cc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
      d0:	000b3813 	andeq	r3, fp, r3, lsl r8
      d4:	01131200 	tsteq	r3, r0, lsl #4
        packet = tcv_rnp(Receiving, sfd);
      d8:	0b0b0e03 	bleq	2c38ec <__ccfg+0x2a3944>
      dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
      e0:	13010b39 	movwne	r0, #6969	; 0x1b39
      e4:	01130000 	tsteq	r3, r0
        receivedPtr = (struct msg *)(packet + 1);
      e8:	01134901 	tsteq	r3, r1, lsl #18
      ec:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
        if(receivedPtr->receiverId == nodeId) {
      f0:	13490021 	movtne	r0, #36897	; 0x9021
      f4:	00000b2f 	andeq	r0, r0, pc, lsr #22
      f8:	03003415 	movweq	r3, #1045	; 0x415
            proceed Broadcast; // Proceed to handling broadcast message
      fc:	3b0b3a0e 	blcc	2ce93c <__ccfg+0x2ae994>
        proceed Receiving;
     100:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     104:	3c0c3f13 	stccc	15, cr3, [ip], {19}
        ser_outf(Receive_Msg, "Message ");
     108:	1600000c 	strne	r0, [r0], -ip
     10c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
        proceed Show_Message;
     110:	0b3b0b3a 	bleq	ec2e00 <__ccfg+0xea2e58>
        ser_outf(Broadcast, "Broadcast ");
     114:	13490b39 	movtne	r0, #39737	; 0x9b39
     118:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
        ser_outf(Show_Message, "Message from node %d (Seq %d): %s\n\r", receivedPtr->senderId, receivedPtr->sequenceNumber, receivedPtr->payload);
     11c:	13170000 	tstne	r7, #0
     120:	0b080301 	bleq	200d2c <__ccfg+0x1e0d84>
     124:	3b0b3a0b 	blcc	2ce958 <__ccfg+0x2ae9b0>
     128:	010b390b 	tsteq	fp, fp, lsl #18
     12c:	18000013 	stmdane	r0, {r0, r1, r4}
        tcv_endp(packet);
     130:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     134:	0b3b0b3a 	bleq	ec2e24 <__ccfg+0xea2e7c>
        proceed Receiving;
     138:	13490b39 	movtne	r0, #39737	; 0x9b39
}
     13c:	0a020c3f 	beq	83240 <__ccfg+0x63298>
        proceed Receiving;
     140:	34190000 	ldrcc	r0, [r9], #-0
        } else if (receivedPtr->receiverId == '0' || receivedPtr->receiverId == 0) {
     144:	3a080300 	bcc	200d4c <__ccfg+0x1e0da4>
     148:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
            proceed Broadcast; // Proceed to handling broadcast message
     14c:	3f13490b 	svccc	0x0013490b
}
     150:	000a020c 	andeq	r0, sl, ip, lsl #4
     154:	012e1a00 			; <UNDEFINED> instruction: 0x012e1a00
     158:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     15c:	0b3b0b3a 	bleq	ec2e4c <__ccfg+0xea2ea4>
     160:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     164:	01120111 	tsteq	r2, r1, lsl r1
     168:	13010a40 	movwne	r0, #6720	; 0x1a40
     16c:	051b0000 	ldreq	r0, [fp, #-0]
     170:	3a0e0300 	bcc	380d78 <__ccfg+0x360dd0>
     174:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
fsm send(struct msg * ptr) {
     178:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     17c:	1c000006 	stcne	0, cr0, [r0], {6}
        address spkt = tcv_wnp(Send_Msg, sfd, sizeof(struct msg) + 4);
     180:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     184:	0b3b0b3a 	bleq	ec2e74 <__ccfg+0xea2ecc>
     188:	01110b39 	tsteq	r1, r9, lsr fp
     18c:	0a1d0000 	beq	740194 <__ccfg+0x7201ec>
     190:	3a0e0300 	bcc	380d98 <__ccfg+0x360df0>
        *p = ptr->senderId; p++;
     194:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     198:	0001110b 	andeq	r1, r1, fp, lsl #2
        strcpy(p, ptr->payload);
     19c:	010b1e00 	tsteq	fp, r0, lsl #28
        *p = ptr->receiverId; p++;
     1a0:	00000655 	andeq	r0, r0, r5, asr r6
        *p = ptr->sequenceNumber; p++;
     1a4:	0300341f 	movweq	r3, #1055	; 0x41f
        strcpy(p, ptr->payload);
     1a8:	3b0b3a0e 	blcc	2ce9e8 <__ccfg+0x2aea40>
        sequence++;
     1ac:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     1b0:	000a0213 	andeq	r0, sl, r3, lsl r2
     1b4:	00342000 	eorseq	r2, r4, r0
        tcv_endp (spkt);
     1b8:	0b3a0803 	bleq	e821cc <__ccfg+0xe62224>
        ser_outf(Send_Msg, "\n\rMessage Sent\n\r");
     1bc:	0b390b3b 	bleq	e42eb0 <__ccfg+0xe22f08>
     1c0:	0a021349 	beq	84eec <__ccfg+0x64f44>
}
     1c4:	0b210000 	bleq	8401cc <__ccfg+0x820224>
        finish;
     1c8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
}
     1cc:	00130101 	andseq	r0, r3, r1, lsl #2
     1d0:	00132200 	andseq	r2, r3, r0, lsl #4
     1d4:	0c3c0e03 	ldceq	14, cr0, [ip], #-12
     1d8:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
     1dc:	030c3f01 	movweq	r3, #52993	; 0xcf01
     1e0:	3b0b3a0e 	blcc	2cea20 <__ccfg+0x2aea78>
fsm root {
     1e4:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
     1e8:	2400000c 	strcs	r0, [r0], #-12
     1ec:	00000018 	andeq	r0, r0, r8, lsl r0
     1f0:	03003425 	movweq	r3, #1061	; 0x425
     1f4:	3b0b3a08 	blcc	2cea1c <__ccfg+0x2aea74>
     1f8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
        sequence = 0;
     1fc:	00060213 	andeq	r0, r6, r3, lsl r2
        ptr = (struct Message *) umalloc(sizeof(struct msg));
     200:	00342600 	eorseq	r2, r4, r0, lsl #12
        sequence = 0;
     204:	0b3a0e03 	bleq	e83a18 <__ccfg+0xe63a70>
        ptr = (struct Message *) umalloc(sizeof(struct msg));
     208:	0b390b3b 	bleq	e42efc <__ccfg+0xe22f54>
     20c:	06021349 	streq	r1, [r2], -r9, asr #6
     210:	34270000 	strtcc	r0, [r7], #-0
        phys_cc1350(0, CC1350_BUF_SZ);
     214:	3a080300 	bcc	200e1c <__ccfg+0x1e0e74>
        tcv_plug(0, &plug_null);
     218:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     21c:	0013490b 	andseq	r4, r3, fp, lsl #18
        sfd = tcv_open(NONE, 0, 0);
     220:	012e2800 			; <UNDEFINED> instruction: 0x012e2800
     224:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     228:	0b3b0b3a 	bleq	ec2f18 <__ccfg+0xea2f70>
     22c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     230:	01120111 	tsteq	r2, r1, lsl r1
            diag("unable to open TCV session");
     234:	00000a40 	andeq	r0, r0, r0, asr #20
     238:	01110100 	tsteq	r1, r0, lsl #2
            syserror(EASSERT, "no session");
     23c:	0b130e25 	bleq	4c3ad8 <__ccfg+0x4a3b30>
     240:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
        tcv_control(sfd, PHYSOPT_ON, NULL);
     244:	01110655 	tsteq	r1, r5, asr r6
     248:	00000610 	andeq	r0, r0, r0, lsl r6
        runfsm receiver;
     24c:	0b002402 	bleq	925c <__exidx_end+0x432f>
     250:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
        receiverId = 0;
     254:	0300000e 	movweq	r0, #14
     258:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
        ser_outf(Menu, "\n\rP2P Chat (Node #%d)\n\r"
     25c:	0b3b0b3a 	bleq	ec2f4c <__ccfg+0xea2fa4>
     260:	13490b39 	movtne	r0, #39737	; 0x9b39
        ser_inf(Choice, "%c", &choice);
     264:	24040000 	strcs	r0, [r4], #-0
     268:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     26c:	0008030b 	andeq	r0, r8, fp, lsl #6
        choice = toupper((unsigned char)choice);
     270:	00260500 	eoreq	r0, r6, r0, lsl #10
     274:	00001349 	andeq	r1, r0, r9, asr #6
     278:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
     27c:	07000013 	smladeq	r0, r3, r0, r0
        switch (choice) {
     280:	0b0b000f 	bleq	2c02c4 <__ccfg+0x2a031c>
     284:	00001349 	andeq	r1, r0, r9, asr #6
     288:	0b011308 	bleq	44eb0 <__ccfg+0x24f08>
                proceed Broadcast_Transmission;
     28c:	3b0b3a0b 	blcc	2ceac0 <__ccfg+0x2aeb18>
                proceed Menu;
     290:	010b390b 	tsteq	fp, fp, lsl #18
        ser_outf(Change_ID, "\n\rNew node ID (1-25):");
     294:	09000013 	stmdbeq	r0, {r0, r1, r4}
     298:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
        ser_inf(Get_ChangeID, "%d", &nodeId);
     29c:	0b3b0b3a 	bleq	ec2f8c <__ccfg+0xea2fe4>
     2a0:	13490b39 	movtne	r0, #39737	; 0x9b39
     2a4:	0b0d0b0b 	bleq	342ed8 <__ccfg+0x322f30>
            if (nodeId < 1 || nodeId > 25) {
     2a8:	0b380b0c 	bleq	e02ee0 <__ccfg+0xde2f38>
     2ac:	0d0a0000 	stceq	0, cr0, [sl, #-0]
                ser_outf(Get_ChangeID, "\n\rInvalid ID");
     2b0:	3a0e0300 	bcc	380eb8 <__ccfg+0x360f10>
     2b4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
                proceed Change_ID;
     2b8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     2bc:	0b00000b 	bleq	2f0 <root+0x10c>
            proceed Menu;
     2c0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
        ser_outf(Direct_Transmission, "\n\rReceiver node ID (1-25):");
     2c4:	0b3b0b3a 	bleq	ec2fb4 <__ccfg+0xea300c>
     2c8:	13490b39 	movtne	r0, #39737	; 0x9b39
        ser_inf(Get_ReceiverID, "%d", &receiverId);
     2cc:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
     2d0:	010c0000 	mrseq	r0, (UNDEF: 12)
     2d4:	01134901 	tsteq	r3, r1, lsl #18
            if (receiverId < 1 || receiverId > 25) {
     2d8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     2dc:	00000021 	andeq	r0, r0, r1, lsr #32
                ser_outf(Get_ReceiverID, "\n\rInvalid ID");
     2e0:	0300160e 	movweq	r1, #1550	; 0x60e
     2e4:	3b0b3a0e 	blcc	2ceb24 <__ccfg+0x2aeb7c>
                proceed Direct_Transmission;
     2e8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     2ec:	0f000013 	svceq	0x00000013
        ser_outf(Broadcast_Transmission, "\n\rMessage: ");
     2f0:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
     2f4:	00001301 	andeq	r1, r0, r1, lsl #6
        ser_in(Receive_Msg, ptr->payload, 27);
     2f8:	49000510 	stmdbmi	r0, {r4, r8, sl}
     2fc:	11000013 	tstne	r0, r3, lsl r0
     300:	0b0b0113 	bleq	2c0754 <__ccfg+0x2a07ac>
        if(strlen(ptr->payload) >= 27) {
     304:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     308:	13010b39 	movwne	r0, #6969	; 0x1b39
     30c:	0d120000 	ldceq	0, cr0, [r2, #-0]
            ptr->payload[26] = '\0';
     310:	3a0e0300 	bcc	380f18 <__ccfg+0x360f70>
     314:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
        call send(ptr, Menu);
     318:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
        ptr->senderId = nodeId;
     31c:	1300000b 	movwne	r0, #11
     320:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
        ptr->receiverId = receiverId;
     324:	0b3a0b0b 	bleq	e82f58 <__ccfg+0xe62fb0>
        ptr->sequenceNumber = (byte)sequence;
     328:	0b39053b 	bleq	e4181c <__ccfg+0xe21874>
     32c:	00001301 	andeq	r1, r0, r1, lsl #6
        call send(ptr, Menu);
     330:	49002114 	stmdbmi	r0, {r2, r4, r8, sp}
     334:	000b2f13 	andeq	r2, fp, r3, lsl pc
     338:	00341500 	eorseq	r1, r4, r0, lsl #10
     33c:	0b3a0e03 	bleq	e83b50 <__ccfg+0xe63ba8>
                proceed Direct_Transmission;
     340:	0b39053b 	bleq	e41834 <__ccfg+0xe2188c>
                ser_outf(Choice, "\n\rIncorrect Option.");
     344:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 228 <root+0x44>
     348:	00000c3c 	andeq	r0, r0, ip, lsr ip
                proceed Menu;
     34c:	03003416 	movweq	r3, #1046	; 0x416
}
     350:	3b0b3a0e 	blcc	2ceb90 <__ccfg+0x2aebe8>
     354:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     358:	17000013 	smladne	r0, r3, r0, r0
     35c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     360:	0b3b0b3a 	bleq	ec3050 <__ccfg+0xea30a8>
     364:	13490b39 	movtne	r0, #39737	; 0x9b39
     368:	0a020c3f 	beq	8346c <__ccfg+0x634c4>
     36c:	34180000 	ldrcc	r0, [r8], #-0
     370:	3a0e0300 	bcc	380f78 <__ccfg+0x360fd0>
     374:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     378:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     37c:	1900000a 	stmdbne	r0, {r1, r3}
     380:	13470034 	movtne	r0, #28724	; 0x7034
     384:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     388:	13490b39 	movtne	r0, #39737	; 0x9b39
     38c:	00000a02 	andeq	r0, r0, r2, lsl #20
     390:	4700341a 	smladmi	r0, sl, r4, r3
     394:	3b0b3a13 	blcc	2cebe8 <__ccfg+0x2aec40>
     398:	020b3905 	andeq	r3, fp, #81920	; 0x14000
     39c:	1b00000a 	blne	3cc <udelay+0x1c>
     3a0:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2f0 <root+0x10c>
static void devinit_uart (int devnum) {
     3a4:	0b3a0e03 	bleq	e83bb8 <__ccfg+0xe63c10>
	adddevfunc (ioreq_uart_a, devnum);
     3a8:	0b39053b 	bleq	e4189c <__ccfg+0xe218f4>
     3ac:	13490c27 	movtne	r0, #39975	; 0x9c27
void udelay (volatile word n) {
     3b0:	01120111 	tsteq	r2, r1, lsl r1
     3b4:	13010a40 	movwne	r0, #6720	; 0x1a40
	while (n) {
     3b8:	0b1c0000 	bleq	7003c0 <__ccfg+0x6e0418>
     3bc:	01065501 	tsteq	r6, r1, lsl #10
}
     3c0:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
	while (n--);
     3c4:	08030034 	stmdaeq	r3, {r2, r4, r5}
     3c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     3cc:	13490b39 	movtne	r0, #39737	; 0x9b39
		n--;
     3d0:	1d1e0000 	ldcne	0, cr0, [lr, #-0]
     3d4:	11133100 	tstne	r3, r0, lsl #2
     3d8:	58011201 	stmdapl	r1, {r0, r9, ip}
void mdelay (volatile word n) {
     3dc:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     3e0:	1f00000b 	svcne	0x0000000b
	while (n) {
     3e4:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 334 <root+0x150>
     3e8:	0b3a0e03 	bleq	e83bfc <__ccfg+0xe63c54>
}
     3ec:	0b39053b 	bleq	e418e0 <__ccfg+0xe21938>
		udelay (999);
     3f0:	01120111 	tsteq	r2, r1, lsl r1
     3f4:	13010a40 	movwne	r0, #6720	; 0x1a40
		n--;
     3f8:	0a200000 	beq	800400 <__ccfg+0x7e0458>
     3fc:	3a0e0300 	bcc	381004 <__ccfg+0x36105c>
     400:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     404:	2100000b 	tstcs	r0, fp
void __pi_ondomain (lword d) {
     408:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     40c:	06550152 			; <UNDEFINED> instruction: 0x06550152
		if (__pi_systat.effpdm > 1)
     410:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     414:	13010b57 	movwne	r0, #6999	; 0x1b57
			__pi_systat.effpdm = 1;
     418:	05220000 	streq	r0, [r2, #-0]!
	PRCMPowerDomainOn (d);
     41c:	00133100 	andseq	r3, r3, r0, lsl #2
     420:	011d2300 	tsteq	sp, r0, lsl #6
     424:	01521331 	cmpeq	r2, r1, lsr r3
     428:	0b580655 	bleq	1601d84 <__ccfg+0x15e1ddc>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     42c:	0b570b59 	bleq	15c3198 <__ccfg+0x15a31f0>
     430:	00001301 	andeq	r1, r0, r1, lsl #6
     434:	55010b24 	strpl	r0, [r1, #-2852]	; 0xfffff4dc
	__pi_systat.ondmns |= d;
     438:	25000006 	strcs	r0, [r0, #-6]
     43c:	1331000a 	teqne	r1, #10
}
     440:	00000111 	andeq	r0, r0, r1, lsl r1
     444:	31001d26 	tstcc	r0, r6, lsr #26
void __pi_offdomain (lword d) {
     448:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
	PRCMPowerDomainOff (d);
     44c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     450:	000b5705 	andeq	r5, fp, r5, lsl #14
     454:	011d2700 	tsteq	sp, r0, lsl #14
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     458:	01111331 	tsteq	r1, r1, lsr r3
     45c:	0b580112 	bleq	16008ac <__ccfg+0x15e0904>
     460:	0b570559 	bleq	15c19cc <__ccfg+0x15a1a24>
     464:	00001301 	andeq	r1, r0, r1, lsl #6
	if (d & PRCM_DOMAIN_RFCORE) {
     468:	31011d28 	tstcc	r1, r8, lsr #26
     46c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     470:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
			__pi_systat.effpdm = __pi_systat.reqpdm;
     474:	000b5705 	andeq	r5, fp, r5, lsl #14
     478:	001d2900 	andseq	r2, sp, r0, lsl #18
	__pi_systat.ondmns &= ~d;
     47c:	01111331 	tsteq	r1, r1, lsr r3
     480:	0b580112 	bleq	16008d0 <__ccfg+0x15e0928>
}
     484:	0b570b59 	bleq	15c31f0 <__ccfg+0x15a3248>
     488:	342a0000 	strtcc	r0, [sl], #-0
void __pi_syserror (word ec, const char *m) {
     48c:	3a080300 	bcc	201094 <__ccfg+0x1e10ec>
	diag ("SYSERR: %x, %s", ec, m);
     490:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     494:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  __ASM volatile ("cpsid i" : : : "memory");
     498:	2b000006 	blcs	4b8 <__pi_syserror+0x2c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     49c:	0e03012e 	adfeqsp	f0, f3, #0.5
		all_leds_blink;
     4a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     4a4:	0b200b39 	bleq	803190 <__ccfg+0x7e31e8>
     4a8:	00001301 	andeq	r1, r0, r1, lsl #6
     4ac:	03000a2c 	movweq	r0, #2604	; 0xa2c
     4b0:	3b0b3a0e 	blcc	2cecf0 <__ccfg+0x2aed48>
     4b4:	000b3905 	andeq	r3, fp, r5, lsl #18
     4b8:	012e2d00 			; <UNDEFINED> instruction: 0x012e2d00
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4bc:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     4c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     4c4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     4c8:	01120111 	tsteq	r2, r1, lsl r1
     4cc:	13010a40 	movwne	r0, #6720	; 0x1a40
     4d0:	052e0000 	streq	r0, [lr, #-0]!
	while (1) {
     4d4:	3a0e0300 	bcc	3810dc <__ccfg+0x361134>
     4d8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     4dc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
void tci_run_delay_timer () {
     4e0:	2f000006 	svccs	0x00000006
	setdel = __pi_mintk - __pi_old;
     4e4:	0111010b 	tsteq	r1, fp, lsl #2
     4e8:	13010112 	movwne	r0, #4370	; 0x1112
     4ec:	34300000 	ldrtcc	r0, [r0], #-0
     4f0:	00133100 	andseq	r3, r3, r0, lsl #2
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4f4:	010b3100 	mrseq	r3, (UNDEF: 27)
     4f8:	06551331 			; <UNDEFINED> instruction: 0x06551331
     4fc:	34320000 	ldrtcc	r0, [r2], #-0
     500:	02133100 	andseq	r3, r3, #0, 2
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     504:	33000006 	movwcc	r0, #6
	sti_tim;
     508:	1331011d 	teqne	r1, #1073741831	; 0x40000007
}
     50c:	01120111 	tsteq	r2, r1, lsl r1
     510:	0b590b58 	bleq	1643278 <__ccfg+0x16232d0>
     514:	00000b57 	andeq	r0, r0, r7, asr fp
     518:	31011d34 	tstcc	r1, r4, lsr sp
     51c:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     520:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
	cli_aux;
     524:	000b5705 	andeq	r5, fp, r5, lsl #14
     528:	00053500 	andeq	r3, r5, r0, lsl #10
     52c:	0b3a0803 	bleq	e82540 <__ccfg+0xe62598>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     530:	0b39053b 	bleq	e41a24 <__ccfg+0xe21a7c>
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     534:	0a021349 	beq	85260 <__ccfg+0x652b8>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     538:	05360000 	ldreq	r0, [r6, #-0]!
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     53c:	02133100 	andseq	r3, r3, #0, 2
	sti_aux;
     540:	37000006 	strcc	r0, [r0, -r6]
}
     544:	08030034 	stmdaeq	r3, {r2, r4, r5}
     548:	0b3b0b3a 	bleq	ec3238 <__ccfg+0xea3290>
     54c:	13490b39 	movtne	r0, #39737	; 0x9b39
void AONRTCIntHandler () {
     550:	00000602 	andeq	r0, r0, r2, lsl #12
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     554:	11010b38 	tstne	r1, r8, lsr fp
     558:	00011201 	andeq	r1, r1, r1, lsl #4
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     55c:	002e3900 	eoreq	r3, lr, r0, lsl #18
		if (__pi_utims [0] == 0)
     560:	0b3a0e03 	bleq	e83d74 <__ccfg+0xe63dcc>
     564:	0b39053b 	bleq	e41a58 <__ccfg+0xe21ab0>
		if (*(__pi_utims [0])) {
     568:	00000b20 	andeq	r0, r0, r0, lsr #22
     56c:	03012e3a 	movweq	r2, #7738	; 0x1e3a
			(*(__pi_utims [0]))--;
     570:	3b0b3a0e 	blcc	2cedb0 <__ccfg+0x2aee08>
		if (__pi_utims [1] == 0)
     574:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
		if (*(__pi_utims [1])) {
     578:	1201110c 	andne	r1, r1, #12, 2
			aux_timer_inactive = 0;
     57c:	010a4001 	tsteq	sl, r1
			(*(__pi_utims [1]))--;
     580:	3b000013 	blcc	5d4 <AONRTCIntHandler+0x84>
		if (__pi_utims [2] == 0)
     584:	0e03012e 	adfeqsp	f0, f3, #0.5
		if (*(__pi_utims [2])) {
     588:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			(*(__pi_utims [2]))--;
     58c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		if (__pi_utims [3] != 0) {
     590:	01111349 	tsteq	r1, r9, asr #6
			if (*(__pi_utims [3])) {
     594:	0a400112 	beq	10009e4 <__ccfg+0xfe0a3c>
				aux_timer_inactive = 0;
     598:	00001301 	andeq	r1, r0, r1, lsl #6
				(*(__pi_utims [3]))--;
     59c:	0300053c 	movweq	r0, #1340	; 0x53c
	if (__pi_systat.ledsts) {
     5a0:	3b0b3a08 	blcc	2cedc8 <__ccfg+0x2aee20>
     5a4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		if (__pi_systat.ledblc++ == 0) {
     5a8:	00060213 	andeq	r0, r6, r3, lsl r2
     5ac:	012e3d00 			; <UNDEFINED> instruction: 0x012e3d00
			if (__pi_systat.ledblk) {
     5b0:	0b3a0e03 	bleq	e83dc4 <__ccfg+0xe63e1c>
     5b4:	0b39053b 	bleq	e41aa8 <__ccfg+0xe21b00>
     5b8:	01120111 	tsteq	r2, r1, lsl r1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     5bc:	13010a40 	movwne	r0, #6720	; 0x1a40
     5c0:	2e3e0000 	cdpcs	0, 3, cr0, cr14, cr0, {0}
     5c4:	030c3f01 	movweq	r3, #52993	; 0xcf01
				if (__pi_systat.ledsts & 0x2)
     5c8:	3b0b3a0e 	blcc	2cee08 <__ccfg+0x2aee60>
     5cc:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     5d0:	2013490c 	andscs	r4, r3, ip, lsl #18
				if (__pi_systat.ledsts & 0x4)
     5d4:	0013010b 	andseq	r0, r3, fp, lsl #2
				__pi_systat.ledblk = 0;
     5d8:	00053f00 	andeq	r3, r5, r0, lsl #30
     5dc:	0b3a0803 	bleq	e825f0 <__ccfg+0xe62648>
			if (__pi_systat.fstblk)
     5e0:	0b39053b 	bleq	e41ad4 <__ccfg+0xe21b2c>
     5e4:	00001349 	andeq	r1, r0, r9, asr #6
				__pi_systat.ledblc = 200;
     5e8:	03000a40 	movweq	r0, #2624	; 0xa40
	if (events & AON_RTC_EVFLAGS_CH0) {
     5ec:	3b0b3a08 	blcc	2cee14 <__ccfg+0x2aee6c>
		cli_tim;
     5f0:	000b3905 	andeq	r3, fp, r5, lsl #18
		__pi_new += setdel;
     5f4:	00344100 	eorseq	r4, r4, r0, lsl #2
		cli_tim;
     5f8:	0b3a0e03 	bleq	e83e0c <__ccfg+0xe63e64>
		__pi_new += setdel;
     5fc:	0b39053b 	bleq	e41af0 <__ccfg+0xe21b48>
     600:	06021349 	streq	r1, [r2], -r9, asr #6
     604:	0a420000 	beq	108060c <__ccfg+0x1060664>
		RISE_N_SHINE;
     608:	3a080300 	bcc	201210 <__ccfg+0x1e1268>
     60c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
     610:	0001110b 	andeq	r1, r1, fp, lsl #2
		aux_timer_inactive = 1;
     614:	011d4300 	tsteq	sp, r0, lsl #6
     618:	01111331 	tsteq	r1, r1, lsr r3
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     61c:	0b580112 	bleq	1600a6c <__ccfg+0x15e0ac4>
     620:	0b570b59 	bleq	15c338c <__ccfg+0x15a33e4>
     624:	00001301 	andeq	r1, r0, r1, lsl #6
				if (__pi_systat.ledsts & 0x2)
     628:	03012e44 	movweq	r2, #7748	; 0x1e44
     62c:	3b0b3a0e 	blcc	2cee6c <__ccfg+0x2aeec4>
     630:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
				if (__pi_systat.ledsts & 0x4)
     634:	2013490c 	andscs	r4, r3, ip, lsl #18
				__pi_systat.ledblk = 1;
     638:	0013010b 	andseq	r0, r3, fp, lsl #2
     63c:	002e4500 	eoreq	r4, lr, r0, lsl #10
		if (aux_timer_inactive) {
     640:	0b3a0e03 	bleq	e83e54 <__ccfg+0xe63eac>
			cli_aux;
     644:	0b39053b 	bleq	e41b38 <__ccfg+0xe21b90>
     648:	0b201349 	bleq	805374 <__ccfg+0x7e53cc>
     64c:	2e460000 	cdpcs	0, 4, cr0, cr6, cr0, {0}
     650:	3a0e0301 	bcc	38125c <__ccfg+0x3612b4>
     654:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     658:	010b200b 	tsteq	fp, fp
     65c:	47000013 	smladmi	r0, r3, r0, r0
     660:	08030034 	stmdaeq	r3, {r2, r4, r5}
     664:	0b3b0b3a 	bleq	ec3354 <__ccfg+0xea33ac>
word tci_update_delay_ticks (Boolean force) {
     668:	13490b39 	movtne	r0, #39737	; 0x9b39
	cli_tim;
     66c:	0b480000 	bleq	1200674 <__ccfg+0x11e06cc>
     670:	49000001 	stmdbmi	r0, {r0}
	if (setdel) {
     674:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 5c4 <AONRTCIntHandler+0x74>
		if (force) {
     678:	0b3a0e03 	bleq	e83e8c <__ccfg+0xe63ee4>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     67c:	0b390b3b 	bleq	e43370 <__ccfg+0xe233c8>
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     680:	01110c27 	tsteq	r1, r7, lsr #24
     684:	0a400112 	beq	1000ad4 <__ccfg+0xfe0b2c>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     688:	00001301 	andeq	r1, r0, r1, lsl #6
				AON_RTC_O_CH0CMP)) - gettav ());
     68c:	0300054a 	movweq	r0, #1354	; 0x54a
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     690:	3b0b3a08 	blcc	2ceeb8 <__ccfg+0x2aef10>
     694:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     698:	00060213 	andeq	r0, r6, r3, lsl r2
     69c:	00344b00 	eorseq	r4, r4, r0, lsl #22
}
     6a0:	0b3a0e03 	bleq	e83eb4 <__ccfg+0xe63f0c>
		sti_tim;
     6a4:	0b390b3b 	bleq	e43398 <__ccfg+0xe233f0>
     6a8:	0a021349 	beq	853d4 <__ccfg+0x6542c>
		return YES;
     6ac:	0a4c0000 	beq	13006b4 <__ccfg+0x12e070c>
     6b0:	3a0e0300 	bcc	3812b8 <__ccfg+0x361310>
     6b4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6b8:	0001110b 	andeq	r1, r1, fp, lsl #2
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6bc:	002e4d00 	eoreq	r4, lr, r0, lsl #26
	UARTDisable (UART0_BASE);
     6c0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     6c4:	0b3b0b3a 	bleq	ec33b4 <__ccfg+0xea340c>
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6c8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	UARTDisable (UART0_BASE);
     6cc:	01120111 	tsteq	r2, r1, lsl r1
	UARTConfigSetExpClk (UART0_BASE,
     6d0:	00000a40 	andeq	r0, r0, r0, asr #20
     6d4:	0300054e 	movweq	r0, #1358	; 0x54e
     6d8:	3b0b3a08 	blcc	2cef00 <__ccfg+0x2aef58>
     6dc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     6e0:	000a0213 	andeq	r0, sl, r3, lsl r2
}
     6e4:	012e4f00 			; <UNDEFINED> instruction: 0x012e4f00
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6e8:	0b3a0e03 	bleq	e83efc <__ccfg+0xe63f54>
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     6ec:	0b390b3b 	bleq	e433e0 <__ccfg+0xe23438>
     6f0:	0b200c27 	bleq	803794 <__ccfg+0x7e37ec>
     6f4:	00001301 	andeq	r1, r0, r1, lsl #6
	urates [0] = rate;
     6f8:	03000550 	movweq	r0, #1360	; 0x550
}
     6fc:	3b0b3a08 	blcc	2cef24 <__ccfg+0x2aef7c>
     700:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     704:	51000013 	tstpl	r0, r3, lsl r0
     708:	0e03012e 	adfeqsp	f0, f3, #0.5
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     70c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     710:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     714:	13010b20 	movwne	r0, #6944	; 0x1b20
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     718:	05520000 	ldrbeq	r0, [r2, #-0]
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     71c:	3a0e0300 	bcc	381324 <__ccfg+0x36137c>
     720:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	__pi_uart_setrate (urates [0], __pi_uart);
     724:	0013490b 	andseq	r4, r3, fp, lsl #18
     728:	002e5300 	eoreq	r5, lr, r0, lsl #6
     72c:	0b3a0e03 	bleq	e83f40 <__ccfg+0xe63f98>
     730:	0b390b3b 	bleq	e43424 <__ccfg+0xe2347c>
     734:	0b200c27 	bleq	8037d8 <__ccfg+0x7e3830>
	switch (operation) {
     738:	2e540000 	cdpcs	0, 5, cr0, cr4, cr0, {0}
static int ioreq_uart_a (int operation, char *buf, int len) {
     73c:	3a0e0301 	bcc	381348 <__ccfg+0x3613a0>
     740:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	switch (operation) {
     744:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     748:	010b2013 	tsteq	fp, r3, lsl r0
     74c:	55000013 	strpl	r0, [r0, #-19]	; 0xffffffed
				len--;
     750:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
				*buf++ = uart_a_read;
     754:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			while (len && uart_a_char_available) {
     758:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     75c:	00000b20 	andeq	r0, r0, r0, lsr #22
			if (len != operation) {
     760:	03002e56 	movweq	r2, #3670	; 0xe56
}
     764:	3b0b3a0e 	blcc	2cefa4 <__ccfg+0x2aeffc>
     768:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
			uart_a_disable_int;
     76c:	2013490c 	andscs	r4, r3, ip, lsl #18
			if (uart_a_char_available) {
     770:	5700000b 	strpl	r0, [r0, -fp]
			uart_a_disable_int;
     774:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     778:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     77c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			if (uart_a_char_available) {
     780:	0b201349 	bleq	8054ac <__ccfg+0x7e5504>
				uart_a_enable_int;
     784:	2e580000 	cdpcs	0, 5, cr0, cr8, cr0, {0}
     788:	11133101 	tstne	r3, r1, lsl #2
     78c:	40011201 	andmi	r1, r1, r1, lsl #4
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     790:	0000000a 	andeq	r0, r0, sl
     794:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
			return -2;
     798:	030b130e 	movweq	r1, #45838	; 0xb30e
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     79c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
				uart_a_write (*buf);
     7a0:	10011106 	andne	r1, r1, r6, lsl #2
				len--;
     7a4:	02000006 	andeq	r0, r0, #6
			while (len && uart_a_room_in_tx) {
     7a8:	0b0b0024 	bleq	2c0840 <__ccfg+0x2a0898>
     7ac:	0e030b3e 	vmoveq.16	d3[0], r0
			if (len != operation) {
     7b0:	16030000 	strne	r0, [r3], -r0
			uart_a_disable_int;
     7b4:	3a0e0300 	bcc	3813bc <__ccfg+0x361414>
     7b8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     7bc:	0013490b 	andseq	r4, r3, fp, lsl #18
			if (uart_a_room_in_tx) {
     7c0:	00240400 	eoreq	r0, r4, r0, lsl #8
				uart_a_enable_int;
     7c4:	0b3e0b0b 	bleq	f833f8 <__ccfg+0xf63450>
     7c8:	00000803 	andeq	r0, r0, r3, lsl #16
     7cc:	03011305 	movweq	r1, #4869	; 0x1305
	switch (operation) {
     7d0:	3a0b0b0e 	bcc	2c3410 <__ccfg+0x2a3468>
			uart_a_disable_int;
     7d4:	010b3b0b 	tsteq	fp, fp, lsl #22
			if (uart_a_room_in_tx) {
     7d8:	06000013 			; <UNDEFINED> instruction: 0x06000013
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7dc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     7e0:	0b381349 	bleq	e0550c <__ccfg+0xde5564>
			uart_a_enable_int;
     7e4:	00000c34 	andeq	r0, r0, r4, lsr ip
     7e8:	0b000f07 	bleq	440c <__pi_hex_enc_table+0x8f>
     7ec:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     7f0:	13490035 	movtne	r0, #36917	; 0x9035
			return 0;
     7f4:	26090000 	strcs	r0, [r9], -r0
			if (len == UART_CNTRL_SETRATE) {
     7f8:	00134900 	andseq	r4, r3, r0, lsl #18
				if (__pi_uart_setrate (*((word*)buf),
     7fc:	000f0a00 	andeq	r0, pc, r0, lsl #20
     800:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     804:	130b0000 	movwne	r0, #45056	; 0xb000
				syserror (EREQPAR, "uar");
     808:	3a0b0b01 	bcc	2c3414 <__ccfg+0x2a346c>
			syserror (ENOOPER, "uai");
     80c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			if (len == UART_CNTRL_GETRATE) {
     810:	0013010b 	andseq	r0, r3, fp, lsl #2
				return 1;
     814:	000d0c00 	andeq	r0, sp, r0, lsl #24
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     818:	0b3a0e03 	bleq	e8402c <__ccfg+0xe64084>
			syserror (ENOOPER, "uai");
     81c:	0b390b3b 	bleq	e43510 <__ccfg+0xe23568>
     820:	0b0b1349 	bleq	2c554c <__ccfg+0x2a55a4>
     824:	0b0c0b0d 	bleq	303460 <__ccfg+0x2e34b8>
     828:	00000b38 	andeq	r0, r0, r8, lsr fp
     82c:	03000d0d 	movweq	r0, #3341	; 0xd0d
     830:	3b0b3a0e 	blcc	2cf070 <__ccfg+0x2af0c8>
     834:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     838:	000b3813 	andeq	r3, fp, r3, lsl r8
void UART0IntHandler () {
     83c:	00340e00 	eorseq	r0, r4, r0, lsl #28
     840:	0b3a0e03 	bleq	e84054 <__ccfg+0xe640ac>
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     844:	0b390b3b 	bleq	e43538 <__ccfg+0xe23590>
     848:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 72c <reinit_uart+0x20>
     84c:	00000c3c 	andeq	r0, r0, ip, lsr ip
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     850:	0300160f 	movweq	r1, #1551	; 0x60f
     854:	3b0b3a0e 	blcc	2cf094 <__ccfg+0x2af0ec>
		RISE_N_SHINE;
     858:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     85c:	10000013 	andne	r0, r0, r3, lsl r0
     860:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
		i_trigger (devevent (UART_A, READ));
     864:	00001301 	andeq	r1, r0, r1, lsl #6
     868:	49000511 	stmdbmi	r0, {r0, r4, r8, sl}
     86c:	12000013 	andne	r0, r0, #19
     870:	13490101 	movtne	r0, #37121	; 0x9101
     874:	00001301 	andeq	r1, r0, r1, lsl #6
     878:	00002113 	andeq	r2, r0, r3, lsl r1
     87c:	00341400 	eorseq	r1, r4, r0, lsl #8
     880:	0b3a0e03 	bleq	e84094 <__ccfg+0xe640ec>
     884:	0b39053b 	bleq	e41d78 <__ccfg+0xe21dd0>
     888:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 76c <ioreq_uart_a+0x34>
     88c:	00000c3c 	andeq	r0, r0, ip, lsr ip
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     890:	0b011315 	bleq	454ec <__ccfg+0x25544>
     894:	3b0b3a0b 	blcc	2cf0c8 <__ccfg+0x2af120>
     898:	010b3905 	tsteq	fp, r5, lsl #18
     89c:	16000013 			; <UNDEFINED> instruction: 0x16000013
		i_trigger (devevent (UART_A, WRITE));
     8a0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     8a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     8a8:	13490b39 	movtne	r0, #39737	; 0x9b39
		RISE_N_SHINE;
     8ac:	00000b38 	andeq	r0, r0, r8, lsr fp
     8b0:	03011317 	movweq	r1, #4887	; 0x1317
     8b4:	3a0b0b0e 	bcc	2c34f4 <__ccfg+0x2a354c>
		i_trigger (devevent (UART_A, WRITE));
     8b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     8bc:	0013010b 	andseq	r0, r3, fp, lsl #2
     8c0:	00211800 	eoreq	r1, r1, r0, lsl #16
     8c4:	0b2f1349 	bleq	bc55f0 <__ccfg+0xba5648>
     8c8:	15190000 	ldrne	r0, [r9, #-0]
     8cc:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
     8d0:	00130113 	andseq	r0, r3, r3, lsl r1
     8d4:	00341a00 	eorseq	r1, r4, r0, lsl #20
     8d8:	0b3a1347 	bleq	e855fc <__ccfg+0xe65654>
     8dc:	0b390b3b 	bleq	e435d0 <__ccfg+0xe23628>
     8e0:	00000a02 	andeq	r0, r0, r2, lsl #20
}
     8e4:	0300341b 	movweq	r3, #1051	; 0x41b
     8e8:	3b0b3a0e 	blcc	2cf128 <__ccfg+0x2af180>
     8ec:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     8f0:	020c3f13 	andeq	r3, ip, #19, 30	; 0x4c
void __buttons_setirq (int val) {
     8f4:	1c00000a 	stcne	0, cr0, [r0], {10}
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     8f8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     8fc:	0b3b0b3a 	bleq	ec35ec <__ccfg+0xea3644>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     900:	13490b39 	movtne	r0, #39737	; 0x9b39
     904:	00000a02 	andeq	r0, r0, r2, lsl #20
     908:	4700341d 	smladmi	r0, sp, r4, r3
     90c:	3b0b3a13 	blcc	2cf160 <__ccfg+0x2af1b8>
     910:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		bn = BUTTON_GPIO (__button_list [i]);
     914:	000a0213 	andeq	r0, sl, r3, lsl r2
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     918:	00341e00 	eorseq	r1, r4, r0, lsl #28
     91c:	0b3a0e03 	bleq	e84130 <__ccfg+0xe64188>
     920:	0b39053b 	bleq	e41e14 <__ccfg+0xe21e6c>
     924:	0a021349 	beq	85650 <__ccfg+0x656a8>
     928:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
}
     92c:	030c3f00 	movweq	r3, #52992	; 0xcf00
     930:	3b0b3a0e 	blcc	2cf170 <__ccfg+0x2af1c8>
     934:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     938:	1113490c 	tstne	r3, ip, lsl #18
void __pinlist_setirq (int val) {
     93c:	40011201 	andmi	r1, r1, r1, lsl #4
	for (i = 0; i < N_PINLIST; i++) {
     940:	2000000a 	andcs	r0, r0, sl
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     944:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 894 <UART0IntHandler+0x5c>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     948:	0b3a0e03 	bleq	e8415c <__ccfg+0xe641b4>
	for (i = 0; i < N_PINLIST; i++) {
     94c:	0b39053b 	bleq	e41e40 <__ccfg+0xe21e98>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     950:	01110c27 	tsteq	r1, r7, lsr #24
     954:	0a400112 	beq	1000da4 <__ccfg+0xfe0dfc>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     958:	00001301 	andeq	r1, r0, r1, lsl #6
     95c:	03000521 	movweq	r0, #1313	; 0x521
     960:	3b0b3a0e 	blcc	2cf1a0 <__ccfg+0x2af1f8>
     964:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
  __ASM volatile ("cpsie i" : : : "memory");
     968:	00060213 	andeq	r0, r6, r3, lsl r2
}
     96c:	00182200 	andseq	r2, r8, r0, lsl #4
     970:	34230000 	strtcc	r0, [r3], #-0
     974:	3a080300 	bcc	20157c <__ccfg+0x1e15d4>
void GPIOIntHandler () {
     978:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
if (buttons_int) {
     97c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     980:	24000006 	strcs	r0, [r0], #-6
     984:	08030034 	stmdaeq	r3, {r2, r4, r5}
	buttons_disable ();
     988:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	i_trigger ((aword)&__button_list);
     98c:	13490b39 	movtne	r0, #39737	; 0x9b39
     990:	00000a02 	andeq	r0, r0, r2, lsl #20
     994:	03003425 	movweq	r3, #1061	; 0x425
     998:	3b0b3a08 	blcc	2cf1c0 <__ccfg+0x2af218>
     99c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     9a0:	26000013 			; <UNDEFINED> instruction: 0x26000013
     9a4:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     9a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     9ac:	01110b39 	tsteq	r1, r9, lsr fp
     9b0:	0b270000 	bleq	9c09b8 <__ccfg+0x9a0a10>
     9b4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     9b8:	00130101 	andseq	r0, r3, r1, lsl #2
	RISE_N_SHINE;
     9bc:	010b2800 	tsteq	fp, r0, lsl #16
     9c0:	13010655 	movwne	r0, #5717	; 0x1655
if (pin_sensor_int) {
     9c4:	1d290000 	stcne	0, cr0, [r9, #-0]
     9c8:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     9cc:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
	i_trigger ((aword)(&__input_pins));
     9d0:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     9d4:	2a00000b 	bcs	a08 <GPIOIntHandler+0x90>
     9d8:	13310005 	teqne	r1, #5
     9dc:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
     9e0:	3a0e0301 	bcc	3815ec <__ccfg+0x361644>
     9e4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9e8:	110c270b 	tstne	ip, fp, lsl #14
     9ec:	40011201 	andmi	r1, r1, r1, lsl #4
     9f0:	0013010a 	andseq	r0, r3, sl, lsl #2
     9f4:	00052c00 	andeq	r2, r5, r0, lsl #24
     9f8:	0b3a0803 	bleq	e82a0c <__ccfg+0xe62a64>
     9fc:	0b39053b 	bleq	e41ef0 <__ccfg+0xe21f48>
	__pinsen_disable_and_clear;
     a00:	06021349 	streq	r1, [r2], -r9, asr #6
	RISE_N_SHINE;
     a04:	2e2d0000 	cdpcs	0, 2, cr0, cr13, cr0, {0}
     a08:	030c3f01 	movweq	r3, #52993	; 0xcf01
}
     a0c:	3b0b3a0e 	blcc	2cf24c <__ccfg+0x2af2a4>
     a10:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     a14:	1113490c 	tstne	r3, ip, lsl #18
     a18:	40011201 	andmi	r1, r1, r1, lsl #4
     a1c:	0013010a 	andseq	r0, r3, sl, lsl #2
     a20:	00342e00 	eorseq	r2, r4, r0, lsl #28
void system_init () {
     a24:	0b3a0e03 	bleq	e84238 <__ccfg+0xe64290>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a28:	0b39053b 	bleq	e41f1c <__ccfg+0xe21f74>
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a2c:	06021349 	streq	r1, [r2], -r9, asr #6
     a30:	2e2f0000 	cdpcs	0, 2, cr0, cr15, cr0, {0}
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a34:	030c3f01 	movweq	r3, #52993	; 0xcf01
     a38:	3b0b3a0e 	blcc	2cf278 <__ccfg+0x2af2d0>
     a3c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a40:	010b200c 	tsteq	fp, ip
     a44:	30000013 	andcc	r0, r0, r3, lsl r0
     a48:	08030005 	stmdaeq	r3, {r0, r2}
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a50:	13490b39 	movtne	r0, #39737	; 0x9b39
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a54:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a58:	030c3f01 	movweq	r3, #52993	; 0xcf01
     a5c:	3b0b3a0e 	blcc	2cf29c <__ccfg+0x2af2f4>
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a60:	110b3905 	tstne	fp, r5, lsl #18
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a64:	40011201 	andmi	r1, r1, r1, lsl #4
     a68:	0013010a 	andseq	r0, r3, sl, lsl #2
		pin = (port_confs [i] >> 19) & 0x1f;
     a6c:	012e3200 			; <UNDEFINED> instruction: 0x012e3200
     a70:	08030c3f 	stmdaeq	r3, {r0, r1, r2, r3, r4, r5, sl, fp}
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a74:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a78:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     a7c:	01111349 	tsteq	r1, r9, asr #6
     a80:	0a400112 	beq	1000ed0 <__ccfg+0xfe0f28>
     a84:	00001301 	andeq	r1, r0, r1, lsl #6
     a88:	03000533 	movweq	r0, #1331	; 0x533
     a8c:	3b0b3a08 	blcc	2cf2b4 <__ccfg+0x2af30c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a90:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		if (port_confs [i] & 0x40)
     a94:	000a0213 	andeq	r0, sl, r3, lsl r2
     a98:	002e3400 	eoreq	r3, lr, r0, lsl #8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a9c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     aa0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     aa4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	all_leds_blink;
     aa8:	01120111 	tsteq	r2, r1, lsl r1
     aac:	00000a40 	andeq	r0, r0, r0, asr #20
     ab0:	03000535 	movweq	r0, #1333	; 0x535
     ab4:	3b0b3a0e 	blcc	2cf2f4 <__ccfg+0x2af34c>
     ab8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     abc:	000a0213 	andeq	r0, sl, r3, lsl r2
     ac0:	00053600 	andeq	r3, r5, r0, lsl #12
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac4:	0b3a0e03 	bleq	e842d8 <__ccfg+0xe64330>
     ac8:	0b39053b 	bleq	e41fbc <__ccfg+0xe22014>
     acc:	00001349 	andeq	r1, r0, r9, asr #6
     ad0:	55010b37 	strpl	r0, [r1, #-2871]	; 0xfffff4c9
     ad4:	38000006 	stmdacc	r0, {r1, r2}
     ad8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; a28 <system_init+0x4>
     adc:	0b3a0e03 	bleq	e842f0 <__ccfg+0xe64348>
	IntEnable (INT_AON_RTC_COMB);
     ae0:	0b390b3b 	bleq	e437d4 <__ccfg+0xe2382c>
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ae4:	0b200c27 	bleq	803b88 <__ccfg+0x7e3be0>
     ae8:	00001301 	andeq	r1, r0, r1, lsl #6
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     aec:	03000539 	movweq	r0, #1337	; 0x539
	IntEnable (INT_AON_RTC_COMB);
     af0:	3b0b3a08 	blcc	2cf318 <__ccfg+0x2af370>
     af4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	__pi_malloc_init ();
     af8:	3a000013 	bcc	b4c <system_init+0x128>
	IntEnable (INT_AON_GPIO_EDGE);
     afc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     b00:	0b3b0b3a 	bleq	ec37f0 <__ccfg+0xea3848>
     b04:	13490b39 	movtne	r0, #39737	; 0x9b39
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b08:	343b0000 	ldrtcc	r0, [fp], #-0
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b0c:	3a080300 	bcc	201714 <__ccfg+0x1e176c>
     b10:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b14:	0013490b 	andseq	r4, r3, fp, lsl #18
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b18:	000a3c00 	andeq	r3, sl, r0, lsl #24
     b1c:	0b3a0803 	bleq	e82b30 <__ccfg+0xe62b88>
     b20:	0b39053b 	bleq	e42014 <__ccfg+0xe2206c>
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b24:	2e3d0000 	cdpcs	0, 3, cr0, cr13, cr0, {0}
     b28:	030c3f01 	movweq	r3, #52993	; 0xcf01
     b2c:	3b0b3a0e 	blcc	2cf36c <__ccfg+0x2af3c4>
	urates [0] = UART_RATE / 100;
     b30:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     b34:	1201110c 	andne	r1, r1, #12, 2
     b38:	010a4001 	tsteq	sl, r1
	reinit_uart ();
     b3c:	3e000013 	mcrcc	0, 0, r0, cr0, cr3, {0}
	EXTRA_INITIALIZERS;
     b40:	08030005 	stmdaeq	r3, {r0, r2}
     b44:	0b3b0b3a 	bleq	ec3834 <__ccfg+0xea388c>
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b48:	13490b39 	movtne	r0, #39737	; 0x9b39
     b4c:	00000602 	andeq	r0, r0, r2, lsl #12
     b50:	0300343f 	movweq	r3, #1087	; 0x43f
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b54:	3b0b3a08 	blcc	2cf37c <__ccfg+0x2af3d4>
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b58:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			devinit [i] . init (devinit [i] . param);
     b5c:	00060213 	andeq	r0, r6, r3, lsl r2
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b60:	002e4000 	eoreq	r4, lr, r0
     b64:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     b68:	0b3b0b3a 	bleq	ec3858 <__ccfg+0xea38b0>
	IntEnable (INT_UART0_COMB);
     b6c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     b70:	01120111 	tsteq	r2, r1, lsl r1
     b74:	00000a40 	andeq	r0, r0, r0, asr #20
}
     b78:	03012e41 	movweq	r2, #7745	; 0x1e41
	tci_run_auxiliary_timer ();
     b7c:	3b0b3a0e 	blcc	2cf3bc <__ccfg+0x2af414>
		diag ("");
     b80:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     b84:	2013490c 	andscs	r4, r3, ip, lsl #18
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     b88:	0013010b 	andseq	r0, r3, fp, lsl #2
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     b8c:	012e4200 			; <UNDEFINED> instruction: 0x012e4200
		diag ("Leftover RAM: %d bytes",
     b90:	0b3a0e03 	bleq	e843a4 <__ccfg+0xe643fc>
     b94:	0b39053b 	bleq	e42088 <__ccfg+0xe220e0>
     b98:	13490c27 	movtne	r0, #39975	; 0x9c27
     b9c:	13010b20 	movwne	r0, #6944	; 0x1b20
     ba0:	2e430000 	cdpcs	0, 4, cr0, cr3, cr0, {0}
     ba4:	11133101 	tstne	r3, r1, lsl #2
     ba8:	40011201 	andmi	r1, r1, r1, lsl #4
     bac:	0013010a 	andseq	r0, r3, sl, lsl #2
     bb0:	00054400 	andeq	r4, r5, r0, lsl #8
     bb4:	06021331 			; <UNDEFINED> instruction: 0x06021331
     bb8:	34450000 	strbcc	r0, [r5], #-0
     bbc:	02133100 	andseq	r3, r3, #0, 2
     bc0:	46000006 	strmi	r0, [r0], -r6
     bc4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     bc8:	01120111 	tsteq	r2, r1, lsl r1
     bcc:	0b590b58 	bleq	1643934 <__ccfg+0x162398c>
     bd0:	00000b57 	andeq	r0, r0, r7, asr fp
     bd4:	31003447 	tstcc	r0, r7, asr #8
     bd8:	48000013 	stmdami	r0, {r0, r1, r4}
__attribute__ ((noreturn)) void __pi_release () {
     bdc:	1331011d 	teqne	r1, #1073741831	; 0x40000007
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     be0:	06550152 			; <UNDEFINED> instruction: 0x06550152
     be4:	0b590b58 	bleq	164394c <__ccfg+0x16239a4>
	check_stack_overflow;
     be8:	00000b57 	andeq	r0, r0, r7, asr fp
     bec:	31000a49 	tstcc	r0, r9, asr #20
     bf0:	00011113 	andeq	r1, r1, r3, lsl r1
     bf4:	011d4a00 	tsteq	sp, r0, lsl #20
	for_all_tasks (__pi_curr) {
     bf8:	01111331 	tsteq	r1, r1, lsr r3
	update_n_wake (MAX_WORD, NO);
     bfc:	0b580112 	bleq	160104c <__ccfg+0x15e10a4>
     c00:	0b570559 	bleq	15c216c <__ccfg+0x15a21c4>
	for_all_tasks (__pi_curr) {
     c04:	2e4b0000 	cdpcs	0, 4, cr0, cr11, cr0, {0}
     c08:	11133101 	tstne	r3, r1, lsl #2
     c0c:	40011201 	andmi	r1, r1, r1, lsl #4
     c10:	0000000a 	andeq	r0, r0, sl
	system_event_count ++;
     c14:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
  __ASM volatile ("cpsid i" : : : "memory");
     c18:	030b130e 	movweq	r1, #45838	; 0xb30e
	__SLEEP;
     c1c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
     c20:	10011106 	andne	r1, r1, r6, lsl #2
     c24:	02000006 	andeq	r0, r0, #6
     c28:	0b0b0024 	bleq	2c0cc0 <__ccfg+0x2a0d18>
     c2c:	0e030b3e 	vmoveq.16	d3[0], r0
     c30:	16030000 	strne	r0, [r3], -r0
	switch (__pi_systat.effpdm) {
     c34:	3a0e0300 	bcc	38183c <__ccfg+0x361894>
     c38:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c3c:	0013490b 	andseq	r4, r3, fp, lsl #18
     c40:	00240400 	eoreq	r0, r4, r0, lsl #8
  __ASM volatile ("cpsie i" : : : "memory");
     c44:	0b3e0b0b 	bleq	f83878 <__ccfg+0xf638d0>
     c48:	00000803 	andeq	r0, r0, r3, lsl #16
	check_stack_overflow;
     c4c:	03011305 	movweq	r1, #4869	; 0x1305
     c50:	3a0b0b0e 	bcc	2c3890 <__ccfg+0x2a38e8>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c54:	010b3b0b 	tsteq	fp, fp, lsl #22
     c58:	06000013 			; <UNDEFINED> instruction: 0x06000013
     c5c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			(__pi_curr->code) (tstate (__pi_curr));
     c60:	0b381349 	bleq	e0598c <__ccfg+0xde59e4>
	for_all_tasks (__pi_curr) {
     c64:	00000c34 	andeq	r0, r0, r4, lsr ip
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c68:	0b000f07 	bleq	488c <patchGenfskRfe+0x3e4>
     c6c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     c70:	13490026 	movtne	r0, #36902	; 0x9026
     c74:	0f090000 	svceq	0x00090000
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c78:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     c7c:	0a000013 	beq	cd0 <__pi_release+0xf4>
     c80:	0b0b0113 	bleq	2c10d4 <__ccfg+0x2a112c>
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c84:	0b3b0b3a 	bleq	ec3974 <__ccfg+0xea39cc>
     c88:	13010b39 	movwne	r0, #6969	; 0x1b39
     c8c:	0d0b0000 	stceq	0, cr0, [fp, #-0]
     c90:	3a0e0300 	bcc	381898 <__ccfg+0x3618f0>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c94:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c98:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     c9c:	0c00000b 	stceq	0, cr0, [r0], {11}
     ca0:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
			__WFI ();
     ca4:	13011349 	movwne	r1, #4937	; 0x1349
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ca8:	050d0000 	streq	r0, [sp, #-0]
     cac:	00134900 	andseq	r4, r3, r0, lsl #18
     cb0:	01130e00 	tsteq	r3, r0, lsl #28
     cb4:	0b0b0e03 	bleq	2c44c8 <__ccfg+0x2a4520>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cb8:	0b3b0b3a 	bleq	ec39a8 <__ccfg+0xea3a00>
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cbc:	13010b39 	movwne	r0, #6969	; 0x1b39
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cc0:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; cc8 <__pi_release+0xec>
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cc4:	3a0e0300 	bcc	3818cc <__ccfg+0x361924>
     cc8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ccc:	0b13490b 	bleq	4d3100 <__ccfg+0x4b3158>
     cd0:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
     cd4:	000b380b 	andeq	r3, fp, fp, lsl #16
     cd8:	01171000 	tsteq	r7, r0
     cdc:	0b3a0b0b 	bleq	e83910 <__ccfg+0xe63968>
     ce0:	0b390b3b 	bleq	e439d4 <__ccfg+0xe23a2c>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ce4:	00001301 	andeq	r1, r0, r1, lsl #6
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     ce8:	03000d11 	movweq	r0, #3345	; 0xd11
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cec:	3b0b3a0e 	blcc	2cf52c <__ccfg+0x2af584>
     cf0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     cf4:	12000013 	andne	r0, r0, #19
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     cf8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     cfc:	0b3b0b3a 	bleq	ec39ec <__ccfg+0xea3a44>
     d00:	13490b39 	movtne	r0, #39737	; 0x9b39
			SysCtrlSetRechargeBeforePowerDown
     d04:	0d130000 	ldceq	0, cr0, [r3, #-0]
     d08:	3a080300 	bcc	201910 <__ccfg+0x1e1968>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d0c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d10:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     d14:	1400000b 	strne	r0, [r0], #-11
     d18:	13490101 	movtne	r0, #37121	; 0x9101
			__WFI ();
     d1c:	00001301 	andeq	r1, r0, r1, lsl #6
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d20:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
     d24:	000b2f13 	andeq	r2, fp, r3, lsl pc
     d28:	00341600 	eorseq	r1, r4, r0, lsl #12
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d2c:	0b3a0e03 	bleq	e84540 <__ccfg+0xe64598>
     d30:	0b390b3b 	bleq	e43a24 <__ccfg+0xe23a7c>
     d34:	0a021349 	beq	85a60 <__ccfg+0x65ab8>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d38:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
     d3c:	030c3f00 	movweq	r3, #52992	; 0xcf00
     d40:	3b0b3a0e 	blcc	2cf580 <__ccfg+0x2af5d8>
     d44:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d48:	1201110c 	andne	r1, r1, #12, 2
     d4c:	000a4001 	andeq	r4, sl, r1
			while (!(AONWUCPowerStatusGet () &
     d50:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d54:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     d58:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     d5c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d60:	01111349 	tsteq	r1, r9, asr #6
     d64:	0a400112 	beq	10011b4 <__ccfg+0xfe120c>
     d68:	00001301 	andeq	r1, r0, r1, lsl #6
     d6c:	03000519 	movweq	r0, #1305	; 0x519
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d70:	3b0b3a08 	blcc	2cf598 <__ccfg+0x2af5f0>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d74:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     d78:	00060213 	andeq	r0, r6, r3, lsl r2
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d7c:	011d1a00 	tsteq	sp, r0, lsl #20
     d80:	01521331 	cmpeq	r2, r1, lsr r3
			SysCtrlAdjustRechargeAfterPowerDown ();
     d84:	0b580655 	bleq	16026e0 <__ccfg+0x15e2738>
			reinit_uart ();
     d88:	0b570559 	bleq	15c22f4 <__ccfg+0x15a234c>
     d8c:	051b0000 	ldreq	r0, [fp, #-0]
     d90:	02133100 	andseq	r3, r3, #0, 2
     d94:	1c000006 	stcne	0, cr0, [r0], {6}
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d98:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     d9c:	341d0000 	ldrcc	r0, [sp], #-0
     da0:	02133100 	andseq	r3, r3, #0, 2
     da4:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     da8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; cf8 <__pi_release+0x11c>
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dac:	0b3a0e03 	bleq	e845c0 <__ccfg+0xe64618>
     db0:	0b39053b 	bleq	e422a4 <__ccfg+0xe222fc>
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     db4:	01110c27 	tsteq	r1, r7, lsr #24
     db8:	0a400112 	beq	1001208 <__ccfg+0xfe1260>
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     dbc:	00001301 	andeq	r1, r0, r1, lsl #6
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     dc0:	0300341f 	movweq	r3, #1055	; 0x41f
     dc4:	3b0b3a08 	blcc	2cf5ec <__ccfg+0x2af644>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     dc8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     dcc:	00060213 	andeq	r0, r6, r3, lsl r2
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     dd0:	00342000 	eorseq	r2, r4, r0
     dd4:	0b3a0803 	bleq	e82de8 <__ccfg+0xe62e40>
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     dd8:	0b39053b 	bleq	e422cc <__ccfg+0xe22324>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     ddc:	00001349 	andeq	r1, r0, r9, asr #6
			PRCMPowerDomainOff (
     de0:	03003421 	movweq	r3, #1057	; 0x421
     de4:	3b0b3a08 	blcc	2cf60c <__ccfg+0x2af664>
     de8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     dec:	000a0213 	andeq	r0, sl, r3, lsl r2
     df0:	00052200 	andeq	r2, r5, r0, lsl #4
	__SLEEP;
     df4:	0b3a0e03 	bleq	e84608 <__ccfg+0xe64660>
     df8:	0b39053b 	bleq	e422ec <__ccfg+0xe22344>
     dfc:	06021349 	streq	r1, [r2], -r9, asr #6
	goto Redo;
     e00:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
     e04:	030c3f01 	movweq	r3, #52993	; 0xcf01
     e08:	3b0b3a0e 	blcc	2cf648 <__ccfg+0x2af6a0>
     e0c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     e10:	2013490c 	andscs	r4, r3, ip, lsl #18
     e14:	0013010b 	andseq	r0, r3, fp, lsl #2
     e18:	00052400 	andeq	r2, r5, r0, lsl #8
     e1c:	0b3a0e03 	bleq	e84630 <__ccfg+0xe64688>
     e20:	0b39053b 	bleq	e42314 <__ccfg+0xe2236c>
     e24:	00001349 	andeq	r1, r0, r9, asr #6
     e28:	03000525 	movweq	r0, #1317	; 0x525
     e2c:	3b0b3a08 	blcc	2cf654 <__ccfg+0x2af6ac>
     e30:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     e34:	26000013 			; <UNDEFINED> instruction: 0x26000013
     e38:	0111010b 	tsteq	r1, fp, lsl #2
     e3c:	00000112 	andeq	r0, r0, r2, lsl r1
     e40:	03003427 	movweq	r3, #1063	; 0x427
int main (void) {
     e44:	3b0b3a0e 	blcc	2cf684 <__ccfg+0x2af6dc>
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e48:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     e4c:	000a0213 	andeq	r0, sl, r3, lsl r2
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e50:	000a2800 	andeq	r2, sl, r0, lsl #16
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e54:	0b3a0e03 	bleq	e84668 <__ccfg+0xe646c0>
	system_init ();
     e58:	0b39053b 	bleq	e4234c <__ccfg+0xe223a4>
	tcv_init ();
     e5c:	00000111 	andeq	r0, r0, r1, lsl r1
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e60:	31011d29 	tstcc	r1, r9, lsr #26
     e64:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     e68:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e6c:	000b5705 	andeq	r5, fp, r5, lsl #14
     e70:	00052a00 	andeq	r2, r5, r0, lsl #20
     e74:	00001331 	andeq	r1, r0, r1, lsr r3
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e78:	0300052b 	movweq	r0, #1323	; 0x52b
     e7c:	3b0b3a08 	blcc	2cf6a4 <__ccfg+0x2af6fc>
     e80:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     e84:	000a0213 	andeq	r0, sl, r3, lsl r2
	delay (16, 0);
     e88:	00182c00 	andseq	r2, r8, r0, lsl #24
     e8c:	342d0000 	strtcc	r0, [sp], #-0
	__pi_release ();
     e90:	3a0e0300 	bcc	381a98 <__ccfg+0x361af0>
     e94:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e98:	0013490b 	andseq	r4, r3, fp, lsl #18
     e9c:	012e2e00 			; <UNDEFINED> instruction: 0x012e2e00
     ea0:	0b3a0803 	bleq	e82eb4 <__ccfg+0xe62f0c>
     ea4:	0b39053b 	bleq	e42398 <__ccfg+0xe223f0>
static void killev (__pi_pcb_t *pid) {
     ea8:	13490c27 	movtne	r0, #39975	; 0x9c27
	wfun = (aword)(pid->code);
     eac:	01120111 	tsteq	r2, r1, lsl r1
	for_all_tasks (i) {
     eb0:	13010a40 	movwne	r0, #6720	; 0x1a40
		for (j = 0; j < nevents (i); j++) {
     eb4:	2e2f0000 	cdpcs	0, 2, cr0, cr15, cr0, {0}
     eb8:	3a080301 	bcc	201ac4 <__ccfg+0x1e1b1c>
     ebc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			    || i->Events [j] . Event == wfun
     ec0:	110c270b 	tstne	ip, fp, lsl #14
		for (j = 0; j < nevents (i); j++) {
     ec4:	40011201 	andmi	r1, r1, r1, lsl #4
			if (i->Events [j] . Event == (aword)pid
     ec8:	0013010a 	andseq	r0, r3, sl, lsl #2
     ecc:	012e3000 			; <UNDEFINED> instruction: 0x012e3000
     ed0:	0b3a0e03 	bleq	e846e4 <__ccfg+0xe6473c>
				wakeupev (i, j);
     ed4:	0b390b3b 	bleq	e43bc8 <__ccfg+0xe23c20>
     ed8:	01110c27 	tsteq	r1, r7, lsr #24
	for_all_tasks (i) {
     edc:	0a400112 	beq	100132c <__ccfg+0xfe1384>
}
     ee0:	00001301 	andeq	r1, r0, r1, lsl #6
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     ee4:	03000531 	movweq	r0, #1329	; 0x531
static void qfree (aword *ch) {
     ee8:	3b0b3a08 	blcc	2cf710 <__ccfg+0x2af768>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     eec:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	cc = (aword*)(mpools + MA_NP);
     ef0:	00060213 	andeq	r0, r6, r3, lsl r2
	m_setnextp (ch, chunk);
     ef4:	012e3200 			; <UNDEFINED> instruction: 0x012e3200
	m_setnextp (cc, ch);
     ef8:	0b3a0e03 	bleq	e8470c <__ccfg+0xe64764>
}
     efc:	0b390b3b 	bleq	e43bf0 <__ccfg+0xe23c48>
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f00:	13490c27 	movtne	r0, #39975	; 0x9c27
     f04:	13010b20 	movwne	r0, #6944	; 0x1b20
     f08:	05330000 	ldreq	r0, [r3, #-0]!
			m_setnextp (cc, m_nextp (chunk));
     f0c:	3a080300 	bcc	201b14 <__ccfg+0x1e1b6c>
			m_size (chunk) += m_hdrlen + m_size (ch);
     f10:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f14:	0013490b 	andseq	r4, r3, fp, lsl #18
     f18:	00343400 	eorseq	r3, r4, r0, lsl #8
     f1c:	0b3a0803 	bleq	e82f30 <__ccfg+0xe62f88>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f20:	0b390b3b 	bleq	e43c14 <__ccfg+0xe23c6c>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f24:	00001349 	andeq	r1, r0, r9, asr #6
     f28:	03012e35 	movweq	r2, #7733	; 0x1e35
     f2c:	3b0b3a08 	blcc	2cf754 <__ccfg+0x2af7ac>
			m_setnextp (cc, m_nextp (chunk));
     f30:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
			m_size (ch) += m_hdrlen + m_size (chunk);
     f34:	1201110c 	andne	r1, r1, #12, 2
     f38:	010a4001 	tsteq	sl, r1
     f3c:	36000013 			; <UNDEFINED> instruction: 0x36000013
     f40:	0803012e 	stmdaeq	r3, {r1, r2, r3, r5, r8}
     f44:	0b3b0b3a 	bleq	ec3c34 <__ccfg+0xea3c8c>
     f48:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			if (m_size (chunk) >= m_size (ch))
     f4c:	13010b20 	movwne	r0, #6944	; 0x1b20
     f50:	2e370000 	cdpcs	0, 3, cr0, cr7, cr0, {0}
     f54:	11133101 	tstne	r3, r1, lsl #2
		chunk = m_nextp (chunk))
     f58:	40011201 	andmi	r1, r1, r1, lsl #4
     f5c:	0013010a 	andseq	r0, r3, sl, lsl #2
     f60:	00053800 	andeq	r3, r5, r0, lsl #16
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f64:	0a021331 	beq	85c30 <__ccfg+0x65c88>
	diag_wait (a);
     f68:	1d390000 	ldcne	0, cr0, [r9, #-0]
	diag_wchar (c, a);
     f6c:	11133101 	tstne	r3, r1, lsl #2
}
     f70:	58011201 	stmdapl	r1, {r0, r9, ip}
     f74:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
	syserror (ESTATE, "state");
     f78:	3a00000b 	bcc	fac <utimer_add+0x24>
     f7c:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
     f80:	01120111 	tsteq	r2, r1, lsl r1
     f84:	00000a40 	andeq	r0, r0, r0, asr #20
	for (i = 0; i < MAX_UTIMERS; i++)
     f88:	01110100 	tsteq	r1, r0, lsl #2
void utimer_add (address ut) {
     f8c:	0b130e25 	bleq	4c4828 <__ccfg+0x4a4880>
     f90:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
		if (__pi_utims [i] == NULL)
     f94:	01110655 	tsteq	r1, r5, asr r6
	for (i = 0; i < MAX_UTIMERS; i++)
     f98:	00000610 	andeq	r0, r0, r0, lsl r6
     f9c:	0b002402 	bleq	9fac <__exidx_end+0x507f>
		syserror (ERESOURCE, "ut a");
     fa0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
	__pi_utims [i] = ut;
     fa4:	0300000e 	movweq	r0, #14
}
     fa8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     fac:	0b3b0b3a 	bleq	ec3c9c <__ccfg+0xea3cf4>
     fb0:	13490b39 	movtne	r0, #39737	; 0x9b39
	*t = v;
     fb4:	24040000 	strcs	r0, [r4], #-0
	TCI_RUN_AUXILIARY_TIMER;
     fb8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
void update_n_wake (word min, Boolean force) {
     fbc:	0008030b 	andeq	r0, r8, fp, lsl #6
	if (TCI_UPDATE_DELAY_TICKS (force))
     fc0:	000f0500 	andeq	r0, pc, r0, lsl #10
     fc4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     fc8:	26060000 	strcs	r0, [r6], -r0
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fcc:	00134900 	andseq	r4, r3, r0, lsl #18
     fd0:	00150700 	andseq	r0, r5, r0, lsl #14
     fd4:	00000c27 	andeq	r0, r0, r7, lsr #24
     fd8:	03003408 	movweq	r3, #1032	; 0x408
     fdc:	3b0b3a0e 	blcc	2cf81c <__ccfg+0x2af874>
     fe0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     fe4:	3c0c3f13 	stccc	15, cr3, [ip], {19}
     fe8:	0900000c 	stmdbeq	r0, {r2, r3}
     fec:	13490101 	movtne	r0, #37121	; 0x9101
     ff0:	00001301 	andeq	r1, r0, r1, lsl #6
     ff4:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
     ff8:	000b2f13 	andeq	r2, fp, r3, lsl pc
     ffc:	00340b00 	eorseq	r0, r4, r0, lsl #22
		for_all_tasks (i) {
    1000:	0b3a0e03 	bleq	e84814 <__ccfg+0xe6486c>
	__pi_mintk = znew + min;
    1004:	0b390b3b 	bleq	e43cf8 <__ccfg+0xe23d50>
    1008:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; eec <qfree+0x8>
			if (!twaiting (i))
    100c:	00000a02 	andeq	r0, r0, r2, lsl #20
    1010:	03002e0c 	movweq	r2, #3596	; 0xe0c
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1014:	3b0b3a0e 	blcc	2cf854 <__ccfg+0x2af8ac>
    1018:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    101c:	1201110c 	andne	r1, r1, #12, 2
    1020:	000a4001 	andeq	r4, sl, r1
    1024:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
    1028:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    102c:	0b3b0b3a 	bleq	ec3d1c <__ccfg+0xea3d74>
    1030:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1034:	01120111 	tsteq	r2, r1, lsl r1
    1038:	00000a40 	andeq	r0, r0, r0, asr #20
    103c:	0300340e 	movweq	r3, #1038	; 0x40e
    1040:	3b0b3a0e 	blcc	2cf880 <__ccfg+0x2af8d8>
				wakeuptm (i);
    1044:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1048:	00000013 	andeq	r0, r0, r3, lsl r0
		for_all_tasks (i) {
    104c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
				d = i->Timer - znew;
    1050:	030b130e 	movweq	r1, #45838	; 0xb30e
    1054:	100e1b0e 	andne	r1, lr, lr, lsl #22
    1058:	02000006 	andeq	r0, r0, #6
		if ((word)(__pi_mintk - znew) < min) 
    105c:	0b0b0024 	bleq	2c10f4 <__ccfg+0x2a114c>
    1060:	0e030b3e 	vmoveq.16	d3[0], r0
    1064:	16030000 	strne	r0, [r3], -r0
	__pi_old = znew;
    1068:	3a0e0300 	bcc	381c70 <__ccfg+0x361cc8>
}
    106c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	TCI_RUN_DELAY_TIMER;
    1070:	0013490b 	andseq	r4, r3, fp, lsl #18
}
    1074:	00240400 	eoreq	r0, r4, r0, lsl #8
    1078:	0b3e0b0b 	bleq	f83cac <__ccfg+0xf63d04>
    107c:	00000803 	andeq	r0, r0, r3, lsl #16
    1080:	0b011305 	bleq	45c9c <__ccfg+0x25cf4>
    1084:	3b0b3a0b 	blcc	2cf8b8 <__ccfg+0x2af910>
void proceed (word state) {
    1088:	010b390b 	tsteq	fp, fp, lsl #18
	prcdstate (__pi_curr, state);
    108c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1090:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	release;
    1094:	0b3b0b3a 	bleq	ec3d84 <__ccfg+0xea3ddc>
    1098:	13490b39 	movtne	r0, #39737	; 0x9b39
void __pi_wait (aword event, word state) {
    109c:	00000b38 	andeq	r0, r0, r8, lsr fp
	sint j = nevents (__pi_curr);
    10a0:	49002607 	stmdbmi	r0, {r0, r1, r2, r9, sl, sp}
	if (j >= MAX_EVENTS_PER_TASK)
    10a4:	08000013 	stmdaeq	r0, {r0, r1, r4}
    10a8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    10ac:	0b3b0b3a 	bleq	ec3d9c <__ccfg+0xea3df4>
		syserror (ENEVENTS, "sw");
    10b0:	13490b39 	movtne	r0, #39737	; 0x9b39
    10b4:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	setestate (__pi_curr->Events [j], state, event);
    10b8:	34090000 	strcc	r0, [r9], #-0
	incwait (__pi_curr);
    10bc:	3a134700 	bcc	4d2cc4 <__ccfg+0x4b2d1c>
	setestate (__pi_curr->Events [j], state, event);
    10c0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    10c4:	000a020b 	andeq	r0, sl, fp, lsl #4
    10c8:	11010000 	mrsne	r0, (UNDEF: 1)
    10cc:	130e2501 	movwne	r2, #58625	; 0xe501
void __pi_trigger (aword event) {
    10d0:	1b0e030b 	blne	381d04 <__ccfg+0x361d5c>
	for_all_tasks (i) {
    10d4:	1106550e 	tstne	r6, lr, lsl #10
		for (j = 0; j < nevents (i); j++) {
    10d8:	00061001 	andeq	r1, r6, r1
    10dc:	00240200 	eoreq	r0, r4, r0, lsl #4
    10e0:	0b3e0b0b 	bleq	f83d14 <__ccfg+0xf63d6c>
    10e4:	00000e03 	andeq	r0, r0, r3, lsl #28
			if (i->Events [j] . Event == event) {
    10e8:	03001603 	movweq	r1, #1539	; 0x603
    10ec:	3b0b3a0e 	blcc	2cf92c <__ccfg+0x2af984>
    10f0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				wakeupev (i, j);
    10f4:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    10f8:	0b0b0024 	bleq	2c1190 <__ccfg+0x2a11e8>
	for_all_tasks (i) {
    10fc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
}
    1100:	26050000 	strcs	r0, [r5], -r0
aword __pi_join (aword pid, word st) {
    1104:	00134900 	andseq	r4, r3, r0, lsl #18
	for_all_tasks (i) {
    1108:	000f0600 	andeq	r0, pc, r0, lsl #12
    110c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
	return 0;
    1110:	13070000 	movwne	r0, #28672	; 0x7000
		if ((aword)i == pid) {
    1114:	3a0b0b01 	bcc	2c3d20 <__ccfg+0x2a3d78>
			__pi_wait (pid, st);
    1118:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    111c:	0013010b 	andseq	r0, r3, fp, lsl #2
	for_all_tasks (i) {
    1120:	000d0800 	andeq	r0, sp, r0, lsl #16
    1124:	0b3a0e03 	bleq	e84938 <__ccfg+0xe64990>
void delay (word d, word state) {
    1128:	0b390b3b 	bleq	e43e1c <__ccfg+0xe23e74>
	settstate (__pi_curr, state);
    112c:	0b0b1349 	bleq	2c5e58 <__ccfg+0x2a5eb0>
    1130:	0b0c0b0d 	bleq	303d6c <__ccfg+0x2e3dc4>
    1134:	00000b38 	andeq	r0, r0, r8, lsr fp
    1138:	49010109 	stmdbmi	r1, {r0, r3, r8}
	update_n_wake (d, YES);
    113c:	00130113 	andseq	r0, r3, r3, lsl r1
    1140:	00210a00 	eoreq	r0, r1, r0, lsl #20
	__pi_curr->Timer = __pi_old + d;
    1144:	340b0000 	strcc	r0, [fp], #-0
    1148:	3a0e0300 	bcc	381d50 <__ccfg+0x361da8>
	inctimer (__pi_curr);
    114c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1150:	3f13490b 	svccc	0x0013490b
    1154:	000c3c0c 	andeq	r3, ip, ip, lsl #24
}
    1158:	00210c00 	eoreq	r0, r1, r0, lsl #24
    115c:	0b2f1349 	bleq	bc5e88 <__ccfg+0xba5ee0>
	if (fun == NULL)
    1160:	340d0000 	strcc	r0, [sp], #-0
		return (int) __pi_curr;
    1164:	3a134700 	bcc	4d2d6c <__ccfg+0x4b2dc4>
    1168:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	for_all_tasks (i)
    116c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
}
    1170:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
		if (i->code == fun)
    1174:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 10c4 <__pi_wait+0x28>
	for_all_tasks (i)
    1178:	0b3a0e03 	bleq	e8498c <__ccfg+0xe649e4>
    117c:	0b390b3b 	bleq	e43e70 <__ccfg+0xe23ec8>
    1180:	01110c27 	tsteq	r1, r7, lsr #24
int __pi_strlen (const char *s) {
    1184:	0a400112 	beq	10015d4 <__ccfg+0xfe162c>
	for (i = 0; *(s+i) != '\0'; i++);
    1188:	00001301 	andeq	r1, r0, r1, lsl #6
}
    118c:	0300050f 	movweq	r0, #1295	; 0x50f
	for (i = 0; *(s+i) != '\0'; i++);
    1190:	3b0b3a08 	blcc	2cf9b8 <__ccfg+0x2afa10>
	while ((Boolean)(*d++ = *s++));
    1194:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1198:	00060213 	andeq	r0, r6, r3, lsl r2
    119c:	00051000 	andeq	r1, r5, r0
}
    11a0:	0b3a0e03 	bleq	e849b4 <__ccfg+0xe64a0c>
	while (n--)
    11a4:	0b390b3b 	bleq	e43e98 <__ccfg+0xe23ef0>
    11a8:	06021349 	streq	r1, [r2], -r9, asr #6
		*dest++ = *src++;
    11ac:	34110000 	ldrcc	r0, [r1], #-0
    11b0:	3a080300 	bcc	201db8 <__ccfg+0x1e1e10>
    11b4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		*dest++ = c;
    11b8:	0013490b 	andseq	r4, r3, fp, lsl #18
void adddevfunc (devreqfun_t rf, int loc) {
    11bc:	00341200 	eorseq	r1, r4, r0, lsl #4
		syserror (EREQPAR, "addv");
    11c0:	0b3a0803 	bleq	e831d4 <__ccfg+0xe6322c>
		syserror (ERESOURCE, "addv");
    11c4:	0b390b3b 	bleq	e43eb8 <__ccfg+0xe23f10>
	if (ioreq [loc] != NULL)
    11c8:	06021349 	streq	r1, [r2], -r9, asr #6
    11cc:	1d130000 	ldcne	0, cr0, [r3, #-0]
		syserror (ERESOURCE, "addv");
    11d0:	11133100 	tstne	r3, r0, lsl #2
	ioreq [loc] = rf;
    11d4:	58011201 	stmdapl	r1, {r0, r9, ip}
}
    11d8:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    11dc:	1400000b 	strne	r0, [r0], #-11
sint io (word retry, word dev, word operation, char *buf, word len) {
    11e0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    11e4:	06550152 			; <UNDEFINED> instruction: 0x06550152
    11e8:	0b590b58 	bleq	1643f50 <__ccfg+0x1623fa8>
    11ec:	00000b57 	andeq	r0, r0, r7, asr fp
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11f0:	31000515 	tstcc	r0, r5, lsl r5
    11f4:	00060213 	andeq	r0, r6, r3, lsl r2
    11f8:	002e1600 	eoreq	r1, lr, r0, lsl #12
		syserror (ENODEVICE, "io");
    11fc:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1200:	0b3b0b3a 	bleq	ec3ef0 <__ccfg+0xea3f48>
	if (len == 0)
    1204:	01110b39 	tsteq	r1, r9, lsr fp
	ret = (ioreq [dev]) (operation, buf, len);
    1208:	0a400112 	beq	1001658 <__ccfg+0xfe16b0>
    120c:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
	if (ret >= 0)
    1210:	3a0e0300 	bcc	381e18 <__ccfg+0x361e70>
	if (ret == -1) {
    1214:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1218:	200c270b 	andcs	r2, ip, fp, lsl #14
		if (retry == WNONE)
    121c:	1800000b 	stmdane	r0, {r0, r1, r3}
		iowait (dev, operation, retry);
    1220:	0e03012e 	adfeqsp	f0, f3, #0.5
    1224:	0b3b0b3a 	bleq	ec3f14 <__ccfg+0xea3f6c>
    1228:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			release;
    122c:	0b201349 	bleq	805f58 <__ccfg+0x7e5fb0>
	if (ret == -2) {
    1230:	05190000 	ldreq	r0, [r9, #-0]
			(ioreq [dev]) (NONE, buf, len);
    1234:	3a0e0300 	bcc	381e3c <__ccfg+0x361e94>
		if (retry != WNONE) {
    1238:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			iowait (dev, operation, retry);
    123c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1240:	11010000 	mrsne	r0, (UNDEF: 1)
			(ioreq [dev]) (NONE, buf, len);
    1244:	130e2501 	movwne	r2, #58625	; 0xe501
    1248:	1b0e030b 	blne	381e7c <__ccfg+0x361ed4>
    124c:	1106550e 	tstne	r6, lr, lsl #10
		(ioreq [dev]) (NONE, buf, len);
    1250:	00061001 	andeq	r1, r6, r1
    1254:	00240200 	eoreq	r0, r4, r0, lsl #4
    1258:	0b3e0b0b 	bleq	f83e8c <__ccfg+0xf63ee4>
}
    125c:	00000e03 	andeq	r0, r0, r3, lsl #28
	if (retry != WNONE) {
    1260:	03001603 	movweq	r1, #1539	; 0x603
		delay (-ret - 2, retry);
    1264:	3b0b3a0e 	blcc	2cfaa4 <__ccfg+0x2afafc>
    1268:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    126c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1270:	0b0b0024 	bleq	2c1308 <__ccfg+0x2a1360>
		release;
    1274:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1278:	26050000 	strcs	r0, [r5], -r0
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    127c:	00134900 	andseq	r4, r3, r0, lsl #18
    1280:	01010600 	tsteq	r1, r0, lsl #12
    1284:	13011349 	movwne	r1, #4937	; 0x1349
    1288:	21070000 	mrscs	r0, (UNDEF: 7)
    128c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
		syserror (ERESOURCE, "mal1");
    1290:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1294:	0b3b0b3a 	bleq	ec3f84 <__ccfg+0xea3fdc>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1298:	13490b39 	movtne	r0, #39737	; 0x9b39
    129c:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12a0:	0f090000 	svceq	0x00090000
	m_size (mpools [0]) = mlen - m_hdrlen;
    12a4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12a8:	0a000013 	beq	12fc <__pi_free+0x30>
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12ac:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    12b0:	00001301 	andeq	r1, r0, r1, lsl #6
}
    12b4:	4900050b 	stmdbmi	r0, {r0, r1, r3, r8, sl}
    12b8:	0c000013 	stceq	0, cr0, [r0], {19}
    12bc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    12c0:	0b3b0b3a 	bleq	ec3fb0 <__ccfg+0xea4008>
    12c4:	13490b39 	movtne	r0, #39737	; 0x9b39
    12c8:	00000a02 	andeq	r0, r0, r2, lsl #20
void __pi_free (aword *ch) {
    12cc:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12d0:	000b2f13 	andeq	r2, fp, r3, lsl pc
    12d4:	00340e00 	eorseq	r0, r4, r0, lsl #28
		syserror (EMALLOC, "malg");
    12d8:	0b3a1347 	bleq	e85ffc <__ccfg+0xe66054>
    12dc:	0b390b3b 	bleq	e43fd0 <__ccfg+0xe24028>
	mcfree [MA_NP] += m_size (ch);
    12e0:	0a021349 	beq	8600c <__ccfg+0x66064>
		m_size (ch) ^= MALLOC_UMASK;
    12e4:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    12e8:	030c3f01 	movweq	r3, #52993	; 0xcf01
	mcfree [MA_NP] += m_size (ch);
    12ec:	3b0b3a0e 	blcc	2cfb2c <__ccfg+0x2afb84>
	QFREE;
    12f0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
	if (mevent [MA_NP] . nwait) {
    12f4:	1201110c 	andne	r1, r1, #12, 2
    12f8:	010a4001 	tsteq	sl, r1
		trigger ((aword)(&(mevent [MA_NP])));
    12fc:	10000013 	andne	r0, r0, r3, lsl r0
		mevent [MA_NP] . nwait --;
    1300:	08030005 	stmdaeq	r3, {r0, r2}
}
    1304:	0b3b0b3a 	bleq	ec3ff4 <__ccfg+0xea404c>
    1308:	13490b39 	movtne	r0, #39737	; 0x9b39
    130c:	00000602 	andeq	r0, r0, r2, lsl #12
    1310:	03000511 	movweq	r0, #1297	; 0x511
void kill (aword pid) {
    1314:	3b0b3a0e 	blcc	2cfb54 <__ccfg+0x2afbac>
		pid = (aword) __pi_curr;
    1318:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	j = NULL;
    131c:	00060213 	andeq	r0, r6, r3, lsl r2
	for_all_tasks (i) {
    1320:	000a1200 	andeq	r1, sl, r0, lsl #4
	syserror (EREQPAR, "kpi");
    1324:	0b3a0e03 	bleq	e84b38 <__ccfg+0xe64b90>
    1328:	0b390b3b 	bleq	e4401c <__ccfg+0xe24074>
		if ((aword)i == pid) {
    132c:	00000111 	andeq	r0, r0, r1, lsl r1
    1330:	31011d13 	tstcc	r1, r3, lsl sp
				__PCB = i->Next;
    1334:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
			killev (i);
    1338:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
			ufree (i);
    133c:	010b570b 	tsteq	fp, fp, lsl #14
			if (i == __pi_curr)
    1340:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    1344:	13310005 	teqne	r1, #5
				release;
    1348:	1d150000 	ldcne	0, cr0, [r5, #-0]
				j->Next = i->Next;
    134c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    1350:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
				__PCB = i->Next;
    1354:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
}
    1358:	1600000b 	strne	r0, [r0], -fp
    135c:	0e03012e 	adfeqsp	f0, f3, #0.5
    1360:	0b3b0b3a 	bleq	ec4050 <__ccfg+0xea40a8>
	if (size < 8)
    1364:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		_size = 2;
    1368:	0b201349 	bleq	806094 <__ccfg+0x7e60ec>
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    136c:	05170000 	ldreq	r0, [r7, #-0]
		_size = (((aword)size) + 3) >> 2;
    1370:	3a0e0300 	bcc	381f78 <__ccfg+0x361fd0>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1374:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		_size = (((aword)size) + 3) >> 2;
    1378:	0013490b 	andseq	r4, r3, fp, lsl #18
		if (mevent [MA_NP] . nfail != 255)
    137c:	11010000 	mrsne	r0, (UNDEF: 1)
    1380:	130e2501 	movwne	r2, #58625	; 0xe501
			mevent [MA_NP] . nfail ++;
    1384:	1b0e030b 	blne	381fb8 <__ccfg+0x362010>
		mnfree [MA_NP] = 0;
    1388:	1106550e 	tstne	r6, lr, lsl #10
    138c:	00061001 	andeq	r1, r6, r1
		if (m_magic (chunk) != MALLOC_MAGIC)
    1390:	00240200 	eoreq	r0, r4, r0, lsl #4
    1394:	0b3e0b0b 	bleq	f83fc8 <__ccfg+0xf64020>
			syserror (EMALLOC, "malc");
    1398:	00000e03 	andeq	r0, r0, r3, lsl #28
    139c:	03001603 	movweq	r1, #1539	; 0x603
		if (m_size (chunk) >= _size)
    13a0:	3b0b3a0e 	blcc	2cfbe0 <__ccfg+0x2afc38>
    13a4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		chunk = m_nextp (chunk)) {
    13a8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
		m_setnextp (cc, m_nextp (chunk));
    13ac:	0b0b0024 	bleq	2c1444 <__ccfg+0x2a149c>
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    13b0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    13b4:	26050000 	strcs	r0, [r5], -r0
			m_size (chunk) = _size;
    13b8:	00134900 	andseq	r4, r3, r0, lsl #18
			cc = chunk + _size + m_hdrlen;
    13bc:	000f0600 	andeq	r0, pc, r0, lsl #12
    13c0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
			m_size (cc) = waste - m_hdrlen;
    13c4:	34070000 	strcc	r0, [r7], #-0
			QFREE;
    13c8:	3a0e0300 	bcc	381fd0 <__ccfg+0x362028>
		mevent [MA_NP] . nfail = 0;
    13cc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		mcfree [MA_NP] -= m_size (chunk);
    13d0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    13d4:	0800000a 	stmdaeq	r0, {r1, r3}
    13d8:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 1328 <kill+0x14>
    13dc:	0b3a0e03 	bleq	e84bf0 <__ccfg+0xe64c48>
		m_size (chunk) |= MALLOC_UMASK;
    13e0:	0b390b3b 	bleq	e440d4 <__ccfg+0xe2412c>
		if (mnfree [MA_NP] > mcfree [MA_NP])
    13e4:	01120111 	tsteq	r2, r1, lsl r1
		m_size (chunk) |= MALLOC_UMASK;
    13e8:	00000a40 	andeq	r0, r0, r0, asr #20
			mnfree [MA_NP] = mcfree [MA_NP];
    13ec:	3f012e09 	svccc	0x00012e09
}
    13f0:	3a0e030c 	bcc	382028 <__ccfg+0x362080>
    13f4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    13f8:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    13fc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1400:	010a4001 	tsteq	sl, r1
    1404:	0a000013 	beq	1458 <diag>
    1408:	08030005 	stmdaeq	r3, {r0, r2}
aword __pi_fork (fsmcode func, aword data) {
    140c:	0b3b0b3a 	bleq	ec40fc <__ccfg+0xea4154>
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1410:	13490b39 	movtne	r0, #39737	; 0x9b39
    1414:	00000602 	andeq	r0, r0, r2, lsl #12
    1418:	0300050b 	movweq	r0, #1291	; 0x50b
		if ((j = __PCB) == NULL)
    141c:	3b0b3a08 	blcc	2cfc44 <__ccfg+0x2afc9c>
	i->Next = NULL;
    1420:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	i->data = data;
    1424:	000a0213 	andeq	r0, sl, r3, lsl r2
		if ((j = __PCB) == NULL)
    1428:	012e0c00 			; <UNDEFINED> instruction: 0x012e0c00
}
    142c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
			for (; j->Next != NULL; j = j->Next);
    1430:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1434:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	return (aword) i;
    1438:	01111349 	tsteq	r1, r9, asr #6
    143c:	0a400112 	beq	100188c <__ccfg+0xfe18e4>
	if (mevent [MA_NP] . nwait != 255)
    1440:	00001301 	andeq	r1, r0, r1, lsl #6
    1444:	0300050d 	movweq	r0, #1293	; 0x50d
    1448:	3b0b3a08 	blcc	2cfc70 <__ccfg+0x2afcc8>
		mevent [MA_NP] . nwait ++;
    144c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	wait ((aword)(&(mevent [MA_NP])), state);
    1450:	00060213 	andeq	r0, r6, r3, lsl r2
    1454:	002e0e00 	eoreq	r0, lr, r0, lsl #28
void diag (const char *mess, ...) {
    1458:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    145c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1460:	01110b39 	tsteq	r1, r9, lsr fp
	diag_disable_int (a, is);
    1464:	0a400112 	beq	10018b4 <__ccfg+0xfe190c>
    1468:	340f0000 	strcc	r0, [pc], #-0	; 1470 <diag+0x18>
    146c:	3a080300 	bcc	202074 <__ccfg+0x1e20cc>
					d /= 10;
    1470:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	diag_disable_int (a, is);
    1474:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
				d = (bc == 16) ? 10000 : 1000000000;
    1478:	10000006 	andne	r0, r0, r6
	while (*mess != '\0') {
    147c:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
	dgout ('\r');
    1480:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	dgout ('\n');
    1484:	01110b39 	tsteq	r1, r9, lsr fp
    1488:	1d110000 	ldcne	0, cr0, [r1, #-0]
    148c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
	diag_wait (a);
    1490:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
	diag_enable_int (a, is);
    1494:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    1498:	0013010b 	andseq	r0, r3, fp, lsl #2
    149c:	00051200 	andeq	r1, r5, r0, lsl #4
}
    14a0:	00001331 	andeq	r1, r0, r1, lsr r3
    14a4:	31011d13 	tstcc	r1, r3, lsl sp
    14a8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
			mess++;
    14ac:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
		if (*mess == '%') {
    14b0:	000b5705 	andeq	r5, fp, r5, lsl #14
			if (*mess == 'l') {
    14b4:	00051400 	andeq	r1, r5, r0, lsl #8
				mess++;
    14b8:	0b3a0e03 	bleq	e84ccc <__ccfg+0xe64d24>
    14bc:	0b390b3b 	bleq	e441b0 <__ccfg+0xe24208>
				bc = 32;
    14c0:	06021349 	streq	r1, [r2], -r9, asr #6
				val = va_arg (ap, lword);
    14c4:	0a150000 	beq	5414cc <__ccfg+0x521524>
				bc = 16;
    14c8:	3a0e0300 	bcc	3820d0 <__ccfg+0x362128>
			switch (*mess) {
    14cc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    14d0:	0001110b 	andeq	r1, r1, fp, lsl #2
    14d4:	011d1600 	tsteq	sp, r0, lsl #12
    14d8:	01521331 	cmpeq	r2, r1, lsr r3
				dgout ('%');
    14dc:	0b580655 	bleq	1602e38 <__ccfg+0x15e2e90>
    14e0:	0b570b59 	bleq	15c424c <__ccfg+0x15a42a4>
				dgout (*mess);
    14e4:	05170000 	ldreq	r0, [r7, #-0]
    14e8:	02133100 	andseq	r3, r3, #0, 2
			switch (*mess) {
    14ec:	18000006 	stmdane	r0, {r1, r2}
					v = __pi_hex_enc_table [
    14f0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
					i += 4;
    14f4:	06550152 			; <UNDEFINED> instruction: 0x06550152
					(val >> (bc - i)) & 0xf];
    14f8:	0b590b58 	bleq	1644260 <__ccfg+0x16242b8>
    14fc:	13010b57 	movwne	r0, #6999	; 0x1b57
					dgout (v);
    1500:	1d190000 	ldcne	0, cr0, [r9, #-0]
    1504:	11133101 	tstne	r3, r1, lsl #2
				while (i < bc) {
    1508:	58011201 	stmdapl	r1, {r0, r9, ip}
			mess++;
    150c:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
					d /= 10;
    1510:	1a00000b 	bne	1544 <diag+0xec>
				if ((val >> (bc - 1)) & 1) {
    1514:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 1464 <diag+0xc>
    1518:	0b3a0e03 	bleq	e84d2c <__ccfg+0xe64d84>
					dgout ('-');
    151c:	0b390b3b 	bleq	e44210 <__ccfg+0xe24268>
    1520:	01111349 	tsteq	r1, r9, asr #6
						val |= 0xffff0000;
    1524:	0a400112 	beq	1001974 <__ccfg+0xfe19cc>
    1528:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    152c:	3a0e0301 	bcc	382138 <__ccfg+0x362190>
				d = (bc == 16) ? 10000 : 1000000000;
    1530:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1534:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
    1538:	010a4001 	tsteq	sl, r1
					v = (word) (val / d);
    153c:	1c000013 	stcne	0, cr0, [r0], {19}
					if (v || d == 1) break;
    1540:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    1544:	0b3b0b3a 	bleq	ec4234 <__ccfg+0xea428c>
					d /= 10;
    1548:	0b200b39 	bleq	804234 <__ccfg+0x7e428c>
				d = (bc == 16) ? 10000 : 1000000000;
    154c:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
					dgout (v + '0');
    1550:	3a0e0301 	bcc	38215c <__ccfg+0x3621b4>
    1554:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1558:	110c270b 	tstne	ip, fp, lsl #14
					d /= 10;
    155c:	40011201 	andmi	r1, r1, r1, lsl #4
					val = val - (v * d);
    1560:	0013010a 	andseq	r0, r3, sl, lsl #2
					if (d == 0) break;
    1564:	010b1e00 	tsteq	fp, r0, lsl #28
					v = (word) (val / d);
    1568:	00000655 	andeq	r0, r0, r5, asr r6
    156c:	3100341f 	tstcc	r0, pc, lsl r4
				if (bc == 16)
    1570:	00060213 	andeq	r0, r6, r3, lsl r2
					val &= 0xffff;
    1574:	012e2000 			; <UNDEFINED> instruction: 0x012e2000
				d = (bc == 16) ? 10000 : 1000000000;
    1578:	0b3a0e03 	bleq	e84d8c <__ccfg+0xe64de4>
					dgout (*s);
    157c:	0b390b3b 	bleq	e44270 <__ccfg+0xe242c8>
					s++;
    1580:	0b201349 	bleq	8062ac <__ccfg+0x7e6304>
				while (*s != '\0') {
    1584:	00001301 	andeq	r1, r0, r1, lsl #6
    1588:	03003421 	movweq	r3, #1057	; 0x421
			dgout (*mess++);
    158c:	3b0b3a08 	blcc	2cfdb4 <__ccfg+0x2afe0c>
    1590:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1594:	22000013 	andcs	r0, r0, #19
    1598:	0e03012e 	adfeqsp	f0, f3, #0.5
	__pi_seed = __pi_seed * 1103515245 + 12345;
    159c:	0b3b0b3a 	bleq	ec428c <__ccfg+0xea42e4>
    15a0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    15a4:	13010b20 	movwne	r0, #6944	; 0x1b20
    15a8:	05230000 	streq	r0, [r3, #-0]!
	^ entropy
    15ac:	3a080300 	bcc	2021b4 <__ccfg+0x1e220c>
}
    15b0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15b4:	0013490b 	andseq	r4, r3, fp, lsl #18
    15b8:	011d2400 	tsteq	sp, r0, lsl #8
    15bc:	01111331 	tsteq	r1, r1, lsr r3
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    15c0:	0b580112 	bleq	1601a10 <__ccfg+0x15e1a68>
    15c4:	0b570b59 	bleq	15c4330 <__ccfg+0x15a4388>
    15c8:	00001301 	andeq	r1, r0, r1, lsl #6
	sysassert (p->attributes.b.queued == 0, "tcv01");
    15cc:	03012e25 	movweq	r2, #7717	; 0x1e25
    15d0:	3b0b3a0e 	blcc	2cfe10 <__ccfg+0x2afe68>
	if (q_empty (q))
    15d4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    15d8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		trigger (q);
    15dc:	010a4001 	tsteq	sl, r1
	if (p->attributes.b.urgent) {
    15e0:	26000013 			; <UNDEFINED> instruction: 0x26000013
		p->u.bqueue.next = q->next;
    15e4:	08030034 	stmdaeq	r3, {r2, r4, r5}
		p->u.bqueue.prev = q;
    15e8:	0b3b0b3a 	bleq	ec42d8 <__ccfg+0xea4330>
		q->next->prev = (qitem_t*) p;
    15ec:	13490b39 	movtne	r0, #39737	; 0x9b39
	p->attributes.b.queued = 1;
    15f0:	00000602 	andeq	r0, r0, r2, lsl #12
    15f4:	03012e27 	movweq	r2, #7719	; 0x1e27
}
    15f8:	3b0b3a0e 	blcc	2cfe38 <__ccfg+0x2afe90>
		p->u.bqueue.prev = q->prev;
    15fc:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
		q->prev->next = (qitem_t*) p;
    1600:	010b200c 	tsteq	fp, ip
		q->prev = (qitem_t*) p;
    1604:	28000013 	stmdacs	r0, {r0, r1, r4}
    1608:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    160c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	word cs = size + hblenb;
    1610:	13490b39 	movtne	r0, #39737	; 0x9b39
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1614:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
    1618:	3a0e0301 	bcc	382224 <__ccfg+0x36227c>
	p -> length = size;
    161c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    1620:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
	if (p->attributes.b.queued) {
    1624:	010b2013 	tsteq	fp, r3, lsl r0
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1628:	2a000013 	bcs	167c <dispose+0x30>
    162c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1630:	0b3b0b3a 	bleq	ec4320 <__ccfg+0xea4378>
		p->attributes.b.queued = 0;
    1634:	13490b39 	movtne	r0, #39737	; 0x9b39
    1638:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    163c:	11133101 	tstne	r3, r1, lsl #2
	deq (p);	// Remove from queue
    1640:	40011201 	andmi	r1, r1, r1, lsl #4
}
    1644:	2c00000a 	stccs	0, cr0, [r0], {10}
	tfree ((address)p);
    1648:	1331001d 	teqne	r1, #29
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    164c:	01120111 	tsteq	r2, r1, lsl r1
    1650:	0b590b58 	bleq	16443b8 <__ccfg+0x1624410>
	deq (p);	// Soft dequeue, timer and hook left intact
    1654:	00000b57 	andeq	r0, r0, r7, asr fp
	switch (dv) {
    1658:	01110100 	tsteq	r1, r0, lsl #2
    165c:	0b130e25 	bleq	4c4ef8 <__ccfg+0x4a4f50>
    1660:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
			p->attributes.b.urgent = 1;
    1664:	01110655 	tsteq	r1, r5, asr r6
    1668:	00000610 	andeq	r0, r0, r0, lsl r6
			verify_ses (p, "dispose ses");
    166c:	0b002402 	bleq	a67c <__exidx_end+0x574f>
    1670:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1674:	0300000e 	movweq	r0, #14
    1678:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    167c:	0b3b0b3a 	bleq	ec436c <__ccfg+0xea43c4>
			verify_phy (p, "dispose phy");
    1680:	13490b39 	movtne	r0, #39737	; 0x9b39
    1684:	24040000 	strcs	r0, [r4], #-0
}
    1688:	3e0b0b00 	vmlacc.f64	d0, d11, d0
			enq (oqueues [p->attributes.b.phys], p);
    168c:	0008030b 	andeq	r0, r8, fp, lsl #6
			p->attributes.b.urgent = 1;
    1690:	01130500 	tsteq	r3, r0, lsl #10
    1694:	0b0b0e03 	bleq	2c4ea8 <__ccfg+0x2a4f00>
			verify_phy (p, "dispose phy");
    1698:	0b3b0b3a 	bleq	ec4388 <__ccfg+0xea43e0>
    169c:	00001301 	andeq	r1, r0, r1, lsl #6
    16a0:	03000d06 	movweq	r0, #3334	; 0xd06
    16a4:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
    16a8:	000c340b 	andeq	r3, ip, fp, lsl #8
    16ac:	000f0700 	andeq	r0, pc, r0, lsl #14
			enq (oqueues [p->attributes.b.phys], p);
    16b0:	00000b0b 	andeq	r0, r0, fp, lsl #22
    16b4:	0b000f08 	bleq	52dc <__exidx_end+0x3af>
}
    16b8:	0013490b 	andseq	r4, r3, fp, lsl #18
			rlp (p);
    16bc:	00260900 	eoreq	r0, r6, r0, lsl #18
}
    16c0:	00001349 	andeq	r1, r0, r9, asr #6
    16c4:	3f012e0a 	svccc	0x00012e0a
    16c8:	3a0e030c 	bcc	382300 <__ccfg+0x362358>
    16cc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    16d0:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    16d4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    16d8:	010a4001 	tsteq	sl, r1
	if (b->attributes.b.outgoing) {
    16dc:	0b000013 	bleq	1730 <tcv_endp+0x58>
	b = header (p);
    16e0:	08030005 	stmdaeq	r3, {r0, r2}
	if (b->attributes.b.outgoing) {
    16e4:	0b3b0b3a 	bleq	ec43d4 <__ccfg+0xea442c>
		verify_ses (b, "tcv02");
    16e8:	13490b39 	movtne	r0, #39737	; 0x9b39
    16ec:	00000602 	andeq	r0, r0, r2, lsl #12
    16f0:	0300050c 	movweq	r0, #1292	; 0x50c
    16f4:	3b0b3a08 	blcc	2cff1c <__ccfg+0x2aff74>
    16f8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		verify_plg (b, tcv_out, "tcv03");
    16fc:	000a0213 	andeq	r0, sl, r3, lsl r2
    1700:	00180d00 	andseq	r0, r8, r0, lsl #26
    1704:	340e0000 	strcc	r0, [lr], #-0
    1708:	3a0e0300 	bcc	382310 <__ccfg+0x362368>
    170c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1710:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1714:	0f000006 	svceq	0x00000006
    1718:	08030034 	stmdaeq	r3, {r2, r4, r5}
    171c:	0b3b0b3a 	bleq	ec440c <__ccfg+0xea4464>
		dispose (b, plugins [b->attributes.b.plugin] ->
    1720:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    1724:	00000602 	andeq	r0, r0, r2, lsl #12
		dispose (b, plugins [b->attributes.b.plugin] ->
    1728:	03003410 	movweq	r3, #1040	; 0x410
		rlp (b);
    172c:	3b0b3a08 	blcc	2cff54 <__ccfg+0x2affac>
}
    1730:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		rlp (b);
    1734:	000a0213 	andeq	r0, sl, r3, lsl r2
    1738:	11010000 	mrsne	r0, (UNDEF: 1)
    173c:	130e2501 	movwne	r2, #58625	; 0xe501
    1740:	1b0e030b 	blne	382374 <__ccfg+0x3623cc>
    1744:	1106550e 	tstne	r6, lr, lsl #10
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1748:	00061001 	andeq	r1, r6, r1
    174c:	00240200 	eoreq	r0, r4, r0, lsl #4
    1750:	0b3e0b0b 	bleq	f84384 <__ccfg+0xf643dc>
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1754:	00000e03 	andeq	r0, r0, r3, lsl #28
	va_start (ap, plid);
    1758:	03001603 	movweq	r1, #1539	; 0x603
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    175c:	3b0b3a0e 	blcc	2cff9c <__ccfg+0x2afff4>
    1760:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1764:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1768:	0b0b0024 	bleq	2c1800 <__ccfg+0x2a1858>
    176c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1770:	13050000 	movwne	r0, #20480	; 0x5000
			syserror (ENODEVICE, "tcv04");
    1774:	0b0e0301 	bleq	382380 <__ccfg+0x3623d8>
		syserror (EMALLOC, "tcv05");
    1778:	3b0b3a0b 	blcc	2cffac <__ccfg+0x2b0004>
	attp.b.outgoing = 1;
    177c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1780:	000d0600 	andeq	r0, sp, r0, lsl #12
    1784:	13490e03 	movtne	r0, #40451	; 0x9e03
    1788:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    178c:	0f070000 	svceq	0x00070000
		if (descriptors [fd] == NULL)
    1790:	000b0b00 	andeq	r0, fp, r0, lsl #22
    1794:	000f0800 	andeq	r0, pc, r0, lsl #16
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1798:	13490b0b 	movtne	r0, #39691	; 0x9b0b
		return ERROR;
    179c:	26090000 	strcs	r0, [r9], -r0
}
    17a0:	00134900 	andseq	r4, r3, r0, lsl #18
    17a4:	00340a00 	eorseq	r0, r4, r0, lsl #20
    17a8:	0b3a0e03 	bleq	e84fbc <__ccfg+0xe65014>
	s->attpattern.b.session = fd;
    17ac:	0b390b3b 	bleq	e444a0 <__ccfg+0xe244f8>
    17b0:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1694 <dispose+0x48>
	descriptors [fd] = s;
    17b4:	00000c3c 	andeq	r0, r0, ip, lsr ip
	q_init (&(s->rqueue));
    17b8:	3f012e0b 	svccc	0x00012e0b
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    17bc:	3a0e030c 	bcc	3823f4 <__ccfg+0x36244c>
    17c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    17c4:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    17c8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    17cc:	010a4001 	tsteq	sl, r1
    17d0:	0c000013 	stceq	0, cr0, [r0], {19}
    17d4:	08030005 	stmdaeq	r3, {r0, r2}
	descriptors [fd] = s;
    17d8:	0b3b0b3a 	bleq	ec44c8 <__ccfg+0xea4520>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    17dc:	13490b39 	movtne	r0, #39737	; 0x9b39
    17e0:	00000602 	andeq	r0, r0, r2, lsl #12
	if (s == NULL)
    17e4:	0300050d 	movweq	r0, #1293	; 0x50d
		syserror (EMALLOC, "tcv05");
    17e8:	3b0b3a08 	blcc	2d0010 <__ccfg+0x2b0068>
    17ec:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    17f0:	000a0213 	andeq	r0, sl, r3, lsl r2
    17f4:	00180e00 	andseq	r0, r8, r0, lsl #28
    17f8:	340f0000 	strcc	r0, [pc], #-0	; 1800 <tcv_open+0xb8>
    17fc:	3a0e0300 	bcc	382404 <__ccfg+0x36245c>
    1800:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1804:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1808:	10000006 	andne	r0, r0, r6
	    (plugins [ord] != NULL && plugins [ord] != pl))
    180c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1810:	0b3b0b3a 	bleq	ec4500 <__ccfg+0xea4558>
    1814:	13490b39 	movtne	r0, #39737	; 0x9b39
	plugins [ord] = pl;
    1818:	00000a02 	andeq	r0, r0, r2, lsl #20
	return 0;
    181c:	01110100 	tsteq	r1, r0, lsl #2
		return ERROR;
    1820:	0b130e25 	bleq	4c50bc <__ccfg+0x4a5114>
}
    1824:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1828:	01110655 	tsteq	r1, r5, asr r6
	verify_fds (fd, "tcv10");
    182c:	00000610 	andeq	r0, r0, r0, lsl r6
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    1830:	0b002402 	bleq	a840 <__exidx_end+0x5913>
	verify_fds (fd, "tcv10");
    1834:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1838:	0300000e 	movweq	r0, #14
    183c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	verify_plg (b, tcv_frm, "tcv11");
    1840:	0b3b0b3a 	bleq	ec4530 <__ccfg+0xea4588>
	b = q_first (rq);
    1844:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (q_end (b, rq)) {
    1848:	24040000 	strcs	r0, [r4], #-0
		if (state != WNONE) {
    184c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1850:	0008030b 	andeq	r0, r8, fp, lsl #6
			when (rq, state);
    1854:	000f0500 	andeq	r0, pc, r0, lsl #10
			release;
    1858:	13490b0b 	movtne	r0, #39691	; 0x9b0b
	deq (b);	// Dequeue the packet ...
    185c:	34060000 	strcc	r0, [r6], #-0
    1860:	3a0e0300 	bcc	382468 <__ccfg+0x3624c0>
	p = ((address)(b + 1));
    1864:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	verify_plg (b, tcv_frm, "tcv11");
    1868:	3f13490b 	svccc	0x0013490b
    186c:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1870:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
    1874:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1878:	0b3b0b3a 	bleq	ec4568 <__ccfg+0xea45c0>
    187c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    1880:	01111349 	tsteq	r1, r9, asr #6
    1884:	0a400112 	beq	1001cd4 <__ccfg+0xfe1d2c>
		b->length - b->u.pointers.head - b->u.pointers.tail;
    1888:	05080000 	streq	r0, [r8, #-0]
    188c:	3a080300 	bcc	202494 <__ccfg+0x1e24ec>
	b->u.pointers.tail =
    1890:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    1894:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		return NULL;
    1898:	09000006 	stmdbeq	r0, {r1, r2}
    189c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    18a0:	0b3b0b3a 	bleq	ec4590 <__ccfg+0xea45e8>
    18a4:	13490b39 	movtne	r0, #39737	; 0x9b39
    18a8:	00000602 	andeq	r0, r0, r2, lsl #12
	verify_fds (fd, "tcv16");
    18ac:	01110100 	tsteq	r1, r0, lsl #2
								Boolean urg) {
    18b0:	0b130e25 	bleq	4c514c <__ccfg+0x4a51a4>
    18b4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
	verify_fds (fd, "tcv16");
    18b8:	01110655 	tsteq	r1, r5, asr r6
    18bc:	00000610 	andeq	r0, r0, r0, lsl r6
    18c0:	03001602 	movweq	r1, #1538	; 0x602
	verify_pld (s, tcv_frm, "tcv17");
    18c4:	3b0b3a0e 	blcc	2d0104 <__ccfg+0x2b015c>
    18c8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    18cc:	03000013 	movweq	r0, #19
    18d0:	0b0b0024 	bleq	2c1968 <__ccfg+0x2a19c0>
    18d4:	0e030b3e 	vmoveq.16	d3[0], r0
    18d8:	26040000 	strcs	r0, [r4], -r0
    18dc:	00134900 	andseq	r4, r3, r0, lsl #18
    18e0:	00350500 	eorseq	r0, r5, r0, lsl #10
	ptrs.head = (word) fd;
    18e4:	00001349 	andeq	r1, r0, r9, asr #6
	ptrs.tail = (word) urg;
    18e8:	0b002406 	bleq	a908 <__exidx_end+0x59db>
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    18ec:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    18f0:	07000008 	streq	r0, [r0, -r8]
		if (state != WNONE) {
    18f4:	0b0b0113 	bleq	2c1d48 <__ccfg+0x2a1da0>
    18f8:	0b3b0b3a 	bleq	ec45e8 <__ccfg+0xea4640>
}
    18fc:	13010b39 	movwne	r0, #6969	; 0x1b39
			when (eid, state);
    1900:	0d080000 	stceq	0, cr0, [r8, #-0]
    1904:	3a0e0300 	bcc	38250c <__ccfg+0x362564>
			release;
    1908:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    190c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1910:	0900000b 	stmdbeq	r0, {r0, r1, r3}
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    1914:	0b0b000f 	bleq	2c1958 <__ccfg+0x2a19b0>
    1918:	00001349 	andeq	r1, r0, r9, asr #6
    191c:	0301130a 	movweq	r1, #4874	; 0x130a
    1920:	3a0b0b0e 	bcc	2c4560 <__ccfg+0x2a45b8>
    1924:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1928:	0013010b 	andseq	r0, r3, fp, lsl #2
		if (state != WNONE) {
    192c:	01130b00 	tsteq	r3, r0, lsl #22
    1930:	0b0b0e03 	bleq	2c5144 <__ccfg+0x2a519c>
			tmwait (state);
    1934:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1938:	13010b39 	movwne	r0, #6969	; 0x1b39
	b->attributes = s->attpattern;
    193c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
		b->attributes.b.urgent = 1;
    1940:	3a0e0300 	bcc	382548 <__ccfg+0x3625a0>
    1944:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	b->u.pointers.head = ptrs.head;
    1948:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
	b->u.pointers.tail = length;
    194c:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
	return (address) (b + 1);
    1950:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1954:	0b3b0b3a 	bleq	ec4644 <__ccfg+0xea469c>
    1958:	13490b39 	movtne	r0, #39737	; 0x9b39
    195c:	0b0d0b0b 	bleq	344590 <__ccfg+0x3245e8>
    1960:	0b380b0c 	bleq	e04598 <__ccfg+0xde45f0>
    1964:	130e0000 	movwne	r0, #57344	; 0xe000
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1968:	3a0b0b01 	bcc	2c4574 <__ccfg+0x2a45cc>
    196c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1970:	0013010b 	andseq	r0, r3, fp, lsl #2
	verify_fph (phy, "tcv23");
    1974:	000d0f00 	andeq	r0, sp, r0, lsl #30
    1978:	0b3a0e03 	bleq	e8518c <__ccfg+0xe651e4>
    197c:	0b39053b 	bleq	e42e70 <__ccfg+0xe22ec8>
    1980:	0b0b1349 	bleq	2c66ac <__ccfg+0x2a6704>
}
    1984:	0b0c0b0d 	bleq	3045c0 <__ccfg+0x2e4618>
	return (physical [phy]) (opt, arg);
    1988:	00000b38 	andeq	r0, r0, r8, lsr fp
    198c:	49010110 	stmdbmi	r1, {r4, r8}
    1990:	00130113 	andseq	r0, r3, r3, lsl r1
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    1994:	00211100 	eoreq	r1, r1, r0, lsl #2
	if (opt < 0) {
    1998:	0b2f1349 	bleq	bc66c4 <__ccfg+0xba671c>
		if (fd < 0)
    199c:	34120000 	ldrcc	r0, [r2], #-0
		if (opt == PHYSOPT_PLUGINFO) {
    19a0:	3a0e0300 	bcc	3825a8 <__ccfg+0x362600>
			if (fd >= TCV_MAX_PLUGS)
    19a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			if ((p = plugins [fd]) == NULL)
    19a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    19ac:	1300000a 	movwne	r0, #10
}
    19b0:	13490021 	movtne	r0, #36897	; 0x9021
		if (fd >= TCV_MAX_PHYS)
    19b4:	0000052f 	andeq	r0, r0, pc, lsr #10
		return physinfo [fd];
    19b8:	03003414 	movweq	r3, #1044	; 0x414
    19bc:	3b0b3a0e 	blcc	2d01fc <__ccfg+0x2b0254>
	verify_fds (fd, "tcv22");
    19c0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    19c4:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    19c8:	1500000c 	strne	r0, [r0, #-12]
    19cc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    19d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
    19d4:	13490b39 	movtne	r0, #39737	; 0x9b39
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    19d8:	15160000 	ldrne	r0, [r6, #-0]
    19dc:	010c2701 	tsteq	ip, r1, lsl #14
			return 0;
    19e0:	17000013 	smladne	r0, r3, r0, r0
    19e4:	13490005 	movtne	r0, #36869	; 0x9005
    19e8:	0d180000 	ldceq	0, cr0, [r8, #-0]
    19ec:	3a080300 	bcc	2025f4 <__ccfg+0x1e264c>
    19f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    19f4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    19f8:	1900000b 	stmdbne	r0, {r0, r1, r3}
	if (dsp != TCV_DSP_PASS) {
    19fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		if (ses == NONE)
    1a00:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			syserror (EREQPAR, "tcv26");
    1a04:	13490b39 	movtne	r0, #39737	; 0x9b39
		verify_fds (ses, "tcv27");
    1a08:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
    1a0c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1a10:	3b0b3a0e 	blcc	2d0250 <__ccfg+0x2b02a8>
    1a14:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    1a18:	1201110c 	andne	r1, r1, #12, 2
		if ((p = apb (size)) != NULL) {
    1a1c:	010a4001 	tsteq	sl, r1
    1a20:	1b000013 	blne	1a74 <tcvphy_reg+0x18>
		return NULL;
    1a24:	08030005 	stmdaeq	r3, {r0, r2}
			p->attributes = descriptors [ses] -> attpattern;
    1a28:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			dispose (p, dsp);
    1a2c:	13490b39 	movtne	r0, #39737	; 0x9b39
			p->attributes = descriptors [ses] -> attpattern;
    1a30:	00000602 	andeq	r0, r0, r2, lsl #12
			p->attributes.b.outgoing = 0;
    1a34:	31011d1c 	tstcc	r1, ip, lsl sp
			dispose (p, dsp);
    1a38:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
			return (address)(p + 1);
    1a3c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    1a40:	010b5705 	tsteq	fp, r5, lsl #14
	if ((p = apb (size)) != NULL)
    1a44:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    1a48:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
		return (address)(p + 1);
    1a4c:	341e0000 	ldrcc	r0, [lr], #-0
    1a50:	00133100 	andseq	r3, r3, r0, lsl #2
    1a54:	00341f00 	eorseq	r1, r4, r0, lsl #30
    1a58:	06021331 			; <UNDEFINED> instruction: 0x06021331
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a5c:	1d200000 	stcne	0, cr0, [r0, #-0]
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1a60:	52133100 	andspl	r3, r3, #0, 2
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a64:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    1a68:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
		syserror (EREQPAR, "tcv28");
    1a6c:	2100000b 	tstcs	r0, fp
		syserror (EMALLOC, "tcv29");
    1a70:	0e03012e 	adfeqsp	f0, f3, #0.5
	physical [phy] = ps;
    1a74:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	physinfo [phy] = info;
    1a78:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1a7c:	01111349 	tsteq	r1, r9, asr #6
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1a80:	0a400112 	beq	1001ed0 <__ccfg+0xfe1f28>
    1a84:	00001301 	andeq	r1, r0, r1, lsl #6
    1a88:	03003422 	movweq	r3, #1058	; 0x422
		syserror (EMALLOC, "tcv29");
    1a8c:	3b0b3a08 	blcc	2d02b4 <__ccfg+0x2b030c>
    1a90:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	q_init (q);
    1a94:	00060213 	andeq	r0, r6, r3, lsl r2
}
    1a98:	000a2300 	andeq	r2, sl, r0, lsl #6
    1a9c:	0b3a0e03 	bleq	e852b0 <__ccfg+0xe65308>
    1aa0:	0b39053b 	bleq	e42f94 <__ccfg+0xe22fec>
    1aa4:	00000111 	andeq	r0, r0, r1, lsl r1
    1aa8:	11010b24 	tstne	r1, r4, lsr #22
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1aac:	00011201 	andeq	r1, r1, r1, lsl #4
	verify_fph (phy, "tcv30");
    1ab0:	012e2500 			; <UNDEFINED> instruction: 0x012e2500
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ab4:	0b3a0e03 	bleq	e852c8 <__ccfg+0xe65320>
    1ab8:	0b39053b 	bleq	e42fac <__ccfg+0xe23004>
	verify_fph (phy, "tcv30");
    1abc:	13010b20 	movwne	r0, #6944	; 0x1b20
    1ac0:	34260000 	strtcc	r0, [r6], #-0
    1ac4:	3a080300 	bcc	2026cc <__ccfg+0x1e2724>
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1ac8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1acc:	0013490b 	andseq	r4, r3, fp, lsl #18
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1ad0:	00052700 	andeq	r2, r5, r0, lsl #14
    1ad4:	0b3a0e03 	bleq	e852e8 <__ccfg+0xe65340>
		if (plugins [plg] == NULL)
    1ad8:	0b39053b 	bleq	e42fcc <__ccfg+0xe23024>
    1adc:	06021349 	streq	r1, [r2], -r9, asr #6
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1ae0:	1d280000 	stcne	0, cr0, [r8, #-0]
		return 0;
    1ae4:	11133101 	tstne	r3, r1, lsl #2
}
    1ae8:	58011201 	stmdapl	r1, {r0, r9, ip}
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1aec:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    1af0:	2900000b 	stmdbcs	r0, {r0, r1, r3}
    1af4:	0111010b 	tsteq	r1, fp, lsl #2
    1af8:	13010112 	movwne	r0, #4370	; 0x1112
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1afc:	1d2a0000 	stcne	0, cr0, [sl, #-0]
    1b00:	11133101 	tstne	r3, r1, lsl #2
    1b04:	58011201 	stmdapl	r1, {r0, r9, ip}
    1b08:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    1b0c:	0013010b 	andseq	r0, r3, fp, lsl #2
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1b10:	00052b00 	andeq	r2, r5, r0, lsl #22
	len -= (ap.head + ap.tail);
    1b14:	00001331 	andeq	r1, r0, r1, lsr r3
    1b18:	03012e2c 	movweq	r2, #7724	; 0x1e2c
    1b1c:	3b0b3a0e 	blcc	2d035c <__ccfg+0x2b03b4>
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1b20:	110b3905 	tstne	fp, r5, lsl #18
    1b24:	40011201 	andmi	r1, r1, r1, lsl #4
    1b28:	0013010a 	andseq	r0, r3, sl, lsl #2
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1b2c:	011d2d00 	tsteq	sp, r0, lsl #26
    1b30:	01521331 	cmpeq	r2, r1, lsr r3
    1b34:	0b580655 	bleq	1603490 <__ccfg+0x15e34e8>
	return 1;
    1b38:	0b570559 	bleq	15c30a4 <__ccfg+0x15a30fc>
    1b3c:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
    1b40:	3a0e0300 	bcc	382748 <__ccfg+0x3627a0>
    1b44:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b48:	000b200b 	andeq	r2, fp, fp
	verify_fph (phy, "tcv32");
    1b4c:	002e2f00 	eoreq	r2, lr, r0, lsl #30
    1b50:	0b3a0e03 	bleq	e85364 <__ccfg+0xe653bc>
    1b54:	0b39053b 	bleq	e43048 <__ccfg+0xe230a0>
    1b58:	01120111 	tsteq	r2, r1, lsl r1
    1b5c:	00000a40 	andeq	r0, r0, r0, asr #20
    1b60:	03002e30 	movweq	r2, #3632	; 0xe30
	oq = oqueues [phy];
    1b64:	3b0b3a0e 	blcc	2d03a4 <__ccfg+0x2b03fc>
	b = q_first (oq);
    1b68:	200b390b 	andcs	r3, fp, fp, lsl #18
	if (q_end (b, oq)) {
    1b6c:	3100000b 	tstcc	r0, fp
	*len = b->length;
    1b70:	0e03012e 	adfeqsp	f0, f3, #0.5
	deq (b);	// Dequeue the packet ...
    1b74:	0b3b0b3a 	bleq	ec4864 <__ccfg+0xea48bc>
}
    1b78:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		return NULL;
    1b7c:	13010b20 	movwne	r0, #6944	; 0x1b20
    1b80:	05320000 	ldreq	r0, [r2, #-0]!
    1b84:	3a080300 	bcc	20278c <__ccfg+0x1e27e4>
    1b88:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	verify_fph (phy, "tcv33");
    1b8c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1b90:	00053300 	andeq	r3, r5, r0, lsl #6
    1b94:	0b3a0e03 	bleq	e853a8 <__ccfg+0xe65400>
    1b98:	0b390b3b 	bleq	e4488c <__ccfg+0xe248e4>
    1b9c:	00001349 	andeq	r1, r0, r9, asr #6
    1ba0:	03003434 	movweq	r3, #1076	; 0x434
	oq = oqueues [phy];
    1ba4:	3b0b3a08 	blcc	2d03cc <__ccfg+0x2b0424>
	b = q_first (oq);
    1ba8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		return NULL;
    1bac:	35000013 	strcc	r0, [r0, #-19]	; 0xffffffed
	return (address)(b + 1);
    1bb0:	0e03012e 	adfeqsp	f0, f3, #0.5
}
    1bb4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1bb8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1bbc:	13010b20 	movwne	r0, #6944	; 0x1b20
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1bc0:	05360000 	ldreq	r0, [r6, #-0]!
	verify_plg (b, tcv_xmt, "tcv34");
    1bc4:	3a0e0300 	bcc	3827cc <__ccfg+0x362824>
	hblock_t *b = header (pkt);
    1bc8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	verify_plg (b, tcv_xmt, "tcv34");
    1bcc:	0013490b 	andseq	r4, r3, fp, lsl #18
    1bd0:	002e3700 	eoreq	r3, lr, r0, lsl #14
    1bd4:	0b3a0e03 	bleq	e853e8 <__ccfg+0xe65440>
    1bd8:	0b39053b 	bleq	e430cc <__ccfg+0xe23124>
    1bdc:	0b200c27 	bleq	804c80 <__ccfg+0x7e4cd8>
    1be0:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
    1be4:	3a0e0300 	bcc	3827ec <__ccfg+0x362844>
	dispose (b, plugins [b->attributes.b.plugin] ->
    1be8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    1bec:	200c270b 	andcs	r2, ip, fp, lsl #14
	dispose (b, plugins [b->attributes.b.plugin] ->
    1bf0:	3900000b 	stmdbcc	r0, {r0, r1, r3}
    1bf4:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
    1bf8:	01120111 	tsteq	r2, r1, lsl r1
}
    1bfc:	13010a40 	movwne	r0, #6720	; 0x1a40
    while(1)
    1c00:	053a0000 	ldreq	r0, [sl, #-0]!
{
    1c04:	02133100 	andseq	r3, r3, #0, 2
    SetupTrimDevice();
    1c08:	3b000006 	blcc	1c28 <ResetISR+0x24>
        *pui32Dest++ = *pui32Src++;
    1c0c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1c10:	01120111 	tsteq	r2, r1, lsl r1
    1c14:	0b590b58 	bleq	164497c <__ccfg+0x16249d4>
    1c18:	00000b57 	andeq	r0, r0, r7, asr fp
    1c1c:	31001d3c 	tstcc	r0, ip, lsr sp
    1c20:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    __asm("    ldr     r0, =_bss\n"
    1c24:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    1c28:	000b5705 	andeq	r5, fp, r5, lsl #14
    1c2c:	012e3d00 			; <UNDEFINED> instruction: 0x012e3d00
    1c30:	01111331 	tsteq	r1, r1, lsr r3
    1c34:	0a400112 	beq	1002084 <__ccfg+0xfe20dc>
   main();
    1c38:	1d3e0000 	ldcne	0, cr0, [lr, #-0]
    FaultISR();
    1c3c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
}
    1c40:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    1c44:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    1c48:	0000000b 	andeq	r0, r0, fp
    1c4c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1c50:	030b130e 	movweq	r1, #45838	; 0xb30e
static byte get_byte () {
    1c54:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c58:	10011106 	andne	r1, r1, r6, lsl #2
    1c5c:	02000006 	andeq	r0, r0, #6
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c60:	0b0b0024 	bleq	2c1cf8 <__ccfg+0x2a1d50>
		b <<= 1;
    1c64:	0e030b3e 	vmoveq.16	d3[0], r0
    1c68:	16030000 	strne	r0, [r3], -r0
			b |= 1;
    1c6c:	3a0e0300 	bcc	382874 <__ccfg+0x3628cc>
	for (b = 0, i = 0; i < 8; i++) {
    1c70:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c74:	0013490b 	andseq	r4, r3, fp, lsl #18
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1c78:	00240400 	eoreq	r0, r4, r0, lsl #8
}
    1c7c:	0b3e0b0b 	bleq	f848b0 <__ccfg+0xf64908>
    1c80:	00000803 	andeq	r0, r0, r3, lsl #16
static void put_byte (byte b) {
    1c84:	03011305 	movweq	r1, #4869	; 0x1305
    1c88:	3a0b0b0e 	bcc	2c48c8 <__ccfg+0x2a4920>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c8c:	010b3b0b 	tsteq	fp, fp, lsl #22
    1c90:	06000013 			; <UNDEFINED> instruction: 0x06000013
		if (b & 0x80)
    1c94:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1c98:	0b381349 	bleq	e069c4 <__ccfg+0xde6a1c>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1c9c:	00000c34 	andeq	r0, r0, r4, lsr ip
		b <<= 1;
    1ca0:	0b000f07 	bleq	58c4 <__exidx_end+0x997>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1ca4:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1ca8:	0b0b000f 	bleq	2c1cec <__ccfg+0x2a1d44>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cac:	00001349 	andeq	r1, r0, r9, asr #6
}
    1cb0:	0b011309 	bleq	468dc <__ccfg+0x26934>
    1cb4:	3b0b3a0b 	blcc	2d04e8 <__ccfg+0x2b0540>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1cb8:	010b390b 	tsteq	fp, fp, lsl #18
    1cbc:	0a000013 	beq	1d10 <wwait+0x3c>
    1cc0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	put_byte (cmd);
    1cc4:	0b3b0b3a 	bleq	ec49b4 <__ccfg+0xea4a0c>
    1cc8:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    1ccc:	00000b38 	andeq	r0, r0, r8, lsr fp
    1cd0:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
static void wwait (word st, word del) {
    1cd4:	0113490c 	tsteq	r3, ip, lsl #18
    1cd8:	0c000013 	stceq	0, cr0, [r0], {19}
    1cdc:	13490005 	movtne	r0, #36869	; 0x9005
	while (dopen && (rdsr () & 1)) {
    1ce0:	260d0000 	strcs	r0, [sp], -r0
    1ce4:	00134900 	andseq	r4, r3, r0, lsl #18
    1ce8:	00340e00 	eorseq	r0, r4, r0, lsl #28
    1cec:	0b3a0e03 	bleq	e85500 <__ccfg+0xe65558>
	put_byte (CMD_RDSR);
    1cf0:	0b390b3b 	bleq	e449e4 <__ccfg+0xe24a3c>
	r = get_byte ();
    1cf4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1bd8 <tcvphy_end+0x18>
    1cf8:	00000a02 	andeq	r0, r0, r2, lsl #20
    1cfc:	0300340f 	movweq	r3, #1039	; 0x40f
	while (dopen && (rdsr () & 1)) {
    1d00:	3b0b3a0e 	blcc	2d0540 <__ccfg+0x2b0598>
}
    1d04:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		if (st == WNONE)
    1d08:	000a0213 	andeq	r0, sl, r3, lsl r2
    1d0c:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
			mdelay (1);
    1d10:	0b3a0e03 	bleq	e85524 <__ccfg+0xe6557c>
    1d14:	0b390b3b 	bleq	e44a08 <__ccfg+0xe24a60>
			delay (del, st);
    1d18:	13490c27 	movtne	r0, #39975	; 0x9c27
    1d1c:	01120111 	tsteq	r2, r1, lsl r1
			release;
    1d20:	13010a40 	movwne	r0, #6720	; 0x1a40
    1d24:	05110000 	ldreq	r0, [r1, #-0]
    1d28:	3a080300 	bcc	202930 <__ccfg+0x1e2988>
static void ready () {
    1d2c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (dopen) {
    1d30:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		wwait (WNONE, 1);
    1d34:	12000006 	andne	r0, r0, #6
    1d38:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1d3c:	0b3b0b3a 	bleq	ec4a2c <__ccfg+0xea4a84>
	dstat = 0;
    1d40:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    1d44:	00000a02 	andeq	r0, r0, r2, lsl #20
    1d48:	03000513 	movweq	r0, #1299	; 0x513
    1d4c:	3b0b3a08 	blcc	2d0574 <__ccfg+0x2b05cc>
	udelay (1);
    1d50:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	udelay (1);
    1d54:	000a0213 	andeq	r0, sl, r3, lsl r2
    1d58:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
    1d5c:	0b3a0e03 	bleq	e85570 <__ccfg+0xe655c8>
		dopen = DOPEN_TEMP;
    1d60:	0b390b3b 	bleq	e44a54 <__ccfg+0xe24aac>
    1d64:	13490c27 	movtne	r0, #39975	; 0x9c27
    1d68:	01120111 	tsteq	r2, r1, lsl r1
    1d6c:	00000a40 	andeq	r0, r0, r0, asr #20
static void cclose () {
    1d70:	03000515 	movweq	r0, #1301	; 0x515
	if (dopen == DOPEN_TEMP) {
    1d74:	3b0b3a0e 	blcc	2d05b4 <__ccfg+0x2b060c>
    1d78:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		wwait (WNONE, 1);
    1d7c:	00060213 	andeq	r0, r6, r3, lsl r2
    1d80:	00341600 	eorseq	r1, r4, r0, lsl #12
	cmd_0 (CMD_DP);
    1d84:	0b3a0803 	bleq	e83d98 <__ccfg+0xe63df0>
    1d88:	0b390b3b 	bleq	e44a7c <__ccfg+0xe24ad4>
		dopen = 0;
    1d8c:	00001349 	andeq	r1, r0, r9, asr #6
}
    1d90:	01110100 	tsteq	r1, r0, lsl #2
word ee_open () {
    1d94:	0b130e25 	bleq	4c5630 <__ccfg+0x4a5688>
	ready ();
    1d98:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
	dopen = DOPEN_PERM;
    1d9c:	01110655 	tsteq	r1, r5, asr r6
    1da0:	00000610 	andeq	r0, r0, r0, lsl r6
}
    1da4:	0b002402 	bleq	adb4 <__exidx_end+0x5e87>
	if (dopen) {
    1da8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1dac:	0300000e 	movweq	r0, #14
		dopen = DOPEN_TEMP;
    1db0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
		cclose ();
    1db4:	0b3b0b3a 	bleq	ec4aa4 <__ccfg+0xea4afc>
}
    1db8:	13490b39 	movtne	r0, #39737	; 0x9b39
int ser_outf (word st, const char *m, ...) {
    1dbc:	24040000 	strcs	r0, [r4], #-0
    1dc0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	if ((prcs = running (__outserial)) != 0) {
    1dc4:	0008030b 	andeq	r0, r8, fp, lsl #6
    1dc8:	01130500 	tsteq	r3, r0, lsl #10
		join (prcs, st);
    1dcc:	0b0b0e03 	bleq	2c55e0 <__ccfg+0x2a5638>
    1dd0:	0b3b0b3a 	bleq	ec4ac0 <__ccfg+0xea4b18>
		release;
    1dd4:	00001301 	andeq	r1, r0, r1, lsl #6
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1dd8:	03000d06 	movweq	r0, #3334	; 0xd06
    1ddc:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
    1de0:	000c340b 	andeq	r3, ip, fp, lsl #8
		umwait (st);
    1de4:	000f0700 	andeq	r0, pc, r0, lsl #14
    1de8:	00000b0b 	andeq	r0, r0, fp, lsl #22
	if (runstrand (__outserial, buf) == 0) {
    1dec:	0b000f08 	bleq	5a14 <__exidx_end+0xae7>
    1df0:	0013490b 	andseq	r4, r3, fp, lsl #18
    1df4:	00260900 	eoreq	r0, r6, r0, lsl #18
		ufree (buf);
    1df8:	00001349 	andeq	r1, r0, r9, asr #6
		npwait (st);
    1dfc:	4901010a 	stmdbmi	r1, {r1, r3, r8}
}
    1e00:	00130113 	andseq	r0, r3, r3, lsl r1
    1e04:	00210b00 	eoreq	r0, r1, r0, lsl #22
    1e08:	340c0000 	strcc	r0, [ip], #-0
    1e0c:	3a0e0300 	bcc	382a14 <__ccfg+0x362a6c>
int ser_inf (word st, const char *fmt, ...) {
    1e10:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e14:	3f13490b 	svccc	0x0013490b
	if (fmt == NULL)
    1e18:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	if (__inpline == NULL) {
    1e1c:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
		if ((prcs = running (__inserial)) == 0) {
    1e20:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1e24:	0b3b0b3a 	bleq	ec4b14 <__ccfg+0xea4b6c>
			prcs = runthread (__inserial);
    1e28:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1e2c:	01111349 	tsteq	r1, r9, asr #6
			if (prcs == 0) {
    1e30:	0a400112 	beq	1002280 <__ccfg+0xfe22d8>
				npwait (st);
    1e34:	00001301 	andeq	r1, r0, r1, lsl #6
		release;
    1e38:	0300050e 	movweq	r0, #1294	; 0x50e
		join (prcs, st);
    1e3c:	3b0b3a08 	blcc	2d0664 <__ccfg+0x2b06bc>
    1e40:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	va_start (ap, fmt);
    1e44:	00060213 	andeq	r0, r6, r3, lsl r2
	prcs = vscan (__inpline, fmt, ap);
    1e48:	00340f00 	eorseq	r0, r4, r0, lsl #30
    1e4c:	0b3a0803 	bleq	e83e60 <__ccfg+0xe63eb8>
	ufree (__inpline);
    1e50:	0b390b3b 	bleq	e44b44 <__ccfg+0xe24b9c>
	__inpline = NULL;
    1e54:	06021349 	streq	r1, [r2], -r9, asr #6
}
    1e58:	0a100000 	beq	401e60 <__ccfg+0x3e1eb8>
    1e5c:	3a0e0300 	bcc	382a64 <__ccfg+0x362abc>
    1e60:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		return 0;
    1e64:	0001110b 	andeq	r1, r1, fp, lsl #2
    1e68:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
    1e6c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
int ser_in (word st, char *buf, int len) {
    1e70:	0b3b0b3a 	bleq	ec4b60 <__ccfg+0xea4bb8>
    1e74:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	if (len == 0)
    1e78:	01111349 	tsteq	r1, r9, asr #6
	if (__inpline == NULL) {
    1e7c:	0a400112 	beq	10022cc <__ccfg+0xfe2324>
		if ((prcs = running (__inserial)) == 0) {
    1e80:	34120000 	ldrcc	r0, [r2], #-0
    1e84:	3a080300 	bcc	202a8c <__ccfg+0x1e2ae4>
			prcs = runthread (__inserial);
    1e88:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e8c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			if (prcs == 0) {
    1e90:	1300000a 	movwne	r0, #10
				npwait (st);
    1e94:	0e03012e 	adfeqsp	f0, f3, #0.5
		release;
    1e98:	0b3b0b3a 	bleq	ec4b88 <__ccfg+0xea4be0>
		join (prcs, st);
    1e9c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1ea0:	01120111 	tsteq	r2, r1, lsl r1
	if (*__inpline == NULL) // bin cmd
    1ea4:	0a480a40 	beq	12047ac <__ccfg+0x11e4804>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1ea8:	00001301 	andeq	r1, r0, r1, lsl #6
	if (prcs >= len)
    1eac:	03000514 	movweq	r0, #1300	; 0x514
		prcs = len-1;
    1eb0:	3b0b3a08 	blcc	2d06d8 <__ccfg+0x2b0730>
	memcpy (buf, __inpline, prcs);
    1eb4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1eb8:	000a0213 	andeq	r0, sl, r3, lsl r2
    1ebc:	000a1500 	andeq	r1, sl, r0, lsl #10
	ufree (__inpline);
    1ec0:	0b3a0803 	bleq	e83ed4 <__ccfg+0xe63f2c>
	__inpline = NULL;
    1ec4:	0b390b3b 	bleq	e44bb8 <__ccfg+0xe24c10>
	if (*buf) // if it's NULL, it's a bin cmd
    1ec8:	00000111 	andeq	r0, r0, r1, lsl r1
		buf [prcs] = '\0';
    1ecc:	55010b16 	strpl	r0, [r1, #-2838]	; 0xfffff4ea
}
    1ed0:	00130106 	andseq	r0, r3, r6, lsl #2
		prcs = strlen (__inpline);
    1ed4:	00341700 	eorseq	r1, r4, r0, lsl #14
    1ed8:	0b3a0803 	bleq	e83eec <__ccfg+0xe63f44>
		return 0;
    1edc:	0b390b3b 	bleq	e44bd0 <__ccfg+0xe24c28>
    1ee0:	00001349 	andeq	r1, r0, r9, asr #6
    1ee4:	11010b18 	tstne	r1, r8, lsl fp
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    1ee8:	01011201 	tsteq	r1, r1, lsl #4
    1eec:	19000013 	stmdbne	r0, {r0, r1, r4}
    1ef0:	0111010b 	tsteq	r1, fp, lsl #2
	RF_cmdFs.frequency = 
    1ef4:	00000112 	andeq	r0, r0, r2, lsl r1
}
    1ef8:	01110100 	tsteq	r1, r0, lsl #2
    1efc:	0b130e25 	bleq	4c5798 <__ccfg+0x4a57f0>
    1f00:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1f04:	01110655 	tsteq	r1, r5, asr r6
static int option (int opt, address val) {
    1f08:	00000610 	andeq	r0, r0, r0, lsl r6
	switch (opt) {
    1f0c:	0b002402 	bleq	af1c <__exidx_end+0x5fef>
    1f10:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1f14:	0300000e 	movweq	r0, #14
    1f18:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1f1c:	0b3b0b3a 	bleq	ec4c0c <__ccfg+0xea4c64>
    1f20:	13490b39 	movtne	r0, #39737	; 0x9b39
    1f24:	24040000 	strcs	r0, [r4], #-0
    1f28:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1f2c:	0008030b 	andeq	r0, r8, fp, lsl #6
    1f30:	01130500 	tsteq	r3, r0, lsl #10
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    1f34:	0b0b0e03 	bleq	2c5748 <__ccfg+0x2a57a0>
    1f38:	0b3b0b3a 	bleq	ec4c28 <__ccfg+0xea4c80>
			goto RVal;
    1f3c:	00001301 	andeq	r1, r0, r1, lsl #6
			_BIS (dstate, DSTATE_RXON);
    1f40:	03000d06 	movweq	r0, #3334	; 0xd06
    1f44:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
	int ret = 0;
    1f48:	000c340b 	andeq	r3, ip, fp, lsl #8
			p_trigger (drvprcs, qevent);
    1f4c:	000f0700 	andeq	r0, pc, r0, lsl #14
    1f50:	00000b0b 	andeq	r0, r0, fp, lsl #22
    1f54:	0b000f08 	bleq	5b7c <__exidx_end+0xc4f>
    1f58:	0013490b 	andseq	r4, r3, fp, lsl #18
    1f5c:	00260900 	eoreq	r0, r6, r0, lsl #18
    1f60:	00001349 	andeq	r1, r0, r9, asr #6
    1f64:	3f012e0a 	svccc	0x00012e0a
    1f68:	3a0e030c 	bcc	382ba0 <__ccfg+0x362bf8>
    1f6c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f70:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
}
    1f74:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
			_BIC (dstate, DSTATE_RXON);
    1f78:	010a4001 	tsteq	sl, r1
    1f7c:	0b000013 	bleq	1fd0 <option+0xc8>
			statid = (val == NULL) ? 0 : *val;
    1f80:	08030005 	stmdaeq	r3, {r0, r2}
    1f84:	0b3b0b3a 	bleq	ec4c74 <__ccfg+0xea4ccc>
	int ret = 0;
    1f88:	13490b39 	movtne	r0, #39737	; 0x9b39
			ret = (int) statid;
    1f8c:	00000602 	andeq	r0, r0, r2, lsl #12
	if (val != NULL)
    1f90:	0300340c 	movweq	r3, #1036	; 0x40c
		*val = ret;
    1f94:	3b0b3a08 	blcc	2d07bc <__ccfg+0x2b0814>
			ret = rbuffl + 2;
    1f98:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1f9c:	00060213 	andeq	r0, r6, r3, lsl r2
			if (val != NULL) {
    1fa0:	000a0d00 	andeq	r0, sl, r0, lsl #26
				memcpy (val, &rxstat,
    1fa4:	0b3a0e03 	bleq	e857b8 <__ccfg+0xe65810>
    1fa8:	0b390b3b 	bleq	e44c9c <__ccfg+0xe24cf4>
				memset (&rxstat, 0, 
    1fac:	0b0e0000 	bleq	381fb4 <__ccfg+0x36200c>
    1fb0:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
			if (val == NULL)
    1fb4:	00130101 	andseq	r0, r3, r1, lsl #2
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    1fb8:	00340f00 	eorseq	r0, r4, r0, lsl #30
    1fbc:	0b3a0803 	bleq	e83fd0 <__ccfg+0xe64028>
				utimer_set (bckf_timer, *val);
    1fc0:	0b390b3b 	bleq	e44cb4 <__ccfg+0xe24d0c>
    1fc4:	0a021349 	beq	86cf0 <__ccfg+0x66d48>
    1fc8:	0b100000 	bleq	401fd0 <__ccfg+0x3e2028>
			for (ret = 0; ret < 8; ret++)
    1fcc:	01065501 	tsteq	r6, r1, lsl #10
				if (RF_cmdPropRadioDivSetup.txPower
    1fd0:	11000013 	tstne	r0, r3, lsl r0
					== patable [ret])
    1fd4:	08030034 	stmdaeq	r3, {r2, r4, r5}
				if (RF_cmdPropRadioDivSetup.txPower
    1fd8:	0b3b0b3a 	bleq	ec4cc8 <__ccfg+0xea4d20>
			for (ret = 0; ret < 8; ret++)
    1fdc:	13490b39 	movtne	r0, #39737	; 0x9b39
    1fe0:	0b120000 	bleq	481fe8 <__ccfg+0x462040>
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    1fe4:	00065501 	andeq	r5, r6, r1, lsl #10
    1fe8:	11010000 	mrsne	r0, (UNDEF: 1)
    1fec:	130e2501 	movwne	r2, #58625	; 0xe501
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    1ff0:	1b0e030b 	blne	382c24 <__ccfg+0x362c7c>
    1ff4:	1106550e 	tstne	r6, lr, lsl #10
			_BIS (dstate, DSTATE_IRST);
    1ff8:	00061001 	andeq	r1, r6, r1
    1ffc:	00240200 	eoreq	r0, r4, r0, lsl #4
    2000:	0b3e0b0b 	bleq	f84c34 <__ccfg+0xf64c8c>
			ret = (int) channel;
    2004:	00000e03 	andeq	r0, r0, r3, lsl #28
			goto RVal;
    2008:	03001603 	movweq	r1, #1539	; 0x603
				(*val > 7) ? 7 : *val;
    200c:	3b0b3a0e 	blcc	2d084c <__ccfg+0x2b08a4>
    2010:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2014:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2018:	0b0b0024 	bleq	2c20b0 <__ccfg+0x2a2108>
			plugch ();
    201c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
			_BIS (dstate, DSTATE_IRST);
    2020:	26050000 	strcs	r0, [r5], -r0
    2024:	00134900 	andseq	r4, r3, r0, lsl #18
			ret = (int) vrate;
    2028:	00160600 	andseq	r0, r6, r0, lsl #12
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    202c:	0b3a0e03 	bleq	e85840 <__ccfg+0xe65898>
    2030:	0b39053b 	bleq	e43524 <__ccfg+0xe2357c>
    2034:	00001349 	andeq	r1, r0, r9, asr #6
    2038:	0b000f07 	bleq	5c5c <__exidx_end+0xd2f>
    203c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2040:	01150800 	tsteq	r5, r0, lsl #16
    2044:	13010c27 	movwne	r0, #7207	; 0x1c27
    2048:	05090000 	streq	r0, [r9, #-0]
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    204c:	00134900 	andseq	r4, r3, r0, lsl #18
    2050:	01130a00 	tsteq	r3, r0, lsl #20
    2054:	0b3a0b0b 	bleq	e84c88 <__ccfg+0xe64ce0>
    2058:	0b39053b 	bleq	e4354c <__ccfg+0xe235a4>
			syserror (EREQPAR, "cc13 op");
    205c:	00001301 	andeq	r1, r0, r1, lsl #6
    2060:	03000d0b 	movweq	r0, #3339	; 0xd0b
    2064:	3b0b3a0e 	blcc	2d08a4 <__ccfg+0x2b08fc>
    2068:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    206c:	000b3813 	andeq	r3, fp, r3, lsl r8
    2070:	01130c00 	tsteq	r3, r0, lsl #24
    2074:	0b0b0e03 	bleq	2c5888 <__ccfg+0x2a58e0>
    2078:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    207c:	13010b39 	movwne	r0, #6969	; 0x1b39
    2080:	010d0000 	mrseq	r0, (UNDEF: 13)
    2084:	01134901 	tsteq	r3, r1, lsl #18
    2088:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    208c:	13490021 	movtne	r0, #36897	; 0x9021
    2090:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2094:	0300340f 	movweq	r3, #1039	; 0x40f
static void issue_cmd (lword cmd) {
    2098:	3b0b3a0e 	blcc	2d08d8 <__ccfg+0x2b0930>
    209c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20a0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    20a4:	1000000c 	andne	r0, r0, ip
    20a8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1ff8 <option+0xf0>
		if (res != 0x86)
    20ac:	0b3a0e03 	bleq	e858c0 <__ccfg+0xe65918>
			syserror (EHARDWARE, "hang ic0");
    20b0:	0b390b3b 	bleq	e44da4 <__ccfg+0xe24dfc>
    20b4:	01110c27 	tsteq	r1, r7, lsr #24
		if (cnt-- == 0) {
    20b8:	0a400112 	beq	1002508 <__ccfg+0xfe2560>
			diag ("HUP %lx %lx", cmd, res);
    20bc:	00001301 	andeq	r1, r0, r1, lsl #6
    20c0:	03000511 	movweq	r0, #1297	; 0x511
			syserror (EHARDWARE, "hang ic0");
    20c4:	3b0b3a0e 	blcc	2d0904 <__ccfg+0x2b095c>
		udelay (1);
    20c8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20cc:	00060213 	andeq	r0, r6, r3, lsl r2
}
    20d0:	00341200 	eorseq	r1, r4, r0, lsl #4
    20d4:	0b3a0e03 	bleq	e858e8 <__ccfg+0xe65940>
    20d8:	0b390b3b 	bleq	e44dcc <__ccfg+0xe24e24>
    20dc:	06021349 	streq	r1, [r2], -r9, asr #6
static void rx_de () {
    20e0:	0a130000 	beq	4c20e8 <__ccfg+0x4a2140>
	if ((dstate & DSTATE_RXAC) == 0)
    20e4:	3a0e0300 	bcc	382cec <__ccfg+0x362d44>
    20e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    20ec:	1400000b 	strne	r0, [r0], #-11
	_BIC (dstate, DSTATE_RXAC);
    20f0:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    20f4:	34150000 	ldrcc	r0, [r5], #-0
}
    20f8:	3a080300 	bcc	202d00 <__ccfg+0x1e2d58>
    20fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2100:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
static void rf_off () {
    2104:	0000000a 	andeq	r0, r0, sl
	if ((dstate & DSTATE_RFON) == 0)
    2108:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    210c:	030b130e 	movweq	r1, #45838	; 0xb30e
	IntDisable (INT_RFC_CPE_0);
    2110:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2114:	10011106 	andne	r1, r1, r6, lsl #2
    2118:	02000006 	andeq	r0, r0, #6
    211c:	0b0b0024 	bleq	2c21b4 <__ccfg+0x2a220c>
	RFCAdi3VcoLdoVoltageMode (false);
    2120:	0e030b3e 	vmoveq.16	d3[0], r0
	RFCSynthPowerDown ();
    2124:	16030000 	strne	r0, [r3], -r0
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2128:	3a0e0300 	bcc	382d30 <__ccfg+0x362d88>
    212c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2130:	0013490b 	andseq	r4, r3, fp, lsl #18
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2134:	00240400 	eoreq	r0, r4, r0, lsl #8
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2138:	0b3e0b0b 	bleq	f84d6c <__ccfg+0xf64dc4>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    213c:	00000803 	andeq	r0, r0, r3, lsl #16
    2140:	0b000f05 	bleq	5d5c <__exidx_end+0xe2f>
    2144:	0013490b 	andseq	r4, r3, fp, lsl #18
    2148:	00160600 	andseq	r0, r6, r0, lsl #12
	_BIC (dstate, DSTATE_RFON);
    214c:	0b3a0e03 	bleq	e85960 <__ccfg+0xe659b8>
    2150:	0b39053b 	bleq	e43644 <__ccfg+0xe2369c>
}
    2154:	00001349 	andeq	r1, r0, r9, asr #6
    2158:	27011507 	strcs	r1, [r1, -r7, lsl #10]
    215c:	0013010c 	andseq	r0, r3, ip, lsl #2
    2160:	00050800 	andeq	r0, r5, r0, lsl #16
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2164:	00001349 	andeq	r1, r0, r9, asr #6
    2168:	0b011309 	bleq	46d94 <__ccfg+0x26dec>
    216c:	3b0b3a0b 	blcc	2d09a0 <__ccfg+0x2b09f8>
		if (cmd->status == tstat)
    2170:	010b3905 	tsteq	fp, r5, lsl #18
		if (timeout-- == 0) {
    2174:	0a000013 	beq	21c8 <rf_on+0x2c>
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2178:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    217c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2180:	13490b39 	movtne	r0, #39737	; 0x9b39
			syserror (EHARDWARE, "rt2");
    2184:	00000b38 	andeq	r0, r0, r8, lsr fp
    2188:	0301130b 	movweq	r1, #4875	; 0x130b
		udelay (1);
    218c:	3a0b0b0e 	bcc	2c4dcc <__ccfg+0x2a4e24>
		if (cmd->status == tstat)
    2190:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    2194:	0013010b 	andseq	r0, r3, fp, lsl #2
    2198:	01010c00 	tsteq	r1, r0, lsl #24
static void rf_on () {
    219c:	13011349 	movwne	r1, #4937	; 0x1349
	if (dstate & DSTATE_RFON)
    21a0:	210d0000 	mrscs	r0, (UNDEF: 13)
    21a4:	2f134900 	svccs	0x00134900
    21a8:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    21ac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    21b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    21b4:	13490b39 	movtne	r0, #39737	; 0x9b39
    21b8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	OSCHF_TurnOnXosc();
    21bc:	340f0000 	strcc	r0, [pc], #-0	; 21c4 <rf_on+0x28>
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    21c0:	3a0e0300 	bcc	382dc8 <__ccfg+0x362e20>
    21c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    21c8:	3f13490b 	svccc	0x0013490b
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21cc:	000a020c 	andeq	r0, sl, ip, lsl #4
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21d0:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
    21d4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    21d8:	0b3b0b3a 	bleq	ec4ec8 <__ccfg+0xea4f20>
    21dc:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    21e0:	01120111 	tsteq	r2, r1, lsl r1
	issue_cmd (
    21e4:	00000a40 	andeq	r0, r0, r0, asr #20
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    21e8:	03000511 	movweq	r0, #1297	; 0x511
    21ec:	3b0b3a0e 	blcc	2d0a2c <__ccfg+0x2b0a84>
    21f0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
   pPatchTab[80] = 0;
    21f4:	00060213 	andeq	r0, r6, r3, lsl r2
    21f8:	00341200 	eorseq	r1, r4, r0, lsl #4
   pPatchTab[53] = 2;
    21fc:	0b3a0e03 	bleq	e85a10 <__ccfg+0xe65a68>
    2200:	0b390b3b 	bleq	e44ef4 <__ccfg+0xe24f4c>
   pPatchTab[55] = 3;
    2204:	06021349 	streq	r1, [r2], -r9, asr #6
   pPatchTab[110] = 4;
    2208:	0b130000 	bleq	4c2210 <__ccfg+0x4a2268>
    220c:	00065501 	andeq	r5, r6, r1, lsl #10
   pPatchTab[107] = 5;
    2210:	00341400 	eorseq	r1, r4, r0, lsl #8
   pPatchTab[65] = 6;
    2214:	0b3a0803 	bleq	e84228 <__ccfg+0xe64280>
   pPatchTab[57] = 1;
    2218:	0b390b3b 	bleq	e44f0c <__ccfg+0xe24f64>
   pPatchTab[65] = 6;
    221c:	0a021349 	beq	86f48 <__ccfg+0x66fa0>
   pIrqPatch[1] = _IRQ_PATCH_0;
    2220:	01000000 	mrseq	r0, (UNDEF: 0)
    2224:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
   const uint32_t *pS = patchGenfskRfe;
    2228:	0e030b13 	vmoveq.32	d3[0], r0
   volatile unsigned long *pD = &HWREG(RFC_RFERAM_BASE);
    222c:	06100e1b 			; <UNDEFINED> instruction: 0x06100e1b
      t2 = *pS++;
    2230:	24020000 	strcs	r0, [r2], #-0
      t4 = *pS++;
    2234:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      t6 = *pS++;
    2238:	000e030b 	andeq	r0, lr, fp, lsl #6
      t8 = *pS++;
    223c:	00160300 	andseq	r0, r6, r0, lsl #6
      *pD++ = t1;
    2240:	0b3a0e03 	bleq	e85a54 <__ccfg+0xe65aac>
      *pD++ = t2;
    2244:	0b390b3b 	bleq	e44f38 <__ccfg+0xe24f90>
      *pD++ = t3;
    2248:	00001349 	andeq	r1, r0, r9, asr #6
      *pD++ = t4;
    224c:	49002604 	stmdbmi	r0, {r2, r9, sl, sp}
      *pD++ = t6;
    2250:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
      *pD++ = t7;
    2254:	0b0b0024 	bleq	2c22ec <__ccfg+0x2a2344>
   } while (--nIterations);
    2258:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
      *pD++ = t8;
    225c:	13060000 	movwne	r0, #24576	; 0x6000
    2260:	3a0b0b01 	bcc	2c4e6c <__ccfg+0x2a4ec4>
   *pD++ = t1;
    2264:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2268:	0013010b 	andseq	r0, r3, fp, lsl #2
    226c:	000d0700 	andeq	r0, sp, r0, lsl #14
   *pD++ = t2;
    2270:	0b3a0e03 	bleq	e85a84 <__ccfg+0xe65adc>
   *pD++ = t3;
    2274:	0b390b3b 	bleq	e44f68 <__ccfg+0xe24fc0>
    2278:	0b381349 	bleq	e06fa4 <__ccfg+0xde6ffc>
   *pD++ = t4;
    227c:	0f080000 	svceq	0x00080000
   *pD++ = t5;
    2280:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2284:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2288:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
	RFCAdi3VcoLdoVoltageMode (true);
    228c:	0b3a0b0b 	bleq	e84ec0 <__ccfg+0xe64f18>
       	RFCRfTrimSet (&rfTrim);
    2290:	0b390b3b 	bleq	e44f84 <__ccfg+0xe24fdc>
    2294:	00001301 	andeq	r1, r0, r1, lsl #6
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2298:	03000d0a 	movweq	r0, #3338	; 0xd0a
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    229c:	3b0b3a0e 	blcc	2d0adc <__ccfg+0x2b0b34>
    22a0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    22a4:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
	issue_cmd ((lword)&cmd_srt);
    22a8:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
	issue_cmd ((lword)&RF_cmdFs);
    22ac:	0b00000b 	bleq	22e0 <rf_on+0x144>
    22b0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    22b4:	0b3a0b0b 	bleq	e84ee8 <__ccfg+0xe64f40>
    22b8:	0b39053b 	bleq	e437ac <__ccfg+0xe23804>
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22bc:	00001301 	andeq	r1, r0, r1, lsl #6
	IntEnable (INT_RFC_CPE_0);
    22c0:	03000d0c 	movweq	r0, #3340	; 0xd0c
	_BIC (dstate, DSTATE_IRST);
    22c4:	3b0b3a0e 	blcc	2d0b04 <__ccfg+0x2b0b5c>
    22c8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22cc:	000b3813 	andeq	r3, fp, r3, lsl r8
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22d0:	01130d00 	tsteq	r3, r0, lsl #26
	IntEnable (INT_RFC_CPE_0);
    22d4:	0b3a0b0b 	bleq	e84f08 <__ccfg+0xe64f60>
}
    22d8:	0b39053b 	bleq	e437cc <__ccfg+0xe23824>
	IntEnable (INT_RFC_CPE_0);
    22dc:	00001301 	andeq	r1, r0, r1, lsl #6
    22e0:	03000d0e 	movweq	r0, #3342	; 0xd0e
}
    22e4:	3b0b3a0e 	blcc	2d0b24 <__ccfg+0x2b0b7c>
    22e8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    22ec:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    22f0:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    22f4:	0f00000b 	svceq	0x0000000b
    22f8:	13490101 	movtne	r0, #37121	; 0x9101
    22fc:	00001301 	andeq	r1, r0, r1, lsl #6
    2300:	49002110 	stmdbmi	r0, {r4, r8, sp}
    2304:	000b2f13 	andeq	r2, fp, r3, lsl pc
    2308:	00341100 	eorseq	r1, r4, r0, lsl #2
    230c:	0b3a0e03 	bleq	e85b20 <__ccfg+0xe65b78>
    2310:	0b390b3b 	bleq	e45004 <__ccfg+0xe2505c>
    2314:	031c1349 	tsteq	ip, #603979777	; 0x24000001
    2318:	21120000 	tstcs	r2, r0
    231c:	2f134900 	svccs	0x00134900
    2320:	13000005 	movwne	r0, #5
    2324:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2328:	0b3b0b3a 	bleq	ec5018 <__ccfg+0xea5070>
    232c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2330:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    2334:	34140000 	ldrcc	r0, [r4], #-0
    2338:	3a0e0300 	bcc	382f40 <__ccfg+0x362f98>
    233c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2340:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
static void rx_int_enable () {
    2344:	1500000a 	strne	r0, [r0, #-10]
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2348:	13470034 	movtne	r0, #28724	; 0x7034
    234c:	0b3b0b3a 	bleq	ec503c <__ccfg+0xea5094>
    2350:	0a020b39 	beq	8503c <__ccfg+0x65094>
    2354:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2358:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    235c:	0e030b13 	vmoveq.32	d3[0], r0
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2360:	17550e1b 	smmlane	r5, fp, lr, r0
				diag ("BAD RX");
    2364:	17100111 			; <UNDEFINED> instruction: 0x17100111
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2368:	24020000 	strcs	r0, [r2], #-0
    236c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2370:	000e030b 	andeq	r0, lr, fp, lsl #6
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2374:	00160300 	andseq	r0, r6, r0, lsl #6
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2378:	0b3a0e03 	bleq	e85b8c <__ccfg+0xe65be4>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    237c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
		if (db->status == DATA_ENTRY_FINISHED) {
    2380:	24040000 	strcs	r0, [r4], #-0
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2384:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2388:	0008030b 	andeq	r0, r8, fp, lsl #6
			nr++;
    238c:	000f0500 	andeq	r0, pc, r0, lsl #10
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2390:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2394:	15060000 	strne	r0, [r6, #-0]
    2398:	00192700 	andseq	r2, r9, r0, lsl #14
    239c:	01150700 	tsteq	r5, r0, lsl #14
				__dp [pl + 1] = __dp [pl] - 128;
    23a0:	13011927 	movwne	r1, #6439	; 0x1927
				pl = __dp [1] + 2;
    23a4:	05080000 	streq	r0, [r8, #-0]
				__dp [pl + 1] = __dp [pl] - 128;
    23a8:	00134900 	andseq	r4, r3, r0, lsl #18
    23ac:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
				__dp [pl] = 0;
    23b0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    23b4:	0b3b0b3a 	bleq	ec50a4 <__ccfg+0xea50fc>
    23b8:	01111927 	tsteq	r1, r7, lsr #18
    23bc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
			db->status = DATA_ENTRY_PENDING;
    23c0:	01194296 			; <UNDEFINED> instruction: 0x01194296
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    23c4:	0a000013 	beq	2418 <cc1350_driver+0x10>
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    23c8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
				diag ("BAD RX");
    23cc:	0b3b0b3a 	bleq	ec50bc <__ccfg+0xea5114>
    23d0:	17021349 	strne	r1, [r2, -r9, asr #6]
	if (nr) {
    23d4:	340b0000 	strcc	r0, [fp], #-0
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23d8:	3a0e0300 	bcc	382fe0 <__ccfg+0x363038>
}
    23dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23e0:	00170213 	andseq	r0, r7, r3, lsl r2
    23e4:	82890c00 	addhi	r0, r9, #0, 24
    23e8:	01110001 	tsteq	r1, r1
}
    23ec:	00001331 	andeq	r1, r0, r1, lsr r3
    23f0:	0182890d 	orreq	r8, r2, sp, lsl #18
    23f4:	95011100 	strls	r1, [r1, #-256]	; 0xffffff00
    23f8:	13311942 	teqne	r1, #1081344	; 0x108000
    23fc:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
    2400:	03193f01 	tsteq	r9, #1, 30
    2404:	3b0b3a0e 	blcc	2d0c44 <__ccfg+0x2b0c9c>
thread (cc1350_driver)
    2408:	1119270b 	tstne	r9, fp, lsl #14
    240c:	40061201 	andmi	r1, r6, r1, lsl #4
    2410:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2414:	00001301 	andeq	r1, r0, r1, lsl #6
    2418:	0182890f 	orreq	r8, r2, pc, lsl #18
		if (dstate & DSTATE_IRST) {
    241c:	01011101 	tsteq	r1, r1, lsl #2
    2420:	10000013 	andne	r0, r0, r3, lsl r0
    2424:	0001828a 	andeq	r8, r1, sl, lsl #5
			rf_off ();
    2428:	42911802 	addsmi	r1, r1, #131072	; 0x20000
			_BIC (dstate,
    242c:	11000018 	tstne	r0, r8, lsl r0
    2430:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
		if (dstate & DSTATE_RXAC) {
    2434:	0b3a0e03 	bleq	e85c48 <__ccfg+0xe65ca0>
    2438:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
			if ((dstate & DSTATE_RXON) == 0)
    243c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
				rx_de ();
    2440:	01000000 	mrseq	r0, (UNDEF: 0)
		if (paylen == 0) {
    2444:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2448:	0e030b13 	vmoveq.32	d3[0], r0
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    244c:	17550e1b 	smmlane	r5, fp, lr, r0
    2450:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2454:	16020000 	strne	r0, [r2], -r0
    2458:	3a0e0300 	bcc	383060 <__ccfg+0x3630b8>
				paylen -= 2;
    245c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2460:	03000013 	movweq	r0, #19
    2464:	0b0b0024 	bleq	2c24fc <__ccfg+0x2a2554>
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2468:	0e030b3e 	vmoveq.16	d3[0], r0
    246c:	24040000 	strcs	r0, [r4], #-0
    2470:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2474:	0008030b 	andeq	r0, r8, fp, lsl #6
		} else if (dstate & DSTATE_RXON) {
    2478:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
			rf_on ();
    247c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
	if (dstate & DSTATE_RXAC)
    2480:	0b3b0b3a 	bleq	ec5170 <__ccfg+0xea51c8>
    2484:	13491927 	movtne	r1, #39207	; 0x9927
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2488:	06120111 			; <UNDEFINED> instruction: 0x06120111
    248c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2490:	06000019 			; <UNDEFINED> instruction: 0x06000019
	issue_cmd ((lword)&RF_cmdPropRx);
    2494:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	_BIS (dstate, DSTATE_RXAC);
    2498:	0b3b0b3a 	bleq	ec5188 <__ccfg+0xea51e0>
    249c:	17021349 	strne	r1, [r2, -r9, asr #6]
    24a0:	34070000 	strcc	r0, [r7], #-0
				if (statid != 0xffff)
    24a4:	3a0e0300 	bcc	3830ac <__ccfg+0x363104>
    24a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					((address)(RF_cmdPropTx.pPkt)) [0] =
    24ac:	00180213 	andseq	r0, r8, r3, lsl r2
				RF_cmdPropTx.pktLen = (byte) paylen;
    24b0:	11010000 	mrsne	r0, (UNDEF: 1)
		if (paylen == 0) {
    24b4:	130e2501 	movwne	r2, #58625	; 0xe501
			wait (qevent, DR_LOOP);
    24b8:	1b0e030b 	blne	3830ec <__ccfg+0x363144>
    24bc:	1117550e 	tstne	r7, lr, lsl #10
			if (dstate & DSTATE_RXAC) {
    24c0:	00171001 	andseq	r1, r7, r1
    24c4:	00240200 	eoreq	r0, r4, r0, lsl #4
				rx_int_enable ();
    24c8:	0b3e0b0b 	bleq	f850fc <__ccfg+0xf65154>
			release;
    24cc:	00000e03 	andeq	r0, r0, r3, lsl #28
			} else if (dstate & DSTATE_RFON) {
    24d0:	03001603 	movweq	r1, #1539	; 0x603
				delay (offdelay, DR_GOOF);
    24d4:	3b0b3a0e 	blcc	2d0d14 <__ccfg+0x2b0d6c>
    24d8:	0013490b 	andseq	r4, r3, fp, lsl #18
    24dc:	00240400 	eoreq	r0, r4, r0, lsl #8
		if (bckf_timer) {
    24e0:	0b3e0b0b 	bleq	f85114 <__ccfg+0xf6516c>
			wait (qevent, DR_LOOP);
    24e4:	00000803 	andeq	r0, r0, r3, lsl #16
    24e8:	3f012e05 	svccc	0x00012e05
    24ec:	3a0e0319 	bcc	383158 <__ccfg+0x3631b0>
			delay (bckf_timer, DR_LOOP);
    24f0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    24f4:	11134919 	tstne	r3, r9, lsl r9
			if (dstate & DSTATE_RXAC)
    24f8:	40061201 	andmi	r1, r6, r1, lsl #4
    24fc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
		rf_on ();
    2500:	00001301 	andeq	r1, r0, r1, lsl #6
		rx_de ();
    2504:	03003406 	movweq	r3, #1030	; 0x406
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2508:	3b0b3a0e 	blcc	2d0d48 <__ccfg+0x2b0da0>
		RF_cmdPropTx . status = 0;
    250c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2510:	07000017 	smladeq	r0, r7, r0, r0
		issue_cmd ((lword)&cmd_cs);
    2514:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		if (dstate & DSTATE_IRST)
    2518:	0b3b0b3a 	bleq	ec5208 <__ccfg+0xea5260>
    251c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2520:	17080000 	strne	r0, [r8, -r0]
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2524:	3a0b0b01 	bcc	2c5130 <__ccfg+0x2a5188>
    2528:	010b3b0b 	tsteq	fp, fp, lsl #22
			delay (1, DR_XMIT);
    252c:	09000013 	stmdbeq	r0, {r0, r1, r4}
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2530:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2534:	0b3b0b3a 	bleq	ec5224 <__ccfg+0xea527c>
    2538:	00001349 	andeq	r1, r0, r9, asr #6
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    253c:	0300340a 	movweq	r3, #1034	; 0x40a
    2540:	3b0b3a0e 	blcc	2d0d80 <__ccfg+0x2b0dd8>
				RF_cmdPropTx . status = 0;
    2544:	0013490b 	andseq	r4, r3, fp, lsl #18
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2548:	01010b00 	tsteq	r1, r0, lsl #22
				issue_cmd ((lword)&RF_cmdPropTx);
    254c:	13011349 	movwne	r1, #4937	; 0x1349
				proceed (DR_XMIT);
    2550:	210c0000 	mrscs	r0, (UNDEF: 12)
    2554:	2f134900 	svccs	0x00134900
			txtries++;
    2558:	0000000b 	andeq	r0, r0, fp
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    255c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2560:	030b130e 	movweq	r1, #45838	; 0xb30e
    2564:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2568:	10011117 	andne	r1, r1, r7, lsl r1
		goto DR_LOOP__;
    256c:	02000017 	andeq	r0, r0, #23
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2570:	0b0b0024 	bleq	2c2608 <__ccfg+0x2a2660>
		paylen = 0;
    2574:	0e030b3e 	vmoveq.16	d3[0], r0
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2578:	16030000 	strne	r0, [r3], -r0
		txtries = 0;
    257c:	3a0e0300 	bcc	383184 <__ccfg+0x3631dc>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2580:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2584:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2588:	0b0b0024 	bleq	2c2620 <__ccfg+0x2a2678>
    258c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2590:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
		    tcvphy_top (physid) == NULL)
    2594:	03193f01 	tsteq	r9, #1, 30
    2598:	3b0b3a0e 	blcc	2d0dd8 <__ccfg+0x2b0e30>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    259c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    25a0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
			rf_off ();
    25a4:	97184006 	ldrls	r4, [r8, -r6]
endthread
    25a8:	13011942 	movwne	r1, #6466	; 0x1942
    25ac:	34060000 	strcc	r0, [r6], #-0
    25b0:	3a0e0300 	bcc	3831b8 <__ccfg+0x363210>
    25b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    25b8:	07000013 	smladeq	r0, r3, r0, r0
    25bc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    25c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    25c4:	00001349 	andeq	r1, r0, r9, asr #6
    25c8:	3f012e08 	svccc	0x00012e08
    25cc:	3a0e0319 	bcc	383238 <__ccfg+0x363290>
    25d0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    25d4:	11134919 	tstne	r3, r9, lsl r9
    25d8:	40061201 	andmi	r1, r6, r1, lsl #4
    25dc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    25e0:	00001301 	andeq	r1, r0, r1, lsl #6
    25e4:	3f012e09 	svccc	0x00012e09
void RFCCPE0IntHandler (void) {
    25e8:	3a0e0319 	bcc	383254 <__ccfg+0x3632ac>
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    25ec:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
		_BIS (dstate, DSTATE_IRST);
    25f0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    25f4:	97184006 	ldrls	r4, [r8, -r6]
    25f8:	00001942 	andeq	r1, r0, r2, asr #18
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    25fc:	0300050a 	movweq	r0, #1290	; 0x50a
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2600:	3b0b3a0e 	blcc	2d0e40 <__ccfg+0x2b0e98>
    2604:	02134905 	andseq	r4, r3, #81920	; 0x14000
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2608:	00000018 	andeq	r0, r0, r8, lsl r0
	p_trigger (drvprcs, qevent);
    260c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2610:	030b130e 	movweq	r1, #45838	; 0xb30e
    2614:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2618:	10011117 	andne	r1, r1, r7, lsl r1
    261c:	02000017 	andeq	r0, r0, #23
    2620:	0b0b0024 	bleq	2c26b8 <__ccfg+0x2a2710>
    2624:	0e030b3e 	vmoveq.16	d3[0], r0
    2628:	16030000 	strne	r0, [r3], -r0
    262c:	3a0e0300 	bcc	383234 <__ccfg+0x36328c>
    2630:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	RISE_N_SHINE;
    2634:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2638:	0b0b0024 	bleq	2c26d0 <__ccfg+0x2a2728>
}
    263c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2640:	0f050000 	svceq	0x00050000
    2644:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2648:	06000013 			; <UNDEFINED> instruction: 0x06000013
    264c:	19270015 	stmdbne	r7!, {r0, r2, r4}
    2650:	15070000 	strne	r0, [r7, #-0]
void phys_cc1350 (int phy, int mbs) {
    2654:	01192701 	tsteq	r9, r1, lsl #14
	if (rbuffl != 0)
    2658:	08000013 	stmdaeq	r0, {r0, r1, r4}
    265c:	13490005 	movtne	r0, #36869	; 0x9005
		syserror (ETOOMANY, "cc13");
    2660:	15090000 	strne	r0, [r9, #-0]
		syserror (EREQPAR, "cc13 mb");
    2664:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
	if (mbs == 0)
    2668:	00130113 	andseq	r0, r3, r3, lsl r1
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    266c:	00150a00 	andseq	r0, r5, r0, lsl #20
		syserror (EREQPAR, "cc13 mb");
    2670:	13491927 	movtne	r1, #39207	; 0x9927
    2674:	130b0000 	movwne	r0, #45056	; 0xb000
	i = 0;
    2678:	3a0b0b01 	bcc	2c5284 <__ccfg+0x2a52dc>
	rbuffl = (byte) mbs;
    267c:	010b3b0b 	tsteq	fp, fp, lsl #22
		db->config.type = 0;	// General (data in structure)
    2680:	0c000013 	stceq	0, cr0, [r0], {19}
	rbuffl = (byte) mbs;
    2684:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2688:	0b3b0b3a 	bleq	ec5378 <__ccfg+0xea53d0>
    268c:	0b381349 	bleq	e073b8 <__ccfg+0xde7410>
		if (db == NULL)
    2690:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
			syserror (EMALLOC, "cc13");
    2694:	03193f01 	tsteq	r9, #1, 30
    2698:	3b0b3a0e 	blcc	2d0ed8 <__ccfg+0x2b0f30>
    269c:	2019270b 	andscs	r2, r9, fp, lsl #14
		db->status = DATA_ENTRY_PENDING;
    26a0:	0013010b 	andseq	r0, r3, fp, lsl #2
		if (i)
    26a4:	00050e00 	andeq	r0, r5, r0, lsl #28
			da->pNextEntry = (byte*) db;
    26a8:	0b3a0e03 	bleq	e85ebc <__ccfg+0xe65f14>
		db->length = rbuffl + 2;
    26ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    26b0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
		db->config.type = 0;	// General (data in structure)
    26b4:	03193f01 	tsteq	r9, #1, 30
		db->length = rbuffl + 2;
    26b8:	3b0b3a0e 	blcc	2d0ef8 <__ccfg+0x2b0f50>
	db->pNextEntry = (byte*) re;
    26bc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    26c0:	010b2013 	tsteq	fp, r3, lsl r0
    26c4:	10000013 	andne	r0, r0, r3, lsl r0
	if (rbuffs == NULL)
    26c8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	rbuffs->pCurrEntry = (byte*) re;
    26cc:	0b3b0b3a 	bleq	ec53bc <__ccfg+0xea5414>
	rbuffs->pLastEntry = NULL;
    26d0:	00001349 	andeq	r1, r0, r9, asr #6
    26d4:	31012e11 	tstcc	r1, r1, lsl lr
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26d8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    26dc:	97184006 	ldrls	r4, [r8, -r6]
    26e0:	13011942 	movwne	r1, #6466	; 0x1942
    26e4:	05120000 	ldreq	r0, [r2, #-0]
	rbuffl -= 2;
    26e8:	02133100 	andseq	r3, r3, #0, 2
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26ec:	13000017 	movwne	r0, #23
	rbuffl -= 2;
    26f0:	0111010b 	tsteq	r1, fp, lsl #2
	physid = phy;
    26f4:	13010612 	movwne	r0, #5650	; 0x1612
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26f8:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26fc:	11010182 	smlabbne	r1, r2, r1, r0
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2700:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2704:	8a150000 	bhi	54270c <__ccfg+0x522764>
    2708:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
	utimer_add (&bckf_timer);
    270c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
	drvprcs = runthread (cc1350_driver);
    2710:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
    2714:	11010182 	smlabbne	r1, r2, r1, r0
    2718:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
	if (drvprcs == 0)
    271c:	00001301 	andeq	r1, r0, r1, lsl #6
		syserror (ERESOURCE, "cc13");
    2720:	31003417 	tstcc	r0, r7, lsl r4
    2724:	00180213 	andseq	r0, r8, r3, lsl r2
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2728:	010b1800 	tsteq	fp, r0, lsl #16
    272c:	13011755 	movwne	r1, #5973	; 0x1755
    2730:	05190000 	ldreq	r0, [r9, #-0]
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2734:	1c133100 	ldfnes	f3, [r3], {-0}
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2738:	1a00000b 	bne	276c <phys_cc1350+0x118>
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    273c:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    2740:	341b0000 	ldrcc	r0, [fp], #-0
    2744:	00133100 	andseq	r3, r3, r0, lsl #2
    2748:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
    274c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2750:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2754:	13491927 	movtne	r1, #39207	; 0x9927
    2758:	06120111 			; <UNDEFINED> instruction: 0x06120111
    275c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
	plugch ();
    2760:	00130119 	andseq	r0, r3, r9, lsl r1
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2764:	00051d00 	andeq	r1, r5, r0, lsl #26
    2768:	0b3a0e03 	bleq	e85f7c <__ccfg+0xe65fd4>
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    276c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2770:	00001702 	andeq	r1, r0, r2, lsl #14
    2774:	0300341e 	movweq	r3, #1054	; 0x41e
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2778:	3b0b3a0e 	blcc	2d0fb8 <__ccfg+0x2b1010>
}
    277c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2780:	1f000017 	svcne	0x00000017
    2784:	00018289 	andeq	r8, r1, r9, lsl #5
    2788:	13310111 	teqne	r1, #1073741828	; 0x40000004
    278c:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    2790:	03193f01 	tsteq	r9, #1, 30
    2794:	3b0b3a0e 	blcc	2d0fd4 <__ccfg+0x2b102c>
    2798:	11192705 	tstne	r9, r5, lsl #14
    279c:	40061201 	andmi	r1, r6, r1, lsl #4
    27a0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    27a4:	00001301 	andeq	r1, r0, r1, lsl #6
    27a8:	01828921 	orreq	r8, r2, r1, lsr #18
    27ac:	31011101 	tstcc	r1, r1, lsl #2
    27b0:	00130113 	andseq	r0, r3, r3, lsl r1
    27b4:	002e2200 	eoreq	r2, lr, r0, lsl #4
    27b8:	0b3a0e03 	bleq	e85fcc <__ccfg+0xe66024>
    27bc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    27c0:	0b201349 	bleq	8074ec <__ccfg+0x7e7544>
    27c4:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
    27c8:	3a0e0300 	bcc	3833d0 <__ccfg+0x363428>
    27cc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    27d0:	000b2019 	andeq	r2, fp, r9, lsl r0
    27d4:	00342400 	eorseq	r2, r4, r0, lsl #8
    27d8:	0b3a0e03 	bleq	e85fec <__ccfg+0xe66044>
    27dc:	1349053b 	movtne	r0, #38203	; 0x953b
    27e0:	00001702 	andeq	r1, r0, r2, lsl #14
    27e4:	31011d25 	tstcc	r1, r5, lsr #26
    27e8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    27ec:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    27f0:	00130105 	andseq	r0, r3, r5, lsl #2
    27f4:	00052600 	andeq	r2, r5, r0, lsl #12
    27f8:	0b3a0e03 	bleq	e8600c <__ccfg+0xe66064>
    27fc:	1349053b 	movtne	r0, #38203	; 0x953b
    2800:	00001702 	andeq	r1, r0, r2, lsl #14
    2804:	03003427 	movweq	r3, #1063	; 0x427
    2808:	3b0b3a0e 	blcc	2d1048 <__ccfg+0x2b10a0>
    280c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2810:	28000018 	stmdacs	r0, {r3, r4}
    2814:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2818:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    281c:	17021349 	strne	r1, [r2, -r9, asr #6]
    2820:	34290000 	strtcc	r0, [r9], #-0
    2824:	3a0e0300 	bcc	38342c <__ccfg+0x363484>
    2828:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    282c:	00180213 	andseq	r0, r8, r3, lsl r2
    2830:	002e2a00 	eoreq	r2, lr, r0, lsl #20
    2834:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2838:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    283c:	13491927 	movtne	r1, #39207	; 0x9927
    2840:	0000193c 	andeq	r1, r0, ip, lsr r9
    2844:	3f002e2b 	svccc	0x00002e2b
    2848:	3a0e0319 	bcc	3834b4 <__ccfg+0x36350c>
    284c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2850:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    2854:	2c000019 	stccs	0, cr0, [r0], {25}
    2858:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    285c:	0b3a0e03 	bleq	e86070 <__ccfg+0xe660c8>
    2860:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2864:	0000193c 	andeq	r1, r0, ip, lsr r9
		if (res && (d < n))
    2868:	01110100 	tsteq	r1, r0, lsl #2
    286c:	0b130e25 	bleq	4c6108 <__ccfg+0x4a6160>
    2870:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2874:	01111755 	tsteq	r1, r5, asr r7
			res [d] = (char) c;
    2878:	00001710 	andeq	r1, r0, r0, lsl r7
		d++;
    287c:	0b002402 	bleq	b88c <__exidx_end+0x695f>
    2880:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2884:	0300000e 	movweq	r0, #14
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2888:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    288c:	0b3b0b3a 	bleq	ec557c <__ccfg+0xea55d4>
    2890:	00001349 	andeq	r1, r0, r9, asr #6
				enci (10000);
    2894:	0b002404 	bleq	b8ac <__exidx_end+0x697f>
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2898:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    289c:	05000008 	streq	r0, [r0, #-8]
	d = 0;
    28a0:	0b0b000f 	bleq	2c28e4 <__ccfg+0x2a293c>
		c = *fm++;
    28a4:	0f060000 	svceq	0x00060000
		if (c == '\\') {
    28a8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
			if ((c = *fm++) == '\0') {
    28ac:	07000013 	smladeq	r0, r3, r0, r0
    28b0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
				outc ('\\');
    28b4:	0b3a0b0b 	bleq	e854e8 <__ccfg+0xe65540>
			if ((c = *fm++) == '\0') {
    28b8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
				outc ('\\');
    28bc:	0d080000 	stceq	0, cr0, [r8, #-0]
    28c0:	3a0e0300 	bcc	3834c8 <__ccfg+0x363520>
			outc (c);
    28c4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    28c8:	000b3813 	andeq	r3, fp, r3, lsl r8
				outc (val);
    28cc:	01130900 	tsteq	r3, r0, lsl #18
				val = (word) va_arg (ap, aword);
    28d0:	0b3a0b0b 	bleq	e85504 <__ccfg+0xe6555c>
		if (c == '%') {
    28d4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    28d8:	0d0a0000 	stceq	0, cr0, [sl, #-0]
			c = *fm++;
    28dc:	3a0e0300 	bcc	3834e4 <__ccfg+0x36353c>
    28e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			switch (c) {
    28e4:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    28e8:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    28ec:	0b00000b 	bleq	2920 <__pi_vfparse+0x98>
    28f0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    28f4:	0b3a0b0b 	bleq	e85528 <__ccfg+0xe65580>
    28f8:	1301053b 	movwne	r0, #5435	; 0x153b
    28fc:	0d0c0000 	stceq	0, cr0, [ip, #-0]
				outc ('%');
    2900:	3a0e0300 	bcc	383508 <__ccfg+0x363560>
    2904:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2908:	000b3813 	andeq	r3, fp, r3, lsl r8
				outc (c);
    290c:	01130d00 	tsteq	r3, r0, lsl #26
			outc (c);
    2910:	0b3a0b0b 	bleq	e85544 <__ccfg+0xe6559c>
			if (c == '\0')
    2914:	1301053b 	movwne	r0, #5435	; 0x153b
				return d;
    2918:	0d0e0000 	stceq	0, cr0, [lr, #-0]
}
    291c:	3a0e0300 	bcc	383524 <__ccfg+0x36357c>
    2920:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			switch (c) {
    2924:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    2928:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    292c:	0f00000b 	svceq	0x0000000b
				for (i = 12; ; i -= 4) {
    2930:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
				val = (word) va_arg (ap, aword);
    2934:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
						[ (val >> i) & 0xf ]);
    2938:	0b201927 	bleq	808ddc <__ccfg+0x7e8e34>
    293c:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    2940:	03193f01 	tsteq	r9, #1, 30
					outc (__pi_hex_enc_table
    2944:	3b0b3a0e 	blcc	2d1184 <__ccfg+0x2b11dc>
    2948:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
					if (i == 0)
    294c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2950:	97184006 	ldrls	r4, [r8, -r6]
				for (i = 12; ; i -= 4) {
    2954:	13011942 	movwne	r1, #6466	; 0x1942
				val = (word) va_arg (ap, aword);
    2958:	34110000 	ldrcc	r0, [r1], #-0
				if (c == 'd' && (val & 0x8000) != 0) {
    295c:	3a0e0300 	bcc	383564 <__ccfg+0x3635bc>
				val = (word) va_arg (ap, aword);
    2960:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				if (c == 'd' && (val & 0x8000) != 0) {
    2964:	00180213 	andseq	r0, r8, r3, lsl r2
    2968:	00051200 	andeq	r1, r5, r0, lsl #4
					outc ('-');
    296c:	0b3a0803 	bleq	e84980 <__ccfg+0xe649d8>
    2970:	13490b3b 	movtne	r0, #39739	; 0x9b3b
					val = (~val) + 1;
    2974:	00001702 	andeq	r1, r0, r2, lsl #14
    2978:	31001d13 	tstcc	r0, r3, lsl sp
				for (i = 12; ; i -= 4) {
    297c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
				enci (10000);
    2980:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2984:	1400000b 	strne	r0, [r0], #-11
    2988:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    298c:	0b3a0e03 	bleq	e861a0 <__ccfg+0xe661f8>
    2990:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2994:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2998:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    299c:	15000019 	strne	r0, [r0, #-25]	; 0xffffffe7
    29a0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    29a4:	0b3a0e03 	bleq	e861b8 <__ccfg+0xe66210>
    29a8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    29ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
    29b0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    29b4:	00130119 	andseq	r0, r3, r9, lsl r1
    29b8:	00051600 	andeq	r1, r5, r0, lsl #12
    29bc:	0b3a0e03 	bleq	e861d0 <__ccfg+0xe66228>
    29c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    29c4:	00001802 	andeq	r1, r0, r2, lsl #16
				if (c == 'd' || c == 'u') {
    29c8:	03003417 	movweq	r3, #1047	; 0x417
    29cc:	3b0b3a0e 	blcc	2d120c <__ccfg+0x2b1264>
					if (c == 'd' &&
    29d0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
					val = va_arg (ap, lword);
    29d4:	18000017 	stmdane	r0, {r0, r1, r2, r4}
					fm++;
    29d8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
					if (c == 'd' &&
    29dc:	0b3b0b3a 	bleq	ec56cc <__ccfg+0xea5724>
    29e0:	17021349 	strne	r1, [r2, -r9, asr #6]
						outc ('-');
    29e4:	34190000 	ldrcc	r0, [r9], #-0
    29e8:	3a0e0300 	bcc	3835f0 <__ccfg+0x363648>
						val = (~val) + 1;
    29ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				enci (10000);
    29f0:	1a000013 	bne	2a44 <__pi_vfparse+0x1bc>
					enci (1000000000UL);
    29f4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    29f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    29fc:	17021349 	strne	r1, [r2, -r9, asr #6]
    2a00:	341b0000 	ldrcc	r0, [fp], #-0
    2a04:	3a0e0300 	bcc	38360c <__ccfg+0x363664>
    2a08:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2a0c:	00061c13 	andeq	r1, r6, r3, lsl ip
    2a10:	00341c00 	eorseq	r1, r4, r0, lsl #24
    2a14:	0b3a0803 	bleq	e84a28 <__ccfg+0xe64a80>
    2a18:	1349053b 	movtne	r0, #38203	; 0x953b
    2a1c:	00001702 	andeq	r1, r0, r2, lsl #14
    2a20:	0182891d 	orreq	r8, r2, sp, lsl r9
    2a24:	31011101 	tstcc	r1, r1, lsl #2
    2a28:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    2a2c:	0001828a 	andeq	r8, r1, sl, lsl #5
    2a30:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    2a34:	1f000018 	svcne	0x00000018
				} else if (c == 'x') {
    2a38:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
					for (i = 28; ; i -= 4) {
    2a3c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
					val = va_arg (ap, lword);
    2a40:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
							[ (val >> i) & 0xf ]);
    2a44:	01200000 			; <UNDEFINED> instruction: 0x01200000
    2a48:	01134901 	tsteq	r3, r1, lsl #18
						outc (__pi_hex_enc_table
    2a4c:	21000013 	tstcs	r0, r3, lsl r0
    2a50:	13490021 	movtne	r0, #36897	; 0x9021
    2a54:	00000b2f 	andeq	r0, r0, pc, lsr #22
						if (i == 0)
    2a58:	03003422 	movweq	r3, #1058	; 0x422
    2a5c:	3b0b3a0e 	blcc	2d129c <__ccfg+0x2b12f4>
					for (i = 28; ; i -= 4) {
    2a60:	1c13490b 			; <UNDEFINED> instruction: 0x1c13490b
					outc ('%');
    2a64:	2300000a 	movwcs	r0, #10
    2a68:	13490026 	movtne	r0, #36902	; 0x9026
    2a6c:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
					outc ('l');
    2a70:	03193f01 	tsteq	r9, #1, 30
    2a74:	3b0b3a0e 	blcc	2d12b4 <__ccfg+0x2b130c>
				val = (word) va_arg (ap, aword);
    2a78:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
				outc (val);
    2a7c:	00193c13 	andseq	r3, r9, r3, lsl ip
    2a80:	00052500 	andeq	r2, r5, r0, lsl #10
				while (*st != '\0') {
    2a84:	00001349 	andeq	r1, r0, r9, asr #6
    2a88:	01110100 	tsteq	r1, r0, lsl #2
    2a8c:	0b130e25 	bleq	4c6328 <__ccfg+0x4a6380>
    2a90:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
					outc (*st);
    2a94:	01111755 	tsteq	r1, r5, asr r7
    2a98:	00001710 	andeq	r1, r0, r0, lsl r7
					st++;
    2a9c:	0b002402 	bleq	baac <__exidx_end+0x6b7f>
		c = *fm++;
    2aa0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2aa4:	0300000e 	movweq	r0, #14
    2aa8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
char *vform (char *res, const char *fm, va_list aq) {
    2aac:	0b3b0b3a 	bleq	ec579c <__ccfg+0xea57f4>
    2ab0:	00001349 	andeq	r1, r0, r9, asr #6
	if (res != NULL) {
    2ab4:	0b002404 	bleq	bacc <__exidx_end+0x6b9f>
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2ab8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2abc:	05000008 	streq	r0, [r0, #-8]
    2ac0:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
}
    2ac4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2ac8:	0b201927 	bleq	808f6c <__ccfg+0x7e8fc4>
	fml = strlen (fm) + 17;
    2acc:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    2ad0:	3a0e0300 	bcc	3836d8 <__ccfg+0x363730>
    2ad4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
	if ((res = (char*) umalloc (fml)) == NULL)
    2ad8:	000b2019 	andeq	r2, fp, r9, lsl r0
    2adc:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
    2ae0:	0b3a0e03 	bleq	e862f4 <__ccfg+0xe6634c>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2ae4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2ae8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2aec:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2af0:	00130119 	andseq	r0, r3, r9, lsl r1
		ufree (res);
    2af4:	00050800 	andeq	r0, r5, r0, lsl #16
		goto Again;
    2af8:	0b3a0e03 	bleq	e8630c <__ccfg+0xe66364>
	if (buf == NULL || fmt == NULL)
    2afc:	1349053b 	movtne	r0, #38203	; 0x953b
int vscan (const char *buf, const char *fmt, va_list ap) {
    2b00:	00001702 	andeq	r1, r0, r2, lsl #14
	if (buf == NULL || fmt == NULL)
    2b04:	03003409 	movweq	r3, #1033	; 0x409
    2b08:	3b0b3a0e 	blcc	2d1348 <__ccfg+0x2b13a0>
    2b0c:	02134905 	andseq	r4, r3, #81920	; 0x14000
		    	    case 'u': scanu (lword); break;
    2b10:	0a000017 	beq	2b74 <vscan+0x78>
			while (isspace (*buf)) buf++;
    2b14:	1331001d 	teqne	r1, #29
    2b18:	06120111 			; <UNDEFINED> instruction: 0x06120111
	while (*fmt != '\0') {
    2b1c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
		if (*fmt++ != '%')
    2b20:	0b0b0000 	bleq	2c2b28 <__ccfg+0x2a2b80>
		switch (*fmt++) {
    2b24:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2b28:	00130106 	andseq	r0, r3, r6, lsl #2
    2b2c:	82890c00 	addhi	r0, r9, #0, 24
    2b30:	01110101 	tsteq	r1, r1, lsl #2
    2b34:	13011331 	movwne	r1, #4913	; 0x1331
    2b38:	8a0d0000 	bhi	342b40 <__ccfg+0x322b98>
    2b3c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
}
    2b40:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
		switch (*fmt++) {
    2b44:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
    2b48:	11010182 	smlabbne	r1, r2, r1, r0
    2b4c:	0f000001 	svceq	0x00000001
    2b50:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
			while (isspace (*buf)) buf++;
    2b54:	0b3a0e03 	bleq	e86368 <__ccfg+0xe663c0>
    2b58:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2b5c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2b60:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2b64:	00130119 	andseq	r0, r3, r9, lsl r1
    2b68:	00341000 	eorseq	r1, r4, r0
			if (*buf == '\0')
    2b6c:	0b3a0e03 	bleq	e86380 <__ccfg+0xe663d8>
			if (*buf != ',') {
    2b70:	13490b3b 	movtne	r0, #39739	; 0x9b3b
			sap = va_arg (ap, char*);
    2b74:	00001702 	andeq	r1, r0, r2, lsl #14
			nc++;
    2b78:	01828911 	orreq	r8, r2, r1, lsl r9
			if (*buf != ',') {
    2b7c:	31011100 	mrscc	r1, (UNDEF: 17)
				while (!isspace (*buf) && *buf != ',' &&
    2b80:	12000013 	andne	r0, r0, #19
    2b84:	01018289 	smlabbeq	r1, r9, r2, r8
    2b88:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2b8c:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    2b90:	03193f01 	tsteq	r9, #1, 30
    2b94:	3b0b3a0e 	blcc	2d13d4 <__ccfg+0x2b142c>
    2b98:	3c19270b 	ldccc	7, cr2, [r9], {11}
			while (isspace (*buf)) buf++;
    2b9c:	00130119 	andseq	r0, r3, r9, lsl r1
    2ba0:	00051400 	andeq	r1, r5, r0, lsl #8
    2ba4:	00001349 	andeq	r1, r0, r9, asr #6
    2ba8:	3f002e15 	svccc	0x00002e15
    2bac:	3a0e0319 	bcc	383818 <__ccfg+0x363870>
			if (*buf == ',') buf++;
    2bb0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2bb4:	00193c19 	andseq	r3, r9, r9, lsl ip
			*sap = '\0';
    2bb8:	002e1600 	eoreq	r1, lr, r0, lsl #12
			break;
    2bbc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
		    case 'd': scani (word); break;
    2bc0:	0b3b0b3a 	bleq	ec58b0 <__ccfg+0xea5908>
    2bc4:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    2bc8:	01000000 	mrseq	r0, (UNDEF: 0)
    2bcc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2bd0:	0e030b13 	vmoveq.32	d3[0], r0
    2bd4:	17550e1b 	smmlane	r5, fp, lr, r0
    2bd8:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2bdc:	24020000 	strcs	r0, [r2], #-0
    2be0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2be4:	000e030b 	andeq	r0, lr, fp, lsl #6
    2be8:	00160300 	andseq	r0, r6, r0, lsl #6
    2bec:	0b3a0e03 	bleq	e86400 <__ccfg+0xe66458>
    2bf0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2bf4:	24040000 	strcs	r0, [r4], #-0
    2bf8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2bfc:	0008030b 	andeq	r0, r8, fp, lsl #6
    2c00:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    2c04:	0b3a0e03 	bleq	e86418 <__ccfg+0xe66470>
    2c08:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2c0c:	0b201349 	bleq	807938 <__ccfg+0x7e7990>
    2c10:	00001301 	andeq	r1, r0, r1, lsl #6
    2c14:	03000506 	movweq	r0, #1286	; 0x506
    2c18:	3b0b3a0e 	blcc	2d1458 <__ccfg+0x2b14b0>
    2c1c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2c20:	00340700 	eorseq	r0, r4, r0, lsl #14
    2c24:	0b3a0e03 	bleq	e86438 <__ccfg+0xe66490>
    2c28:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2c2c:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
		    case 'u': scanu (word); break;
    2c30:	03193f01 	tsteq	r9, #1, 30
    2c34:	3b0b3a0e 	blcc	2d1474 <__ccfg+0x2b14cc>
    2c38:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2c3c:	010b2013 	tsteq	fp, r3, lsl r0
    2c40:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2c44:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2c48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2c4c:	00001349 	andeq	r1, r0, r9, asr #6
    2c50:	0300340a 	movweq	r3, #1034	; 0x40a
    2c54:	3b0b3a0e 	blcc	2d1494 <__ccfg+0x2b14ec>
    2c58:	00134905 	andseq	r4, r3, r5, lsl #18
    2c5c:	002e0b00 	eoreq	r0, lr, r0, lsl #22
    2c60:	0b3a0e03 	bleq	e86474 <__ccfg+0xe664cc>
    2c64:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2c68:	00000b20 	andeq	r0, r0, r0, lsr #22
    2c6c:	3f012e0c 	svccc	0x00012e0c
    2c70:	3a0e0319 	bcc	3838dc <__ccfg+0x363934>
    2c74:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
		    case 'x': scanx (word); break;
    2c78:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2c7c:	97184006 	ldrls	r4, [r8, -r6]
    2c80:	13011942 	movwne	r1, #6466	; 0x1942
    2c84:	050d0000 	streq	r0, [sp, #-0]
    2c88:	3a0e0300 	bcc	383890 <__ccfg+0x3638e8>
    2c8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c90:	00170213 	andseq	r0, r7, r3, lsl r2
    2c94:	00340e00 	eorseq	r0, r4, r0, lsl #28
    2c98:	0b3a0e03 	bleq	e864ac <__ccfg+0xe66504>
    2c9c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2ca0:	00001802 	andeq	r1, r0, r2, lsl #16
    2ca4:	0300340f 	movweq	r3, #1039	; 0x40f
    2ca8:	3b0b3a0e 	blcc	2d14e8 <__ccfg+0x2b1540>
    2cac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2cb0:	10000017 	andne	r0, r0, r7, lsl r0
    2cb4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2cb8:	17550152 			; <UNDEFINED> instruction: 0x17550152
    2cbc:	0b590b58 	bleq	1645a24 <__ccfg+0x1625a7c>
    2cc0:	00001301 	andeq	r1, r0, r1, lsl #6
    2cc4:	31000511 	tstcc	r0, r1, lsl r5
    2cc8:	12000013 	andne	r0, r0, #19
    2ccc:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    2cd0:	34130000 	ldrcc	r0, [r3], #-0
    2cd4:	02133100 	andseq	r3, r3, #0, 2
    2cd8:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
    2cdc:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2ce0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2ce4:	0b590b58 	bleq	1645a4c <__ccfg+0x1625aa4>
    2ce8:	0b150000 	bleq	542cf0 <__ccfg+0x522d48>
    2cec:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
			switch (*fmt++) {
    2cf0:	16000006 	strne	r0, [r0], -r6
    2cf4:	13310034 	teqne	r1, #52	; 0x34
    2cf8:	00001702 	andeq	r1, r0, r2, lsl #14
    2cfc:	3f012e17 	svccc	0x00012e17
    2d00:	3a0e0319 	bcc	38396c <__ccfg+0x3639c4>
    2d04:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2d08:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
		    	    case 'd': scani (lword); break;
    2d0c:	97184006 	ldrls	r4, [r8, -r6]
    2d10:	13011942 	movwne	r1, #6466	; 0x1942
    2d14:	1d180000 	ldcne	0, cr0, [r8, #-0]
    2d18:	11133101 	tstne	r3, r1, lsl #2
    2d1c:	58061201 	stmdapl	r6, {r0, r9, ip}
    2d20:	010b590b 	tsteq	fp, fp, lsl #18
    2d24:	19000013 	stmdbne	r0, {r0, r1, r4}
    2d28:	01018289 	smlabbeq	r1, r9, r2, r8
    2d2c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2d30:	8a1a0000 	bhi	682d38 <__ccfg+0x662d90>
    2d34:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    2d38:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    2d3c:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    2d40:	03193f01 	tsteq	r9, #1, 30
    2d44:	3b0b3a0e 	blcc	2d1584 <__ccfg+0x2b15dc>
    2d48:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2d4c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2d50:	97184006 	ldrls	r4, [r8, -r6]
    2d54:	13011942 	movwne	r1, #6466	; 0x1942
    2d58:	051c0000 	ldreq	r0, [ip, #-0]
    2d5c:	3a0e0300 	bcc	383964 <__ccfg+0x3639bc>
    2d60:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2d64:	00170213 	andseq	r0, r7, r3, lsl r2
		    	    case 'x': scanx (lword); break;
    2d68:	00341d00 	eorseq	r1, r4, r0, lsl #26
    2d6c:	0b3a0e03 	bleq	e86580 <__ccfg+0xe665d8>
    2d70:	1349053b 	movtne	r0, #38203	; 0x953b
    2d74:	00001702 	andeq	r1, r0, r2, lsl #14
    2d78:	31012e1e 	tstcc	r1, lr, lsl lr
    2d7c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2d80:	97184006 	ldrls	r4, [r8, -r6]
    2d84:	13011942 	movwne	r1, #6466	; 0x1942
    2d88:	051f0000 	ldreq	r0, [pc, #-0]	; 2d90 <vscan+0x294>
    2d8c:	02133100 	andseq	r3, r3, #0, 2
    2d90:	20000017 	andcs	r0, r0, r7, lsl r0
    2d94:	13310034 	teqne	r1, #52	; 0x34
    2d98:	1d210000 	stcne	0, cr0, [r1, #-0]
    2d9c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    2da0:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    2da4:	0105590b 	tsteq	r5, fp, lsl #18
    2da8:	22000013 	andcs	r0, r0, #19
    2dac:	01018289 	smlabbeq	r1, r9, r2, r8
    2db0:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2db4:	00001301 	andeq	r1, r0, r1, lsl #6
    2db8:	01828923 	orreq	r8, r2, r3, lsr #18
    2dbc:	31011100 	mrscc	r1, (UNDEF: 17)
    2dc0:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    2dc4:	01018289 	smlabbeq	r1, r9, r2, r8
    2dc8:	42930111 	addsmi	r0, r3, #1073741828	; 0x40000004
    2dcc:	00130118 	andseq	r0, r3, r8, lsl r1
    2dd0:	001d2500 	andseq	r2, sp, r0, lsl #10
    2dd4:	01111331 	tsteq	r1, r1, lsr r3
		    	    case 'd': scani (lword); break;
    2dd8:	0b580612 	bleq	1604628 <__ccfg+0x15e4680>
    2ddc:	00000559 	andeq	r0, r0, r9, asr r5
    2de0:	01828926 	orreq	r8, r2, r6, lsr #18
    2de4:	01011101 	tsteq	r1, r1, lsl #2
    2de8:	27000013 	smladcs	r0, r3, r0, r0
    2dec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2df0:	0b3a0e03 	bleq	e86604 <__ccfg+0xe6665c>
		    	    case 'u': scanu (lword); break;
    2df4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2df8:	1301193c 	movwne	r1, #6460	; 0x193c
    2dfc:	05280000 	streq	r0, [r8, #-0]!
    2e00:	00134900 	andseq	r4, r3, r0, lsl #18
    2e04:	012e2900 			; <UNDEFINED> instruction: 0x012e2900
    2e08:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2e0c:	0b3b0b3a 	bleq	ec5afc <__ccfg+0xea5b54>
    2e10:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    2e14:	00001301 	andeq	r1, r0, r1, lsl #6
    2e18:	3f012e2a 	svccc	0x00012e2a
    2e1c:	3a0e0319 	bcc	383a88 <__ccfg+0x363ae0>
    2e20:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2e24:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    2e28:	00000019 	andeq	r0, r0, r9, lsl r0
    2e2c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2e30:	030b130e 	movweq	r1, #45838	; 0xb30e
    2e34:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2e38:	10011117 	andne	r1, r1, r7, lsl r1
		    	    case 'x': scanx (lword); break;
    2e3c:	02000017 	andeq	r0, r0, #23
    2e40:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
			if ((c = *buf++) == '\0')
    2e44:	0b3b0b3a 	bleq	ec5b34 <__ccfg+0xea5b8c>
    2e48:	00001349 	andeq	r1, r0, r9, asr #6
    2e4c:	0b002403 	bleq	be60 <__exidx_end+0x6f33>
			sap = va_arg (ap, char*);
    2e50:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
			*sap = c;
    2e54:	0400000e 	streq	r0, [r0], #-14
			while (isspace (*buf)) buf++;
    2e58:	0b0b0024 	bleq	2c2ef0 <__ccfg+0x2a2f48>
    2e5c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2e60:	0f050000 	svceq	0x00050000
    2e64:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
						*sap++ = *buf++;
    2e68:	06000013 			; <UNDEFINED> instruction: 0x06000013
			while (isspace (*buf)) buf++;
    2e6c:	19270015 	stmdbne	r7!, {r0, r2, r4}
    2e70:	15070000 	strne	r0, [r7, #-0]
    2e74:	01192701 	tsteq	r9, r1, lsl #14
		return 0;
    2e78:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2e7c:	13490005 	movtne	r0, #36869	; 0x9005
		    case 'x': scanx (word); break;
    2e80:	15090000 	strne	r0, [r9, #-0]
    2e84:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
		    	    case 'x': scanx (lword); break;
    2e88:	00130113 	andseq	r0, r3, r3, lsl r1
    2e8c:	00150a00 	andseq	r0, r5, r0, lsl #20
strand (__outserial, const char*)
    2e90:	13491927 	movtne	r1, #39207	; 0x9927
    2e94:	130b0000 	movwne	r0, #45056	; 0xb000
    2e98:	3a0b0b01 	bcc	2c5aa4 <__ccfg+0x2a5afc>
    2e9c:	010b3b0b 	tsteq	fp, fp, lsl #22
endstrand
    2ea0:	0c000013 	stceq	0, cr0, [r0], {19}
    2ea4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	ptr = data;
    2ea8:	0b3b0b3a 	bleq	ec5b98 <__ccfg+0xea5bf0>
    2eac:	0b381349 	bleq	e07bd8 <__ccfg+0xde7c30>
	if (*ptr)
    2eb0:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
		len = strlen (ptr);
    2eb4:	3a0e0301 	bcc	383ac0 <__ccfg+0x363b18>
    2eb8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    2ebc:	010b2019 	tsteq	fp, r9, lsl r0
    2ec0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    2ec4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2ec8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2ecc:	00001349 	andeq	r1, r0, r9, asr #6
	len -= quant;
    2ed0:	03002e0f 	movweq	r2, #3599	; 0xe0f
    2ed4:	3b0b3a0e 	blcc	2d1714 <__ccfg+0x2b176c>
    2ed8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
	if (len == 0) {
    2edc:	000b2013 	andeq	r2, fp, r3, lsl r0
		ufree (data);
    2ee0:	002e1000 	eoreq	r1, lr, r0
		finish;
    2ee4:	0b3a0e03 	bleq	e866f8 <__ccfg+0xe66750>
    2ee8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    2eec:	00000b20 	andeq	r0, r0, r0, lsr #22
    2ef0:	03012e11 	movweq	r2, #7697	; 0x1e11
    2ef4:	3b0b3a0e 	blcc	2d1734 <__ccfg+0x2b178c>
    2ef8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2efc:	010b2013 	tsteq	fp, r3, lsl r0
strand (__inserial, address)
    2f00:	12000013 	andne	r0, r0, #19
    2f04:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2f08:	0b3b0b3a 	bleq	ec5bf8 <__ccfg+0xea5c50>
    2f0c:	00001349 	andeq	r1, r0, r9, asr #6
    2f10:	03003413 	movweq	r3, #1043	; 0x413
	if (__inpline != NULL)
    2f14:	3b0b3a0e 	blcc	2d1754 <__ccfg+0x2b17ac>
    2f18:	0013490b 	andseq	r4, r3, fp, lsl #18
		finish;
    2f1c:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    2f20:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2f24:	0b3b0b3a 	bleq	ec5c14 <__ccfg+0xea5c6c>
    2f28:	01111927 	tsteq	r1, r7, lsr #18
    2f2c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
		umwait (IM_INIT);
    2f30:	01194297 			; <UNDEFINED> instruction: 0x01194297
		release;
    2f34:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
	savedata (data);
    2f38:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	len = MAX_LINE_LENGTH;
    2f3c:	0b3b0b3a 	bleq	ec5c2c <__ccfg+0xea5c84>
	io (IM_READ, __cport, READ, ptr, 1);
    2f40:	17021349 	strne	r1, [r2, -r9, asr #6]
    2f44:	34160000 	ldrcc	r0, [r6], #-0
    2f48:	3a0e0300 	bcc	383b50 <__ccfg+0x363ba8>
    2f4c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (ptr == (char*) data) { // new line
    2f50:	00051c13 	andeq	r1, r5, r3, lsl ip
    2f54:	011d1700 	tsteq	sp, r0, lsl #14
		if (*ptr == '\0') { // bin cmd
    2f58:	01521331 	cmpeq	r2, r1, lsr r3
			proceed (IM_BIN);
    2f5c:	0b581755 	bleq	1608cb8 <__ccfg+0x15e8d10>
    2f60:	13010b59 	movwne	r0, #7001	; 0x1b59
		if (*ptr < 0x20)
    2f64:	05180000 	ldreq	r0, [r8, #-0]
    2f68:	1c133100 	ldfnes	f3, [r3], {-0}
			proceed (IM_READ);
    2f6c:	1900000b 	stmdbne	r0, {r0, r1, r3}
    2f70:	1331001d 	teqne	r1, #29
	if (*ptr == '\n' || *ptr == '\r') {
    2f74:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2f78:	0b590b58 	bleq	1645ce0 <__ccfg+0x1625d38>
    2f7c:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
		*ptr = '\0';
    2f80:	11133101 	tstne	r3, r1, lsl #2
		__inpline = (char*)data;
    2f84:	58061201 	stmdapl	r6, {r0, r9, ip}
		finish;
    2f88:	010b590b 	tsteq	fp, fp, lsl #18
	if (len) {
    2f8c:	1b000013 	blne	2fe0 <__inserial+0xe0>
		ptr++;
    2f90:	00018289 	andeq	r8, r1, r9, lsl #5
    2f94:	13310111 	teqne	r1, #1073741828	; 0x40000004
		len--;
    2f98:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
	proceed (IM_READ);
    2f9c:	11010182 	smlabbne	r1, r2, r1, r0
	io (IM_BIN, __cport, READ, ptr, 1);
    2fa0:	00130101 	andseq	r0, r3, r1, lsl #2
    2fa4:	828a1d00 	addhi	r1, sl, #0, 26
    2fa8:	18020001 	stmdane	r2, {r0}
    2fac:	00184291 	mulseq	r8, r1, r2
    2fb0:	82891e00 	addhi	r1, r9, #0, 28
	len -= 2;
    2fb4:	01110101 	tsteq	r1, r1, lsl #2
	if (len > *ptr + 1) // 1 for 0x04
    2fb8:	13011331 	movwne	r1, #4913	; 0x1331
    2fbc:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
		len = *ptr + 1;
    2fc0:	11010182 	smlabbne	r1, r2, r1, r0
    2fc4:	20000001 	andcs	r0, r0, r1
	ptr++;
    2fc8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
	quant = io (IM_BINL, __cport, READ, ptr, len);
    2fcc:	0b3a0e03 	bleq	e867e0 <__ccfg+0xe66838>
    2fd0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2fd4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2fd8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2fdc:	00130119 	andseq	r0, r3, r9, lsl r1
    2fe0:	00052100 	andeq	r2, r5, r0, lsl #2
	len -= quant;
    2fe4:	0b3a0e03 	bleq	e867f8 <__ccfg+0xe66850>
		__inpline = (char*)data;
    2fe8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
		finish;
    2fec:	00001702 	andeq	r1, r0, r2, lsl #14
	ptr += quant;
    2ff0:	03003422 	movweq	r3, #1058	; 0x422
    2ff4:	3b0b3a0e 	blcc	2d1834 <__ccfg+0x2b188c>
endstrand
    2ff8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2ffc:	23000018 	movwcs	r0, #24
	proceed (IM_BINL);
    3000:	08030034 	stmdaeq	r3, {r2, r4, r5}
endstrand
    3004:	0b3b0b3a 	bleq	ec5cf4 <__ccfg+0xea5d4c>
    3008:	17021349 	strne	r1, [r2, -r9, asr #6]
    300c:	34240000 	strtcc	r0, [r4], #-0
    3010:	3a080300 	bcc	203c18 <__ccfg+0x1e3c70>
    3014:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3018:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    301c:	0111010b 	tsteq	r1, fp, lsl #2
    3020:	13010612 	movwne	r0, #5650	; 0x1612
    3024:	34260000 	strtcc	r0, [r6], #-0
    3028:	3a0e0300 	bcc	383c30 <__ccfg+0x363c88>
    302c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3030:	00170213 	andseq	r0, r7, r3, lsl r2
    3034:	011d2700 	tsteq	sp, r0, lsl #14
    3038:	01111331 	tsteq	r1, r1, lsr r3
    303c:	0b580612 	bleq	160488c <__ccfg+0x15e48e4>
    3040:	13010559 	movwne	r0, #5465	; 0x1559
    3044:	05280000 	streq	r0, [r8, #-0]!
    3048:	00133100 	andseq	r3, r3, r0, lsl #2
    304c:	010b2900 	tsteq	fp, r0, lsl #18
    3050:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3054:	342a0000 	strtcc	r0, [sl], #-0
    3058:	02133100 	andseq	r3, r3, #0, 2
    305c:	2b000017 	blcs	30c0 <NOROM_OSCClockSourceSet+0x4>
    3060:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3064:	17550152 			; <UNDEFINED> instruction: 0x17550152
    3068:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    306c:	00001301 	andeq	r1, r0, r1, lsl #6
    3070:	55010b2c 	strpl	r0, [r1, #-2860]	; 0xfffff4d4
    3074:	2d000017 	stccs	0, cr0, [r0, #-92]	; 0xffffffa4
    3078:	13490026 	movtne	r0, #36902	; 0x9026
    307c:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
    3080:	03193f00 	tsteq	r9, #0, 30
    3084:	3b0b3a0e 	blcc	2d18c4 <__ccfg+0x2b191c>
    3088:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    308c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3090:	97184006 	ldrls	r4, [r8, -r6]
    3094:	00001942 	andeq	r1, r0, r2, asr #18
    3098:	4901012f 	stmdbmi	r1, {r0, r1, r2, r3, r5, r8}
    309c:	00130113 	andseq	r0, r3, r3, lsl r1
    30a0:	00213000 	eoreq	r3, r1, r0
    30a4:	0b2f1349 	bleq	bc7dd0 <__ccfg+0xba7e28>
    30a8:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
    30ac:	03193f01 	tsteq	r9, #1, 30
    30b0:	3b0b3a0e 	blcc	2d18f0 <__ccfg+0x2b1948>
    30b4:	3c19270b 	ldccc	7, cr2, [r9], {11}
    30b8:	00130119 	andseq	r0, r3, r9, lsl r1
    30bc:	012e3200 			; <UNDEFINED> instruction: 0x012e3200
    30c0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    30c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    30c8:	13491927 	movtne	r1, #39207	; 0x9927
    30cc:	1301193c 	movwne	r1, #6460	; 0x193c
    30d0:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
    30d4:	03193f00 	tsteq	r9, #0, 30
    30d8:	3b0b3a0e 	blcc	2d1918 <__ccfg+0x2b1970>
    30dc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    30e0:	00193c13 	andseq	r3, r9, r3, lsl ip
    30e4:	11010000 	mrsne	r0, (UNDEF: 1)
    30e8:	130e2501 	movwne	r2, #58625	; 0xe501
    30ec:	1b0e030b 	blne	383d20 <__ccfg+0x363d78>
    30f0:	1117550e 	tstne	r7, lr, lsl #10
    30f4:	00171001 	andseq	r1, r7, r1
    30f8:	00240200 	eoreq	r0, r4, r0, lsl #4
    30fc:	0b3e0b0b 	bleq	f85d30 <__ccfg+0xf65d88>
    3100:	00000e03 	andeq	r0, r0, r3, lsl #28
    3104:	03001603 	movweq	r1, #1539	; 0x603
    3108:	3b0b3a0e 	blcc	2d1948 <__ccfg+0x2b19a0>
    310c:	0013490b 	andseq	r4, r3, fp, lsl #18
    3110:	00240400 	eoreq	r0, r4, r0, lsl #8
    3114:	0b3e0b0b 	bleq	f85d48 <__ccfg+0xf65da0>
    3118:	00000803 	andeq	r0, r0, r3, lsl #16
    311c:	0b010405 	bleq	44138 <__ccfg+0x24190>
    3120:	3b0b3a0b 	blcc	2d1954 <__ccfg+0x2b19ac>
    3124:	0013010b 	andseq	r0, r3, fp, lsl #2
    3128:	00280600 	eoreq	r0, r8, r0, lsl #12
    312c:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    3130:	04070000 	streq	r0, [r7], #-0
    3134:	3a0b0b01 	bcc	2c5d40 <__ccfg+0x2a5d98>
    3138:	01053b0b 	tsteq	r5, fp, lsl #22
    313c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    3140:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3144:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3148:	00001349 	andeq	r1, r0, r9, asr #6
    314c:	03002e09 	movweq	r2, #3593	; 0xe09
    3150:	3b0b3a0e 	blcc	2d1990 <__ccfg+0x2b19e8>
    3154:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3158:	000b2013 	andeq	r2, fp, r3, lsl r0
    315c:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
    3160:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3164:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3168:	13491927 	movtne	r1, #39207	; 0x9927
    316c:	13010b20 	movwne	r0, #6944	; 0x1b20
    3170:	340b0000 	strcc	r0, [fp], #-0
    3174:	3a0e0300 	bcc	383d7c <__ccfg+0x363dd4>
    3178:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    317c:	0c000013 	stceq	0, cr0, [r0], {19}
    3180:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    3184:	0b3a0e03 	bleq	e86998 <__ccfg+0xe669f0>
    3188:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    318c:	01111349 	tsteq	r1, r9, asr #6
    3190:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3194:	00194297 	mulseq	r9, r7, r2
    3198:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
    319c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    31a0:	0b3b0b3a 	bleq	ec5e90 <__ccfg+0xea5ee8>
    31a4:	13491927 	movtne	r1, #39207	; 0x9927
    31a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    31ac:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    31b0:	00130119 	andseq	r0, r3, r9, lsl r1
    31b4:	00340e00 	eorseq	r0, r4, r0, lsl #28
    31b8:	0b3a0e03 	bleq	e869cc <__ccfg+0xe66a24>
    31bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    31c0:	00001702 	andeq	r1, r0, r2, lsl #14
    31c4:	31012e0f 	tstcc	r1, pc, lsl #28
    31c8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    31cc:	97184006 	ldrls	r4, [r8, -r6]
    31d0:	13011942 	movwne	r1, #6466	; 0x1942
    31d4:	34100000 	ldrcc	r0, [r0], #-0
    31d8:	02133100 	andseq	r3, r3, #0, 2
    31dc:	11000017 	tstne	r0, r7, lsl r0
    31e0:	0111010b 	tsteq	r1, fp, lsl #2
    31e4:	00000612 	andeq	r0, r0, r2, lsl r6
    31e8:	31003412 	tstcc	r0, r2, lsl r4
    31ec:	13000013 	movwne	r0, #19
    31f0:	1331001d 	teqne	r1, #29
    31f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    31f8:	0b590b58 	bleq	1645f60 <__ccfg+0x1625fb8>
    31fc:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    3200:	03193f01 	tsteq	r9, #1, 30
    3204:	3b0b3a0e 	blcc	2d1a44 <__ccfg+0x2b1a9c>
    3208:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    320c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3210:	97184006 	ldrls	r4, [r8, -r6]
    3214:	13011942 	movwne	r1, #6466	; 0x1942
    3218:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
    321c:	11000182 	smlabbne	r0, r2, r1, r0
    3220:	00133101 	andseq	r3, r3, r1, lsl #2
    3224:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
    3228:	0b3a0e03 	bleq	e86a3c <__ccfg+0xe66a94>
    322c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3230:	0b201349 	bleq	807f5c <__ccfg+0x7e7fb4>
    3234:	00001301 	andeq	r1, r0, r1, lsl #6
    3238:	03003417 	movweq	r3, #1047	; 0x417
    323c:	3b0b3a0e 	blcc	2d1a7c <__ccfg+0x2b1ad4>
    3240:	00134905 	andseq	r4, r3, r5, lsl #18
    3244:	00341800 	eorseq	r1, r4, r0, lsl #16
    3248:	0b3a0e03 	bleq	e86a5c <__ccfg+0xe66ab4>
    324c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3250:	00001802 	andeq	r1, r0, r2, lsl #16
    3254:	31001d19 	tstcc	r0, r9, lsl sp
    3258:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    325c:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    3260:	1a00000b 	bne	3294 <NOROM_RFCRfTrimRead+0x30>
    3264:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3268:	17550152 			; <UNDEFINED> instruction: 0x17550152
    326c:	0b590b58 	bleq	1645fd4 <__ccfg+0x162602c>
    3270:	00001301 	andeq	r1, r0, r1, lsl #6
    3274:	55010b1b 	strpl	r0, [r1, #-2843]	; 0xfffff4e5
    3278:	1c000017 	stcne	0, cr0, [r0], {23}
    327c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3280:	0b3a0e03 	bleq	e86a94 <__ccfg+0xe66aec>
    3284:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3288:	06120111 			; <UNDEFINED> instruction: 0x06120111
    328c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3290:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
    3294:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3298:	06120111 			; <UNDEFINED> instruction: 0x06120111
    329c:	0b590b58 	bleq	1646004 <__ccfg+0x162605c>
    32a0:	00001301 	andeq	r1, r0, r1, lsl #6
    32a4:	31011d1e 	tstcc	r1, lr, lsl sp
    32a8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    32ac:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    32b0:	0000000b 	andeq	r0, r0, fp
    32b4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    32b8:	030b130e 	movweq	r1, #45838	; 0xb30e
    32bc:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    32c0:	10011117 	andne	r1, r1, r7, lsl r1
    32c4:	02000017 	andeq	r0, r0, #23
    32c8:	0b0b0024 	bleq	2c3360 <__ccfg+0x2a33b8>
    32cc:	0e030b3e 	vmoveq.16	d3[0], r0
    32d0:	16030000 	strne	r0, [r3], -r0
    32d4:	3a0e0300 	bcc	383edc <__ccfg+0x363f34>
    32d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    32dc:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    32e0:	0b0b0024 	bleq	2c3378 <__ccfg+0x2a33d0>
    32e4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    32e8:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    32ec:	3a0e0301 	bcc	383ef8 <__ccfg+0x363f50>
    32f0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    32f4:	010b2019 	tsteq	fp, r9, lsl r0
    32f8:	06000013 			; <UNDEFINED> instruction: 0x06000013
    32fc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3300:	0b3b0b3a 	bleq	ec5ff0 <__ccfg+0xea6048>
    3304:	00001349 	andeq	r1, r0, r9, asr #6
    3308:	03003407 	movweq	r3, #1031	; 0x407
    330c:	3b0b3a0e 	blcc	2d1b4c <__ccfg+0x2b1ba4>
    3310:	0013490b 	andseq	r4, r3, fp, lsl #18
    3314:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
    3318:	0b3a0e03 	bleq	e86b2c <__ccfg+0xe66b84>
    331c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3320:	0b201349 	bleq	80804c <__ccfg+0x7e80a4>
    3324:	00001301 	andeq	r1, r0, r1, lsl #6
    3328:	31012e09 	tstcc	r1, r9, lsl #28
    332c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3330:	97184006 	ldrls	r4, [r8, -r6]
    3334:	13011942 	movwne	r1, #6466	; 0x1942
    3338:	050a0000 	streq	r0, [sl, #-0]
    333c:	02133100 	andseq	r3, r3, #0, 2
    3340:	0b000017 	bleq	33a4 <NOROM_RFCRfTrimRead+0x140>
    3344:	13310034 	teqne	r1, #52	; 0x34
    3348:	00001702 	andeq	r1, r0, r2, lsl #14
    334c:	3100050c 	tstcc	r0, ip, lsl #10
    3350:	000b1c13 	andeq	r1, fp, r3, lsl ip
    3354:	82890d00 	addhi	r0, r9, #0, 26
    3358:	01110001 	tsteq	r1, r1
    335c:	00001331 	andeq	r1, r0, r1, lsr r3
    3360:	0182890e 	orreq	r8, r2, lr, lsl #18
    3364:	95011100 	strls	r1, [r1, #-256]	; 0xffffff00
    3368:	13311942 	teqne	r1, #1081344	; 0x108000
    336c:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    3370:	03193f01 	tsteq	r9, #1, 30
    3374:	3b0b3a0e 	blcc	2d1bb4 <__ccfg+0x2b1c0c>
    3378:	11192705 	tstne	r9, r5, lsl #14
    337c:	40061201 	andmi	r1, r6, r1, lsl #4
    3380:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3384:	00001301 	andeq	r1, r0, r1, lsl #6
    3388:	03000510 	movweq	r0, #1296	; 0x510
    338c:	3b0b3a0e 	blcc	2d1bcc <__ccfg+0x2b1c24>
    3390:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3394:	11000017 	tstne	r0, r7, lsl r0
    3398:	01018289 	smlabbeq	r1, r9, r2, r8
    339c:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    33a0:	00133119 	andseq	r3, r3, r9, lsl r1
    33a4:	828a1200 	addhi	r1, sl, #0, 4
    33a8:	18020001 	stmdane	r2, {r0}
    33ac:	00184291 	mulseq	r8, r1, r2
    33b0:	00341300 	eorseq	r1, r4, r0, lsl #6
    33b4:	0b3a0e03 	bleq	e86bc8 <__ccfg+0xe66c20>
    33b8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    33bc:	00001702 	andeq	r1, r0, r2, lsl #14
    33c0:	3f012e14 	svccc	0x00012e14
    33c4:	3a0e0319 	bcc	384030 <__ccfg+0x364088>
    33c8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    33cc:	11134919 	tstne	r3, r9, lsl r9
    33d0:	40061201 	andmi	r1, r6, r1, lsl #4
    33d4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    33d8:	00001301 	andeq	r1, r0, r1, lsl #6
    33dc:	31011d15 	tstcc	r1, r5, lsl sp
    33e0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    33e4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    33e8:	1600000b 	strne	r0, [r0], -fp
    33ec:	0111010b 	tsteq	r1, fp, lsl #2
    33f0:	00000612 	andeq	r0, r0, r2, lsl r6
    33f4:	3f002e17 	svccc	0x00002e17
    33f8:	3a0e0319 	bcc	384064 <__ccfg+0x3640bc>
    33fc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3400:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    3404:	00000019 	andeq	r0, r0, r9, lsl r0
    3408:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    340c:	030b130e 	movweq	r1, #45838	; 0xb30e
    3410:	110e1b0e 	tstne	lr, lr, lsl #22
    3414:	10061201 	andne	r1, r6, r1, lsl #4
    3418:	02000017 	andeq	r0, r0, #23
    341c:	0b0b0024 	bleq	2c34b4 <__ccfg+0x2a350c>
    3420:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3424:	16030000 	strne	r0, [r3], -r0
    3428:	3a0e0300 	bcc	384030 <__ccfg+0x364088>
    342c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3430:	0013490b 	andseq	r4, r3, fp, lsl #18
    3434:	00240400 	eoreq	r0, r4, r0, lsl #8
    3438:	0b3e0b0b 	bleq	f8606c <__ccfg+0xf660c4>
    343c:	00000e03 	andeq	r0, r0, r3, lsl #28
    3440:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    3444:	06000013 			; <UNDEFINED> instruction: 0x06000013
    3448:	0b0b000f 	bleq	2c348c <__ccfg+0x2a34e4>
    344c:	37070000 	strcc	r0, [r7, -r0]
    3450:	00134900 	andseq	r4, r3, r0, lsl #18
    3454:	000f0800 	andeq	r0, pc, r0, lsl #16
    3458:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    345c:	26090000 	strcs	r0, [r9], -r0
    3460:	0a000000 	beq	3468 <NOROM_RFCRTrim+0xb4>
    3464:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3468:	0b3a0e03 	bleq	e86c7c <__ccfg+0xe66cd4>
    346c:	0b390b3b 	bleq	e46160 <__ccfg+0xe261b8>
    3470:	13491927 	movtne	r1, #39207	; 0x9927
    3474:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3478:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    347c:	00130119 	andseq	r0, r3, r9, lsl r1
    3480:	00050b00 	andeq	r0, r5, r0, lsl #22
    3484:	0b3a0e03 	bleq	e86c98 <__ccfg+0xe66cf0>
    3488:	0b390b3b 	bleq	e4617c <__ccfg+0xe261d4>
    348c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    3490:	050c0000 	streq	r0, [ip, #-0]
    3494:	3a0e0300 	bcc	38409c <__ccfg+0x3640f4>
    3498:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    349c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    34a0:	1742b717 	smlaldne	fp, r2, r7, r7
    34a4:	340d0000 	strcc	r0, [sp], #-0
    34a8:	3a080300 	bcc	2040b0 <__ccfg+0x1e4108>
    34ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    34b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    34b4:	1742b717 	smlaldne	fp, r2, r7, r7
    34b8:	340e0000 	strcc	r0, [lr], #-0
    34bc:	3a0e0300 	bcc	3840c4 <__ccfg+0x36411c>
    34c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    34c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    34c8:	1742b717 	smlaldne	fp, r2, r7, r7
    34cc:	01000000 	mrseq	r0, (UNDEF: 0)
    34d0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    34d4:	0e030b13 	vmoveq.32	d3[0], r0
    34d8:	01110e1b 	tsteq	r1, fp, lsl lr
    34dc:	17100612 			; <UNDEFINED> instruction: 0x17100612
    34e0:	24020000 	strcs	r0, [r2], #-0
    34e4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    34e8:	0008030b 	andeq	r0, r8, fp, lsl #6
    34ec:	00160300 	andseq	r0, r6, r0, lsl #6
    34f0:	0b3a0e03 	bleq	e86d04 <__ccfg+0xe66d5c>
    34f4:	0b390b3b 	bleq	e461e8 <__ccfg+0xe26240>
    34f8:	00001349 	andeq	r1, r0, r9, asr #6
    34fc:	0b002404 	bleq	c514 <__exidx_end+0x75e7>
    3500:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3504:	0500000e 	streq	r0, [r0, #-14]
    3508:	0b0b000f 	bleq	2c354c <__ccfg+0x2a35a4>
    350c:	0f060000 	svceq	0x00060000
    3510:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3514:	07000013 	smladeq	r0, r3, r0, r0
    3518:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    351c:	0b3a0e03 	bleq	e86d30 <__ccfg+0xe66d88>
    3520:	0b390b3b 	bleq	e46214 <__ccfg+0xe2626c>
    3524:	13491927 	movtne	r1, #39207	; 0x9927
    3528:	06120111 			; <UNDEFINED> instruction: 0x06120111
    352c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3530:	00130119 	andseq	r0, r3, r9, lsl r1
    3534:	00050800 	andeq	r0, r5, r0, lsl #16
    3538:	0b3a0803 	bleq	e8554c <__ccfg+0xe655a4>
    353c:	0b390b3b 	bleq	e46230 <__ccfg+0xe26288>
    3540:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    3544:	05090000 	streq	r0, [r9, #-0]
    3548:	3a080300 	bcc	204150 <__ccfg+0x1e41a8>
    354c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3550:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3554:	1742b717 	smlaldne	fp, r2, r7, r7
    3558:	340a0000 	strcc	r0, [sl], #-0
    355c:	3a080300 	bcc	204164 <__ccfg+0x1e41bc>
    3560:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3564:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3568:	1742b717 	smlaldne	fp, r2, r7, r7
    356c:	340b0000 	strcc	r0, [fp], #-0
    3570:	3a0e0300 	bcc	384178 <__ccfg+0x3641d0>
    3574:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3578:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    357c:	1742b717 	smlaldne	fp, r2, r7, r7
    3580:	01000000 	mrseq	r0, (UNDEF: 0)
    3584:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    3588:	0e030b13 	vmoveq.32	d3[0], r0
    358c:	01110e1b 	tsteq	r1, fp, lsl lr
    3590:	17100612 			; <UNDEFINED> instruction: 0x17100612
    3594:	24020000 	strcs	r0, [r2], #-0
    3598:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    359c:	000e030b 	andeq	r0, lr, fp, lsl #6
    35a0:	00240300 	eoreq	r0, r4, r0, lsl #6
    35a4:	0b3e0b0b 	bleq	f861d8 <__ccfg+0xf66230>
    35a8:	00000803 	andeq	r0, r0, r3, lsl #16
    35ac:	49010104 	stmdbmi	r1, {r2, r8}
    35b0:	00130113 	andseq	r0, r3, r3, lsl r1
    35b4:	00210500 	eoreq	r0, r1, r0, lsl #10
    35b8:	26060000 	strcs	r0, [r6], -r0
    35bc:	00134900 	andseq	r4, r3, r0, lsl #18
    35c0:	00340700 	eorseq	r0, r4, r0, lsl #14
    35c4:	0b3a0e03 	bleq	e86dd8 <__ccfg+0xe66e30>
    35c8:	0b390b3b 	bleq	e462bc <__ccfg+0xe26314>
    35cc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    35d0:	0000193c 	andeq	r1, r0, ip, lsr r9
    35d4:	3f012e08 	svccc	0x00012e08
    35d8:	3a0e0319 	bcc	384244 <__ccfg+0x36429c>
    35dc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    35e0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    35e4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    35e8:	97184006 	ldrls	r4, [r8, -r6]
    35ec:	00001942 	andeq	r1, r0, r2, asr #18
    35f0:	03000509 	movweq	r0, #1289	; 0x509
    35f4:	3b0b3a08 	blcc	2d1e1c <__ccfg+0x2b1e74>
    35f8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    35fc:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
    3600:	00001742 	andeq	r1, r0, r2, asr #14
    3604:	01110100 	tsteq	r1, r0, lsl #2
    3608:	0b130e25 	bleq	4c6ea4 <__ccfg+0x4a6efc>
    360c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    3610:	00001710 	andeq	r1, r0, r0, lsl r7
    3614:	0b002402 	bleq	c624 <__exidx_end+0x76f7>
    3618:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    361c:	0300000e 	movweq	r0, #14
    3620:	0b0b0024 	bleq	2c36b8 <__ccfg+0x2a3710>
    3624:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3628:	01040000 	mrseq	r0, (UNDEF: 4)
    362c:	01134901 	tsteq	r3, r1, lsl #18
    3630:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    3634:	00000021 	andeq	r0, r0, r1, lsr #32
    3638:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
    363c:	07000013 	smladeq	r0, r3, r0, r0
    3640:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3644:	0b3b0b3a 	bleq	ec6334 <__ccfg+0xea638c>
    3648:	13490b39 	movtne	r0, #39737	; 0x9b39
    364c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    3650:	21080000 	mrscs	r0, (UNDEF: 8)
    3654:	2f134900 	svccs	0x00134900
    3658:	09000005 	stmdbeq	r0, {r0, r2}
    365c:	13470034 	movtne	r0, #28724	; 0x7034
    3660:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    3664:	Address 0x0000000000003664 is out of bounds.


Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	000001e4 	andeq	r0, r0, r4, ror #3
       4:	00000202 	andeq	r0, r0, r2, lsl #4
       8:	4e500001 	cdpmi	0, 5, cr0, cr0, cr1, {0}
       c:	57000003 	strpl	r0, [r0, -r3]
      10:	01000003 	tsteq	r0, r3
      14:	00005000 	andeq	r5, r0, r0
      18:	00000000 	andeq	r0, r0, r0
      1c:	01780000 	cmneq	r8, r0
      20:	018f0000 	orreq	r0, pc, r0
      24:	00010000 	andeq	r0, r1, r0
      28:	0001cc50 	andeq	ip, r1, r0, asr ip
      2c:	0001d300 	andeq	sp, r1, r0, lsl #6
      30:	50000100 	andpl	r0, r0, r0, lsl #2
	...
      3c:	00000180 	andeq	r0, r0, r0, lsl #3
		where = 1;
      40:	00000184 	andeq	r0, r0, r4, lsl #3
		delay (1, st);
      44:	00730005 	rsbseq	r0, r3, r5
		release;
      48:	84082306 	strhi	r2, [r8], #-774	; 0xfffffcfa
      4c:	8c000001 	stchi	0, cr0, [r0], {1}
      50:	02000001 	andeq	r0, r0, #1
}
      54:	00087300 	andeq	r7, r8, r0, lsl #6
      58:	00000000 	andeq	r0, r0, r0
      5c:	92000000 	andls	r0, r0, #0
			nq++;
      60:	9e000001 	cdpls	0, 0, cr0, cr0, cr1, {0}
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	01000001 	tsteq	r0, r1
      68:	019e5000 	orrseq	r5, lr, r0
      6c:	01c80000 	biceq	r0, r8, r0
      70:	00010000 	andeq	r0, r1, r0
      74:	00000054 	andeq	r0, r0, r4, asr r0
      78:	00000000 	andeq	r0, r0, r0
      7c:	0000c800 	andeq	ip, r0, r0, lsl #16
      80:	0000dc00 	andeq	sp, r0, r0, lsl #24
      84:	50000100 	andpl	r0, r0, r0, lsl #2
      88:	00000150 	andeq	r0, r0, r0, asr r1
      8c:	00000159 	andeq	r0, r0, r9, asr r1
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      90:	00500001 	subseq	r0, r0, r1
	...
	if (!button_still_pressed (__button_list [pbutton]))
      a0:	01000000 	mrseq	r0, (UNDEF: 0)
	if (baction == NULL)
      a4:	00005000 	andeq	r5, r0, r0
	...
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      b4:	00010000 	andeq	r0, r1, r0
      b8:	00000050 	andeq	r0, r0, r0, asr r0
endthread
      bc:	00000000 	andeq	r0, r0, r0
      c0:	000a6a00 	andeq	r6, sl, r0, lsl #20
      c4:	000a7000 	andeq	r7, sl, r0
fsm receiver {
      c8:	50000100 	andpl	r0, r0, r0, lsl #2
      cc:	00000aa0 	andeq	r0, r0, r0, lsr #21
      d0:	00000aa4 	andeq	r0, r0, r4, lsr #21
      d4:	00500001 	subseq	r0, r0, r1
        packet = tcv_rnp(Receiving, sfd);
      d8:	00000000 	andeq	r0, r0, r0
      dc:	4a000000 	bmi	e4 <receiver+0x1c>
      e0:	4e000009 	cdpmi	0, 0, cr0, cr0, cr9, {0}
      e4:	01000009 	tsteq	r0, r9
        receivedPtr = (struct msg *)(packet + 1);
      e8:	09665200 	stmdbeq	r6!, {r9, ip, lr}^
      ec:	09780000 	ldmdbeq	r8!, {}^	; <UNPREDICTABLE>
        if(receivedPtr->receiverId == nodeId) {
      f0:	00010000 	andeq	r0, r1, r0
      f4:	00000052 	andeq	r0, r0, r2, asr r0
      f8:	00000000 	andeq	r0, r0, r0
            proceed Broadcast; // Proceed to handling broadcast message
      fc:	00095200 	andeq	r5, r9, r0, lsl #4
        proceed Receiving;
     100:	00095800 	andeq	r5, r9, r0, lsl #16
     104:	53000100 	movwpl	r0, #256	; 0x100
	...
        proceed Show_Message;
     110:	00000904 	andeq	r0, r0, r4, lsl #18
        ser_outf(Broadcast, "Broadcast ");
     114:	00000910 	andeq	r0, r0, r0, lsl r9
     118:	00530001 	subseq	r0, r3, r1
        ser_outf(Show_Message, "Message from node %d (Seq %d): %s\n\r", receivedPtr->senderId, receivedPtr->sequenceNumber, receivedPtr->payload);
     11c:	00000000 	andeq	r0, r0, r0
     120:	04000000 	streq	r0, [r0], #-0
     124:	0c000009 	stceq	0, cr0, [r0], {9}
     128:	01000009 	tsteq	r0, r9
     12c:	00005300 	andeq	r5, r0, r0, lsl #6
        tcv_endp(packet);
     130:	00000000 	andeq	r0, r0, r0
     134:	09a00000 	stmibeq	r0!, {}	; <UNPREDICTABLE>
        proceed Receiving;
     138:	09aa0000 	stmibeq	sl!, {}	; <UNPREDICTABLE>
}
     13c:	00010000 	andeq	r0, r1, r0
        proceed Receiving;
     140:	00000053 	andeq	r0, r0, r3, asr r0
        } else if (receivedPtr->receiverId == '0' || receivedPtr->receiverId == 0) {
     144:	00000000 	andeq	r0, r0, r0
     148:	00099200 	andeq	r9, r9, r0, lsl #4
            proceed Broadcast; // Proceed to handling broadcast message
     14c:	0009bc00 	andeq	fp, r9, r0, lsl #24
}
     150:	52000100 	andpl	r0, r0, #0, 2
	...
     15c:	000009e4 	andeq	r0, r0, r4, ror #19
     160:	000009ee 	andeq	r0, r0, lr, ror #19
     164:	00530001 	subseq	r0, r3, r1
     168:	00000000 	andeq	r0, r0, r0
     16c:	d6000000 	strle	r0, [r0], -r0
     170:	0c000009 	stceq	0, cr0, [r0], {9}
     174:	0100000a 	tsteq	r0, sl
fsm send(struct msg * ptr) {
     178:	00005000 	andeq	r5, r0, r0
     17c:	00000000 	andeq	r0, r0, r0
        address spkt = tcv_wnp(Send_Msg, sfd, sizeof(struct msg) + 4);
     180:	08740000 	ldmdaeq	r4!, {}^	; <UNPREDICTABLE>
     184:	087e0000 	ldmdaeq	lr!, {}^	; <UNPREDICTABLE>
     188:	00010000 	andeq	r0, r1, r0
     18c:	00000053 	andeq	r0, r0, r3, asr r0
     190:	00000000 	andeq	r0, r0, r0
        *p = ptr->senderId; p++;
     194:	00086600 	andeq	r6, r8, r0, lsl #12
     198:	00089000 	andeq	r9, r8, r0
        strcpy(p, ptr->payload);
     19c:	52000100 	andpl	r0, r0, #0, 2
	...
     1a8:	000008c8 	andeq	r0, r0, r8, asr #17
        sequence++;
     1ac:	000008d2 	ldrdeq	r0, [r0], -r2
     1b0:	00530001 	subseq	r0, r3, r1
     1b4:	00000000 	andeq	r0, r0, r0
        tcv_endp (spkt);
     1b8:	ba000000 	blt	1c0 <send+0x48>
        ser_outf(Send_Msg, "\n\rMessage Sent\n\r");
     1bc:	e2000008 	and	r0, r0, #8
     1c0:	01000008 	tsteq	r0, r8
}
     1c4:	00005200 	andeq	r5, r0, r0, lsl #4
        finish;
     1c8:	00000000 	andeq	r0, r0, r0
}
     1cc:	03a40000 			; <UNDEFINED> instruction: 0x03a40000
     1d0:	03a80000 			; <UNDEFINED> instruction: 0x03a80000
     1d4:	00010000 	andeq	r0, r1, r0
     1d8:	0003a850 	andeq	sl, r3, r0, asr r8
     1dc:	0003ab00 	andeq	sl, r3, r0, lsl #22
     1e0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
fsm root {
     1ec:	00000738 	andeq	r0, r0, r8, lsr r7
     1f0:	0000073a 	andeq	r0, r0, sl, lsr r7
     1f4:	00500001 	subseq	r0, r0, r1
     1f8:	00000000 	andeq	r0, r0, r0
        sequence = 0;
     1fc:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
        ptr = (struct Message *) umalloc(sizeof(struct msg));
     200:	4e000007 	cdpmi	0, 0, cr0, cr0, cr7, {0}
        sequence = 0;
     204:	01000007 	tsteq	r0, r7
        ptr = (struct Message *) umalloc(sizeof(struct msg));
     208:	074e5100 	strbeq	r5, [lr, -r0, lsl #2]
     20c:	07500000 	ldrbeq	r0, [r0, -r0]
     210:	00010000 	andeq	r0, r1, r0
        phys_cc1350(0, CC1350_BUF_SZ);
     214:	00075655 	andeq	r5, r7, r5, asr r6
        tcv_plug(0, &plug_null);
     218:	00076a00 	andeq	r6, r7, r0, lsl #20
     21c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
        sfd = tcv_open(NONE, 0, 0);
     220:	0000076a 	andeq	r0, r0, sl, ror #14
     224:	00000774 	andeq	r0, r0, r4, ror r7
     228:	74510001 	ldrbvc	r0, [r1], #-1
     22c:	a4000007 	strge	r0, [r0], #-7
     230:	01000007 	tsteq	r0, r7
            diag("unable to open TCV session");
     234:	07a85500 	streq	r5, [r8, r0, lsl #10]!
     238:	07d00000 	ldrbeq	r0, [r0, r0]
            syserror(EASSERT, "no session");
     23c:	00010000 	andeq	r0, r1, r0
     240:	0007d055 	andeq	sp, r7, r5, asr r0
        tcv_control(sfd, PHYSOPT_ON, NULL);
     244:	0007da00 	andeq	sp, r7, r0, lsl #20
     248:	51000100 	mrspl	r0, (UNDEF: 16)
        runfsm receiver;
     24c:	000007da 	ldrdeq	r0, [r0], -sl
     250:	000007e4 	andeq	r0, r0, r4, ror #15
        receiverId = 0;
     254:	e4550001 	ldrb	r0, [r5], #-1
     258:	f1000007 	cps	#7
        ser_outf(Menu, "\n\rP2P Chat (Node #%d)\n\r"
     25c:	01000007 	tsteq	r0, r7
     260:	07f15100 	ldrbeq	r5, [r1, r0, lsl #2]!
        ser_inf(Choice, "%c", &choice);
     264:	07f60000 	ldrbeq	r0, [r6, r0]!
     268:	00010000 	andeq	r0, r1, r0
     26c:	0007f655 	andeq	pc, r7, r5, asr r6	; <UNPREDICTABLE>
        choice = toupper((unsigned char)choice);
     270:	0007fc00 	andeq	pc, r7, r0, lsl #24
     274:	51000100 	mrspl	r0, (UNDEF: 16)
     278:	000007fc 	strdeq	r0, [r0], -ip
     27c:	0000080e 	andeq	r0, r0, lr, lsl #16
        switch (choice) {
     280:	0e550001 	cdpeq	0, 5, cr0, cr5, cr1, {0}
     284:	20000008 	andcs	r0, r0, r8
     288:	01000008 	tsteq	r0, r8
                proceed Broadcast_Transmission;
     28c:	08205100 	stmdaeq	r0!, {r8, ip, lr}
                proceed Menu;
     290:	08380000 	ldmdaeq	r8!, {}	; <UNPREDICTABLE>
        ser_outf(Change_ID, "\n\rNew node ID (1-25):");
     294:	00010000 	andeq	r0, r1, r0
     298:	00000055 	andeq	r0, r0, r5, asr r0
        ser_inf(Get_ChangeID, "%d", &nodeId);
     29c:	00000000 	andeq	r0, r0, r0
     2a0:	00073800 	andeq	r3, r7, r0, lsl #16
     2a4:	00074e00 	andeq	r4, r7, r0, lsl #28
            if (nodeId < 1 || nodeId > 25) {
     2a8:	52000100 	andpl	r0, r0, #0, 2
     2ac:	0000074e 	andeq	r0, r0, lr, asr #14
                ser_outf(Get_ChangeID, "\n\rInvalid ID");
     2b0:	00000752 	andeq	r0, r0, r2, asr r7
     2b4:	56560001 	ldrbpl	r0, [r6], -r1
                proceed Change_ID;
     2b8:	64000007 	strvs	r0, [r0], #-7
     2bc:	01000007 	tsteq	r0, r7
            proceed Menu;
     2c0:	076a5600 	strbeq	r5, [sl, -r0, lsl #12]!
        ser_outf(Direct_Transmission, "\n\rReceiver node ID (1-25):");
     2c4:	07740000 	ldrbeq	r0, [r4, -r0]!
     2c8:	00010000 	andeq	r0, r1, r0
        ser_inf(Get_ReceiverID, "%d", &receiverId);
     2cc:	00077452 	andeq	r7, r7, r2, asr r4
     2d0:	0007a600 	andeq	sl, r7, r0, lsl #12
     2d4:	56000100 	strpl	r0, [r0], -r0, lsl #2
            if (receiverId < 1 || receiverId > 25) {
     2d8:	000007a8 	andeq	r0, r0, r8, lsr #15
     2dc:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
                ser_outf(Get_ReceiverID, "\n\rInvalid ID");
     2e0:	d0560001 	subsle	r0, r6, r1
     2e4:	da000007 	ble	308 <root+0x124>
                proceed Direct_Transmission;
     2e8:	01000007 	tsteq	r0, r7
     2ec:	07da5200 	ldrbeq	r5, [sl, r0, lsl #4]
        ser_outf(Broadcast_Transmission, "\n\rMessage: ");
     2f0:	07e40000 	strbeq	r0, [r4, r0]!
     2f4:	00010000 	andeq	r0, r1, r0
        ser_in(Receive_Msg, ptr->payload, 27);
     2f8:	0007e456 	andeq	lr, r7, r6, asr r4
     2fc:	0007f100 	andeq	pc, r7, r0, lsl #2
     300:	52000100 	andpl	r0, r0, #0, 2
        if(strlen(ptr->payload) >= 27) {
     304:	000007f1 	strdeq	r0, [r0], -r1
     308:	000007f4 	strdeq	r0, [r0], -r4
     30c:	f6540001 			; <UNDEFINED> instruction: 0xf6540001
            ptr->payload[26] = '\0';
     310:	01000007 	tsteq	r0, r7
     314:	01000008 	tsteq	r0, r8
        call send(ptr, Menu);
     318:	08015200 	stmdaeq	r1, {r9, ip, lr}
        ptr->senderId = nodeId;
     31c:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
     320:	00010000 	andeq	r0, r1, r0
        ptr->receiverId = receiverId;
     324:	00080e54 	andeq	r0, r8, r4, asr lr
        ptr->sequenceNumber = (byte)sequence;
     328:	00083800 	andeq	r3, r8, r0, lsl #16
     32c:	52000100 	andpl	r0, r0, #0, 2
	...
        call send(ptr, Menu);
     338:	000006bc 			; <UNDEFINED> instruction: 0x000006bc
     33c:	000006ce 	andeq	r0, r0, lr, asr #13
                proceed Direct_Transmission;
     340:	00500001 	subseq	r0, r0, r1
                ser_outf(Choice, "\n\rIncorrect Option.");
     344:	00000000 	andeq	r0, r0, r0
     348:	bc000000 	stclt	0, cr0, [r0], {-0}
                proceed Menu;
     34c:	cf000006 	svcgt	0x00000006
}
     350:	01000006 	tsteq	r0, r6
     354:	00005100 	andeq	r5, r0, r0, lsl #2
     358:	00000000 	andeq	r0, r0, r0
     35c:	06680000 	strbteq	r0, [r8], -r0
     360:	06810000 	streq	r0, [r1], r0
     364:	00010000 	andeq	r0, r1, r0
     368:	0006a450 	andeq	sl, r6, r0, asr r4
     36c:	0006bc00 	andeq	fp, r6, r0, lsl #24
     370:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     37c:	0000055a 	andeq	r0, r0, sl, asr r5
     380:	0000056a 	andeq	r0, r0, sl, ror #10
     384:	6a520001 	bvs	1480390 <__ccfg+0x14603e8>
     388:	72000005 	andvc	r0, r0, #5
     38c:	05000005 	streq	r0, [r0, #-5]
     390:	20040c00 	andcs	r0, r4, r0, lsl #24
     394:	06124009 	ldreq	r4, [r2], -r9
     398:	06160000 	ldreq	r0, [r6], -r0
     39c:	00050000 	andeq	r0, r5, r0
     3a0:	0920040c 	stmdbeq	r0!, {r2, r3, sl}
static void devinit_uart (int devnum) {
     3a4:	00061640 	andeq	r1, r6, r0, asr #12
	adddevfunc (ioreq_uart_a, devnum);
     3a8:	00061800 	andeq	r1, r6, r0, lsl #16
     3ac:	52000100 	andpl	r0, r0, #0, 2
void udelay (volatile word n) {
     3b0:	00000618 	andeq	r0, r0, r8, lsl r6
     3b4:	0000061a 	andeq	r0, r0, sl, lsl r6
	while (n) {
     3b8:	040c0005 	streq	r0, [ip], #-5
     3bc:	00400920 	subeq	r0, r0, r0, lsr #18
}
     3c0:	00000000 	andeq	r0, r0, r0
	while (n--);
     3c4:	74000000 	strvc	r0, [r0], #-0
     3c8:	7e000005 	cdpvc	0, 0, cr0, cr0, cr5, {0}
     3cc:	01000005 	tsteq	r0, r5
		n--;
     3d0:	05825200 	streq	r5, [r2, #512]	; 0x200
     3d4:	058c0000 	streq	r0, [ip]
     3d8:	00010000 	andeq	r0, r1, r0
void mdelay (volatile word n) {
     3dc:	00059052 	andeq	r9, r5, r2, asr r0
     3e0:	00059a00 	andeq	r9, r5, r0, lsl #20
	while (n) {
     3e4:	52000100 	andpl	r0, r0, #0, 2
     3e8:	0000059e 	muleq	r0, lr, r5
}
     3ec:	000005aa 	andeq	r0, r0, sl, lsr #11
		udelay (999);
     3f0:	40520001 	subsmi	r0, r2, r1
     3f4:	44000006 	strmi	r0, [r0], #-6
		n--;
     3f8:	01000006 	tsteq	r0, r6
     3fc:	00005200 	andeq	r5, r0, r0, lsl #4
     400:	00000000 	andeq	r0, r0, r0
     404:	04f20000 	ldrbteq	r0, [r2], #0
void __pi_ondomain (lword d) {
     408:	05040000 	streq	r0, [r4, #-0]
     40c:	00010000 	andeq	r0, r1, r0
		if (__pi_systat.effpdm > 1)
     410:	00000054 	andeq	r0, r0, r4, asr r0
     414:	00000000 	andeq	r0, r0, r0
			__pi_systat.effpdm = 1;
     418:	00048c00 	andeq	r8, r4, r0, lsl #24
	PRCMPowerDomainOn (d);
     41c:	00049400 	andeq	r9, r4, r0, lsl #8
     420:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     42c:	0000048c 	andeq	r0, r0, ip, lsl #9
     430:	00000492 	muleq	r0, r2, r4
     434:	92510001 	subsls	r0, r1, #1
	__pi_systat.ondmns |= d;
     438:	97000004 	strls	r0, [r0, -r4]
     43c:	01000004 	tsteq	r0, r4
}
     440:	00005200 	andeq	r5, r0, r0, lsl #4
	...
	PRCMPowerDomainOff (d);
     450:	00010000 	andeq	r0, r1, r0
     454:	00000050 	andeq	r0, r0, r0, asr r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     458:	00000000 	andeq	r0, r0, r0
     45c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     470:	00510001 	subseq	r0, r1, r1
			__pi_systat.effpdm = __pi_systat.reqpdm;
     474:	00000000 	andeq	r0, r0, r0
     478:	01000000 	mrseq	r0, (UNDEF: 0)
	__pi_systat.ondmns &= ~d;
     47c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
void __pi_syserror (word ec, const char *m) {
     48c:	00010000 	andeq	r0, r1, r0
	diag ("SYSERR: %x, %s", ec, m);
     490:	00000052 	andeq	r0, r0, r2, asr r0
     494:	00000000 	andeq	r0, r0, r0
  __ASM volatile ("cpsid i" : : : "memory");
     498:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4a4:	00000448 	andeq	r0, r0, r8, asr #8
     4a8:	00000457 	andeq	r0, r0, r7, asr r4
		all_leds_blink;
     4ac:	57500001 	ldrbpl	r0, [r0, -r1]
     4b0:	82000004 	andhi	r0, r0, #4
     4b4:	01000004 	tsteq	r0, r4
     4b8:	00005400 	andeq	r5, r0, r0, lsl #8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4bc:	00000000 	andeq	r0, r0, r0
     4c0:	04080000 	streq	r0, [r8], #-0
     4c4:	04260000 	strteq	r0, [r6], #-0
     4c8:	00010000 	andeq	r0, r1, r0
     4cc:	00042650 	andeq	r2, r4, r0, asr r6
     4d0:	00043e00 	andeq	r3, r4, r0, lsl #28
	while (1) {
     4d4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
void tci_run_delay_timer () {
     4e0:	000003dc 	ldrdeq	r0, [r0], -ip
	setdel = __pi_mintk - __pi_old;
     4e4:	000003e2 	andeq	r0, r0, r2, ror #7
     4e8:	00500001 	subseq	r0, r0, r1
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4f8:	01000000 	mrseq	r0, (UNDEF: 0)
     4fc:	00005000 	andeq	r5, r0, r0
     500:	00000000 	andeq	r0, r0, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     504:	14580000 	ldrbne	r0, [r8], #-0
	sti_tim;
     508:	147a0000 	ldrbtne	r0, [sl], #-0
}
     50c:	00020000 	andeq	r0, r2, r0
     510:	147a7091 	ldrbtne	r7, [sl], #-145	; 0xffffff6f
     514:	14a60000 	strtne	r0, [r6], #0
     518:	00010000 	andeq	r0, r1, r0
     51c:	0014aa55 	andseq	sl, r4, r5, asr sl
     520:	0014b200 	andseq	fp, r4, r0, lsl #4
	cli_aux;
     524:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     528:	000014d0 	ldrdeq	r1, [r0], -r0
     52c:	0000150e 	andeq	r1, r0, lr, lsl #10
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     530:	12560001 	subsne	r0, r6, #1
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     534:	8a000015 	bhi	590 <AONRTCIntHandler+0x40>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     538:	01000015 	tsteq	r0, r5, lsl r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     53c:	00005600 	andeq	r5, r0, r0, lsl #12
	sti_aux;
     540:	00000000 	andeq	r0, r0, r0
}
     544:	14d00000 	ldrbne	r0, [r0], #0
     548:	14e10000 	strbtne	r0, [r1], #0
     54c:	00060000 	andeq	r0, r6, r0
void AONRTCIntHandler () {
     550:	067fac91 			; <UNDEFINED> instruction: 0x067fac91
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     554:	14ea1c34 	strbtne	r1, [sl], #3124	; 0xc34
     558:	14f40000 	ldrbtne	r0, [r4], #0
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     55c:	00060000 	andeq	r0, r6, r0
		if (__pi_utims [0] == 0)
     560:	067fac91 			; <UNDEFINED> instruction: 0x067fac91
     564:	15121c34 	ldrne	r1, [r2, #-3124]	; 0xfffff3cc
		if (*(__pi_utims [0])) {
     568:	15210000 	strne	r0, [r1, #-0]!
     56c:	00060000 	andeq	r0, r6, r0
			(*(__pi_utims [0]))--;
     570:	067fac91 			; <UNDEFINED> instruction: 0x067fac91
		if (__pi_utims [1] == 0)
     574:	154c1c34 	strbne	r1, [ip, #-3124]	; 0xfffff3cc
		if (*(__pi_utims [1])) {
     578:	15500000 	ldrbne	r0, [r0, #-0]
			aux_timer_inactive = 0;
     57c:	00060000 	andeq	r0, r6, r0
			(*(__pi_utims [1]))--;
     580:	067fac91 			; <UNDEFINED> instruction: 0x067fac91
		if (__pi_utims [2] == 0)
     584:	15701c34 	ldrbne	r1, [r0, #-3124]!	; 0xfffff3cc
		if (*(__pi_utims [2])) {
     588:	15740000 	ldrbne	r0, [r4, #-0]!
			(*(__pi_utims [2]))--;
     58c:	00060000 	andeq	r0, r6, r0
		if (__pi_utims [3] != 0) {
     590:	067fac91 			; <UNDEFINED> instruction: 0x067fac91
			if (*(__pi_utims [3])) {
     594:	00001c34 	andeq	r1, r0, r4, lsr ip
				aux_timer_inactive = 0;
     598:	00000000 	andeq	r0, r0, r0
				(*(__pi_utims [3]))--;
     59c:	14d00000 	ldrbne	r0, [r0], #0
	if (__pi_systat.ledsts) {
     5a0:	150c0000 	strne	r0, [ip, #-0]
     5a4:	00010000 	andeq	r0, r1, r0
		if (__pi_systat.ledblc++ == 0) {
     5a8:	00151255 	andseq	r1, r5, r5, asr r2
     5ac:	00153a00 	andseq	r3, r5, r0, lsl #20
			if (__pi_systat.ledblk) {
     5b0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     5b4:	0000154c 	andeq	r1, r0, ip, asr #10
     5b8:	00001550 	andeq	r1, r0, r0, asr r5
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     5bc:	70550001 	subsvc	r0, r5, r1
     5c0:	8a000015 	bhi	61c <AONRTCIntHandler+0xcc>
     5c4:	01000015 	tsteq	r0, r5, lsl r0
				if (__pi_systat.ledsts & 0x2)
     5c8:	00005500 	andeq	r5, r0, r0, lsl #10
     5cc:	00000000 	andeq	r0, r0, r0
     5d0:	15400000 	strbne	r0, [r0, #-0]
				if (__pi_systat.ledsts & 0x4)
     5d4:	154c0000 	strbne	r0, [ip, #-0]
				__pi_systat.ledblk = 0;
     5d8:	00010000 	andeq	r0, r1, r0
     5dc:	00155055 	andseq	r5, r5, r5, asr r0
			if (__pi_systat.fstblk)
     5e0:	00156a00 	andseq	r6, r5, r0, lsl #20
     5e4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
				__pi_systat.ledblc = 200;
     5e8:	0000156e 	andeq	r1, r0, lr, ror #10
	if (events & AON_RTC_EVFLAGS_CH0) {
     5ec:	00001570 	andeq	r1, r0, r0, ror r5
		cli_tim;
     5f0:	00550001 	subseq	r0, r5, r1
		__pi_new += setdel;
     5f4:	00000000 	andeq	r0, r0, r0
		cli_tim;
     5f8:	f4000000 	vst4.8	{d0-d3}, [r0], r0
		__pi_new += setdel;
     5fc:	0c000014 	stceq	0, cr0, [r0], {20}
     600:	01000015 	tsteq	r0, r5, lsl r0
     604:	00005400 	andeq	r5, r0, r0, lsl #8
		RISE_N_SHINE;
     608:	00000000 	andeq	r0, r0, r0
     60c:	153a0000 	ldrne	r0, [sl, #-0]!
}
     610:	154c0000 	strbne	r0, [ip, #-0]
		aux_timer_inactive = 1;
     614:	00010000 	andeq	r0, r1, r0
     618:	00155051 	andseq	r5, r5, r1, asr r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     61c:	00156400 	andseq	r6, r5, r0, lsl #8
     620:	51000100 	mrspl	r0, (UNDEF: 16)
     624:	00001564 	andeq	r1, r0, r4, ror #10
				if (__pi_systat.ledsts & 0x2)
     628:	00001570 	andeq	r1, r0, r0, ror r5
     62c:	00530001 	subseq	r0, r3, r1
     630:	00000000 	andeq	r0, r0, r0
				if (__pi_systat.ledsts & 0x4)
     634:	7c000000 	stcvc	0, cr0, [r0], {-0}
				__pi_systat.ledblk = 1;
     638:	8a000015 	bhi	694 <tci_update_delay_ticks+0x2c>
     63c:	01000015 	tsteq	r0, r5, lsl r0
		if (aux_timer_inactive) {
     640:	00005100 	andeq	r5, r0, r0, lsl #2
			cli_aux;
     644:	00000000 	andeq	r0, r0, r0
     648:	0f640000 	svceq	0x00640000
     64c:	0f6e0000 	svceq	0x006e0000
     650:	00010000 	andeq	r0, r1, r0
     654:	00000050 	andeq	r0, r0, r0, asr r0
	...
     664:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	cli_tim;
     670:	00500001 	subseq	r0, r0, r1
	...
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     680:	01000000 	mrseq	r0, (UNDEF: 0)
     684:	00005100 	andeq	r5, r0, r0, lsl #2
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     688:	00000000 	andeq	r0, r0, r0
				AON_RTC_O_CH0CMP)) - gettav ());
     68c:	00010000 	andeq	r0, r1, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     690:	00000051 	andeq	r0, r0, r1, asr r0
	...
}
     6a0:	52000100 	andpl	r0, r0, #0, 2
	...
		return YES;
     6ac:	00520001 	subseq	r0, r2, r1
	...
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6bc:	01000000 	mrseq	r0, (UNDEF: 0)
	UARTDisable (UART0_BASE);
     6c0:	00005300 	andeq	r5, r0, r0, lsl #6
     6c4:	00000000 	andeq	r0, r0, r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6c8:	00010000 	andeq	r0, r1, r0
	UARTDisable (UART0_BASE);
     6cc:	00000053 	andeq	r0, r0, r3, asr r0
	UARTConfigSetExpClk (UART0_BASE,
     6d0:	00000000 	andeq	r0, r0, r0
     6d4:	53000100 	movwpl	r0, #256	; 0x100
	...
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6e8:	00500001 	subseq	r0, r0, r1
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     6ec:	00000000 	andeq	r0, r0, r0
     6f0:	40000000 	andmi	r0, r0, r0
     6f4:	48000014 	stmdami	r0, {r2, r4}
	urates [0] = rate;
     6f8:	01000014 	tsteq	r0, r4, lsl r0
}
     6fc:	00005000 	andeq	r5, r0, r0
     700:	00000000 	andeq	r0, r0, r0
     704:	13640000 	cmnne	r4, #0
     708:	136a0000 	cmnne	sl, #0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     70c:	00010000 	andeq	r0, r1, r0
     710:	00000050 	andeq	r0, r0, r0, asr r0
     714:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     718:	00137a00 	andseq	r7, r3, r0, lsl #20
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     71c:	0013a600 	andseq	sl, r3, r0, lsl #12
     720:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	__pi_uart_setrate (urates [0], __pi_uart);
     724:	000013a6 	andeq	r1, r0, r6, lsr #7
     728:	000013ac 	andeq	r1, r0, ip, lsr #7
     72c:	ac520001 	mrrcge	0, 0, r0, r2, cr1
     730:	f4000013 	vst4.8	{d0-d3}, [r0 :64], r3
     734:	01000013 	tsteq	r0, r3, lsl r0
	switch (operation) {
     738:	13f45400 	mvnsne	r5, #0, 8
static int ioreq_uart_a (int operation, char *buf, int len) {
     73c:	140c0000 	strne	r0, [ip], #-0
     740:	00010000 	andeq	r0, r1, r0
	switch (operation) {
     744:	00000050 	andeq	r0, r0, r0, asr r0
     748:	00000000 	andeq	r0, r0, r0
     74c:	0013a600 	andseq	sl, r3, r0, lsl #12
				len--;
     750:	0013aa00 	andseq	sl, r3, r0, lsl #20
				*buf++ = uart_a_read;
     754:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
			while (len && uart_a_char_available) {
     758:	000013aa 	andeq	r1, r0, sl, lsr #7
     75c:	000013ac 	andeq	r1, r0, ip, lsr #7
			if (len != operation) {
     760:	c2530001 	subsgt	r0, r3, #1
}
     764:	cb000013 	blgt	7b8 <ioreq_uart_a+0x80>
     768:	01000013 	tsteq	r0, r3, lsl r0
			uart_a_disable_int;
     76c:	00005000 	andeq	r5, r0, r0
			if (uart_a_char_available) {
     770:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
     774:	13b40000 			; <UNDEFINED> instruction: 0x13b40000
     778:	13c40000 	bicne	r0, r4, #0
     77c:	00010000 	andeq	r0, r1, r0
			if (uart_a_char_available) {
     780:	00000053 	andeq	r0, r0, r3, asr r0
				uart_a_enable_int;
     784:	00000000 	andeq	r0, r0, r0
     788:	00137a00 	andseq	r7, r3, r0, lsl #20
     78c:	00139800 	andseq	r9, r3, r0, lsl #16
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     790:	50000100 	andpl	r0, r0, r0, lsl #2
     794:	0000139e 	muleq	r0, lr, r3
			return -2;
     798:	000013be 			; <UNDEFINED> instruction: 0x000013be
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     79c:	be500001 	cdplt	0, 5, cr0, cr0, cr1, {0}
				uart_a_write (*buf);
     7a0:	c8000013 	stmdagt	r0, {r0, r1, r4}
				len--;
     7a4:	02000013 	andeq	r0, r0, #19
			while (len && uart_a_room_in_tx) {
     7a8:	007c7400 	rsbseq	r7, ip, r0, lsl #8
     7ac:	00000000 	andeq	r0, r0, r0
			if (len != operation) {
     7b0:	e4000000 	str	r0, [r0], #-0
			uart_a_disable_int;
     7b4:	1200000e 	andne	r0, r0, #14
     7b8:	0100000f 	tsteq	r0, pc
     7bc:	0f205000 	svceq	0x00205000
			if (uart_a_room_in_tx) {
     7c0:	0f640000 	svceq	0x00640000
				uart_a_enable_int;
     7c4:	00010000 	andeq	r0, r1, r0
     7c8:	00000050 	andeq	r0, r0, r0, asr r0
     7cc:	00000000 	andeq	r0, r0, r0
	switch (operation) {
     7d0:	000eec00 	andeq	lr, lr, r0, lsl #24
			uart_a_disable_int;
     7d4:	000ef800 	andeq	pc, lr, r0, lsl #16
			if (uart_a_room_in_tx) {
     7d8:	53000100 	movwpl	r0, #256	; 0x100
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7dc:	00000ef8 	strdeq	r0, [r0], -r8
     7e0:	00000efa 	strdeq	r0, [r0], -sl
			uart_a_enable_int;
     7e4:	00700002 	rsbseq	r0, r0, r2
     7e8:	00000efe 	strdeq	r0, [r0], -lr
     7ec:	00000f56 	andeq	r0, r0, r6, asr pc
     7f0:	56530001 	ldrbpl	r0, [r3], -r1
			return 0;
     7f4:	5a00000f 	bpl	838 <UART0IntHandler>
			if (len == UART_CNTRL_SETRATE) {
     7f8:	0200000f 	andeq	r0, r0, #15
				if (__pi_uart_setrate (*((word*)buf),
     7fc:	5a007300 	bpl	1d404 <__exidx_end+0x184d7>
     800:	6400000f 	strvs	r0, [r0], #-15
     804:	0100000f 	tsteq	r0, pc
				syserror (EREQPAR, "uar");
     808:	00005300 	andeq	r5, r0, r0, lsl #6
			syserror (ENOOPER, "uai");
     80c:	00000000 	andeq	r0, r0, r0
			if (len == UART_CNTRL_GETRATE) {
     810:	0eec0000 	cdpeq	0, 14, cr0, cr12, cr0, {0}
				return 1;
     814:	0eee0000 	cdpeq	0, 14, cr0, cr14, cr0, {0}
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     818:	00010000 	andeq	r0, r1, r0
			syserror (ENOOPER, "uai");
     81c:	000efe52 	andeq	pc, lr, r2, asr lr	; <UNPREDICTABLE>
     820:	000f3e00 	andeq	r3, pc, r0, lsl #28
     824:	52000100 	andpl	r0, r0, #0, 2
     828:	00000f56 	andeq	r0, r0, r6, asr pc
     82c:	00000f5a 	andeq	r0, r0, sl, asr pc
     830:	5a530001 	bpl	14c083c <__ccfg+0x14a0894>
     834:	6400000f 	strvs	r0, [r0], #-15
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     838:	0100000f 	tsteq	r0, pc
void UART0IntHandler () {
     83c:	00005200 	andeq	r5, r0, r0, lsl #4
     840:	00000000 	andeq	r0, r0, r0
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     844:	128c0000 	addne	r0, ip, #0
     848:	12940000 	addsne	r0, r4, #0
     84c:	00010000 	andeq	r0, r1, r0
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     850:	00129851 	andseq	r9, r2, r1, asr r8
     854:	00129a00 	andseq	r9, r2, r0, lsl #20
		RISE_N_SHINE;
     858:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		i_trigger (devevent (UART_A, READ));
     864:	000011e0 	andeq	r1, r0, r0, ror #3
     868:	000011fc 	strdeq	r1, [r0], -ip
     86c:	02500001 	subseq	r0, r0, #1
     870:	0e000012 	mcreq	0, 0, r0, cr0, cr2, {0}
     874:	01000012 	tsteq	r0, r2, lsl r0
     878:	00005000 	andeq	r5, r0, r0
     87c:	00000000 	andeq	r0, r0, r0
     880:	11e00000 	mvnne	r0, r0
     884:	11fe0000 	mvnsne	r0, r0
     888:	00010000 	andeq	r0, r1, r0
     88c:	00120251 	andseq	r0, r2, r1, asr r2
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     890:	00120c00 	andseq	r0, r2, r0, lsl #24
     894:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		i_trigger (devevent (UART_A, WRITE));
     8a0:	000011e0 	andeq	r1, r0, r0, ror #3
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     8a4:	00001201 	andeq	r1, r0, r1, lsl #4
     8a8:	02520001 	subseq	r0, r2, #1
		RISE_N_SHINE;
     8ac:	0a000012 	beq	8fc <__buttons_setirq+0x8>
     8b0:	01000012 	tsteq	r0, r2, lsl r0
     8b4:	00005200 	andeq	r5, r0, r0, lsl #4
		i_trigger (devevent (UART_A, WRITE));
     8b8:	00000000 	andeq	r0, r0, r0
     8bc:	11e00000 	mvnne	r0, r0
     8c0:	11f80000 	mvnsne	r0, r0
     8c4:	00010000 	andeq	r0, r1, r0
     8c8:	0011f853 	andseq	pc, r1, r3, asr r8	; <UNPREDICTABLE>
     8cc:	00127c00 	andseq	r7, r2, r0, lsl #24
     8d0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
     8dc:	000011e0 	andeq	r1, r0, r0, ror #3
     8e0:	00001260 	andeq	r1, r0, r0, ror #4
}
     8e4:	00910002 	addseq	r0, r1, r2
     8e8:	00001260 	andeq	r1, r0, r0, ror #4
     8ec:	0000127c 	andeq	r1, r0, ip, ror r2
     8f0:	00910002 	addseq	r0, r1, r2
	...
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     8fc:	00001210 	andeq	r1, r0, r0, lsl r2
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     900:	00001226 	andeq	r1, r0, r6, lsr #4
     904:	2e500001 	cdpcs	0, 5, cr0, cr0, cr1, {0}
     908:	40000012 	andmi	r0, r0, r2, lsl r0
     90c:	01000012 	tsteq	r0, r2, lsl r0
     910:	12505000 	subsne	r5, r0, #0
		bn = BUTTON_GPIO (__button_list [i]);
     914:	12580000 	subsne	r0, r8, #0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     918:	00010000 	andeq	r0, r1, r0
     91c:	00126050 	andseq	r6, r2, r0, asr r0
     920:	00126800 	andseq	r6, r2, r0, lsl #16
     924:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
     930:	000011bc 			; <UNDEFINED> instruction: 0x000011bc
     934:	000011c2 	andeq	r1, r0, r2, asr #3
     938:	c8500001 	ldmdagt	r0, {r0}^
void __pinlist_setirq (int val) {
     93c:	d0000011 	andle	r0, r0, r1, lsl r0
	for (i = 0; i < N_PINLIST; i++) {
     940:	01000011 	tsteq	r0, r1, lsl r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     944:	11d45000 	bicsne	r5, r4, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     948:	11e00000 	mvnne	r0, r0
	for (i = 0; i < N_PINLIST; i++) {
     94c:	00010000 	andeq	r0, r1, r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     950:	00000050 	andeq	r0, r0, r0, asr r0
     954:	00000000 	andeq	r0, r0, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     958:	0011bc00 	andseq	fp, r1, r0, lsl #24
     95c:	0011c400 	andseq	ip, r1, r0, lsl #8
     960:	51000100 	mrspl	r0, (UNDEF: 16)
     964:	000011c8 	andeq	r1, r0, r8, asr #3
  __ASM volatile ("cpsie i" : : : "memory");
     968:	000011d2 	ldrdeq	r1, [r0], -r2
}
     96c:	d4510001 	ldrble	r0, [r1], #-1
     970:	e0000011 	and	r0, r0, r1, lsl r0
     974:	01000011 	tsteq	r0, r1, lsl r0
void GPIOIntHandler () {
     978:	00005100 	andeq	r5, r0, r0, lsl #2
if (buttons_int) {
     97c:	00000000 	andeq	r0, r0, r0
     980:	11b60000 			; <UNDEFINED> instruction: 0x11b60000
     984:	11b90000 			; <UNDEFINED> instruction: 0x11b90000
	buttons_disable ();
     988:	00010000 	andeq	r0, r1, r0
	i_trigger ((aword)&__button_list);
     98c:	00000050 	andeq	r0, r0, r0, asr r0
     990:	00000000 	andeq	r0, r0, r0
     994:	0011b600 	andseq	fp, r1, r0, lsl #12
     998:	0011b900 	andseq	fp, r1, r0, lsl #18
     99c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     9a8:	000011b6 			; <UNDEFINED> instruction: 0x000011b6
     9ac:	000011b9 			; <UNDEFINED> instruction: 0x000011b9
     9b0:	00520001 	subseq	r0, r2, r1
     9b4:	00000000 	andeq	r0, r0, r0
     9b8:	a2000000 	andge	r0, r0, #0
	RISE_N_SHINE;
     9bc:	a4000011 	strge	r0, [r0], #-17	; 0xffffffef
     9c0:	01000011 	tsteq	r0, r1, lsl r0
if (pin_sensor_int) {
     9c4:	00005000 	andeq	r5, r0, r0
     9c8:	00000000 	andeq	r0, r0, r0
     9cc:	11a20000 			; <UNDEFINED> instruction: 0x11a20000
	i_trigger ((aword)(&__input_pins));
     9d0:	11ac0000 			; <UNDEFINED> instruction: 0x11ac0000
     9d4:	00010000 	andeq	r0, r1, r0
     9d8:	0011b051 	andseq	fp, r1, r1, asr r0
     9dc:	0011b600 	andseq	fp, r1, r0, lsl #12
     9e0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     9ec:	000011a2 	andeq	r1, r0, r2, lsr #3
     9f0:	000011a6 	andeq	r1, r0, r6, lsr #3
     9f4:	00520001 	subseq	r0, r2, r1
	...
	RISE_N_SHINE;
     a04:	01000000 	mrseq	r0, (UNDEF: 0)
     a08:	00005000 	andeq	r5, r0, r0
	...
}
     a18:	00010000 	andeq	r0, r1, r0
     a1c:	00000051 	andeq	r0, r0, r1, asr r0
	...
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a2c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a38:	00500001 	subseq	r0, r0, r1
	...
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a48:	01000000 	mrseq	r0, (UNDEF: 0)
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a4c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a5c:	00010000 	andeq	r0, r1, r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a60:	00000050 	andeq	r0, r0, r0, asr r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a64:	00000000 	andeq	r0, r0, r0
     a68:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     a7c:	00510001 	subseq	r0, r1, r1
	...
     a8c:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a90:	00005200 	andeq	r5, r0, r0, lsl #4
		if (port_confs [i] & 0x40)
     a94:	00000000 	andeq	r0, r0, r0
     a98:	11920000 	orrsne	r0, r2, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a9c:	11940000 	orrsne	r0, r4, r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     aa0:	00010000 	andeq	r0, r1, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     aa4:	00000050 	andeq	r0, r0, r0, asr r0
	all_leds_blink;
     aa8:	00000000 	andeq	r0, r0, r0
     aac:	00119200 	andseq	r9, r1, r0, lsl #4
     ab0:	00119400 	andseq	r9, r1, r0, lsl #8
     ab4:	51000100 	mrspl	r0, (UNDEF: 16)
     ab8:	00001198 	muleq	r0, r8, r1
     abc:	000011a2 	andeq	r1, r0, r2, lsr #3
     ac0:	00510001 	subseq	r0, r1, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac4:	00000000 	andeq	r0, r0, r0
     ac8:	84000000 	strhi	r0, [r0], #-0
     acc:	88000011 	stmdahi	r0, {r0, r4}
     ad0:	01000011 	tsteq	r0, r1, lsl r0
     ad4:	11885000 	orrne	r5, r8, r0
     ad8:	11920000 	orrsne	r0, r2, r0
     adc:	00010000 	andeq	r0, r1, r0
	IntEnable (INT_AON_RTC_COMB);
     ae0:	00000053 	andeq	r0, r0, r3, asr r0
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ae4:	00000000 	andeq	r0, r0, r0
     ae8:	00118800 	andseq	r8, r1, r0, lsl #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     aec:	00119200 	andseq	r9, r1, r0, lsl #4
	IntEnable (INT_AON_RTC_COMB);
     af0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	IntEnable (INT_AON_GPIO_EDGE);
     b04:	00500001 	subseq	r0, r0, r1
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b08:	00000000 	andeq	r0, r0, r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b0c:	01000000 	mrseq	r0, (UNDEF: 0)
     b10:	00005200 	andeq	r5, r0, r0, lsl #4
	...
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b20:	00010000 	andeq	r0, r1, r0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b24:	00000053 	andeq	r0, r0, r3, asr r0
     b28:	00000000 	andeq	r0, r0, r0
     b2c:	53000100 	movwpl	r0, #256	; 0x100
	...
	EXTRA_INITIALIZERS;
     b40:	00500001 	subseq	r0, r0, r1
     b44:	00000000 	andeq	r0, r0, r0
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b48:	01000000 	mrseq	r0, (UNDEF: 0)
     b4c:	00005000 	andeq	r5, r0, r0
     b50:	00000000 	andeq	r0, r0, r0
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b54:	11600000 	cmnne	r0, r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b58:	11680000 	cmnne	r8, r0
			devinit [i] . init (devinit [i] . param);
     b5c:	00010000 	andeq	r0, r1, r0
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b60:	00116a50 	andseq	r6, r1, r0, asr sl
     b64:	00116e00 	andseq	r6, r1, r0, lsl #28
     b68:	50000100 	andpl	r0, r0, r0, lsl #2
	IntEnable (INT_UART0_COMB);
     b6c:	0000116e 	andeq	r1, r0, lr, ror #2
     b70:	00001184 	andeq	r1, r0, r4, lsl #3
     b74:	00530001 	subseq	r0, r3, r1
	...
		diag ("");
     b84:	01000000 	mrseq	r0, (UNDEF: 0)
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     b88:	00005000 	andeq	r5, r0, r0
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     b8c:	00000000 	andeq	r0, r0, r0
		diag ("Leftover RAM: %d bytes",
     b90:	00010000 	andeq	r0, r1, r0
     b94:	00000050 	andeq	r0, r0, r0, asr r0
	...
     ba4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     bb0:	00500001 	subseq	r0, r0, r1
	...
     bc0:	01000000 	mrseq	r0, (UNDEF: 0)
     bc4:	00005000 	andeq	r5, r0, r0
     bc8:	00000000 	andeq	r0, r0, r0
     bcc:	00010000 	andeq	r0, r1, r0
     bd0:	00000056 	andeq	r0, r0, r6, asr r0
	...
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     be0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	check_stack_overflow;
     bf4:	00500001 	subseq	r0, r0, r1
	for_all_tasks (__pi_curr) {
     bf8:	00000000 	andeq	r0, r0, r0
	update_n_wake (MAX_WORD, NO);
     bfc:	01000000 	mrseq	r0, (UNDEF: 0)
     c00:	00005000 	andeq	r5, r0, r0
	for_all_tasks (__pi_curr) {
     c04:	00000000 	andeq	r0, r0, r0
     c08:	00010000 	andeq	r0, r1, r0
     c0c:	00000057 	andeq	r0, r0, r7, asr r0
     c10:	00000000 	andeq	r0, r0, r0
	system_event_count ++;
     c14:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     c28:	00540001 	subseq	r0, r4, r1
     c2c:	00000000 	andeq	r0, r0, r0
     c30:	01000000 	mrseq	r0, (UNDEF: 0)
	switch (__pi_systat.effpdm) {
     c34:	00005400 	andeq	r5, r0, r0, lsl #8
	...
  __ASM volatile ("cpsie i" : : : "memory");
     c44:	00010000 	andeq	r0, r1, r0
	__SLEEP;
     c48:	00000057 	andeq	r0, r0, r7, asr r0
	check_stack_overflow;
     c4c:	00000000 	andeq	r0, r0, r0
     c50:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c5c:	00001314 	andeq	r1, r0, r4, lsl r3
			(__pi_curr->code) (tstate (__pi_curr));
     c60:	0000131c 	andeq	r1, r0, ip, lsl r3
	for_all_tasks (__pi_curr) {
     c64:	1c500001 	mrrcne	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c68:	26000013 			; <UNDEFINED> instruction: 0x26000013
     c6c:	01000013 	tsteq	r0, r3, lsl r0
     c70:	132c5000 			; <UNDEFINED> instruction: 0x132c5000
     c74:	13380000 	teqne	r8, #0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c78:	00010000 	andeq	r0, r1, r0
     c7c:	00134c50 	andseq	r4, r3, r0, asr ip
     c80:	00135600 	andseq	r5, r3, r0, lsl #12
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c84:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     c90:	00001322 	andeq	r1, r0, r2, lsr #6
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c94:	00001354 	andeq	r1, r0, r4, asr r3
     c98:	54540001 	ldrbpl	r0, [r4], #-1
     c9c:	56000013 			; <UNDEFINED> instruction: 0x56000013
     ca0:	01000013 	tsteq	r0, r3, lsl r0
			__WFI ();
     ca4:	13565300 	cmpne	r6, #0, 6
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ca8:	13580000 	cmpne	r8, #0
     cac:	00010000 	andeq	r0, r1, r0
     cb0:	00000054 	andeq	r0, r0, r4, asr r0
     cb4:	00000000 	andeq	r0, r0, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cb8:	000eae00 	andeq	sl, lr, r0, lsl #28
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cbc:	000ee000 	andeq	lr, lr, r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cc0:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     ccc:	00000ec4 	andeq	r0, r0, r4, asr #29
     cd0:	00000ece 	andeq	r0, r0, lr, asr #29
     cd4:	00530001 	subseq	r0, r3, r1
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ce4:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     ce8:	00005000 	andeq	r5, r0, r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cec:	00000000 	andeq	r0, r0, r0
     cf0:	00010000 	andeq	r0, r1, r0
     cf4:	00000054 	andeq	r0, r0, r4, asr r0
	...
			SysCtrlSetRechargeBeforePowerDown
     d04:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d10:	00500001 	subseq	r0, r0, r1
     d14:	00000000 	andeq	r0, r0, r0
     d18:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
			__WFI ();
     d1c:	41000011 	tstmi	r0, r1, lsl r0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d20:	01000011 	tsteq	r0, r1, lsl r0
     d24:	00005000 	andeq	r5, r0, r0
     d28:	00000000 	andeq	r0, r0, r0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d2c:	11280000 			; <UNDEFINED> instruction: 0x11280000
     d30:	113e0000 	teqne	lr, r0
     d34:	00010000 	andeq	r0, r1, r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d38:	00000051 	andeq	r0, r0, r1, asr r0
     d3c:	00000000 	andeq	r0, r0, r0
     d40:	00110400 	andseq	r0, r1, r0, lsl #8
     d44:	00111800 	andseq	r1, r1, r0, lsl #16
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d48:	50000100 	andpl	r0, r0, r0, lsl #2
     d4c:	00001118 	andeq	r1, r0, r8, lsl r1
			while (!(AONWUCPowerStatusGet () &
     d50:	0000111c 	andeq	r1, r0, ip, lsl r1
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d54:	20540001 	subscs	r0, r4, r1
     d58:	28000011 	stmdacs	r0, {r0, r4}
     d5c:	01000011 	tsteq	r0, r1, lsl r0
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d60:	00005000 	andeq	r5, r0, r0
     d64:	00000000 	andeq	r0, r0, r0
     d68:	11040000 	mrsne	r0, (UNDEF: 4)
     d6c:	111b0000 	tstne	fp, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d70:	00010000 	andeq	r0, r1, r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d74:	00112051 	andseq	r2, r1, r1, asr r0
     d78:	00112800 	andseq	r2, r1, r0, lsl #16
     d7c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			reinit_uart ();
     d88:	0000110c 	andeq	r1, r0, ip, lsl #2
     d8c:	0000111b 	andeq	r1, r0, fp, lsl r1
     d90:	20530001 	subscs	r0, r3, r1
     d94:	28000011 	stmdacs	r0, {r0, r4}
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d98:	01000011 	tsteq	r0, r1, lsl r0
     d9c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dac:	00010000 	andeq	r0, r1, r0
     db0:	00000050 	andeq	r0, r0, r0, asr r0
	...
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     dc0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     dcc:	00550001 	subseq	r0, r5, r1
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     ddc:	01000000 	mrseq	r0, (UNDEF: 0)
			PRCMPowerDomainOff (
     de0:	00005200 	andeq	r5, r0, r0, lsl #4
     de4:	00000000 	andeq	r0, r0, r0
     de8:	00010000 	andeq	r0, r1, r0
     dec:	00000052 	andeq	r0, r0, r2, asr r0
     df0:	00000000 	andeq	r0, r0, r0
	__SLEEP;
     df4:	0010e400 	andseq	lr, r0, r0, lsl #8
     df8:	0010ee00 	andseq	lr, r0, r0, lsl #28
     dfc:	53000100 	movwpl	r0, #256	; 0x100
	...
	goto Redo;
     e08:	00001088 	andeq	r1, r0, r8, lsl #1
     e0c:	0000108e 	andeq	r1, r0, lr, lsl #1
     e10:	00500001 	subseq	r0, r0, r1
     e14:	00000000 	andeq	r0, r0, r0
     e18:	0c000000 	stceq	0, cr0, [r0], {-0}
     e1c:	12000014 	andne	r0, r0, #20
     e20:	01000014 	tsteq	r0, r4, lsl r0
     e24:	14125000 	ldrne	r5, [r2], #-0
     e28:	14400000 	strbne	r0, [r0], #-0
     e2c:	00010000 	andeq	r0, r1, r0
     e30:	00000055 	andeq	r0, r0, r5, asr r0
     e34:	00000000 	andeq	r0, r0, r0
     e38:	00140c00 	andseq	r0, r4, r0, lsl #24
     e3c:	00141700 	andseq	r1, r4, r0, lsl #14
     e40:	51000100 	mrspl	r0, (UNDEF: 16)
int main (void) {
     e44:	00001417 	andeq	r1, r0, r7, lsl r4
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e48:	00001440 	andeq	r1, r0, r0, asr #8
     e4c:	00540001 	subseq	r0, r4, r1
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e50:	00000000 	andeq	r0, r0, r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e54:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
	system_init ();
     e58:	2c000014 	stccs	0, cr0, [r0], {20}
	tcv_init ();
     e5c:	01000014 	tsteq	r0, r4, lsl r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e60:	142e5300 	strtne	r5, [lr], #-768	; 0xfffffd00
     e64:	14320000 	ldrtne	r0, [r2], #-0
     e68:	00010000 	andeq	r0, r1, r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e6c:	00143253 	andseq	r3, r4, r3, asr r2
     e70:	00144000 	andseq	r4, r4, r0
     e74:	52000100 	andpl	r0, r0, #0, 2
	...
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e80:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
     e84:	00000fb9 			; <UNDEFINED> instruction: 0x00000fb9
	delay (16, 0);
     e88:	00500001 	subseq	r0, r0, r1
     e8c:	00000000 	andeq	r0, r0, r0
	__pi_release ();
     e90:	b4000000 	strlt	r0, [r0], #-0
     e94:	b900000f 	stmdblt	r0, {r0, r1, r2, r3}
     e98:	0100000f 	tsteq	r0, pc
     e9c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	wfun = (aword)(pid->code);
     eac:	00010000 	andeq	r0, r1, r0
	for_all_tasks (i) {
     eb0:	00000050 	andeq	r0, r0, r0, asr r0
		for (j = 0; j < nevents (i); j++) {
     eb4:	00000000 	andeq	r0, r0, r0
     eb8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			if (i->Events [j] . Event == (aword)pid
     ecc:	00530001 	subseq	r0, r3, r1
     ed0:	00000000 	andeq	r0, r0, r0
				wakeupev (i, j);
     ed4:	01000000 	mrseq	r0, (UNDEF: 0)
     ed8:	00005300 	andeq	r5, r0, r0, lsl #6
	for_all_tasks (i) {
     edc:	00000000 	andeq	r0, r0, r0
}
     ee0:	0f880000 	svceq	0x00880000
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     ee4:	0f900000 	svceq	0x00900000
static void qfree (aword *ch) {
     ee8:	00010000 	andeq	r0, r1, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     eec:	000f9050 	andeq	r9, pc, r0, asr r0	; <UNPREDICTABLE>
	cc = (aword*)(mpools + MA_NP);
     ef0:	000fa300 	andeq	sl, pc, r0, lsl #6
	m_setnextp (ch, chunk);
     ef4:	53000100 	movwpl	r0, #256	; 0x100
	m_setnextp (cc, ch);
     ef8:	00000fa4 	andeq	r0, r0, r4, lsr #31
}
     efc:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f00:	00530001 	subseq	r0, r3, r1
     f04:	00000000 	andeq	r0, r0, r0
     f08:	92000000 	andls	r0, r0, #0
			m_setnextp (cc, m_nextp (chunk));
     f0c:	a300000f 	movwge	r0, #15
			m_size (chunk) += m_hdrlen + m_size (ch);
     f10:	0100000f 	tsteq	r0, pc
     f14:	0fa45000 	svceq	0x00a45000
     f18:	0fb40000 	svceq	0x00b40000
     f1c:	00010000 	andeq	r0, r1, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f20:	00000050 	andeq	r0, r0, r0, asr r0
	...
			m_setnextp (cc, m_nextp (chunk));
     f30:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			m_size (ch) += m_hdrlen + m_size (chunk);
     f3c:	00530001 	subseq	r0, r3, r1
     f40:	00000000 	andeq	r0, r0, r0
     f44:	01000000 	mrseq	r0, (UNDEF: 0)
     f48:	00005300 	andeq	r5, r0, r0, lsl #6
	...
		chunk = m_nextp (chunk))
     f58:	00010000 	andeq	r0, r1, r0
     f5c:	00000050 	andeq	r0, r0, r0, asr r0
     f60:	00000000 	andeq	r0, r0, r0
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f64:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	syserror (ESTATE, "state");
     f78:	00530001 	subseq	r0, r3, r1
     f7c:	00000000 	andeq	r0, r0, r0
     f80:	bc000000 	stclt	0, cr0, [r0], {-0}
     f84:	c200000f 	andgt	r0, r0, #15
	for (i = 0; i < MAX_UTIMERS; i++)
     f88:	0100000f 	tsteq	r0, pc
void utimer_add (address ut) {
     f8c:	00005000 	andeq	r5, r0, r0
     f90:	00000000 	andeq	r0, r0, r0
		if (__pi_utims [i] == NULL)
     f94:	0fbc0000 	svceq	0x00bc0000
	for (i = 0; i < MAX_UTIMERS; i++)
     f98:	0fc50000 	svceq	0x00c50000
     f9c:	00010000 	andeq	r0, r1, r0
		syserror (ERESOURCE, "ut a");
     fa0:	00000051 	andeq	r0, r0, r1, asr r0
	__pi_utims [i] = ut;
     fa4:	00000000 	andeq	r0, r0, r0
}
     fa8:	000fca00 	andeq	ip, pc, r0, lsl #20
     fac:	00100800 	andseq	r0, r0, r0, lsl #16
     fb0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	*t = v;
     fb4:	0000100c 	andeq	r1, r0, ip
	TCI_RUN_AUXILIARY_TIMER;
     fb8:	0000105a 	andeq	r1, r0, sl, asr r0
void update_n_wake (word min, Boolean force) {
     fbc:	5c540001 	mrrcpl	0, 0, r0, r4, cr1
	if (TCI_UPDATE_DELAY_TICKS (force))
     fc0:	66000010 			; <UNDEFINED> instruction: 0x66000010
     fc4:	01000010 	tsteq	r0, r0, lsl r0
     fc8:	00005400 	andeq	r5, r0, r0, lsl #8
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fcc:	00000000 	andeq	r0, r0, r0
     fd0:	10020000 	andne	r0, r2, r0
     fd4:	10040000 	andne	r0, r4, r0
     fd8:	00010000 	andeq	r0, r1, r0
     fdc:	00100c50 	andseq	r0, r0, r0, asr ip
     fe0:	00105c00 	andseq	r5, r0, r0, lsl #24
     fe4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     ff0:	0000109c 	muleq	r0, ip, r0
     ff4:	000010b0 	strheq	r1, [r0], -r0
     ff8:	b6500001 	ldrblt	r0, [r0], -r1
     ffc:	d0000010 	andle	r0, r0, r0, lsl r0
		for_all_tasks (i) {
    1000:	01000010 	tsteq	r0, r0, lsl r0
	__pi_mintk = znew + min;
    1004:	00005000 	andeq	r5, r0, r0
    1008:	00000000 	andeq	r0, r0, r0
			if (!twaiting (i))
    100c:	109c0000 	addsne	r0, ip, r0
    1010:	10b20000 	adcsne	r0, r2, r0
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1014:	00010000 	andeq	r0, r1, r0
    1018:	0010b651 	andseq	fp, r0, r1, asr r6
    101c:	0010bc00 	andseq	fp, r0, r0, lsl #24
    1020:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    102c:	000010ae 	andeq	r1, r0, lr, lsr #1
    1030:	000010b0 	strheq	r1, [r0], -r0
    1034:	00500001 	subseq	r0, r0, r1
    1038:	00000000 	andeq	r0, r0, r0
    103c:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    1040:	b2000010 	andlt	r0, r0, #16
				wakeuptm (i);
    1044:	01000010 	tsteq	r0, r0, lsl r0
    1048:	00005100 	andeq	r5, r0, r0, lsl #2
		for_all_tasks (i) {
    104c:	00000000 	andeq	r0, r0, r0
				d = i->Timer - znew;
    1050:	12cc0000 	sbcne	r0, ip, #0
    1054:	12da0000 	sbcsne	r0, sl, #0
    1058:	00010000 	andeq	r0, r1, r0
		if ((word)(__pi_mintk - znew) < min) 
    105c:	0012e050 	andseq	lr, r2, r0, asr r0
    1060:	0012f300 	andseq	pc, r2, r0, lsl #6
    1064:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	TCI_RUN_DELAY_TIMER;
    1070:	000012d8 	ldrdeq	r1, [r0], -r8
}
    1074:	000012da 	ldrdeq	r1, [r0], -sl
    1078:	00500001 	subseq	r0, r0, r1
	...
void proceed (word state) {
    1088:	01000000 	mrseq	r0, (UNDEF: 0)
	prcdstate (__pi_curr, state);
    108c:	00005000 	andeq	r5, r0, r0
    1090:	00000000 	andeq	r0, r0, r0
	release;
    1094:	00010000 	andeq	r0, r1, r0
    1098:	00000050 	andeq	r0, r0, r0, asr r0
	...
	if (j >= MAX_EVENTS_PER_TASK)
    10a8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	incwait (__pi_curr);
    10bc:	00540001 	subseq	r0, r4, r1
	setestate (__pi_curr->Events [j], state, event);
    10c0:	00000000 	andeq	r0, r0, r0
}
    10c4:	01000000 	mrseq	r0, (UNDEF: 0)
    10c8:	00005000 	andeq	r5, r0, r0
	...
		for (j = 0; j < nevents (i); j++) {
    10d8:	00010000 	andeq	r0, r1, r0
    10dc:	00000050 	andeq	r0, r0, r0, asr r0
    10e0:	00000000 	andeq	r0, r0, r0
    10e4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			if (i->Events [j] . Event == event) {
    10f0:	00750002 	rsbseq	r0, r5, r2
	...
	for_all_tasks (i) {
    10fc:	00001bc0 	andeq	r1, r0, r0, asr #23
}
    1100:	00001be0 	andeq	r1, r0, r0, ror #23
aword __pi_join (aword pid, word st) {
    1104:	e6500001 	ldrb	r0, [r0], -r1
	for_all_tasks (i) {
    1108:	e700001b 	smlad	r0, fp, r0, r0
    110c:	0100001b 	tsteq	r0, fp, lsl r0
	return 0;
    1110:	00005000 	andeq	r5, r0, r0
		if ((aword)i == pid) {
    1114:	00000000 	andeq	r0, r0, r0
			__pi_wait (pid, st);
    1118:	1bca0000 	blne	ff281120 <_estack+0xdf27c120>
}
    111c:	1bf00000 	blne	ffc01124 <_estack+0xdfbfc124>
	for_all_tasks (i) {
    1120:	00010000 	andeq	r0, r1, r0
    1124:	001bf054 	andseq	pc, fp, r4, asr r0	; <UNPREDICTABLE>
void delay (word d, word state) {
    1128:	001bf300 	andseq	pc, fp, r0, lsl #6
	settstate (__pi_curr, state);
    112c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1138:	00001b8c 	andeq	r1, r0, ip, lsl #23
	update_n_wake (d, YES);
    113c:	00001b9c 	muleq	r0, ip, fp
    1140:	a2500001 	subsge	r0, r0, #1
	__pi_curr->Timer = __pi_old + d;
    1144:	aa00001b 	bge	11b8 <__pi_memset+0x2>
    1148:	0100001b 	tsteq	r0, fp, lsl r0
	inctimer (__pi_curr);
    114c:	00005000 	andeq	r5, r0, r0
    1150:	00000000 	andeq	r0, r0, r0
    1154:	1ba80000 	blne	fea0115c <_estack+0xde9fc15c>
}
    1158:	1bb40000 	blne	fed01160 <_estack+0xdecfc160>
    115c:	00010000 	andeq	r0, r1, r0
	if (fun == NULL)
    1160:	00000053 	andeq	r0, r0, r3, asr r0
		return (int) __pi_curr;
    1164:	00000000 	andeq	r0, r0, r0
    1168:	001baa00 	andseq	sl, fp, r0, lsl #20
	for_all_tasks (i)
    116c:	001bb000 	andseq	fp, fp, r0
}
    1170:	50000100 	andpl	r0, r0, r0, lsl #2
		if (i->code == fun)
    1174:	00001bb0 			; <UNDEFINED> instruction: 0x00001bb0
	for_all_tasks (i)
    1178:	00001bb4 			; <UNDEFINED> instruction: 0x00001bb4
    117c:	00730002 	rsbseq	r0, r3, r2
	...
	for (i = 0; *(s+i) != '\0'; i++);
    1188:	00001b4c 	andeq	r1, r0, ip, asr #22
}
    118c:	00001b5c 	andeq	r1, r0, ip, asr fp
	for (i = 0; *(s+i) != '\0'; i++);
    1190:	62500001 	subsvs	r0, r0, #1
	while ((Boolean)(*d++ = *s++));
    1194:	6a00001b 	bvs	1208 <io+0x28>
    1198:	0100001b 	tsteq	r0, fp, lsl r0
    119c:	00005000 	andeq	r5, r0, r0
}
    11a0:	00000000 	andeq	r0, r0, r0
	while (n--)
    11a4:	1b4c0000 	blne	13011ac <__ccfg+0x12e1204>
    11a8:	1b5e0000 	blne	17811b0 <__ccfg+0x1761208>
		*dest++ = *src++;
    11ac:	00010000 	andeq	r0, r1, r0
    11b0:	001b6251 	andseq	r6, fp, r1, asr r2
    11b4:	001b8c00 	andseq	r8, fp, r0, lsl #24
		*dest++ = c;
    11b8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		syserror (ERESOURCE, "addv");
    11c4:	00001b68 	andeq	r1, r0, r8, ror #22
	if (ioreq [loc] != NULL)
    11c8:	00001b70 	andeq	r1, r0, r0, ror fp
    11cc:	7a530001 	bvc	14c11d8 <__ccfg+0x14a1230>
		syserror (ERESOURCE, "addv");
    11d0:	8c00001b 	stchi	0, cr0, [r0], {27}
	ioreq [loc] = rf;
    11d4:	0100001b 	tsteq	r0, fp, lsl r0
}
    11d8:	00005300 	andeq	r5, r0, r0, lsl #6
    11dc:	00000000 	andeq	r0, r0, r0
sint io (word retry, word dev, word operation, char *buf, word len) {
    11e0:	1b6a0000 	blne	1a811e8 <__ccfg+0x1a61240>
    11e4:	1b780000 	blne	1e011ec <__ccfg+0x1de1244>
    11e8:	00010000 	andeq	r0, r1, r0
    11ec:	001b7a50 	andseq	r7, fp, r0, asr sl
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11f0:	001b7c00 	andseq	r7, fp, r0, lsl #24
    11f4:	50000100 	andpl	r0, r0, r0, lsl #2
    11f8:	00001b7c 	andeq	r1, r0, ip, ror fp
		syserror (ENODEVICE, "io");
    11fc:	00001b8c 	andeq	r1, r0, ip, lsl #23
    1200:	00730002 	rsbseq	r0, r3, r2
	...
	ret = (ioreq [dev]) (operation, buf, len);
    120c:	00001aac 	andeq	r1, r0, ip, lsr #21
	if (ret >= 0)
    1210:	00001ac6 	andeq	r1, r0, r6, asr #21
	if (ret == -1) {
    1214:	c6500001 	ldrbgt	r0, [r0], -r1
    1218:	cc00001a 	stcgt	0, cr0, [r0], {26}
		if (retry == WNONE)
    121c:	0100001a 	tsteq	r0, sl, lsl r0
		iowait (dev, operation, retry);
    1220:	1acc5500 	bne	ff316628 <_estack+0xdf311628>
    1224:	1ad80000 	bne	ff60122c <_estack+0xdf5fc22c>
    1228:	00010000 	andeq	r0, r1, r0
			release;
    122c:	001ad850 	andseq	sp, sl, r0, asr r8
	if (ret == -2) {
    1230:	001b4c00 	andseq	r4, fp, r0, lsl #24
			(ioreq [dev]) (NONE, buf, len);
    1234:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
			iowait (dev, operation, retry);
    1240:	00001aac 	andeq	r1, r0, ip, lsr #21
			(ioreq [dev]) (NONE, buf, len);
    1244:	00001ac6 	andeq	r1, r0, r6, asr #21
    1248:	c6510001 	ldrbgt	r0, [r1], -r1
    124c:	cc00001a 	stcgt	0, cr0, [r0], {26}
		(ioreq [dev]) (NONE, buf, len);
    1250:	0100001a 	tsteq	r0, sl, lsl r0
    1254:	1acc5600 	bne	ff316a5c <_estack+0xdf311a5c>
    1258:	1ad80000 	bne	ff601260 <_estack+0xdf5fc260>
}
    125c:	00010000 	andeq	r0, r1, r0
	if (retry != WNONE) {
    1260:	001ad851 	andseq	sp, sl, r1, asr r8
		delay (-ret - 2, retry);
    1264:	001b4c00 	andseq	r4, fp, r0, lsl #24
    1268:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
		release;
    1274:	00001aac 	andeq	r1, r0, ip, lsr #21
    1278:	00001ac6 	andeq	r1, r0, r6, asr #21
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    127c:	c6520001 	ldrbgt	r0, [r2], -r1
    1280:	cc00001a 	stcgt	0, cr0, [r0], {26}
    1284:	0100001a 	tsteq	r0, sl, lsl r0
    1288:	1acc5400 	bne	ff316290 <_estack+0xdf311290>
    128c:	1ad80000 	bne	ff601294 <_estack+0xdf5fc294>
		syserror (ERESOURCE, "mal1");
    1290:	00010000 	andeq	r0, r1, r0
    1294:	001ad852 	andseq	sp, sl, r2, asr r8
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1298:	001b4c00 	andseq	r4, fp, r0, lsl #24
    129c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12a8:	00001b08 	andeq	r1, r0, r8, lsl #22
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12ac:	00001b20 	andeq	r1, r0, r0, lsr #22
    12b0:	20500001 	subscs	r0, r0, r1
}
    12b4:	2500001b 	strcs	r0, [r0, #-27]	; 0xffffffe5
    12b8:	0100001b 	tsteq	r0, fp, lsl r0
    12bc:	00005100 	andeq	r5, r0, r0, lsl #2
    12c0:	00000000 	andeq	r0, r0, r0
    12c4:	1b260000 	blne	9812cc <__ccfg+0x961324>
    12c8:	1b350000 	blne	d412d0 <__ccfg+0xd21328>
void __pi_free (aword *ch) {
    12cc:	00010000 	andeq	r0, r1, r0
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12d0:	00000050 	andeq	r0, r0, r0, asr r0
    12d4:	00000000 	andeq	r0, r0, r0
		syserror (EMALLOC, "malg");
    12d8:	001a5c00 	andseq	r5, sl, r0, lsl #24
    12dc:	001a6a00 	andseq	r6, sl, r0, lsl #20
	mcfree [MA_NP] += m_size (ch);
    12e0:	50000100 	andpl	r0, r0, r0, lsl #2
		m_size (ch) ^= MALLOC_UMASK;
    12e4:	00001a6a 	andeq	r1, r0, sl, ror #20
    12e8:	00001a98 	muleq	r0, r8, sl
	mcfree [MA_NP] += m_size (ch);
    12ec:	00540001 	subseq	r0, r4, r1
	QFREE;
    12f0:	00000000 	andeq	r0, r0, r0
	if (mevent [MA_NP] . nwait) {
    12f4:	5c000000 	stcpl	0, cr0, [r0], {-0}
    12f8:	7000001a 	andvc	r0, r0, sl, lsl r0
		trigger ((aword)(&(mevent [MA_NP])));
    12fc:	0100001a 	tsteq	r0, sl, lsl r0
		mevent [MA_NP] . nwait --;
    1300:	1a745100 	bne	1d15708 <__ccfg+0x1cf5760>
}
    1304:	1a830000 	bne	fe0c130c <_estack+0xde0bc30c>
    1308:	00010000 	andeq	r0, r1, r0
    130c:	00000051 	andeq	r0, r0, r1, asr r0
    1310:	00000000 	andeq	r0, r0, r0
void kill (aword pid) {
    1314:	001a5c00 	andseq	r5, sl, r0, lsl #24
		pid = (aword) __pi_curr;
    1318:	001a7000 	andseq	r7, sl, r0
	j = NULL;
    131c:	52000100 	andpl	r0, r0, #0, 2
	for_all_tasks (i) {
    1320:	00001a74 	andeq	r1, r0, r4, ror sl
	syserror (EREQPAR, "kpi");
    1324:	00001a83 	andeq	r1, r0, r3, lsl #21
    1328:	00520001 	subseq	r0, r2, r1
		if ((aword)i == pid) {
    132c:	00000000 	andeq	r0, r0, r0
    1330:	84000000 	strhi	r0, [r0], #-0
				__PCB = i->Next;
    1334:	8e00001a 	mcrhi	0, 0, r0, cr0, cr10, {0}
			killev (i);
    1338:	0100001a 	tsteq	r0, sl, lsl r0
			ufree (i);
    133c:	1a8e5000 	bne	fe395344 <_estack+0xde390344>
			if (i == __pi_curr)
    1340:	1a920000 	bne	fe481348 <_estack+0xde47c348>
    1344:	00070000 	andeq	r0, r7, r0
				release;
    1348:	24320074 	ldrtcs	r0, [r2], #-116	; 0xffffff8c
				j->Next = i->Next;
    134c:	92220072 	eorls	r0, r2, #114	; 0x72
    1350:	ac00001a 	stcge	0, cr0, [r0], {26}
				__PCB = i->Next;
    1354:	0100001a 	tsteq	r0, sl, lsl r0
}
    1358:	00005000 	andeq	r5, r0, r0
	...
		_size = 2;
    1368:	00010000 	andeq	r0, r1, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    136c:	00000050 	andeq	r0, r0, r0, asr r0
	...
		if (mevent [MA_NP] . nfail != 255)
    137c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		if (m_magic (chunk) != MALLOC_MAGIC)
    1390:	00500001 	subseq	r0, r0, r1
    1394:	00000000 	andeq	r0, r0, r0
			syserror (EMALLOC, "malc");
    1398:	01000000 	mrseq	r0, (UNDEF: 0)
    139c:	00005500 	andeq	r5, r0, r0, lsl #10
	...
		m_setnextp (cc, m_nextp (chunk));
    13ac:	00010000 	andeq	r0, r1, r0
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    13b0:	00000051 	andeq	r0, r0, r1, asr r0
    13b4:	00000000 	andeq	r0, r0, r0
			m_size (chunk) = _size;
    13b8:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
		mevent [MA_NP] . nfail = 0;
    13cc:	00500001 	subseq	r0, r0, r1
		mcfree [MA_NP] -= m_size (chunk);
    13d0:	00000000 	andeq	r0, r0, r0
    13d4:	01000000 	mrseq	r0, (UNDEF: 0)
    13d8:	00005400 	andeq	r5, r0, r0, lsl #8
	...
		m_size (chunk) |= MALLOC_UMASK;
    13e8:	00010000 	andeq	r0, r1, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    13ec:	00000050 	andeq	r0, r0, r0, asr r0
}
    13f0:	00000000 	andeq	r0, r0, r0
    13f4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1408:	00510001 	subseq	r0, r1, r1
aword __pi_fork (fsmcode func, aword data) {
    140c:	00000000 	andeq	r0, r0, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1410:	01000000 	mrseq	r0, (UNDEF: 0)
    1414:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	i->data = data;
    1424:	00010000 	andeq	r0, r1, r0
		if ((j = __PCB) == NULL)
    1428:	00000050 	andeq	r0, r0, r0, asr r0
}
    142c:	00000000 	andeq	r0, r0, r0
			for (; j->Next != NULL; j = j->Next);
    1430:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (mevent [MA_NP] . nwait != 255)
    1444:	00510001 	subseq	r0, r1, r1
    1448:	00000000 	andeq	r0, r0, r0
		mevent [MA_NP] . nwait ++;
    144c:	01000000 	mrseq	r0, (UNDEF: 0)
	wait ((aword)(&(mevent [MA_NP])), state);
    1450:	00005100 	andeq	r5, r0, r0, lsl #2
    1454:	00000000 	andeq	r0, r0, r0
void diag (const char *mess, ...) {
    1458:	19940000 	ldmibne	r4, {}	; <UNPREDICTABLE>
    145c:	19ac0000 	stmibne	ip!, {}	; <UNPREDICTABLE>
    1460:	00010000 	andeq	r0, r1, r0
	diag_disable_int (a, is);
    1464:	0019b250 	andseq	fp, r9, r0, asr r2
    1468:	0019bc00 	andseq	fp, r9, r0, lsl #24
    146c:	50000100 	andpl	r0, r0, r0, lsl #2
					d /= 10;
    1470:	000019be 			; <UNDEFINED> instruction: 0x000019be
	diag_disable_int (a, is);
    1474:	000019cc 	andeq	r1, r0, ip, asr #19
				d = (bc == 16) ? 10000 : 1000000000;
    1478:	d2500001 	subsle	r0, r0, #1
	while (*mess != '\0') {
    147c:	d4000019 	strle	r0, [r0], #-25	; 0xffffffe7
	dgout ('\r');
    1480:	01000019 	tsteq	r0, r9, lsl r0
	dgout ('\n');
    1484:	19de5000 	ldmibne	lr, {ip, lr}^
    1488:	19e00000 	stmibne	r0!, {}^	; <UNPREDICTABLE>
    148c:	00010000 	andeq	r0, r1, r0
	diag_wait (a);
    1490:	00000050 	andeq	r0, r0, r0, asr r0
	diag_enable_int (a, is);
    1494:	00000000 	andeq	r0, r0, r0
    1498:	00199400 	andseq	r9, r9, r0, lsl #8
    149c:	0019ce00 	andseq	ip, r9, r0, lsl #28
}
    14a0:	51000100 	mrspl	r0, (UNDEF: 16)
    14a4:	000019d2 	ldrdeq	r1, [r0], -r2
    14a8:	000019dd 	ldrdeq	r1, [r0], -sp
			mess++;
    14ac:	de510001 	cdple	0, 5, cr0, cr1, cr1, {0}
		if (*mess == '%') {
    14b0:	f4000019 	vst4.8	{d0-d3}, [r0 :64], r9
			if (*mess == 'l') {
    14b4:	01000019 	tsteq	r0, r9, lsl r0
				mess++;
    14b8:	00005100 	andeq	r5, r0, r0, lsl #2
    14bc:	00000000 	andeq	r0, r0, r0
				bc = 32;
    14c0:	19940000 	ldmibne	r4, {}	; <UNPREDICTABLE>
				val = va_arg (ap, lword);
    14c4:	19d10000 	ldmibne	r1, {}^	; <UNPREDICTABLE>
				bc = 16;
    14c8:	00010000 	andeq	r0, r1, r0
			switch (*mess) {
    14cc:	0019d252 	andseq	sp, r9, r2, asr r2
    14d0:	0019dd00 	andseq	sp, r9, r0, lsl #26
    14d4:	52000100 	andpl	r0, r0, #0, 2
    14d8:	000019de 	ldrdeq	r1, [r0], -lr
				dgout ('%');
    14dc:	000019f4 	strdeq	r1, [r0], -r4
    14e0:	00520001 	subseq	r0, r2, r1
				dgout (*mess);
    14e4:	00000000 	andeq	r0, r0, r0
    14e8:	ac000000 	stcge	0, cr0, [r0], {-0}
			switch (*mess) {
    14ec:	b0000019 	andlt	r0, r0, r9, lsl r0
					v = __pi_hex_enc_table [
    14f0:	01000019 	tsteq	r0, r9, lsl r0
					i += 4;
    14f4:	00005000 	andeq	r5, r0, r0
	...
					dgout (v);
    1504:	00010000 	andeq	r0, r1, r0
				while (i < bc) {
    1508:	00000050 	andeq	r0, r0, r0, asr r0
			mess++;
    150c:	00000000 	andeq	r0, r0, r0
					d /= 10;
    1510:	50000100 	andpl	r0, r0, r0, lsl #2
	...
						val |= 0xffff0000;
    1524:	00500001 	subseq	r0, r0, r1
    1528:	00000000 	andeq	r0, r0, r0
    152c:	01000000 	mrseq	r0, (UNDEF: 0)
				d = (bc == 16) ? 10000 : 1000000000;
    1530:	00005400 	andeq	r5, r0, r0, lsl #8
	...
					if (v || d == 1) break;
    1540:	00010000 	andeq	r0, r1, r0
    1544:	00000051 	andeq	r0, r0, r1, asr r0
	...
					dgout (v + '0');
    1554:	52000100 	andpl	r0, r0, #0, 2
	...
					val = val - (v * d);
    1560:	00550001 	subseq	r0, r5, r1
	...
				if (bc == 16)
    1570:	01000000 	mrseq	r0, (UNDEF: 0)
					val &= 0xffff;
    1574:	00005000 	andeq	r5, r0, r0
				d = (bc == 16) ? 10000 : 1000000000;
    1578:	00000000 	andeq	r0, r0, r0
					dgout (*s);
    157c:	00010000 	andeq	r0, r1, r0
					s++;
    1580:	00000054 	andeq	r0, r0, r4, asr r0
	...
			dgout (*mess++);
    1590:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	__pi_seed = __pi_seed * 1103515245 + 12345;
    159c:	00500001 	subseq	r0, r0, r1
	...
	^ entropy
    15ac:	01000000 	mrseq	r0, (UNDEF: 0)
}
    15b0:	00005200 	andeq	r5, r0, r0, lsl #4
    15b4:	00000000 	andeq	r0, r0, r0
    15b8:	00010000 	andeq	r0, r1, r0
    15bc:	00000055 	andeq	r0, r0, r5, asr r0
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    15c0:	00000000 	andeq	r0, r0, r0
    15c4:	0018ac00 	andseq	sl, r8, r0, lsl #24
    15c8:	0018c200 	andseq	ip, r8, r0, lsl #4
	sysassert (p->attributes.b.queued == 0, "tcv01");
    15cc:	50000100 	andpl	r0, r0, r0, lsl #2
    15d0:	000018c8 	andeq	r1, r0, r8, asr #17
	if (q_empty (q))
    15d4:	000018e8 	andeq	r1, r0, r8, ror #17
    15d8:	00500001 	subseq	r0, r0, r1
		trigger (q);
    15dc:	00000000 	andeq	r0, r0, r0
	if (p->attributes.b.urgent) {
    15e0:	ac000000 	stcge	0, cr0, [r0], {-0}
		p->u.bqueue.next = q->next;
    15e4:	c2000018 	andgt	r0, r0, #24
		p->u.bqueue.prev = q;
    15e8:	01000018 	tsteq	r0, r8, lsl r0
		q->next->prev = (qitem_t*) p;
    15ec:	18c85100 	stmiane	r8, {r8, ip, lr}^
	p->attributes.b.queued = 1;
    15f0:	18e00000 	stmiane	r0!, {}^	; <UNPREDICTABLE>
    15f4:	00010000 	andeq	r0, r1, r0
}
    15f8:	0018e251 	andseq	lr, r8, r1, asr r2
		p->u.bqueue.prev = q->prev;
    15fc:	0018ee00 	andseq	lr, r8, r0, lsl #28
		q->prev->next = (qitem_t*) p;
    1600:	51000100 	mrspl	r0, (UNDEF: 16)
	...
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    160c:	000018ac 	andeq	r1, r0, ip, lsr #17
	word cs = size + hblenb;
    1610:	000018c2 	andeq	r1, r0, r2, asr #17
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1614:	c2520001 	subsgt	r0, r2, #1
    1618:	c8000018 	stmdagt	r0, {r3, r4}
	p -> length = size;
    161c:	01000018 	tsteq	r0, r8, lsl r0
}
    1620:	18c85400 	stmiane	r8, {sl, ip, lr}^
	if (p->attributes.b.queued) {
    1624:	18d40000 	ldmne	r4, {}^	; <UNPREDICTABLE>
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1628:	00010000 	andeq	r0, r1, r0
    162c:	0018d452 	andseq	sp, r8, r2, asr r4
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1630:	0018fa00 	andseq	pc, r8, r0, lsl #20
		p->attributes.b.queued = 0;
    1634:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1638:	00001900 	andeq	r1, r0, r0, lsl #18
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    163c:	00001906 	andeq	r1, r0, r6, lsl #18
	deq (p);	// Remove from queue
    1640:	0a540001 	beq	150164c <__ccfg+0x14e16a4>
}
    1644:	1e000019 	mcrne	0, 0, r0, cr0, cr9, {0}
	tfree ((address)p);
    1648:	01000019 	tsteq	r0, r9, lsl r0
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    164c:	00005400 	andeq	r5, r0, r0, lsl #8
    1650:	00000000 	andeq	r0, r0, r0
	deq (p);	// Soft dequeue, timer and hook left intact
    1654:	18ac0000 	stmiane	ip!, {}	; <UNPREDICTABLE>
	switch (dv) {
    1658:	18ba0000 	ldmne	sl!, {}	; <UNPREDICTABLE>
    165c:	00010000 	andeq	r0, r1, r0
    1660:	00000053 	andeq	r0, r0, r3, asr r0
			p->attributes.b.urgent = 1;
    1664:	00000000 	andeq	r0, r0, r0
    1668:	00192800 	andseq	r2, r9, r0, lsl #16
			verify_ses (p, "dispose ses");
    166c:	00193400 	andseq	r3, r9, r0, lsl #8
    1670:	50000100 	andpl	r0, r0, r0, lsl #2
    1674:	0000193a 	andeq	r1, r0, sl, lsr r9
    1678:	00001952 	andeq	r1, r0, r2, asr r9
    167c:	00500001 	subseq	r0, r0, r1
			verify_phy (p, "dispose phy");
    1680:	00000000 	andeq	r0, r0, r0
    1684:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
}
    1688:	fa000018 	blx	16f0 <tcv_endp+0x18>
			enq (oqueues [p->attributes.b.phys], p);
    168c:	01000018 	tsteq	r0, r8, lsl r0
			p->attributes.b.urgent = 1;
    1690:	19005000 	stmdbne	r0, {ip, lr}
    1694:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
			verify_phy (p, "dispose phy");
    1698:	00010000 	andeq	r0, r1, r0
    169c:	00190a50 	andseq	r0, r9, r0, asr sl
    16a0:	00191800 	andseq	r1, r9, r0, lsl #16
    16a4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    16b8:	00500001 	subseq	r0, r0, r1
			rlp (p);
    16bc:	00000000 	andeq	r0, r0, r0
}
    16c0:	01000000 	mrseq	r0, (UNDEF: 0)
    16c4:	00005000 	andeq	r5, r0, r0
    16c8:	00000000 	andeq	r0, r0, r0
    16cc:	00010000 	andeq	r0, r1, r0
    16d0:	00000050 	andeq	r0, r0, r0, asr r0
    16d4:	00000000 	andeq	r0, r0, r0
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    16d8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		verify_ses (b, "tcv02");
    16ec:	00510001 	subseq	r0, r1, r1
    16f0:	00000000 	andeq	r0, r0, r0
    16f4:	01000000 	mrseq	r0, (UNDEF: 0)
    16f8:	00005100 	andeq	r5, r0, r0, lsl #2
		verify_plg (b, tcv_out, "tcv03");
    16fc:	00000000 	andeq	r0, r0, r0
    1700:	00010000 	andeq	r0, r1, r0
    1704:	00000051 	andeq	r0, r0, r1, asr r0
    1708:	00000000 	andeq	r0, r0, r0
    170c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		dispose (b, plugins [b->attributes.b.plugin] ->
    1720:	00540001 	subseq	r0, r4, r1
}
    1724:	00000000 	andeq	r0, r0, r0
		dispose (b, plugins [b->attributes.b.plugin] ->
    1728:	0a000000 	beq	1730 <tcv_endp+0x58>
		rlp (b);
    172c:	32007000 	andcc	r7, r0, #0
}
    1730:	01780324 	cmneq	r8, r4, lsr #6
		rlp (b);
    1734:	00222000 	eoreq	r2, r2, r0
    1738:	00000000 	andeq	r0, r0, r0
    173c:	01000000 	mrseq	r0, (UNDEF: 0)
    1740:	00005400 	andeq	r5, r0, r0, lsl #8
    1744:	00000000 	andeq	r0, r0, r0
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1748:	000a0000 	andeq	r0, sl, r0
    174c:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
    1750:	00017803 	andeq	r7, r1, r3, lsl #16
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1754:	00002220 	andeq	r2, r0, r0, lsr #4
	va_start (ap, plid);
    1758:	00000000 	andeq	r0, r0, r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    175c:	00010000 	andeq	r0, r1, r0
    1760:	00000054 	andeq	r0, r0, r4, asr r0
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1764:	00000000 	andeq	r0, r0, r0
    1768:	70000a00 	andvc	r0, r0, r0, lsl #20
    176c:	03243200 			; <UNDEFINED> instruction: 0x03243200
    1770:	20000178 	andcs	r0, r0, r8, ror r1
			syserror (ENODEVICE, "tcv04");
    1774:	00000022 	andeq	r0, r0, r2, lsr #32
	...
	attp.b.outgoing = 1;
    1784:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		if (descriptors [fd] == NULL)
    1790:	00550001 	subseq	r0, r5, r1
	...
}
    17a0:	01000000 	mrseq	r0, (UNDEF: 0)
    17a4:	00005400 	andeq	r5, r0, r0, lsl #8
    17a8:	00000000 	andeq	r0, r0, r0
	s->attpattern.b.session = fd;
    17ac:	00010000 	andeq	r0, r1, r0
    17b0:	00000054 	andeq	r0, r0, r4, asr r0
	...
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    17c0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    17cc:	00500001 	subseq	r0, r0, r1
    17d0:	00000000 	andeq	r0, r0, r0
    17d4:	01000000 	mrseq	r0, (UNDEF: 0)
	descriptors [fd] = s;
    17d8:	00005000 	andeq	r5, r0, r0
	...
		syserror (EMALLOC, "tcv05");
    17e8:	00010000 	andeq	r0, r1, r0
    17ec:	00000055 	andeq	r0, r0, r5, asr r0
	...
    17fc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1810:	00500001 	subseq	r0, r0, r1
    1814:	00000000 	andeq	r0, r0, r0
	plugins [ord] = pl;
    1818:	01000000 	mrseq	r0, (UNDEF: 0)
	return 0;
    181c:	00005000 	andeq	r5, r0, r0
		return ERROR;
    1820:	00000000 	andeq	r0, r0, r0
}
    1824:	00010000 	andeq	r0, r1, r0
    1828:	00000050 	andeq	r0, r0, r0, asr r0
	verify_fds (fd, "tcv10");
    182c:	00000000 	andeq	r0, r0, r0
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    1830:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	b = q_first (rq);
    1844:	00510001 	subseq	r0, r1, r1
	if (q_end (b, rq)) {
    1848:	00000000 	andeq	r0, r0, r0
		if (state != WNONE) {
    184c:	01000000 	mrseq	r0, (UNDEF: 0)
    1850:	00005100 	andeq	r5, r0, r0, lsl #2
			when (rq, state);
    1854:	00000000 	andeq	r0, r0, r0
			release;
    1858:	00010000 	andeq	r0, r1, r0
	deq (b);	// Dequeue the packet ...
    185c:	00000051 	andeq	r0, r0, r1, asr r0
	...
	verify_plg (b, tcv_frm, "tcv11");
    186c:	53000100 	movwpl	r0, #256	; 0x100
	...
    1878:	0070000a 	rsbseq	r0, r0, sl
    187c:	78032432 	stmdavc	r3, {r1, r4, r5, sl, sp}
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    1880:	22200001 	eorcs	r0, r0, #1
	...
		b->length - b->u.pointers.head - b->u.pointers.tail;
    188c:	00530001 	subseq	r0, r3, r1
	b->u.pointers.tail =
    1890:	00000000 	andeq	r0, r0, r0
}
    1894:	0a000000 	beq	189c <tcv_rnp+0x70>
		return NULL;
    1898:	32007000 	andcc	r7, r0, #0
    189c:	01780324 	cmneq	r8, r4, lsr #6
    18a0:	00222000 	eoreq	r2, r2, r0
    18a4:	00000000 	andeq	r0, r0, r0
    18a8:	01000000 	mrseq	r0, (UNDEF: 0)
	verify_fds (fd, "tcv16");
    18ac:	00005300 	andeq	r5, r0, r0, lsl #6
								Boolean urg) {
    18b0:	00000000 	andeq	r0, r0, r0
    18b4:	000a0000 	andeq	r0, sl, r0
	verify_fds (fd, "tcv16");
    18b8:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
    18bc:	00017803 	andeq	r7, r1, r3, lsl #16
    18c0:	00002220 	andeq	r2, r0, r0, lsr #4
	...
	verify_pld (s, tcv_frm, "tcv17");
    18d0:	00010000 	andeq	r0, r1, r0
    18d4:	00000050 	andeq	r0, r0, r0, asr r0
    18d8:	00000000 	andeq	r0, r0, r0
    18dc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    18f0:	00530001 	subseq	r0, r3, r1
		if (state != WNONE) {
    18f4:	00000000 	andeq	r0, r0, r0
    18f8:	01000000 	mrseq	r0, (UNDEF: 0)
}
    18fc:	00005300 	andeq	r5, r0, r0, lsl #6
			when (eid, state);
    1900:	00000000 	andeq	r0, r0, r0
    1904:	00010000 	andeq	r0, r1, r0
			release;
    1908:	00000053 	andeq	r0, r0, r3, asr r0
	...
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    1918:	52000100 	andpl	r0, r0, #0, 2
	...
    1924:	00520001 	subseq	r0, r2, r1
    1928:	00000000 	andeq	r0, r0, r0
		if (state != WNONE) {
    192c:	01000000 	mrseq	r0, (UNDEF: 0)
    1930:	00005200 	andeq	r5, r0, r0, lsl #4
			tmwait (state);
    1934:	00000000 	andeq	r0, r0, r0
    1938:	00010000 	andeq	r0, r1, r0
	b->attributes = s->attpattern;
    193c:	00000052 	andeq	r0, r0, r2, asr r0
		b->attributes.b.urgent = 1;
    1940:	00000000 	andeq	r0, r0, r0
    1944:	00182c00 	andseq	r2, r8, r0, lsl #24
	b->u.pointers.head = ptrs.head;
    1948:	00183a00 	andseq	r3, r8, r0, lsl #20
	b->u.pointers.tail = length;
    194c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	return (address) (b + 1);
    1958:	0000182c 	andeq	r1, r0, ip, lsr #16
    195c:	0000183e 	andeq	r1, r0, lr, lsr r8
    1960:	44510001 	ldrbmi	r0, [r1], #-1
    1964:	54000018 	strpl	r0, [r0], #-24	; 0xffffffe8
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1968:	01000018 	tsteq	r0, r8, lsl r0
    196c:	185c5100 	ldmdane	ip, {r8, ip, lr}^
    1970:	187e0000 	ldmdane	lr!, {}^	; <UNPREDICTABLE>
	verify_fph (phy, "tcv23");
    1974:	00010000 	andeq	r0, r1, r0
    1978:	00188051 	andseq	r8, r8, r1, asr r0
    197c:	00188200 	andseq	r8, r8, r0, lsl #4
    1980:	51000100 	mrspl	r0, (UNDEF: 16)
}
    1984:	00001896 	muleq	r0, r6, r8
	return (physical [phy]) (opt, arg);
    1988:	000018ac 	andeq	r1, r0, ip, lsr #17
    198c:	00510001 	subseq	r0, r1, r1
    1990:	00000000 	andeq	r0, r0, r0
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    1994:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
	if (opt < 0) {
    1998:	92000018 	andls	r0, r0, #24
		if (fd < 0)
    199c:	01000018 	tsteq	r0, r8, lsl r0
		if (opt == PHYSOPT_PLUGINFO) {
    19a0:	00005500 	andeq	r5, r0, r0, lsl #10
			if (fd >= TCV_MAX_PLUGS)
    19a4:	00000000 	andeq	r0, r0, r0
			if ((p = plugins [fd]) == NULL)
    19a8:	18460000 	stmdane	r6, {}^	; <UNPREDICTABLE>
    19ac:	18700000 	ldmdane	r0!, {}^	; <UNPREDICTABLE>
}
    19b0:	00010000 	andeq	r0, r1, r0
		if (fd >= TCV_MAX_PHYS)
    19b4:	00187054 	andseq	r7, r8, r4, asr r0
		return physinfo [fd];
    19b8:	00188400 	andseq	r8, r8, r0, lsl #8
    19bc:	50000100 	andpl	r0, r0, r0, lsl #2
	verify_fds (fd, "tcv22");
    19c0:	00001884 	andeq	r1, r0, r4, lsl #17
    19c4:	000018ac 	andeq	r1, r0, ip, lsr #17
    19c8:	00540001 	subseq	r0, r4, r1
    19cc:	00000000 	andeq	r0, r0, r0
    19d0:	44000000 	strmi	r0, [r0], #-0
}
    19d4:	57000018 	smladpl	r0, r8, r0, r0
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    19d8:	01000018 	tsteq	r0, r8, lsl r0
    19dc:	185c5000 	ldmdane	ip, {ip, lr}^
			return 0;
    19e0:	185e0000 	ldmdane	lr, {}^	; <UNPREDICTABLE>
    19e4:	00010000 	andeq	r0, r1, r0
    19e8:	00185e50 	andseq	r5, r8, r0, asr lr
    19ec:	00186100 	andseq	r6, r8, r0, lsl #2
    19f0:	71000700 	tstvc	r0, r0, lsl #14
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    19f4:	72243200 	eorvc	r3, r4, #0, 4
    19f8:	18962200 	ldmne	r6, {r9, sp}
	if (dsp != TCV_DSP_PASS) {
    19fc:	18ac0000 	stmiane	ip!, {}	; <UNPREDICTABLE>
		if (ses == NONE)
    1a00:	00010000 	andeq	r0, r1, r0
			syserror (EREQPAR, "tcv26");
    1a04:	00000050 	andeq	r0, r0, r0, asr r0
		verify_fds (ses, "tcv27");
    1a08:	00000000 	andeq	r0, r0, r0
    1a0c:	00180800 	andseq	r0, r8, r0, lsl #16
    1a10:	00181e00 	andseq	r1, r8, r0, lsl #28
    1a14:	50000100 	andpl	r0, r0, r0, lsl #2
    1a18:	00001820 	andeq	r1, r0, r0, lsr #16
		if ((p = apb (size)) != NULL) {
    1a1c:	00001824 	andeq	r1, r0, r4, lsr #16
    1a20:	00500001 	subseq	r0, r0, r1
	...
			p->attributes = descriptors [ses] -> attpattern;
    1a30:	01000000 	mrseq	r0, (UNDEF: 0)
			p->attributes.b.outgoing = 0;
    1a34:	00005000 	andeq	r5, r0, r0
			dispose (p, dsp);
    1a38:	00000000 	andeq	r0, r0, r0
			return (address)(p + 1);
    1a3c:	00010000 	andeq	r0, r1, r0
    1a40:	00000050 	andeq	r0, r0, r0, asr r0
	...
		return (address)(p + 1);
    1a50:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a5c:	00550001 	subseq	r0, r5, r1
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1a60:	00000000 	andeq	r0, r0, r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a64:	01000000 	mrseq	r0, (UNDEF: 0)
    1a68:	00005100 	andeq	r5, r0, r0, lsl #2
		syserror (EREQPAR, "tcv28");
    1a6c:	00000000 	andeq	r0, r0, r0
		syserror (EMALLOC, "tcv29");
    1a70:	00010000 	andeq	r0, r1, r0
	physical [phy] = ps;
    1a74:	00000055 	andeq	r0, r0, r5, asr r0
	physinfo [phy] = info;
    1a78:	00000000 	andeq	r0, r0, r0
    1a7c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1a88:	00550001 	subseq	r0, r5, r1
	...
}
    1a98:	01000000 	mrseq	r0, (UNDEF: 0)
    1a9c:	00005600 	andeq	r5, r0, r0, lsl #12
	...
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1aac:	00010000 	andeq	r0, r1, r0
	verify_fph (phy, "tcv30");
    1ab0:	00000050 	andeq	r0, r0, r0, asr r0
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ab4:	00000000 	andeq	r0, r0, r0
    1ab8:	00174800 	andseq	r4, r7, r0, lsl #16
	verify_fph (phy, "tcv30");
    1abc:	00177600 	andseq	r7, r7, r0, lsl #12
    1ac0:	50000100 	andpl	r0, r0, r0, lsl #2
    1ac4:	0000177c 	andeq	r1, r0, ip, ror r7
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1ac8:	0000179c 	muleq	r0, ip, r7
    1acc:	dc500001 	mrrcle	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1ad0:	de000017 	mcrle	0, 0, r0, cr0, cr7, {0}
    1ad4:	01000017 	tsteq	r0, r7, lsl r0
		if (plugins [plg] == NULL)
    1ad8:	00005000 	andeq	r5, r0, r0
    1adc:	00000000 	andeq	r0, r0, r0
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1ae0:	17480000 	strbne	r0, [r8, -r0]
		return 0;
    1ae4:	17780000 	ldrbne	r0, [r8, -r0]!
}
    1ae8:	00010000 	andeq	r0, r1, r0
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1aec:	00177851 	andseq	r7, r7, r1, asr r8
    1af0:	00177c00 	andseq	r7, r7, r0, lsl #24
    1af4:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    1af8:	0000177c 	andeq	r1, r0, ip, ror r7
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1afc:	0000179c 	muleq	r0, ip, r7
    1b00:	9c510001 	mrrcls	0, 0, r0, r1, cr1
    1b04:	a8000017 	stmdage	r0, {r0, r1, r2, r4}
    1b08:	01000017 	tsteq	r0, r7, lsl r0
    1b0c:	17ac5700 	strne	r5, [ip, r0, lsl #14]!
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1b10:	17dc0000 	ldrbne	r0, [ip, r0]
	len -= (ap.head + ap.tail);
    1b14:	00010000 	andeq	r0, r1, r0
    1b18:	0017dc57 	andseq	sp, r7, r7, asr ip
    1b1c:	0017e100 	andseq	lr, r7, r0, lsl #2
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1b20:	51000100 	mrspl	r0, (UNDEF: 16)
    1b24:	000017e1 	andeq	r1, r0, r1, ror #15
    1b28:	00001808 	andeq	r1, r0, r8, lsl #16
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1b2c:	00570001 	subseq	r0, r7, r1
    1b30:	00000000 	andeq	r0, r0, r0
    1b34:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
	return 1;
    1b38:	78000017 	stmdavc	r0, {r0, r1, r2, r4}
    1b3c:	02000017 	andeq	r0, r0, #23
    1b40:	7c789100 	ldfvcp	f1, [r8], #-0
    1b44:	9c000017 	stcls	0, cr0, [r0], {23}
    1b48:	02000017 	andeq	r0, r0, #23
	verify_fph (phy, "tcv32");
    1b4c:	ac789100 	ldfgep	f1, [r8], #-0
    1b50:	b8000017 	stmdalt	r0, {r0, r1, r2, r4}
    1b54:	02000017 	andeq	r0, r0, #23
    1b58:	dc789100 	ldflep	f1, [r8], #-0
    1b5c:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    1b60:	02000018 	andeq	r0, r0, #24
	oq = oqueues [phy];
    1b64:	00789100 	rsbseq	r9, r8, r0, lsl #2
	b = q_first (oq);
    1b68:	00000000 	andeq	r0, r0, r0
	if (q_end (b, oq)) {
    1b6c:	90000000 	andls	r0, r0, r0
	*len = b->length;
    1b70:	a0000017 	andge	r0, r0, r7, lsl r0
	deq (b);	// Dequeue the packet ...
    1b74:	01000017 	tsteq	r0, r7, lsl r0
}
    1b78:	17ac5600 	strne	r5, [ip, r0, lsl #12]!
		return NULL;
    1b7c:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    1b80:	00010000 	andeq	r0, r1, r0
    1b84:	00000056 	andeq	r0, r0, r6, asr r0
    1b88:	00000000 	andeq	r0, r0, r0
	verify_fph (phy, "tcv33");
    1b8c:	0017ac00 	andseq	sl, r7, r0, lsl #24
    1b90:	0017c600 	andseq	ip, r7, r0, lsl #12
    1b94:	50000100 	andpl	r0, r0, r0, lsl #2
    1b98:	000017c6 	andeq	r1, r0, r6, asr #15
    1b9c:	000017ca 	andeq	r1, r0, sl, asr #15
    1ba0:	ca540001 	bgt	1501bac <__ccfg+0x14e1c04>
	oq = oqueues [phy];
    1ba4:	ce000017 	mcrgt	0, 0, r0, cr0, cr7, {0}
	b = q_first (oq);
    1ba8:	01000017 	tsteq	r0, r7, lsl r0
		return NULL;
    1bac:	17ce5000 	strbne	r5, [lr, r0]
	return (address)(b + 1);
    1bb0:	17dc0000 	ldrbne	r0, [ip, r0]
}
    1bb4:	00010000 	andeq	r0, r1, r0
    1bb8:	0017e254 	andseq	lr, r7, r4, asr r2
    1bbc:	0017ea00 	andseq	lr, r7, r0, lsl #20
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1bc0:	50000100 	andpl	r0, r0, r0, lsl #2
	verify_plg (b, tcv_xmt, "tcv34");
    1bc4:	000017ea 	andeq	r1, r0, sl, ror #15
	hblock_t *b = header (pkt);
    1bc8:	00001808 	andeq	r1, r0, r8, lsl #16
	verify_plg (b, tcv_xmt, "tcv34");
    1bcc:	00540001 	subseq	r0, r4, r1
    1bd0:	00000000 	andeq	r0, r0, r0
    1bd4:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    1bd8:	fe000016 	mcr2	0, 0, r0, cr0, cr6, {0}
    1bdc:	01000016 	tsteq	r0, r6, lsl r0
    1be0:	17025000 	strne	r5, [r2, -r0]
    1be4:	171f0000 	ldrne	r0, [pc, -r0]
	dispose (b, plugins [b->attributes.b.plugin] ->
    1be8:	00010000 	andeq	r0, r1, r0
}
    1bec:	00172c50 	andseq	r2, r7, r0, asr ip
	dispose (b, plugins [b->attributes.b.plugin] ->
    1bf0:	00172e00 	andseq	r2, r7, r0, lsl #28
    1bf4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    while(1)
    1c00:	000016e2 	andeq	r1, r0, r2, ror #13
{
    1c04:	00001728 	andeq	r1, r0, r8, lsr #14
    SetupTrimDevice();
    1c08:	28540001 	ldmdacs	r4, {r0}^
        *pui32Dest++ = *pui32Src++;
    1c0c:	2b000017 	blcs	1c70 <get_byte+0x1c>
    1c10:	01000017 	tsteq	r0, r7, lsl r0
    1c14:	172c5000 	strne	r5, [ip, -r0]!
    1c18:	17320000 	ldrne	r0, [r2, -r0]!
    1c1c:	00010000 	andeq	r0, r1, r0
    1c20:	00173254 	andseq	r3, r7, r4, asr r2
    __asm("    ldr     r0, =_bss\n"
    1c24:	00173500 	andseq	r3, r7, r0, lsl #10
    1c28:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1c34:	0000160c 	andeq	r1, r0, ip, lsl #12
   main();
    1c38:	00001612 	andeq	r1, r0, r2, lsl r6
    FaultISR();
    1c3c:	00500001 	subseq	r0, r0, r1
}
    1c40:	00000000 	andeq	r0, r0, r0
    1c44:	3c000000 	stccc	0, cr0, [r0], {-0}
    1c48:	49000016 	stmdbmi	r0, {r1, r2, r4}
    1c4c:	01000016 	tsteq	r0, r6, lsl r0
    1c50:	00005000 	andeq	r5, r0, r0
static byte get_byte () {
    1c54:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c58:	164c0000 	strbne	r0, [ip], -r0
    1c5c:	167c0000 	ldrbtne	r0, [ip], -r0
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c60:	00010000 	andeq	r0, r1, r0
		b <<= 1;
    1c64:	00167c50 	andseq	r7, r6, r0, asr ip
    1c68:	00168800 	andseq	r8, r6, r0, lsl #16
			b |= 1;
    1c6c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	for (b = 0, i = 0; i < 8; i++) {
    1c70:	00001688 	andeq	r1, r0, r8, lsl #13
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c74:	0000168f 	andeq	r1, r0, pc, lsl #13
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1c78:	90510001 	subsls	r0, r1, r1
}
    1c7c:	b6000016 			; <UNDEFINED> instruction: 0xb6000016
    1c80:	01000016 	tsteq	r0, r6, lsl r0
static void put_byte (byte b) {
    1c84:	16b65000 	ldrtne	r5, [r6], r0
    1c88:	16b80000 	ldrtne	r0, [r8], r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c8c:	00010000 	andeq	r0, r1, r0
    1c90:	0016b854 	andseq	fp, r6, r4, asr r8
		if (b & 0x80)
    1c94:	0016bf00 	andseq	fp, r6, r0, lsl #30
    1c98:	50000100 	andpl	r0, r0, r0, lsl #2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1c9c:	000016c0 	andeq	r1, r0, r0, asr #13
		b <<= 1;
    1ca0:	000016d8 	ldrdeq	r1, [r0], -r8
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1ca4:	00500001 	subseq	r0, r0, r1
    1ca8:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cac:	4c000000 	stcmi	0, cr0, [r0], {-0}
}
    1cb0:	50000016 	andpl	r0, r0, r6, lsl r0
    1cb4:	01000016 	tsteq	r0, r6, lsl r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1cb8:	00005100 	andeq	r5, r0, r0, lsl #2
    1cbc:	00000000 	andeq	r0, r0, r0
    1cc0:	15c00000 	strbne	r0, [r0]
	put_byte (cmd);
    1cc4:	15ce0000 	strbne	r0, [lr]
    1cc8:	00010000 	andeq	r0, r1, r0
}
    1ccc:	0015ce50 	andseq	ip, r5, r0, asr lr
    1cd0:	0015d400 	andseq	sp, r5, r0, lsl #8
static void wwait (word st, word del) {
    1cd4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    1cd8:	000015d4 	ldrdeq	r1, [r0], -r4
    1cdc:	000015dd 	ldrdeq	r1, [r0], -sp
	while (dopen && (rdsr () & 1)) {
    1ce0:	dd500001 	ldclle	0, cr0, [r0, #-4]
    1ce4:	0c000015 	stceq	0, cr0, [r0], {21}
    1ce8:	01000016 	tsteq	r0, r6, lsl r0
    1cec:	00005500 	andeq	r5, r0, r0, lsl #10
	put_byte (CMD_RDSR);
    1cf0:	00000000 	andeq	r0, r0, r0
	r = get_byte ();
    1cf4:	15c00000 	strbne	r0, [r0]
    1cf8:	15d00000 	ldrbne	r0, [r0]
    1cfc:	00010000 	andeq	r0, r1, r0
	while (dopen && (rdsr () & 1)) {
    1d00:	0015d051 	andseq	sp, r5, r1, asr r0
}
    1d04:	0015d400 	andseq	sp, r5, r0, lsl #8
		if (st == WNONE)
    1d08:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1d0c:	000015d4 	ldrdeq	r1, [r0], -r4
			mdelay (1);
    1d10:	000015dd 	ldrdeq	r1, [r0], -sp
    1d14:	dd510001 	ldclle	0, cr0, [r1, #-4]
			delay (del, st);
    1d18:	0c000015 	stceq	0, cr0, [r0], {21}
    1d1c:	01000016 	tsteq	r0, r6, lsl r0
			release;
    1d20:	00005400 	andeq	r5, r0, r0, lsl #8
    1d24:	00000000 	andeq	r0, r0, r0
    1d28:	16280000 	strtne	r0, [r8], -r0
static void ready () {
    1d2c:	163a0000 	ldrtne	r0, [sl], -r0
	if (dopen) {
    1d30:	00010000 	andeq	r0, r1, r0
		wwait (WNONE, 1);
    1d34:	00000050 	andeq	r0, r0, r0, asr r0
    1d38:	00000000 	andeq	r0, r0, r0
    1d3c:	00196800 	andseq	r6, r9, r0, lsl #16
	dstat = 0;
    1d40:	00196e00 	andseq	r6, r9, r0, lsl #28
}
    1d44:	50000100 	andpl	r0, r0, r0, lsl #2
    1d48:	0000196e 	andeq	r1, r0, lr, ror #18
    1d4c:	0000197a 	andeq	r1, r0, sl, ror r9
	udelay (1);
    1d50:	00530001 	subseq	r0, r3, r1
	udelay (1);
    1d54:	00000000 	andeq	r0, r0, r0
    1d58:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    1d5c:	72000019 	andvc	r0, r0, #25
		dopen = DOPEN_TEMP;
    1d60:	01000019 	tsteq	r0, r9, lsl r0
    1d64:	19725100 	ldmdbne	r2!, {r8, ip, lr}^
    1d68:	197e0000 	ldmdbne	lr!, {}^	; <UNPREDICTABLE>
    1d6c:	00010000 	andeq	r0, r1, r0
static void cclose () {
    1d70:	00198450 	andseq	r8, r9, r0, asr r4
	if (dopen == DOPEN_TEMP) {
    1d74:	00198900 	andseq	r8, r9, r0, lsl #18
    1d78:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	cmd_0 (CMD_DP);
    1d84:	00001968 	andeq	r1, r0, r8, ror #18
    1d88:	00001976 	andeq	r1, r0, r6, ror r9
		dopen = 0;
    1d8c:	76520001 	ldrbvc	r0, [r2], -r1
}
    1d90:	80000019 	andhi	r0, r0, r9, lsl r0
word ee_open () {
    1d94:	01000019 	tsteq	r0, r9, lsl r0
	ready ();
    1d98:	19845100 	stmibne	r4, {r8, ip, lr}
	dopen = DOPEN_PERM;
    1d9c:	19890000 	stmibne	r9, {}	; <UNPREDICTABLE>
    1da0:	00010000 	andeq	r0, r1, r0
}
    1da4:	00000051 	andeq	r0, r0, r1, asr r0
	if (dopen) {
    1da8:	00000000 	andeq	r0, r0, r0
    1dac:	00197c00 	andseq	r7, r9, r0, lsl #24
		dopen = DOPEN_TEMP;
    1db0:	00197e00 	andseq	r7, r9, r0, lsl #28
		cclose ();
    1db4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
int ser_outf (word st, const char *m, ...) {
    1dc0:	0000197c 	andeq	r1, r0, ip, ror r9
	if ((prcs = running (__outserial)) != 0) {
    1dc4:	00001980 	andeq	r1, r0, r0, lsl #19
    1dc8:	00510001 	subseq	r0, r1, r1
		join (prcs, st);
    1dcc:	00000000 	andeq	r0, r0, r0
    1dd0:	f4000000 	vst4.8	{d0-d3}, [r0], r0
		release;
    1dd4:	f8000019 			; <UNDEFINED> instruction: 0xf8000019
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1dd8:	01000019 	tsteq	r0, r9, lsl r0
    1ddc:	00005000 	andeq	r5, r0, r0
    1de0:	00000000 	andeq	r0, r0, r0
		umwait (st);
    1de4:	19f40000 	ldmibne	r4!, {}^	; <UNPREDICTABLE>
    1de8:	1a060000 	bne	181df0 <__ccfg+0x161e48>
	if (runstrand (__outserial, buf) == 0) {
    1dec:	00010000 	andeq	r0, r1, r0
    1df0:	001a0651 	andseq	r0, sl, r1, asr r6
    1df4:	001a0a00 	andseq	r0, sl, r0, lsl #20
		ufree (buf);
    1df8:	56000100 	strpl	r0, [r0], -r0, lsl #2
		npwait (st);
    1dfc:	00001a0a 	andeq	r1, r0, sl, lsl #20
}
    1e00:	00001a1a 	andeq	r1, r0, sl, lsl sl
    1e04:	1a510001 	bne	1441e10 <__ccfg+0x1421e68>
    1e08:	1c00001a 	stcne	0, cr0, [r0], {26}
    1e0c:	0100001a 	tsteq	r0, sl, lsl r0
int ser_inf (word st, const char *fmt, ...) {
    1e10:	1a1c5600 	bne	717618 <__ccfg+0x6f7670>
    1e14:	1a1f0000 	bne	7c1e1c <__ccfg+0x7a1e74>
	if (fmt == NULL)
    1e18:	00010000 	andeq	r0, r1, r0
	if (__inpline == NULL) {
    1e1c:	001a1f51 	andseq	r1, sl, r1, asr pc
		if ((prcs = running (__inserial)) == 0) {
    1e20:	001a4200 	andseq	r4, sl, r0, lsl #4
    1e24:	56000100 	strpl	r0, [r0], -r0, lsl #2
			prcs = runthread (__inserial);
    1e28:	00001a42 	andeq	r1, r0, r2, asr #20
    1e2c:	00001a45 	andeq	r1, r0, r5, asr #20
			if (prcs == 0) {
    1e30:	45510001 	ldrbmi	r0, [r1, #-1]
				npwait (st);
    1e34:	5c00001a 	stcpl	0, cr0, [r0], {26}
		release;
    1e38:	0100001a 	tsteq	r0, sl, lsl r0
		join (prcs, st);
    1e3c:	00005600 	andeq	r5, r0, r0, lsl #12
    1e40:	00000000 	andeq	r0, r0, r0
	va_start (ap, fmt);
    1e44:	19f40000 	ldmibne	r4!, {}^	; <UNPREDICTABLE>
	prcs = vscan (__inpline, fmt, ap);
    1e48:	1a090000 	bne	241e50 <__ccfg+0x221ea8>
    1e4c:	00010000 	andeq	r0, r1, r0
	ufree (__inpline);
    1e50:	001a0952 	andseq	r0, sl, r2, asr r9
	__inpline = NULL;
    1e54:	001a0a00 	andseq	r0, sl, r0, lsl #20
}
    1e58:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    1e5c:	00001a0a 	andeq	r1, r0, sl, lsl #20
    1e60:	00001a1f 	andeq	r1, r0, pc, lsl sl
		return 0;
    1e64:	1f520001 	svcne	0x00520001
    1e68:	4200001a 	andmi	r0, r0, #26
    1e6c:	0100001a 	tsteq	r0, sl, lsl r0
int ser_in (word st, char *buf, int len) {
    1e70:	1a425500 	bne	1097278 <__ccfg+0x10772d0>
    1e74:	1a450000 	bne	1141e7c <__ccfg+0x1121ed4>
	if (len == 0)
    1e78:	00010000 	andeq	r0, r1, r0
	if (__inpline == NULL) {
    1e7c:	001a4552 	andseq	r4, sl, r2, asr r5
		if ((prcs = running (__inserial)) == 0) {
    1e80:	001a5c00 	andseq	r5, sl, r0, lsl #24
    1e84:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
			if (prcs == 0) {
    1e90:	00001a46 	andeq	r1, r0, r6, asr #20
				npwait (st);
    1e94:	00001a4c 	andeq	r1, r0, ip, asr #20
		release;
    1e98:	00500001 	subseq	r0, r0, r1
		join (prcs, st);
    1e9c:	00000000 	andeq	r0, r0, r0
    1ea0:	0a000000 	beq	1ea8 <ser_in+0x38>
	if (*__inpline == NULL) // bin cmd
    1ea4:	1f00001a 	svcne	0x0000001a
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1ea8:	0100001a 	tsteq	r0, sl, lsl r0
	if (prcs >= len)
    1eac:	1a1f5200 	bne	7d66b4 <__ccfg+0x7b670c>
		prcs = len-1;
    1eb0:	1a240000 	bne	901eb8 <__ccfg+0x8e1f10>
	memcpy (buf, __inpline, prcs);
    1eb4:	00010000 	andeq	r0, r1, r0
    1eb8:	001a2855 	andseq	r2, sl, r5, asr r8
    1ebc:	001a4200 	andseq	r4, sl, r0, lsl #4
	ufree (__inpline);
    1ec0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		buf [prcs] = '\0';
    1ecc:	00001a0a 	andeq	r1, r0, sl, lsl #20
}
    1ed0:	00001a1a 	andeq	r1, r0, sl, lsl sl
		prcs = strlen (__inpline);
    1ed4:	1a510001 	bne	1441ee0 <__ccfg+0x1421f38>
    1ed8:	1c00001a 	stcne	0, cr0, [r0], {26}
		return 0;
    1edc:	0100001a 	tsteq	r0, sl, lsl r0
    1ee0:	1a1c5600 	bne	7176e8 <__ccfg+0x6f7740>
    1ee4:	1a1f0000 	bne	7c1eec <__ccfg+0x7a1f44>
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    1ee8:	00010000 	andeq	r0, r1, r0
    1eec:	001a1f51 	andseq	r1, sl, r1, asr pc
    1ef0:	001a2400 	andseq	r2, sl, r0, lsl #8
	RF_cmdFs.frequency = 
    1ef4:	56000100 	strpl	r0, [r0], -r0, lsl #2
}
    1ef8:	00001a28 	andeq	r1, r0, r8, lsr #20
    1efc:	00001a42 	andeq	r1, r0, r2, asr #20
    1f00:	00560001 	subseq	r0, r6, r1
    1f04:	00000000 	andeq	r0, r0, r0
static int option (int opt, address val) {
    1f08:	20000000 	andcs	r0, r0, r0
	switch (opt) {
    1f0c:	2400001a 	strcs	r0, [r0], #-26	; 0xffffffe6
    1f10:	0100001a 	tsteq	r0, sl, lsl r0
    1f14:	1a285000 	bne	a15f1c <__ccfg+0x9f5f74>
    1f18:	1a3b0000 	bne	ec1f20 <__ccfg+0xea1f78>
    1f1c:	00010000 	andeq	r0, r1, r0
    1f20:	001a3b50 	andseq	r3, sl, r0, asr fp
    1f24:	001a4200 	andseq	r4, sl, r0, lsl #4
    1f28:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
			goto RVal;
    1f3c:	00500001 	subseq	r0, r0, r1
			_BIS (dstate, DSTATE_RXON);
    1f40:	00000000 	andeq	r0, r0, r0
    1f44:	01000000 	mrseq	r0, (UNDEF: 0)
	int ret = 0;
    1f48:	00005000 	andeq	r5, r0, r0
	...
			p_trigger (drvprcs, qevent);
    1f58:	00010000 	andeq	r0, r1, r0
    1f5c:	00000051 	andeq	r0, r0, r1, asr r0
    1f60:	00000000 	andeq	r0, r0, r0
    1f64:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			_BIC (dstate, DSTATE_RXON);
    1f78:	00520001 	subseq	r0, r2, r1
    1f7c:	00000000 	andeq	r0, r0, r0
			statid = (val == NULL) ? 0 : *val;
    1f80:	01000000 	mrseq	r0, (UNDEF: 0)
    1f84:	00005200 	andeq	r5, r0, r0, lsl #4
	...
		*val = ret;
    1f94:	00010000 	andeq	r0, r1, r0
			ret = rbuffl + 2;
    1f98:	00000051 	andeq	r0, r0, r1, asr r0
	...
				memcpy (val, &rxstat,
    1fa8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    1fbc:	00500001 	subseq	r0, r0, r1
				utimer_set (bckf_timer, *val);
    1fc0:	00000000 	andeq	r0, r0, r0
    1fc4:	05000000 	streq	r0, [r0, #-0]
    1fc8:	00000300 	andeq	r0, r0, r0, lsl #6
	...
					== patable [ret])
    1fd4:	00010000 	andeq	r0, r1, r0
				if (RF_cmdPropRadioDivSetup.txPower
    1fd8:	00000050 	andeq	r0, r0, r0, asr r0
			for (ret = 0; ret < 8; ret++)
    1fdc:	00000000 	andeq	r0, r0, r0
    1fe0:	03000500 	movweq	r0, #1280	; 0x500
	...
			_BIS (dstate, DSTATE_IRST);
    1ff8:	00500001 	subseq	r0, r0, r1
    1ffc:	00000000 	andeq	r0, r0, r0
    2000:	01000000 	mrseq	r0, (UNDEF: 0)
			ret = (int) channel;
    2004:	00005000 	andeq	r5, r0, r0
			goto RVal;
    2008:	00000000 	andeq	r0, r0, r0
				(*val > 7) ? 7 : *val;
    200c:	00010000 	andeq	r0, r1, r0
    2010:	00000050 	andeq	r0, r0, r0, asr r0
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2014:	00000000 	andeq	r0, r0, r0
    2018:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    202c:	00500001 	subseq	r0, r0, r1
	...
    203c:	01000000 	mrseq	r0, (UNDEF: 0)
    2040:	00005000 	andeq	r5, r0, r0
	...
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2050:	00010000 	andeq	r0, r1, r0
    2054:	00000050 	andeq	r0, r0, r0, asr r0
	...
			syserror (EREQPAR, "cc13 op");
    2064:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    2070:	00550001 	subseq	r0, r5, r1
	...
    2080:	01000000 	mrseq	r0, (UNDEF: 0)
    2084:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    2094:	00010000 	andeq	r0, r1, r0
static void issue_cmd (lword cmd) {
    2098:	00000053 	andeq	r0, r0, r3, asr r0
	...
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20a8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
			syserror (EHARDWARE, "hang ic0");
    20b4:	00540001 	subseq	r0, r4, r1
		if (cnt-- == 0) {
    20b8:	00000000 	andeq	r0, r0, r0
			diag ("HUP %lx %lx", cmd, res);
    20bc:	01000000 	mrseq	r0, (UNDEF: 0)
    20c0:	00005400 	andeq	r5, r0, r0, lsl #8
	...
}
    20d0:	00010000 	andeq	r0, r1, r0
    20d4:	00000050 	andeq	r0, r0, r0, asr r0
    20d8:	00000000 	andeq	r0, r0, r0
    20dc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	_BIC (dstate, DSTATE_RXAC);
    20f0:	00510001 	subseq	r0, r1, r1
    20f4:	00000000 	andeq	r0, r0, r0
}
    20f8:	01000000 	mrseq	r0, (UNDEF: 0)
    20fc:	00005500 	andeq	r5, r0, r0, lsl #10
    2100:	00000000 	andeq	r0, r0, r0
static void rf_off () {
    2104:	00010000 	andeq	r0, r1, r0
	if ((dstate & DSTATE_RFON) == 0)
    2108:	00000051 	andeq	r0, r0, r1, asr r0
	...
	IntDisable (INT_RFC_CPE_0);
    2118:	52000100 	andpl	r0, r0, #0, 2
	...
	RFCSynthPowerDown ();
    2124:	00540001 	subseq	r0, r4, r1
	...
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2134:	01000000 	mrseq	r0, (UNDEF: 0)
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2138:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2148:	00010000 	andeq	r0, r1, r0
	_BIC (dstate, DSTATE_RFON);
    214c:	00000050 	andeq	r0, r0, r0, asr r0
	...
}
    215c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2168:	00550001 	subseq	r0, r5, r1
    216c:	00000000 	andeq	r0, r0, r0
		if (cmd->status == tstat)
    2170:	01000000 	mrseq	r0, (UNDEF: 0)
		if (timeout-- == 0) {
    2174:	00005000 	andeq	r5, r0, r0
	...
			syserror (EHARDWARE, "rt2");
    2184:	00010000 	andeq	r0, r1, r0
    2188:	00000051 	andeq	r0, r0, r1, asr r0
		udelay (1);
    218c:	00000000 	andeq	r0, r0, r0
		if (cmd->status == tstat)
    2190:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
static void rf_on () {
    219c:	00560001 	subseq	r0, r6, r1
	if (dstate & DSTATE_RFON)
    21a0:	00000000 	andeq	r0, r0, r0
    21a4:	01000000 	mrseq	r0, (UNDEF: 0)
    21a8:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    21b8:	00010000 	andeq	r0, r1, r0
	OSCHF_TurnOnXosc();
    21bc:	00000052 	andeq	r0, r0, r2, asr r0
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    21c0:	00000000 	andeq	r0, r0, r0
    21c4:	52000100 	andpl	r0, r0, #0, 2
	...
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21d0:	00001cd4 	ldrdeq	r1, [r0], -r4
    21d4:	00001ce4 	andeq	r1, r0, r4, ror #25
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    21d8:	00500001 	subseq	r0, r0, r1
    21dc:	00000000 	andeq	r0, r0, r0
    21e0:	d4000000 	strle	r0, [r0], #-0
	issue_cmd (
    21e4:	e400001c 	str	r0, [r0], #-28	; 0xffffffe4
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    21e8:	0100001c 	tsteq	r0, ip, lsl r0
    21ec:	00005100 	andeq	r5, r0, r0, lsl #2
    21f0:	00000000 	andeq	r0, r0, r0
   pPatchTab[80] = 0;
    21f4:	1cf80000 	ldclne	0, cr0, [r8]
    21f8:	1cfe0000 	ldclne	0, cr0, [lr]
   pPatchTab[53] = 2;
    21fc:	00010000 	andeq	r0, r1, r0
    2200:	00000050 	andeq	r0, r0, r0, asr r0
   pPatchTab[55] = 3;
    2204:	00000000 	andeq	r0, r0, r0
   pPatchTab[110] = 4;
    2208:	001cb800 	andseq	fp, ip, r0, lsl #16
    220c:	001cc500 	andseq	ip, ip, r0, lsl #10
   pPatchTab[107] = 5;
    2210:	50000100 	andpl	r0, r0, r0, lsl #2
	...
   pPatchTab[65] = 6;
    221c:	00001c84 	andeq	r1, r0, r4, lsl #25
   pIrqPatch[1] = _IRQ_PATCH_0;
    2220:	00001ca2 	andeq	r1, r0, r2, lsr #25
    2224:	ae500001 	cdpge	0, 5, cr0, cr0, cr1, {0}
   const uint32_t *pS = patchGenfskRfe;
    2228:	b800001c 	stmdalt	r0, {r2, r3, r4}
   volatile unsigned long *pD = &HWREG(RFC_RFERAM_BASE);
    222c:	0100001c 	tsteq	r0, ip, lsl r0
      t2 = *pS++;
    2230:	00005000 	andeq	r5, r0, r0
      t4 = *pS++;
    2234:	00000000 	andeq	r0, r0, r0
      t6 = *pS++;
    2238:	1c600000 	stclne	0, cr0, [r0], #-0
      t8 = *pS++;
    223c:	1c660000 	stclne	0, cr0, [r6], #-0
      *pD++ = t1;
    2240:	00010000 	andeq	r0, r1, r0
      *pD++ = t2;
    2244:	001c6a50 	andseq	r6, ip, r0, asr sl
      *pD++ = t3;
    2248:	001c8400 	andseq	r8, ip, r0, lsl #8
      *pD++ = t4;
    224c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
   } while (--nIterations);
    2258:	00001dbc 			; <UNDEFINED> instruction: 0x00001dbc
      *pD++ = t8;
    225c:	00001dc4 	andeq	r1, r0, r4, asr #27
    2260:	00500001 	subseq	r0, r0, r1
   *pD++ = t1;
    2264:	00000000 	andeq	r0, r0, r0
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2268:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    226c:	d100001d 	tstle	r0, sp, lsl r0
   *pD++ = t2;
    2270:	0100001d 	tsteq	r0, sp, lsl r0
   *pD++ = t3;
    2274:	1dd15000 	ldclne	0, cr5, [r1]
    2278:	1dd60000 	ldclne	0, cr0, [r6]
   *pD++ = t4;
    227c:	00010000 	andeq	r0, r1, r0
   *pD++ = t5;
    2280:	001dd656 	andseq	sp, sp, r6, asr r6
    2284:	001ddf00 	andseq	sp, sp, r0, lsl #30
    2288:	50000100 	andpl	r0, r0, r0, lsl #2
	RFCAdi3VcoLdoVoltageMode (true);
    228c:	00001ddf 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
       	RFCRfTrimSet (&rfTrim);
    2290:	00001e06 	andeq	r1, r0, r6, lsl #28
    2294:	06560001 	ldrbeq	r0, [r6], -r1
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2298:	1000001e 	andne	r0, r0, lr, lsl r0
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    229c:	0100001e 	tsteq	r0, lr, lsl r0
    22a0:	00005000 	andeq	r5, r0, r0
    22a4:	00000000 	andeq	r0, r0, r0
	issue_cmd ((lword)&cmd_srt);
    22a8:	1de00000 	stclne	0, cr0, [r0]
	issue_cmd ((lword)&RF_cmdFs);
    22ac:	1de40000 	stclne	0, cr0, [r4]
    22b0:	00010000 	andeq	r0, r1, r0
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    22b4:	001de450 	andseq	lr, sp, r0, asr r4
    22b8:	001dec00 	andseq	lr, sp, r0, lsl #24
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22bc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	IntEnable (INT_RFC_CPE_0);
    22c0:	00001dec 	andeq	r1, r0, ip, ror #27
	_BIC (dstate, DSTATE_IRST);
    22c4:	00001df0 	strdeq	r1, [r0], -r0
    22c8:	f0500001 			; <UNDEFINED> instruction: 0xf0500001
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22cc:	0600001d 			; <UNDEFINED> instruction: 0x0600001d
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22d0:	0100001e 	tsteq	r0, lr, lsl r0
	IntEnable (INT_RFC_CPE_0);
    22d4:	00005500 	andeq	r5, r0, r0, lsl #10
}
    22d8:	00000000 	andeq	r0, r0, r0
	IntEnable (INT_RFC_CPE_0);
    22dc:	1e100000 	cdpne	0, 1, cr0, cr0, cr0, {0}
    22e0:	1e1e0000 	cdpne	0, 1, cr0, cr14, cr0, {0}
}
    22e4:	00010000 	andeq	r0, r1, r0
    22e8:	001e6450 	andseq	r6, lr, r0, asr r4
    22ec:	001e7000 	andseq	r7, lr, r0
    22f0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    22fc:	00001e26 	andeq	r1, r0, r6, lsr #28
    2300:	00001e2c 	andeq	r1, r0, ip, lsr #28
    2304:	2c500001 	mrrccs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    2308:	2f00001e 	svccs	0x0000001e
    230c:	0100001e 	tsteq	r0, lr, lsl r0
    2310:	1e305100 	rsfnes	f5, f0, f0
    2314:	1e340000 	cdpne	0, 3, cr0, cr4, cr0, {0}
    2318:	00010000 	andeq	r0, r1, r0
    231c:	001e3c50 	andseq	r3, lr, r0, asr ip
    2320:	001e4100 	andseq	r4, lr, r0, lsl #2
    2324:	50000100 	andpl	r0, r0, r0, lsl #2
    2328:	00001e4e 	andeq	r1, r0, lr, asr #28
    232c:	00001e50 	andeq	r1, r0, r0, asr lr
    2330:	50500001 	subspl	r0, r0, r1
    2334:	5800001e 	stmdapl	r0, {r1, r2, r3, r4}
    2338:	0100001e 	tsteq	r0, lr, lsl r0
    233c:	00005400 	andeq	r5, r0, r0, lsl #8
    2340:	00000000 	andeq	r0, r0, r0
static void rx_int_enable () {
    2344:	1e700000 	cdpne	0, 7, cr0, cr0, cr0, {0}
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2348:	1e7e0000 	cdpne	0, 7, cr0, cr14, cr0, {0}
    234c:	00010000 	andeq	r0, r1, r0
    2350:	001eda50 	andseq	sp, lr, r0, asr sl
    2354:	001ee800 	andseq	lr, lr, r0, lsl #16
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2358:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				diag ("BAD RX");
    2364:	00001e70 	andeq	r1, r0, r0, ror lr
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2368:	00001e85 	andeq	r1, r0, r5, lsl #29
    236c:	85510001 	ldrbhi	r0, [r1, #-1]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2370:	a400001e 	strge	r0, [r0], #-30	; 0xffffffe2
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2374:	0100001e 	tsteq	r0, lr, lsl r0
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2378:	1ea45600 	cdpne	6, 10, cr5, cr4, cr0, {0}
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    237c:	1eac0000 	cdpne	0, 10, cr0, cr12, cr0, {0}
		if (db->status == DATA_ENTRY_FINISHED) {
    2380:	00010000 	andeq	r0, r1, r0
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2384:	001eac51 	andseq	sl, lr, r1, asr ip
    2388:	001ed200 	andseq	sp, lr, r0, lsl #4
			nr++;
    238c:	56000100 	strpl	r0, [r0], -r0, lsl #2
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2390:	00001ed2 	ldrdeq	r1, [r0], -r2
    2394:	00001ed5 	ldrdeq	r1, [r0], -r5
    2398:	d5510001 	ldrble	r0, [r1, #-1]
    239c:	da00001e 	ble	241c <cc1350_driver+0x14>
				__dp [pl + 1] = __dp [pl] - 128;
    23a0:	0100001e 	tsteq	r0, lr, lsl r0
				pl = __dp [1] + 2;
    23a4:	1eda5600 	cdpne	6, 13, cr5, cr10, cr0, {0}
				__dp [pl + 1] = __dp [pl] - 128;
    23a8:	1ee80000 	cdpne	0, 14, cr0, cr8, cr0, {0}
    23ac:	00010000 	andeq	r0, r1, r0
				__dp [pl] = 0;
    23b0:	00000051 	andeq	r0, r0, r1, asr r0
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    23b4:	00000000 	andeq	r0, r0, r0
    23b8:	001e7000 	andseq	r7, lr, r0
    23bc:	001e8500 	andseq	r8, lr, r0, lsl #10
			db->status = DATA_ENTRY_PENDING;
    23c0:	52000100 	andpl	r0, r0, #0, 2
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    23c4:	00001e85 	andeq	r1, r0, r5, lsl #29
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    23c8:	00001ea4 	andeq	r1, r0, r4, lsr #29
				diag ("BAD RX");
    23cc:	a4550001 	ldrbge	r0, [r5], #-1
    23d0:	ac00001e 	stcge	0, cr0, [r0], {30}
	if (nr) {
    23d4:	0100001e 	tsteq	r0, lr, lsl r0
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23d8:	1eac5200 	cdpne	2, 10, cr5, cr12, cr0, {0}
}
    23dc:	1ed20000 	cdpne	0, 13, cr0, cr2, cr0, {0}
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23e0:	00010000 	andeq	r0, r1, r0
    23e4:	001ed255 	andseq	sp, lr, r5, asr r2
    23e8:	001ed500 	andseq	sp, lr, r0, lsl #10
}
    23ec:	52000100 	andpl	r0, r0, #0, 2
    23f0:	00001ed5 	ldrdeq	r1, [r0], -r5
    23f4:	00001eda 	ldrdeq	r1, [r0], -sl
    23f8:	da550001 	ble	1542404 <__ccfg+0x152245c>
    23fc:	e800001e 	stmda	r0, {r1, r2, r3, r4}
    2400:	0100001e 	tsteq	r0, lr, lsl r0
    2404:	00005200 	andeq	r5, r0, r0, lsl #4
thread (cc1350_driver)
    2408:	00000000 	andeq	r0, r0, r0
    240c:	1e860000 	cdpne	0, 8, cr0, cr6, cr0, {0}
    2410:	1e8c0000 	cdpne	0, 8, cr0, cr12, cr0, {0}
    2414:	00010000 	andeq	r0, r1, r0
    2418:	001e8c50 	andseq	r8, lr, r0, asr ip
		if (dstate & DSTATE_IRST) {
    241c:	001e8f00 	andseq	r8, lr, r0, lsl #30
    2420:	51000100 	mrspl	r0, (UNDEF: 16)
    2424:	00001e90 	muleq	r0, r0, lr
			rf_off ();
    2428:	00001e94 	muleq	r0, r4, lr
			_BIC (dstate,
    242c:	9c500001 	mrrcls	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    2430:	a100001e 	tstge	r0, lr, lsl r0
		if (dstate & DSTATE_RXAC) {
    2434:	0100001e 	tsteq	r0, lr, lsl r0
    2438:	1eac5000 	cdpne	0, 10, cr5, cr12, cr0, {0}
			if ((dstate & DSTATE_RXON) == 0)
    243c:	1ece0000 	cdpne	0, 12, cr0, cr14, cr0, {0}
				rx_de ();
    2440:	00010000 	andeq	r0, r1, r0
		if (paylen == 0) {
    2444:	001ed854 	andseq	sp, lr, r4, asr r8
    2448:	001eda00 	andseq	sp, lr, r0, lsl #20
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    244c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2458:	00002654 	andeq	r2, r0, r4, asr r6
				paylen -= 2;
    245c:	00002662 	andeq	r2, r0, r2, ror #12
    2460:	62500001 	subsvs	r0, r0, #1
    2464:	68000026 	stmdavs	r0, {r1, r2, r5}
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2468:	01000026 	tsteq	r0, r6, lsr #32
    246c:	26685600 	strbtcs	r5, [r8], -r0, lsl #12
    2470:	26720000 	ldrbtcs	r0, [r2], -r0
    2474:	00010000 	andeq	r0, r1, r0
		} else if (dstate & DSTATE_RXON) {
    2478:	00267250 	eoreq	r7, r6, r0, asr r2
			rf_on ();
    247c:	00267600 	eoreq	r7, r6, r0, lsl #12
	if (dstate & DSTATE_RXAC)
    2480:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2484:	00002676 	andeq	r2, r0, r6, ror r6
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2488:	00002686 	andeq	r2, r0, r6, lsl #13
    248c:	86500001 	ldrbhi	r0, [r0], -r1
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2490:	80000026 	andhi	r0, r0, r6, lsr #32
	issue_cmd ((lword)&RF_cmdPropRx);
    2494:	01000027 	tsteq	r0, r7, lsr #32
	_BIS (dstate, DSTATE_RXAC);
    2498:	00005600 	andeq	r5, r0, r0, lsl #12
    249c:	00000000 	andeq	r0, r0, r0
    24a0:	26540000 	ldrbcs	r0, [r4], -r0
				if (statid != 0xffff)
    24a4:	26640000 	strbtcs	r0, [r4], -r0
    24a8:	00010000 	andeq	r0, r1, r0
					((address)(RF_cmdPropTx.pPkt)) [0] =
    24ac:	00266851 	eoreq	r6, r6, r1, asr r8
				RF_cmdPropTx.pktLen = (byte) paylen;
    24b0:	00267400 	eoreq	r7, r6, r0, lsl #8
		if (paylen == 0) {
    24b4:	51000100 	mrspl	r0, (UNDEF: 16)
			wait (qevent, DR_LOOP);
    24b8:	00002676 	andeq	r2, r0, r6, ror r6
    24bc:	00002686 	andeq	r2, r0, r6, lsl #13
			if (dstate & DSTATE_RXAC) {
    24c0:	00510001 	subseq	r0, r1, r1
    24c4:	00000000 	andeq	r0, r0, r0
				rx_int_enable ();
    24c8:	bc000000 	stclt	0, cr0, [r0], {-0}
			release;
    24cc:	d0000026 	andle	r0, r0, r6, lsr #32
			} else if (dstate & DSTATE_RFON) {
    24d0:	01000026 	tsteq	r0, r6, lsr #32
				delay (offdelay, DR_GOOF);
    24d4:	26d05500 	ldrbcs	r5, [r0], r0, lsl #10
    24d8:	26d60000 	ldrbcs	r0, [r6], r0
    24dc:	00020000 	andeq	r0, r2, r0
		if (bckf_timer) {
    24e0:	00000070 	andeq	r0, r0, r0, ror r0
			wait (qevent, DR_LOOP);
    24e4:	00000000 	andeq	r0, r0, r0
    24e8:	26860000 	strcs	r0, [r6], r0
    24ec:	268f0000 	strcs	r0, [pc], r0
			delay (bckf_timer, DR_LOOP);
    24f0:	00010000 	andeq	r0, r1, r0
    24f4:	00268f53 	eoreq	r8, r6, r3, asr pc
			if (dstate & DSTATE_RXAC)
    24f8:	0026f200 	eoreq	pc, r6, r0, lsl #4
    24fc:	5b000100 	blpl	2904 <__pi_vfparse+0x7c>
		rf_on ();
    2500:	00002724 	andeq	r2, r0, r4, lsr #14
		rx_de ();
    2504:	00002728 	andeq	r2, r0, r8, lsr #14
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2508:	005b0001 	subseq	r0, fp, r1
		RF_cmdPropTx . status = 0;
    250c:	00000000 	andeq	r0, r0, r0
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2510:	90000000 	andls	r0, r0, r0
		issue_cmd ((lword)&cmd_cs);
    2514:	94000026 	strls	r0, [r0], #-38	; 0xffffffda
		if (dstate & DSTATE_IRST)
    2518:	01000026 	tsteq	r0, r6, lsr #32
    251c:	269a5000 	ldrcs	r5, [sl], r0
    2520:	26c00000 	strbcs	r0, [r0], r0
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2524:	00010000 	andeq	r0, r1, r0
    2528:	0026c050 	eoreq	ip, r6, r0, asr r0
			delay (1, DR_XMIT);
    252c:	0026c300 	eoreq	ip, r6, r0, lsl #6
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2530:	53000100 	movwpl	r0, #256	; 0x100
    2534:	00002724 	andeq	r2, r0, r4, lsr #14
    2538:	00002728 	andeq	r2, r0, r8, lsr #14
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    253c:	00500001 	subseq	r0, r0, r1
    2540:	00000000 	andeq	r0, r0, r0
				RF_cmdPropTx . status = 0;
    2544:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2548:	3600001f 			; <UNDEFINED> instruction: 0x3600001f
				issue_cmd ((lword)&RF_cmdPropTx);
    254c:	0100001f 	tsteq	r0, pc, lsl r0
				proceed (DR_XMIT);
    2550:	1f3e5000 	svcne	0x003e5000
    2554:	1f480000 	svcne	0x00480000
			txtries++;
    2558:	00010000 	andeq	r0, r1, r0
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    255c:	001f7650 	andseq	r7, pc, r0, asr r6	; <UNPREDICTABLE>
    2560:	001f8800 	andseq	r8, pc, r0, lsl #16
    2564:	50000100 	andpl	r0, r0, r0, lsl #2
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2568:	00001f8c 	andeq	r1, r0, ip, lsl #31
		goto DR_LOOP__;
    256c:	00001f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2570:	98500001 	ldmdals	r0, {r0}^
		paylen = 0;
    2574:	9c00001f 	stcls	0, cr0, [r0], {31}
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2578:	0100001f 	tsteq	r0, pc, lsl r0
		txtries = 0;
    257c:	1f9e5000 	svcne	0x009e5000
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2580:	1fa40000 	svcne	0x00a40000
    2584:	00010000 	andeq	r0, r1, r0
    2588:	001fac50 	andseq	sl, pc, r0, asr ip	; <UNPREDICTABLE>
    258c:	001fae00 	andseq	sl, pc, r0, lsl #28
    2590:	50000100 	andpl	r0, r0, r0, lsl #2
		    tcvphy_top (physid) == NULL)
    2594:	00001fb4 			; <UNDEFINED> instruction: 0x00001fb4
    2598:	00001fb9 			; <UNDEFINED> instruction: 0x00001fb9
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    259c:	c8500001 	ldmdagt	r0, {r0}^
    25a0:	ce00001f 	mcrgt	0, 0, r0, cr0, cr15, {0}
			rf_off ();
    25a4:	0100001f 	tsteq	r0, pc, lsl r0
endthread
    25a8:	1fe45000 	svcne	0x00e45000
    25ac:	1fe80000 	svcne	0x00e80000
    25b0:	00010000 	andeq	r0, r1, r0
    25b4:	00200450 	eoreq	r0, r0, r0, asr r4
    25b8:	00200800 	eoreq	r0, r0, r0, lsl #16
    25bc:	50000100 	andpl	r0, r0, r0, lsl #2
    25c0:	0000200a 	andeq	r2, r0, sl
    25c4:	0000205c 	andeq	r2, r0, ip, asr r0
    25c8:	00500001 	subseq	r0, r0, r1
    25cc:	00000000 	andeq	r0, r0, r0
    25d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    25d4:	4800001f 	stmdami	r0, {r0, r1, r2, r3, r4}
    25d8:	0100001f 	tsteq	r0, pc, lsl r0
    25dc:	1f765100 	svcne	0x00765100
    25e0:	1f880000 	svcne	0x00880000
    25e4:	00010000 	andeq	r0, r1, r0
void RFCCPE0IntHandler (void) {
    25e8:	001f8c51 	andseq	r8, pc, r1, asr ip	; <UNPREDICTABLE>
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    25ec:	001f9000 	andseq	r9, pc, r0
		_BIS (dstate, DSTATE_IRST);
    25f0:	51000100 	mrspl	r0, (UNDEF: 16)
    25f4:	00001f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    25f8:	00001f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    25fc:	98540001 	ldmdals	r4, {r0}^
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2600:	a600001f 			; <UNDEFINED> instruction: 0xa600001f
    2604:	0100001f 	tsteq	r0, pc, lsl r0
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2608:	1fa65100 	svcne	0x00a65100
	p_trigger (drvprcs, qevent);
    260c:	1fac0000 	svcne	0x00ac0000
    2610:	00010000 	andeq	r0, r1, r0
    2614:	001fac54 	andseq	sl, pc, r4, asr ip	; <UNPREDICTABLE>
    2618:	001fb100 	andseq	fp, pc, r0, lsl #2
    261c:	51000100 	mrspl	r0, (UNDEF: 16)
    2620:	00001fb1 			; <UNDEFINED> instruction: 0x00001fb1
    2624:	00001fb4 			; <UNDEFINED> instruction: 0x00001fb4
    2628:	b4540001 	ldrblt	r0, [r4], #-1
    262c:	b900001f 	stmdblt	r0, {r0, r1, r2, r3, r4}
    2630:	0100001f 	tsteq	r0, pc, lsl r0
	RISE_N_SHINE;
    2634:	1fb95100 	svcne	0x00b95100
    2638:	1fc80000 	svcne	0x00c80000
}
    263c:	00010000 	andeq	r0, r1, r0
    2640:	001fc854 	andseq	ip, pc, r4, asr r8	; <UNPREDICTABLE>
    2644:	001fca00 	andseq	ip, pc, r0, lsl #20
    2648:	51000100 	mrspl	r0, (UNDEF: 16)
    264c:	00001fca 	andeq	r1, r0, sl, asr #31
    2650:	00001fcc 	andeq	r1, r0, ip, asr #31
void phys_cc1350 (int phy, int mbs) {
    2654:	cc540001 	mrrcgt	0, 0, r0, r4, cr1
	if (rbuffl != 0)
    2658:	d400001f 	strle	r0, [r0], #-31	; 0xffffffe1
    265c:	0100001f 	tsteq	r0, pc, lsl r0
		syserror (ETOOMANY, "cc13");
    2660:	1fd45100 	svcne	0x00d45100
		syserror (EREQPAR, "cc13 mb");
    2664:	1fe40000 	svcne	0x00e40000
	if (mbs == 0)
    2668:	00010000 	andeq	r0, r1, r0
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    266c:	001fe454 	andseq	lr, pc, r4, asr r4	; <UNPREDICTABLE>
		syserror (EREQPAR, "cc13 mb");
    2670:	00205e00 	eoreq	r5, r0, r0, lsl #28
    2674:	51000100 	mrspl	r0, (UNDEF: 16)
	i = 0;
    2678:	0000205e 	andeq	r2, r0, lr, asr r0
	rbuffl = (byte) mbs;
    267c:	00002098 	muleq	r0, r8, r0
		db->config.type = 0;	// General (data in structure)
    2680:	00540001 	subseq	r0, r4, r1
	rbuffl = (byte) mbs;
    2684:	00000000 	andeq	r0, r0, r0
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2688:	3c000000 	stccc	0, cr0, [r0], {-0}
    268c:	3e00001f 	mcrcc	0, 0, r0, cr0, cr15, {0}
		if (db == NULL)
    2690:	0100001f 	tsteq	r0, pc, lsl r0
			syserror (EMALLOC, "cc13");
    2694:	1f4a5000 	svcne	0x004a5000
    2698:	1f740000 	svcne	0x00740000
    269c:	00010000 	andeq	r0, r1, r0
		db->status = DATA_ENTRY_PENDING;
    26a0:	001f9050 	andseq	r9, pc, r0, asr r0	; <UNPREDICTABLE>
		if (i)
    26a4:	001f9800 	andseq	r9, pc, r0, lsl #16
			da->pNextEntry = (byte*) db;
    26a8:	50000100 	andpl	r0, r0, r0, lsl #2
		db->length = rbuffl + 2;
    26ac:	00001fd4 	ldrdeq	r1, [r0], -r4
    26b0:	00001fe4 	andeq	r1, r0, r4, ror #31
		db->config.type = 0;	// General (data in structure)
    26b4:	ee500001 	cdp	0, 5, cr0, cr0, cr1, {0}
		db->length = rbuffl + 2;
    26b8:	0400001f 	streq	r0, [r0], #-31	; 0xffffffe1
	db->pNextEntry = (byte*) re;
    26bc:	01000020 	tsteq	r0, r0, lsr #32
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    26c0:	20085000 	andcs	r5, r8, r0
    26c4:	200a0000 	andcs	r0, sl, r0
	if (rbuffs == NULL)
    26c8:	00010000 	andeq	r0, r1, r0
	rbuffs->pCurrEntry = (byte*) re;
    26cc:	00000050 	andeq	r0, r0, r0, asr r0
	rbuffs->pLastEntry = NULL;
    26d0:	00000000 	andeq	r0, r0, r0
    26d4:	001f5e00 	andseq	r5, pc, r0, lsl #28
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26d8:	001f6800 	andseq	r6, pc, r0, lsl #16
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    26dc:	53000100 	movwpl	r0, #256	; 0x100
	...
	rbuffl -= 2;
    26e8:	00002408 	andeq	r2, r0, r8, lsl #8
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26ec:	0000241c 	andeq	r2, r0, ip, lsl r4
	rbuffl -= 2;
    26f0:	80500001 	subshi	r0, r0, r1
	physid = phy;
    26f4:	98000025 	stmdals	r0, {r0, r2, r5}
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26f8:	01000025 	tsteq	r0, r5, lsr #32
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26fc:	25a85000 	strcs	r5, [r8, #0]!
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2700:	25af0000 	strcs	r0, [pc, #0]!	; 2708 <phys_cc1350+0xb4>
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2704:	00010000 	andeq	r0, r1, r0
    2708:	00000050 	andeq	r0, r0, r0, asr r0
	utimer_add (&bckf_timer);
    270c:	00000000 	andeq	r0, r0, r0
	drvprcs = runthread (cc1350_driver);
    2710:	00248e00 	eoreq	r8, r4, r0, lsl #28
    2714:	00249400 	eoreq	r9, r4, r0, lsl #8
    2718:	52000100 	andpl	r0, r0, #0, 2
	if (drvprcs == 0)
    271c:	00002494 	muleq	r0, r4, r4
		syserror (ERESOURCE, "cc13");
    2720:	00002497 	muleq	r0, r7, r4
    2724:	00720002 	rsbseq	r0, r2, r2
	...
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2730:	0000261c 	andeq	r2, r0, ip, lsl r6
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2734:	00002626 	andeq	r2, r0, r6, lsr #12
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2738:	00530001 	subseq	r0, r3, r1
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    273c:	00000000 	andeq	r0, r0, r0
    2740:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    2744:	c2000023 	andgt	r0, r0, #35	; 0x23
    2748:	01000023 	tsteq	r0, r3, lsr #32
    274c:	23c25400 	biccs	r5, r2, #0, 8
    2750:	23ca0000 	biccs	r0, sl, #0
    2754:	00020000 	andeq	r0, r2, r0
    2758:	23ca0074 	biccs	r0, sl, #116	; 0x74
    275c:	23d40000 	bicscs	r0, r4, #0
	plugch ();
    2760:	00010000 	andeq	r0, r1, r0
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2764:	0023d454 	eoreq	sp, r3, r4, asr r4
    2768:	0023d900 	eoreq	sp, r3, r0, lsl #18
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    276c:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2770:	0023ea00 	eoreq	lr, r3, r0, lsl #20
    2774:	0023ee00 	eoreq	lr, r3, r0, lsl #28
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2778:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
	...
}
    2784:	0023a600 	eoreq	sl, r3, r0, lsl #12
    2788:	0023bd00 	eoreq	fp, r3, r0, lsl #26
    278c:	52000100 	andpl	r0, r0, #0, 2
	...
    2798:	0000237e 	andeq	r2, r0, lr, ror r3
    279c:	000023de 	ldrdeq	r2, [r0], -lr
    27a0:	ea550001 	b	15427ac <__ccfg+0x1522804>
    27a4:	ee000023 	cdp	0, 0, cr0, cr0, cr3, {1}
    27a8:	01000023 	tsteq	r0, r3, lsr #32
    27ac:	00005500 	andeq	r5, r0, r0, lsl #10
    27b0:	00000000 	andeq	r0, r0, r0
    27b4:	20980000 	addscs	r0, r8, r0
    27b8:	209e0000 	addscs	r0, lr, r0
    27bc:	00010000 	andeq	r0, r1, r0
    27c0:	00209e50 	eoreq	r9, r0, r0, asr lr
    27c4:	0020d000 	eoreq	sp, r0, r0
    27c8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    27d4:	000020a6 	andeq	r2, r0, r6, lsr #1
    27d8:	000020b0 	strheq	r2, [r0], -r0
    27dc:	b6520001 	ldrblt	r0, [r2], -r1
    27e0:	c1000020 	tstgt	r0, r0, lsr #32
    27e4:	01000020 	tsteq	r0, r0, lsr #32
    27e8:	20c65200 	sbccs	r5, r6, r0, lsl #4
    27ec:	20cb0000 	sbccs	r0, fp, r0
    27f0:	00010000 	andeq	r0, r1, r0
    27f4:	0020ce52 	eoreq	ip, r0, r2, asr lr
    27f8:	0020e000 	eoreq	lr, r0, r0
    27fc:	52000100 	andpl	r0, r0, #0, 2
	...
    2808:	000020ae 	andeq	r2, r0, lr, lsr #1
    280c:	000020b0 	strheq	r2, [r0], -r0
    2810:	00540001 	subseq	r0, r4, r1
    2814:	00000000 	andeq	r0, r0, r0
    2818:	64000000 	strvs	r0, [r0], #-0
    281c:	6e000021 	cdpvs	0, 0, cr0, cr0, cr1, {1}
    2820:	01000021 	tsteq	r0, r1, lsr #32
    2824:	216e5000 	cmncs	lr, r0
    2828:	21940000 	orrscs	r0, r4, r0
    282c:	00010000 	andeq	r0, r1, r0
    2830:	00000054 	andeq	r0, r0, r4, asr r0
    2834:	00000000 	andeq	r0, r0, r0
    2838:	00216400 	eoreq	r6, r1, r0, lsl #8
    283c:	00216e00 	eoreq	r6, r1, r0, lsl #28
    2840:	51000100 	mrspl	r0, (UNDEF: 16)
    2844:	0000216e 	andeq	r2, r0, lr, ror #2
    2848:	00002194 	muleq	r0, r4, r1
    284c:	00550001 	subseq	r0, r5, r1
    2850:	00000000 	andeq	r0, r0, r0
    2854:	5c000000 	stcpl	0, cr0, [r0], {-0}
    2858:	64000022 	strvs	r0, [r0], #-34	; 0xffffffde
    285c:	01000022 	tsteq	r0, r2, lsr #32
    2860:	00005200 	andeq	r5, r0, r0, lsl #4
    2864:	00000000 	andeq	r0, r0, r0
		if (res && (d < n))
    2868:	222e0000 	eorcs	r0, lr, #0
    286c:	225c0000 	subscs	r0, ip, #0
    2870:	00010000 	andeq	r0, r1, r0
    2874:	00226053 	eoreq	r6, r2, r3, asr r0
			res [d] = (char) c;
    2878:	00226400 	eoreq	r6, r2, r0, lsl #8
		d++;
    287c:	53000100 	movwpl	r0, #256	; 0x100
	...
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2888:	00002234 	andeq	r2, r0, r4, lsr r2
    288c:	00002264 	andeq	r2, r0, r4, ror #4
    2890:	00580001 	subseq	r0, r8, r1
				enci (10000);
    2894:	00000000 	andeq	r0, r0, r0
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2898:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    289c:	64000022 	strvs	r0, [r0], #-34	; 0xffffffde
	d = 0;
    28a0:	01000022 	tsteq	r0, r2, lsr #32
		c = *fm++;
    28a4:	00005c00 	andeq	r5, r0, r0, lsl #24
		if (c == '\\') {
    28a8:	00000000 	andeq	r0, r0, r0
			if ((c = *fm++) == '\0') {
    28ac:	223c0000 	eorscs	r0, ip, #0
    28b0:	22860000 	addcs	r0, r6, #0
				outc ('\\');
    28b4:	00010000 	andeq	r0, r1, r0
			if ((c = *fm++) == '\0') {
    28b8:	00000056 	andeq	r0, r0, r6, asr r0
				outc ('\\');
    28bc:	00000000 	andeq	r0, r0, r0
    28c0:	00223c00 	eoreq	r3, r2, r0, lsl #24
			outc (c);
    28c4:	00225600 	eoreq	r5, r2, r0, lsl #12
    28c8:	51000100 	mrspl	r0, (UNDEF: 16)
				outc (val);
    28cc:	00002256 	andeq	r2, r0, r6, asr r2
				val = (word) va_arg (ap, aword);
    28d0:	00002260 	andeq	r2, r0, r0, ror #4
		if (c == '%') {
    28d4:	18730002 	ldmdane	r3!, {r1}^
    28d8:	00002260 	andeq	r2, r0, r0, ror #4
			c = *fm++;
    28dc:	00002262 	andeq	r2, r0, r2, ror #4
    28e0:	18710002 	ldmdane	r1!, {r1}^
	...
			switch (c) {
    28ec:	0000225c 	andeq	r2, r0, ip, asr r2
    28f0:	00002286 	andeq	r2, r0, r6, lsl #5
    28f4:	00550001 	subseq	r0, r5, r1
    28f8:	00000000 	andeq	r0, r0, r0
    28fc:	1c000000 	stcne	0, cr0, [r0], {-0}
				outc ('%');
    2900:	1e000028 	cdpne	0, 0, cr0, cr0, cr8, {1}
    2904:	01000028 	tsteq	r0, r8, lsr #32
    2908:	00005000 	andeq	r5, r0, r0
				outc (c);
    290c:	00000000 	andeq	r0, r0, r0
			outc (c);
    2910:	28180000 	ldmdacs	r8, {}	; <UNPREDICTABLE>
			if (c == '\0')
    2914:	281a0000 	ldmdacs	sl, {}	; <UNPREDICTABLE>
				return d;
    2918:	00010000 	andeq	r0, r1, r0
}
    291c:	00000050 	andeq	r0, r0, r0, asr r0
    2920:	00000000 	andeq	r0, r0, r0
			switch (c) {
    2924:	00281000 	eoreq	r1, r8, r0
    2928:	00281200 	eoreq	r1, r8, r0, lsl #4
    292c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
						[ (val >> i) & 0xf ]);
    2938:	000027ec 	andeq	r2, r0, ip, ror #15
    293c:	000027f6 	strdeq	r2, [r0], -r6
    2940:	f8500001 			; <UNDEFINED> instruction: 0xf8500001
					outc (__pi_hex_enc_table
    2944:	06000027 	streq	r0, [r0], -r7, lsr #32
    2948:	01000028 	tsteq	r0, r8, lsr #32
					if (i == 0)
    294c:	00005000 	andeq	r5, r0, r0
    2950:	00000000 	andeq	r0, r0, r0
				for (i = 12; ; i -= 4) {
    2954:	27ec0000 	strbcs	r0, [ip, r0]!
				val = (word) va_arg (ap, aword);
    2958:	27ee0000 	strbcs	r0, [lr, r0]!
				if (c == 'd' && (val & 0x8000) != 0) {
    295c:	00010000 	andeq	r0, r1, r0
				val = (word) va_arg (ap, aword);
    2960:	00000051 	andeq	r0, r0, r1, asr r0
				if (c == 'd' && (val & 0x8000) != 0) {
    2964:	00000000 	andeq	r0, r0, r0
    2968:	0027ec00 	eoreq	lr, r7, r0, lsl #24
					outc ('-');
    296c:	0027f000 	eoreq	pc, r7, r0
    2970:	52000100 	andpl	r0, r0, #0, 2
	...
				for (i = 12; ; i -= 4) {
    297c:	000027ec 	andeq	r2, r0, ip, ror #15
				enci (10000);
    2980:	00002804 	andeq	r2, r0, r4, lsl #16
    2984:	00530001 	subseq	r0, r3, r1
    2988:	00000000 	andeq	r0, r0, r0
    298c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    2990:	d4000027 	strle	r0, [r0], #-39	; 0xffffffd9
    2994:	01000027 	tsteq	r0, r7, lsr #32
    2998:	27d45000 	ldrbcs	r5, [r4, r0]
    299c:	27ec0000 	strbcs	r0, [ip, r0]!
    29a0:	00010000 	andeq	r0, r1, r0
    29a4:	00000053 	andeq	r0, r0, r3, asr r0
    29a8:	00000000 	andeq	r0, r0, r0
    29ac:	00282000 	eoreq	r2, r8, r0
    29b0:	00282e00 	eoreq	r2, r8, r0, lsl #28
    29b4:	50000100 	andpl	r0, r0, r0, lsl #2
    29b8:	0000282e 	andeq	r2, r0, lr, lsr #16
    29bc:	00002868 	andeq	r2, r0, r8, ror #16
    29c0:	00540001 	subseq	r0, r4, r1
    29c4:	00000000 	andeq	r0, r0, r0
				if (c == 'd' || c == 'u') {
    29c8:	20000000 	andcs	r0, r0, r0
    29cc:	31000028 	tstcc	r0, r8, lsr #32
					if (c == 'd' &&
    29d0:	01000028 	tsteq	r0, r8, lsr #32
					val = va_arg (ap, lword);
    29d4:	28315100 	ldmdacs	r1!, {r8, ip, lr}
					fm++;
    29d8:	28680000 	stmdacs	r8!, {}^	; <UNPREDICTABLE>
					if (c == 'd' &&
    29dc:	00010000 	andeq	r0, r1, r0
    29e0:	00000055 	andeq	r0, r0, r5, asr r0
						outc ('-');
    29e4:	00000000 	andeq	r0, r0, r0
    29e8:	00282000 	eoreq	r2, r8, r0
						val = (~val) + 1;
    29ec:	00283100 	eoreq	r3, r8, r0, lsl #2
				enci (10000);
    29f0:	52000100 	andpl	r0, r0, #0, 2
					enci (1000000000UL);
    29f4:	00002840 	andeq	r2, r0, r0, asr #16
    29f8:	00002846 	andeq	r2, r0, r6, asr #16
    29fc:	00520001 	subseq	r0, r2, r1
    2a00:	00000000 	andeq	r0, r0, r0
    2a04:	ac000000 	stcge	0, cr0, [r0], {-0}
    2a08:	c300002a 	movwgt	r0, #42	; 0x2a
    2a0c:	0100002a 	tsteq	r0, sl, lsr #32
    2a10:	2ac35000 	bcs	ff0d6a18 <_estack+0xdf0d1a18>
    2a14:	2aca0000 	bcs	ff282a1c <_estack+0xdf27da1c>
    2a18:	00010000 	andeq	r0, r1, r0
    2a1c:	002aca54 	eoreq	ip, sl, r4, asr sl
    2a20:	002acc00 	eoreq	ip, sl, r0, lsl #24
    2a24:	50000100 	andpl	r0, r0, r0, lsl #2
    2a28:	00002acc 	andeq	r2, r0, ip, asr #21
    2a2c:	00002adc 	ldrdeq	r2, [r0], -ip
    2a30:	dc540001 	mrrcle	0, 0, r0, r4, cr1
    2a34:	eb00002a 	bl	2ae4 <vform+0x38>
				} else if (c == 'x') {
    2a38:	0100002a 	tsteq	r0, sl, lsr #32
					for (i = 28; ; i -= 4) {
    2a3c:	2aeb5000 	bcs	ffad6a44 <_estack+0xdfad1a44>
					val = va_arg (ap, lword);
    2a40:	2afc0000 	bcs	fff02a48 <_estack+0xdfefda48>
							[ (val >> i) & 0xf ]);
    2a44:	00010000 	andeq	r0, r1, r0
    2a48:	00000054 	andeq	r0, r0, r4, asr r0
						outc (__pi_hex_enc_table
    2a4c:	00000000 	andeq	r0, r0, r0
    2a50:	002aac00 	eoreq	sl, sl, r0, lsl #24
    2a54:	002ac000 	eoreq	ip, sl, r0
						if (i == 0)
    2a58:	51000100 	mrspl	r0, (UNDEF: 16)
    2a5c:	00002ac0 	andeq	r2, r0, r0, asr #21
					for (i = 28; ; i -= 4) {
    2a60:	00002ac3 	andeq	r2, r0, r3, asr #21
					outc ('%');
    2a64:	c3520001 	cmpgt	r2, #1
    2a68:	ca00002a 	bgt	2b18 <vscan+0x1c>
    2a6c:	0100002a 	tsteq	r0, sl, lsr #32
					outc ('l');
    2a70:	2aca5600 	bcs	ff298278 <_estack+0xdf293278>
    2a74:	2acf0000 	bcs	ff3c2a7c <_estack+0xdf3bda7c>
				val = (word) va_arg (ap, aword);
    2a78:	00010000 	andeq	r0, r1, r0
				outc (val);
    2a7c:	002acf51 	eoreq	ip, sl, r1, asr pc
    2a80:	002afc00 	eoreq	pc, sl, r0, lsl #24
				while (*st != '\0') {
    2a84:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    2a90:	00002aac 	andeq	r2, r0, ip, lsr #21
					outc (*st);
    2a94:	00002ab4 			; <UNDEFINED> instruction: 0x00002ab4
    2a98:	b8520001 	ldmdalt	r2, {r0}^
					st++;
    2a9c:	bc00002a 	stclt	0, cr0, [r0], {42}	; 0x2a
		c = *fm++;
    2aa0:	0100002a 	tsteq	r0, sl, lsr #32
    2aa4:	2ac45200 	bcs	ff1172ac <_estack+0xdf1122ac>
    2aa8:	2aca0000 	bcs	ff282ab0 <_estack+0xdf27dab0>
char *vform (char *res, const char *fm, va_list aq) {
    2aac:	00010000 	andeq	r0, r1, r0
    2ab0:	002ad657 	eoreq	sp, sl, r7, asr r6
	if (res != NULL) {
    2ab4:	002afc00 	eoreq	pc, sl, r0, lsl #24
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2ab8:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
}
    2ac4:	00002ad6 	ldrdeq	r2, [r0], -r6
    2ac8:	00002af8 	strdeq	r2, [r0], -r8
	fml = strlen (fm) + 17;
    2acc:	f8550001 			; <UNDEFINED> instruction: 0xf8550001
    2ad0:	fc00002a 	stc2	0, cr0, [r0], {42}	; 0x2a
    2ad4:	0100002a 	tsteq	r0, sl, lsr #32
	if ((res = (char*) umalloc (fml)) == NULL)
    2ad8:	00005800 	andeq	r5, r0, r0, lsl #16
    2adc:	00000000 	andeq	r0, r0, r0
    2ae0:	2af00000 	bcs	ffc02ae8 <_estack+0xdfbfdae8>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2ae4:	2af40000 	bcs	ffd02aec <_estack+0xdfcfdaec>
    2ae8:	00010000 	andeq	r0, r1, r0
    2aec:	00000050 	andeq	r0, r0, r0, asr r0
    2af0:	00000000 	andeq	r0, r0, r0
		ufree (res);
    2af4:	00288800 	eoreq	r8, r8, r0, lsl #16
		goto Again;
    2af8:	0028a200 	eoreq	sl, r8, r0, lsl #4
	if (buf == NULL || fmt == NULL)
    2afc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2b08:	00002888 	andeq	r2, r0, r8, lsl #17
    2b0c:	000028a2 	andeq	r2, r0, r2, lsr #17
		    	    case 'u': scanu (lword); break;
    2b10:	00510001 	subseq	r0, r1, r1
			while (isspace (*buf)) buf++;
    2b14:	00000000 	andeq	r0, r0, r0
    2b18:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
	while (*fmt != '\0') {
    2b1c:	a2000028 	andge	r0, r0, #40	; 0x28
		if (*fmt++ != '%')
    2b20:	01000028 	tsteq	r0, r8, lsr #32
		switch (*fmt++) {
    2b24:	28b25200 	ldmcs	r2!, {r9, ip, lr}
    2b28:	28d40000 	ldmcs	r4, {}^	; <UNPREDICTABLE>
    2b2c:	00010000 	andeq	r0, r1, r0
    2b30:	0028e255 	eoreq	lr, r8, r5, asr r2
    2b34:	002a9e00 	eoreq	r9, sl, r0, lsl #28
    2b38:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    2b44:	00002888 	andeq	r2, r0, r8, lsl #17
    2b48:	0000288c 	andeq	r2, r0, ip, lsl #17
    2b4c:	8e530001 	cdphi	0, 5, cr0, cr3, cr1, {0}
    2b50:	90000028 	andls	r0, r0, r8, lsr #32
			while (isspace (*buf)) buf++;
    2b54:	03000028 	movweq	r0, #40	; 0x28
    2b58:	04935300 	ldreq	r5, [r3], #768	; 0x300
    2b5c:	00002890 	muleq	r0, r0, r8
    2b60:	000028d0 	ldrdeq	r2, [r0], -r0
    2b64:	93540003 	cmpls	r4, #3
    2b68:	0028d004 	eoreq	sp, r8, r4
			if (*buf == '\0')
    2b6c:	00292200 	eoreq	r2, r9, r0, lsl #4
			if (*buf != ',') {
    2b70:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
			sap = va_arg (ap, char*);
    2b74:	29220493 	stmdbcs	r2!, {r0, r1, r4, r7, sl}
			nc++;
    2b78:	292e0000 	stmdbcs	lr!, {}	; <UNPREDICTABLE>
			if (*buf != ',') {
    2b7c:	00030000 	andeq	r0, r3, r0
				while (!isspace (*buf) && *buf != ',' &&
    2b80:	36049354 			; <UNDEFINED> instruction: 0x36049354
    2b84:	58000029 	stmdapl	r0, {r0, r3, r5}
    2b88:	03000029 	movweq	r0, #41	; 0x29
    2b8c:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    2b90:	0000295c 	andeq	r2, r0, ip, asr r9
    2b94:	000029d6 	ldrdeq	r2, [r0], -r6
    2b98:	93540003 	cmpls	r4, #3
			while (isspace (*buf)) buf++;
    2b9c:	0029dc04 	eoreq	sp, r9, r4, lsl #24
    2ba0:	0029f000 	eoreq	pc, r9, r0
    2ba4:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    2ba8:	2a360493 	bcs	d83dfc <__ccfg+0xd63e54>
    2bac:	2a420000 	bcs	1082bb4 <__ccfg+0x1062c0c>
			if (*buf == ',') buf++;
    2bb0:	00030000 	andeq	r0, r3, r0
    2bb4:	64049354 	strvs	r9, [r4], #-852	; 0xfffffcac
			*sap = '\0';
    2bb8:	7600002a 	strvc	r0, [r0], -sl, lsr #32
			break;
    2bbc:	0300002a 	movweq	r0, #42	; 0x2a
		    case 'd': scani (word); break;
    2bc0:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    2bc4:	00002a7a 	andeq	r2, r0, sl, ror sl
    2bc8:	00002a82 	andeq	r2, r0, r2, lsl #21
    2bcc:	93540003 	cmpls	r4, #3
    2bd0:	002a8604 	eoreq	r8, sl, r4, lsl #12
    2bd4:	002aac00 	eoreq	sl, sl, r0, lsl #24
    2bd8:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    2bdc:	00000493 	muleq	r0, r3, r4
    2be0:	00000000 	andeq	r0, r0, r0
    2be4:	28a60000 	stmiacs	r6!, {}	; <UNPREDICTABLE>
    2be8:	28b00000 	ldmcs	r0!, {}	; <UNPREDICTABLE>
    2bec:	00010000 	andeq	r0, r1, r0
    2bf0:	0028b059 	eoreq	fp, r8, r9, asr r0
    2bf4:	0028b200 	eoreq	fp, r8, r0, lsl #4
    2bf8:	72000200 	andvc	r0, r0, #0, 4
    2bfc:	0028b200 	eoreq	fp, r8, r0, lsl #4
    2c00:	0028cc00 	eoreq	ip, r8, r0, lsl #24
    2c04:	59000100 	stmdbpl	r0, {r8}
    2c08:	000028d4 	ldrdeq	r2, [r0], -r4
    2c0c:	000028e2 	andeq	r2, r0, r2, ror #17
    2c10:	e2590001 	subs	r0, r9, #1
    2c14:	10000028 	andne	r0, r0, r8, lsr #32
    2c18:	01000029 	tsteq	r0, r9, lsr #32
    2c1c:	29225800 	stmdbcs	r2!, {fp, ip, lr}
    2c20:	29320000 	ldmdbcs	r2!, {}	; <UNPREDICTABLE>
    2c24:	00010000 	andeq	r0, r1, r0
    2c28:	00293258 	eoreq	r3, r9, r8, asr r2
    2c2c:	00293a00 	eoreq	r3, r9, r0, lsl #20
		    case 'u': scanu (word); break;
    2c30:	72000200 	andvc	r0, r0, #0, 4
    2c34:	00295801 	eoreq	r5, r9, r1, lsl #16
    2c38:	00298200 	eoreq	r8, r9, r0, lsl #4
    2c3c:	58000100 	stmdapl	r0, {r8}
    2c40:	00002986 	andeq	r2, r0, r6, lsl #19
    2c44:	0000298a 	andeq	r2, r0, sl, lsl #19
    2c48:	94500001 	ldrbls	r0, [r0], #-1
    2c4c:	9e000029 	cdpls	0, 0, cr0, cr0, cr9, {1}
    2c50:	01000029 	tsteq	r0, r9, lsr #32
    2c54:	29be5000 	ldmibcs	lr!, {ip, lr}
    2c58:	29c00000 	stmibcs	r0, {}^	; <UNPREDICTABLE>
    2c5c:	00010000 	andeq	r0, r1, r0
    2c60:	0029c650 	eoreq	ip, r9, r0, asr r6
    2c64:	0029c800 	eoreq	ip, r9, r0, lsl #16
    2c68:	58000100 	stmdapl	r0, {r8}
    2c6c:	000029c8 	andeq	r2, r0, r8, asr #19
    2c70:	000029eb 	andeq	r2, r0, fp, ror #19
    2c74:	fa530001 	blx	14c2c80 <__ccfg+0x14a2cd8>
		    case 'x': scanx (word); break;
    2c78:	fe000029 	cdp2	0, 0, cr0, cr0, cr9, {1}
    2c7c:	01000029 	tsteq	r0, r9, lsr #32
    2c80:	2a085900 	bcs	219088 <__ccfg+0x1f90e0>
    2c84:	2a280000 	bcs	a02c8c <__ccfg+0x9e2ce4>
    2c88:	00010000 	andeq	r0, r1, r0
    2c8c:	002a2e59 	eoreq	r2, sl, r9, asr lr
    2c90:	002a3000 	eoreq	r3, sl, r0
    2c94:	59000100 	stmdbpl	r0, {r8}
    2c98:	00002a36 	andeq	r2, r0, r6, lsr sl
    2c9c:	00002a44 	andeq	r2, r0, r4, asr #20
    2ca0:	64530001 	ldrbvs	r0, [r3], #-1
    2ca4:	6d00002a 	stcvs	0, cr0, [r0, #-168]	; 0xffffff58
    2ca8:	0100002a 	tsteq	r0, sl, lsr #32
    2cac:	2a765300 	bcs	1d978b4 <__ccfg+0x1d7790c>
    2cb0:	2a8a0000 	bcs	fe282cb8 <_estack+0xde27dcb8>
    2cb4:	00010000 	andeq	r0, r1, r0
    2cb8:	002a9e58 	eoreq	r9, sl, r8, asr lr
    2cbc:	002aac00 	eoreq	sl, sl, r0, lsl #24
    2cc0:	59000100 	stmdbpl	r0, {r8}
	...
    2ccc:	0000293a 	andeq	r2, r0, sl, lsr r9
    2cd0:	00002958 	andeq	r2, r0, r8, asr r9
    2cd4:	00580001 	subseq	r0, r8, r1
    2cd8:	00000000 	andeq	r0, r0, r0
    2cdc:	64000000 	strvs	r0, [r0], #-0
    2ce0:	78000029 	stmdavc	r0, {r0, r3, r5}
    2ce4:	01000029 	tsteq	r0, r9, lsr #32
    2ce8:	297c5900 	ldmdbcs	ip!, {r8, fp, ip, lr}^
    2cec:	29aa0000 	stmibcs	sl!, {}	; <UNPREDICTABLE>
			switch (*fmt++) {
    2cf0:	00010000 	andeq	r0, r1, r0
    2cf4:	0029b259 	eoreq	fp, r9, r9, asr r2
    2cf8:	0029c600 	eoreq	ip, r9, r0, lsl #12
    2cfc:	59000100 	stmdbpl	r0, {r8}
	...
    2d08:	00002982 	andeq	r2, r0, r2, lsl #19
		    	    case 'd': scani (lword); break;
    2d0c:	000029b4 			; <UNDEFINED> instruction: 0x000029b4
    2d10:	b4580001 	ldrblt	r0, [r8], #-1
    2d14:	c0000029 	andgt	r0, r0, r9, lsr #32
    2d18:	01000029 	tsteq	r0, r9, lsr #32
    2d1c:	29c05300 	stmibcs	r0, {r8, r9, ip, lr}^
    2d20:	29c60000 	stmibcs	r6, {}^	; <UNPREDICTABLE>
    2d24:	00010000 	andeq	r0, r1, r0
    2d28:	00000058 	andeq	r0, r0, r8, asr r0
    2d2c:	00000000 	andeq	r0, r0, r0
    2d30:	0029f000 	eoreq	pc, r9, r0
    2d34:	002a3600 	eoreq	r3, sl, r0, lsl #12
    2d38:	5a000100 	bpl	3140 <NOROM_OSCClockSourceGet+0x28>
	...
    2d44:	000029f6 	strdeq	r2, [r0], -r6
    2d48:	00002a20 	andeq	r2, r0, r0, lsr #20
    2d4c:	20580001 	subscs	r0, r8, r1
    2d50:	3000002a 	andcc	r0, r0, sl, lsr #32
    2d54:	0100002a 	tsteq	r0, sl, lsr #32
    2d58:	2a305300 	bcs	c17960 <__ccfg+0xbf79b8>
    2d5c:	2a360000 	bcs	d82d64 <__ccfg+0xd62dbc>
    2d60:	00010000 	andeq	r0, r1, r0
    2d64:	00000058 	andeq	r0, r0, r8, asr r0
		    	    case 'x': scanx (lword); break;
    2d68:	00000000 	andeq	r0, r0, r0
    2d6c:	002a4400 	eoreq	r4, sl, r0, lsl #8
    2d70:	002a6400 	eoreq	r6, sl, r0, lsl #8
    2d74:	58000100 	stmdapl	r0, {r8}
	...
    2d80:	00002a76 	andeq	r2, r0, r6, ror sl
    2d84:	00002a7a 	andeq	r2, r0, sl, ror sl
    2d88:	00740002 	rsbseq	r0, r4, r2
    2d8c:	00002a7a 	andeq	r2, r0, sl, ror sl
    2d90:	00002a82 	andeq	r2, r0, r2, lsl #21
    2d94:	7c740002 	ldclvc	0, cr0, [r4], #-8
	...
    2da0:	00002a8e 	andeq	r2, r0, lr, lsl #21
    2da4:	00002a9c 	muleq	r0, ip, sl
    2da8:	00580001 	subseq	r0, r8, r1
    2dac:	00000000 	andeq	r0, r0, r0
    2db0:	fc000000 	stc2	0, cr0, [r0], {-0}
    2db4:	1800002a 	stmdane	r0, {r1, r3, r5}
    2db8:	0100002b 	tsteq	r0, fp, lsr #32
    2dbc:	2b565000 	blcs	1596dc4 <__ccfg+0x1576e1c>
    2dc0:	2b680000 	blcs	1a02dc8 <__ccfg+0x19e2e20>
    2dc4:	00010000 	andeq	r0, r1, r0
    2dc8:	002b6853 	eoreq	r6, fp, r3, asr r8
    2dcc:	002b7c00 	eoreq	r7, fp, r0, lsl #24
    2dd0:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2dd4:	00002b7e 	andeq	r2, r0, lr, ror fp
		    	    case 'd': scani (lword); break;
    2dd8:	00002b9a 	muleq	r0, sl, fp
    2ddc:	ac560001 	mrrcge	0, 0, r0, r6, cr1
    2de0:	b800002b 	stmdalt	r0, {r0, r1, r3, r5}
    2de4:	0100002b 	tsteq	r0, fp, lsr #32
    2de8:	2bb85600 	blcs	fee185f0 <_estack+0xdee135f0>
    2dec:	2bbe0000 	blcs	fef82df4 <_estack+0xdef7ddf4>
    2df0:	00010000 	andeq	r0, r1, r0
		    	    case 'u': scanu (lword); break;
    2df4:	002bc453 	eoreq	ip, fp, r3, asr r4
    2df8:	002bc800 	eoreq	ip, fp, r0, lsl #16
    2dfc:	53000100 	movwpl	r0, #256	; 0x100
    2e00:	00002bc8 	andeq	r2, r0, r8, asr #23
    2e04:	00002bd8 	ldrdeq	r2, [r0], -r8
    2e08:	d85e0001 	ldmdale	lr, {r0}^
    2e0c:	ee00002b 	cdp	0, 0, cr0, cr0, cr11, {1}
    2e10:	0100002b 	tsteq	r0, fp, lsr #32
    2e14:	2bee5300 	blcs	ffb97a1c <_estack+0xdfb92a1c>
    2e18:	2bf60000 	blcs	ffd82e20 <_estack+0xdfd7de20>
    2e1c:	00010000 	andeq	r0, r1, r0
    2e20:	002bfc5e 	eoreq	pc, fp, lr, asr ip	; <UNPREDICTABLE>
    2e24:	002c1800 	eoreq	r1, ip, r0, lsl #16
    2e28:	53000100 	movwpl	r0, #256	; 0x100
    2e2c:	00002c18 	andeq	r2, r0, r8, lsl ip
    2e30:	00002c1e 	andeq	r2, r0, lr, lsl ip
    2e34:	1e5e0001 	cdpne	0, 5, cr0, cr14, cr1, {0}
    2e38:	2000002c 	andcs	r0, r0, ip, lsr #32
		    	    case 'x': scanx (lword); break;
    2e3c:	0100002c 	tsteq	r0, ip, lsr #32
    2e40:	2c2c5300 	stccs	3, cr5, [ip], #-0
			if ((c = *buf++) == '\0')
    2e44:	2c2e0000 	stccs	0, cr0, [lr], #-0
    2e48:	00010000 	andeq	r0, r1, r0
    2e4c:	002c2e5e 	eoreq	r2, ip, lr, asr lr
			sap = va_arg (ap, char*);
    2e50:	002c4200 	eoreq	r4, ip, r0, lsl #4
			*sap = c;
    2e54:	53000100 	movwpl	r0, #256	; 0x100
			while (isspace (*buf)) buf++;
    2e58:	00002c42 	andeq	r2, r0, r2, asr #24
    2e5c:	00002c52 	andeq	r2, r0, r2, asr ip
    2e60:	52560001 	subspl	r0, r6, #1
    2e64:	6600002c 	strvs	r0, [r0], -ip, lsr #32
						*sap++ = *buf++;
    2e68:	0100002c 	tsteq	r0, ip, lsr #32
			while (isspace (*buf)) buf++;
    2e6c:	2c745300 	ldclcs	3, cr5, [r4], #-0
    2e70:	2c760000 	ldclcs	0, cr0, [r6], #-0
    2e74:	00010000 	andeq	r0, r1, r0
		return 0;
    2e78:	002c7656 	eoreq	r7, ip, r6, asr r6
    2e7c:	002c8e00 	eoreq	r8, ip, r0, lsl #28
		    case 'x': scanx (word); break;
    2e80:	53000100 	movwpl	r0, #256	; 0x100
    2e84:	00002c8e 	andeq	r2, r0, lr, lsl #25
		    	    case 'x': scanx (lword); break;
    2e88:	00002ca8 	andeq	r2, r0, r8, lsr #25
    2e8c:	ae560001 	cdpge	0, 5, cr0, cr6, cr1, {0}
strand (__outserial, const char*)
    2e90:	d000002c 	andle	r0, r0, ip, lsr #32
    2e94:	0100002c 	tsteq	r0, ip, lsr #32
    2e98:	2cd05300 	ldclcs	3, cr5, [r0], {0}
    2e9c:	2ce20000 	stclcs	0, cr0, [r2]
endstrand
    2ea0:	00010000 	andeq	r0, r1, r0
    2ea4:	002d0a56 	eoreq	r0, sp, r6, asr sl
	ptr = data;
    2ea8:	002d0e00 	eoreq	r0, sp, r0, lsl #28
    2eac:	53000100 	movwpl	r0, #256	; 0x100
	if (*ptr)
    2eb0:	00002d0e 	andeq	r2, r0, lr, lsl #26
		len = strlen (ptr);
    2eb4:	00002d1e 	andeq	r2, r0, lr, lsl sp
    2eb8:	1e580001 	cdpne	0, 5, cr0, cr8, cr1, {0}
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    2ebc:	2e00002d 	cdpcs	0, 0, cr0, cr0, cr13, {1}
    2ec0:	0100002d 	tsteq	r0, sp, lsr #32
    2ec4:	2d2e5300 	stccs	3, cr5, [lr, #-0]
    2ec8:	2d380000 	ldccs	0, cr0, [r8, #-0]
    2ecc:	00010000 	andeq	r0, r1, r0
	len -= quant;
    2ed0:	002d3e58 	eoreq	r3, sp, r8, asr lr
    2ed4:	002d6000 	eoreq	r6, sp, r0
    2ed8:	53000100 	movwpl	r0, #256	; 0x100
	if (len == 0) {
    2edc:	00002d66 	andeq	r2, r0, r6, ror #26
		ufree (data);
    2ee0:	00002d76 	andeq	r2, r0, r6, ror sp
		finish;
    2ee4:	76530001 	ldrbvc	r0, [r3], -r1
    2ee8:	9000002d 	andls	r0, r0, sp, lsr #32
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    2eec:	0100002d 	tsteq	r0, sp, lsr #32
    2ef0:	2d965600 	ldccs	6, cr5, [r6]
    2ef4:	2db60000 	ldccs	0, cr0, [r6]
    2ef8:	00010000 	andeq	r0, r1, r0
    2efc:	002db653 	eoreq	fp, sp, r3, asr r6
strand (__inserial, address)
    2f00:	002dc800 	eoreq	ip, sp, r0, lsl #16
    2f04:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2f08:	00002ddc 	ldrdeq	r2, [r0], -ip
    2f0c:	00002de0 	andeq	r2, r0, r0, ror #27
    2f10:	e0580001 	subs	r0, r8, r1
	if (__inpline != NULL)
    2f14:	e400002d 	str	r0, [r0], #-45	; 0xffffffd3
    2f18:	0100002d 	tsteq	r0, sp, lsr #32
		finish;
    2f1c:	2dee5300 	stclcs	3, cr5, [lr]
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    2f20:	2df40000 	ldclcs	0, cr0, [r4]
    2f24:	00010000 	andeq	r0, r1, r0
    2f28:	002df458 	eoreq	pc, sp, r8, asr r4	; <UNPREDICTABLE>
    2f2c:	002e0a00 	eoreq	r0, lr, r0, lsl #20
		umwait (IM_INIT);
    2f30:	53000100 	movwpl	r0, #256	; 0x100
		release;
    2f34:	00002e0a 	andeq	r2, r0, sl, lsl #28
	savedata (data);
    2f38:	00002e1a 	andeq	r2, r0, sl, lsl lr
	len = MAX_LINE_LENGTH;
    2f3c:	1a560001 	bne	1582f48 <__ccfg+0x1562fa0>
	io (IM_READ, __cport, READ, ptr, 1);
    2f40:	3000002e 	andcc	r0, r0, lr, lsr #32
    2f44:	0100002e 	tsteq	r0, lr, lsr #32
    2f48:	2e3a5300 	cdpcs	3, 3, cr5, cr10, cr0, {0}
    2f4c:	2e3c0000 	cdpcs	0, 3, cr0, cr12, cr0, {0}
	if (ptr == (char*) data) { // new line
    2f50:	00010000 	andeq	r0, r1, r0
    2f54:	002e3c56 	eoreq	r3, lr, r6, asr ip
		if (*ptr == '\0') { // bin cmd
    2f58:	002e4400 	eoreq	r4, lr, r0, lsl #8
			proceed (IM_BIN);
    2f5c:	53000100 	movwpl	r0, #256	; 0x100
    2f60:	00002e48 	andeq	r2, r0, r8, asr #28
		if (*ptr < 0x20)
    2f64:	00002e58 	andeq	r2, r0, r8, asr lr
    2f68:	58530001 	ldmdapl	r3, {r0}^
			proceed (IM_READ);
    2f6c:	6600002e 	strvs	r0, [r0], -lr, lsr #32
    2f70:	0100002e 	tsteq	r0, lr, lsr #32
	if (*ptr == '\n' || *ptr == '\r') {
    2f74:	2e665600 	cdpcs	6, 6, cr5, cr6, cr0, {0}
    2f78:	2e6c0000 	cdpcs	0, 6, cr0, cr12, cr0, {0}
    2f7c:	00010000 	andeq	r0, r1, r0
		*ptr = '\0';
    2f80:	002e6c58 	eoreq	r6, lr, r8, asr ip
		__inpline = (char*)data;
    2f84:	002e7800 	eoreq	r7, lr, r0, lsl #16
		finish;
    2f88:	56000100 	strpl	r0, [r0], -r0, lsl #2
	if (len) {
    2f8c:	00002e78 	andeq	r2, r0, r8, ror lr
		ptr++;
    2f90:	00002e80 	andeq	r2, r0, r0, lsl #29
    2f94:	80500001 	subshi	r0, r0, r1
		len--;
    2f98:	8e00002e 	cdphi	0, 0, cr0, cr0, cr14, {1}
	proceed (IM_READ);
    2f9c:	0100002e 	tsteq	r0, lr, lsr #32
	io (IM_BIN, __cport, READ, ptr, 1);
    2fa0:	00005300 	andeq	r5, r0, r0, lsl #6
    2fa4:	00000000 	andeq	r0, r0, r0
    2fa8:	2afc0000 	bcs	fff02fb0 <_estack+0xdfefdfb0>
    2fac:	2b1a0000 	blcs	682fb4 <__ccfg+0x66300c>
    2fb0:	00010000 	andeq	r0, r1, r0
	len -= 2;
    2fb4:	002b1a51 	eoreq	r1, fp, r1, asr sl
	if (len > *ptr + 1) // 1 for 0x04
    2fb8:	002b2000 	eoreq	r2, fp, r0
    2fbc:	56000100 	strpl	r0, [r0], -r0, lsl #2
		len = *ptr + 1;
    2fc0:	00002b20 	andeq	r2, r0, r0, lsr #22
    2fc4:	00002b3e 	andeq	r2, r0, lr, lsr fp
	ptr++;
    2fc8:	44510001 	ldrbmi	r0, [r1], #-1
	quant = io (IM_BINL, __cport, READ, ptr, len);
    2fcc:	8e00002b 	cdphi	0, 0, cr0, cr0, cr11, {1}
    2fd0:	0100002e 	tsteq	r0, lr, lsr #32
    2fd4:	00005100 	andeq	r5, r0, r0, lsl #2
    2fd8:	00000000 	andeq	r0, r0, r0
    2fdc:	2afc0000 	bcs	fff02fe4 <_estack+0xdfefdfe4>
    2fe0:	2afc0000 	bcs	fff02fe8 <_estack+0xdfefdfe8>
	len -= quant;
    2fe4:	00010000 	andeq	r0, r1, r0
		__inpline = (char*)data;
    2fe8:	002afc52 	eoreq	pc, sl, r2, asr ip	; <UNPREDICTABLE>
		finish;
    2fec:	002b1800 	eoreq	r1, fp, r0, lsl #16
	ptr += quant;
    2ff0:	52000300 	andpl	r0, r0, #0, 6
    2ff4:	2bbe0493 	blcs	fef84248 <_estack+0xdef7f248>
endstrand
    2ff8:	2bf20000 	blcs	ffc83000 <_estack+0xdfc7e000>
    2ffc:	00010000 	andeq	r0, r1, r0
	proceed (IM_BINL);
    3000:	002c1852 	eoreq	r1, ip, r2, asr r8
endstrand
    3004:	002c1e00 	eoreq	r1, ip, r0, lsl #28
    3008:	52000100 	andpl	r0, r0, #0, 2
    300c:	00002c2e 	andeq	r2, r0, lr, lsr #24
    3010:	00002c48 	andeq	r2, r0, r8, asr #24
    3014:	76520001 	ldrbvc	r0, [r2], -r1
    3018:	9e00002c 	cdpls	0, 0, cr0, cr0, cr12, {1}
    301c:	0100002c 	tsteq	r0, ip, lsr #32
    3020:	2cf05200 	lfmcs	f5, 2, [r0]
    3024:	2d320000 	ldccs	0, cr0, [r2, #-0]
    3028:	00010000 	andeq	r0, r1, r0
    302c:	002d6052 	eoreq	r6, sp, r2, asr r0
    3030:	002d8600 	eoreq	r8, sp, r0, lsl #12
    3034:	52000100 	andpl	r0, r0, #0, 2
    3038:	00002df4 	strdeq	r2, [r0], -r4
    303c:	00002e10 	andeq	r2, r0, r0, lsl lr
    3040:	3c520001 	mrrccc	0, 0, r0, r2, cr1
    3044:	5200002e 	andpl	r0, r0, #46	; 0x2e
    3048:	0100002e 	tsteq	r0, lr, lsr #32
    304c:	2e585200 	cdpcs	2, 5, cr5, cr8, cr0, {0}
    3050:	2e660000 	cdpcs	0, 6, cr0, cr6, cr0, {0}
    3054:	00010000 	andeq	r0, r1, r0
    3058:	002e7852 	eoreq	r7, lr, r2, asr r8
    305c:	002e8000 	eoreq	r8, lr, r0
    3060:	52000300 	andpl	r0, r0, #0, 6
    3064:	00000493 	muleq	r0, r3, r4
    3068:	00000000 	andeq	r0, r0, r0
    306c:	2b7a0000 	blcs	1e83074 <__ccfg+0x1e630cc>
    3070:	2bbe0000 	blcs	fef83078 <_estack+0xdef7e078>
    3074:	00010000 	andeq	r0, r1, r0
    3078:	002bf454 	eoreq	pc, fp, r4, asr r4	; <UNPREDICTABLE>
    307c:	002c1800 	eoreq	r1, ip, r0, lsl #16
    3080:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    3084:	00002c1e 	andeq	r2, r0, lr, lsl ip
    3088:	00002c2e 	andeq	r2, r0, lr, lsr #24
    308c:	4a540001 	bmi	1503098 <__ccfg+0x14e30f0>
    3090:	7600002c 	strvc	r0, [r0], -ip, lsr #32
    3094:	0100002c 	tsteq	r0, ip, lsr #32
    3098:	2ca05400 	cfstrscs	mvf5, [r0]
    309c:	2cf00000 	ldclcs	0, cr0, [r0]
    30a0:	00010000 	andeq	r0, r1, r0
    30a4:	002d3454 	eoreq	r3, sp, r4, asr r4
    30a8:	002d6000 	eoreq	r6, sp, r0
    30ac:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    30b0:	00002d88 	andeq	r2, r0, r8, lsl #27
    30b4:	00002dd6 	ldrdeq	r2, [r0], -r6
    30b8:	e0540001 	subs	r0, r4, r1
    30bc:	f400002d 	vst4.8	{d0-d3}, [r0 :128]!
    30c0:	0100002d 	tsteq	r0, sp, lsr #32
    30c4:	2e125400 	cfmulscs	mvf5, mvf2, mvf0
    30c8:	2e3c0000 	cdpcs	0, 3, cr0, cr12, cr0, {0}
    30cc:	00010000 	andeq	r0, r1, r0
    30d0:	002e5454 	eoreq	r5, lr, r4, asr r4
    30d4:	002e5800 	eoreq	r5, lr, r0, lsl #16
    30d8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    30dc:	00002e66 	andeq	r2, r0, r6, ror #28
    30e0:	00002e78 	andeq	r2, r0, r8, ror lr
    30e4:	80540001 	subshi	r0, r4, r1
    30e8:	8e00002e 	cdphi	0, 0, cr0, cr0, cr14, {1}
    30ec:	0100002e 	tsteq	r0, lr, lsr #32
    30f0:	00005400 	andeq	r5, r0, r0, lsl #8
    30f4:	00000000 	andeq	r0, r0, r0
    30f8:	2bee0000 	blcs	ffb83100 <_estack+0xdfb7e100>
    30fc:	2c180000 	ldccs	0, cr0, [r8], {-0}
    3100:	00010000 	andeq	r0, r1, r0
    3104:	002c1e58 	eoreq	r1, ip, r8, asr lr
    3108:	002c2e00 	eoreq	r2, ip, r0, lsl #28
    310c:	58000100 	stmdapl	r0, {r8}
	...
    3118:	00002cd0 	ldrdeq	r2, [r0], -r0
    311c:	00002ce2 	andeq	r2, r0, r2, ror #25
    3120:	e2590001 	subs	r0, r9, #1
    3124:	ea00002c 	b	31dc <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x20>
    3128:	0100002c 	tsteq	r0, ip, lsr #32
    312c:	00005000 	andeq	r5, r0, r0
    3130:	00000000 	andeq	r0, r0, r0
    3134:	2d2e0000 	stccs	0, cr0, [lr, #-0]
    3138:	2d580000 	ldclcs	0, cr0, [r8, #-0]
    313c:	00010000 	andeq	r0, r1, r0
    3140:	002de050 	eoreq	lr, sp, r0, asr r0
    3144:	002df400 	eoreq	pc, sp, r0, lsl #8
    3148:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3154:	00002db6 			; <UNDEFINED> instruction: 0x00002db6
    3158:	00002dc8 	andeq	r2, r0, r8, asr #27
    315c:	c8590001 	ldmdagt	r9, {r0}^
    3160:	d000002d 	andle	r0, r0, sp, lsr #32
    3164:	0100002d 	tsteq	r0, sp, lsr #32
    3168:	00005000 	andeq	r5, r0, r0
    316c:	00000000 	andeq	r0, r0, r0
    3170:	2e480000 	cdpcs	0, 4, cr0, cr8, cr0, {0}
    3174:	2e580000 	cdpcs	0, 5, cr0, cr8, cr0, {0}
    3178:	00010000 	andeq	r0, r1, r0
    317c:	00000050 	andeq	r0, r0, r0, asr r0
    3180:	00000000 	andeq	r0, r0, r0
    3184:	002b7e00 	eoreq	r7, fp, r0, lsl #28
    3188:	002b9a00 	eoreq	r9, fp, r0, lsl #20
    318c:	5e000100 	adfpls	f0, f0, f0
    3190:	00002e6a 	andeq	r2, r0, sl, ror #28
    3194:	00002e6c 	andeq	r2, r0, ip, ror #28
    3198:	005e0001 	subseq	r0, lr, r1
    319c:	00000000 	andeq	r0, r0, r0
    31a0:	90000000 	andls	r0, r0, r0
    31a4:	a700002e 	strge	r0, [r0, -lr, lsr #32]
    31a8:	0100002e 	tsteq	r0, lr, lsr #32
    31ac:	2ea85000 	cdpcs	0, 10, cr5, cr8, cr0, {0}
    31b0:	2eb40000 	cdpcs	0, 11, cr0, cr4, cr0, {0}
    31b4:	00010000 	andeq	r0, r1, r0
    31b8:	002eec50 	eoreq	lr, lr, r0, asr ip
    31bc:	002f0000 	eoreq	r0, pc, r0
    31c0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    31cc:	00002e98 	muleq	r0, r8, lr
    31d0:	00002ea4 	andeq	r2, r0, r4, lsr #29
    31d4:	a4550001 	ldrbge	r0, [r5], #-1
    31d8:	a700002e 	strge	r0, [r0, -lr, lsr #32]
    31dc:	0200002e 	andeq	r0, r0, #46	; 0x2e
    31e0:	a8087300 	stmdage	r8, {r8, r9, ip, sp, lr}
    31e4:	0000002e 	andeq	r0, r0, lr, lsr #32
    31e8:	0100002f 	tsteq	r0, pc, lsr #32
    31ec:	00005500 	andeq	r5, r0, r0, lsl #10
    31f0:	00000000 	andeq	r0, r0, r0
    31f4:	2ece0000 	cdpcs	0, 12, cr0, cr14, cr0, {0}
    31f8:	2ee00000 	cdpcs	0, 14, cr0, cr0, cr0, {0}
    31fc:	00010000 	andeq	r0, r1, r0
    3200:	00000050 	andeq	r0, r0, r0, asr r0
    3204:	00000000 	andeq	r0, r0, r0
    3208:	002f0000 	eoreq	r0, pc, r0
    320c:	002f1c00 	eoreq	r1, pc, r0, lsl #24
    3210:	50000100 	andpl	r0, r0, r0, lsl #2
    3214:	00003002 	andeq	r3, r0, r2
    3218:	0000300b 	andeq	r3, r0, fp
    321c:	00500001 	subseq	r0, r0, r1
    3220:	00000000 	andeq	r0, r0, r0
    3224:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3228:	2a00002f 	bcs	32ec <NOROM_RFCRfTrimRead+0x88>
    322c:	0100002f 	tsteq	r0, pc, lsr #32
    3230:	2f2a5400 	svccs	0x002a5400
    3234:	2f310000 	svccs	0x00310000
    3238:	00010000 	andeq	r0, r1, r0
    323c:	002f3150 	eoreq	r3, pc, r0, asr r1	; <UNPREDICTABLE>
    3240:	002f3600 	eoreq	r3, pc, r0, lsl #12
    3244:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    3248:	00002f36 	andeq	r2, r0, r6, lsr pc
    324c:	00002f40 	andeq	r2, r0, r0, asr #30
    3250:	40500001 	subsmi	r0, r0, r1
    3254:	fe00002f 	cdp2	0, 0, cr0, cr0, cr15, {1}
    3258:	0100002f 	tsteq	r0, pc, lsr #32
    325c:	30025400 	andcc	r5, r2, r0, lsl #8
    3260:	30080000 	andcc	r0, r8, r0
    3264:	00010000 	andeq	r0, r1, r0
    3268:	00000054 	andeq	r0, r0, r4, asr r0
    326c:	00000000 	andeq	r0, r0, r0
    3270:	002fe200 	eoreq	lr, pc, r0, lsl #4
    3274:	002fe400 	eoreq	lr, pc, r0, lsl #8
    3278:	50000100 	andpl	r0, r0, r0, lsl #2
    327c:	00002fe4 	andeq	r2, r0, r4, ror #31
    3280:	00002ffe 	strdeq	r2, [r0], -lr
    3284:	00550001 	subseq	r0, r5, r1
    3288:	00000000 	andeq	r0, r0, r0
    328c:	1c000000 	stcne	0, cr0, [r0], {-0}
    3290:	23000030 	movwcs	r0, #48	; 0x30
    3294:	01000030 	tsteq	r0, r0, lsr r0
    3298:	30235000 	eorcc	r5, r3, r0
    329c:	303a0000 	eorscc	r0, sl, r0
    32a0:	00010000 	andeq	r0, r1, r0
    32a4:	00303a56 	eorseq	r3, r0, r6, asr sl
    32a8:	00303e00 	eorseq	r3, r0, r0, lsl #28
    32ac:	f3000400 	vshl.u8	d0, d0, d0
    32b0:	3e9f5001 	cdpcc	0, 9, cr5, cr15, cr1, {0}
    32b4:	40000030 	andmi	r0, r0, r0, lsr r0
    32b8:	01000030 	tsteq	r0, r0, lsr r0
    32bc:	30405600 	subcc	r5, r0, r0, lsl #12
    32c0:	30440000 	subcc	r0, r4, r0
    32c4:	00040000 	andeq	r0, r4, r0
    32c8:	9f5001f3 	svcls	0x005001f3
	...
    32d4:	00003026 	andeq	r3, r0, r6, lsr #32
    32d8:	0000302f 	andeq	r3, r0, pc, lsr #32
    32dc:	00700005 	rsbseq	r0, r0, r5
    32e0:	2f9f2930 	svccs	0x009f2930
    32e4:	3a000030 	bcc	33ac <NOROM_RFCRfTrimRead+0x148>
    32e8:	05000030 	streq	r0, [r0, #-48]	; 0xffffffd0
    32ec:	30007500 	andcc	r7, r0, r0, lsl #10
    32f0:	303e9f29 	eorscc	r9, lr, r9, lsr #30
    32f4:	30400000 	subcc	r0, r0, r0
    32f8:	00050000 	andeq	r0, r5, r0
    32fc:	29300075 	ldmdbcs	r0!, {r0, r2, r4, r5, r6}
    3300:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3310:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    331c:	00560001 	subseq	r0, r6, r1
    3320:	00000000 	andeq	r0, r0, r0
    3324:	04000000 	streq	r0, [r0], #-0
    3328:	5001f300 	andpl	pc, r1, r0, lsl #6
    332c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3330:	00000000 	andeq	r0, r0, r0
    3334:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    3340:	01f30004 	mvnseq	r0, r4
    3344:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3354:	00010000 	andeq	r0, r1, r0
    3358:	00000051 	andeq	r0, r0, r1, asr r0
    335c:	00000000 	andeq	r0, r0, r0
    3360:	f3000400 	vshl.u8	d0, d0, d0
    3364:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    3374:	05000000 	streq	r0, [r0, #-0]
    3378:	30007000 	andcc	r7, r0, r0
    337c:	00009f29 	andeq	r9, r0, r9, lsr #30
    3380:	00000000 	andeq	r0, r0, r0
    3384:	00050000 	andeq	r0, r5, r0
    3388:	29300075 	ldmdbcs	r0!, {r0, r2, r4, r5, r6}
    338c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3390:	00000000 	andeq	r0, r0, r0
    3394:	75000500 	strvc	r0, [r0, #-1280]	; 0xfffffb00
    3398:	9f293000 	svcls	0x00293000
	...
    33a4:	00003048 	andeq	r3, r0, r8, asr #32
    33a8:	0000305a 	andeq	r3, r0, sl, asr r0
    33ac:	00700007 	rsbseq	r0, r0, r7
    33b0:	263f243f 			; <UNDEFINED> instruction: 0x263f243f
    33b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    33b8:	00000000 	andeq	r0, r0, r0
    33bc:	00305000 	eorseq	r5, r0, r0
    33c0:	00305800 	eorseq	r5, r0, r0, lsl #16
    33c4:	72000d00 	andvc	r0, r0, #0, 26
    33c8:	00717a80 	rsbseq	r7, r1, r0, lsl #21
    33cc:	26482448 	strbcs	r2, [r8], -r8, asr #8
    33d0:	9f26341e 	svcls	0x0026341e
    33d4:	00003058 	andeq	r3, r0, r8, asr r0
    33d8:	00003074 	andeq	r3, r0, r4, ror r0
    33dc:	0071000c 	rsbseq	r0, r1, ip
    33e0:	26482448 	strbcs	r2, [r8], -r8, asr #8
    33e4:	341e0072 	ldrcc	r0, [lr], #-114	; 0xffffff8e
    33e8:	00009f26 	andeq	r9, r0, r6, lsr #30
    33ec:	00000000 	andeq	r0, r0, r0
    33f0:	307a0000 	rsbscc	r0, sl, r0
    33f4:	30840000 	addcc	r0, r4, r0
    33f8:	00010000 	andeq	r0, r1, r0
    33fc:	00000053 	andeq	r0, r0, r3, asr r0
    3400:	00000000 	andeq	r0, r0, r0
    3404:	00307c00 	eorseq	r7, r0, r0, lsl #24
    3408:	00308800 	eorseq	r8, r0, r0, lsl #16
    340c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3418:	000030bc 	strheq	r3, [r0], -ip
    341c:	000030d4 	ldrdeq	r3, [r0], -r4
    3420:	d4500001 	ldrble	r0, [r0], #-1
    3424:	0e000030 	mcreq	0, 0, r0, cr0, cr0, {1}
    3428:	01000031 	tsteq	r0, r1, lsr r0
    342c:	310e5500 	tstcc	lr, r0, lsl #10
    3430:	31180000 	tstcc	r8, r0
    3434:	00040000 	andeq	r0, r4, r0
    3438:	9f5001f3 	svcls	0x005001f3
	...
    3444:	000030bc 	strheq	r3, [r0], -ip
    3448:	000030c2 	andeq	r3, r0, r2, asr #1
    344c:	c2510001 	subsgt	r0, r1, #1
    3450:	fa000030 	blx	3518 <TrimAfterColdResetWakeupFromShutDown+0x10>
    3454:	01000030 	tsteq	r0, r0, lsr r0
    3458:	30fa5400 	rscscc	r5, sl, r0, lsl #8
    345c:	31180000 	tstcc	r8, r0
    3460:	00040000 	andeq	r0, r4, r0
    3464:	9f5101f3 	svcls	0x005101f3
	...
    3470:	000030f6 	strdeq	r3, [r0], -r6
    3474:	0000310a 	andeq	r3, r0, sl, lsl #2
    3478:	00550001 	subseq	r0, r5, r1
    347c:	00000000 	andeq	r0, r0, r0
    3480:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    3484:	fa000030 	blx	354c <TrimAfterColdResetWakeupFromShutDown+0x44>
    3488:	01000030 	tsteq	r0, r0, lsr r0
    348c:	30fa5400 	rscscc	r5, sl, r0, lsl #8
    3490:	310a0000 	mrscc	r0, (UNDEF: 10)
    3494:	00040000 	andeq	r0, r4, r0
    3498:	9f5101f3 	svcls	0x005101f3
	...
    34a4:	00003118 	andeq	r3, r0, r8, lsl r1
    34a8:	00003136 	andeq	r3, r0, r6, lsr r1
    34ac:	36500001 	ldrbcc	r0, [r0], -r1
    34b0:	44000031 	strmi	r0, [r0], #-49	; 0xffffffcf
    34b4:	04000031 	streq	r0, [r0], #-49	; 0xffffffcf
    34b8:	5001f300 	andpl	pc, r1, r0, lsl #6
    34bc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    34cc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    34d8:	00560001 	subseq	r0, r6, r1
    34dc:	00000000 	andeq	r0, r0, r0
    34e0:	04000000 	streq	r0, [r0], #-0
    34e4:	5001f300 	andpl	pc, r1, r0, lsl #6
    34e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    34f8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    350c:	00700007 	rsbseq	r0, r0, r7
    3510:	191c0073 	ldmdbne	ip, {r0, r1, r4, r5, r6}
    3514:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3518:	00000000 	andeq	r0, r0, r0
    351c:	70000400 	andvc	r0, r0, r0, lsl #8
    3520:	009f1900 	addseq	r1, pc, r0, lsl #18
	...
    3530:	04000000 	streq	r0, [r0], #-0
    3534:	07d00a00 	ldrbeq	r0, [r0, r0, lsl #20]
    3538:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    353c:	00000000 	andeq	r0, r0, r0
    3540:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    354c:	00720005 	rsbseq	r0, r2, r5
    3550:	009f2540 	addseq	r2, pc, r0, asr #10
    3554:	00000000 	andeq	r0, r0, r0
    3558:	01000000 	mrseq	r0, (UNDEF: 0)
    355c:	00005000 	andeq	r5, r0, r0
    3560:	00000000 	andeq	r0, r0, r0
    3564:	00040000 	andeq	r0, r4, r0
    3568:	9f07d00a 	svcls	0x0007d00a
	...
    3574:	00500001 	subseq	r0, r0, r1
    3578:	00000000 	andeq	r0, r0, r0
    357c:	96000000 	strls	r0, [r0], -r0
    3580:	a2000031 	andge	r0, r0, #49	; 0x31
    3584:	01000031 	tsteq	r0, r1, lsr r0
    3588:	00005000 	andeq	r5, r0, r0
    358c:	00000000 	andeq	r0, r0, r0
    3590:	31960000 	orrscc	r0, r6, r0
    3594:	31a20000 			; <UNDEFINED> instruction: 0x31a20000
    3598:	00010000 	andeq	r0, r1, r0
    359c:	00000053 	andeq	r0, r0, r3, asr r0
	...
    35ac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    35b8:	1b700003 	blne	1c035cc <__ccfg+0x1be3624>
    35bc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    35c0:	00000000 	andeq	r0, r0, r0
    35c4:	f3000400 	vshl.u8	d0, d0, d0
    35c8:	009f5001 	addseq	r5, pc, r1
	...
    35d8:	07000000 	streq	r0, [r0, -r0]
    35dc:	48007400 	stmdami	r0, {sl, ip, sp, lr}
    35e0:	9f264824 	svcls	0x00264824
	...
    35f4:	00500001 	subseq	r0, r0, r1
    35f8:	00000000 	andeq	r0, r0, r0
    35fc:	06000000 	streq	r0, [r0], -r0
    3600:	5001f300 	andpl	pc, r1, r0, lsl #6
    3604:	009f1c4b 	addseq	r1, pc, fp, asr #24
	...
    3614:	01000000 	mrseq	r0, (UNDEF: 0)
    3618:	00005500 	andeq	r5, r0, r0, lsl #10
    361c:	00000000 	andeq	r0, r0, r0
    3620:	000c0000 	andeq	r0, ip, r0
    3624:	4b5001f3 	blmi	1403df8 <__ccfg+0x13e3e50>
    3628:	5001f31c 	andpl	pc, r1, ip, lsl r3	; <UNPREDICTABLE>
    362c:	9f1e1c4b 	svcls	0x001e1c4b
	...
    3640:	0071002c 	rsbseq	r0, r1, ip, lsr #32
    3644:	00712640 	rsbseq	r2, r1, r0, asr #12
    3648:	26482440 	strbcs	r2, [r8], -r0, asr #8
    364c:	331e0070 	tstcc	lr, #112	; 0x70
    3650:	00712226 	rsbseq	r2, r1, r6, lsr #4
    3654:	26482448 	strbcs	r2, [r8], -r8, asr #8
    3658:	3a1e0075 	bcc	783834 <__ccfg+0x76388c>
    365c:	00742226 	rsbseq	r2, r4, r6, lsr #4
    3660:	26482448 	strbcs	r2, [r8], -r8, asr #8
    3664:	701e0075 	andsvc	r0, lr, r5, ror r0
    3668:	26421e00 	strbcs	r1, [r2], -r0, lsl #28
    366c:	00009f22 	andeq	r9, r0, r2, lsr #30
    3670:	00000000 	andeq	r0, r0, r0
    3674:	00320000 	eorseq	r0, r2, r0
    3678:	26400071 			; <UNDEFINED> instruction: 0x26400071
    367c:	4b5001f3 	blmi	1403e50 <__ccfg+0x13e3ea8>
    3680:	4000711c 	andmi	r7, r0, ip, lsl r1
    3684:	1e264824 	cdpne	8, 2, cr4, cr6, cr4, {1}
    3688:	71222633 			; <UNDEFINED> instruction: 0x71222633
    368c:	48244800 	stmdami	r4!, {fp, lr}
    3690:	1e007526 	cfsh32ne	mvfx7, mvfx0, #22
    3694:	f322263a 	vmin.u32	d2, d2, d26
    3698:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    369c:	24480074 	strbcs	r0, [r8], #-116	; 0xffffff8c
    36a0:	751e2648 	ldrvc	r2, [lr, #-1608]	; 0xfffff9b8
    36a4:	26421e00 	strbcs	r1, [r2], -r0, lsl #28
    36a8:	00009f22 	andeq	r9, r0, r2, lsr #30
	...
    36b8:	00010000 	andeq	r0, r1, r0
    36bc:	00000050 	andeq	r0, r0, r0, asr r0
    36c0:	00000000 	andeq	r0, r0, r0
    36c4:	f3000400 	vshl.u8	d0, d0, d0
    36c8:	009f5001 	addseq	r5, pc, r1
	...
    36d8:	0b000000 	bleq	36e0 <NOROM_SetupSetVddrLevel+0x60>
    36dc:	70007000 	andvc	r7, r0, r0
    36e0:	26461e00 	strbcs	r1, [r6], -r0, lsl #28
    36e4:	9f1c0070 	svcls	0x001c0070
	...
    36f0:	00500001 	subseq	r0, r0, r1
    36f4:	00000000 	andeq	r0, r0, r0
    36f8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    36fc:	5001f300 	andpl	pc, r1, r0, lsl #6
    3700:	1e5001f3 	mrcne	1, 2, r0, cr0, cr3, {7}
    3704:	01f32646 	mvnseq	r2, r6, asr #12
    3708:	009f1c50 	addseq	r1, pc, r0, asr ip	; <UNPREDICTABLE>
	...
    3718:	01000000 	mrseq	r0, (UNDEF: 0)
    371c:	00005500 	andeq	r5, r0, r0, lsl #10
    3720:	00000000 	andeq	r0, r0, r0
    3724:	00050000 	andeq	r0, r5, r0
    3728:	0910380c 	ldmdbeq	r0, {r2, r3, fp, ip, sp}
    372c:	00000040 	andeq	r0, r0, r0, asr #32
	...
    373c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    3750:	00700006 	rsbseq	r0, r0, r6
    3754:	9f1c0076 	svcls	0x001c0076
	...
    3760:	00500001 	subseq	r0, r0, r1
	...
    3770:	0a000000 	beq	3778 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x7c>
    3774:	08007000 	stmdaeq	r0, {ip, sp, lr}
    3778:	1a2444fc 	bne	914b70 <__ccfg+0x8f4bc8>
    377c:	009f2546 	addseq	r2, pc, r6, asr #10
	...
    378c:	01000000 	mrseq	r0, (UNDEF: 0)
    3790:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    37a0:	00090000 	andeq	r0, r9, r0
    37a4:	000a0073 	andeq	r0, sl, r3, ror r0
    37a8:	253a1afc 	ldrcs	r1, [sl, #-2812]!	; 0xfffff504
    37ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    37bc:	73000a00 	movwvc	r0, #2560	; 0xa00
    37c0:	40fc0800 	rscsmi	r0, ip, r0, lsl #16
    37c4:	25421a24 	strbcs	r1, [r2, #-2596]	; 0xfffff5dc
    37c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    37cc:	00000000 	andeq	r0, r0, r0
    37d0:	0031f000 	eorseq	pc, r1, r0
    37d4:	00320e00 	eorseq	r0, r2, r0, lsl #28
    37d8:	50000100 	andpl	r0, r0, r0, lsl #2
    37dc:	0000320e 	andeq	r3, r0, lr, lsl #4
    37e0:	00003218 	andeq	r3, r0, r8, lsl r2
    37e4:	01f30004 	mvnseq	r0, r4
    37e8:	00009f50 	andeq	r9, r0, r0, asr pc
    37ec:	00000000 	andeq	r0, r0, r0
    37f0:	327a0000 	rsbscc	r0, sl, #0
    37f4:	327c0000 	rsbscc	r0, ip, #0
    37f8:	00010000 	andeq	r0, r1, r0
    37fc:	00327e53 	eorseq	r7, r2, r3, asr lr
    3800:	00328000 	eorseq	r8, r2, r0
    3804:	53000100 	movwpl	r0, #256	; 0x100
	...
    3810:	000033b4 			; <UNDEFINED> instruction: 0x000033b4
    3814:	000033ea 	andeq	r3, r0, sl, ror #7
    3818:	ea500001 	b	1403824 <__ccfg+0x13e387c>
    381c:	cc000033 	stcgt	0, cr0, [r0], {51}	; 0x33
    3820:	04000034 	streq	r0, [r0], #-52	; 0xffffffcc
    3824:	5001f300 	andpl	pc, r1, r0, lsl #6
    3828:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    382c:	00000000 	andeq	r0, r0, r0
    3830:	0033d200 	eorseq	sp, r3, r0, lsl #4
    3834:	0033d600 	eorseq	sp, r3, r0, lsl #12
    3838:	51000100 	mrspl	r0, (UNDEF: 16)
    383c:	000033d6 	ldrdeq	r3, [r0], -r6
    3840:	000033dc 	ldrdeq	r3, [r0], -ip
    3844:	9f320002 	svcls	0x00320002
    3848:	000033e0 	andeq	r3, r0, r0, ror #7
    384c:	0000346a 	andeq	r3, r0, sl, ror #8
    3850:	6a510001 	bvs	144385c <__ccfg+0x14238b4>
    3854:	6e000034 	mcrvs	0, 0, r0, cr0, cr4, {1}
    3858:	03000034 	movweq	r0, #52	; 0x34
    385c:	9f057100 	svcls	0x00057100
    3860:	00003490 	muleq	r0, r0, r4
    3864:	000034a6 	andeq	r3, r0, r6, lsr #9
    3868:	a6510001 	ldrbge	r0, [r1], -r1
    386c:	a8000034 	stmdage	r0, {r2, r4, r5}
    3870:	03000034 	movweq	r0, #52	; 0x34
    3874:	9f057100 	svcls	0x00057100
	...
    3880:	00003436 	andeq	r3, r0, r6, lsr r4
    3884:	0000343c 	andeq	r3, r0, ip, lsr r4
    3888:	44530001 	ldrbmi	r0, [r3], #-1
    388c:	46000034 			; <UNDEFINED> instruction: 0x46000034
    3890:	01000034 	tsteq	r0, r4, lsr r0
    3894:	345a5300 	ldrbcc	r5, [sl], #-768	; 0xfffffd00
    3898:	345c0000 	ldrbcc	r0, [ip], #-0
    389c:	00010000 	andeq	r0, r1, r0
    38a0:	00346453 	eorseq	r6, r4, r3, asr r4
    38a4:	00347000 	eorseq	r7, r4, r0
    38a8:	53000100 	movwpl	r0, #256	; 0x100
    38ac:	00003490 	muleq	r0, r0, r4
    38b0:	0000349c 	muleq	r0, ip, r4
    38b4:	a0530001 	subsge	r0, r3, r1
    38b8:	a8000034 	stmdage	r0, {r2, r4, r5}
    38bc:	01000034 	tsteq	r0, r4, lsr r0
    38c0:	00005300 	andeq	r5, r0, r0, lsl #6
    38c4:	00000000 	andeq	r0, r0, r0
    38c8:	33d40000 	bicscc	r0, r4, #0
    38cc:	33d60000 	bicscc	r0, r6, #0
    38d0:	00010000 	andeq	r0, r1, r0
    38d4:	0033d853 	eorseq	sp, r3, r3, asr r8
    38d8:	0033dc00 	eorseq	sp, r3, r0, lsl #24
    38dc:	53000100 	movwpl	r0, #256	; 0x100
    38e0:	000033e2 	andeq	r3, r0, r2, ror #7
    38e4:	000033ea 	andeq	r3, r0, sl, ror #7
    38e8:	ea530001 	b	14c38f4 <__ccfg+0x14a394c>
    38ec:	00000033 	andeq	r0, r0, r3, lsr r0
    38f0:	03000034 	movweq	r0, #52	; 0x34
    38f4:	9f6c7400 	svcls	0x006c7400
    38f8:	00003404 	andeq	r3, r0, r4, lsl #8
    38fc:	0000340a 	andeq	r3, r0, sl, lsl #8
    3900:	6c740003 	ldclvs	0, cr0, [r4], #-12
    3904:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3908:	00000000 	andeq	r0, r0, r0
    390c:	0033fa00 	eorseq	pc, r3, r0, lsl #20
    3910:	00347e00 	eorseq	r7, r4, r0, lsl #28
    3914:	52000100 	andpl	r0, r0, #0, 2
    3918:	0000347e 	andeq	r3, r0, lr, ror r4
    391c:	00003484 	andeq	r3, r0, r4, lsl #9
    3920:	00700002 	rsbseq	r0, r0, r2
    3924:	00003484 	andeq	r3, r0, r4, lsl #9
    3928:	00003488 	andeq	r3, r0, r8, lsl #9
    392c:	88520001 	ldmdahi	r2, {r0}^
    3930:	8e000034 	mcrhi	0, 0, r0, cr0, cr4, {1}
    3934:	02000034 	andeq	r0, r0, #52	; 0x34
    3938:	90007000 	andls	r7, r0, r0
    393c:	98000034 	stmdals	r0, {r2, r4, r5}
    3940:	01000034 	tsteq	r0, r4, lsr r0
    3944:	34985200 	ldrcc	r5, [r8], #512	; 0x200
    3948:	349e0000 	ldrcc	r0, [lr], #0
    394c:	00020000 	andeq	r0, r2, r0
    3950:	34a00070 	strtcc	r0, [r0], #112	; 0x70
    3954:	34a80000 	strtcc	r0, [r8], #0
    3958:	00010000 	andeq	r0, r1, r0
    395c:	00000052 	andeq	r0, r0, r2, asr r0
    3960:	00000000 	andeq	r0, r0, r0
    3964:	0033b400 	eorseq	fp, r3, r0, lsl #8
    3968:	00340000 	eorseq	r0, r4, r0
    396c:	30000200 	andcc	r0, r0, r0, lsl #4
    3970:	0034009f 	mlaseq	r4, pc, r0, r0	; <UNPREDICTABLE>
    3974:	00340400 	eorseq	r0, r4, r0, lsl #8
    3978:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    397c:	00003404 	andeq	r3, r0, r4, lsl #8
    3980:	0000340a 	andeq	r3, r0, sl, lsl #8
    3984:	9f300002 	svcls	0x00300002
    3988:	0000340a 	andeq	r3, r0, sl, lsl #8
    398c:	000034a8 	andeq	r3, r0, r8, lsr #9
    3990:	00540001 	subseq	r0, r4, r1
    3994:	00000000 	andeq	r0, r0, r0
    3998:	cc000000 	stcgt	0, cr0, [r0], {-0}
    399c:	d6000034 			; <UNDEFINED> instruction: 0xd6000034
    39a0:	01000034 	tsteq	r0, r4, lsr r0
    39a4:	34d65000 	ldrbcc	r5, [r6], #0
    39a8:	34e80000 	strbtcc	r0, [r8], #0
    39ac:	00030000 	andeq	r0, r3, r0
    39b0:	e89f7075 	ldm	pc, {r0, r2, r4, r5, r6, ip, sp, lr}	; <UNPREDICTABLE>
    39b4:	ec000034 	stc	0, cr0, [r0], {52}	; 0x34
    39b8:	04000034 	streq	r0, [r0], #-52	; 0xffffffcc
    39bc:	5001f300 	andpl	pc, r1, r0, lsl #6
    39c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    39d0:	30000200 	andcc	r0, r0, r0, lsl #4
    39d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    39d8:	00000000 	andeq	r0, r0, r0
    39dc:	31000200 	mrscc	r0, R8_usr
    39e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    39e4:	00000000 	andeq	r0, r0, r0
    39e8:	32000200 	andcc	r0, r0, #0, 4
    39ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    39f0:	00000000 	andeq	r0, r0, r0
    39f4:	33000200 	movwcc	r0, #512	; 0x200
    39f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    39fc:	00000000 	andeq	r0, r0, r0
    3a00:	34000200 	strcc	r0, [r0], #-512	; 0xfffffe00
    3a04:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3a08:	00000000 	andeq	r0, r0, r0
    3a0c:	35000200 	strcc	r0, [r0, #-512]	; 0xfffffe00
    3a10:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3a14:	00000000 	andeq	r0, r0, r0
    3a18:	36000200 	strcc	r0, [r0], -r0, lsl #4
    3a1c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3a20:	00000000 	andeq	r0, r0, r0
    3a24:	37000200 	strcc	r0, [r0, -r0, lsl #4]
    3a28:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3a2c:	00000000 	andeq	r0, r0, r0
    3a30:	38000200 	stmdacc	r0, {r9}
    3a34:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3a38:	00000000 	andeq	r0, r0, r0
    3a3c:	39000200 	stmdbcc	r0, {r9}
    3a40:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3a44:	00000000 	andeq	r0, r0, r0
    3a48:	3a000200 	bcc	4250 <toupper+0x108>
    3a4c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3a50:	00000000 	andeq	r0, r0, r0
    3a54:	3b000200 	blcc	425c <toupper+0x114>
    3a58:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3a5c:	00000000 	andeq	r0, r0, r0
    3a60:	3c000200 	sfmcc	f0, 4, [r0], {-0}
    3a64:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3a68:	00000000 	andeq	r0, r0, r0
    3a6c:	00350800 	eorseq	r0, r5, r0, lsl #16
    3a70:	00354600 	eorseq	r4, r5, r0, lsl #12
    3a74:	50000100 	andpl	r0, r0, r0, lsl #2
    3a78:	00003546 	andeq	r3, r0, r6, asr #10
    3a7c:	000035a8 	andeq	r3, r0, r8, lsr #11
    3a80:	a8550001 	ldmdage	r5, {r0}^
    3a84:	dc000035 	stcle	0, cr0, [r0], {53}	; 0x35
    3a88:	04000035 	streq	r0, [r0], #-53	; 0xffffffcb
    3a8c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3a90:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3a94:	00000000 	andeq	r0, r0, r0
    3a98:	00354400 	eorseq	r4, r5, r0, lsl #8
    3a9c:	0035a800 	eorseq	sl, r5, r0, lsl #16
    3aa0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3aac:	0000355a 	andeq	r3, r0, sl, asr r5
    3ab0:	0000355c 	andeq	r3, r0, ip, asr r5
    3ab4:	00730007 	rsbseq	r0, r3, r7
    3ab8:	1affff0a 	bne	36e8 <NOROM_SetupSetVddrLevel+0x68>
    3abc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3ac0:	00000000 	andeq	r0, r0, r0
    3ac4:	00356a00 	eorseq	r6, r5, r0, lsl #20
    3ac8:	00358400 	eorseq	r8, r5, r0, lsl #8
    3acc:	53000100 	movwpl	r0, #256	; 0x100
	...
    3ad8:	0000356e 	andeq	r3, r0, lr, ror #10
    3adc:	0000357a 	andeq	r3, r0, sl, ror r5
    3ae0:	7a520001 	bvc	1483aec <__ccfg+0x1463b44>
    3ae4:	7e000035 	mcrvc	0, 0, r0, cr0, cr5, {1}
    3ae8:	03000035 	movweq	r0, #53	; 0x35
    3aec:	9f067100 	svcls	0x00067100
    3af0:	0000357e 	andeq	r3, r0, lr, ror r5
    3af4:	00003586 	andeq	r3, r0, r6, lsl #11
    3af8:	00520001 	subseq	r0, r2, r1
    3afc:	00000000 	andeq	r0, r0, r0
    3b00:	e2000000 	and	r0, r0, #0
    3b04:	5c000035 	stcpl	0, cr0, [r0], {53}	; 0x35
    3b08:	01000036 	tsteq	r0, r6, lsr r0
    3b0c:	00005400 	andeq	r5, r0, r0, lsl #8
    3b10:	00000000 	andeq	r0, r0, r0
    3b14:	36480000 	strbcc	r0, [r8], -r0
    3b18:	36520000 	ldrbcc	r0, [r2], -r0
    3b1c:	00010000 	andeq	r0, r1, r0
    3b20:	00000053 	andeq	r0, r0, r3, asr r0
    3b24:	00000000 	andeq	r0, r0, r0
    3b28:	00368000 	eorseq	r8, r6, r0
    3b2c:	0036a600 	eorseq	sl, r6, r0, lsl #12
    3b30:	50000100 	andpl	r0, r0, r0, lsl #2
    3b34:	000036a6 	andeq	r3, r0, r6, lsr #13
    3b38:	000036fc 	strdeq	r3, [r0], -ip
    3b3c:	01f30004 	mvnseq	r0, r4
    3b40:	00009f50 	andeq	r9, r0, r0, asr pc
    3b44:	00000000 	andeq	r0, r0, r0
    3b48:	36a80000 	strtcc	r0, [r8], r0
    3b4c:	36dc0000 	ldrbcc	r0, [ip], r0
    3b50:	00010000 	andeq	r0, r1, r0
    3b54:	00000053 	andeq	r0, r0, r3, asr r0
    3b58:	00000000 	andeq	r0, r0, r0
    3b5c:	0036ac00 	eorseq	sl, r6, r0, lsl #24
    3b60:	0036ba00 	eorseq	fp, r6, r0, lsl #20
    3b64:	51000100 	mrspl	r0, (UNDEF: 16)
    3b68:	000036ba 			; <UNDEFINED> instruction: 0x000036ba
    3b6c:	000036bc 			; <UNDEFINED> instruction: 0x000036bc
    3b70:	00720006 	rsbseq	r0, r2, r6
    3b74:	9f1c0073 	svcls	0x001c0073
    3b78:	000036bc 			; <UNDEFINED> instruction: 0x000036bc
    3b7c:	000036c2 	andeq	r3, r0, r2, asr #13
    3b80:	00510001 	subseq	r0, r1, r1
    3b84:	00000000 	andeq	r0, r0, r0
    3b88:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    3b8c:	aa000036 	bge	3c6c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x14>
    3b90:	01000036 	tsteq	r0, r6, lsr r0
    3b94:	00005300 	andeq	r5, r0, r0, lsl #6
    3b98:	00000000 	andeq	r0, r0, r0
    3b9c:	36fc0000 	ldrbtcc	r0, [ip], r0
    3ba0:	371f0000 	ldrcc	r0, [pc, -r0]
    3ba4:	00010000 	andeq	r0, r1, r0
    3ba8:	00371f50 	eorseq	r1, r7, r0, asr pc
    3bac:	00372a00 	eorseq	r2, r7, r0, lsl #20
    3bb0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    3bb4:	0000372a 	andeq	r3, r0, sl, lsr #14
    3bb8:	00003732 	andeq	r3, r0, r2, lsr r7
    3bbc:	32500001 	subscc	r0, r0, #1
    3bc0:	7e000037 	mcrvc	0, 0, r0, cr0, cr7, {1}
    3bc4:	01000037 	tsteq	r0, r7, lsr r0
    3bc8:	00005400 	andeq	r5, r0, r0, lsl #8
    3bcc:	00000000 	andeq	r0, r0, r0
    3bd0:	37380000 	ldrcc	r0, [r8, -r0]!
    3bd4:	373c0000 	ldrcc	r0, [ip, -r0]!
    3bd8:	00010000 	andeq	r0, r1, r0
    3bdc:	00373e53 	eorseq	r3, r7, r3, asr lr
    3be0:	00374c00 	eorseq	r4, r7, r0, lsl #24
    3be4:	53000100 	movwpl	r0, #256	; 0x100
    3be8:	0000374e 	andeq	r3, r0, lr, asr #14
    3bec:	00003756 	andeq	r3, r0, r6, asr r7
    3bf0:	00530001 	subseq	r0, r3, r1
    3bf4:	00000000 	andeq	r0, r0, r0
    3bf8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    3bfc:	6c000037 	stcvs	0, cr0, [r0], {55}	; 0x37
    3c00:	05000037 	streq	r0, [r0, #-55]	; 0xffffffc9
    3c04:	4c007400 	cfstrsmi	mvf7, [r0], {-0}
    3c08:	376c9f26 	strbcc	r9, [ip, -r6, lsr #30]!
    3c0c:	37a80000 	strcc	r0, [r8, r0]!
    3c10:	00060000 	andeq	r0, r6, r0
    3c14:	4c5001f3 	ldfmie	f0, [r0], {243}	; 0xf3
    3c18:	00009f26 	andeq	r9, r0, r6, lsr #30
    3c1c:	00000000 	andeq	r0, r0, r0
    3c20:	37320000 	ldrcc	r0, [r2, -r0]!
    3c24:	373c0000 	ldrcc	r0, [ip, -r0]!
    3c28:	00010000 	andeq	r0, r1, r0
    3c2c:	00000053 	andeq	r0, r0, r3, asr r0
    3c30:	00000000 	andeq	r0, r0, r0
    3c34:	0037a800 	eorseq	sl, r7, r0, lsl #16
    3c38:	0037bc00 	eorseq	fp, r7, r0, lsl #24
    3c3c:	50000100 	andpl	r0, r0, r0, lsl #2
    3c40:	000037bc 			; <UNDEFINED> instruction: 0x000037bc
    3c44:	00003804 	andeq	r3, r0, r4, lsl #16
    3c48:	01f30004 	mvnseq	r0, r4
    3c4c:	00009f50 	andeq	r9, r0, r0, asr pc
    3c50:	00000000 	andeq	r0, r0, r0
    3c54:	37ae0000 	strcc	r0, [lr, r0]!
    3c58:	37b60000 	ldrcc	r0, [r6, r0]!
    3c5c:	00010000 	andeq	r0, r1, r0
    3c60:	00000053 	andeq	r0, r0, r3, asr r0
    3c64:	00000000 	andeq	r0, r0, r0
    3c68:	0037b200 	eorseq	fp, r7, r0, lsl #4
    3c6c:	0037c400 	eorseq	ip, r7, r0, lsl #8
    3c70:	52000100 	andpl	r0, r0, #0, 2
    3c74:	000037c4 	andeq	r3, r0, r4, asr #15
    3c78:	000037c6 	andeq	r3, r0, r6, asr #15
    3c7c:	00720005 	rsbseq	r0, r2, r5
    3c80:	c69f2531 			; <UNDEFINED> instruction: 0xc69f2531
    3c84:	cc000037 	stcgt	0, cr0, [r0], {55}	; 0x37
    3c88:	01000037 	tsteq	r0, r7, lsr r0
    3c8c:	37d05200 	ldrbcc	r5, [r0, r0, lsl #4]
    3c90:	37e20000 	strbcc	r0, [r2, r0]!
    3c94:	00010000 	andeq	r0, r1, r0
    3c98:	0037e652 	eorseq	lr, r7, r2, asr r6
    3c9c:	0037f000 	eorseq	pc, r7, r0
    3ca0:	52000100 	andpl	r0, r0, #0, 2
    3ca4:	000037f2 	strdeq	r3, [r0], -r2
    3ca8:	00003804 	andeq	r3, r0, r4, lsl #16
    3cac:	00520001 	subseq	r0, r2, r1
    3cb0:	00000000 	andeq	r0, r0, r0
    3cb4:	b6000000 	strlt	r0, [r0], -r0
    3cb8:	c0000037 	andgt	r0, r0, r7, lsr r0
    3cbc:	01000037 	tsteq	r0, r7, lsr r0
    3cc0:	37c05300 	strbcc	r5, [r0, r0, lsl #6]
    3cc4:	37c20000 	strbcc	r0, [r2, r0]
    3cc8:	00050000 	andeq	r0, r5, r0
    3ccc:	25310073 	ldrcs	r0, [r1, #-115]!	; 0xffffff8d
    3cd0:	0037c29f 	mlaseq	r7, pc, r2, ip	; <UNPREDICTABLE>
    3cd4:	0037c400 	eorseq	ip, r7, r0, lsl #8
    3cd8:	53000100 	movwpl	r0, #256	; 0x100
    3cdc:	000037c4 	andeq	r3, r0, r4, asr #15
    3ce0:	000037d0 	ldrdeq	r3, [r0], -r0
    3ce4:	ff0a0004 			; <UNDEFINED> instruction: 0xff0a0004
    3ce8:	37d09fff 			; <UNDEFINED> instruction: 0x37d09fff
    3cec:	37d60000 	ldrbcc	r0, [r6, r0]
    3cf0:	00010000 	andeq	r0, r1, r0
    3cf4:	0037da53 	eorseq	sp, r7, r3, asr sl
    3cf8:	0037e000 	eorseq	lr, r7, r0
    3cfc:	53000100 	movwpl	r0, #256	; 0x100
    3d00:	000037e0 	andeq	r3, r0, r0, ror #15
    3d04:	000037f2 	strdeq	r3, [r0], -r2
    3d08:	9f310002 	svcls	0x00310002
    3d0c:	000037f2 	strdeq	r3, [r0], -r2
    3d10:	00003804 	andeq	r3, r0, r4, lsl #16
    3d14:	00530001 	subseq	r0, r3, r1
    3d18:	00000000 	andeq	r0, r0, r0
    3d1c:	b6000000 	strlt	r0, [r0], -r0
    3d20:	bc000037 	stclt	0, cr0, [r0], {55}	; 0x37
    3d24:	02000037 	andeq	r0, r0, #55	; 0x37
    3d28:	bc9f3000 	ldclt	0, cr3, [pc], {0}
    3d2c:	f8000037 			; <UNDEFINED> instruction: 0xf8000037
    3d30:	01000037 	tsteq	r0, r7, lsr r0
    3d34:	00005000 	andeq	r5, r0, r0
    3d38:	00000000 	andeq	r0, r0, r0
    3d3c:	37f80000 	ldrbcc	r0, [r8, r0]!
    3d40:	37fc0000 	ldrbcc	r0, [ip, r0]!
    3d44:	00080000 	andeq	r0, r8, r0
    3d48:	24400072 	strbcs	r0, [r0], #-114	; 0xffffff8e
    3d4c:	9f210073 	svcls	0x00210073
    3d50:	000037fc 	strdeq	r3, [r0], -ip
    3d54:	00003804 	andeq	r3, r0, r4, lsl #16
    3d58:	00500001 	subseq	r0, r0, r1
    3d5c:	00000000 	andeq	r0, r0, r0
    3d60:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    3d64:	12000038 	andne	r0, r0, #56	; 0x38
    3d68:	0a000038 	beq	3e50 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f8>
    3d6c:	33007000 	movwcc	r7, #0
    3d70:	7324381a 			; <UNDEFINED> instruction: 0x7324381a
    3d74:	169f2100 	ldrne	r2, [pc], r0, lsl #2
    3d78:	1c000038 	stcne	0, cr0, [r0], {56}	; 0x38
    3d7c:	01000038 	tsteq	r0, r8, lsr r0
    3d80:	00005000 	andeq	r5, r0, r0
	...
    3d90:	00070000 	andeq	r0, r7, r0
    3d94:	ff0a0070 			; <UNDEFINED> instruction: 0xff0a0070
    3d98:	009f1a3f 	addseq	r1, pc, pc, lsr sl	; <UNPREDICTABLE>
    3d9c:	00000000 	andeq	r0, r0, r0
    3da0:	20000000 	andcs	r0, r0, r0
    3da4:	24000038 	strcs	r0, [r0], #-56	; 0xffffffc8
    3da8:	0f000038 	svceq	0x00000038
    3dac:	08007000 	stmdaeq	r0, {ip, sp, lr}
    3db0:	00701afc 	ldrshteq	r1, [r0], #-172	; 0xffffff54
    3db4:	f3f88011 	vshr.u32	d24, d1, #8
    3db8:	9f211a67 	svcls	0x00211a67
	...
    3dc4:	00003820 	andeq	r3, r0, r0, lsr #16
    3dc8:	00003824 	andeq	r3, r0, r4, lsr #16
    3dcc:	00500001 	subseq	r0, r0, r1
    3dd0:	00000000 	andeq	r0, r0, r0
    3dd4:	30000000 	andcc	r0, r0, r0
    3dd8:	34000038 	strcc	r0, [r0], #-56	; 0xffffffc8
    3ddc:	0f000038 	svceq	0x00000038
    3de0:	08007000 	stmdaeq	r0, {ip, sp, lr}
    3de4:	00701a3f 	rsbseq	r1, r0, pc, lsr sl
    3de8:	fcffc00c 	ldc2l	0, cr12, [pc], #48	; 3e20 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    3dec:	9f211a00 	svcls	0x00211a00
	...
    3df8:	00003830 	andeq	r3, r0, r0, lsr r8
    3dfc:	00003834 	andeq	r3, r0, r4, lsr r8
    3e00:	00500001 	subseq	r0, r0, r1
    3e04:	00000000 	andeq	r0, r0, r0
    3e08:	40000000 	andmi	r0, r0, r0
    3e0c:	96000038 			; <UNDEFINED> instruction: 0x96000038
    3e10:	01000038 	tsteq	r0, r8, lsr r0
    3e14:	38965000 	ldmcc	r6, {ip, lr}
    3e18:	38a40000 	stmiacc	r4!, {}	; <UNPREDICTABLE>
    3e1c:	00040000 	andeq	r0, r4, r0
    3e20:	9f5001f3 	svcls	0x005001f3
	...
    3e2c:	00003880 	andeq	r3, r0, r0, lsl #17
    3e30:	00003888 	andeq	r3, r0, r8, lsl #17
    3e34:	00740017 	rsbseq	r0, r4, r7, lsl r0
    3e38:	1aff000a 	bne	fffc3e68 <_estack+0xdffbee68>
    3e3c:	f0080074 			; <UNDEFINED> instruction: 0xf0080074
    3e40:	0072211a 	rsbseq	r2, r2, sl, lsl r1
    3e44:	73212444 			; <UNDEFINED> instruction: 0x73212444
    3e48:	21244000 			; <UNDEFINED> instruction: 0x21244000
    3e4c:	00388c9f 	mlaseq	r8, pc, ip, r8	; <UNPREDICTABLE>
    3e50:	0038a400 	eorseq	sl, r8, r0, lsl #8
    3e54:	53000100 	movwpl	r0, #256	; 0x100
	...
    3e60:	00003848 	andeq	r3, r0, r8, asr #16
    3e64:	00003892 	muleq	r0, r2, r8
    3e68:	00540001 	subseq	r0, r4, r1
    3e6c:	00000000 	andeq	r0, r0, r0
    3e70:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    3e74:	62000038 	andvs	r0, r0, #56	; 0x38
    3e78:	01000038 	tsteq	r0, r8, lsr r0
    3e7c:	38625200 	stmdacc	r2!, {r9, ip, lr}^
    3e80:	386e0000 	stmdacc	lr!, {}^	; <UNPREDICTABLE>
    3e84:	00060000 	andeq	r0, r6, r0
    3e88:	ec090074 	stc	0, cr0, [r9], {116}	; 0x74
    3e8c:	38809f24 	stmcc	r0, {r2, r5, r8, r9, sl, fp, ip, pc}
    3e90:	38880000 	stmcc	r8, {}	; <UNPREDICTABLE>
    3e94:	00010000 	andeq	r0, r1, r0
    3e98:	00000052 	andeq	r0, r0, r2, asr r0
    3e9c:	00000000 	andeq	r0, r0, r0
    3ea0:	00385600 	eorseq	r5, r8, r0, lsl #12
    3ea4:	00387400 	eorseq	r7, r8, r0, lsl #8
    3ea8:	53000100 	movwpl	r0, #256	; 0x100
    3eac:	00003874 	andeq	r3, r0, r4, ror r8
    3eb0:	00003880 	andeq	r3, r0, r0, lsl #17
    3eb4:	00740006 	rsbseq	r0, r4, r6
    3eb8:	9f24f009 	svcls	0x0024f009
    3ebc:	00003880 	andeq	r3, r0, r0, lsl #17
    3ec0:	0000388c 	andeq	r3, r0, ip, lsl #17
    3ec4:	00530001 	subseq	r0, r3, r1
    3ec8:	00000000 	andeq	r0, r0, r0
    3ecc:	60000000 	andvs	r0, r0, r0
    3ed0:	62000038 	andvs	r0, r0, #56	; 0x38
    3ed4:	06000038 			; <UNDEFINED> instruction: 0x06000038
    3ed8:	72007600 	andvc	r7, r0, #0, 12
    3edc:	629f2200 	addsvs	r2, pc, #0, 4
    3ee0:	6a000038 	bvs	3fc8 <AuxAdiDdiSafeWrite.constprop.1+0x8>
    3ee4:	01000038 	tsteq	r0, r8, lsr r0
    3ee8:	386a5200 	stmdacc	sl!, {r9, ip, lr}^
    3eec:	386c0000 	stmdacc	ip!, {}^	; <UNPREDICTABLE>
    3ef0:	00090000 	andeq	r0, r9, r0
    3ef4:	ec090074 	stc	0, cr0, [r9], {116}	; 0x74
    3ef8:	22007624 	andcs	r7, r0, #36, 12	; 0x2400000
    3efc:	00386c9f 	mlaseq	r8, pc, ip, r6	; <UNPREDICTABLE>
    3f00:	00386e00 	eorseq	r6, r8, r0, lsl #28
    3f04:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    3f08:	00003872 	andeq	r3, r0, r2, ror r8
    3f0c:	00003874 	andeq	r3, r0, r4, ror r8
    3f10:	00710006 	rsbseq	r0, r1, r6
    3f14:	9f220073 	svcls	0x00220073
    3f18:	00003874 	andeq	r3, r0, r4, ror r8
    3f1c:	0000387c 	andeq	r3, r0, ip, ror r8
    3f20:	7c530001 	mrrcvc	0, 0, r0, r3, cr1
    3f24:	7e000038 	mcrvc	0, 0, r0, cr0, cr8, {1}
    3f28:	09000038 	stmdbeq	r0, {r3, r4, r5}
    3f2c:	09007400 	stmdbeq	r0, {sl, ip, sp, lr}
    3f30:	007124f0 	ldrshteq	r2, [r1], #-64	; 0xffffffc0
    3f34:	387e9f22 	ldmdacc	lr!, {r1, r5, r8, r9, sl, fp, ip, pc}^
    3f38:	38800000 	stmcc	r0, {}	; <UNPREDICTABLE>
    3f3c:	00020000 	andeq	r0, r2, r0
    3f40:	00009f30 	andeq	r9, r0, r0, lsr pc
    3f44:	00000000 	andeq	r0, r0, r0
    3f48:	38a40000 	stmiacc	r4!, {}	; <UNPREDICTABLE>
    3f4c:	38ac0000 	stmiacc	ip!, {}	; <UNPREDICTABLE>
    3f50:	00010000 	andeq	r0, r1, r0
    3f54:	0038ac50 	eorseq	sl, r8, r0, asr ip
    3f58:	0038b800 	eorseq	fp, r8, r0, lsl #16
    3f5c:	f3000400 	vshl.u8	d0, d0, d0
    3f60:	009f5001 	addseq	r5, pc, r1
    3f64:	00000000 	andeq	r0, r0, r0
    3f68:	a4000000 	strge	r0, [r0], #-0
    3f6c:	b2000038 	andlt	r0, r0, #56	; 0x38
    3f70:	02000038 	andeq	r0, r0, #56	; 0x38
    3f74:	b29f3000 	addslt	r3, pc, #0
    3f78:	b8000038 	stmdalt	r0, {r3, r4, r5}
    3f7c:	01000038 	tsteq	r0, r8, lsr r0
    3f80:	00005000 	andeq	r5, r0, r0
    3f84:	00000000 	andeq	r0, r0, r0
    3f88:	38a60000 	stmiacc	r6!, {}	; <UNPREDICTABLE>
    3f8c:	38ac0000 	stmiacc	ip!, {}	; <UNPREDICTABLE>
    3f90:	00010000 	andeq	r0, r1, r0
    3f94:	0038ac50 	eorseq	sl, r8, r0, asr ip
    3f98:	0038b800 	eorseq	fp, r8, r0, lsl #16
    3f9c:	f3000400 	vshl.u8	d0, d0, d0
    3fa0:	009f5001 	addseq	r5, pc, r1
    3fa4:	00000000 	andeq	r0, r0, r0
    3fa8:	b0000000 	andlt	r0, r0, r0
    3fac:	b2000038 	andlt	r0, r0, #56	; 0x38
    3fb0:	01000038 	tsteq	r0, r8, lsr r0
    3fb4:	00005000 	andeq	r5, r0, r0
    3fb8:	00000000 	andeq	r0, r0, r0
    3fbc:	38b80000 	ldmcc	r8!, {}	; <UNPREDICTABLE>
    3fc0:	38c00000 	stmiacc	r0, {}^	; <UNPREDICTABLE>
    3fc4:	00010000 	andeq	r0, r1, r0
    3fc8:	0038c050 	eorseq	ip, r8, r0, asr r0
    3fcc:	0038cc00 	eorseq	ip, r8, r0, lsl #24
    3fd0:	f3000400 	vshl.u8	d0, d0, d0
    3fd4:	009f5001 	addseq	r5, pc, r1
    3fd8:	00000000 	andeq	r0, r0, r0
    3fdc:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    3fe0:	c6000038 			; <UNDEFINED> instruction: 0xc6000038
    3fe4:	02000038 	andeq	r0, r0, #56	; 0x38
    3fe8:	c69f3100 	ldrgt	r3, [pc], r0, lsl #2
    3fec:	cc000038 	stcgt	0, cr0, [r0], {56}	; 0x38
    3ff0:	01000038 	tsteq	r0, r8, lsr r0
    3ff4:	00005000 	andeq	r5, r0, r0
    3ff8:	00000000 	andeq	r0, r0, r0
    3ffc:	38ba0000 	ldmcc	sl!, {}	; <UNPREDICTABLE>
    4000:	38c00000 	stmiacc	r0, {}^	; <UNPREDICTABLE>
    4004:	00010000 	andeq	r0, r1, r0
    4008:	0038c050 	eorseq	ip, r8, r0, asr r0
    400c:	0038cc00 	eorseq	ip, r8, r0, lsl #24
    4010:	f3000400 	vshl.u8	d0, d0, d0
    4014:	009f5001 	addseq	r5, pc, r1
    4018:	00000000 	andeq	r0, r0, r0
    401c:	c4000000 	strgt	r0, [r0], #-0
    4020:	c6000038 			; <UNDEFINED> instruction: 0xc6000038
    4024:	01000038 	tsteq	r0, r8, lsr r0
    4028:	00005000 	andeq	r5, r0, r0
    402c:	00000000 	andeq	r0, r0, r0
    4030:	38cc0000 	stmiacc	ip, {}^	; <UNPREDICTABLE>
    4034:	38d40000 	ldmcc	r4, {}^	; <UNPREDICTABLE>
    4038:	00010000 	andeq	r0, r1, r0
    403c:	0038d450 	eorseq	sp, r8, r0, asr r4
    4040:	0038e000 	eorseq	lr, r8, r0
    4044:	f3000400 	vshl.u8	d0, d0, d0
    4048:	009f5001 	addseq	r5, pc, r1
    404c:	00000000 	andeq	r0, r0, r0
    4050:	cc000000 	stcgt	0, cr0, [r0], {-0}
    4054:	da000038 	ble	413c <memset+0xa4>
    4058:	02000038 	andeq	r0, r0, #56	; 0x38
    405c:	da9f3100 	ble	fe7d0464 <_estack+0xde7cb464>
    4060:	e0000038 	and	r0, r0, r8, lsr r0
    4064:	01000038 	tsteq	r0, r8, lsr r0
    4068:	00005000 	andeq	r5, r0, r0
    406c:	00000000 	andeq	r0, r0, r0
    4070:	38ce0000 	stmiacc	lr, {}^	; <UNPREDICTABLE>
    4074:	38d40000 	ldmcc	r4, {}^	; <UNPREDICTABLE>
    4078:	00010000 	andeq	r0, r1, r0
    407c:	0038d450 	eorseq	sp, r8, r0, asr r4
    4080:	0038e000 	eorseq	lr, r8, r0
    4084:	f3000400 	vshl.u8	d0, d0, d0
    4088:	009f5001 	addseq	r5, pc, r1
    408c:	00000000 	andeq	r0, r0, r0
    4090:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    4094:	da000038 	ble	417c <toupper+0x34>
    4098:	01000038 	tsteq	r0, r8, lsr r0
    409c:	00005000 	andeq	r5, r0, r0
    40a0:	00000000 	andeq	r0, r0, r0
    40a4:	38e00000 	stmiacc	r0!, {}^	; <UNPREDICTABLE>
    40a8:	38ec0000 	stmiacc	ip!, {}^	; <UNPREDICTABLE>
    40ac:	00010000 	andeq	r0, r1, r0
    40b0:	0038ec50 	eorseq	lr, r8, r0, asr ip
    40b4:	00390800 	eorseq	r0, r9, r0, lsl #16
    40b8:	f3000400 	vshl.u8	d0, d0, d0
    40bc:	009f5001 	addseq	r5, pc, r1
    40c0:	00000000 	andeq	r0, r0, r0
    40c4:	e0000000 	and	r0, r0, r0
    40c8:	02000038 	andeq	r0, r0, #56	; 0x38
    40cc:	02000039 	andeq	r0, r0, #57	; 0x39
    40d0:	029f3000 	addseq	r3, pc, #0
    40d4:	08000039 	stmdaeq	r0, {r0, r3, r4, r5}
    40d8:	01000039 	tsteq	r0, r9, lsr r0
    40dc:	00005000 	andeq	r5, r0, r0
    40e0:	00000000 	andeq	r0, r0, r0
    40e4:	38e20000 	stmiacc	r2!, {}^	; <UNPREDICTABLE>
    40e8:	38ec0000 	stmiacc	ip!, {}^	; <UNPREDICTABLE>
    40ec:	00010000 	andeq	r0, r1, r0
    40f0:	0038ec50 	eorseq	lr, r8, r0, asr ip
    40f4:	00390800 	eorseq	r0, r9, r0, lsl #16
    40f8:	f3000400 	vshl.u8	d0, d0, d0
    40fc:	009f5001 	addseq	r5, pc, r1
    4100:	00000000 	andeq	r0, r0, r0
    4104:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    4108:	fc000038 	stc2	0, cr0, [r0], {56}	; 0x38
    410c:	10000038 	andne	r0, r0, r8, lsr r0
    4110:	4c007300 	stcmi	3, cr7, [r0], {-0}
    4114:	481a2446 	ldmdami	sl, {r1, r2, r6, sl, sp}
    4118:	72243225 	eorvc	r3, r4, #1342177282	; 0x50000002
    411c:	21243800 			; <UNDEFINED> instruction: 0x21243800
    4120:	0038fe9f 	mlaseq	r8, pc, lr, pc	; <UNPREDICTABLE>
    4124:	00390200 	eorseq	r0, r9, r0, lsl #4
    4128:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4134:	000038e8 	andeq	r3, r0, r8, ror #17
    4138:	000038fc 	strdeq	r3, [r0], -ip
    413c:	00530001 	subseq	r0, r3, r1
    4140:	00000000 	andeq	r0, r0, r0
    4144:	0c000000 	stceq	0, cr0, [r0], {-0}
    4148:	10000039 	andne	r0, r0, r9, lsr r0
    414c:	09000039 	stmdbeq	r0, {r0, r3, r4, r5}
    4150:	48007000 	stmdami	r0, {ip, sp, lr}
    4154:	431a2440 	tstmi	sl, #64, 8	; 0x40000000
    4158:	00009f25 	andeq	r9, r0, r5, lsr #30
    415c:	00000000 	andeq	r0, r0, r0
    4160:	39180000 	ldmdbcc	r8, {}	; <UNPREDICTABLE>
    4164:	39240000 	stmdbcc	r4!, {}	; <UNPREDICTABLE>
    4168:	00010000 	andeq	r0, r1, r0
    416c:	00392450 	eorseq	r2, r9, r0, asr r4
    4170:	00394400 	eorseq	r4, r9, r0, lsl #8
    4174:	f3000400 	vshl.u8	d0, d0, d0
    4178:	009f5001 	addseq	r5, pc, r1
    417c:	00000000 	andeq	r0, r0, r0
    4180:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4184:	3a000039 	bcc	4270 <toupper+0x128>
    4188:	06000039 			; <UNDEFINED> instruction: 0x06000039
    418c:	80000c00 	andhi	r0, r0, r0, lsl #24
    4190:	3a9f403f 	bcc	fe7d4294 <_estack+0xde7cf294>
    4194:	44000039 	strmi	r0, [r0], #-57	; 0xffffffc7
    4198:	01000039 	tsteq	r0, r9, lsr r0
    419c:	00005000 	andeq	r5, r0, r0
    41a0:	00000000 	andeq	r0, r0, r0
    41a4:	391a0000 	ldmdbcc	sl, {}	; <UNPREDICTABLE>
    41a8:	39240000 	stmdbcc	r4!, {}	; <UNPREDICTABLE>
    41ac:	00010000 	andeq	r0, r1, r0
    41b0:	00392450 	eorseq	r2, r9, r0, asr r4
    41b4:	00394400 	eorseq	r4, r9, r0, lsl #8
    41b8:	f3000400 	vshl.u8	d0, d0, d0
    41bc:	009f5001 	addseq	r5, pc, r1
    41c0:	00000000 	andeq	r0, r0, r0
    41c4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    41c8:	2e000039 	mcrcs	0, 0, r0, cr0, cr9, {1}
    41cc:	10000039 	andne	r0, r0, r9, lsr r0
    41d0:	0a007300 	beq	20dd8 <__ccfg+0xe30>
    41d4:	341a03f0 	ldrcc	r0, [sl], #-1008	; 0xfffffc10
    41d8:	72244025 	eorvc	r4, r4, #37	; 0x25
    41dc:	21244600 			; <UNDEFINED> instruction: 0x21244600
    41e0:	0039389f 	mlaseq	r9, pc, r8, r3	; <UNPREDICTABLE>
    41e4:	00393a00 	eorseq	r3, r9, r0, lsl #20
    41e8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    41f4:	00003920 	andeq	r3, r0, r0, lsr #18
    41f8:	0000392e 	andeq	r3, r0, lr, lsr #18
    41fc:	00530001 	subseq	r0, r3, r1
    4200:	00000000 	andeq	r0, r0, r0
    4204:	44000000 	strmi	r0, [r0], #-0
    4208:	4c000039 	stcmi	0, cr0, [r0], {57}	; 0x39
    420c:	01000039 	tsteq	r0, r9, lsr r0
    4210:	394c5000 	stmdbcc	ip, {ip, lr}^
    4214:	39580000 	ldmdbcc	r8, {}^	; <UNPREDICTABLE>
    4218:	00040000 	andeq	r0, r4, r0
    421c:	9f5001f3 	svcls	0x005001f3
	...
    4228:	00003944 	andeq	r3, r0, r4, asr #18
    422c:	00003952 	andeq	r3, r0, r2, asr r9
    4230:	9f300002 	svcls	0x00300002
    4234:	00003952 	andeq	r3, r0, r2, asr r9
    4238:	00003958 	andeq	r3, r0, r8, asr r9
    423c:	00500001 	subseq	r0, r0, r1
    4240:	00000000 	andeq	r0, r0, r0
    4244:	46000000 	strmi	r0, [r0], -r0
    4248:	4c000039 	stcmi	0, cr0, [r0], {57}	; 0x39
    424c:	01000039 	tsteq	r0, r9, lsr r0
    4250:	394c5000 	stmdbcc	ip, {ip, lr}^
    4254:	39580000 	ldmdbcc	r8, {}^	; <UNPREDICTABLE>
    4258:	00040000 	andeq	r0, r4, r0
    425c:	9f5001f3 	svcls	0x005001f3
	...
    4268:	00003950 	andeq	r3, r0, r0, asr r9
    426c:	00003952 	andeq	r3, r0, r2, asr r9
    4270:	00500001 	subseq	r0, r0, r1
    4274:	00000000 	andeq	r0, r0, r0
    4278:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    427c:	60000039 	andvs	r0, r0, r9, lsr r0
    4280:	01000039 	tsteq	r0, r9, lsr r0
    4284:	39605000 	stmdbcc	r0!, {ip, lr}^
    4288:	396c0000 	stmdbcc	ip!, {}^	; <UNPREDICTABLE>
    428c:	00040000 	andeq	r0, r4, r0
    4290:	9f5001f3 	svcls	0x005001f3
	...
    429c:	00003958 	andeq	r3, r0, r8, asr r9
    42a0:	00003966 	andeq	r3, r0, r6, ror #18
    42a4:	9f300002 	svcls	0x00300002
    42a8:	00003966 	andeq	r3, r0, r6, ror #18
    42ac:	0000396c 	andeq	r3, r0, ip, ror #18
    42b0:	00500001 	subseq	r0, r0, r1
    42b4:	00000000 	andeq	r0, r0, r0
    42b8:	5a000000 	bpl	42c0 <toupper+0x178>
    42bc:	60000039 	andvs	r0, r0, r9, lsr r0
    42c0:	01000039 	tsteq	r0, r9, lsr r0
    42c4:	39605000 	stmdbcc	r0!, {ip, lr}^
    42c8:	396c0000 	stmdbcc	ip!, {}^	; <UNPREDICTABLE>
    42cc:	00040000 	andeq	r0, r4, r0
    42d0:	9f5001f3 	svcls	0x005001f3
	...
    42dc:	00003964 	andeq	r3, r0, r4, ror #18
    42e0:	00003966 	andeq	r3, r0, r6, ror #18
    42e4:	00500001 	subseq	r0, r0, r1
    42e8:	00000000 	andeq	r0, r0, r0
    42ec:	6c000000 	stcvs	0, cr0, [r0], {-0}
    42f0:	72000039 	andvc	r0, r0, #57	; 0x39
    42f4:	01000039 	tsteq	r0, r9, lsr r0
    42f8:	39725000 	ldmdbcc	r2!, {ip, lr}^
    42fc:	3a5c0000 	bcc	1704304 <__ccfg+0x16e435c>
    4300:	00010000 	andeq	r0, r1, r0
    4304:	003a5c55 	eorseq	r5, sl, r5, asr ip
    4308:	003a7c00 	eorseq	r7, sl, r0, lsl #24
    430c:	f3000400 	vshl.u8	d0, d0, d0
    4310:	009f5001 	addseq	r5, pc, r1
    4314:	00000000 	andeq	r0, r0, r0
    4318:	6c000000 	stcvs	0, cr0, [r0], {-0}
    431c:	75000039 	strvc	r0, [r0, #-57]	; 0xffffffc7
    4320:	01000039 	tsteq	r0, r9, lsr r0
    4324:	39755100 	ldmdbcc	r5!, {r8, ip, lr}^
    4328:	3a7c0000 	bcc	1f04330 <__ccfg+0x1ee4388>
    432c:	00040000 	andeq	r0, r4, r0
    4330:	9f5101f3 	svcls	0x005101f3
	...
    433c:	0000397a 	andeq	r3, r0, sl, ror r9
    4340:	0000397e 	andeq	r3, r0, lr, ror r9
    4344:	7e500001 	cdpvc	0, 5, cr0, cr0, cr1, {0}
    4348:	81000039 	tsthi	r0, r9, lsr r0
    434c:	01000039 	tsteq	r0, r9, lsr r0
    4350:	39865200 	stmibcc	r6, {r9, ip, lr}
    4354:	398a0000 	stmibcc	sl, {}	; <UNPREDICTABLE>
    4358:	00010000 	andeq	r0, r1, r0
    435c:	0039b450 	eorseq	fp, r9, r0, asr r4
    4360:	0039b600 	eorseq	fp, r9, r0, lsl #12
    4364:	50000100 	andpl	r0, r0, r0, lsl #2
    4368:	000039b6 			; <UNDEFINED> instruction: 0x000039b6
    436c:	000039b9 			; <UNDEFINED> instruction: 0x000039b9
    4370:	c2520001 	subsgt	r0, r2, #1
    4374:	c4000039 	strgt	r0, [r0], #-57	; 0xffffffc7
    4378:	01000039 	tsteq	r0, r9, lsr r0
    437c:	39c45000 	stmibcc	r4, {ip, lr}^
    4380:	39c70000 	stmibcc	r7, {}^	; <UNPREDICTABLE>
    4384:	00010000 	andeq	r0, r1, r0
    4388:	0039d252 	eorseq	sp, r9, r2, asr r2
    438c:	0039d400 	eorseq	sp, r9, r0, lsl #8
    4390:	50000100 	andpl	r0, r0, r0, lsl #2
    4394:	000039d4 	ldrdeq	r3, [r0], -r4
    4398:	000039d7 	ldrdeq	r3, [r0], -r7
    439c:	de520001 	cdple	0, 5, cr0, cr2, cr1, {0}
    43a0:	e0000039 	and	r0, r0, r9, lsr r0
    43a4:	01000039 	tsteq	r0, r9, lsr r0
    43a8:	39f05000 	ldmibcc	r0!, {ip, lr}^
    43ac:	39f40000 	ldmibcc	r4!, {}^	; <UNPREDICTABLE>
    43b0:	00010000 	andeq	r0, r1, r0
    43b4:	003a0250 	eorseq	r0, sl, r0, asr r2
    43b8:	003a0400 	eorseq	r0, sl, r0, lsl #8
    43bc:	50000100 	andpl	r0, r0, r0, lsl #2
    43c0:	00003a04 	andeq	r3, r0, r4, lsl #20
    43c4:	00003a07 	andeq	r3, r0, r7, lsl #20
    43c8:	0e520001 	cdpeq	0, 5, cr0, cr2, cr1, {0}
    43cc:	1000003a 	andne	r0, r0, sl, lsr r0
    43d0:	0100003a 	tsteq	r0, sl, lsr r0
    43d4:	3a205000 	bcc	8183dc <__ccfg+0x7f8434>
    43d8:	3a220000 	bcc	8843e0 <__ccfg+0x864438>
    43dc:	00010000 	andeq	r0, r1, r0
    43e0:	003a3250 	eorseq	r3, sl, r0, asr r2
    43e4:	003a3600 	eorseq	r3, sl, r0, lsl #12
    43e8:	50000100 	andpl	r0, r0, r0, lsl #2
    43ec:	00003a4a 	andeq	r3, r0, sl, asr #20
    43f0:	00003a4c 	andeq	r3, r0, ip, asr #20
    43f4:	4c500001 	mrrcmi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    43f8:	4f00003a 	svcmi	0x0000003a
    43fc:	0100003a 	tsteq	r0, sl, lsr r0
    4400:	00005200 	andeq	r5, r0, r0, lsl #4
    4404:	00000000 	andeq	r0, r0, r0
    4408:	39a20000 	stmibcc	r2!, {}	; <UNPREDICTABLE>
    440c:	39a80000 	stmibcc	r8!, {}	; <UNPREDICTABLE>
    4410:	00070000 	andeq	r0, r7, r0
    4414:	ff0a0072 			; <UNDEFINED> instruction: 0xff0a0072
    4418:	009f1a3f 	addseq	r1, pc, pc, lsr sl	; <UNPREDICTABLE>
    441c:	00000000 	andeq	r0, r0, r0
    4420:	96000000 	strls	r0, [r0], -r0
    4424:	a000003a 	andge	r0, r0, sl, lsr r0
    4428:	0900003a 	stmdbeq	r0, {r1, r3, r4, r5}
    442c:	0c007300 	stceq	3, cr7, [r0], {-0}
    4430:	20000004 	andcs	r0, r0, r4
    4434:	00009f21 	andeq	r9, r0, r1, lsr #30
    4438:	00000000 	andeq	r0, r0, r0
    443c:	3ae00000 	bcc	ff804444 <_estack+0xdf7ff444>
    4440:	3ae80000 	bcc	ffa04448 <_estack+0xdf9ff448>
    4444:	00010000 	andeq	r0, r1, r0
    4448:	003ae850 	eorseq	lr, sl, r0, asr r8
    444c:	003b0800 	eorseq	r0, fp, r0, lsl #16
    4450:	f3000400 	vshl.u8	d0, d0, d0
    4454:	009f5001 	addseq	r5, pc, r1
    4458:	00000000 	andeq	r0, r0, r0
    445c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4460:	3000003b 	andcc	r0, r0, fp, lsr r0
    4464:	0100003b 	tsteq	r0, fp, lsr r0
    4468:	3b305000 	blcc	c18470 <__ccfg+0xbf84c8>
    446c:	3b700000 	blcc	1c04474 <__ccfg+0x1be44cc>
    4470:	00010000 	andeq	r0, r1, r0
    4474:	003b7054 	eorseq	r7, fp, r4, asr r0
    4478:	003b7800 	eorseq	r7, fp, r0, lsl #16
    447c:	50000100 	andpl	r0, r0, r0, lsl #2
    4480:	00003b78 	andeq	r3, r0, r8, ror fp
    4484:	00003bc2 	andeq	r3, r0, r2, asr #23
    4488:	c2540001 	subsgt	r0, r4, #1
    448c:	fe00003b 	mcr2	0, 0, r0, cr0, cr11, {1}
    4490:	0400003b 	streq	r0, [r0], #-59	; 0xffffffc5
    4494:	5001f300 	andpl	pc, r1, r0, lsl #6
    4498:	003bfe9f 	mlaseq	fp, pc, lr, pc	; <UNPREDICTABLE>
    449c:	003c0200 	eorseq	r0, ip, r0, lsl #4
    44a0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    44a4:	00003c02 	andeq	r3, r0, r2, lsl #24
    44a8:	00003c58 	andeq	r3, r0, r8, asr ip
    44ac:	01f30004 	mvnseq	r0, r4
    44b0:	00009f50 	andeq	r9, r0, r0, asr pc
    44b4:	00000000 	andeq	r0, r0, r0
    44b8:	3b1e0000 	blcc	7844c0 <__ccfg+0x764518>
    44bc:	3b600000 	blcc	18044c4 <__ccfg+0x17e451c>
    44c0:	00010000 	andeq	r0, r1, r0
    44c4:	00000053 	andeq	r0, r0, r3, asr r0
    44c8:	00000000 	andeq	r0, r0, r0
    44cc:	003b9200 	eorseq	r9, fp, r0, lsl #4
    44d0:	003b9800 	eorseq	r9, fp, r0, lsl #16
    44d4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    44e0:	00003bc2 	andeq	r3, r0, r2, asr #23
    44e4:	00003bc4 	andeq	r3, r0, r4, asr #23
    44e8:	c4500001 	ldrbgt	r0, [r0], #-1
    44ec:	d800003b 	stmdale	r0, {r0, r1, r3, r4, r5}
    44f0:	0100003b 	tsteq	r0, fp, lsr r0
    44f4:	00005400 	andeq	r5, r0, r0, lsl #8
    44f8:	00000000 	andeq	r0, r0, r0
    44fc:	3bd80000 	blcc	ff604504 <_estack+0xdf5ff504>
    4500:	3bf80000 	blcc	ffe04508 <_estack+0xdfdff508>
    4504:	00010000 	andeq	r0, r1, r0
    4508:	00000054 	andeq	r0, r0, r4, asr r0
	...
    4518:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    4524:	7f750003 	svcvc	0x00750003
    4528:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    452c:	00000000 	andeq	r0, r0, r0
    4530:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    453c:	00003c58 	andeq	r3, r0, r8, asr ip
    4540:	00003c77 	andeq	r3, r0, r7, ror ip
    4544:	77500001 	ldrbvc	r0, [r0, -r1]
    4548:	3800003c 	stmdacc	r0, {r2, r3, r4, r5}
    454c:	0100003d 	tsteq	r0, sp, lsr r0
    4550:	3d385700 	ldccc	7, cr5, [r8, #-0]
    4554:	3e780000 	cdpcc	0, 7, cr0, cr8, cr0, {0}
    4558:	00040000 	andeq	r0, r4, r0
    455c:	9f5001f3 	svcls	0x005001f3
	...
    4568:	00003c78 	andeq	r3, r0, r8, ror ip
    456c:	00003df8 	strdeq	r3, [r0], -r8
    4570:	fa500001 	blx	140457c <__ccfg+0x13e45d4>
    4574:	3400003d 	strcc	r0, [r0], #-61	; 0xffffffc3
    4578:	0100003e 	tsteq	r0, lr, lsr r0
    457c:	00005000 	andeq	r5, r0, r0
    4580:	00000000 	andeq	r0, r0, r0
    4584:	3d200000 	stccc	0, cr0, [r0, #-0]
    4588:	3d240000 	stccc	0, cr0, [r4, #-0]
    458c:	00030000 	andeq	r0, r3, r0
    4590:	249f7170 	ldrcs	r7, [pc], #368	; 4598 <patchGenfskRfe+0xf0>
    4594:	2a00003d 	bcs	4690 <patchGenfskRfe+0x1e8>
    4598:	0100003d 	tsteq	r0, sp, lsr r0
    459c:	3d2a5100 	stfccs	f5, [sl, #-0]
    45a0:	3d4a0000 	stclcc	0, cr0, [sl, #-0]
    45a4:	00020000 	andeq	r0, r2, r0
    45a8:	3d4a5491 	cfstrdcc	mvd5, [sl, #-580]	; 0xfffffdbc
    45ac:	3d560000 	ldclcc	0, cr0, [r6, #-0]
    45b0:	00010000 	andeq	r0, r1, r0
    45b4:	003d5651 	eorseq	r5, sp, r1, asr r6
    45b8:	003d5800 	eorseq	r5, sp, r0, lsl #16
    45bc:	91000200 	mrsls	r0, R8_usr
    45c0:	003d5854 	eorseq	r5, sp, r4, asr r8
    45c4:	003d5a00 	eorseq	r5, sp, r0, lsl #20
    45c8:	51000100 	mrspl	r0, (UNDEF: 16)
    45cc:	00003d5a 	andeq	r3, r0, sl, asr sp
    45d0:	00003e00 	andeq	r3, r0, r0, lsl #28
    45d4:	54910002 	ldrpl	r0, [r1], #2
	...
    45e0:	00003c84 	andeq	r3, r0, r4, lsl #25
    45e4:	00003cde 	ldrdeq	r3, [r0], -lr
    45e8:	e6510001 	ldrb	r0, [r1], -r1
    45ec:	e800003c 	stmda	r0, {r2, r3, r4, r5}
    45f0:	0100003c 	tsteq	r0, ip, lsr r0
    45f4:	00005100 	andeq	r5, r0, r0, lsl #2
    45f8:	00000000 	andeq	r0, r0, r0
    45fc:	3cd60000 	ldclcc	0, cr0, [r6], {0}
    4600:	3ce40000 	stclcc	0, cr0, [r4]
    4604:	00010000 	andeq	r0, r1, r0
    4608:	003ce652 	eorseq	lr, ip, r2, asr r6
    460c:	003dc800 	eorseq	ip, sp, r0, lsl #16
    4610:	52000100 	andpl	r0, r0, #0, 2
	...
    461c:	00003cd6 	ldrdeq	r3, [r0], -r6
    4620:	00003dbe 			; <UNDEFINED> instruction: 0x00003dbe
    4624:	00530001 	subseq	r0, r3, r1
    4628:	00000000 	andeq	r0, r0, r0
    462c:	7c000000 	stcvc	0, cr0, [r0], {-0}
    4630:	d200003c 	andle	r0, r0, #60	; 0x3c
    4634:	0100003d 	tsteq	r0, sp, lsr r0
    4638:	00005500 	andeq	r5, r0, r0, lsl #10
    463c:	00000000 	andeq	r0, r0, r0
    4640:	3c780000 	ldclcc	0, cr0, [r8], #-0
    4644:	3d000000 	stccc	0, cr0, [r0, #-0]
    4648:	00020000 	andeq	r0, r2, r0
    464c:	3d009f30 	stccc	15, cr9, [r0, #-192]	; 0xffffff40
    4650:	3e340000 	cdpcc	0, 3, cr0, cr4, cr0, {0}
    4654:	00010000 	andeq	r0, r1, r0
    4658:	00000054 	andeq	r0, r0, r4, asr r0
    465c:	00000000 	andeq	r0, r0, r0
    4660:	003cf800 	eorseq	pc, ip, r0, lsl #16
    4664:	003d0200 	eorseq	r0, sp, r0, lsl #4
    4668:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4674:	00003d20 	andeq	r3, r0, r0, lsr #26
    4678:	00003d70 	andeq	r3, r0, r0, ror sp
    467c:	9f300002 	svcls	0x00300002
    4680:	00003d70 	andeq	r3, r0, r0, ror sp
    4684:	00003d90 	muleq	r0, r0, sp
    4688:	90510001 	subsls	r0, r1, r1
    468c:	9600003d 			; <UNDEFINED> instruction: 0x9600003d
    4690:	0200003d 	andeq	r0, r0, #61	; 0x3d
    4694:	969f3000 	ldrls	r3, [pc], r0
    4698:	d000003d 	andle	r0, r0, sp, lsr r0
    469c:	0100003d 	tsteq	r0, sp, lsr r0
    46a0:	00005100 	andeq	r5, r0, r0, lsl #2
    46a4:	00000000 	andeq	r0, r0, r0
    46a8:	3d4c0000 	stclcc	0, cr0, [ip, #-0]
    46ac:	3d500000 	ldclcc	0, cr0, [r0, #-0]
    46b0:	00010000 	andeq	r0, r1, r0
    46b4:	003d585e 	eorseq	r5, sp, lr, asr r8
    46b8:	003d5a00 	eorseq	r5, sp, r0, lsl #20
    46bc:	5e000100 	adfpls	f0, f0, f0
    46c0:	00003d5a 	andeq	r3, r0, sl, asr sp
    46c4:	00003d60 	andeq	r3, r0, r0, ror #26
    46c8:	60510001 	subsvs	r0, r1, r1
    46cc:	6800003d 	stmdavs	r0, {r0, r2, r3, r4, r5}
    46d0:	0300003d 	movweq	r0, #61	; 0x3d
    46d4:	9f7f7100 	svcls	0x007f7100
	...
    46e0:	00003d20 	andeq	r3, r0, r0, lsr #26
    46e4:	00003d4a 	andeq	r3, r0, sl, asr #26
    46e8:	9f300002 	svcls	0x00300002
    46ec:	00003d4a 	andeq	r3, r0, sl, asr #26
    46f0:	00003d54 	andeq	r3, r0, r4, asr sp
    46f4:	545e0001 	ldrbpl	r0, [lr], #-1
    46f8:	5600003d 			; <UNDEFINED> instruction: 0x5600003d
    46fc:	0500003d 	streq	r0, [r0, #-61]	; 0xffffffc3
    4700:	38007100 	stmdacc	r0, {r8, ip, sp, lr}
    4704:	3d569f26 	ldclcc	15, cr9, [r6, #-152]	; 0xffffff68
    4708:	3d580000 	ldclcc	0, cr0, [r8, #-0]
    470c:	00060000 	andeq	r0, r6, r0
    4710:	38065491 	stmdacc	r6, {r0, r4, r7, sl, ip, lr}
    4714:	3d589f26 	ldclcc	15, cr9, [r8, #-152]	; 0xffffff68
    4718:	3d5a0000 	ldclcc	0, cr0, [sl, #-0]
    471c:	00010000 	andeq	r0, r1, r0
    4720:	003d5a5e 	eorseq	r5, sp, lr, asr sl
    4724:	003d9000 	eorseq	r9, sp, r0
    4728:	91000600 	tstls	r0, r0, lsl #12
    472c:	26380654 			; <UNDEFINED> instruction: 0x26380654
    4730:	003d909f 	mlaseq	sp, pc, r0, r9	; <UNPREDICTABLE>
    4734:	003d9600 	eorseq	r9, sp, r0, lsl #12
    4738:	30000200 	andcc	r0, r0, r0, lsl #4
    473c:	003d969f 	mlaseq	sp, pc, r6, r9	; <UNPREDICTABLE>
    4740:	003e0000 	eorseq	r0, lr, r0
    4744:	5e000100 	adfpls	f0, f0, f0
	...
    4750:	00003d6c 	andeq	r3, r0, ip, ror #26
    4754:	00003d90 	muleq	r0, r0, sp
    4758:	005c0001 	subseq	r0, ip, r1
    475c:	00000000 	andeq	r0, r0, r0
    4760:	9a000000 	bls	4768 <patchGenfskRfe+0x2c0>
    4764:	0000003d 	andeq	r0, r0, sp, lsr r0
    4768:	0100003e 	tsteq	r0, lr, lsr r0
    476c:	00005a00 	andeq	r5, r0, r0, lsl #20
    4770:	00000000 	andeq	r0, r0, r0
    4774:	3d9e0000 	ldccc	0, cr0, [lr]
    4778:	3dda0000 	ldclcc	0, cr0, [sl]
    477c:	00010000 	andeq	r0, r1, r0
    4780:	003dda5c 	eorseq	sp, sp, ip, asr sl
    4784:	003dde00 	eorseq	sp, sp, r0, lsl #28
    4788:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4794:	00003dde 	ldrdeq	r3, [r0], -lr
    4798:	00003de8 	andeq	r3, r0, r8, ror #27
    479c:	00710017 	rsbseq	r0, r1, r7, lsl r0
    47a0:	244b4012 	strbcs	r4, [fp], #-18	; 0xffffffee
    47a4:	ffff0a22 			; <UNDEFINED> instruction: 0xffff0a22
    47a8:	4b401416 	blmi	1009808 <__ccfg+0xfe9860>
    47ac:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    47b0:	13160001 	tstne	r6, #1
    47b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    47b8:	00000000 	andeq	r0, r0, r0
    47bc:	003e0800 	eorseq	r0, lr, r0, lsl #16
    47c0:	003e1400 	eorseq	r1, lr, r0, lsl #8
    47c4:	30000200 	andcc	r0, r0, r0, lsl #4
    47c8:	003e149f 	mlaseq	lr, pc, r4, r1	; <UNPREDICTABLE>
    47cc:	003e3400 	eorseq	r3, lr, r0, lsl #8
    47d0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    47dc:	00003e0a 	andeq	r3, r0, sl, lsl #28
    47e0:	00003e0c 	andeq	r3, r0, ip, lsl #28
    47e4:	0c530001 	mrrceq	0, 0, r0, r3, cr1
    47e8:	1400003e 	strne	r0, [r0], #-62	; 0xffffffc2
    47ec:	0200003e 	andeq	r0, r0, #62	; 0x3e
    47f0:	149f4f00 	ldrne	r4, [pc], #3840	; 47f8 <patchGenfskRfe+0x350>
    47f4:	2400003e 	strcs	r0, [r0], #-62	; 0xffffffc2
    47f8:	0100003e 	tsteq	r0, lr, lsr r0
    47fc:	3e245300 	cdpcc	3, 2, cr5, cr4, cr0, {0}
    4800:	3e280000 	cdpcc	0, 2, cr0, cr8, cr0, {0}
    4804:	00050000 	andeq	r0, r5, r0
    4808:	25340073 	ldrcs	r0, [r4, #-115]!	; 0xffffff8d
    480c:	003e289f 	mlaseq	lr, pc, r8, r2	; <UNPREDICTABLE>
    4810:	003e2c00 	eorseq	r2, lr, r0, lsl #24
    4814:	53000100 	movwpl	r0, #256	; 0x100
	...
    4820:	00003d20 	andeq	r3, r0, r0, lsr #26
    4824:	00003e00 	andeq	r3, r0, r0, lsl #28
    4828:	9c0c0006 	stcls	0, cr0, [ip], {6}
    482c:	9f500013 	svcls	0x00500013
	...
    4838:	00003c8c 	andeq	r3, r0, ip, lsl #25
    483c:	00003c98 	muleq	r0, r8, ip
    4840:	00530001 	subseq	r0, r3, r1
    4844:	00000000 	andeq	r0, r0, r0
    4848:	ac000000 	stcge	0, cr0, [r0], {-0}
    484c:	b800003c 	stmdalt	r0, {r2, r3, r4, r5}
    4850:	0100003c 	tsteq	r0, ip, lsr r0
    4854:	00005200 	andeq	r5, r0, r0, lsl #4
    4858:	00000000 	andeq	r0, r0, r0
    485c:	3cc20000 	stclcc	0, cr0, [r2], {0}
    4860:	3cce0000 	stclcc	0, cr0, [lr], {0}
    4864:	00010000 	andeq	r0, r1, r0
    4868:	00000052 	andeq	r0, r0, r2, asr r0
    486c:	00000000 	andeq	r0, r0, r0
    4870:	003cce00 	eorseq	ip, ip, r0, lsl #28
    4874:	003dbe00 	eorseq	fp, sp, r0, lsl #28
    4878:	53000100 	movwpl	r0, #256	; 0x100
	...
    4884:	00003e86 	andeq	r3, r0, r6, lsl #29
    4888:	00003e90 	muleq	r0, r0, lr
    488c:	90500001 	subsls	r0, r0, r1
    4890:	9a00003e 	bls	4990 <patchGenfskRfe+0x4e8>
    4894:	0e00003e 	mcreq	0, 0, r0, cr0, cr14, {1}
    4898:	12007000 	andne	r7, r0, #0
    489c:	14168009 	ldrne	r8, [r6], #-9
    48a0:	0001282b 	andeq	r2, r1, fp, lsr #16
    48a4:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
    48a8:	00000000 	andeq	r0, r0, r0
    48ac:	80000000 	andhi	r0, r0, r0
    48b0:	ac00003e 	stcge	0, cr0, [r0], {62}	; 0x3e
    48b4:	0100003e 	tsteq	r0, lr, lsr r0
    48b8:	00005400 	andeq	r5, r0, r0, lsl #8
    48bc:	00000000 	andeq	r0, r0, r0
    48c0:	3eb00000 	cdpcc	0, 11, cr0, cr0, cr0, {0}
    48c4:	3eb60000 	cdpcc	0, 11, cr0, cr6, cr0, {0}
    48c8:	00150000 	andseq	r0, r5, r0
    48cc:	40120073 	andsmi	r0, r2, r3, ror r0
    48d0:	4f22244b 	svcmi	0x0022244b
    48d4:	4b401416 	blmi	1009934 <__ccfg+0xfe998c>
    48d8:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    48dc:	13160001 	tstne	r6, #1
    48e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    48e4:	00000000 	andeq	r0, r0, r0
    48e8:	003ebc00 	eorseq	fp, lr, r0, lsl #24
    48ec:	003ec600 	eorseq	ip, lr, r0, lsl #12
    48f0:	74001700 	strvc	r1, [r0], #-1792	; 0xfffff900
    48f4:	4b401200 	blmi	10090fc <__ccfg+0xfe9154>
    48f8:	ff0a2224 			; <UNDEFINED> instruction: 0xff0a2224
    48fc:	401416ff 			; <UNDEFINED> instruction: 0x401416ff
    4900:	2d22244b 	cfstrscs	mvf2, [r2, #-300]!	; 0xfffffed4
    4904:	16000128 	strne	r0, [r0], -r8, lsr #2
    4908:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4918:	00010000 	andeq	r0, r1, r0
    491c:	00000052 	andeq	r0, r0, r2, asr r0
	...
    492c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4940:	00510001 	subseq	r0, r1, r1
	...
    4950:	01000000 	mrseq	r0, (UNDEF: 0)
    4954:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    4964:	00160000 	andseq	r0, r6, r0
    4968:	ff080070 			; <UNDEFINED> instruction: 0xff080070
    496c:	4b400070 	blmi	1004b34 <__ccfg+0xfe4b8c>
    4970:	050c2224 	streq	r2, [ip, #-548]	; 0xfffffddc
    4974:	2d800000 	stccs	0, cr0, [r0]
    4978:	16000128 	strne	r0, [r0], -r8, lsr #2
    497c:	00009f13 	andeq	r9, r0, r3, lsl pc
    4980:	00000000 	andeq	r0, r0, r0
    4984:	3ef00000 	cdpcc	0, 15, cr0, cr0, cr0, {0}
    4988:	3f320000 	svccc	0x00320000
    498c:	00030000 	andeq	r0, r3, r0
    4990:	329fff09 	addscc	pc, pc, #9, 30	; 0x24
    4994:	3c00003f 	stccc	0, cr0, [r0], {63}	; 0x3f
    4998:	0100003f 	tsteq	r0, pc, lsr r0
    499c:	00005000 	andeq	r5, r0, r0
    49a0:	00000000 	andeq	r0, r0, r0
    49a4:	3efc0000 	cdpcc	0, 15, cr0, cr12, cr0, {0}
    49a8:	3f0a0000 	svccc	0x000a0000
    49ac:	00010000 	andeq	r0, r1, r0
    49b0:	003f0e50 	eorseq	r0, pc, r0, asr lr	; <UNPREDICTABLE>
    49b4:	003f2a00 	eorseq	r2, pc, r0, lsl #20
    49b8:	50000100 	andpl	r0, r0, r0, lsl #2
    49bc:	00003f2c 	andeq	r3, r0, ip, lsr #30
    49c0:	00003f2e 	andeq	r3, r0, lr, lsr #30
    49c4:	30500001 	subscc	r0, r0, r1
    49c8:	3200003f 	andcc	r0, r0, #63	; 0x3f
    49cc:	0100003f 	tsteq	r0, pc, lsr r0
    49d0:	00005000 	andeq	r5, r0, r0
	...
    49e0:	00030000 	andeq	r0, r3, r0
    49e4:	009fff09 	addseq	pc, pc, r9, lsl #30
    49e8:	00000000 	andeq	r0, r0, r0
    49ec:	01000000 	mrseq	r0, (UNDEF: 0)
    49f0:	00005000 	andeq	r5, r0, r0
	...
    4a00:	00010000 	andeq	r0, r1, r0
    4a04:	00000054 	andeq	r0, r0, r4, asr r0
    4a08:	00000000 	andeq	r0, r0, r0
    4a0c:	003f3c00 	eorseq	r3, pc, r0, lsl #24
    4a10:	003f7600 	eorseq	r7, pc, r0, lsl #12
    4a14:	09000300 	stmdbeq	r0, {r8, r9}
    4a18:	3f769fff 	svccc	0x00769fff
    4a1c:	3f7a0000 	svccc	0x007a0000
    4a20:	00020000 	andeq	r0, r2, r0
    4a24:	3f7a9f44 	svccc	0x007a9f44
    4a28:	3f7e0000 	svccc	0x007e0000
    4a2c:	00020000 	andeq	r0, r2, r0
    4a30:	3f7e9f45 	svccc	0x007e9f45
    4a34:	3f9c0000 	svccc	0x009c0000
    4a38:	00030000 	andeq	r0, r3, r0
    4a3c:	9c9fff09 	ldcls	15, cr15, [pc], {9}
    4a40:	9e00003f 	mcrls	0, 0, r0, cr0, cr15, {1}
    4a44:	0100003f 	tsteq	r0, pc, lsr r0
    4a48:	3f9e5000 	svccc	0x009e5000
    4a4c:	3fa00000 	svccc	0x00a00000
    4a50:	00030000 	andeq	r0, r3, r0
    4a54:	a09fff09 	addsge	pc, pc, r9, lsl #30
    4a58:	a800003f 	stmdage	r0, {r0, r1, r2, r3, r4, r5}
    4a5c:	0100003f 	tsteq	r0, pc, lsr r0
    4a60:	00005000 	andeq	r5, r0, r0
    4a64:	00000000 	andeq	r0, r0, r0
    4a68:	3f4c0000 	svccc	0x004c0000
    4a6c:	3fa40000 	svccc	0x00a40000
    4a70:	00010000 	andeq	r0, r1, r0
    4a74:	00000054 	andeq	r0, r0, r4, asr r0
    4a78:	00000000 	andeq	r0, r0, r0
    4a7c:	003fc000 	eorseq	ip, pc, r0
    4a80:	003fc900 	eorseq	ip, pc, r0, lsl #18
    4a84:	50000100 	andpl	r0, r0, r0, lsl #2
    4a88:	00003fc9 	andeq	r3, r0, r9, asr #31
    4a8c:	00003fde 	ldrdeq	r3, [r0], -lr
    4a90:	de540001 	cdple	0, 5, cr0, cr4, cr1, {0}
    4a94:	e200003f 	and	r0, r0, #63	; 0x3f
    4a98:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    4a9c:	5001f300 	andpl	pc, r1, r0, lsl #6
    4aa0:	003fe29f 	mlaseq	pc, pc, r2, lr	; <UNPREDICTABLE>
    4aa4:	003fe400 	eorseq	lr, pc, r0, lsl #8
    4aa8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    4aac:	00003fe4 	andeq	r3, r0, r4, ror #31
    4ab0:	00003fe8 	andeq	r3, r0, r8, ror #31
    4ab4:	01f30004 	mvnseq	r0, r4
    4ab8:	00009f50 	andeq	r9, r0, r0, asr pc
    4abc:	00000000 	andeq	r0, r0, r0
    4ac0:	3fc00000 	svccc	0x00c00000
    4ac4:	3fc90000 	svccc	0x00c90000
    4ac8:	00010000 	andeq	r0, r1, r0
    4acc:	003fc951 	eorseq	ip, pc, r1, asr r9	; <UNPREDICTABLE>
    4ad0:	003fde00 	eorseq	sp, pc, r0, lsl #28
    4ad4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    4ad8:	00003fde 	ldrdeq	r3, [r0], -lr
    4adc:	00003fe2 	andeq	r3, r0, r2, ror #31
    4ae0:	01f30004 	mvnseq	r0, r4
    4ae4:	3fe29f51 	svccc	0x00e29f51
    4ae8:	3fe40000 	svccc	0x00e40000
    4aec:	00010000 	andeq	r0, r1, r0
    4af0:	003fe455 	eorseq	lr, pc, r5, asr r4	; <UNPREDICTABLE>
    4af4:	003fe800 	eorseq	lr, pc, r0, lsl #16
    4af8:	f3000400 	vshl.u8	d0, d0, d0
    4afc:	009f5101 	addseq	r5, pc, r1, lsl #2
    4b00:	00000000 	andeq	r0, r0, r0
    4b04:	ca000000 	bgt	4b0c <patchGenfskRfe+0x664>
    4b08:	e100003f 	tst	r0, pc, lsr r0
    4b0c:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    4b10:	30007000 	andcc	r7, r0, r0
    4b14:	3fe29f29 	svccc	0x00e29f29
    4b18:	3fe80000 	svccc	0x00e80000
    4b1c:	00050000 	andeq	r0, r5, r0
    4b20:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    4b24:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4b28:	00000000 	andeq	r0, r0, r0
    4b2c:	003fe800 	eorseq	lr, pc, r0, lsl #16
    4b30:	003fea00 	eorseq	lr, pc, r0, lsl #20
    4b34:	50000100 	andpl	r0, r0, r0, lsl #2
    4b38:	00003fea 	andeq	r3, r0, sl, ror #31
    4b3c:	00003ff0 	strdeq	r3, [r0], -r0
    4b40:	01f30004 	mvnseq	r0, r4
    4b44:	00009f50 	andeq	r9, r0, r0, asr pc
    4b48:	00000000 	andeq	r0, r0, r0
    4b4c:	3fe80000 	svccc	0x00e80000
    4b50:	3fec0000 	svccc	0x00ec0000
    4b54:	00010000 	andeq	r0, r1, r0
    4b58:	003fec51 	eorseq	lr, pc, r1, asr ip	; <UNPREDICTABLE>
    4b5c:	003ff000 	eorseq	pc, pc, r0
    4b60:	f3000400 	vshl.u8	d0, d0, d0
    4b64:	009f5101 	addseq	r5, pc, r1, lsl #2
    4b68:	00000000 	andeq	r0, r0, r0
    4b6c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    4b70:	ef00003f 	svc	0x0000003f
    4b74:	0100003f 	tsteq	r0, pc, lsr r0
    4b78:	3fef5200 	svccc	0x00ef5200
    4b7c:	3ff00000 	svccc	0x00f00000	; IMB
    4b80:	00040000 	andeq	r0, r4, r0
    4b84:	9f5201f3 	svcls	0x005201f3
	...
    4b98:	00500001 	subseq	r0, r0, r1
    4b9c:	00000000 	andeq	r0, r0, r0
    4ba0:	04000000 	streq	r0, [r0], #-0
    4ba4:	5001f300 	andpl	pc, r1, r0, lsl #6
    4ba8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4bb8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4bc4:	01f30004 	mvnseq	r0, r4
    4bc8:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    4bd8:	00010000 	andeq	r0, r1, r0
    4bdc:	00000052 	andeq	r0, r0, r2, asr r0
    4be0:	00000000 	andeq	r0, r0, r0
    4be4:	f3000400 	vshl.u8	d0, d0, d0
    4be8:	009f5201 	addseq	r5, pc, r1, lsl #4
    4bec:	00000000 	andeq	r0, r0, r0
    4bf0:	01000000 	mrseq	r0, (UNDEF: 0)
    4bf4:	00005200 	andeq	r5, r0, r0, lsl #4
    4bf8:	00000000 	andeq	r0, r0, r0
    4bfc:	00150000 	andseq	r0, r5, r0
    4c00:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4c04:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    4c08:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4c0c:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    4c10:	13160001 	tstne	r6, #1
    4c14:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4c24:	53000100 	movwpl	r0, #256	; 0x100
	...
    4c30:	01f30004 	mvnseq	r0, r4
    4c34:	00009f53 	andeq	r9, r0, r3, asr pc
	...
    4c44:	00040000 	andeq	r0, r4, r0
    4c48:	9f048070 	svcls	0x00048070
	...
    4c54:	01f3000d 	mvnseq	r0, sp
    4c58:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    4c5c:	23225001 			; <UNDEFINED> instruction: 0x23225001
    4c60:	009f0480 	addseq	r0, pc, r0, lsl #9
    4c64:	00000000 	andeq	r0, r0, r0
    4c68:	01000000 	mrseq	r0, (UNDEF: 0)
    4c6c:	00005000 	andeq	r5, r0, r0
    4c70:	00000000 	andeq	r0, r0, r0
    4c74:	00520000 	subseq	r0, r2, r0
    4c78:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    4c7c:	5001f324 	andpl	pc, r1, r4, lsr #6
    4c80:	04802322 	streq	r2, [r0], #802	; 0x322
    4c84:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    4c88:	5001f324 	andpl	pc, r1, r4, lsr #6
    4c8c:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
    4c90:	29302540 	ldmdbcs	r0!, {r6, r8, sl, sp}
    4c94:	16000128 	strne	r0, [r0], -r8, lsr #2
    4c98:	04842313 	streq	r2, [r4], #787	; 0x313
    4c9c:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    4ca0:	5001f324 	andpl	pc, r1, r4, lsr #6
    4ca4:	04802322 	streq	r2, [r0], #802	; 0x322
    4ca8:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    4cac:	5001f324 	andpl	pc, r1, r4, lsr #6
    4cb0:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
    4cb4:	29302540 	ldmdbcs	r0!, {r6, r8, sl, sp}
    4cb8:	16000128 	strne	r0, [r0], -r8, lsr #2
    4cbc:	5201f313 	andpl	pc, r1, #1275068416	; 0x4c000000
    4cc0:	2e302540 	cfneg32cs	mvfx2, mvfx0
    4cc4:	16000128 	strne	r0, [r0], -r8, lsr #2
    4cc8:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4cd8:	00010000 	andeq	r0, r1, r0
    4cdc:	00000051 	andeq	r0, r0, r1, asr r0
    4ce0:	00000000 	andeq	r0, r0, r0
    4ce4:	30002f00 	andcc	r2, r0, r0, lsl #30
    4ce8:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4cec:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    4cf0:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4cf4:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    4cf8:	13160001 	tstne	r6, #1
    4cfc:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4d00:	5301f325 	movwpl	pc, #4901	; 0x1325	; <UNPREDICTABLE>
    4d04:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    4d08:	f3131600 	vmax.u16	d1, d3, d0
    4d0c:	29305301 	ldmdbcs	r0!, {r0, r8, r9, ip, lr}
    4d10:	16000128 	strne	r0, [r0], -r8, lsr #2
    4d14:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4d24:	00010000 	andeq	r0, r1, r0
    4d28:	00000050 	andeq	r0, r0, r0, asr r0
    4d2c:	00000000 	andeq	r0, r0, r0
    4d30:	f3000400 	vshl.u8	d0, d0, d0
    4d34:	009f5001 	addseq	r5, pc, r1
	...
    4d44:	01000000 	mrseq	r0, (UNDEF: 0)
    4d48:	00005100 	andeq	r5, r0, r0, lsl #2
    4d4c:	00000000 	andeq	r0, r0, r0
    4d50:	00040000 	andeq	r0, r4, r0
    4d54:	9f5101f3 	svcls	0x005101f3
	...
    4d68:	00520001 	subseq	r0, r2, r1
    4d6c:	00000000 	andeq	r0, r0, r0
    4d70:	04000000 	streq	r0, [r0], #-0
    4d74:	5201f300 	andpl	pc, r1, #0, 6
    4d78:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4d7c:	00000000 	andeq	r0, r0, r0
    4d80:	52000100 	andpl	r0, r0, #0, 2
	...
    4d8c:	01f3001b 	mvnseq	r0, fp, lsl r0
    4d90:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    4d94:	01f35201 	mvnseq	r5, r1, lsl #4
    4d98:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    4d9c:	000f0c22 	andeq	r0, pc, r2, lsr #24
    4da0:	282b8000 	stmdacs	fp!, {pc}
    4da4:	13160001 	tstne	r6, #1
    4da8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4db8:	53000100 	movwpl	r0, #256	; 0x100
	...
    4dc4:	01f30004 	mvnseq	r0, r4
    4dc8:	00009f53 	andeq	r9, r0, r3, asr pc
    4dcc:	00000000 	andeq	r0, r0, r0
    4dd0:	00010000 	andeq	r0, r1, r0
    4dd4:	00000053 	andeq	r0, r0, r3, asr r0
    4dd8:	00000000 	andeq	r0, r0, r0
    4ddc:	f3001b00 	vqrdmulh.s<illegal width 8>	d1, d0, d0
    4de0:	1c405301 	mcrrne	3, 0, r5, r0, cr1
    4de4:	f35301f3 	vbsl	q8, <illegal reg q9.5>, <illegal reg q9.5>
    4de8:	4b405301 	blmi	10199f4 <__ccfg+0xff9a4c>
    4dec:	0f0c2224 	svceq	0x000c2224
    4df0:	2b800000 	blcs	fe004df8 <_estack+0xddfffdf8>
    4df4:	16000128 	strne	r0, [r0], -r8, lsr #2
    4df8:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4e08:	00020000 	andeq	r0, r2, r0
    4e0c:	00000091 	muleq	r0, r1, r0
    4e10:	00000000 	andeq	r0, r0, r0
    4e14:	00020000 	andeq	r0, r2, r0
    4e18:	0000007d 	andeq	r0, r0, sp, ror r0
	...
    4e28:	00040000 	andeq	r0, r4, r0
    4e2c:	9f048070 	svcls	0x00048070
	...
    4e38:	01f3000d 	mvnseq	r0, sp
    4e3c:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    4e40:	23225001 			; <UNDEFINED> instruction: 0x23225001
    4e44:	009f0480 	addseq	r0, pc, r0, lsl #9
    4e48:	00000000 	andeq	r0, r0, r0
    4e4c:	01000000 	mrseq	r0, (UNDEF: 0)
    4e50:	00005000 	andeq	r5, r0, r0
    4e54:	00000000 	andeq	r0, r0, r0
    4e58:	00640000 	rsbeq	r0, r4, r0
    4e5c:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    4e60:	5001f324 	andpl	pc, r1, r4, lsr #6
    4e64:	04802322 	streq	r2, [r0], #802	; 0x322
    4e68:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    4e6c:	5001f324 	andpl	pc, r1, r4, lsr #6
    4e70:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    4e74:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4e78:	00000f0c 	andeq	r0, r0, ip, lsl #30
    4e7c:	01282c80 	smlawbeq	r8, r0, ip, r2
    4e80:	23131600 	tstcs	r3, #0, 12
    4e84:	01f30484 	mvnseq	r0, r4, lsl #9
    4e88:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    4e8c:	23225001 			; <UNDEFINED> instruction: 0x23225001
    4e90:	01f30480 	mvnseq	r0, r0, lsl #9
    4e94:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    4e98:	f3225001 	vhadd.u32	d5, d2, d1
    4e9c:	4b405301 	blmi	1019aa8 <__ccfg+0xff9b00>
    4ea0:	0f0c2224 	svceq	0x000c2224
    4ea4:	2c800000 	stccs	0, cr0, [r0], {0}
    4ea8:	16000128 	strne	r0, [r0], -r8, lsr #2
    4eac:	5301f313 	movwpl	pc, #4883	; 0x1313	; <UNPREDICTABLE>
    4eb0:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4eb4:	00000f0c 	andeq	r0, r0, ip, lsl #30
    4eb8:	01282b80 	smlawbeq	r8, r0, fp, r2
    4ebc:	9f131600 	svcls	0x00131600
	...
    4ed0:	0074000a 	rsbseq	r0, r4, sl
    4ed4:	1affff0a 	bne	4b04 <patchGenfskRfe+0x65c>
    4ed8:	9f240073 	svcls	0x00240073
	...
    4ee4:	007d000c 	rsbseq	r0, sp, ip
    4ee8:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    4eec:	00731aff 	ldrshteq	r1, [r3], #-175	; 0xffffff51
    4ef0:	00009f24 	andeq	r9, r0, r4, lsr #30
    4ef4:	00000000 	andeq	r0, r0, r0
    4ef8:	00240000 	eoreq	r0, r4, r0
    4efc:	0294007d 	addseq	r0, r4, #125	; 0x7d
    4f00:	1affff0a 	bne	4b30 <patchGenfskRfe+0x688>
    4f04:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    4f08:	5301f31c 	movwpl	pc, #4892	; 0x131c	; <UNPREDICTABLE>
    4f0c:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    4f10:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    4f14:	8000000f 	andhi	r0, r0, pc
    4f18:	0001282b 	andeq	r2, r1, fp, lsr #16
    4f1c:	9f241316 	svcls	0x00241316
	...
    4f30:	00500001 	subseq	r0, r0, r1
    4f34:	00000000 	andeq	r0, r0, r0
    4f38:	04000000 	streq	r0, [r0], #-0
    4f3c:	5001f300 	andpl	pc, r1, r0, lsl #6
    4f40:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4f50:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4f5c:	01f30004 	mvnseq	r0, r4
    4f60:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    4f70:	00010000 	andeq	r0, r1, r0
    4f74:	00000052 	andeq	r0, r0, r2, asr r0
    4f78:	00000000 	andeq	r0, r0, r0
    4f7c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    4f88:	01f30015 	mvnseq	r0, r5, lsl r0
    4f8c:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    4f90:	01f35201 	mvnseq	r5, r1, lsl #4
    4f94:	30254052 	eorcc	r4, r5, r2, asr r0
    4f98:	0001282e 	andeq	r2, r1, lr, lsr #16
    4f9c:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    4fac:	01000000 	mrseq	r0, (UNDEF: 0)
    4fb0:	00005500 	andeq	r5, r0, r0, lsl #10
    4fb4:	00000000 	andeq	r0, r0, r0
    4fb8:	001d0000 	andseq	r0, sp, r0
    4fbc:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    4fc0:	23225101 			; <UNDEFINED> instruction: 0x23225101
    4fc4:	5001f302 	andpl	pc, r1, r2, lsl #6
    4fc8:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    4fcc:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4fd0:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    4fd4:	13160001 	tstne	r6, #1
    4fd8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4fe8:	75000600 	strvc	r0, [r0, #-1536]	; 0xfffffa00
    4fec:	1a007400 	bne	21ff4 <__ccfg+0x204c>
    4ff0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5000:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    500c:	01f3001d 	mvnseq	r0, sp, lsl r0
    5010:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    5014:	f3022322 	vcgt.u8	d2, d2, d18
    5018:	01f35001 	mvnseq	r5, r1
    501c:	01f32251 	mvnseq	r2, r1, asr r2
    5020:	30254052 	eorcc	r4, r5, r2, asr r0
    5024:	0001282e 	andeq	r2, r1, lr, lsr #16
    5028:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    5038:	07000000 	streq	r0, [r0, -r0]
    503c:	0a007500 	beq	22444 <__ccfg+0x249c>
    5040:	9f1affff 	svcls	0x001affff
	...
    5054:	00700005 	rsbseq	r0, r0, r5
    5058:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
	...
    5068:	01000000 	mrseq	r0, (UNDEF: 0)
    506c:	00005000 	andeq	r5, r0, r0
    5070:	00000000 	andeq	r0, r0, r0
    5074:	00040000 	andeq	r0, r4, r0
    5078:	9f5001f3 	svcls	0x005001f3
	...
    508c:	00510001 	subseq	r0, r1, r1
    5090:	00000000 	andeq	r0, r0, r0
    5094:	04000000 	streq	r0, [r0], #-0
    5098:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    509c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    50ac:	52000100 	andpl	r0, r0, #0, 2
	...
    50b8:	00540001 	subseq	r0, r4, r1
    50bc:	00000000 	andeq	r0, r0, r0
    50c0:	1b000000 	blne	50c8 <__exidx_end+0x19b>
    50c4:	5201f300 	andpl	pc, r1, #0, 6
    50c8:	01f32540 	mvnseq	r2, r0, asr #10
    50cc:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
    50d0:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    50d4:	00000f0c 	andeq	r0, r0, ip, lsl #30
    50d8:	01282b80 	smlawbeq	r8, r0, fp, r2
    50dc:	9f131600 	svcls	0x00131600
	...
    50f0:	00530001 	subseq	r0, r3, r1
    50f4:	00000000 	andeq	r0, r0, r0
    50f8:	01000000 	mrseq	r0, (UNDEF: 0)
    50fc:	00005500 	andeq	r5, r0, r0, lsl #10
    5100:	00000000 	andeq	r0, r0, r0
    5104:	001b0000 	andseq	r0, fp, r0
    5108:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    510c:	5301f31c 	movwpl	pc, #4892	; 0x131c	; <UNPREDICTABLE>
    5110:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    5114:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    5118:	8000000f 	andhi	r0, r0, pc
    511c:	0001282b 	andeq	r2, r1, fp, lsr #16
    5120:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    5130:	01000000 	mrseq	r0, (UNDEF: 0)
    5134:	00005600 	andeq	r5, r0, r0, lsl #12
    5138:	00000000 	andeq	r0, r0, r0
    513c:	00060000 	andeq	r0, r6, r0
    5140:	00710070 	rsbseq	r0, r1, r0, ror r0
    5144:	00009f22 	andeq	r9, r0, r2, lsr #30
    5148:	00000000 	andeq	r0, r0, r0
    514c:	00010000 	andeq	r0, r1, r0
    5150:	00000056 	andeq	r0, r0, r6, asr r0
    5154:	00000000 	andeq	r0, r0, r0
    5158:	f3002300 	vcgt.u8	d2, d0, d0
    515c:	01f35001 	mvnseq	r5, r1
    5160:	02232251 	eoreq	r2, r3, #268435461	; 0x10000005
    5164:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    5168:	f3225101 	vrhadd.u32	d5, d2, d1
    516c:	4b405301 	blmi	1019d78 <__ccfg+0xff9dd0>
    5170:	0f0c2224 	svceq	0x000c2224
    5174:	2b800000 	blcs	fe00517c <_estack+0xde00017c>
    5178:	16000128 	strne	r0, [r0], -r8, lsr #2
    517c:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    518c:	00060000 	andeq	r0, r6, r0
    5190:	00740076 	rsbseq	r0, r4, r6, ror r0
    5194:	00009f1a 	andeq	r9, r0, sl, lsl pc
    5198:	00000000 	andeq	r0, r0, r0
    519c:	00010000 	andeq	r0, r1, r0
    51a0:	00000050 	andeq	r0, r0, r0, asr r0
	...
    51b0:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    51bc:	01f30023 	mvnseq	r0, r3, lsr #32
    51c0:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    51c4:	f3022322 	vcgt.u8	d2, d2, d18
    51c8:	01f35001 	mvnseq	r5, r1
    51cc:	01f32251 	mvnseq	r2, r1, asr r2
    51d0:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    51d4:	000f0c22 	andeq	r0, pc, r2, lsr #24
    51d8:	282b8000 	stmdacs	fp!, {pc}
    51dc:	13160001 	tstne	r6, #1
    51e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    51f0:	76000700 	strvc	r0, [r0], -r0, lsl #14
    51f4:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    51f8:	00009f1a 	andeq	r9, r0, sl, lsl pc
	...
    5208:	00050000 	andeq	r0, r5, r0
    520c:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    5210:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5228:	00005000 	andeq	r5, r0, r0
    522c:	51000100 	mrspl	r0, (UNDEF: 16)
    5230:	00000050 	andeq	r0, r0, r0, asr r0
    5234:	00000092 	muleq	r0, r2, r0
    5238:	01f30004 	mvnseq	r0, r4
    523c:	00929f51 	addseq	r9, r2, r1, asr pc
    5240:	00940000 	addseq	r0, r4, r0
    5244:	00010000 	andeq	r0, r1, r0
    5248:	00009451 	andeq	r9, r0, r1, asr r4
    524c:	00009c00 	andeq	r9, r0, r0, lsl #24
    5250:	f3000400 	vshl.u8	d0, d0, d0
    5254:	9c9f5101 	ldflss	f5, [pc], {1}
    5258:	a2000000 	andge	r0, r0, #0
    525c:	01000000 	mrseq	r0, (UNDEF: 0)
    5260:	00a25100 	adceq	r5, r2, r0, lsl #2
    5264:	00a60000 	adceq	r0, r6, r0
    5268:	00040000 	andeq	r0, r4, r0
    526c:	9f5101f3 	svcls	0x005101f3
	...
    5278:	01000000 	mrseq	r0, (UNDEF: 0)
    527c:	00000001 	andeq	r0, r0, r1
    5280:	01000000 	mrseq	r0, (UNDEF: 0)
    5284:	00000001 	andeq	r0, r0, r1
    5288:	00000000 	andeq	r0, r0, r0
    528c:	01000000 	mrseq	r0, (UNDEF: 0)
    5290:	00000001 	andeq	r0, r0, r1
	...
    52a0:	002a0000 	eoreq	r0, sl, r0
    52a4:	00010000 	andeq	r0, r1, r0
    52a8:	00002a52 	andeq	r2, r0, r2, asr sl
    52ac:	00003c00 	andeq	r3, r0, r0, lsl #24
    52b0:	71000900 	tstvc	r0, r0, lsl #18
    52b4:	22007200 	andcs	r7, r0, #0, 4
    52b8:	9f1c0074 	svcls	0x001c0074
    52bc:	0000003c 	andeq	r0, r0, ip, lsr r0
    52c0:	0000003e 	andeq	r0, r0, lr, lsr r0
    52c4:	0071000b 	rsbseq	r0, r1, fp
    52c8:	74220072 	strtvc	r0, [r2], #-114	; 0xffffff8e
    52cc:	1c401c00 	mcrrne	12, 0, r1, r0, cr0
    52d0:	00003e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    52d4:	00004a00 	andeq	r4, r0, r0, lsl #20
    52d8:	71000900 	tstvc	r0, r0, lsl #18
    52dc:	22007200 	andcs	r7, r0, #0, 4
    52e0:	9f1c0074 	svcls	0x001c0074
    52e4:	00000054 	andeq	r0, r0, r4, asr r0
    52e8:	00000058 	andeq	r0, r0, r8, asr r0
    52ec:	58530001 	ldmdapl	r3, {r0}^
    52f0:	5c000000 	stcpl	0, cr0, [r0], {-0}
    52f4:	06000000 	streq	r0, [r0], -r0
    52f8:	76007300 	strvc	r7, [r0], -r0, lsl #6
    52fc:	5c9f1c00 	ldcpl	12, cr1, [pc], {0}
    5300:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    5304:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5308:	76007300 	strvc	r7, [r0], -r0, lsl #6
    530c:	1c341c00 	ldcne	12, cr1, [r4], #-0
    5310:	00005e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    5314:	00006600 	andeq	r6, r0, r0, lsl #12
    5318:	73000600 	movwvc	r0, #1536	; 0x600
    531c:	1c007600 	stcne	6, cr7, [r0], {-0}
    5320:	0000669f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    5324:	00007400 	andeq	r7, r0, r0, lsl #8
    5328:	72000800 	andvc	r0, r0, #0, 16
    532c:	761a3f00 	ldrvc	r3, [sl], -r0, lsl #30
    5330:	749f1c00 	ldrvc	r1, [pc], #3072	; 5338 <__exidx_end+0x40b>
    5334:	76000000 	strvc	r0, [r0], -r0
    5338:	01000000 	mrseq	r0, (UNDEF: 0)
    533c:	00765200 	rsbseq	r5, r6, r0, lsl #4
    5340:	007c0000 	rsbseq	r0, ip, r0
    5344:	00010000 	andeq	r0, r1, r0
    5348:	00007c56 	andeq	r7, r0, r6, asr ip
    534c:	00008200 	andeq	r8, r0, r0, lsl #4
    5350:	76000600 	strvc	r0, [r0], -r0, lsl #12
    5354:	1c007300 	stcne	3, cr7, [r0], {-0}
    5358:	0000829f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    535c:	00008400 	andeq	r8, r0, r0, lsl #8
    5360:	73000700 	movwvc	r0, #1792	; 0x700
    5364:	00762000 	rsbseq	r2, r6, r0
    5368:	00849f22 	addeq	r9, r4, r2, lsr #30
    536c:	00880000 	addeq	r0, r8, r0
    5370:	00070000 	andeq	r0, r7, r0
    5374:	76200072 			; <UNDEFINED> instruction: 0x76200072
    5378:	929f2200 	addsls	r2, pc, #0, 4
    537c:	96000000 	strls	r0, [r0], -r0
    5380:	01000000 	mrseq	r0, (UNDEF: 0)
    5384:	00965200 	addseq	r5, r6, r0, lsl #4
    5388:	009c0000 	addseq	r0, ip, r0
    538c:	00010000 	andeq	r0, r1, r0
    5390:	00009c56 	andeq	r9, r0, r6, asr ip
    5394:	0000a000 	andeq	sl, r0, r0
    5398:	52000100 	andpl	r0, r0, #0, 2
    539c:	000000a0 	andeq	r0, r0, r0, lsr #1
    53a0:	000000a2 	andeq	r0, r0, r2, lsr #1
    53a4:	a2560001 	subsge	r0, r6, #1
    53a8:	a6000000 	strge	r0, [r0], -r0
    53ac:	01000000 	mrseq	r0, (UNDEF: 0)
    53b0:	00005300 	andeq	r5, r0, r0, lsl #6
    53b4:	00000000 	andeq	r0, r0, r0
    53b8:	00020000 	andeq	r0, r2, r0
    53bc:	01000000 	mrseq	r0, (UNDEF: 0)
    53c0:	00000001 	andeq	r0, r0, r1
	...
    53cc:	00740000 	rsbseq	r0, r4, r0
    53d0:	00010000 	andeq	r0, r1, r0
    53d4:	00007450 	andeq	r7, r0, r0, asr r4
    53d8:	00007c00 	andeq	r7, r0, r0, lsl #24
    53dc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    53e0:	0000007c 	andeq	r0, r0, ip, ror r0
    53e4:	0000007c 	andeq	r0, r0, ip, ror r0
    53e8:	00750006 	rsbseq	r0, r5, r6
    53ec:	9f220073 	svcls	0x00220073
    53f0:	0000007c 	andeq	r0, r0, ip, ror r0
    53f4:	00000084 	andeq	r0, r0, r4, lsl #1
    53f8:	00750008 	rsbseq	r0, r5, r8
    53fc:	23220073 			; <UNDEFINED> instruction: 0x23220073
    5400:	00849f01 	addeq	r9, r4, r1, lsl #30
    5404:	00880000 	addeq	r0, r8, r0
    5408:	00080000 	andeq	r0, r8, r0
    540c:	00720075 	rsbseq	r0, r2, r5, ror r0
    5410:	9f012322 	svcls	0x00012322
    5414:	00000092 	muleq	r0, r2, r0
    5418:	00000094 	muleq	r0, r4, r0
    541c:	94500001 	ldrbls	r0, [r0], #-1
    5420:	9c000000 	stcls	0, cr0, [r0], {-0}
    5424:	01000000 	mrseq	r0, (UNDEF: 0)
    5428:	009c5500 	addseq	r5, ip, r0, lsl #10
    542c:	00a60000 	adceq	r0, r6, r0
    5430:	00010000 	andeq	r0, r1, r0
    5434:	00000050 	andeq	r0, r0, r0, asr r0
    5438:	00000000 	andeq	r0, r0, r0
    543c:	00000300 	andeq	r0, r0, r0, lsl #6
    5440:	00000000 	andeq	r0, r0, r0
    5444:	00000101 	andeq	r0, r0, r1, lsl #2
	...
    5450:	00005000 	andeq	r5, r0, r0
    5454:	51000100 	mrspl	r0, (UNDEF: 16)
    5458:	00000050 	andeq	r0, r0, r0, asr r0
    545c:	00000074 	andeq	r0, r0, r4, ror r0
    5460:	01f30004 	mvnseq	r0, r4
    5464:	00749f51 	rsbseq	r9, r4, r1, asr pc
    5468:	007c0000 	rsbseq	r0, ip, r0
    546c:	00010000 	andeq	r0, r1, r0
    5470:	00007c51 	andeq	r7, r0, r1, asr ip
    5474:	00007c00 	andeq	r7, r0, r0, lsl #24
    5478:	71000600 	tstvc	r0, r0, lsl #12
    547c:	22007300 	andcs	r7, r0, #0, 6
    5480:	00007c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    5484:	00008400 	andeq	r8, r0, r0, lsl #8
    5488:	71000800 	tstvc	r0, r0, lsl #16
    548c:	22007300 	andcs	r7, r0, #0, 6
    5490:	849f0123 	ldrhi	r0, [pc], #291	; 5498 <__exidx_end+0x56b>
    5494:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    5498:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    549c:	72007100 	andvc	r7, r0, #0, 2
    54a0:	01232200 			; <UNDEFINED> instruction: 0x01232200
    54a4:	0000929f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    54a8:	0000a200 	andeq	sl, r0, r0, lsl #4
    54ac:	51000100 	mrspl	r0, (UNDEF: 16)
    54b0:	000000a2 	andeq	r0, r0, r2, lsr #1
    54b4:	000000a6 	andeq	r0, r0, r6, lsr #1
    54b8:	01f30004 	mvnseq	r0, r4
    54bc:	00009f51 	andeq	r9, r0, r1, asr pc
    54c0:	00000000 	andeq	r0, r0, r0
    54c4:	01000000 	mrseq	r0, (UNDEF: 0)
    54c8:	01010101 	tsteq	r1, r1, lsl #2
    54cc:	00010101 	andeq	r0, r1, r1, lsl #2
    54d0:	00000000 	andeq	r0, r0, r0
    54d4:	00010100 	andeq	r0, r1, r0, lsl #2
    54d8:	00000000 	andeq	r0, r0, r0
    54dc:	002a0000 	eoreq	r0, sl, r0
    54e0:	002a0000 	eoreq	r0, sl, r0
    54e4:	00090000 	andeq	r0, r9, r0
    54e8:	00710070 	rsbseq	r0, r1, r0, ror r0
    54ec:	2200741c 	andcs	r7, r0, #28, 8	; 0x1c000000
    54f0:	00002a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    54f4:	00002e00 	andeq	r2, r0, r0, lsl #28
    54f8:	70000b00 	andvc	r0, r0, r0, lsl #22
    54fc:	1c007100 	stfnes	f7, [r0], {-0}
    5500:	23220074 			; <UNDEFINED> instruction: 0x23220074
    5504:	002e9f04 	eoreq	r9, lr, r4, lsl #30
    5508:	00320000 	eorseq	r0, r2, r0
    550c:	000b0000 	andeq	r0, fp, r0
    5510:	00710070 	rsbseq	r0, r1, r0, ror r0
    5514:	2200741c 	andcs	r7, r0, #28, 8	; 0x1c000000
    5518:	329f0823 	addscc	r0, pc, #2293760	; 0x230000
    551c:	36000000 	strcc	r0, [r0], -r0
    5520:	0b000000 	bleq	5528 <__exidx_end+0x5fb>
    5524:	71007000 	mrsvc	r7, (UNDEF: 0)
    5528:	00741c00 	rsbseq	r1, r4, r0, lsl #24
    552c:	9f0c2322 	svcls	0x000c2322
    5530:	00000036 	andeq	r0, r0, r6, lsr r0
    5534:	0000003e 	andeq	r0, r0, lr, lsr r0
    5538:	0070000b 	rsbseq	r0, r0, fp
    553c:	741c0071 	ldrvc	r0, [ip], #-113	; 0xffffff8f
    5540:	10232200 	eorne	r2, r3, r0, lsl #4
    5544:	00003e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    5548:	00004a00 	andeq	r4, r0, r0, lsl #20
    554c:	70000900 	andvc	r0, r0, r0, lsl #18
    5550:	1c007100 	stfnes	f7, [r0], {-0}
    5554:	9f220074 	svcls	0x00220074
    5558:	00000054 	andeq	r0, r0, r4, asr r0
    555c:	00000058 	andeq	r0, r0, r8, asr r0
    5560:	58550001 	ldmdapl	r5, {r0}^
    5564:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    5568:	06000000 	streq	r0, [r0], -r0
    556c:	76007500 	strvc	r7, [r0], -r0, lsl #10
    5570:	589f2200 	ldmpl	pc, {r9, sp}	; <UNPREDICTABLE>
    5574:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    5578:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    557c:	76007500 	strvc	r7, [r0], -r0, lsl #10
    5580:	04232200 	strteq	r2, [r3], #-512	; 0xfffffe00
    5584:	00005e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    5588:	00006e00 	andeq	r6, r0, r0, lsl #28
    558c:	75000600 	strvc	r0, [r0, #-1536]	; 0xfffffa00
    5590:	22007600 	andcs	r7, r0, #0, 12
    5594:	00006e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    5598:	00007600 	andeq	r7, r0, r0, lsl #12
    559c:	78000b00 	stmdavc	r0, {r8, r9, fp}
    55a0:	70243401 	eorvc	r3, r4, r1, lsl #8
    55a4:	00762200 	rsbseq	r2, r6, r0, lsl #4
    55a8:	00a29f22 	adceq	r9, r2, r2, lsr #30
    55ac:	00a60000 	adceq	r0, r6, r0
    55b0:	00010000 	andeq	r0, r1, r0
    55b4:	00000055 	andeq	r0, r0, r5, asr r0
    55b8:	00000000 	andeq	r0, r0, r0
    55bc:	01010000 	mrseq	r0, (UNDEF: 1)
    55c0:	01010101 	tsteq	r1, r1, lsl #2
    55c4:	00000101 	andeq	r0, r0, r1, lsl #2
    55c8:	00000000 	andeq	r0, r0, r0
    55cc:	00000101 	andeq	r0, r0, r1, lsl #2
    55d0:	00000000 	andeq	r0, r0, r0
    55d4:	00002a00 	andeq	r2, r0, r0, lsl #20
    55d8:	00002a00 	andeq	r2, r0, r0, lsl #20
    55dc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    55e0:	0000002a 	andeq	r0, r0, sl, lsr #32
    55e4:	0000002e 	andeq	r0, r0, lr, lsr #32
    55e8:	04740003 	ldrbteq	r0, [r4], #-3
    55ec:	00002e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    55f0:	00003200 	andeq	r3, r0, r0, lsl #4
    55f4:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
    55f8:	00329f08 	eorseq	r9, r2, r8, lsl #30
    55fc:	00360000 	eorseq	r0, r6, r0
    5600:	00030000 	andeq	r0, r3, r0
    5604:	369f0c74 			; <UNDEFINED> instruction: 0x369f0c74
    5608:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    560c:	03000000 	movweq	r0, #0
    5610:	9f107400 	svcls	0x00107400
    5614:	0000003e 	andeq	r0, r0, lr, lsr r0
    5618:	0000004a 	andeq	r0, r0, sl, asr #32
    561c:	52540001 	subspl	r0, r4, #1
    5620:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    5624:	01000000 	mrseq	r0, (UNDEF: 0)
    5628:	00585100 	subseq	r5, r8, r0, lsl #2
    562c:	00580000 	subseq	r0, r8, r0
    5630:	00060000 	andeq	r0, r6, r0
    5634:	00760071 	rsbseq	r0, r6, r1, ror r0
    5638:	00589f22 	subseq	r9, r8, r2, lsr #30
    563c:	005e0000 	subseq	r0, lr, r0
    5640:	00080000 	andeq	r0, r8, r0
    5644:	00760071 	rsbseq	r0, r6, r1, ror r0
    5648:	9f042322 	svcls	0x00042322
    564c:	0000005e 	andeq	r0, r0, lr, asr r0
    5650:	00000070 	andeq	r0, r0, r0, ror r0
    5654:	00710006 	rsbseq	r0, r1, r6
    5658:	9f220076 	svcls	0x00220076
    565c:	00000070 	andeq	r0, r0, r0, ror r0
    5660:	00000076 	andeq	r0, r0, r6, ror r0
    5664:	0178000c 	cmneq	r8, ip
    5668:	01f32434 	mvnseq	r2, r4, lsr r4
    566c:	00762251 	rsbseq	r2, r6, r1, asr r2
    5670:	00a29f22 	adceq	r9, r2, r2, lsr #30
    5674:	00a60000 	adceq	r0, r6, r0
    5678:	00010000 	andeq	r0, r1, r0
    567c:	00000051 	andeq	r0, r0, r1, asr r0
	...
    568c:	92000000 	andls	r0, r0, #0
    5690:	01000000 	mrseq	r0, (UNDEF: 0)
    5694:	00925100 	addseq	r5, r2, r0, lsl #2
    5698:	00a40000 	adceq	r0, r4, r0
    569c:	00040000 	andeq	r0, r4, r0
    56a0:	9f5101f3 	svcls	0x005101f3
    56a4:	000000a4 	andeq	r0, r0, r4, lsr #1
    56a8:	000000ae 	andeq	r0, r0, lr, lsr #1
    56ac:	00510001 	subseq	r0, r1, r1
	...
    56bc:	00000100 	andeq	r0, r0, r0, lsl #2
    56c0:	00000000 	andeq	r0, r0, r0
    56c4:	00000101 	andeq	r0, r0, r1, lsl #2
	...
    56d0:	00000a00 	andeq	r0, r0, r0, lsl #20
    56d4:	52000100 	andpl	r0, r0, #0, 2
    56d8:	0000000a 	andeq	r0, r0, sl
    56dc:	00000018 	andeq	r0, r0, r8, lsl r0
    56e0:	18540001 	ldmdane	r4, {r0}^
    56e4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    56e8:	03000000 	movweq	r0, #0
    56ec:	9f7f7400 	svcls	0x007f7400
    56f0:	0000001e 	andeq	r0, r0, lr, lsl r0
    56f4:	00000026 	andeq	r0, r0, r6, lsr #32
    56f8:	7f740003 	svcvc	0x00740003
    56fc:	0000669f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    5700:	00006e00 	andeq	r6, r0, r0, lsl #28
    5704:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    5708:	0000007c 	andeq	r0, r0, ip, ror r0
    570c:	0000007e 	andeq	r0, r0, lr, ror r0
    5710:	00730009 	rsbseq	r0, r3, r9
    5714:	72220077 	eorvc	r0, r2, #119	; 0x77
    5718:	7e9f1c00 	cdpvc	12, 9, cr1, cr15, cr0, {0}
    571c:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    5720:	0b000000 	bleq	5728 <__exidx_end+0x7fb>
    5724:	72007300 	andvc	r7, r0, #0, 6
    5728:	00771c00 	rsbseq	r1, r7, r0, lsl #24
    572c:	9f042322 	svcls	0x00042322
    5730:	0000007e 	andeq	r0, r0, lr, ror r0
    5734:	00000088 	andeq	r0, r0, r8, lsl #1
    5738:	00730009 	rsbseq	r0, r3, r9
    573c:	72220077 	eorvc	r0, r2, #119	; 0x77
    5740:	889f1c00 	ldmhi	pc, {sl, fp, ip}	; <UNPREDICTABLE>
    5744:	8a000000 	bhi	574c <__exidx_end+0x81f>
    5748:	0c000000 	stceq	0, cr0, [r0], {-0}
    574c:	72007300 	andvc	r7, r0, #0, 6
    5750:	00761c00 	rsbseq	r1, r6, r0, lsl #24
    5754:	22007722 	andcs	r7, r0, #8912896	; 0x880000
    5758:	00008a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    575c:	00008c00 	andeq	r8, r0, r0, lsl #24
    5760:	73000900 	movwvc	r0, #2304	; 0x900
    5764:	22007700 	andcs	r7, r0, #0, 14
    5768:	9f1c0072 	svcls	0x001c0072
    576c:	000000a4 	andeq	r0, r0, r4, lsr #1
    5770:	000000aa 	andeq	r0, r0, sl, lsr #1
    5774:	00520001 	subseq	r0, r2, r1
    5778:	00000000 	andeq	r0, r0, r0
    577c:	02000000 	andeq	r0, r0, #0
    5780:	01000000 	mrseq	r0, (UNDEF: 0)
    5784:	00000202 	andeq	r0, r0, r2, lsl #4
    5788:	01010000 	mrseq	r0, (UNDEF: 1)
	...
    5794:	00001800 	andeq	r1, r0, r0, lsl #16
    5798:	50000100 	andpl	r0, r0, r0, lsl #2
    579c:	00000018 	andeq	r0, r0, r8, lsl r0
    57a0:	0000001e 	andeq	r0, r0, lr, lsl r0
    57a4:	1e530001 	cdpne	0, 5, cr0, cr3, cr1, {0}
    57a8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    57ac:	01000000 	mrseq	r0, (UNDEF: 0)
    57b0:	001e5300 	andseq	r5, lr, r0, lsl #6
    57b4:	00200000 	eoreq	r0, r0, r0
    57b8:	00030000 	andeq	r0, r3, r0
    57bc:	209f0173 	addscs	r0, pc, r3, ror r1	; <UNPREDICTABLE>
    57c0:	26000000 	strcs	r0, [r0], -r0
    57c4:	01000000 	mrseq	r0, (UNDEF: 0)
    57c8:	008c5300 	addeq	r5, ip, r0, lsl #6
    57cc:	00960000 	addseq	r0, r6, r0
    57d0:	00010000 	andeq	r0, r1, r0
    57d4:	00009653 	andeq	r9, r0, r3, asr r6
    57d8:	00009a00 	andeq	r9, r0, r0, lsl #20
    57dc:	73000300 	movwvc	r0, #768	; 0x300
    57e0:	009a9f01 	addseq	r9, sl, r1, lsl #30
    57e4:	009e0000 	addseq	r0, lr, r0
    57e8:	00010000 	andeq	r0, r1, r0
    57ec:	0000a453 	andeq	sl, r0, r3, asr r4
    57f0:	0000aa00 	andeq	sl, r0, r0, lsl #20
    57f4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    5800:	00000001 	andeq	r0, r0, r1
    5804:	00000036 	andeq	r0, r0, r6, lsr r0
    5808:	0000008c 	andeq	r0, r0, ip, lsl #1
    580c:	20080003 	andcs	r0, r8, r3
    5810:	0000aa9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    5814:	0000ae00 	andeq	sl, r0, r0, lsl #28
    5818:	08000300 	stmdaeq	r0, {r8, r9}
    581c:	00009f20 	andeq	r9, r0, r0, lsr #30
	...
    5828:	00320000 	eorseq	r0, r2, r0
    582c:	008c0000 	addeq	r0, ip, r0
    5830:	00010000 	andeq	r0, r1, r0
    5834:	0000aa55 	andeq	sl, r0, r5, asr sl
    5838:	0000ae00 	andeq	sl, r0, r0, lsl #28
    583c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    5848:	01010001 	tsteq	r1, r1
    584c:	01010101 	tsteq	r1, r1, lsl #2
    5850:	00000001 	andeq	r0, r0, r1
    5854:	01000000 	mrseq	r0, (UNDEF: 0)
    5858:	00000001 	andeq	r0, r0, r1
    585c:	002e0000 	eoreq	r0, lr, r0
    5860:	004c0000 	subeq	r0, ip, r0
    5864:	00010000 	andeq	r0, r1, r0
    5868:	00004c53 	andeq	r4, r0, r3, asr ip
    586c:	00004e00 	andeq	r4, r0, r0, lsl #28
    5870:	72000300 	andvc	r0, r0, #0, 6
    5874:	004e9f04 	subeq	r9, lr, r4, lsl #30
    5878:	00500000 	subseq	r0, r0, r0
    587c:	00030000 	andeq	r0, r3, r0
    5880:	509f0872 	addspl	r0, pc, r2, ror r8	; <UNPREDICTABLE>
    5884:	52000000 	andpl	r0, r0, #0
    5888:	03000000 	movweq	r0, #0
    588c:	9f0c7200 	svcls	0x000c7200
    5890:	00000052 	andeq	r0, r0, r2, asr r0
    5894:	00000056 	andeq	r0, r0, r6, asr r0
    5898:	10720003 	rsbsne	r0, r2, r3
    589c:	0000569f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    58a0:	00006400 	andeq	r6, r0, r0, lsl #8
    58a4:	52000100 	andpl	r0, r0, #0, 2
    58a8:	00000066 	andeq	r0, r0, r6, rrx
    58ac:	0000006e 	andeq	r0, r0, lr, rrx
    58b0:	7c530001 	mrrcvc	0, 0, r0, r3, cr1
    58b4:	7c000000 	stcvc	0, cr0, [r0], {-0}
    58b8:	01000000 	mrseq	r0, (UNDEF: 0)
    58bc:	007c5200 	rsbseq	r5, ip, r0, lsl #4
    58c0:	007e0000 	rsbseq	r0, lr, r0
    58c4:	00030000 	andeq	r0, r3, r0
    58c8:	7e9f0472 	mrcvc	4, 4, r0, cr15, cr2, {3}
    58cc:	8c000000 	stchi	0, cr0, [r0], {-0}
    58d0:	01000000 	mrseq	r0, (UNDEF: 0)
    58d4:	00aa5200 	adceq	r5, sl, r0, lsl #4
    58d8:	00ae0000 	adceq	r0, lr, r0
    58dc:	00010000 	andeq	r0, r1, r0
    58e0:	00000053 	andeq	r0, r0, r3, asr r0
    58e4:	00000000 	andeq	r0, r0, r0
    58e8:	00000600 	andeq	r0, r0, r0, lsl #12
    58ec:	00000000 	andeq	r0, r0, r0
    58f0:	92000000 	andls	r0, r0, #0
    58f4:	06000000 	streq	r0, [r0], -r0
    58f8:	08007100 	stmdaeq	r0, {r8, ip, sp, lr}
    58fc:	929f1aff 	addsls	r1, pc, #1044480	; 0xff000
    5900:	a4000000 	strge	r0, [r0], #-0
    5904:	07000000 	streq	r0, [r0, -r0]
    5908:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    590c:	9f1aff08 	svcls	0x001aff08
    5910:	000000a4 	andeq	r0, r0, r4, lsr #1
    5914:	000000ae 	andeq	r0, r0, lr, lsr #1
    5918:	00710006 	rsbseq	r0, r1, r6
    591c:	9f1aff08 	svcls	0x001aff08
	...
    5930:	0000000e 	andeq	r0, r0, lr
    5934:	0e500001 	cdpeq	0, 5, cr0, cr0, cr1, {0}
    5938:	14000000 	strne	r0, [r0], #-0
    593c:	04000000 	streq	r0, [r0], #-0
    5940:	5001f300 	andpl	pc, r1, r0, lsl #6
    5944:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5948:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000002c 	andeq	r0, r0, ip, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	000000c8 	andeq	r0, r0, r8, asr #1
  14:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  18:	00000178 	andeq	r0, r0, r8, ror r1
  1c:	0000006c 	andeq	r0, r0, ip, rrx
  20:	000001e4 	andeq	r0, r0, r4, ror #3
  24:	000001c0 	andeq	r0, r0, r0, asr #3
	...
  30:	000000e4 	andeq	r0, r0, r4, ror #1
  34:	05db0002 	ldrbeq	r0, [fp, #2]
  38:	00040000 	andeq	r0, r4, r0
  3c:	00000000 	andeq	r0, r0, r0
		where = 1;
  40:	000003a4 	andeq	r0, r0, r4, lsr #7
		delay (1, st);
  44:	0000000c 	andeq	r0, r0, ip
		release;
  48:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
  4c:	0000002c 	andeq	r0, r0, ip, lsr #32
  50:	000003dc 	ldrdeq	r0, [r0], -ip
}
  54:	0000002a 	andeq	r0, r0, sl, lsr #32
  58:	00000408 	andeq	r0, r0, r8, lsl #8
  5c:	00000040 	andeq	r0, r0, r0, asr #32
			nq++;
  60:	00000448 	andeq	r0, r0, r8, asr #8
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
  64:	00000044 	andeq	r0, r0, r4, asr #32
  68:	00000000 	andeq	r0, r0, r0
  6c:	00000024 	andeq	r0, r0, r4, lsr #32
  70:	0000048c 	andeq	r0, r0, ip, lsl #9
  74:	00000054 	andeq	r0, r0, r4, asr r0
  78:	000004e0 	andeq	r0, r0, r0, ror #9
  7c:	00000044 	andeq	r0, r0, r4, asr #32
  80:	00000524 	andeq	r0, r0, r4, lsr #10
  84:	0000002c 	andeq	r0, r0, ip, lsr #32
  88:	00000550 	andeq	r0, r0, r0, asr r5
  8c:	00000118 	andeq	r0, r0, r8, lsl r1
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
  90:	00000668 	andeq	r0, r0, r8, ror #12
	if (!button_still_pressed (__button_list [pbutton]))
  94:	00000054 	andeq	r0, r0, r4, asr r0
  98:	000006bc 			; <UNDEFINED> instruction: 0x000006bc
  9c:	00000050 	andeq	r0, r0, r0, asr r0
  a0:	0000070c 	andeq	r0, r0, ip, lsl #14
	if (baction == NULL)
  a4:	0000002c 	andeq	r0, r0, ip, lsr #32
  a8:	00000738 	andeq	r0, r0, r8, lsr r7
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
  ac:	00000100 	andeq	r0, r0, r0, lsl #2
endthread
  b0:	00000000 	andeq	r0, r0, r0
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
  b4:	0000000c 	andeq	r0, r0, ip
  b8:	00000838 	andeq	r0, r0, r8, lsr r8
endthread
  bc:	000000bc 	strheq	r0, [r0], -ip
  c0:	000008f4 	strdeq	r0, [r0], -r4
  c4:	00000048 	andeq	r0, r0, r8, asr #32
fsm receiver {
  c8:	0000093c 	andeq	r0, r0, ip, lsr r9
  cc:	0000003c 	andeq	r0, r0, ip, lsr r0
  d0:	00000978 	andeq	r0, r0, r8, ror r9
  d4:	000000ac 	andeq	r0, r0, ip, lsr #1
        packet = tcv_rnp(Receiving, sfd);
  d8:	00000a24 	andeq	r0, r0, r4, lsr #20
  dc:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
  e0:	00000000 	andeq	r0, r0, r0
  e4:	00000024 	andeq	r0, r0, r4, lsr #32
        receivedPtr = (struct msg *)(packet + 1);
  e8:	00000000 	andeq	r0, r0, r0
  ec:	00000028 	andeq	r0, r0, r8, lsr #32
        if(receivedPtr->receiverId == nodeId) {
  f0:	00000bdc 	ldrdeq	r0, [r0], -ip
  f4:	00000268 	andeq	r0, r0, r8, ror #4
  f8:	00000000 	andeq	r0, r0, r0
            proceed Broadcast; // Proceed to handling broadcast message
  fc:	00000034 	andeq	r0, r0, r4, lsr r0
        proceed Receiving;
 100:	00000000 	andeq	r0, r0, r0
 104:	00000054 	andeq	r0, r0, r4, asr r0
        ser_outf(Receive_Msg, "Message ");
 108:	00000e44 	andeq	r0, r0, r4, asr #28
 10c:	00000064 	andeq	r0, r0, r4, rrx
	...
        ser_outf(Broadcast, "Broadcast ");
 118:	00000154 	andeq	r0, r0, r4, asr r1
        ser_outf(Show_Message, "Message from node %d (Seq %d): %s\n\r", receivedPtr->senderId, receivedPtr->sequenceNumber, receivedPtr->payload);
 11c:	1a340002 	bne	d0012c <__ccfg+0xce0184>
 120:	00040000 	andeq	r0, r4, r0
 124:	00000000 	andeq	r0, r0, r0
 128:	00000ea8 	andeq	r0, r0, r8, lsr #29
 12c:	0000003c 	andeq	r0, r0, ip, lsr r0
        tcv_endp(packet);
 130:	00000ee4 	andeq	r0, r0, r4, ror #29
 134:	00000080 	andeq	r0, r0, r0, lsl #1
        proceed Receiving;
 138:	00000f64 	andeq	r0, r0, r4, ror #30
}
 13c:	00000014 	andeq	r0, r0, r4, lsl r0
        proceed Receiving;
 140:	00000000 	andeq	r0, r0, r0
        } else if (receivedPtr->receiverId == '0' || receivedPtr->receiverId == 0) {
 144:	00000024 	andeq	r0, r0, r4, lsr #32
 148:	00000f78 	andeq	r0, r0, r8, ror pc
            proceed Broadcast; // Proceed to handling broadcast message
 14c:	00000010 	andeq	r0, r0, r0, lsl r0
}
 150:	00000f88 	andeq	r0, r0, r8, lsl #31
 154:	0000002c 	andeq	r0, r0, ip, lsr #32
 158:	00000000 	andeq	r0, r0, r0
 15c:	00000054 	andeq	r0, r0, r4, asr r0
 160:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
 164:	00000006 	andeq	r0, r0, r6
 168:	00000fbc 			; <UNDEFINED> instruction: 0x00000fbc
 16c:	000000cc 	andeq	r0, r0, ip, asr #1
 170:	00001088 	andeq	r1, r0, r8, lsl #1
 174:	00000014 	andeq	r0, r0, r4, lsl r0
fsm send(struct msg * ptr) {
 178:	0000109c 	muleq	r0, ip, r0
 17c:	00000034 	andeq	r0, r0, r4, lsr r0
        address spkt = tcv_wnp(Send_Msg, sfd, sizeof(struct msg) + 4);
 180:	000010d0 	ldrdeq	r1, [r0], -r0
 184:	00000034 	andeq	r0, r0, r4, lsr r0
 188:	00000000 	andeq	r0, r0, r0
 18c:	0000002c 	andeq	r0, r0, ip, lsr #32
 190:	00001104 	andeq	r1, r0, r4, lsl #2
        *p = ptr->senderId; p++;
 194:	00000024 	andeq	r0, r0, r4, lsr #32
 198:	00001128 	andeq	r1, r0, r8, lsr #2
        strcpy(p, ptr->payload);
 19c:	00000038 	andeq	r0, r0, r8, lsr r0
        *p = ptr->receiverId; p++;
 1a0:	00000000 	andeq	r0, r0, r0
        *p = ptr->sequenceNumber; p++;
 1a4:	00000014 	andeq	r0, r0, r4, lsl r0
        strcpy(p, ptr->payload);
 1a8:	00000000 	andeq	r0, r0, r0
        sequence++;
 1ac:	00000040 	andeq	r0, r0, r0, asr #32
 1b0:	00000000 	andeq	r0, r0, r0
 1b4:	00000018 	andeq	r0, r0, r8, lsl r0
        tcv_endp (spkt);
 1b8:	00001160 	andeq	r1, r0, r0, ror #2
        ser_outf(Send_Msg, "\n\rMessage Sent\n\r");
 1bc:	00000024 	andeq	r0, r0, r4, lsr #32
 1c0:	00000000 	andeq	r0, r0, r0
}
 1c4:	00000020 	andeq	r0, r0, r0, lsr #32
        finish;
 1c8:	00001184 	andeq	r1, r0, r4, lsl #3
}
 1cc:	0000000e 	andeq	r0, r0, lr
 1d0:	00001192 	muleq	r0, r2, r1
 1d4:	00000010 	andeq	r0, r0, r0, lsl r0
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e0:	00000000 	andeq	r0, r0, r0
fsm root {
 1e4:	00000010 	andeq	r0, r0, r0, lsl r0
 1e8:	00000000 	andeq	r0, r0, r0
 1ec:	00000006 	andeq	r0, r0, r6
 1f0:	000011a2 	andeq	r1, r0, r2, lsr #3
 1f4:	00000014 	andeq	r0, r0, r4, lsl r0
 1f8:	000011b6 			; <UNDEFINED> instruction: 0x000011b6
        sequence = 0;
 1fc:	00000004 	andeq	r0, r0, r4
        ptr = (struct Message *) umalloc(sizeof(struct msg));
 200:	000011bc 			; <UNDEFINED> instruction: 0x000011bc
        sequence = 0;
 204:	00000024 	andeq	r0, r0, r4, lsr #32
        ptr = (struct Message *) umalloc(sizeof(struct msg));
 208:	000011e0 	andeq	r1, r0, r0, ror #3
 20c:	0000009c 	muleq	r0, ip, r0
 210:	0000127c 	andeq	r1, r0, ip, ror r2
        phys_cc1350(0, CC1350_BUF_SZ);
 214:	00000050 	andeq	r0, r0, r0, asr r0
        tcv_plug(0, &plug_null);
 218:	000012cc 	andeq	r1, r0, ip, asr #5
 21c:	00000048 	andeq	r0, r0, r8, asr #32
        sfd = tcv_open(NONE, 0, 0);
 220:	00001314 	andeq	r1, r0, r4, lsl r3
 224:	00000050 	andeq	r0, r0, r0, asr r0
 228:	00000000 	andeq	r0, r0, r0
 22c:	00000058 	andeq	r0, r0, r8, asr r0
 230:	00001364 	andeq	r1, r0, r4, ror #6
            diag("unable to open TCV session");
 234:	000000a8 	andeq	r0, r0, r8, lsr #1
 238:	0000140c 	andeq	r1, r0, ip, lsl #8
            syserror(EASSERT, "no session");
 23c:	00000034 	andeq	r0, r0, r4, lsr r0
 240:	00001440 	andeq	r1, r0, r0, asr #8
        tcv_control(sfd, PHYSOPT_ON, NULL);
 244:	00000018 	andeq	r0, r0, r8, lsl r0
 248:	00000000 	andeq	r0, r0, r0
        runfsm receiver;
 24c:	00000030 	andeq	r0, r0, r0, lsr r0
 250:	00000000 	andeq	r0, r0, r0
        receiverId = 0;
 254:	00000038 	andeq	r0, r0, r8, lsr r0
 258:	00001458 	andeq	r1, r0, r8, asr r4
        ser_outf(Menu, "\n\rP2P Chat (Node #%d)\n\r"
 25c:	00000144 	andeq	r0, r0, r4, asr #2
 260:	0000159c 	muleq	r0, ip, r5
        ser_inf(Choice, "%c", &choice);
 264:	00000024 	andeq	r0, r0, r4, lsr #32
	...
        choice = toupper((unsigned char)choice);
 270:	00000104 	andeq	r0, r0, r4, lsl #2
 274:	2b7f0002 	blcs	1fc0284 <__ccfg+0x1fa02dc>
 278:	00040000 	andeq	r0, r4, r0
 27c:	00000000 	andeq	r0, r0, r0
        switch (choice) {
 280:	000015c0 	andeq	r1, r0, r0, asr #11
 284:	0000004c 	andeq	r0, r0, ip, asr #32
 288:	0000160c 	andeq	r1, r0, ip, lsl #12
                proceed Broadcast_Transmission;
 28c:	00000016 	andeq	r0, r0, r6, lsl r0
                proceed Menu;
 290:	00001622 	andeq	r1, r0, r2, lsr #12
        ser_outf(Change_ID, "\n\rNew node ID (1-25):");
 294:	0000001a 	andeq	r0, r0, sl, lsl r0
 298:	0000163c 	andeq	r1, r0, ip, lsr r6
        ser_inf(Get_ChangeID, "%d", &nodeId);
 29c:	0000000e 	andeq	r0, r0, lr
 2a0:	0000164c 	andeq	r1, r0, ip, asr #12
 2a4:	0000008c 	andeq	r0, r0, ip, lsl #1
            if (nodeId < 1 || nodeId > 25) {
 2a8:	000016d8 	ldrdeq	r1, [r0], -r8
 2ac:	00000070 	andeq	r0, r0, r0, ror r0
                ser_outf(Get_ChangeID, "\n\rInvalid ID");
 2b0:	00001748 	andeq	r1, r0, r8, asr #14
 2b4:	000000c0 	andeq	r0, r0, r0, asr #1
                proceed Change_ID;
 2b8:	00000000 	andeq	r0, r0, r0
 2bc:	0000006c 	andeq	r0, r0, ip, rrx
            proceed Menu;
 2c0:	00001808 	andeq	r1, r0, r8, lsl #16
        ser_outf(Direct_Transmission, "\n\rReceiver node ID (1-25):");
 2c4:	00000024 	andeq	r0, r0, r4, lsr #32
 2c8:	0000182c 	andeq	r1, r0, ip, lsr #16
        ser_inf(Get_ReceiverID, "%d", &receiverId);
 2cc:	00000080 	andeq	r0, r0, r0, lsl #1
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	00000070 	andeq	r0, r0, r0, ror r0
            if (receiverId < 1 || receiverId > 25) {
 2d8:	00000000 	andeq	r0, r0, r0
 2dc:	00000078 	andeq	r0, r0, r8, ror r0
                ser_outf(Get_ReceiverID, "\n\rInvalid ID");
 2e0:	000018ac 	andeq	r1, r0, ip, lsr #17
 2e4:	000000bc 	strheq	r0, [r0], -ip
                proceed Direct_Transmission;
 2e8:	00000000 	andeq	r0, r0, r0
 2ec:	0000003a 	andeq	r0, r0, sl, lsr r0
        ser_outf(Broadcast_Transmission, "\n\rMessage: ");
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	00000038 	andeq	r0, r0, r8, lsr r0
        ser_in(Receive_Msg, ptr->payload, 27);
 2f8:	00000000 	andeq	r0, r0, r0
 2fc:	0000000a 	andeq	r0, r0, sl
 300:	00001968 	andeq	r1, r0, r8, ror #18
        if(strlen(ptr->payload) >= 27) {
 304:	0000002c 	andeq	r0, r0, ip, lsr #32
 308:	00001994 	muleq	r0, r4, r9
 30c:	00000060 	andeq	r0, r0, r0, rrx
            ptr->payload[26] = '\0';
 310:	00000000 	andeq	r0, r0, r0
 314:	00000040 	andeq	r0, r0, r0, asr #32
        call send(ptr, Menu);
 318:	00000000 	andeq	r0, r0, r0
        ptr->senderId = nodeId;
 31c:	0000002c 	andeq	r0, r0, ip, lsr #32
 320:	00000000 	andeq	r0, r0, r0
        ptr->receiverId = receiverId;
 324:	0000003c 	andeq	r0, r0, ip, lsr r0
        ptr->sequenceNumber = (byte)sequence;
 328:	00000000 	andeq	r0, r0, r0
 32c:	00000006 	andeq	r0, r0, r6
        call send(ptr, Menu);
 330:	000019f4 	strdeq	r1, [r0], -r4
 334:	00000068 	andeq	r0, r0, r8, rrx
 338:	00001a5c 	andeq	r1, r0, ip, asr sl
 33c:	00000050 	andeq	r0, r0, r0, asr r0
                proceed Direct_Transmission;
 340:	00001aac 	andeq	r1, r0, ip, lsr #21
                ser_outf(Choice, "\n\rIncorrect Option.");
 344:	000000a0 	andeq	r0, r0, r0, lsr #1
 348:	00001b4c 	andeq	r1, r0, ip, asr #22
                proceed Menu;
 34c:	00000040 	andeq	r0, r0, r0, asr #32
}
 350:	00001b8c 	andeq	r1, r0, ip, lsl #23
 354:	00000034 	andeq	r0, r0, r4, lsr r0
 358:	00001bc0 	andeq	r1, r0, r0, asr #23
 35c:	0000003c 	andeq	r0, r0, ip, lsr r0
 360:	00000000 	andeq	r0, r0, r0
 364:	0000003c 	andeq	r0, r0, ip, lsr r0
 368:	00001bfc 	strdeq	r1, [r0], -ip
 36c:	00000002 	andeq	r0, r0, r2
	...
 378:	00000034 	andeq	r0, r0, r4, lsr r0
 37c:	3b260002 	blcc	98038c <__ccfg+0x9603e4>
 380:	00040000 	andeq	r0, r4, r0
 384:	00000000 	andeq	r0, r0, r0
 388:	00001bfe 	strdeq	r1, [r0], -lr
 38c:	00000002 	andeq	r0, r0, r2
 390:	00001c00 	andeq	r1, r0, r0, lsl #24
 394:	00000002 	andeq	r0, r0, r2
 398:	00001c02 	andeq	r1, r0, r2, lsl #24
 39c:	00000002 	andeq	r0, r0, r2
 3a0:	00001c04 	andeq	r1, r0, r4, lsl #24
static void devinit_uart (int devnum) {
 3a4:	00000048 	andeq	r0, r0, r8, asr #32
	...
void udelay (volatile word n) {
 3b0:	00000014 	andeq	r0, r0, r4, lsl r0
 3b4:	3c7a0002 	ldclcc	0, cr0, [sl], #-8
	while (n) {
 3b8:	00040000 	andeq	r0, r4, r0
	...
	while (n--);
 3c8:	00000024 	andeq	r0, r0, r4, lsr #32
 3cc:	3e470002 	cdpcc	0, 4, cr0, cr7, cr2, {0}
		n--;
 3d0:	00040000 	andeq	r0, r4, r0
	...
void mdelay (volatile word n) {
 3dc:	00000002 	andeq	r0, r0, r2
 3e0:	00000000 	andeq	r0, r0, r0
	while (n) {
 3e4:	00000058 	andeq	r0, r0, r8, asr r0
	...
		udelay (999);
 3f0:	00000024 	andeq	r0, r0, r4, lsr #32
 3f4:	408b0002 	addmi	r0, fp, r2
		n--;
 3f8:	00040000 	andeq	r0, r4, r0
	...
 404:	000000d4 	ldrdeq	r0, [r0], -r4
void __pi_ondomain (lword d) {
 408:	00000000 	andeq	r0, r0, r0
 40c:	00000038 	andeq	r0, r0, r8, lsr r0
	...
			__pi_systat.effpdm = 1;
 418:	0000008c 	andeq	r0, r0, ip, lsl #1
	PRCMPowerDomainOn (d);
 41c:	42890002 	addmi	r0, r9, #2
 420:	00040000 	andeq	r0, r4, r0
 424:	00000000 	andeq	r0, r0, r0
 428:	00001c54 	andeq	r1, r0, r4, asr ip
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
 42c:	00000030 	andeq	r0, r0, r0, lsr r0
 430:	00001c84 	andeq	r1, r0, r4, lsl #25
 434:	00000034 	andeq	r0, r0, r4, lsr r0
	__pi_systat.ondmns |= d;
 438:	00001cb8 			; <UNDEFINED> instruction: 0x00001cb8
 43c:	0000001c 	andeq	r0, r0, ip, lsl r0
}
 440:	00001cd4 	ldrdeq	r1, [r0], -r4
 444:	00000058 	andeq	r0, r0, r8, asr r0
void __pi_offdomain (lword d) {
 448:	00001d2c 	andeq	r1, r0, ip, lsr #26
	PRCMPowerDomainOff (d);
 44c:	00000044 	andeq	r0, r0, r4, asr #32
 450:	00001d70 	andeq	r1, r0, r0, ror sp
 454:	00000024 	andeq	r0, r0, r4, lsr #32
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
 458:	00001d94 	muleq	r0, r4, sp
 45c:	00000014 	andeq	r0, r0, r4, lsl r0
 460:	00001da8 	andeq	r1, r0, r8, lsr #27
 464:	00000014 	andeq	r0, r0, r4, lsl r0
	if (d & PRCM_DOMAIN_RFCORE) {
 468:	00000000 	andeq	r0, r0, r0
 46c:	00000068 	andeq	r0, r0, r8, rrx
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
 470:	00000000 	andeq	r0, r0, r0
			__pi_systat.effpdm = __pi_systat.reqpdm;
 474:	0000012c 	andeq	r0, r0, ip, lsr #2
 478:	00000000 	andeq	r0, r0, r0
	__pi_systat.ondmns &= ~d;
 47c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 480:	00000000 	andeq	r0, r0, r0
}
 484:	00000002 	andeq	r0, r0, r2
 488:	00000000 	andeq	r0, r0, r0
void __pi_syserror (word ec, const char *m) {
 48c:	00000004 	andeq	r0, r0, r4
	diag ("SYSERR: %x, %s", ec, m);
 490:	00000000 	andeq	r0, r0, r0
 494:	00000014 	andeq	r0, r0, r4, lsl r0
  __ASM volatile ("cpsid i" : : : "memory");
 498:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 49c:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
 4a8:	0000001c 	andeq	r0, r0, ip, lsl r0
		all_leds_blink;
 4ac:	4a020002 	bmi	804bc <__ccfg+0x60514>
 4b0:	00040000 	andeq	r0, r4, r0
 4b4:	00000000 	andeq	r0, r0, r0
 4b8:	00001dbc 			; <UNDEFINED> instruction: 0x00001dbc
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 4bc:	00000054 	andeq	r0, r0, r4, asr r0
	...
 4c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4cc:	4b500002 	blmi	14004dc <__ccfg+0x13e0534>
 4d0:	00040000 	andeq	r0, r4, r0
	while (1) {
 4d4:	00000000 	andeq	r0, r0, r0
 4d8:	00001e10 	andeq	r1, r0, r0, lsl lr
 4dc:	00000060 	andeq	r0, r0, r0, rrx
	...
	setdel = __pi_mintk - __pi_old;
 4e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4ec:	4c9e0002 	ldcmi	0, cr0, [lr], {2}
 4f0:	00040000 	andeq	r0, r4, r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 4f4:	00000000 	andeq	r0, r0, r0
 4f8:	00001e70 	andeq	r1, r0, r0, ror lr
 4fc:	00000078 	andeq	r0, r0, r8, ror r0
	...
	sti_tim;
 508:	0000006c 	andeq	r0, r0, ip, rrx
}
 50c:	4dad0002 	stcmi	0, cr0, [sp, #8]!
 510:	00040000 	andeq	r0, r4, r0
 514:	00000000 	andeq	r0, r0, r0
 518:	00001ee8 	andeq	r1, r0, r8, ror #29
 51c:	00000020 	andeq	r0, r0, r0, lsr #32
 520:	00001f08 	andeq	r1, r0, r8, lsl #30
	cli_aux;
 524:	00000190 	muleq	r0, r0, r1
 528:	00002098 	muleq	r0, r8, r0
 52c:	00000048 	andeq	r0, r0, r8, asr #32
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 530:	000020e0 	andeq	r2, r0, r0, ror #1
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
 534:	00000024 	andeq	r0, r0, r4, lsr #32
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 538:	00002104 	andeq	r2, r0, r4, lsl #2
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
 53c:	00000060 	andeq	r0, r0, r0, rrx
	sti_aux;
 540:	00002164 	andeq	r2, r0, r4, ror #2
}
 544:	00000038 	andeq	r0, r0, r8, lsr r0
 548:	0000219c 	muleq	r0, ip, r1
 54c:	000001a8 	andeq	r0, r0, r8, lsr #3
void AONRTCIntHandler () {
 550:	00002344 	andeq	r2, r0, r4, asr #6
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
 554:	000000c4 	andeq	r0, r0, r4, asr #1
 558:	00002408 	andeq	r2, r0, r8, lsl #8
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
 55c:	000001e0 	andeq	r0, r0, r0, ror #3
		if (__pi_utims [0] == 0)
 560:	000025e8 	andeq	r2, r0, r8, ror #11
 564:	0000006c 	andeq	r0, r0, ip, rrx
		if (*(__pi_utims [0])) {
 568:	00002654 	andeq	r2, r0, r4, asr r6
 56c:	00000174 	andeq	r0, r0, r4, ror r1
	...
		if (*(__pi_utims [1])) {
 578:	00000044 	andeq	r0, r0, r4, asr #32
			aux_timer_inactive = 0;
 57c:	67d60002 	ldrbvs	r0, [r6, r2]
			(*(__pi_utims [1]))--;
 580:	00040000 	andeq	r0, r4, r0
		if (__pi_utims [2] == 0)
 584:	00000000 	andeq	r0, r0, r0
		if (*(__pi_utims [2])) {
 588:	000027c8 	andeq	r2, r0, r8, asr #15
			(*(__pi_utims [2]))--;
 58c:	00000024 	andeq	r0, r0, r4, lsr #32
		if (__pi_utims [3] != 0) {
 590:	000027ec 	andeq	r2, r0, ip, ror #15
			if (*(__pi_utims [3])) {
 594:	00000024 	andeq	r0, r0, r4, lsr #32
				aux_timer_inactive = 0;
 598:	00002810 	andeq	r2, r0, r0, lsl r8
				(*(__pi_utims [3]))--;
 59c:	00000008 	andeq	r0, r0, r8
	if (__pi_systat.ledsts) {
 5a0:	00002818 	andeq	r2, r0, r8, lsl r8
 5a4:	00000004 	andeq	r0, r0, r4
		if (__pi_systat.ledblc++ == 0) {
 5a8:	0000281c 	andeq	r2, r0, ip, lsl r8
 5ac:	00000004 	andeq	r0, r0, r4
			if (__pi_systat.ledblk) {
 5b0:	00002820 	andeq	r2, r0, r0, lsr #16
 5b4:	00000048 	andeq	r0, r0, r8, asr #32
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 5c0:	0000002c 	andeq	r0, r0, ip, lsr #32
 5c4:	6b9e0002 	blvs	fe7805d4 <_estack+0xde77b5d4>
				if (__pi_systat.ledsts & 0x2)
 5c8:	00040000 	andeq	r0, r4, r0
 5cc:	00000000 	andeq	r0, r0, r0
 5d0:	00002868 	andeq	r2, r0, r8, ror #16
				if (__pi_systat.ledsts & 0x4)
 5d4:	00000020 	andeq	r0, r0, r0, lsr #32
				__pi_systat.ledblk = 0;
 5d8:	00002888 	andeq	r2, r0, r8, lsl #17
 5dc:	00000224 	andeq	r0, r0, r4, lsr #4
			if (__pi_systat.fstblk)
 5e0:	00002aac 	andeq	r2, r0, ip, lsr #21
 5e4:	00000050 	andeq	r0, r0, r0, asr r0
	...
		cli_tim;
 5f0:	0000001c 	andeq	r0, r0, ip, lsl r0
		__pi_new += setdel;
 5f4:	6ebb0002 	cdpvs	0, 11, cr0, cr11, cr2, {0}
		cli_tim;
 5f8:	00040000 	andeq	r0, r4, r0
		__pi_new += setdel;
 5fc:	00000000 	andeq	r0, r0, r0
 600:	00002afc 	strdeq	r2, [r0], -ip
 604:	00000392 	muleq	r0, r2, r3
	...
}
 610:	0000001c 	andeq	r0, r0, ip, lsl r0
		aux_timer_inactive = 1;
 614:	71580002 	cmpvc	r8, r2
 618:	00040000 	andeq	r0, r4, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 61c:	00000000 	andeq	r0, r0, r0
 620:	00002e90 	muleq	r0, r0, lr
 624:	00000070 	andeq	r0, r0, r0, ror r0
	...
 630:	0000001c 	andeq	r0, r0, ip, lsl r0
				if (__pi_systat.ledsts & 0x4)
 634:	736f0002 	cmnvc	pc, #2
				__pi_systat.ledblk = 1;
 638:	00040000 	andeq	r0, r4, r0
 63c:	00000000 	andeq	r0, r0, r0
		if (aux_timer_inactive) {
 640:	00002f00 	andeq	r2, r0, r0, lsl #30
			cli_aux;
 644:	0000011c 	andeq	r0, r0, ip, lsl r1
	...
 650:	00000014 	andeq	r0, r0, r4, lsl r0
 654:	759a0002 	ldrvc	r0, [sl, #2]
 658:	00040000 	andeq	r0, r4, r0
	...
word tci_update_delay_ticks (Boolean force) {
 668:	00000024 	andeq	r0, r0, r4, lsr #32
	cli_tim;
 66c:	89a10002 	stmibhi	r1!, {r1}
 670:	00040000 	andeq	r0, r4, r0
	if (setdel) {
 674:	00000000 	andeq	r0, r0, r0
		if (force) {
 678:	0000301c 	andeq	r3, r0, ip, lsl r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 67c:	00000028 	andeq	r0, r0, r8, lsr #32
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
 680:	00000000 	andeq	r0, r0, r0
 684:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 690:	0000001c 	andeq	r0, r0, ip, lsl r0
 694:	8b2f0002 	blhi	bc06a4 <__ccfg+0xba06fc>
 698:	00040000 	andeq	r0, r4, r0
 69c:	00000000 	andeq	r0, r0, r0
}
 6a0:	00003044 	andeq	r3, r0, r4, asr #32
		sti_tim;
 6a4:	00000030 	andeq	r0, r0, r0, lsr r0
	...
		return YES;
 6b0:	00000024 	andeq	r0, r0, r4, lsr #32
 6b4:	8c080002 	stchi	0, cr0, [r8], {2}
 6b8:	00040000 	andeq	r0, r4, r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
 6bc:	00000000 	andeq	r0, r0, r0
	UARTDisable (UART0_BASE);
 6c0:	00003074 	andeq	r3, r0, r4, ror r0
 6c4:	00000020 	andeq	r0, r0, r0, lsr #32
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
 6c8:	00003094 	muleq	r0, r4, r0
	UARTDisable (UART0_BASE);
 6cc:	00000018 	andeq	r0, r0, r8, lsl r0
	...
	UARTConfigSetExpClk (UART0_BASE,
 6d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 6dc:	8d4f0002 	stclhi	0, cr0, [pc, #-8]	; 6dc <__pi_uart_setrate+0x20>
 6e0:	00040000 	andeq	r0, r4, r0
}
 6e4:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 6e8:	000030ac 	andeq	r3, r0, ip, lsr #1
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
 6ec:	00000008 	andeq	r0, r0, r8
 6f0:	00000000 	andeq	r0, r0, r0
 6f4:	00000006 	andeq	r0, r0, r6
	urates [0] = rate;
 6f8:	000030b4 	strheq	r3, [r0], -r4
}
 6fc:	00000008 	andeq	r0, r0, r8
 700:	00000000 	andeq	r0, r0, r0
 704:	00000006 	andeq	r0, r0, r6
 708:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 70c:	00000008 	andeq	r0, r0, r8
	...
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
 718:	00000064 	andeq	r0, r0, r4, rrx
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
 71c:	8e890002 	cdphi	0, 8, cr0, cr9, cr2, {0}
 720:	00040000 	andeq	r0, r4, r0
	__pi_uart_setrate (urates [0], __pi_uart);
 724:	00000000 	andeq	r0, r0, r0
 728:	000030bc 	strheq	r3, [r0], -ip
 72c:	0000005c 	andeq	r0, r0, ip, asr r0
 730:	00003118 	andeq	r3, r0, r8, lsl r1
 734:	0000002c 	andeq	r0, r0, ip, lsr #32
	switch (operation) {
 738:	00000000 	andeq	r0, r0, r0
static int ioreq_uart_a (int operation, char *buf, int len) {
 73c:	00000090 	muleq	r0, r0, r0
 740:	00003144 	andeq	r3, r0, r4, asr #2
	switch (operation) {
 744:	00000018 	andeq	r0, r0, r8, lsl r0
 748:	0000315c 	andeq	r3, r0, ip, asr r1
 74c:	00000060 	andeq	r0, r0, r0, rrx
				len--;
 750:	000031bc 			; <UNDEFINED> instruction: 0x000031bc
				*buf++ = uart_a_read;
 754:	00000034 	andeq	r0, r0, r4, lsr r0
			while (len && uart_a_char_available) {
 758:	00000000 	andeq	r0, r0, r0
 75c:	00000038 	andeq	r0, r0, r8, lsr r0
			if (len != operation) {
 760:	00000000 	andeq	r0, r0, r0
}
 764:	0000000c 	andeq	r0, r0, ip
 768:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
 76c:	00000034 	andeq	r0, r0, r4, lsr r0
			if (uart_a_char_available) {
 770:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
 774:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
			if (uart_a_char_available) {
 780:	00000054 	andeq	r0, r0, r4, asr r0
				uart_a_enable_int;
 784:	974c0002 	strbls	r0, [ip, -r2]
 788:	00040000 	andeq	r0, r4, r0
	...
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
 794:	00000014 	andeq	r0, r0, r4, lsl r0
			return -2;
 798:	000031f0 	strdeq	r3, [r0], -r0
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
 79c:	00000028 	andeq	r0, r0, r8, lsr #32
				uart_a_write (*buf);
 7a0:	00003218 	andeq	r3, r0, r8, lsl r2
				len--;
 7a4:	0000004c 	andeq	r0, r0, ip, asr #32
			while (len && uart_a_room_in_tx) {
 7a8:	00003264 	andeq	r3, r0, r4, ror #4
 7ac:	00000150 	andeq	r0, r0, r0, asr r1
			if (len != operation) {
 7b0:	000033b4 			; <UNDEFINED> instruction: 0x000033b4
			uart_a_disable_int;
 7b4:	00000118 	andeq	r0, r0, r8, lsl r1
 7b8:	000034cc 	andeq	r3, r0, ip, asr #9
 7bc:	00000020 	andeq	r0, r0, r0, lsr #32
			if (uart_a_room_in_tx) {
 7c0:	00000000 	andeq	r0, r0, r0
				uart_a_enable_int;
 7c4:	00000060 	andeq	r0, r0, r0, rrx
 7c8:	000034ec 	andeq	r3, r0, ip, ror #9
 7cc:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
			if (uart_a_room_in_tx) {
 7d8:	00000024 	andeq	r0, r0, r4, lsr #32
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
 7dc:	a2040002 	andge	r0, r4, #2
 7e0:	00040000 	andeq	r0, r4, r0
			uart_a_enable_int;
 7e4:	00000000 	andeq	r0, r0, r0
 7e8:	00003508 	andeq	r3, r0, r8, lsl #10
 7ec:	000000d4 	ldrdeq	r0, [r0], -r4
 7f0:	000035dc 	ldrdeq	r3, [r0], -ip
			return 0;
 7f4:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
				if (__pi_uart_setrate (*((word*)buf),
 800:	000000b4 	strheq	r0, [r0], -r4
 804:	a40f0002 	strge	r0, [pc], #-2	; 80c <ioreq_uart_a+0xd4>
				syserror (EREQPAR, "uar");
 808:	00040000 	andeq	r0, r4, r0
			syserror (ENOOPER, "uai");
 80c:	00000000 	andeq	r0, r0, r0
			if (len == UART_CNTRL_GETRATE) {
 810:	00003680 	andeq	r3, r0, r0, lsl #13
				return 1;
 814:	0000007c 	andeq	r0, r0, ip, ror r0
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
 818:	000036fc 	strdeq	r3, [r0], -ip
			syserror (ENOOPER, "uai");
 81c:	000000ac 	andeq	r0, r0, ip, lsr #1
 820:	000037a8 	andeq	r3, r0, r8, lsr #15
 824:	0000005c 	andeq	r0, r0, ip, asr r0
 828:	00003804 	andeq	r3, r0, r4, lsl #16
 82c:	00000018 	andeq	r0, r0, r8, lsl r0
 830:	00000000 	andeq	r0, r0, r0
 834:	00000010 	andeq	r0, r0, r0, lsl r0
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
 838:	0000381c 	andeq	r3, r0, ip, lsl r8
void UART0IntHandler () {
 83c:	00000010 	andeq	r0, r0, r0, lsl r0
 840:	0000382c 	andeq	r3, r0, ip, lsr #16
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
 844:	00000014 	andeq	r0, r0, r4, lsl r0
 848:	00003840 	andeq	r3, r0, r0, asr #16
 84c:	00000064 	andeq	r0, r0, r4, rrx
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
 850:	000038a4 	andeq	r3, r0, r4, lsr #17
 854:	00000014 	andeq	r0, r0, r4, lsl r0
		RISE_N_SHINE;
 858:	000038b8 			; <UNDEFINED> instruction: 0x000038b8
 85c:	00000014 	andeq	r0, r0, r4, lsl r0
 860:	000038cc 	andeq	r3, r0, ip, asr #17
		i_trigger (devevent (UART_A, READ));
 864:	00000014 	andeq	r0, r0, r4, lsl r0
 868:	000038e0 	andeq	r3, r0, r0, ror #17
 86c:	00000028 	andeq	r0, r0, r8, lsr #32
 870:	00003908 	andeq	r3, r0, r8, lsl #18
 874:	00000010 	andeq	r0, r0, r0, lsl r0
 878:	00003918 	andeq	r3, r0, r8, lsl r9
 87c:	0000002c 	andeq	r0, r0, ip, lsr #32
 880:	00003944 	andeq	r3, r0, r4, asr #18
 884:	00000014 	andeq	r0, r0, r4, lsl r0
 888:	00003958 	andeq	r3, r0, r8, asr r9
 88c:	00000014 	andeq	r0, r0, r4, lsl r0
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
 890:	0000396c 	andeq	r3, r0, ip, ror #18
 894:	00000110 	andeq	r0, r0, r0, lsl r1
 898:	00003a7c 	andeq	r3, r0, ip, ror sl
 89c:	00000064 	andeq	r0, r0, r4, rrx
		i_trigger (devevent (UART_A, WRITE));
 8a0:	00003ae0 	andeq	r3, r0, r0, ror #21
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
 8a4:	00000028 	andeq	r0, r0, r8, lsr #32
 8a8:	00003b08 	andeq	r3, r0, r8, lsl #22
		RISE_N_SHINE;
 8ac:	00000150 	andeq	r0, r0, r0, asr r1
	...
		i_trigger (devevent (UART_A, WRITE));
 8b8:	0000003c 	andeq	r0, r0, ip, lsr r0
 8bc:	af2a0002 	svcge	0x002a0002
 8c0:	00040000 	andeq	r0, r4, r0
	...
 8cc:	000000f4 	strdeq	r0, [r0], -r4
 8d0:	00003c58 	andeq	r3, r0, r8, asr ip
 8d4:	00000220 	andeq	r0, r0, r0, lsr #4
 8d8:	00003e78 	andeq	r3, r0, r8, ror lr
 8dc:	00000060 	andeq	r0, r0, r0, rrx
 8e0:	00000000 	andeq	r0, r0, r0
}
 8e4:	00000078 	andeq	r0, r0, r8, ror r0
 8e8:	00003ed8 	ldrdeq	r3, [r0], -r8
 8ec:	00000018 	andeq	r0, r0, r8, lsl r0
	...
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
 8f8:	00000044 	andeq	r0, r0, r4, asr #32
 8fc:	b8510002 	ldmdalt	r1, {r1}^
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 900:	00040000 	andeq	r0, r4, r0
	...
 90c:	00000010 	andeq	r0, r0, r0, lsl r0
 910:	00000000 	andeq	r0, r0, r0
		bn = BUTTON_GPIO (__button_list [i]);
 914:	00000018 	andeq	r0, r0, r8, lsl r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 918:	00003ef0 	strdeq	r3, [r0], -r0
 91c:	0000004c 	andeq	r0, r0, ip, asr #32
 920:	00000000 	andeq	r0, r0, r0
 924:	00000030 	andeq	r0, r0, r0, lsr r0
 928:	00003f3c 	andeq	r3, r0, ip, lsr pc
}
 92c:	0000006c 	andeq	r0, r0, ip, rrx
 930:	00003fa8 	andeq	r3, r0, r8, lsr #31
 934:	00000016 	andeq	r0, r0, r6, lsl r0
	...
	for (i = 0; i < N_PINLIST; i++) {
 940:	00000044 	andeq	r0, r0, r4, asr #32
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
 944:	bc210002 	stclt	0, cr0, [r1], #-8
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 948:	00040000 	andeq	r0, r4, r0
	for (i = 0; i < N_PINLIST; i++) {
 94c:	00000000 	andeq	r0, r0, r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
 950:	00003fc0 	andeq	r3, r0, r0, asr #31
 954:	00000028 	andeq	r0, r0, r8, lsr #32
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 958:	00003fe8 	andeq	r3, r0, r8, ror #31
 95c:	00000008 	andeq	r0, r0, r8
 960:	00000000 	andeq	r0, r0, r0
 964:	00000022 	andeq	r0, r0, r2, lsr #32
  __ASM volatile ("cpsie i" : : : "memory");
 968:	00000000 	andeq	r0, r0, r0
}
 96c:	0000002e 	andeq	r0, r0, lr, lsr #32
 970:	00000000 	andeq	r0, r0, r0
 974:	00000034 	andeq	r0, r0, r4, lsr r0
void GPIOIntHandler () {
 978:	00000000 	andeq	r0, r0, r0
if (buttons_int) {
 97c:	00000040 	andeq	r0, r0, r0, asr #32
	...
	buttons_disable ();
 988:	0000001c 	andeq	r0, r0, ip, lsl r0
	i_trigger ((aword)&__button_list);
 98c:	c1cc0002 	bicgt	r0, ip, r2
 990:	00040000 	andeq	r0, r4, r0
 994:	00000000 	andeq	r0, r0, r0
 998:	00003ff0 	strdeq	r3, [r0], -r0
 99c:	000000a6 	andeq	r0, r0, r6, lsr #1
	...
 9a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 9ac:	c3280002 			; <UNDEFINED> instruction: 0xc3280002
 9b0:	00040000 	andeq	r0, r4, r0
 9b4:	00000000 	andeq	r0, r0, r0
 9b8:	00004098 	muleq	r0, r8, r0
	RISE_N_SHINE;
 9bc:	000000ae 	andeq	r0, r0, lr, lsr #1
	...
if (pin_sensor_int) {
 9c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 9cc:	c4650002 	strbtgt	r0, [r5], #-2
	i_trigger ((aword)(&__input_pins));
 9d0:	00040000 	andeq	r0, r4, r0
 9d4:	00000000 	andeq	r0, r0, r0
 9d8:	00004148 	andeq	r4, r0, r8, asr #2
 9dc:	00000014 	andeq	r0, r0, r4, lsl r0
	...
 9e8:	00000014 	andeq	r0, r0, r4, lsl r0
 9ec:	c5290002 	strgt	r0, [r9, #-2]!
 9f0:	00040000 	andeq	r0, r4, r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	000000d8 	ldrdeq	r0, [r0], -r8
       4:	0000013a 	andeq	r0, r0, sl, lsr r1
       8:	00000140 	andeq	r0, r0, r0, asr #2
       c:	00000150 	andeq	r0, r0, r0, asr r1
      10:	00000156 	andeq	r0, r0, r6, asr r1
      14:	00000178 	andeq	r0, r0, r8, ror r1
	...
      20:	00000180 	andeq	r0, r0, r0, lsl #3
      24:	00000182 	andeq	r0, r0, r2, lsl #3
      28:	00000184 	andeq	r0, r0, r4, lsl #3
      2c:	00000186 	andeq	r0, r0, r6, lsl #3
      30:	00000188 	andeq	r0, r0, r8, lsl #3
      34:	000001c4 	andeq	r0, r0, r4, asr #3
      38:	000001c8 	andeq	r0, r0, r8, asr #3
      3c:	000001cc 	andeq	r0, r0, ip, asr #3
	...
		release;
      48:	000001fa 	strdeq	r0, [r0], -sl
      4c:	0000034e 	andeq	r0, r0, lr, asr #6
      50:	00000354 	andeq	r0, r0, r4, asr r3
      54:	00000358 	andeq	r0, r0, r8, asr r3
	...
			nq++;
      60:	00000264 	andeq	r0, r0, r4, ror #4
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	00000294 	muleq	r0, r4, r2
      68:	0000033e 	andeq	r0, r0, lr, lsr r3
      6c:	0000034e 	andeq	r0, r0, lr, asr #6
	...
      78:	000000c8 	andeq	r0, r0, r8, asr #1
      7c:	00000178 	andeq	r0, r0, r8, ror r1
      80:	00000178 	andeq	r0, r0, r8, ror r1
      84:	000001e4 	andeq	r0, r0, r4, ror #3
      88:	000001e4 	andeq	r0, r0, r4, ror #3
      8c:	000003a4 	andeq	r0, r0, r4, lsr #7
	...
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      98:	0000049a 	muleq	r0, sl, r4
      9c:	0000049e 	muleq	r0, lr, r4
	if (!button_still_pressed (__button_list [pbutton]))
      a0:	0000049e 	muleq	r0, lr, r4
	if (baction == NULL)
      a4:	0000049e 	muleq	r0, lr, r4
      a8:	000004a2 	andeq	r0, r0, r2, lsr #9
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	000004a6 	andeq	r0, r0, r6, lsr #9
	...
      b8:	0000049e 	muleq	r0, lr, r4
endthread
      bc:	000004a0 	andeq	r0, r0, r0, lsr #9
      c0:	000004a6 	andeq	r0, r0, r6, lsr #9
      c4:	000004aa 	andeq	r0, r0, sl, lsr #9
	...
fsm receiver {
      d0:	000004f2 	strdeq	r0, [r0], -r2
      d4:	000004f6 	strdeq	r0, [r0], -r6
        packet = tcv_rnp(Receiving, sfd);
      d8:	000004f8 	strdeq	r0, [r0], -r8
      dc:	000004fa 	strdeq	r0, [r0], -sl
      e0:	000004fc 	strdeq	r0, [r0], -ip
      e4:	00000504 	andeq	r0, r0, r4, lsl #10
	...
        if(receivedPtr->receiverId == nodeId) {
      f0:	0000052e 	andeq	r0, r0, lr, lsr #10
      f4:	00000534 	andeq	r0, r0, r4, lsr r5
      f8:	00000536 	andeq	r0, r0, r6, lsr r5
            proceed Broadcast; // Proceed to handling broadcast message
      fc:	0000053c 	andeq	r0, r0, ip, lsr r5
	...
        ser_outf(Receive_Msg, "Message ");
     108:	00000560 	andeq	r0, r0, r0, ror #10
     10c:	000005ea 	andeq	r0, r0, sl, ror #11
        proceed Show_Message;
     110:	00000612 	andeq	r0, r0, r2, lsl r6
        ser_outf(Broadcast, "Broadcast ");
     114:	00000668 	andeq	r0, r0, r8, ror #12
	...
        ser_outf(Show_Message, "Message from node %d (Seq %d): %s\n\r", receivedPtr->senderId, receivedPtr->sequenceNumber, receivedPtr->payload);
     120:	000006e2 	andeq	r0, r0, r2, ror #13
     124:	000006e4 	andeq	r0, r0, r4, ror #13
     128:	000006e6 	andeq	r0, r0, r6, ror #13
     12c:	000006f8 	strdeq	r0, [r0], -r8
	...
        proceed Receiving;
     138:	0000070c 	andeq	r0, r0, ip, lsl #14
}
     13c:	0000070e 	andeq	r0, r0, lr, lsl #14
        proceed Receiving;
     140:	00000710 	andeq	r0, r0, r0, lsl r7
        } else if (receivedPtr->receiverId == '0' || receivedPtr->receiverId == 0) {
     144:	00000718 	andeq	r0, r0, r8, lsl r7
	...
}
     150:	00000838 	andeq	r0, r0, r8, lsr r8
     154:	0000083c 	andeq	r0, r0, ip, lsr r8
     158:	0000083e 	andeq	r0, r0, lr, lsr r8
     15c:	00000842 	andeq	r0, r0, r2, asr #16
	...
     168:	000008a0 	andeq	r0, r0, r0, lsr #17
     16c:	000008a4 	andeq	r0, r0, r4, lsr #17
     170:	000008b6 			; <UNDEFINED> instruction: 0x000008b6
     174:	000008e2 	andeq	r0, r0, r2, ror #17
	...
        address spkt = tcv_wnp(Send_Msg, sfd, sizeof(struct msg) + 4);
     180:	000008f4 	strdeq	r0, [r0], -r4
     184:	000008f4 	strdeq	r0, [r0], -r4
     188:	000008f6 	strdeq	r0, [r0], -r6
     18c:	000008f8 	strdeq	r0, [r0], -r8
	...
        *p = ptr->senderId; p++;
     198:	000008f8 	strdeq	r0, [r0], -r8
        strcpy(p, ptr->payload);
     19c:	000008fa 	strdeq	r0, [r0], -sl
        *p = ptr->receiverId; p++;
     1a0:	000008fc 	strdeq	r0, [r0], -ip
        *p = ptr->sequenceNumber; p++;
     1a4:	000008fe 	strdeq	r0, [r0], -lr
        strcpy(p, ptr->payload);
     1a8:	00000904 	andeq	r0, r0, r4, lsl #18
        sequence++;
     1ac:	0000090c 	andeq	r0, r0, ip, lsl #18
     1b0:	00000916 	andeq	r0, r0, r6, lsl r9
     1b4:	00000918 	andeq	r0, r0, r8, lsl r9
        tcv_endp (spkt);
     1b8:	00000924 	andeq	r0, r0, r4, lsr #18
        ser_outf(Send_Msg, "\n\rMessage Sent\n\r");
     1bc:	00000928 	andeq	r0, r0, r8, lsr #18
	...
        finish;
     1c8:	0000093c 	andeq	r0, r0, ip, lsr r9
}
     1cc:	0000093c 	andeq	r0, r0, ip, lsr r9
     1d0:	0000093e 	andeq	r0, r0, lr, lsr r9
     1d4:	00000940 	andeq	r0, r0, r0, asr #18
	...
     1e0:	00000942 	andeq	r0, r0, r2, asr #18
fsm root {
     1e4:	00000944 	andeq	r0, r0, r4, asr #18
     1e8:	00000946 	andeq	r0, r0, r6, asr #18
     1ec:	00000948 	andeq	r0, r0, r8, asr #18
     1f0:	00000952 	andeq	r0, r0, r2, asr r9
     1f4:	00000956 	andeq	r0, r0, r6, asr r9
     1f8:	00000960 	andeq	r0, r0, r0, ror #18
        sequence = 0;
     1fc:	00000964 	andeq	r0, r0, r4, ror #18
	...
        ptr = (struct Message *) umalloc(sizeof(struct msg));
     208:	00000a54 	andeq	r0, r0, r4, asr sl
     20c:	00000a56 	andeq	r0, r0, r6, asr sl
     210:	00000a58 	andeq	r0, r0, r8, asr sl
        phys_cc1350(0, CC1350_BUF_SZ);
     214:	00000a58 	andeq	r0, r0, r8, asr sl
        tcv_plug(0, &plug_null);
     218:	00000a5a 	andeq	r0, r0, sl, asr sl
     21c:	00000a5e 	andeq	r0, r0, lr, asr sl
        sfd = tcv_open(NONE, 0, 0);
     220:	00000a68 	andeq	r0, r0, r8, ror #20
     224:	00000a6a 	andeq	r0, r0, sl, ror #20
	...
     230:	00000a58 	andeq	r0, r0, r8, asr sl
            diag("unable to open TCV session");
     234:	00000a5a 	andeq	r0, r0, sl, asr sl
     238:	00000a5e 	andeq	r0, r0, lr, asr sl
            syserror(EASSERT, "no session");
     23c:	00000a68 	andeq	r0, r0, r8, ror #20
     240:	00000a6a 	andeq	r0, r0, sl, ror #20
        tcv_control(sfd, PHYSOPT_ON, NULL);
     244:	00000aa4 	andeq	r0, r0, r4, lsr #21
	...
        runfsm receiver;
     250:	00000a62 	andeq	r0, r0, r2, ror #20
        receiverId = 0;
     254:	00000a68 	andeq	r0, r0, r8, ror #20
     258:	00000a88 	andeq	r0, r0, r8, lsl #21
        ser_outf(Menu, "\n\rP2P Chat (Node #%d)\n\r"
     25c:	00000a90 	muleq	r0, r0, sl
	...
        ser_inf(Choice, "%c", &choice);
     268:	00000a90 	muleq	r0, r0, sl
     26c:	00000a94 	muleq	r0, r4, sl
        choice = toupper((unsigned char)choice);
     270:	00000a96 	muleq	r0, r6, sl
     274:	00000a9c 	muleq	r0, ip, sl
	...
        switch (choice) {
     280:	00000aa4 	andeq	r0, r0, r4, lsr #21
     284:	00000aa6 	andeq	r0, r0, r6, lsr #21
     288:	00000aaa 	andeq	r0, r0, sl, lsr #21
                proceed Broadcast_Transmission;
     28c:	00000aae 	andeq	r0, r0, lr, lsr #21
	...
        ser_outf(Change_ID, "\n\rNew node ID (1-25):");
     298:	00000aa6 	andeq	r0, r0, r6, lsr #21
        ser_inf(Get_ChangeID, "%d", &nodeId);
     29c:	00000aa8 	andeq	r0, r0, r8, lsr #21
     2a0:	00000aae 	andeq	r0, r0, lr, lsr #21
     2a4:	00000ab2 			; <UNDEFINED> instruction: 0x00000ab2
	...
                ser_outf(Get_ChangeID, "\n\rInvalid ID");
     2b0:	00000ace 	andeq	r0, r0, lr, asr #21
     2b4:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
                proceed Change_ID;
     2b8:	00000adc 	ldrdeq	r0, [r0], -ip
     2bc:	00000ade 	ldrdeq	r0, [r0], -lr
	...
        ser_outf(Direct_Transmission, "\n\rReceiver node ID (1-25):");
     2c8:	00000b30 	andeq	r0, r0, r0, lsr fp
        ser_inf(Get_ReceiverID, "%d", &receiverId);
     2cc:	00000b30 	andeq	r0, r0, r0, lsr fp
     2d0:	00000b32 	andeq	r0, r0, r2, lsr fp
     2d4:	00000b36 	andeq	r0, r0, r6, lsr fp
	...
                ser_outf(Get_ReceiverID, "\n\rInvalid ID");
     2e0:	00000b60 	andeq	r0, r0, r0, ror #22
     2e4:	00000b62 	andeq	r0, r0, r2, ror #22
                proceed Direct_Transmission;
     2e8:	00000b64 	andeq	r0, r0, r4, ror #22
     2ec:	00000b6c 	andeq	r0, r0, ip, ror #22
	...
        ser_in(Receive_Msg, ptr->payload, 27);
     2f8:	00000bdc 	ldrdeq	r0, [r0], -ip
     2fc:	00000bdc 	ldrdeq	r0, [r0], -ip
     300:	00000be0 	andeq	r0, r0, r0, ror #23
        if(strlen(ptr->payload) >= 27) {
     304:	00000be2 	andeq	r0, r0, r2, ror #23
     308:	00000be4 	andeq	r0, r0, r4, ror #23
     30c:	00000be8 	andeq	r0, r0, r8, ror #23
	...
        call send(ptr, Menu);
     318:	00000c14 	andeq	r0, r0, r4, lsl ip
        ptr->senderId = nodeId;
     31c:	00000c18 	andeq	r0, r0, r8, lsl ip
     320:	00000c26 	andeq	r0, r0, r6, lsr #24
        ptr->receiverId = receiverId;
     324:	00000c44 	andeq	r0, r0, r4, asr #24
        ptr->sequenceNumber = (byte)sequence;
     328:	00000c68 	andeq	r0, r0, r8, ror #24
     32c:	00000df4 	strdeq	r0, [r0], -r4
	...
        call send(ptr, Menu);
     338:	00000cb8 			; <UNDEFINED> instruction: 0x00000cb8
     33c:	00000cb8 			; <UNDEFINED> instruction: 0x00000cb8
                proceed Direct_Transmission;
     340:	00000cbe 			; <UNDEFINED> instruction: 0x00000cbe
                ser_outf(Choice, "\n\rIncorrect Option.");
     344:	00000cc0 	andeq	r0, r0, r0, asr #25
     348:	00000cc4 	andeq	r0, r0, r4, asr #25
                proceed Menu;
     34c:	00000cc6 	andeq	r0, r0, r6, asr #25
	...
}
     358:	00000cb8 			; <UNDEFINED> instruction: 0x00000cb8
     35c:	00000cba 			; <UNDEFINED> instruction: 0x00000cba
     360:	00000cca 	andeq	r0, r0, sl, asr #25
     364:	00000cca 	andeq	r0, r0, sl, asr #25
     368:	00000cd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     36c:	00000cd4 	ldrdeq	r0, [r0], -r4
	...
     378:	00000cc0 	andeq	r0, r0, r0, asr #25
     37c:	00000cc4 	andeq	r0, r0, r4, asr #25
     380:	00000cc6 	andeq	r0, r0, r6, asr #25
     384:	00000cca 	andeq	r0, r0, sl, asr #25
	...
     390:	00000cca 	andeq	r0, r0, sl, asr #25
     394:	00000cca 	andeq	r0, r0, sl, asr #25
     398:	00000cca 	andeq	r0, r0, sl, asr #25
     39c:	00000cd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
	adddevfunc (ioreq_uart_a, devnum);
     3a8:	00000ce2 	andeq	r0, r0, r2, ror #25
     3ac:	00000ce4 	andeq	r0, r0, r4, ror #25
void udelay (volatile word n) {
     3b0:	00000ce6 	andeq	r0, r0, r6, ror #25
     3b4:	00000cea 	andeq	r0, r0, sl, ror #25
	...
}
     3c0:	00000ce4 	andeq	r0, r0, r4, ror #25
	while (n--);
     3c4:	00000ce6 	andeq	r0, r0, r6, ror #25
     3c8:	00000cea 	andeq	r0, r0, sl, ror #25
     3cc:	00000cee 	andeq	r0, r0, lr, ror #25
		n--;
     3d0:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     3d4:	00000cf8 	strdeq	r0, [r0], -r8
	...
void mdelay (volatile word n) {
     3e0:	00000d48 	andeq	r0, r0, r8, asr #26
	while (n) {
     3e4:	00000d4c 	andeq	r0, r0, ip, asr #26
     3e8:	00000d4c 	andeq	r0, r0, ip, asr #26
}
     3ec:	00000d4e 	andeq	r0, r0, lr, asr #26
	...
		n--;
     3f8:	00000d6e 	andeq	r0, r0, lr, ror #26
     3fc:	00000d6e 	andeq	r0, r0, lr, ror #26
     400:	00000d70 	andeq	r0, r0, r0, ror sp
     404:	00000d74 	andeq	r0, r0, r4, ror sp
	...
		if (__pi_systat.effpdm > 1)
     410:	00000d6e 	andeq	r0, r0, lr, ror #26
     414:	00000d70 	andeq	r0, r0, r0, ror sp
			__pi_systat.effpdm = 1;
     418:	00000d74 	andeq	r0, r0, r4, ror sp
	PRCMPowerDomainOn (d);
     41c:	00000d7a 	andeq	r0, r0, sl, ror sp
	...
     428:	00000ddc 	ldrdeq	r0, [r0], -ip
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     42c:	00000de0 	andeq	r0, r0, r0, ror #27
     430:	00000de2 	andeq	r0, r0, r2, ror #27
     434:	00000de6 	andeq	r0, r0, r6, ror #27
	...
}
     440:	00000e44 	andeq	r0, r0, r4, asr #28
     444:	00000e44 	andeq	r0, r0, r4, asr #28
void __pi_offdomain (lword d) {
     448:	00000e48 	andeq	r0, r0, r8, asr #28
	PRCMPowerDomainOff (d);
     44c:	00000e54 	andeq	r0, r0, r4, asr lr
	...
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     458:	000003a4 	andeq	r0, r0, r4, lsr #7
     45c:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
     460:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
     464:	000003dc 	ldrdeq	r0, [r0], -ip
	if (d & PRCM_DOMAIN_RFCORE) {
     468:	000003dc 	ldrdeq	r0, [r0], -ip
     46c:	00000406 	andeq	r0, r0, r6, lsl #8
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     470:	00000408 	andeq	r0, r0, r8, lsl #8
			__pi_systat.effpdm = __pi_systat.reqpdm;
     474:	00000448 	andeq	r0, r0, r8, asr #8
     478:	00000448 	andeq	r0, r0, r8, asr #8
	__pi_systat.ondmns &= ~d;
     47c:	0000048c 	andeq	r0, r0, ip, lsl #9
     480:	00000001 	andeq	r0, r0, r1
}
     484:	00000001 	andeq	r0, r0, r1
     488:	0000048c 	andeq	r0, r0, ip, lsl #9
void __pi_syserror (word ec, const char *m) {
     48c:	000004e0 	andeq	r0, r0, r0, ror #9
	diag ("SYSERR: %x, %s", ec, m);
     490:	000004e0 	andeq	r0, r0, r0, ror #9
     494:	00000524 	andeq	r0, r0, r4, lsr #10
  __ASM volatile ("cpsid i" : : : "memory");
     498:	00000524 	andeq	r0, r0, r4, lsr #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     49c:	00000550 	andeq	r0, r0, r0, asr r5
		all_leds_blink;
     4a0:	00000550 	andeq	r0, r0, r0, asr r5
     4a4:	00000668 	andeq	r0, r0, r8, ror #12
     4a8:	00000668 	andeq	r0, r0, r8, ror #12
     4ac:	000006bc 			; <UNDEFINED> instruction: 0x000006bc
     4b0:	000006bc 			; <UNDEFINED> instruction: 0x000006bc
     4b4:	0000070c 	andeq	r0, r0, ip, lsl #14
     4b8:	0000070c 	andeq	r0, r0, ip, lsl #14
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4bc:	00000738 	andeq	r0, r0, r8, lsr r7
     4c0:	00000738 	andeq	r0, r0, r8, lsr r7
     4c4:	00000838 	andeq	r0, r0, r8, lsr r8
     4c8:	00000001 	andeq	r0, r0, r1
     4cc:	00000001 	andeq	r0, r0, r1
     4d0:	00000838 	andeq	r0, r0, r8, lsr r8
	while (1) {
     4d4:	000008f4 	strdeq	r0, [r0], -r4
     4d8:	000008f4 	strdeq	r0, [r0], -r4
     4dc:	0000093c 	andeq	r0, r0, ip, lsr r9
void tci_run_delay_timer () {
     4e0:	0000093c 	andeq	r0, r0, ip, lsr r9
	setdel = __pi_mintk - __pi_old;
     4e4:	00000978 	andeq	r0, r0, r8, ror r9
     4e8:	00000978 	andeq	r0, r0, r8, ror r9
     4ec:	00000a24 	andeq	r0, r0, r4, lsr #20
     4f0:	00000a24 	andeq	r0, r0, r4, lsr #20
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4f4:	00000bdc 	ldrdeq	r0, [r0], -ip
     4f8:	00000001 	andeq	r0, r0, r1
     4fc:	00000001 	andeq	r0, r0, r1
     500:	00000001 	andeq	r0, r0, r1
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     504:	00000001 	andeq	r0, r0, r1
	sti_tim;
     508:	00000bdc 	ldrdeq	r0, [r0], -ip
}
     50c:	00000e44 	andeq	r0, r0, r4, asr #28
     510:	00000001 	andeq	r0, r0, r1
     514:	00000001 	andeq	r0, r0, r1
     518:	00000001 	andeq	r0, r0, r1
     51c:	00000001 	andeq	r0, r0, r1
     520:	00000e44 	andeq	r0, r0, r4, asr #28
	cli_aux;
     524:	00000ea8 	andeq	r0, r0, r8, lsr #29
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     530:	00000f64 	andeq	r0, r0, r4, ror #30
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     534:	00000f66 	andeq	r0, r0, r6, ror #30
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     538:	00000f66 	andeq	r0, r0, r6, ror #30
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     53c:	00000f68 	andeq	r0, r0, r8, ror #30
	...
}
     548:	00000fca 	andeq	r0, r0, sl, asr #31
     54c:	0000106c 	andeq	r1, r0, ip, rrx
void AONRTCIntHandler () {
     550:	00001070 	andeq	r1, r0, r0, ror r0
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     554:	00001074 	andeq	r1, r0, r4, ror r0
	...
		if (__pi_utims [0] == 0)
     560:	0000141c 	andeq	r1, r0, ip, lsl r4
     564:	0000141e 	andeq	r1, r0, lr, lsl r4
		if (*(__pi_utims [0])) {
     568:	00001422 	andeq	r1, r0, r2, lsr #8
     56c:	00001424 	andeq	r1, r0, r4, lsr #8
			(*(__pi_utims [0]))--;
     570:	00001428 	andeq	r1, r0, r8, lsr #8
		if (__pi_utims [1] == 0)
     574:	0000142c 	andeq	r1, r0, ip, lsr #8
		if (*(__pi_utims [1])) {
     578:	0000142e 	andeq	r1, r0, lr, lsr #8
			aux_timer_inactive = 0;
     57c:	00001438 	andeq	r1, r0, r8, lsr r4
	...
		if (*(__pi_utims [2])) {
     588:	00001470 	andeq	r1, r0, r0, ror r4
			(*(__pi_utims [2]))--;
     58c:	00001472 	andeq	r1, r0, r2, ror r4
		if (__pi_utims [3] != 0) {
     590:	00001476 	andeq	r1, r0, r6, ror r4
			if (*(__pi_utims [3])) {
     594:	0000147a 	andeq	r1, r0, sl, ror r4
				aux_timer_inactive = 0;
     598:	0000150e 	andeq	r1, r0, lr, lsl #10
				(*(__pi_utims [3]))--;
     59c:	00001570 	andeq	r1, r0, r0, ror r5
	if (__pi_systat.ledsts) {
     5a0:	00001576 	andeq	r1, r0, r6, ror r5
     5a4:	0000157c 	andeq	r1, r0, ip, ror r5
	...
			if (__pi_systat.ledblk) {
     5b0:	0000148a 	andeq	r1, r0, sl, lsl #9
     5b4:	0000148c 	andeq	r1, r0, ip, lsl #9
     5b8:	0000148c 	andeq	r1, r0, ip, lsl #9
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     5bc:	0000148e 	andeq	r1, r0, lr, lsl #9
	...
				if (__pi_systat.ledsts & 0x2)
     5c8:	00000ea8 	andeq	r0, r0, r8, lsr #29
     5cc:	00000ee4 	andeq	r0, r0, r4, ror #29
     5d0:	00000ee4 	andeq	r0, r0, r4, ror #29
				if (__pi_systat.ledsts & 0x4)
     5d4:	00000f64 	andeq	r0, r0, r4, ror #30
				__pi_systat.ledblk = 0;
     5d8:	00000f64 	andeq	r0, r0, r4, ror #30
     5dc:	00000f78 	andeq	r0, r0, r8, ror pc
			if (__pi_systat.fstblk)
     5e0:	00000001 	andeq	r0, r0, r1
     5e4:	00000001 	andeq	r0, r0, r1
				__pi_systat.ledblc = 200;
     5e8:	00000f78 	andeq	r0, r0, r8, ror pc
	if (events & AON_RTC_EVFLAGS_CH0) {
     5ec:	00000f88 	andeq	r0, r0, r8, lsl #31
		cli_tim;
     5f0:	00000f88 	andeq	r0, r0, r8, lsl #31
		__pi_new += setdel;
     5f4:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
		cli_tim;
     5f8:	00000001 	andeq	r0, r0, r1
		__pi_new += setdel;
     5fc:	00000001 	andeq	r0, r0, r1
     600:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
     604:	00000fba 			; <UNDEFINED> instruction: 0x00000fba
		RISE_N_SHINE;
     608:	00000fbc 			; <UNDEFINED> instruction: 0x00000fbc
     60c:	00001088 	andeq	r1, r0, r8, lsl #1
}
     610:	00001088 	andeq	r1, r0, r8, lsl #1
		aux_timer_inactive = 1;
     614:	0000109c 	muleq	r0, ip, r0
     618:	0000109c 	muleq	r0, ip, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     61c:	000010d0 	ldrdeq	r1, [r0], -r0
     620:	000010d0 	ldrdeq	r1, [r0], -r0
     624:	00001104 	andeq	r1, r0, r4, lsl #2
				if (__pi_systat.ledsts & 0x2)
     628:	00000001 	andeq	r0, r0, r1
     62c:	00000001 	andeq	r0, r0, r1
     630:	00001104 	andeq	r1, r0, r4, lsl #2
				if (__pi_systat.ledsts & 0x4)
     634:	00001128 	andeq	r1, r0, r8, lsr #2
				__pi_systat.ledblk = 1;
     638:	00001128 	andeq	r1, r0, r8, lsr #2
     63c:	00001160 	andeq	r1, r0, r0, ror #2
		if (aux_timer_inactive) {
     640:	00000001 	andeq	r0, r0, r1
			cli_aux;
     644:	00000001 	andeq	r0, r0, r1
     648:	00000001 	andeq	r0, r0, r1
     64c:	00000001 	andeq	r0, r0, r1
     650:	00000001 	andeq	r0, r0, r1
     654:	00000001 	andeq	r0, r0, r1
     658:	00001160 	andeq	r1, r0, r0, ror #2
     65c:	00001184 	andeq	r1, r0, r4, lsl #3
     660:	00000001 	andeq	r0, r0, r1
     664:	00000001 	andeq	r0, r0, r1
word tci_update_delay_ticks (Boolean force) {
     668:	00001184 	andeq	r1, r0, r4, lsl #3
	cli_tim;
     66c:	00001192 	muleq	r0, r2, r1
     670:	00001192 	muleq	r0, r2, r1
	if (setdel) {
     674:	000011a2 	andeq	r1, r0, r2, lsr #3
		if (force) {
     678:	00000001 	andeq	r0, r0, r1
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     67c:	00000001 	andeq	r0, r0, r1
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     680:	00000001 	andeq	r0, r0, r1
     684:	00000001 	andeq	r0, r0, r1
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     688:	00000001 	andeq	r0, r0, r1
				AON_RTC_O_CH0CMP)) - gettav ());
     68c:	00000001 	andeq	r0, r0, r1
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     690:	000011a2 	andeq	r1, r0, r2, lsr #3
     694:	000011b6 			; <UNDEFINED> instruction: 0x000011b6
     698:	000011b6 			; <UNDEFINED> instruction: 0x000011b6
     69c:	000011ba 			; <UNDEFINED> instruction: 0x000011ba
}
     6a0:	000011bc 			; <UNDEFINED> instruction: 0x000011bc
		sti_tim;
     6a4:	000011e0 	andeq	r1, r0, r0, ror #3
     6a8:	000011e0 	andeq	r1, r0, r0, ror #3
		return YES;
     6ac:	0000127c 	andeq	r1, r0, ip, ror r2
     6b0:	0000127c 	andeq	r1, r0, ip, ror r2
     6b4:	000012cc 	andeq	r1, r0, ip, asr #5
     6b8:	000012cc 	andeq	r1, r0, ip, asr #5
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6bc:	00001314 	andeq	r1, r0, r4, lsl r3
	UARTDisable (UART0_BASE);
     6c0:	00001314 	andeq	r1, r0, r4, lsl r3
     6c4:	00001364 	andeq	r1, r0, r4, ror #6
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6c8:	00000001 	andeq	r0, r0, r1
	UARTDisable (UART0_BASE);
     6cc:	00000001 	andeq	r0, r0, r1
	UARTConfigSetExpClk (UART0_BASE,
     6d0:	00001364 	andeq	r1, r0, r4, ror #6
     6d4:	0000140c 	andeq	r1, r0, ip, lsl #8
     6d8:	0000140c 	andeq	r1, r0, ip, lsl #8
     6dc:	00001440 	andeq	r1, r0, r0, asr #8
     6e0:	00001440 	andeq	r1, r0, r0, asr #8
}
     6e4:	00001458 	andeq	r1, r0, r8, asr r4
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6e8:	00000001 	andeq	r0, r0, r1
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     6ec:	00000001 	andeq	r0, r0, r1
     6f0:	00000001 	andeq	r0, r0, r1
     6f4:	00000001 	andeq	r0, r0, r1
	urates [0] = rate;
     6f8:	00001458 	andeq	r1, r0, r8, asr r4
}
     6fc:	0000159c 	muleq	r0, ip, r5
     700:	0000159c 	muleq	r0, ip, r5
     704:	000015c0 	andeq	r1, r0, r0, asr #11
	...
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     710:	00001a06 	andeq	r1, r0, r6, lsl #20
     714:	00001a26 	andeq	r1, r0, r6, lsr #20
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     718:	00001a28 	andeq	r1, r0, r8, lsr #20
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     71c:	00001a42 	andeq	r1, r0, r2, asr #20
	...
	__pi_uart_setrate (urates [0], __pi_uart);
     728:	00000001 	andeq	r0, r0, r1
     72c:	00000001 	andeq	r0, r0, r1
     730:	00000001 	andeq	r0, r0, r1
     734:	00000001 	andeq	r0, r0, r1
	...
static int ioreq_uart_a (int operation, char *buf, int len) {
     740:	000015c0 	andeq	r1, r0, r0, asr #11
	switch (operation) {
     744:	0000160c 	andeq	r1, r0, ip, lsl #12
     748:	0000160c 	andeq	r1, r0, ip, lsl #12
     74c:	00001622 	andeq	r1, r0, r2, lsr #12
				len--;
     750:	00001622 	andeq	r1, r0, r2, lsr #12
				*buf++ = uart_a_read;
     754:	0000163c 	andeq	r1, r0, ip, lsr r6
			while (len && uart_a_char_available) {
     758:	0000163c 	andeq	r1, r0, ip, lsr r6
     75c:	0000164a 	andeq	r1, r0, sl, asr #12
			if (len != operation) {
     760:	0000164c 	andeq	r1, r0, ip, asr #12
}
     764:	000016d8 	ldrdeq	r1, [r0], -r8
     768:	000016d8 	ldrdeq	r1, [r0], -r8
			uart_a_disable_int;
     76c:	00001748 	andeq	r1, r0, r8, asr #14
			if (uart_a_char_available) {
     770:	00001748 	andeq	r1, r0, r8, asr #14
			uart_a_disable_int;
     774:	00001808 	andeq	r1, r0, r8, lsl #16
     778:	00000001 	andeq	r0, r0, r1
     77c:	00000001 	andeq	r0, r0, r1
			if (uart_a_char_available) {
     780:	00001808 	andeq	r1, r0, r8, lsl #16
				uart_a_enable_int;
     784:	0000182c 	andeq	r1, r0, ip, lsr #16
     788:	0000182c 	andeq	r1, r0, ip, lsr #16
     78c:	000018ac 	andeq	r1, r0, ip, lsr #17
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     790:	00000001 	andeq	r0, r0, r1
     794:	00000001 	andeq	r0, r0, r1
			return -2;
     798:	00000001 	andeq	r0, r0, r1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     79c:	00000001 	andeq	r0, r0, r1
				uart_a_write (*buf);
     7a0:	000018ac 	andeq	r1, r0, ip, lsr #17
				len--;
     7a4:	00001968 	andeq	r1, r0, r8, ror #18
			while (len && uart_a_room_in_tx) {
     7a8:	00000001 	andeq	r0, r0, r1
     7ac:	00000001 	andeq	r0, r0, r1
			if (len != operation) {
     7b0:	00000001 	andeq	r0, r0, r1
			uart_a_disable_int;
     7b4:	00000001 	andeq	r0, r0, r1
     7b8:	00000001 	andeq	r0, r0, r1
     7bc:	00000001 	andeq	r0, r0, r1
			if (uart_a_room_in_tx) {
     7c0:	00001968 	andeq	r1, r0, r8, ror #18
				uart_a_enable_int;
     7c4:	00001994 	muleq	r0, r4, r9
     7c8:	00001994 	muleq	r0, r4, r9
     7cc:	000019f4 	strdeq	r1, [r0], -r4
	switch (operation) {
     7d0:	00000001 	andeq	r0, r0, r1
			uart_a_disable_int;
     7d4:	00000001 	andeq	r0, r0, r1
			if (uart_a_room_in_tx) {
     7d8:	00000001 	andeq	r0, r0, r1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7dc:	00000001 	andeq	r0, r0, r1
     7e0:	00000001 	andeq	r0, r0, r1
			uart_a_enable_int;
     7e4:	00000001 	andeq	r0, r0, r1
     7e8:	00000001 	andeq	r0, r0, r1
     7ec:	00000001 	andeq	r0, r0, r1
     7f0:	000019f4 	strdeq	r1, [r0], -r4
			return 0;
     7f4:	00001a5c 	andeq	r1, r0, ip, asr sl
			if (len == UART_CNTRL_SETRATE) {
     7f8:	00001a5c 	andeq	r1, r0, ip, asr sl
				if (__pi_uart_setrate (*((word*)buf),
     7fc:	00001aac 	andeq	r1, r0, ip, lsr #21
     800:	00001aac 	andeq	r1, r0, ip, lsr #21
     804:	00001b4c 	andeq	r1, r0, ip, asr #22
				syserror (EREQPAR, "uar");
     808:	00001b4c 	andeq	r1, r0, ip, asr #22
			syserror (ENOOPER, "uai");
     80c:	00001b8c 	andeq	r1, r0, ip, lsl #23
			if (len == UART_CNTRL_GETRATE) {
     810:	00001b8c 	andeq	r1, r0, ip, lsl #23
				return 1;
     814:	00001bc0 	andeq	r1, r0, r0, asr #23
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     818:	00001bc0 	andeq	r1, r0, r0, asr #23
			syserror (ENOOPER, "uai");
     81c:	00001bfc 	strdeq	r1, [r0], -ip
     820:	00000001 	andeq	r0, r0, r1
     824:	00000001 	andeq	r0, r0, r1
     828:	00001bfc 	strdeq	r1, [r0], -ip
     82c:	00001bfe 	strdeq	r1, [r0], -lr
	...
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     838:	00001bfe 	strdeq	r1, [r0], -lr
void UART0IntHandler () {
     83c:	00001c00 	andeq	r1, r0, r0, lsl #24
     840:	00001c00 	andeq	r1, r0, r0, lsl #24
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     844:	00001c02 	andeq	r1, r0, r2, lsl #24
     848:	00001c02 	andeq	r1, r0, r2, lsl #24
     84c:	00001c04 	andeq	r1, r0, r4, lsl #24
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     850:	00001c04 	andeq	r1, r0, r4, lsl #24
     854:	00001c4c 	andeq	r1, r0, ip, asr #24
	...
		RISE_N_SHINE;
     860:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, READ));
     864:	00000001 	andeq	r0, r0, r1
     868:	00000001 	andeq	r0, r0, r1
     86c:	00000001 	andeq	r0, r0, r1
     870:	00000001 	andeq	r0, r0, r1
     874:	00000001 	andeq	r0, r0, r1
     878:	00000001 	andeq	r0, r0, r1
     87c:	00000001 	andeq	r0, r0, r1
	...
     888:	00000001 	andeq	r0, r0, r1
     88c:	00000001 	andeq	r0, r0, r1
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     890:	00000001 	andeq	r0, r0, r1
     894:	00000001 	andeq	r0, r0, r1
	...
		i_trigger (devevent (UART_A, WRITE));
     8a0:	00000001 	andeq	r0, r0, r1
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     8a4:	00000001 	andeq	r0, r0, r1
     8a8:	00000001 	andeq	r0, r0, r1
		RISE_N_SHINE;
     8ac:	00000001 	andeq	r0, r0, r1
     8b0:	00000001 	andeq	r0, r0, r1
     8b4:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, WRITE));
     8b8:	00000001 	andeq	r0, r0, r1
     8bc:	00000001 	andeq	r0, r0, r1
	...
     8c8:	00000001 	andeq	r0, r0, r1
     8cc:	00000001 	andeq	r0, r0, r1
     8d0:	00000001 	andeq	r0, r0, r1
     8d4:	00000001 	andeq	r0, r0, r1
	...
     8e0:	00000001 	andeq	r0, r0, r1
}
     8e4:	00000001 	andeq	r0, r0, r1
     8e8:	00000001 	andeq	r0, r0, r1
     8ec:	00000001 	andeq	r0, r0, r1
     8f0:	00000001 	andeq	r0, r0, r1
void __buttons_setirq (int val) {
     8f4:	00000001 	andeq	r0, r0, r1
	...
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     900:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     904:	00000001 	andeq	r0, r0, r1
     908:	00000001 	andeq	r0, r0, r1
     90c:	00000001 	andeq	r0, r0, r1
	...
     918:	00001c58 	andeq	r1, r0, r8, asr ip
     91c:	00001c5c 	andeq	r1, r0, ip, asr ip
     920:	00001c70 	andeq	r1, r0, r0, ror ip
     924:	00001c70 	andeq	r1, r0, r0, ror ip
     928:	00001c72 	andeq	r1, r0, r2, ror ip
}
     92c:	00001c76 	andeq	r1, r0, r6, ror ip
	...
     938:	00001c5e 	andeq	r1, r0, lr, asr ip
void __pinlist_setirq (int val) {
     93c:	00001c60 	andeq	r1, r0, r0, ror #24
	for (i = 0; i < N_PINLIST; i++) {
     940:	00001c60 	andeq	r1, r0, r0, ror #24
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     944:	00001c64 	andeq	r1, r0, r4, ror #24
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     948:	00001c6a 	andeq	r1, r0, sl, ror #24
	for (i = 0; i < N_PINLIST; i++) {
     94c:	00001c6a 	andeq	r1, r0, sl, ror #24
	...
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     958:	00001c8c 	andeq	r1, r0, ip, lsl #25
     95c:	00001c92 	muleq	r0, r2, ip
     960:	00001ca0 	andeq	r1, r0, r0, lsr #25
     964:	00001ca0 	andeq	r1, r0, r0, lsr #25
  __ASM volatile ("cpsie i" : : : "memory");
     968:	00001ca4 	andeq	r1, r0, r4, lsr #25
}
     96c:	00001ca8 	andeq	r1, r0, r8, lsr #25
	...
void GPIOIntHandler () {
     978:	00001ca8 	andeq	r1, r0, r8, lsr #25
if (buttons_int) {
     97c:	00001ca8 	andeq	r1, r0, r8, lsr #25
     980:	00001caa 	andeq	r1, r0, sl, lsr #25
     984:	00001cae 	andeq	r1, r0, lr, lsr #25
	...
	i_trigger ((aword)&__button_list);
     990:	00001cb8 			; <UNDEFINED> instruction: 0x00001cb8
     994:	00001cba 			; <UNDEFINED> instruction: 0x00001cba
     998:	00001cbc 			; <UNDEFINED> instruction: 0x00001cbc
     99c:	00001cc2 	andeq	r1, r0, r2, asr #25
	...
     9a8:	00001cdc 	ldrdeq	r1, [r0], -ip
     9ac:	00001cde 	ldrdeq	r1, [r0], -lr
     9b0:	00001ce2 	andeq	r1, r0, r2, ror #25
     9b4:	00001ce4 	andeq	r1, r0, r4, ror #25
     9b8:	00001cea 	andeq	r1, r0, sl, ror #25
	RISE_N_SHINE;
     9bc:	00001cfe 	strdeq	r1, [r0], -lr
	...
if (pin_sensor_int) {
     9c8:	00001cdc 	ldrdeq	r1, [r0], -ip
     9cc:	00001cde 	ldrdeq	r1, [r0], -lr
	i_trigger ((aword)(&__input_pins));
     9d0:	00001ce2 	andeq	r1, r0, r2, ror #25
     9d4:	00001ce4 	andeq	r1, r0, r4, ror #25
     9d8:	00001cea 	andeq	r1, r0, sl, ror #25
     9dc:	00001cea 	andeq	r1, r0, sl, ror #25
     9e0:	00001cec 	andeq	r1, r0, ip, ror #25
     9e4:	00001cf0 	strdeq	r1, [r0], -r0
	...
     9f0:	00001d46 	andeq	r1, r0, r6, asr #26
     9f4:	00001d4a 	andeq	r1, r0, sl, asr #26
     9f8:	00001d4c 	andeq	r1, r0, ip, asr #26
     9fc:	00001d50 	andeq	r1, r0, r0, asr sp
	...
	RISE_N_SHINE;
     a08:	00001d54 	andeq	r1, r0, r4, asr sp
}
     a0c:	00001d54 	andeq	r1, r0, r4, asr sp
     a10:	00001d56 	andeq	r1, r0, r6, asr sp
     a14:	00001d5a 	andeq	r1, r0, sl, asr sp
	...
     a20:	00000001 	andeq	r0, r0, r1
void system_init () {
     a24:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a28:	00000001 	andeq	r0, r0, r1
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a2c:	00000001 	andeq	r0, r0, r1
	...
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a38:	00000001 	andeq	r0, r0, r1
     a3c:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a40:	00000001 	andeq	r0, r0, r1
     a44:	00000001 	andeq	r0, r0, r1
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a50:	00000001 	andeq	r0, r0, r1
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a54:	00000001 	andeq	r0, r0, r1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a58:	00000001 	andeq	r0, r0, r1
     a5c:	00000001 	andeq	r0, r0, r1
	...
     a68:	00000001 	andeq	r0, r0, r1
		pin = (port_confs [i] >> 19) & 0x1f;
     a6c:	00000001 	andeq	r0, r0, r1
     a70:	00000001 	andeq	r0, r0, r1
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a74:	00000001 	andeq	r0, r0, r1
	...
     a80:	00001c54 	andeq	r1, r0, r4, asr ip
     a84:	00001c84 	andeq	r1, r0, r4, lsl #25
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a88:	00001c84 	andeq	r1, r0, r4, lsl #25
     a8c:	00001cb8 			; <UNDEFINED> instruction: 0x00001cb8
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a90:	00001cb8 			; <UNDEFINED> instruction: 0x00001cb8
		if (port_confs [i] & 0x40)
     a94:	00001cd4 	ldrdeq	r1, [r0], -r4
     a98:	00001cd4 	ldrdeq	r1, [r0], -r4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a9c:	00001d2c 	andeq	r1, r0, ip, lsr #26
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     aa0:	00001d2c 	andeq	r1, r0, ip, lsr #26
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     aa4:	00001d70 	andeq	r1, r0, r0, ror sp
	all_leds_blink;
     aa8:	00001d70 	andeq	r1, r0, r0, ror sp
     aac:	00001d94 	muleq	r0, r4, sp
     ab0:	00001d94 	muleq	r0, r4, sp
     ab4:	00001da8 	andeq	r1, r0, r8, lsr #27
     ab8:	00001da8 	andeq	r1, r0, r8, lsr #27
     abc:	00001dbc 			; <UNDEFINED> instruction: 0x00001dbc
     ac0:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac4:	00000001 	andeq	r0, r0, r1
     ac8:	00000001 	andeq	r0, r0, r1
     acc:	00000001 	andeq	r0, r0, r1
     ad0:	00000001 	andeq	r0, r0, r1
     ad4:	00000001 	andeq	r0, r0, r1
     ad8:	00000001 	andeq	r0, r0, r1
     adc:	00000001 	andeq	r0, r0, r1
	IntEnable (INT_AON_RTC_COMB);
     ae0:	00000001 	andeq	r0, r0, r1
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ae4:	00000001 	andeq	r0, r0, r1
     ae8:	00000001 	andeq	r0, r0, r1
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     aec:	00000001 	andeq	r0, r0, r1
	IntEnable (INT_AON_RTC_COMB);
     af0:	00000001 	andeq	r0, r0, r1
     af4:	00000001 	andeq	r0, r0, r1
	...
	IntEnable (INT_AON_GPIO_EDGE);
     b00:	00001dbc 			; <UNDEFINED> instruction: 0x00001dbc
     b04:	00001e10 	andeq	r1, r0, r0, lsl lr
	...
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b10:	00001e10 	andeq	r1, r0, r0, lsl lr
     b14:	00001e70 	andeq	r1, r0, r0, ror lr
	...
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b20:	00001e70 	andeq	r1, r0, r0, ror lr
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b24:	00001ee8 	andeq	r1, r0, r8, ror #29
	...
	urates [0] = UART_RATE / 100;
     b30:	00002112 	andeq	r2, r0, r2, lsl r1
     b34:	00002114 	andeq	r2, r0, r4, lsl r1
     b38:	00002128 	andeq	r2, r0, r8, lsr #2
	reinit_uart ();
     b3c:	0000212a 	andeq	r2, r0, sl, lsr #2
	EXTRA_INITIALIZERS;
     b40:	0000212c 	andeq	r2, r0, ip, lsr #2
     b44:	0000212e 	andeq	r2, r0, lr, lsr #2
	...
     b50:	000021aa 	andeq	r2, r0, sl, lsr #3
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b54:	000021e6 	andeq	r2, r0, r6, ror #3
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b58:	000021e6 	andeq	r2, r0, r6, ror #3
			devinit [i] . init (devinit [i] . param);
     b5c:	000021f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b60:	000021f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
     b64:	000022d6 	ldrdeq	r2, [r0], -r6
     b68:	000022da 	ldrdeq	r2, [r0], -sl
	IntEnable (INT_UART0_COMB);
     b6c:	000022e2 	andeq	r2, r0, r2, ror #5
	...
}
     b78:	000021d8 	ldrdeq	r2, [r0], -r8
	tci_run_auxiliary_timer ();
     b7c:	000021de 	ldrdeq	r2, [r0], -lr
		diag ("");
     b80:	000021e0 	andeq	r2, r0, r0, ror #3
     b84:	000021e2 	andeq	r2, r0, r2, ror #3
	...
		diag ("Leftover RAM: %d bytes",
     b90:	000021e6 	andeq	r2, r0, r6, ror #3
     b94:	000021f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
     b98:	000021f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
     b9c:	000021f6 	strdeq	r2, [r0], -r6
     ba0:	000021f8 	strdeq	r2, [r0], -r8
     ba4:	00002228 	andeq	r2, r0, r8, lsr #4
	...
     bb0:	000021f6 	strdeq	r2, [r0], -r6
     bb4:	000021f8 	strdeq	r2, [r0], -r8
     bb8:	00002228 	andeq	r2, r0, r8, lsr #4
     bbc:	00002268 	andeq	r2, r0, r8, ror #4
     bc0:	0000226a 	andeq	r2, r0, sl, ror #4
     bc4:	00002286 	andeq	r2, r0, r6, lsl #5
	...
     bd0:	00002344 	andeq	r2, r0, r4, asr #6
     bd4:	00002344 	andeq	r2, r0, r4, asr #6
     bd8:	00002348 	andeq	r2, r0, r8, asr #6
__attribute__ ((noreturn)) void __pi_release () {
     bdc:	00002360 	andeq	r2, r0, r0, ror #6
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     be0:	00002362 	andeq	r2, r0, r2, ror #6
     be4:	00002364 	andeq	r2, r0, r4, ror #6
	check_stack_overflow;
     be8:	00002366 	andeq	r2, r0, r6, ror #6
     bec:	00002370 	andeq	r2, r0, r0, ror r3
	...
	for_all_tasks (__pi_curr) {
     bf8:	00002678 	andeq	r2, r0, r8, ror r6
	update_n_wake (MAX_WORD, NO);
     bfc:	0000267a 	andeq	r2, r0, sl, ror r6
     c00:	0000267e 	andeq	r2, r0, lr, ror r6
	for_all_tasks (__pi_curr) {
     c04:	00002684 	andeq	r2, r0, r4, lsl #13
     c08:	00002686 	andeq	r2, r0, r6, lsl #13
     c0c:	000026d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
     c10:	000026d4 	ldrdeq	r2, [r0], -r4
	system_event_count ++;
     c14:	000026d8 	ldrdeq	r2, [r0], -r8
  __ASM volatile ("cpsid i" : : : "memory");
     c18:	000026da 	ldrdeq	r2, [r0], -sl
	__SLEEP;
     c1c:	000026ea 	andeq	r2, r0, sl, ror #13
     c20:	000026ee 	andeq	r2, r0, lr, ror #13
     c24:	000026f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
     c28:	00002724 	andeq	r2, r0, r4, lsr #14
     c2c:	00002728 	andeq	r2, r0, r8, lsr #14
	...
	switch (__pi_systat.effpdm) {
     c38:	0000272e 	andeq	r2, r0, lr, lsr #14
     c3c:	00002730 	andeq	r2, r0, r0, lsr r7
     c40:	00002732 	andeq	r2, r0, r2, lsr r7
  __ASM volatile ("cpsie i" : : : "memory");
     c44:	00002760 	andeq	r2, r0, r0, ror #14
	...
	check_stack_overflow;
     c50:	00001ee8 	andeq	r1, r0, r8, ror #29
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c54:	00001f08 	andeq	r1, r0, r8, lsl #30
     c58:	00001f08 	andeq	r1, r0, r8, lsl #30
     c5c:	00002098 	muleq	r0, r8, r0
			(__pi_curr->code) (tstate (__pi_curr));
     c60:	00002098 	muleq	r0, r8, r0
	for_all_tasks (__pi_curr) {
     c64:	000020e0 	andeq	r2, r0, r0, ror #1
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c68:	000020e0 	andeq	r2, r0, r0, ror #1
     c6c:	00002104 	andeq	r2, r0, r4, lsl #2
     c70:	00002104 	andeq	r2, r0, r4, lsl #2
     c74:	00002164 	andeq	r2, r0, r4, ror #2
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c78:	00002164 	andeq	r2, r0, r4, ror #2
     c7c:	0000219c 	muleq	r0, ip, r1
     c80:	0000219c 	muleq	r0, ip, r1
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c84:	00002344 	andeq	r2, r0, r4, asr #6
     c88:	00002344 	andeq	r2, r0, r4, asr #6
     c8c:	00002408 	andeq	r2, r0, r8, lsl #8
     c90:	00002408 	andeq	r2, r0, r8, lsl #8
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c94:	000025e8 	andeq	r2, r0, r8, ror #11
     c98:	000025e8 	andeq	r2, r0, r8, ror #11
     c9c:	00002654 	andeq	r2, r0, r4, asr r6
     ca0:	00002654 	andeq	r2, r0, r4, asr r6
			__WFI ();
     ca4:	000027c8 	andeq	r2, r0, r8, asr #15
	...
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     cb0:	000027c8 	andeq	r2, r0, r8, asr #15
     cb4:	000027ec 	andeq	r2, r0, ip, ror #15
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cb8:	000027ec 	andeq	r2, r0, ip, ror #15
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cbc:	00002810 	andeq	r2, r0, r0, lsl r8
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cc0:	00002810 	andeq	r2, r0, r0, lsl r8
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cc4:	00002818 	andeq	r2, r0, r8, lsl r8
     cc8:	00002818 	andeq	r2, r0, r8, lsl r8
     ccc:	0000281c 	andeq	r2, r0, ip, lsl r8
     cd0:	0000281c 	andeq	r2, r0, ip, lsl r8
     cd4:	00002820 	andeq	r2, r0, r0, lsr #16
     cd8:	00002820 	andeq	r2, r0, r0, lsr #16
     cdc:	00002868 	andeq	r2, r0, r8, ror #16
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     ce8:	00002894 	muleq	r0, r4, r8
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cec:	00002896 	muleq	r0, r6, r8
     cf0:	00002958 	andeq	r2, r0, r8, asr r9
     cf4:	0000297c 	andeq	r2, r0, ip, ror r9
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     cf8:	0000297e 	andeq	r2, r0, lr, ror r9
     cfc:	000029c6 	andeq	r2, r0, r6, asr #19
     d00:	000029f0 	strdeq	r2, [r0], -r0
			SysCtrlSetRechargeBeforePowerDown
     d04:	000029f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
	...
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d10:	00002896 	muleq	r0, r6, r8
     d14:	00002898 	muleq	r0, r8, r8
     d18:	0000292e 	andeq	r2, r0, lr, lsr #18
			__WFI ();
     d1c:	00002958 	andeq	r2, r0, r8, asr r9
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d20:	0000297c 	andeq	r2, r0, ip, ror r9
     d24:	0000297e 	andeq	r2, r0, lr, ror r9
	...
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d30:	000028cc 	andeq	r2, r0, ip, asr #17
     d34:	000028d4 	ldrdeq	r2, [r0], -r4
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d38:	00002a76 	andeq	r2, r0, r6, ror sl
     d3c:	00002a82 	andeq	r2, r0, r2, lsl #21
	...
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d48:	000029d0 	ldrdeq	r2, [r0], -r0
     d4c:	000029f0 	strdeq	r2, [r0], -r0
			while (!(AONWUCPowerStatusGet () &
     d50:	000029f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d54:	00002a36 	andeq	r2, r0, r6, lsr sl
	...
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d60:	00002868 	andeq	r2, r0, r8, ror #16
     d64:	00002888 	andeq	r2, r0, r8, lsl #17
     d68:	00002888 	andeq	r2, r0, r8, lsl #17
     d6c:	00002aac 	andeq	r2, r0, ip, lsr #21
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d70:	00002aac 	andeq	r2, r0, ip, lsr #21
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d74:	00002afc 	strdeq	r2, [r0], -ip
	...
     d80:	00002b10 	andeq	r2, r0, r0, lsl fp
			SysCtrlAdjustRechargeAfterPowerDown ();
     d84:	00002b14 	andeq	r2, r0, r4, lsl fp
			reinit_uart ();
     d88:	00002df4 	strdeq	r2, [r0], -r4
     d8c:	00002e3c 	andeq	r2, r0, ip, lsr lr
	...
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d98:	00002b14 	andeq	r2, r0, r4, lsl fp
     d9c:	00002b1a 	andeq	r2, r0, sl, lsl fp
     da0:	00002b52 	andeq	r2, r0, r2, asr fp
     da4:	00002bbe 			; <UNDEFINED> instruction: 0x00002bbe
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     da8:	00002e58 	andeq	r2, r0, r8, asr lr
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dac:	00002e78 	andeq	r2, r0, r8, ror lr
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     db8:	00002c76 	andeq	r2, r0, r6, ror ip
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     dbc:	00002cf0 	strdeq	r2, [r0], -r0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     dc0:	00002e80 	andeq	r2, r0, r0, lsl #29
     dc4:	00002e88 	andeq	r2, r0, r8, lsl #29
	...
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     dd0:	00002d0a 	andeq	r2, r0, sl, lsl #26
     dd4:	00002d60 	andeq	r2, r0, r0, ror #26
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     dd8:	00002dd6 	ldrdeq	r2, [r0], -r6
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     ddc:	00002df4 	strdeq	r2, [r0], -r4
	...
			PRCMPowerDomainOff (
     de8:	00002d66 	andeq	r2, r0, r6, ror #26
     dec:	00002dd6 	ldrdeq	r2, [r0], -r6
     df0:	00002e3c 	andeq	r2, r0, ip, lsr lr
	__SLEEP;
     df4:	00002e44 	andeq	r2, r0, r4, asr #28
     df8:	00002e88 	andeq	r2, r0, r8, lsl #29
     dfc:	00002e8e 	andeq	r2, r0, lr, lsl #29
	...
	goto Redo;
     e08:	00002afc 	strdeq	r2, [r0], -ip
     e0c:	00002e8e 	andeq	r2, r0, lr, lsl #29
	...
     e18:	00002e9e 	muleq	r0, lr, lr
     e1c:	00002e9e 	muleq	r0, lr, lr
     e20:	00002ea4 	andeq	r2, r0, r4, lsr #29
     e24:	00002f00 	andeq	r2, r0, r0, lsl #30
	...
     e30:	00002e90 	muleq	r0, r0, lr
     e34:	00002f00 	andeq	r2, r0, r0, lsl #30
	...
     e40:	00002f14 	andeq	r2, r0, r4, lsl pc
int main (void) {
     e44:	00002ff8 	strdeq	r2, [r0], -r8
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e48:	00002ffe 	strdeq	r2, [r0], -lr
     e4c:	00003002 	andeq	r3, r0, r2
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e50:	00003008 	andeq	r3, r0, r8
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e54:	0000301c 	andeq	r3, r0, ip, lsl r0
	...
     e60:	00002f00 	andeq	r2, r0, r0, lsl #30
     e64:	0000301c 	andeq	r3, r0, ip, lsl r0
	...
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e70:	0000301c 	andeq	r3, r0, ip, lsl r0
     e74:	00003044 	andeq	r3, r0, r4, asr #32
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e78:	00000001 	andeq	r0, r0, r1
     e7c:	00000001 	andeq	r0, r0, r1
	...
	delay (16, 0);
     e88:	00003044 	andeq	r3, r0, r4, asr #32
     e8c:	00003074 	andeq	r3, r0, r4, ror r0
	...
	__pi_release ();
     e98:	00003074 	andeq	r3, r0, r4, ror r0
     e9c:	00003094 	muleq	r0, r4, r0
     ea0:	00003094 	muleq	r0, r4, r0
     ea4:	000030ac 	andeq	r3, r0, ip, lsr #1
	...
	for_all_tasks (i) {
     eb0:	000030ac 	andeq	r3, r0, ip, lsr #1
		for (j = 0; j < nevents (i); j++) {
     eb4:	000030b4 	strheq	r3, [r0], -r4
     eb8:	00000001 	andeq	r0, r0, r1
     ebc:	00000001 	andeq	r0, r0, r1
			    || i->Events [j] . Event == wfun
     ec0:	000030b4 	strheq	r3, [r0], -r4
		for (j = 0; j < nevents (i); j++) {
     ec4:	000030bc 	strheq	r3, [r0], -ip
			if (i->Events [j] . Event == (aword)pid
     ec8:	00000001 	andeq	r0, r0, r1
     ecc:	00000001 	andeq	r0, r0, r1
     ed0:	00000001 	andeq	r0, r0, r1
				wakeupev (i, j);
     ed4:	00000001 	andeq	r0, r0, r1
	...
}
     ee0:	0000311e 	andeq	r3, r0, lr, lsl r1
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     ee4:	0000312e 	andeq	r3, r0, lr, lsr #2
static void qfree (aword *ch) {
     ee8:	00003134 	andeq	r3, r0, r4, lsr r1
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     eec:	00003136 	andeq	r3, r0, r6, lsr r1
	...
	m_setnextp (cc, ch);
     ef8:	000030bc 	strheq	r3, [r0], -ip
}
     efc:	00003118 	andeq	r3, r0, r8, lsl r1
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f00:	00003118 	andeq	r3, r0, r8, lsl r1
     f04:	00003144 	andeq	r3, r0, r4, asr #2
     f08:	00000001 	andeq	r0, r0, r1
			m_setnextp (cc, m_nextp (chunk));
     f0c:	00000001 	andeq	r0, r0, r1
			m_size (chunk) += m_hdrlen + m_size (ch);
     f10:	00003144 	andeq	r3, r0, r4, asr #2
     f14:	0000315c 	andeq	r3, r0, ip, asr r1
     f18:	0000315c 	andeq	r3, r0, ip, asr r1
     f1c:	000031bc 			; <UNDEFINED> instruction: 0x000031bc
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f20:	000031bc 			; <UNDEFINED> instruction: 0x000031bc
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f24:	000031f0 	strdeq	r3, [r0], -r0
     f28:	00000001 	andeq	r0, r0, r1
     f2c:	00000001 	andeq	r0, r0, r1
			m_setnextp (cc, m_nextp (chunk));
     f30:	00000001 	andeq	r0, r0, r1
			m_size (ch) += m_hdrlen + m_size (chunk);
     f34:	00000001 	andeq	r0, r0, r1
     f38:	00000001 	andeq	r0, r0, r1
     f3c:	00000001 	andeq	r0, r0, r1
     f40:	00000001 	andeq	r0, r0, r1
     f44:	00000001 	andeq	r0, r0, r1
	...
			if (m_size (chunk) >= m_size (ch))
     f50:	00000001 	andeq	r0, r0, r1
     f54:	00000001 	andeq	r0, r0, r1
		chunk = m_nextp (chunk))
     f58:	000031f0 	strdeq	r3, [r0], -r0
     f5c:	00003218 	andeq	r3, r0, r8, lsl r2
     f60:	00003218 	andeq	r3, r0, r8, lsl r2
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f64:	00003264 	andeq	r3, r0, r4, ror #4
	diag_wait (a);
     f68:	00003264 	andeq	r3, r0, r4, ror #4
	diag_wchar (c, a);
     f6c:	000033b4 			; <UNDEFINED> instruction: 0x000033b4
}
     f70:	000033b4 			; <UNDEFINED> instruction: 0x000033b4
     f74:	000034cc 	andeq	r3, r0, ip, asr #9
	syserror (ESTATE, "state");
     f78:	000034cc 	andeq	r3, r0, ip, asr #9
     f7c:	000034ec 	andeq	r3, r0, ip, ror #9
     f80:	00000001 	andeq	r0, r0, r1
     f84:	00000001 	andeq	r0, r0, r1
	for (i = 0; i < MAX_UTIMERS; i++)
     f88:	000034ec 	andeq	r3, r0, ip, ror #9
void utimer_add (address ut) {
     f8c:	00003508 	andeq	r3, r0, r8, lsl #10
	...
	for (i = 0; i < MAX_UTIMERS; i++)
     f98:	00003508 	andeq	r3, r0, r8, lsl #10
     f9c:	000035dc 	ldrdeq	r3, [r0], -ip
		syserror (ERESOURCE, "ut a");
     fa0:	000035dc 	ldrdeq	r3, [r0], -ip
	__pi_utims [i] = ut;
     fa4:	00003680 	andeq	r3, r0, r0, lsl #13
	...
}
     fb0:	0000368e 	andeq	r3, r0, lr, lsl #13
	*t = v;
     fb4:	00003690 	muleq	r0, r0, r6
	TCI_RUN_AUXILIARY_TIMER;
     fb8:	00003694 	muleq	r0, r4, r6
void update_n_wake (word min, Boolean force) {
     fbc:	00003698 	muleq	r0, r8, r6
	...
	if (TCI_UPDATE_DELAY_TICKS (force))
     fc8:	0000399c 	muleq	r0, ip, r9
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fcc:	0000399e 	muleq	r0, lr, r9
     fd0:	000039a0 	andeq	r3, r0, r0, lsr #19
     fd4:	000039a2 	andeq	r3, r0, r2, lsr #19
	...
     fe0:	00003680 	andeq	r3, r0, r0, lsl #13
     fe4:	000036fc 	strdeq	r3, [r0], -ip
     fe8:	000036fc 	strdeq	r3, [r0], -ip
     fec:	000037a8 	andeq	r3, r0, r8, lsr #15
     ff0:	000037a8 	andeq	r3, r0, r8, lsr #15
     ff4:	00003804 	andeq	r3, r0, r4, lsl #16
     ff8:	00003804 	andeq	r3, r0, r4, lsl #16
     ffc:	0000381c 	andeq	r3, r0, ip, lsl r8
		for_all_tasks (i) {
    1000:	00000001 	andeq	r0, r0, r1
	__pi_mintk = znew + min;
    1004:	00000001 	andeq	r0, r0, r1
    1008:	0000381c 	andeq	r3, r0, ip, lsl r8
			if (!twaiting (i))
    100c:	0000382c 	andeq	r3, r0, ip, lsr #16
    1010:	0000382c 	andeq	r3, r0, ip, lsr #16
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1014:	00003840 	andeq	r3, r0, r0, asr #16
    1018:	00003840 	andeq	r3, r0, r0, asr #16
    101c:	000038a4 	andeq	r3, r0, r4, lsr #17
    1020:	000038a4 	andeq	r3, r0, r4, lsr #17
    1024:	000038b8 			; <UNDEFINED> instruction: 0x000038b8
    1028:	000038b8 			; <UNDEFINED> instruction: 0x000038b8
    102c:	000038cc 	andeq	r3, r0, ip, asr #17
    1030:	000038cc 	andeq	r3, r0, ip, asr #17
    1034:	000038e0 	andeq	r3, r0, r0, ror #17
    1038:	000038e0 	andeq	r3, r0, r0, ror #17
    103c:	00003908 	andeq	r3, r0, r8, lsl #18
    1040:	00003908 	andeq	r3, r0, r8, lsl #18
				wakeuptm (i);
    1044:	00003918 	andeq	r3, r0, r8, lsl r9
    1048:	00003918 	andeq	r3, r0, r8, lsl r9
		for_all_tasks (i) {
    104c:	00003944 	andeq	r3, r0, r4, asr #18
				d = i->Timer - znew;
    1050:	00003944 	andeq	r3, r0, r4, asr #18
    1054:	00003958 	andeq	r3, r0, r8, asr r9
    1058:	00003958 	andeq	r3, r0, r8, asr r9
		if ((word)(__pi_mintk - znew) < min) 
    105c:	0000396c 	andeq	r3, r0, ip, ror #18
    1060:	0000396c 	andeq	r3, r0, ip, ror #18
    1064:	00003a7c 	andeq	r3, r0, ip, ror sl
	__pi_old = znew;
    1068:	00003a7c 	andeq	r3, r0, ip, ror sl
}
    106c:	00003ae0 	andeq	r3, r0, r0, ror #21
	TCI_RUN_DELAY_TIMER;
    1070:	00003ae0 	andeq	r3, r0, r0, ror #21
}
    1074:	00003b08 	andeq	r3, r0, r8, lsl #22
    1078:	00003b08 	andeq	r3, r0, r8, lsl #22
    107c:	00003c58 	andeq	r3, r0, r8, asr ip
	...
void proceed (word state) {
    1088:	00000001 	andeq	r0, r0, r1
	prcdstate (__pi_curr, state);
    108c:	00000001 	andeq	r0, r0, r1
    1090:	00000001 	andeq	r0, r0, r1
	release;
    1094:	00000001 	andeq	r0, r0, r1
	...
	sint j = nevents (__pi_curr);
    10a0:	00003cce 	andeq	r3, r0, lr, asr #25
	if (j >= MAX_EVENTS_PER_TASK)
    10a4:	00003cd0 	ldrdeq	r3, [r0], -r0
    10a8:	00003cd2 	ldrdeq	r3, [r0], -r2
    10ac:	00003cd6 	ldrdeq	r3, [r0], -r6
	...
	setestate (__pi_curr->Events [j], state, event);
    10b8:	00000001 	andeq	r0, r0, r1
	incwait (__pi_curr);
    10bc:	00000001 	andeq	r0, r0, r1
	setestate (__pi_curr->Events [j], state, event);
    10c0:	00003c58 	andeq	r3, r0, r8, asr ip
}
    10c4:	00003e78 	andeq	r3, r0, r8, ror lr
    10c8:	00003e78 	andeq	r3, r0, r8, ror lr
    10cc:	00003ed8 	ldrdeq	r3, [r0], -r8
void __pi_trigger (aword event) {
    10d0:	00000001 	andeq	r0, r0, r1
	for_all_tasks (i) {
    10d4:	00000001 	andeq	r0, r0, r1
		for (j = 0; j < nevents (i); j++) {
    10d8:	00003ed8 	ldrdeq	r3, [r0], -r8
    10dc:	00003ef0 	strdeq	r3, [r0], -r0
	...
			if (i->Events [j] . Event == event) {
    10e8:	00003f3e 	andeq	r3, r0, lr, lsr pc
    10ec:	00003f42 	andeq	r3, r0, r2, asr #30
    10f0:	00003f48 	andeq	r3, r0, r8, asr #30
				wakeupev (i, j);
    10f4:	00003f4a 	andeq	r3, r0, sl, asr #30
	...
}
    1100:	00003f42 	andeq	r3, r0, r2, asr #30
aword __pi_join (aword pid, word st) {
    1104:	00003f48 	andeq	r3, r0, r8, asr #30
	for_all_tasks (i) {
    1108:	00003f4a 	andeq	r3, r0, sl, asr #30
    110c:	00003f52 	andeq	r3, r0, r2, asr pc
	...
			__pi_wait (pid, st);
    1118:	00000001 	andeq	r0, r0, r1
}
    111c:	00000001 	andeq	r0, r0, r1
	for_all_tasks (i) {
    1120:	00000001 	andeq	r0, r0, r1
    1124:	00000001 	andeq	r0, r0, r1
void delay (word d, word state) {
    1128:	00003ef0 	strdeq	r3, [r0], -r0
	settstate (__pi_curr, state);
    112c:	00003f3c 	andeq	r3, r0, ip, lsr pc
    1130:	00000001 	andeq	r0, r0, r1
    1134:	00000001 	andeq	r0, r0, r1
    1138:	00003f3c 	andeq	r3, r0, ip, lsr pc
	update_n_wake (d, YES);
    113c:	00003fa8 	andeq	r3, r0, r8, lsr #31
    1140:	00003fa8 	andeq	r3, r0, r8, lsr #31
	__pi_curr->Timer = __pi_old + d;
    1144:	00003fbe 			; <UNDEFINED> instruction: 0x00003fbe
	...
	inctimer (__pi_curr);
    1150:	00003fc0 	andeq	r3, r0, r0, asr #31
    1154:	00003fe8 	andeq	r3, r0, r8, ror #31
}
    1158:	00003fe8 	andeq	r3, r0, r8, ror #31
    115c:	00003ff0 	strdeq	r3, [r0], -r0
	if (fun == NULL)
    1160:	00000001 	andeq	r0, r0, r1
		return (int) __pi_curr;
    1164:	00000001 	andeq	r0, r0, r1
    1168:	00000001 	andeq	r0, r0, r1
	for_all_tasks (i)
    116c:	00000001 	andeq	r0, r0, r1
}
    1170:	00000001 	andeq	r0, r0, r1
		if (i->code == fun)
    1174:	00000001 	andeq	r0, r0, r1
	for_all_tasks (i)
    1178:	00000001 	andeq	r0, r0, r1
    117c:	00000001 	andeq	r0, r0, r1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000003be 			; <UNDEFINED> instruction: 0x000003be
       4:	01590003 	cmpeq	r9, r3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	2f727375 	svccs	0x00727375
      20:	2f62696c 	svccs	0x0062696c
      24:	2f636367 	svccs	0x00636367
      28:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      2c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
      30:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
      34:	30312f69 	eorscc	r2, r1, r9, ror #30
      38:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
      3c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
		where = 1;
      40:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
		delay (1, st);
      44:	6f682f00 	svcvs	0x00682f00
		release;
      48:	632f656d 			; <UNDEFINED> instruction: 0x632f656d
      4c:	6c726168 	ldfvse	f6, [r2], #-416	; 0xfffffe60
      50:	6e617969 	vnmulvs.f16	s15, s2, s19	; <UNPREDICTABLE>
}
      54:	4f2f3332 	svcmi	0x002f3332
      58:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
      5c:	502f5445 	eorpl	r5, pc, r5, asr #8
			nq++;
      60:	534f4349 	movtpl	r4, #62281	; 0xf349
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	6369502f 	cmnvs	r9, #47	; 0x2f
      68:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
      6c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
      70:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
      74:	2f656d6f 	svccs	0x00656d6f
      78:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
      7c:	6179696c 	cmnvs	r9, ip, ror #18
      80:	2f33326e 	svccs	0x0033326e
      84:	4f534c4f 	svcmi	0x00534c4f
      88:	2f54454e 	svccs	0x0054454e
      8c:	4f434950 	svcmi	0x00434950
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      90:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
	if (!button_still_pressed (__button_list [pbutton]))
      94:	00534f63 	subseq	r4, r3, r3, ror #30
      98:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffffe4 <_estack+0xdfffafe4>
      9c:	68632f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
      a0:	696c7261 	stmdbvs	ip!, {r0, r5, r6, r9, ip, sp, lr}^
	if (baction == NULL)
      a4:	326e6179 	rsbcc	r6, lr, #1073741854	; 0x4000001e
      a8:	4c4f2f33 	mcrrmi	15, 3, r2, pc, cr3
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
endthread
      b0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      b4:	2f534f43 	svccs	0x00534f43
      b8:	4f636950 	svcmi	0x00636950
endthread
      bc:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
      c0:	2f736269 	svccs	0x00736269
      c4:	74654e56 	strbtvc	r4, [r5], #-3670	; 0xfffff1aa
fsm receiver {
      c8:	682f0049 	stmdavs	pc!, {r0, r3, r6}	; <UNPREDICTABLE>
      cc:	2f656d6f 	svccs	0x00656d6f
      d0:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
      d4:	6179696c 	cmnvs	r9, ip, ror #18
        packet = tcv_rnp(Receiving, sfd);
      d8:	2f33326e 	svccs	0x0033326e
      dc:	4f534c4f 	svcmi	0x00534c4f
      e0:	2f54454e 	svccs	0x0054454e
      e4:	4f434950 	svcmi	0x00434950
        receivedPtr = (struct msg *)(packet + 1);
      e8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
      ec:	2f534f63 	svccs	0x00534f63
        if(receivedPtr->receiverId == nodeId) {
      f0:	62694c56 	rsbvs	r4, r9, #22016	; 0x5600
      f4:	6c502f73 	mrrcvs	15, 7, r2, r0, cr3
      f8:	754e6775 	strbvc	r6, [lr, #-1909]	; 0xfffff88b
            proceed Broadcast; // Proceed to handling broadcast message
      fc:	00006c6c 	andeq	r6, r0, ip, ror #24
        proceed Receiving;
     100:	2e707061 	cdpcs	0, 7, cr7, cr0, cr1, {3}
     104:	00006363 	andeq	r6, r0, r3, ror #6
        ser_outf(Receive_Msg, "Message ");
     108:	74730000 	ldrbtvc	r0, [r3], #-0
     10c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
        proceed Show_Message;
     110:	0100682e 	tsteq	r0, lr, lsr #16
        ser_outf(Broadcast, "Broadcast ");
     114:	74730000 	ldrbtvc	r0, [r3], #-0
     118:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
        ser_outf(Show_Message, "Message from node %d (Seq %d): %s\n\r", receivedPtr->senderId, receivedPtr->sequenceNumber, receivedPtr->payload);
     11c:	0100682e 	tsteq	r0, lr, lsr #16
     120:	72610000 	rsbvc	r0, r1, #0
     124:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
     128:	00000200 	andeq	r0, r0, r0, lsl #4
     12c:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
        tcv_endp(packet);
     130:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     134:	74000003 	strvc	r0, [r0], #-3
        proceed Receiving;
     138:	645f7663 	ldrbvs	r7, [pc], #-1635	; 140 <_Min_Stack_Size+0x40>
}
     13c:	2e736665 	cdpcs	6, 7, cr6, cr3, cr5, {3}
        proceed Receiving;
     140:	00040068 	andeq	r0, r4, r8, rrx
        } else if (receivedPtr->receiverId == '0' || receivedPtr->receiverId == 0) {
     144:	756c7000 	strbvc	r7, [ip, #-0]!
     148:	756e5f67 	strbvc	r5, [lr, #-3943]!	; 0xfffff099
            proceed Broadcast; // Proceed to handling broadcast message
     14c:	682e6c6c 	stmdavs	lr!, {r2, r3, r5, r6, sl, fp, sp, lr}
}
     150:	00000500 	andeq	r0, r0, r0, lsl #10
     154:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
     158:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
     15c:	00003e6e 	andeq	r3, r0, lr, ror #28
     160:	05000000 	streq	r0, [r0, #-0]
     164:	0205001e 	andeq	r0, r5, #30
     168:	000000c8 	andeq	r0, r0, r8, asr #1
     16c:	05012703 	streq	r2, [r1, #-1795]	; 0xfffff8fd
     170:	1e050120 	adfnesp	f0, f5, f0
     174:	20050106 	andcs	r0, r5, r6, lsl #2
fsm send(struct msg * ptr) {
     178:	06050520 	streq	r0, [r5], -r0, lsr #10
     17c:	09051476 	stmdbeq	r5, {r1, r2, r4, r5, r6, sl, ip}
        address spkt = tcv_wnp(Send_Msg, sfd, sizeof(struct msg) + 4);
     180:	06120519 			; <UNDEFINED> instruction: 0x06120519
     184:	58100501 	ldmdapl	r0, {r0, r8, sl}
     188:	35060905 	strcc	r0, [r6, #-2309]	; 0xfffff6fb
     18c:	01062d05 	tsteq	r6, r5, lsl #26
     190:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
        *p = ptr->senderId; p++;
     194:	1505202d 	strne	r2, [r5, #-45]	; 0xffffffd3
     198:	0609052e 	streq	r0, [r9], -lr, lsr #10
        strcpy(p, ptr->payload);
     19c:	06240523 	strteq	r0, [r4], -r3, lsr #10
        *p = ptr->receiverId; p++;
     1a0:	20170501 	andscs	r0, r7, r1, lsl #10
        *p = ptr->sequenceNumber; p++;
     1a4:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
        strcpy(p, ptr->payload);
     1a8:	063d060d 	ldrteq	r0, [sp], -sp, lsl #12
        sequence++;
     1ac:	06090522 	streq	r0, [r9], -r2, lsr #10
     1b0:	424b4231 	submi	r4, fp, #268435459	; 0x10000003
     1b4:	06540550 			; <UNDEFINED> instruction: 0x06540550
        tcv_endp (spkt);
     1b8:	20090501 	andcs	r0, r9, r1, lsl #10
        ser_outf(Send_Msg, "\n\rMessage Sent\n\r");
     1bc:	05205405 	streq	r5, [r0, #-1029]!	; 0xfffffbfb
     1c0:	75062009 	strvc	r2, [r6, #-9]
}
     1c4:	0627054c 	strteq	r0, [r7], -ip, asr #10
        finish;
     1c8:	3b090521 	blcc	241654 <__ccfg+0x2216ac>
}
     1cc:	03061005 	movweq	r1, #24581	; 0x6005
     1d0:	13052e66 	movwne	r2, #24166	; 0x5e66
     1d4:	33050106 	movwcc	r0, #20742	; 0x5106
     1d8:	060d052e 	streq	r0, [sp], -lr, lsr #10
     1dc:	0313052f 	tsteq	r3, #197132288	; 0xbc00000
     1e0:	27052e1a 	smladcs	r5, sl, lr, r2
fsm root {
     1e4:	13050106 	movwne	r0, #20742	; 0x5106
     1e8:	0100083c 	tsteq	r0, ip, lsr r8
     1ec:	001a0501 	andseq	r0, sl, r1, lsl #10
     1f0:	01780205 	cmneq	r8, r5, lsl #4
     1f4:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
     1f8:	1c050100 	stfnes	f0, [r5], {-0}
        sequence = 0;
     1fc:	01500501 	cmpeq	r0, r1, lsl #10
        ptr = (struct Message *) umalloc(sizeof(struct msg));
     200:	01061a05 	tsteq	r6, r5, lsl #20
        sequence = 0;
     204:	05205005 	streq	r5, [r0, #-5]!
        ptr = (struct Message *) umalloc(sizeof(struct msg));
     208:	18052e47 	stmdane	r5, {r0, r1, r2, r6, r9, sl, fp, sp}
     20c:	03470526 	movteq	r0, #29990	; 0x7526
     210:	1805207a 	stmdane	r5, {r1, r3, r4, r5, r6, sp}
        phys_cc1350(0, CC1350_BUF_SZ);
     214:	03290526 			; <UNDEFINED> instruction: 0x03290526
        tcv_plug(0, &plug_null);
     218:	0905207a 	stmdbeq	r5, {r1, r3, r4, r5, r6, sp}
     21c:	18052606 	stmdane	r5, {r1, r2, r9, sl, sp}
        sfd = tcv_open(NONE, 0, 0);
     220:	09050106 	stmdbeq	r5, {r1, r2, r8}
     224:	12055b06 	andne	r5, r5, #6144	; 0x1800
     228:	09050106 	stmdbeq	r5, {r1, r2, r8}
     22c:	05152106 	ldreq	r2, [r5, #-262]	; 0xfffffefa
     230:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
            diag("unable to open TCV session");
     234:	0c052309 	stceq	3, cr2, [r5], {9}
     238:	061d051d 			; <UNDEFINED> instruction: 0x061d051d
            syserror(EASSERT, "no session");
     23c:	13090520 	movwne	r0, #38176	; 0x9520
     240:	01061105 	tsteq	r6, r5, lsl #2
        tcv_control(sfd, PHYSOPT_ON, NULL);
     244:	05220905 	streq	r0, [r2, #-2309]!	; 0xfffff6fb
     248:	1f051e0c 	svcne	0x00051e0c
        runfsm receiver;
     24c:	09052e06 	stmdbeq	r5, {r1, r2, r9, sl, fp, sp}
     250:	06110513 			; <UNDEFINED> instruction: 0x06110513
        receiverId = 0;
     254:	200c0501 	andcs	r0, ip, r1, lsl #10
     258:	2e062305 	cdpcs	3, 0, cr2, cr6, cr5, {0}
        ser_outf(Menu, "\n\rP2P Chat (Node #%d)\n\r"
     25c:	31130905 	tstcc	r3, r5, lsl #18
     260:	01061105 	tsteq	r6, r5, lsl #2
        ser_inf(Choice, "%c", &choice);
     264:	05230905 	streq	r0, [r3, #-2309]!	; 0xfffff6fb
     268:	09051d11 	stmdbeq	r5, {r0, r4, r8, sl, fp, ip}
     26c:	4d2f3f06 	stcmi	15, cr3, [pc, #-24]!	; 25c <root+0x78>
        choice = toupper((unsigned char)choice);
     270:	21062705 	tstcs	r6, r5, lsl #14
     274:	052d0905 	streq	r0, [sp, #-2309]!	; 0xfffff6fb
     278:	052f0613 	streq	r0, [pc, #-1555]!	; fffffc6d <_estack+0xdfffac6d>
     27c:	05010627 	streq	r0, [r1, #-1575]	; 0xfffff9d9
        switch (choice) {
     280:	0a022e13 	beq	8bad4 <__ccfg+0x6bb2c>
     284:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     288:	0205001a 	andeq	r0, r5, #26
                proceed Broadcast_Transmission;
     28c:	000001e4 	andeq	r0, r0, r4, ror #3
                proceed Menu;
     290:	0100fe03 	tsteq	r0, r3, lsl #28	; <UNPREDICTABLE>
        ser_outf(Change_ID, "\n\rNew node ID (1-25):");
     294:	05011c05 	streq	r1, [r1, #-3077]	; 0xfffff3fb
     298:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
        ser_inf(Get_ChangeID, "%d", &nodeId);
     29c:	0505201c 	streq	r2, [r5, #-28]	; 0xffffffe4
     2a0:	05139f06 	ldreq	r9, [r3, #-3846]	; 0xfffff0fa
     2a4:	10051909 	andne	r1, r5, r9, lsl #18
            if (nodeId < 1 || nodeId > 25) {
     2a8:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
     2ac:	1f100521 	svcne	0x00100521
                ser_outf(Get_ChangeID, "\n\rInvalid ID");
     2b0:	05232c05 	streq	r2, [r3, #-3077]!	; 0xfffff3fb
     2b4:	09051d10 	stmdbeq	r5, {r4, r8, sl, fp, ip}
                proceed Change_ID;
     2b8:	12052106 	andne	r2, r5, #-2147483647	; 0x80000001
     2bc:	09050106 	stmdbeq	r5, {r1, r2, r8}
            proceed Menu;
     2c0:	2c053006 	stccs	0, cr3, [r5], {6}
        ser_outf(Direct_Transmission, "\n\rReceiver node ID (1-25):");
     2c4:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
     2c8:	2209052e 	andcs	r0, r9, #192937984	; 0xb800000
        ser_inf(Get_ReceiverID, "%d", &receiverId);
     2cc:	051e0d05 	ldreq	r0, [lr, #-3333]	; 0xfffff2fb
     2d0:	3f220609 	svccc	0x00220609
     2d4:	060f054d 	streq	r0, [pc], -sp, asr #10
            if (receiverId < 1 || receiverId > 25) {
     2d8:	660d0501 	strvs	r0, [sp], -r1, lsl #10
     2dc:	05230c05 	streq	r0, [r3, #-3077]!	; 0xfffff3fb
                ser_outf(Get_ReceiverID, "\n\rInvalid ID");
     2e0:	09051d0d 	stmdbeq	r5, {r0, r2, r3, r8, sl, fp, ip}
     2e4:	0c052306 	stceq	3, cr2, [r5], {6}
                proceed Direct_Transmission;
     2e8:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
     2ec:	053d2106 	ldreq	r2, [sp, #-262]!	; 0xfffffefa
        ser_outf(Broadcast_Transmission, "\n\rMessage: ");
     2f0:	514b4e09 	cmppl	fp, r9, lsl #28
     2f4:	01061405 	tsteq	r6, r5, lsl #8
        ser_in(Receive_Msg, ptr->payload, 27);
     2f8:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
     2fc:	09051e14 	stmdbeq	r5, {r2, r4, r9, sl, fp, ip}
     300:	0a032206 	beq	c8b20 <__ccfg+0xa8b78>
        if(strlen(ptr->payload) >= 27) {
     304:	05671358 	strbeq	r1, [r7, #-856]!	; 0xfffffca8
     308:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     30c:	09054a10 	stmdbeq	r5, {r4, r9, fp, lr}
            ptr->payload[26] = '\0';
     310:	11054c06 	tstne	r5, r6, lsl #24
     314:	03580d03 	cmpeq	r8, #3, 26	; 0xc0
        call send(ptr, Menu);
     318:	03062e76 	movweq	r2, #28278	; 0x6e76
        ptr->senderId = nodeId;
     31c:	2f062010 	svccs	0x00062010
     320:	50180905 	andspl	r0, r8, r5, lsl #18
        ptr->receiverId = receiverId;
     324:	05680d05 	strbeq	r0, [r8, #-3333]!	; 0xfffff2fb
        ptr->sequenceNumber = (byte)sequence;
     328:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
     32c:	11052010 	tstne	r5, r0, lsl r0
        call send(ptr, Menu);
     330:	054c3d06 	strbeq	r3, [ip, #-3334]	; 0xfffff2fa
     334:	09053f0d 	stmdbeq	r5, {r0, r2, r3, r8, r9, sl, fp, ip, sp}
     338:	0d055042 	stceq	0, cr5, [r5, #-264]	; 0xfffffef8
     33c:	06200568 	strteq	r0, [r0], -r8, ror #10
                proceed Direct_Transmission;
     340:	20100501 	andscs	r0, r0, r1, lsl #10
                ser_outf(Choice, "\n\rIncorrect Option.");
     344:	3e061105 	adfccs	f1, f6, f5
     348:	4309054c 	movwmi	r0, #38220	; 0x954c
                proceed Menu;
     34c:	06200550 			; <UNDEFINED> instruction: 0x06200550
}
     350:	20090501 	andcs	r0, r9, r1, lsl #10
     354:	05202005 	streq	r2, [r0, #-5]!
     358:	4b062009 	blmi	188384 <__ccfg+0x1683dc>
     35c:	01061c05 	tsteq	r6, r5, lsl #24
     360:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
     364:	0d053c0b 	stceq	12, cr3, [r5, #-44]	; 0xffffffd4
     368:	1e052206 	cdpne	2, 0, cr2, cr5, cr6, {0}
     36c:	09050106 	stmdbeq	r5, {r1, r2, r8}
     370:	0c055206 	sfmeq	f5, 4, [r5], {6}
     374:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
     378:	030c0526 	movweq	r0, #50470	; 0xc526
     37c:	1705207a 	smlsdxne	r5, sl, r0, r2
     380:	06090520 	streq	r0, [r9], -r0, lsr #10
     384:	0619053e 			; <UNDEFINED> instruction: 0x0619053e
     388:	06090501 	streq	r0, [r9], -r1, lsl #10
     38c:	061f053e 			; <UNDEFINED> instruction: 0x061f053e
     390:	06090501 	streq	r0, [r9], -r1, lsl #10
     394:	010e053e 	tsteq	lr, lr, lsr r5
     398:	01061205 	tsteq	r6, r5, lsl #4
     39c:	05581105 	ldrbeq	r1, [r8, #-261]	; 0xfffffefb
     3a0:	05200646 	streq	r0, [r0, #-1606]!	; 0xfffff9ba
static void devinit_uart (int devnum) {
     3a4:	7fb00311 	svcvc	0x00b00311
	adddevfunc (ioreq_uart_a, devnum);
     3a8:	2e09032e 	cdpcs	3, 0, cr0, cr9, cr14, {1}
     3ac:	0313054c 	tsteq	r3, #76, 10	; 0x13000000
void udelay (volatile word n) {
     3b0:	052e00c6 	streq	r0, [lr, #-198]!	; 0xffffff3a
     3b4:	05010627 	streq	r0, [r1, #-1575]	; 0xfffff9d9
	while (n) {
     3b8:	27053c13 	smladcs	r5, r3, ip, r3
     3bc:	0026022e 	eoreq	r0, r6, lr, lsr #4
}
     3c0:	14e10101 	strbtne	r0, [r1], #257	; 0x101
	while (n--);
     3c4:	00030000 	andeq	r0, r3, r0
     3c8:	0000028a 	andeq	r0, r0, sl, lsl #5
     3cc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
		n--;
     3d0:	0101000d 	tsteq	r1, sp
     3d4:	00000101 	andeq	r0, r0, r1, lsl #2
     3d8:	00000100 	andeq	r0, r0, r0, lsl #2
void mdelay (volatile word n) {
     3dc:	6f682f01 	svcvs	0x00682f01
     3e0:	632f656d 			; <UNDEFINED> instruction: 0x632f656d
	while (n) {
     3e4:	6c726168 	ldfvse	f6, [r2], #-416	; 0xfffffe60
     3e8:	6e617969 	vnmulvs.f16	s15, s2, s19	; <UNPREDICTABLE>
}
     3ec:	4f2f3332 	svcmi	0x002f3332
		udelay (999);
     3f0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     3f4:	502f5445 	eorpl	r5, pc, r5, asr #8
		n--;
     3f8:	534f4349 	movtpl	r4, #62281	; 0xf349
     3fc:	6369502f 	cmnvs	r9, #47	; 0x2f
     400:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
     404:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
void __pi_ondomain (lword d) {
     408:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
     40c:	2f656d6f 	svccs	0x00656d6f
		if (__pi_systat.effpdm > 1)
     410:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     414:	6179696c 	cmnvs	r9, ip, ror #18
			__pi_systat.effpdm = 1;
     418:	2f33326e 	svccs	0x0033326e
	PRCMPowerDomainOn (d);
     41c:	4f534c4f 	svcmi	0x00534c4f
     420:	2f54454e 	svccs	0x0054454e
     424:	4f434950 	svcmi	0x00434950
     428:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     42c:	2f534f63 	svccs	0x00534f63
     430:	33314343 	teqcc	r1, #201326593	; 0xc000001
     434:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
	__pi_systat.ondmns |= d;
     438:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
     43c:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
}
     440:	72642f45 	rsbvc	r2, r4, #276	; 0x114
     444:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
void __pi_offdomain (lword d) {
     448:	0062696c 	rsbeq	r6, r2, ip, ror #18
	PRCMPowerDomainOff (d);
     44c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 398 <root+0x1b4>
     450:	68632f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     454:	696c7261 	stmdbvs	ip!, {r0, r5, r6, r9, ip, sp, lr}^
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     458:	326e6179 	rsbcc	r6, lr, #1073741854	; 0x4000001e
     45c:	4c4f2f33 	mcrrmi	15, 3, r2, pc, cr3
     460:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
     464:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
	if (d & PRCM_DOMAIN_RFCORE) {
     468:	2f534f43 	svccs	0x00534f43
     46c:	4f636950 	svcmi	0x00636950
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     470:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
			__pi_systat.effpdm = __pi_systat.reqpdm;
     474:	2f736269 	svccs	0x00736269
     478:	2f004f49 	svccs	0x00004f49
	__pi_systat.ondmns &= ~d;
     47c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     480:	6168632f 	cmnvs	r8, pc, lsr #6
}
     484:	79696c72 	stmdbvc	r9!, {r1, r4, r5, r6, sl, fp, sp, lr}^
     488:	33326e61 	teqcc	r2, #1552	; 0x610
void __pi_syserror (word ec, const char *m) {
     48c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
	diag ("SYSERR: %x, %s", ec, m);
     490:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
     494:	4349502f 	movtmi	r5, #36911	; 0x902f
  __ASM volatile ("cpsid i" : : : "memory");
     498:	502f534f 	eorpl	r5, pc, pc, asr #6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     49c:	534f6369 	movtpl	r6, #62313	; 0xf369
		all_leds_blink;
     4a0:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
     4a4:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
     4a8:	6f736e65 	svcvs	0x00736e65
     4ac:	2f007372 	svccs	0x00007372
     4b0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     4b4:	6168632f 	cmnvs	r8, pc, lsr #6
     4b8:	79696c72 	stmdbvc	r9!, {r1, r4, r5, r6, sl, fp, sp, lr}^
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4bc:	33326e61 	teqcc	r2, #1552	; 0x610
     4c0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
     4c4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
     4c8:	4349502f 	movtmi	r5, #36911	; 0x902f
     4cc:	502f534f 	eorpl	r5, pc, pc, asr #6
     4d0:	534f6369 	movtpl	r6, #62313	; 0xf369
	while (1) {
     4d4:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
     4d8:	006c656e 	rsbeq	r6, ip, lr, ror #10
     4dc:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
void tci_run_delay_timer () {
     4e0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
	setdel = __pi_mintk - __pi_old;
     4e4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     4e8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     4ec:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     4f0:	61652d65 	cmnvs	r5, r5, ror #26
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4f4:	312f6962 			; <UNDEFINED> instruction: 0x312f6962
     4f8:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
     4fc:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
     500:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     504:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
	sti_tim;
     508:	2f656d6f 	svccs	0x00656d6f
}
     50c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     510:	6179696c 	cmnvs	r9, ip, ror #18
     514:	2f33326e 	svccs	0x0033326e
     518:	4f534c4f 	svcmi	0x00534c4f
     51c:	2f54454e 	svccs	0x0054454e
     520:	4f434950 	svcmi	0x00434950
	cli_aux;
     524:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
     528:	00534f63 	subseq	r4, r3, r3, ror #30
     52c:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     530:	00632e6e 	rsbeq	r2, r3, lr, ror #28
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     534:	73000001 	movwvc	r0, #1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     538:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     53c:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
	sti_aux;
     540:	00020068 	andeq	r0, r2, r8, rrx
}
     544:	736d6300 	cmnvc	sp, #0, 6
     548:	675f7369 	ldrbvs	r7, [pc, -r9, ror #6]
     54c:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
void AONRTCIntHandler () {
     550:	00000100 	andeq	r0, r0, r0, lsl #2
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     554:	6f697067 	svcvs	0x00697067
     558:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     55c:	72690000 	rsbvc	r0, r9, #0
		if (__pi_utims [0] == 0)
     560:	69745f71 	ldmdbvs	r4!, {r0, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     564:	5f72656d 	svcpl	0x0072656d
		if (*(__pi_utims [0])) {
     568:	7364656c 	cmnvc	r4, #108, 10	; 0x1b000000
     56c:	0300682e 	movweq	r6, #2094	; 0x82e
			(*(__pi_utims [0]))--;
     570:	61750000 	cmnvs	r5, r0
		if (__pi_utims [1] == 0)
     574:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
		if (*(__pi_utims [1])) {
     578:	00000200 	andeq	r0, r0, r0, lsl #4
			aux_timer_inactive = 0;
     57c:	5f717269 	svcpl	0x00717269
			(*(__pi_utims [1]))--;
     580:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
		if (__pi_utims [2] == 0)
     584:	2e736e6f 	cdpcs	14, 7, cr6, cr3, cr15, {3}
		if (*(__pi_utims [2])) {
     588:	00030068 	andeq	r0, r3, r8, rrx
			(*(__pi_utims [2]))--;
     58c:	71726900 	cmnvc	r2, r0, lsl #18
		if (__pi_utims [3] != 0) {
     590:	6e69705f 	mcrvs	0, 3, r7, cr9, cr15, {2}
			if (*(__pi_utims [3])) {
     594:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
				aux_timer_inactive = 0;
     598:	2e726f73 	mrccs	15, 3, r6, cr2, cr3, {3}
				(*(__pi_utims [3]))--;
     59c:	00040068 	andeq	r0, r4, r8, rrx
	if (__pi_systat.ledsts) {
     5a0:	63727000 	cmnvs	r2, #0
     5a4:	00682e6d 	rsbeq	r2, r8, sp, ror #28
		if (__pi_systat.ledblc++ == 0) {
     5a8:	61000002 	tstvs	r0, r2
     5ac:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
			if (__pi_systat.ledblk) {
     5b0:	682e6374 	stmdavs	lr!, {r2, r4, r5, r6, r8, r9, sp, lr}
     5b4:	00000200 	andeq	r0, r0, r0, lsl #4
     5b8:	5f727770 	svcpl	0x00727770
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     5bc:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
     5c0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     5c4:	6f610000 	svcvs	0x00610000
				if (__pi_systat.ledsts & 0x2)
     5c8:	6f695f6e 	svcvs	0x00695f6e
     5cc:	00682e63 	rsbeq	r2, r8, r3, ror #28
     5d0:	73000002 	movwvc	r0, #2
				if (__pi_systat.ledsts & 0x4)
     5d4:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
				__pi_systat.ledblk = 0;
     5d8:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
     5dc:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
			if (__pi_systat.fstblk)
     5e0:	6f610000 	svcvs	0x00610000
     5e4:	75775f6e 	ldrbvc	r5, [r7, #-3950]!	; 0xfffff092
				__pi_systat.ledblc = 200;
     5e8:	00682e63 	rsbeq	r2, r8, r3, ror #28
	if (events & AON_RTC_EVFLAGS_CH0) {
     5ec:	61000002 	tstvs	r0, r2
		cli_tim;
     5f0:	625f6e6f 	subsvs	r6, pc, #1776	; 0x6f0
		__pi_new += setdel;
     5f4:	6f6d7461 	svcvs	0x006d7461
		cli_tim;
     5f8:	00682e6e 	rsbeq	r2, r8, lr, ror #28
		__pi_new += setdel;
     5fc:	73000002 	movwvc	r0, #2
     600:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     604:	00682e74 	rsbeq	r2, r8, r4, ror lr
		RISE_N_SHINE;
     608:	61000006 	tstvs	r0, r6
     60c:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
}
     610:	00010068 	andeq	r0, r1, r8, rrx
		aux_timer_inactive = 1;
     614:	63616d00 	cmnvs	r1, #0, 26
     618:	00682e68 	rsbeq	r2, r8, r8, ror #28
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     61c:	70000001 	andvc	r0, r0, r1
     620:	5f736e69 	svcpl	0x00736e69
     624:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
				if (__pi_systat.ledsts & 0x2)
     628:	00010068 	andeq	r0, r1, r8, rrx
     62c:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
     630:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
				if (__pi_systat.ledsts & 0x4)
     634:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
				__pi_systat.ledblk = 1;
     638:	0100682e 	tsteq	r0, lr, lsr #16
     63c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
		if (aux_timer_inactive) {
     640:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
			cli_aux;
     644:	00070068 	andeq	r0, r7, r8, rrx
     648:	72656b00 	rsbvc	r6, r5, #0, 22
     64c:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
     650:	00050068 	andeq	r0, r5, r8, rrx
     654:	27050000 	strcs	r0, [r5, -r0]
     658:	a4020500 	strge	r0, [r2], #-1280	; 0xfffffb00
     65c:	03000003 	movweq	r0, #3
     660:	050106fc 	streq	r0, [r1, #-1788]	; 0xfffff904
     664:	27051402 	strcs	r1, [r5, -r2, lsl #8]
word tci_update_delay_ticks (Boolean force) {
     668:	02051006 	andeq	r1, r5, #6
	cli_tim;
     66c:	00050222 	andeq	r0, r5, r2, lsr #4
     670:	1f050101 	svcne	0x00050101
	if (setdel) {
     674:	b0020500 	andlt	r0, r2, r0, lsl #10
		if (force) {
     678:	03000003 	movweq	r0, #3
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     67c:	02050118 	andeq	r0, r5, #24, 2
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     680:	0108053d 	tsteq	r8, sp, lsr r5
     684:	01060905 	tsteq	r6, r5, lsl #18
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     688:	053c0805 	ldreq	r0, [ip, #-2053]!	; 0xfffff7fb
				AON_RTC_O_CH0CMP)) - gettav ());
     68c:	03052401 	movweq	r2, #21505	; 0x5401
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     690:	02052b06 	andeq	r2, r5, #6144	; 0x1800
     694:	010d051b 	tsteq	sp, fp, lsl r5
     698:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
     69c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
}
     6a0:	03053c08 	movweq	r3, #23560	; 0x5c08
		sti_tim;
     6a4:	04053406 	streq	r3, [r5], #-1030	; 0xfffffbfa
     6a8:	07020106 	streq	r0, [r2, -r6, lsl #2]
		return YES;
     6ac:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     6b0:	0205001f 	andeq	r0, r5, #31
     6b4:	000003dc 	ldrdeq	r0, [r0], -ip
     6b8:	05011f03 	streq	r1, [r1, #-3843]	; 0xfffff0fd
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6bc:	08053d02 	stmdaeq	r5, {r1, r8, sl, fp, ip, sp}
	UARTDisable (UART0_BASE);
     6c0:	06090501 	streq	r0, [r9], -r1, lsl #10
     6c4:	3c080501 	cfstr32cc	mvfx0, [r8], {1}
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6c8:	05240105 	streq	r0, [r4, #-261]!	; 0xfffffefb
	UARTDisable (UART0_BASE);
     6cc:	4b390603 	blmi	e41ee0 <__ccfg+0xe21f38>
	UARTConfigSetExpClk (UART0_BASE,
     6d0:	01060405 	tsteq	r6, r5, lsl #8
     6d4:	01000702 	tsteq	r0, r2, lsl #14
     6d8:	001e0501 	andseq	r0, lr, r1, lsl #10
     6dc:	04080205 	streq	r0, [r8], #-517	; 0xfffffdfb
     6e0:	2a030000 	bcs	c06e8 <__ccfg+0xa0740>
}
     6e4:	16020501 	strne	r0, [r2], -r1, lsl #10
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6e8:	0e061e05 	cdpeq	14, 0, cr1, cr6, cr5, {0}
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     6ec:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
     6f0:	05051c1e 	streq	r1, [r5, #-3102]	; 0xfffff3e2
     6f4:	06030524 	streq	r0, [r3], -r4, lsr #10
	urates [0] = rate;
     6f8:	06120522 	ldreq	r0, [r2], -r2, lsr #10
}
     6fc:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
     700:	21060405 	tstcs	r6, r5, lsl #8
     704:	01061705 	tsteq	r6, r5, lsl #14
     708:	3f060205 	svccc	0x00060205
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     70c:	013b0575 	teqeq	fp, r5, ror r5
     710:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
     714:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     718:	02055808 	andeq	r5, r5, #8, 16	; 0x80000
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     71c:	15053006 	strne	r3, [r5, #-6]
     720:	01050106 	tsteq	r5, r6, lsl #2
	__pi_uart_setrate (urates [0], __pi_uart);
     724:	0004024b 	andeq	r0, r4, fp, asr #4
     728:	1f050101 	svcne	0x00050101
     72c:	48020500 	stmdami	r2, {r8, sl}
     730:	03000004 	movweq	r0, #4
     734:	0205013a 	andeq	r0, r5, #-2147483634	; 0x8000000e
	switch (operation) {
     738:	061f0517 			; <UNDEFINED> instruction: 0x061f0517
static int ioreq_uart_a (int operation, char *buf, int len) {
     73c:	2502050d 	strcs	r0, [r2, #-1293]	; 0xfffffaf3
     740:	05451f05 	strbeq	r1, [r5, #-3845]	; 0xfffff0fb
	switch (operation) {
     744:	2f062502 	svccs	0x00062502
     748:	05013c05 	streq	r3, [r1, #-3077]	; 0xfffff3fb
     74c:	09050108 	stmdbeq	r5, {r3, r8}
				len--;
     750:	08050106 	stmdaeq	r5, {r1, r2, r8}
				*buf++ = uart_a_read;
     754:	06020558 			; <UNDEFINED> instruction: 0x06020558
			while (len && uart_a_char_available) {
     758:	06050530 			; <UNDEFINED> instruction: 0x06050530
     75c:	06030501 	streq	r0, [r3], -r1, lsl #10
			if (len != operation) {
     760:	0612054b 	ldreq	r0, [r2], -fp, asr #10
}
     764:	20270501 	eorcs	r0, r7, r1, lsl #10
     768:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
			uart_a_disable_int;
     76c:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
			if (uart_a_char_available) {
     770:	05010624 	streq	r0, [r1, #-1572]	; 0xfffff9dc
			uart_a_disable_int;
     774:	02053c17 	andeq	r3, r5, #5888	; 0x1700
     778:	15052306 	strne	r2, [r5, #-774]	; 0xfffffcfa
     77c:	01050106 	tsteq	r5, r6, lsl #2
			if (uart_a_char_available) {
     780:	0004024b 	andeq	r0, r4, fp, asr #4
				uart_a_enable_int;
     784:	13050101 	movwne	r0, #20737	; 0x5101
     788:	00020500 	andeq	r0, r2, r0, lsl #10
     78c:	03000000 	movweq	r0, #0
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     790:	050100ce 	streq	r0, [r1, #-206]	; 0xffffff32
     794:	13051402 	movwne	r1, #21506	; 0x5402
			return -2;
     798:	02051e06 	andeq	r1, r5, #6, 28	; 0x60
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     79c:	36410622 	strbcc	r0, [r1], -r2, lsr #12
				uart_a_write (*buf);
     7a0:	04130305 	ldreq	r0, [r3], #-773	; 0xfffffcfb
				len--;
     7a4:	03040502 	movweq	r0, #17666	; 0x4502
			while (len && uart_a_room_in_tx) {
     7a8:	300101f0 	strdcc	r0, [r1], -r0	; <UNPREDICTABLE>
     7ac:	01065c05 	tsteq	r6, r5, lsl #24
			if (len != operation) {
     7b0:	4c060405 	cfstrsmi	mvf0, [r6], {5}
			uart_a_disable_int;
     7b4:	100a0514 	andne	r0, sl, r4, lsl r5
     7b8:	01000502 	tsteq	r0, r2, lsl #10
     7bc:	002d0501 	eoreq	r0, sp, r1, lsl #10
			if (uart_a_room_in_tx) {
     7c0:	048c0205 	streq	r0, [ip], #517	; 0x205
				uart_a_enable_int;
     7c4:	97030000 	strls	r0, [r3, -r0]
     7c8:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
     7cc:	17010114 	smladne	r1, r4, r1, r0
	switch (operation) {
     7d0:	03062d05 	movweq	r2, #27909	; 0x6d05
			uart_a_disable_int;
     7d4:	02050179 	andeq	r0, r5, #1073741854	; 0x4000001e
			if (uart_a_room_in_tx) {
     7d8:	09030635 	stmdbeq	r3, {r0, r2, r4, r5, r9, sl}
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7dc:	0503044a 	streq	r0, [r3, #-1098]	; 0xfffffbb6
     7e0:	7fb50303 	svcvc	0x00b50303
			uart_a_enable_int;
     7e4:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
     7e8:	cb03062d 	blgt	c20a4 <__ccfg+0xa20fc>
     7ec:	01042001 	tsteq	r4, r1
     7f0:	03060205 	movweq	r0, #25093	; 0x6205
			return 0;
     7f4:	052e7f8f 	streq	r7, [lr, #-3983]!	; 0xfffff071
			if (len == UART_CNTRL_SETRATE) {
     7f8:	01011303 	tsteq	r1, r3, lsl #6
				if (__pi_uart_setrate (*((word*)buf),
     7fc:	29050404 	stmdbcs	r5, {r2, sl}
     800:	0100eb03 	tsteq	r0, r3, lsl #22
     804:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
				syserror (EREQPAR, "uar");
     808:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
			syserror (ENOOPER, "uai");
     80c:	03030501 	movweq	r0, #13569	; 0x3501
			if (len == UART_CNTRL_GETRATE) {
     810:	04207f90 	strteq	r7, [r0], #-3984	; 0xfffff070
				return 1;
     814:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     818:	042000f0 	strteq	r0, [r0], #-240	; 0xffffff10
			syserror (ENOOPER, "uai");
     81c:	06030501 	streq	r0, [r3], -r1, lsl #10
     820:	2e7f9003 	cdpcs	0, 7, cr9, cr15, cr3, {0}
     824:	29050404 	stmdbcs	r5, {r2, sl}
     828:	0100eb03 	tsteq	r0, r3, lsl #22
     82c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
     830:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
     834:	06030501 	streq	r0, [r3], -r1, lsl #10
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     838:	2e7f9003 	cdpcs	0, 7, cr9, cr15, cr3, {0}
void UART0IntHandler () {
     83c:	01010101 	tsteq	r1, r1, lsl #2
     840:	01660101 	cmneq	r6, r1, lsl #2
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     844:	0404012e 	streq	r0, [r4], #-302	; 0xfffffed2
     848:	a1032905 	tstge	r3, r5, lsl #18
     84c:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     850:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
     854:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		RISE_N_SHINE;
     858:	da030603 	ble	c206c <__ccfg+0xa20c4>
     85c:	04042e7e 	streq	r2, [r4], #-3710	; 0xfffff182
     860:	a1032905 	tstge	r3, r5, lsl #18
		i_trigger (devevent (UART_A, READ));
     864:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
     868:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
     86c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     870:	da030603 	ble	c2084 <__ccfg+0xa20dc>
     874:	01012e7e 	tsteq	r1, lr, ror lr
     878:	01010101 	tsteq	r1, r1, lsl #2
     87c:	052e0166 	streq	r0, [lr, #-358]!	; 0xfffffe9a
     880:	07021108 	streq	r1, [r2, -r8, lsl #2]
     884:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     888:	0205001d 	andeq	r0, r5, #29
     88c:	000004e0 	andeq	r0, r0, r0, ror #9
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     890:	01029d03 	tsteq	r2, r3, lsl #26
     894:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
     898:	050e061d 	streq	r0, [lr, #-1565]	; 0xfffff9e3
     89c:	09052416 	stmdbeq	r5, {r1, r2, r4, sl, sp}
		i_trigger (devevent (UART_A, WRITE));
     8a0:	2016054a 	andscs	r0, r6, sl, asr #10
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     8a4:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
     8a8:	03230602 			; <UNDEFINED> instruction: 0x03230602
		RISE_N_SHINE;
     8ac:	11050176 	tstne	r5, r6, ror r1
     8b0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
     8b4:	052e0d03 	streq	r0, [lr, #-3331]!	; 0xfffff2fd
		i_trigger (devevent (UART_A, WRITE));
     8b8:	2073032f 	rsbscs	r0, r3, pc, lsr #6
     8bc:	0a032a05 	beq	cb0d8 <__ccfg+0xab130>
     8c0:	032f0520 			; <UNDEFINED> instruction: 0x032f0520
     8c4:	36052076 			; <UNDEFINED> instruction: 0x36052076
     8c8:	032a052e 			; <UNDEFINED> instruction: 0x032a052e
     8cc:	02052e0a 	andeq	r2, r5, #10, 28	; 0xa0
     8d0:	01052306 	tsteq	r5, r6, lsl #6
     8d4:	0c023d06 	stceq	13, cr3, [r2], {6}
     8d8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     8dc:	02050021 	andeq	r0, r5, #33	; 0x21
     8e0:	00000524 	andeq	r0, r0, r4, lsr #10
}
     8e4:	0102aa03 	tsteq	r2, r3, lsl #20
     8e8:	05170205 	ldreq	r0, [r7, #-517]	; 0xfffffdfb
     8ec:	051b0621 	ldreq	r0, [fp, #-1569]	; 0xfffff9df
     8f0:	09052502 	stmdbeq	r5, {r1, r8, sl, sp}
void __buttons_setirq (int val) {
     8f4:	02053c06 	andeq	r3, r5, #1536	; 0x600
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     8f8:	01690314 	cmneq	r9, r4, lsl r3
     8fc:	01061105 	tsteq	r6, r5, lsl #2
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     900:	052e2f05 	streq	r2, [lr, #-3845]!	; 0xfffff0fb
     904:	2017032a 	andscs	r0, r7, sl, lsr #6
     908:	69032f05 	stmdbvs	r3, {r0, r2, r8, r9, sl, fp, sp}
     90c:	2e360520 	cfabs64cs	mvdx0, mvdx6
     910:	17032a05 	strne	r2, [r3, -r5, lsl #20]
		bn = BUTTON_GPIO (__button_list [i]);
     914:	06020520 	streq	r0, [r2], -r0, lsr #10
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     918:	3c090523 	cfstr32cc	mvfx0, [r9], {35}	; 0x23
     91c:	13060105 	movwne	r0, #24837	; 0x6105
     920:	01000602 	tsteq	r0, r2, lsl #12
     924:	001a0501 	andseq	r0, sl, r1, lsl #10
     928:	05500205 	ldrbeq	r0, [r0, #-517]	; 0xfffffdfb
}
     92c:	b7030000 	strlt	r0, [r3, -r0]
     930:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
     934:	1a051414 	bne	14598c <__ccfg+0x1259e4>
     938:	0b050e06 	bleq	144158 <__ccfg+0x1241b0>
void __pinlist_setirq (int val) {
     93c:	2e090524 	cfsh32cs	mvfx0, mvfx9, #20
	for (i = 0; i < N_PINLIST; i++) {
     940:	32060205 	andcc	r0, r6, #1342177280	; 0x50000000
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     944:	14060505 	strne	r0, [r6], #-1285	; 0xfffffafb
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     948:	051e2b05 	ldreq	r2, [lr, #-2821]	; 0xfffff4fb
	for (i = 0; i < N_PINLIST; i++) {
     94c:	05220602 	streq	r0, [r2, #-1538]!	; 0xfffff9fe
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     950:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
     954:	18250603 	stmdane	r5!, {r0, r1, r9, sl}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     958:	06120515 			; <UNDEFINED> instruction: 0x06120515
     95c:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
     960:	30060305 	andcc	r0, r6, r5, lsl #6
     964:	01060705 	tsteq	r6, r5, lsl #14
  __ASM volatile ("cpsie i" : : : "memory");
     968:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
}
     96c:	052f0604 	streq	r0, [pc, #-1540]!	; 370 <root+0x18c>
     970:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
     974:	052f0604 	streq	r0, [pc, #-1540]!	; 378 <root+0x194>
void GPIOIntHandler () {
     978:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
if (buttons_int) {
     97c:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
     980:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     984:	03052006 	movweq	r2, #20486	; 0x5006
	buttons_disable ();
     988:	07052206 	streq	r2, [r5, -r6, lsl #4]
	i_trigger ((aword)&__button_list);
     98c:	06050106 	streq	r0, [r5], -r6, lsl #2
     990:	06040520 	streq	r0, [r4], -r0, lsr #10
     994:	06170521 	ldreq	r0, [r7], -r1, lsr #10
     998:	04051f13 	streq	r1, [r5], #-3859	; 0xfffff0ed
     99c:	03052f06 	movweq	r2, #24326	; 0x5f06
     9a0:	06120514 			; <UNDEFINED> instruction: 0x06120514
     9a4:	20060501 	andcs	r0, r6, r1, lsl #10
     9a8:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
     9ac:	01060705 	tsteq	r6, r5, lsl #14
     9b0:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
     9b4:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
     9b8:	1f130617 	svcne	0x00130617
	RISE_N_SHINE;
     9bc:	2f060405 	svccs	0x00060405
     9c0:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
if (pin_sensor_int) {
     9c4:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     9c8:	04052006 	streq	r2, [r5], #-6
     9cc:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
	i_trigger ((aword)(&__input_pins));
     9d0:	07050106 	streq	r0, [r5, -r6, lsl #2]
     9d4:	06050520 	streq	r0, [r5], -r0, lsr #10
     9d8:	06180521 	ldreq	r0, [r8], -r1, lsr #10
     9dc:	05051f13 	streq	r1, [r5, #-3859]	; 0xfffff0ed
     9e0:	05042f06 	streq	r2, [r4, #-3846]	; 0xfffff0fa
     9e4:	a3030205 	movwge	r0, #12805	; 0x3205
     9e8:	1105017d 	tstne	r5, sp, ror r1
     9ec:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     9f0:	0603052e 	streq	r0, [r3], -lr, lsr #10
     9f4:	06120530 			; <UNDEFINED> instruction: 0x06120530
     9f8:	20190501 	andscs	r0, r9, r1, lsl #10
     9fc:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
	__pinsen_disable_and_clear;
     a00:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
	RISE_N_SHINE;
     a04:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
     a08:	14052007 	strne	r2, [r5], #-7
}
     a0c:	1f07052f 	svcne	0x0007052f
     a10:	21060505 	tstcs	r6, r5, lsl #10
     a14:	01060805 	tsteq	r6, r5, lsl #16
     a18:	21060605 	tstcs	r6, r5, lsl #12
     a1c:	29050404 	stmdbcs	r5, {r2, sl}
     a20:	01029603 	tsteq	r2, r3, lsl #12
void system_init () {
     a24:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a28:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a2c:	06050505 	streq	r0, [r5], -r5, lsl #10
     a30:	587de603 	ldmdapl	sp!, {r0, r1, r9, sl, sp, lr, pc}^
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a34:	01061405 	tsteq	r6, r5, lsl #8
     a38:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
     a3c:	04210606 	strteq	r0, [r1], #-1542	; 0xfffff9fa
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a40:	03290504 			; <UNDEFINED> instruction: 0x03290504
     a44:	05010294 	streq	r0, [r1, #-660]	; 0xfffffd6c
     a48:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a4c:	05040106 	streq	r0, [r4, #-262]	; 0xfffffefa
     a50:	03060505 	movweq	r0, #25861	; 0x6505
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a54:	05587de8 	ldrbeq	r7, [r8, #-3560]	; 0xfffff218
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a58:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
     a5c:	01210606 			; <UNDEFINED> instruction: 0x01210606
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a60:	13050501 	movwne	r0, #21761	; 0x5501
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a64:	01061405 	tsteq	r6, r5, lsl #8
     a68:	21060605 	tstcs	r6, r5, lsl #12
		pin = (port_confs [i] >> 19) & 0x1f;
     a6c:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
     a70:	06180513 			; <UNDEFINED> instruction: 0x06180513
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a74:	3c0a0301 	stccc	3, cr0, [sl], {1}
     a78:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
     a7c:	01061305 	tsteq	r6, r5, lsl #6
     a80:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
     a84:	052f0605 	streq	r0, [pc, #-1541]!	; 487 <__pi_offdomain+0x3f>
     a88:	04010618 	streq	r0, [r1], #-1560	; 0xfffff9e8
     a8c:	060b0501 	streq	r0, [fp], -r1, lsl #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a90:	2e02cd03 	cdpcs	13, 0, cr12, cr2, cr3, {0}
		if (port_confs [i] & 0x40)
     a94:	051a0205 	ldreq	r0, [sl, #-517]	; 0xfffffdfb
     a98:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a9c:	05340603 	ldreq	r0, [r4, #-1539]!	; 0xfffff9fd
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     aa0:	0530060c 	ldreq	r0, [r0, #-1548]!	; 0xfffff9f4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     aa4:	30062c03 	andcc	r2, r6, r3, lsl #24
	all_leds_blink;
     aa8:	01060c05 	tsteq	r6, r5, lsl #24
     aac:	052f0a05 	streq	r0, [pc, #-2565]!	; af <g_pfnVectors+0xaf>
     ab0:	03051f0c 	movweq	r1, #24332	; 0x5f0c
     ab4:	1e0c0522 	cfsh32ne	mvfx0, mvfx12, #18
     ab8:	2f060305 	svccs	0x00060305
     abc:	054a0113 	strbeq	r0, [sl, #-275]	; 0xfffffeed
     ac0:	01051902 	tsteq	r5, r2, lsl #18
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac4:	16051306 	strne	r1, [r5], -r6, lsl #6
     ac8:	04204503 	strteq	r4, [r0], #-1283	; 0xfffffafd
     acc:	06050505 	streq	r0, [r5], -r5, lsl #10
     ad0:	4a7dc903 	bmi	1f72ee4 <__ccfg+0x1f52f3c>
     ad4:	01060805 	tsteq	r6, r5, lsl #16
     ad8:	21060605 	tstcs	r6, r5, lsl #12
     adc:	29050404 	stmdbcs	r5, {r2, sl}
	IntEnable (INT_AON_RTC_COMB);
     ae0:	0102c203 	tsteq	r2, r3, lsl #4
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ae4:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
     ae8:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     aec:	06050505 	streq	r0, [r5], -r5, lsl #10
	IntEnable (INT_AON_RTC_COMB);
     af0:	587dba03 	ldmdapl	sp!, {r0, r1, r9, fp, ip, sp, pc}^
     af4:	01061405 	tsteq	r6, r5, lsl #8
	__pi_malloc_init ();
     af8:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
	IntEnable (INT_AON_GPIO_EDGE);
     afc:	04210606 	strteq	r0, [r1], #-1542	; 0xfffff9fa
     b00:	03290504 			; <UNDEFINED> instruction: 0x03290504
     b04:	050102c0 	streq	r0, [r1, #-704]	; 0xfffffd40
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b08:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b0c:	05040106 	streq	r0, [r4, #-262]	; 0xfffffefa
     b10:	03060505 	movweq	r0, #25861	; 0x6505
     b14:	05587dbc 	ldrbeq	r7, [r8, #-3516]	; 0xfffff244
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b18:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
     b1c:	01210606 			; <UNDEFINED> instruction: 0x01210606
     b20:	13050501 	movwne	r0, #21761	; 0x5501
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b24:	01061405 	tsteq	r6, r5, lsl #8
     b28:	21060605 	tstcs	r6, r5, lsl #12
     b2c:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
	urates [0] = UART_RATE / 100;
     b30:	06180513 			; <UNDEFINED> instruction: 0x06180513
     b34:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     b38:	ce030603 	cfmadd32gt	mvax0, mvfx0, mvfx3, mvfx3
	reinit_uart ();
     b3c:	06054a02 	streq	r4, [r5], -r2, lsl #20
	EXTRA_INITIALIZERS;
     b40:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     b44:	12023006 	andne	r3, r2, #6
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b48:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     b4c:	0205002d 	andeq	r0, r5, #45	; 0x2d
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     b50:	00000668 	andeq	r0, r0, r8, ror #12
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b54:	01038903 	tsteq	r3, r3, lsl #18
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b58:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
			devinit [i] . init (devinit [i] . param);
     b5c:	050e062d 	streq	r0, [lr, #-1581]	; 0xfffff9d3
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b60:	06052402 	streq	r2, [r5], -r2, lsl #8
     b64:	1f02052f 	svcne	0x0002052f
     b68:	06052f06 	streq	r2, [r5], -r6, lsl #30
	IntEnable (INT_UART0_COMB);
     b6c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     b70:	06030520 	streq	r0, [r3], -r0, lsr #10
     b74:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
}
     b78:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
	tci_run_auxiliary_timer ();
     b7c:	05230604 	streq	r0, [r3, #-1540]!	; 0xfffff9fc
		diag ("");
     b80:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
     b84:	f9030602 			; <UNDEFINED> instruction: 0xf9030602
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     b88:	10052e7e 	andne	r2, r5, lr, ror lr
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     b8c:	2e050106 	adfcss	f0, f5, f6
		diag ("Leftover RAM: %d bytes",
     b90:	031a052e 	tsteq	sl, #192937984	; 0xb800000
     b94:	2f3c0187 	svccs	0x003c0187
     b98:	05201805 	streq	r1, [r0, #-2053]!	; 0xfffff7fb
     b9c:	09051f17 	stmdbeq	r5, {r0, r1, r2, r4, r8, r9, sl, fp, ip}
     ba0:	05200a03 	streq	r0, [r0, #-2563]!	; 0xfffff5fd
     ba4:	2076030d 	rsbscs	r0, r6, sp, lsl #6
     ba8:	05230b05 	streq	r0, [r3, #-2821]!	; 0xfffff4fb
     bac:	04051d0d 	streq	r1, [r5], #-3341	; 0xfffff2f3
     bb0:	05134d06 	ldreq	r4, [r3, #-3334]	; 0xfffff2fa
     bb4:	05190601 	ldreq	r0, [r9, #-1537]	; 0xfffff9ff
     bb8:	3d290603 	stccc	6, cr0, [r9, #-12]!
     bbc:	01060a05 	tsteq	r6, r5, lsl #20
     bc0:	01000902 	tsteq	r0, r2, lsl #18
     bc4:	00330501 	eorseq	r0, r3, r1, lsl #10
     bc8:	06bc0205 	ldrteq	r0, [ip], r5, lsl #4
     bcc:	d3030000 	movwle	r0, #12288	; 0x3000
     bd0:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
     bd4:	33051714 	movwcc	r1, #22292	; 0x5714
     bd8:	01790306 	cmneq	r9, r6, lsl #6
__attribute__ ((noreturn)) void __pi_release () {
     bdc:	05270205 	streq	r0, [r7, #-517]!	; 0xfffffdfb
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     be0:	58790333 	ldmdapl	r9!, {r0, r1, r4, r5, r8, r9}^
     be4:	06270205 	strteq	r0, [r7], -r5, lsl #4
	check_stack_overflow;
     be8:	0502043e 	streq	r0, [r2, #-1086]	; 0xfffffbc2
     bec:	7bd50305 	blvc	ff541808 <_estack+0xdf53c808>
     bf0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     bf4:	ab030602 	blge	c2404 <__ccfg+0xa245c>
	for_all_tasks (__pi_curr) {
     bf8:	03060104 	movweq	r0, #24836	; 0x6104
	update_n_wake (MAX_WORD, NO);
     bfc:	06049009 	streq	r9, [r4], -r9
     c00:	d9032405 	stmdble	r3, {r0, r2, sl, sp}
	for_all_tasks (__pi_curr) {
     c04:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
     c08:	06230517 			; <UNDEFINED> instruction: 0x06230517
     c0c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     c10:	02a50301 	adceq	r0, r5, #67108864	; 0x4000000
	system_event_count ++;
     c14:	05060420 	streq	r0, [r6, #-1056]	; 0xfffffbe0
  __ASM volatile ("cpsid i" : : : "memory");
     c18:	7ddb0323 	ldclvc	3, cr0, [fp, #140]	; 0x8c
	__SLEEP;
     c1c:	06050520 	streq	r0, [r5], -r0, lsr #10
     c20:	06220541 	strteq	r0, [r2], -r1, asr #10
     c24:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     c28:	9e030602 	cfmadd32ls	mvax0, mvfx0, mvfx3, mvfx2
     c2c:	0d056602 	stceq	6, cr6, [r5, #-8]
     c30:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
	switch (__pi_systat.effpdm) {
     c34:	01052f06 	tsteq	r5, r6, lsl #30
     c38:	08021306 	stmdaeq	r2, {r1, r2, r8, r9, ip}
     c3c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     c40:	0205001c 	andeq	r0, r5, #28
  __ASM volatile ("cpsie i" : : : "memory");
     c44:	0000070c 	andeq	r0, r0, ip, lsl #14
     c48:	0105ef03 	tsteq	r5, r3, lsl #30
	check_stack_overflow;
     c4c:	04170205 	ldreq	r0, [r7], #-517	; 0xfffffdfb
     c50:	03240506 			; <UNDEFINED> instruction: 0x03240506
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c54:	05017df7 	streq	r7, [r1, #-3575]	; 0xfffff209
     c58:	23051705 	movwcs	r1, #22277	; 0x5705
     c5c:	01040106 	tsteq	r4, r6, lsl #2
			(__pi_curr->code) (tstate (__pi_curr));
     c60:	88030205 	stmdahi	r3, {r0, r2, r9}
	for_all_tasks (__pi_curr) {
     c64:	06042002 	streq	r2, [r4], -r2
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c68:	f8032305 			; <UNDEFINED> instruction: 0xf8032305
     c6c:	0104207d 	tsteq	r4, sp, ror r0
     c70:	03060205 	movweq	r0, #25093	; 0x6205
     c74:	044a0285 	strbeq	r0, [sl], #-645	; 0xfffffd7b
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c78:	03240506 			; <UNDEFINED> instruction: 0x03240506
     c7c:	05017cc9 	streq	r7, [r1, #-3273]	; 0xfffff337
     c80:	0517172d 	ldreq	r1, [r7, #-1837]	; 0xfffff8d3
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c84:	23051705 	movwcs	r1, #22277	; 0x5705
     c88:	01040106 	tsteq	r4, r6, lsl #2
     c8c:	03060205 	movweq	r0, #25093	; 0x6205
     c90:	042e03a9 	strteq	r0, [lr], #-937	; 0xfffffc57
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c94:	03270506 			; <UNDEFINED> instruction: 0x03270506
     c98:	050102ce 	streq	r0, [r1, #-718]	; 0xfffffd32
     c9c:	24051405 	strcs	r1, [r5], #-1029	; 0xfffffbfb
     ca0:	01040106 	tsteq	r4, r6, lsl #2
			__WFI ();
     ca4:	03060205 	movweq	r0, #25093	; 0x6205
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ca8:	024a7db2 	subeq	r7, sl, #11392	; 0x2c80
     cac:	0101000a 	tsteq	r1, sl
     cb0:	05003d05 	streq	r3, [r0, #-3333]	; 0xfffff2fb
     cb4:	00073802 	andeq	r3, r7, r2, lsl #16
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cb8:	068f0300 	streq	r0, [pc], r0, lsl #6
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cbc:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cc0:	1e063d05 	cdpne	13, 0, cr3, cr6, cr5, {0}
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cc4:	3002052e 	andcc	r0, r2, lr, lsr #10
     cc8:	03060505 	movweq	r0, #25861	; 0x6505
     ccc:	0e056609 	cfmadd32eq	mvax0, mvfx6, mvfx5, mvfx9
     cd0:	08050106 	stmdaeq	r5, {r1, r2, r8}
     cd4:	1f0e0521 	svcne	0x000e0521
     cd8:	2f060505 	svccs	0x00060505
     cdc:	050f0a05 	streq	r0, [pc, #-2565]	; 2df <root+0xfb>
     ce0:	05200612 	streq	r0, [r0, #-1554]!	; 0xfffff9ee
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ce4:	0405200f 	streq	r2, [r5], #-15
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     ce8:	07053406 	streq	r3, [r5, -r6, lsl #8]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cec:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     cf0:	2e280306 	cdpcs	3, 2, cr0, cr8, cr6, {0}
     cf4:	01061605 	tsteq	r6, r5, lsl #12
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     cf8:	34030105 	strcc	r0, [r3], #-261	; 0xfffffefb
     cfc:	03020520 	movweq	r0, #9504	; 0x2520
     d00:	053c7f97 	ldreq	r7, [ip, #-3991]!	; 0xfffff069
			SysCtrlSetRechargeBeforePowerDown
     d04:	20140304 	andscs	r0, r4, r4, lsl #6
     d08:	052f0805 	streq	r0, [pc, #-2053]!	; 50b <tci_run_delay_timer+0x2b>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d0c:	592d0604 	pushpl	{r2, r9, sl}
     d10:	01060805 	tsteq	r6, r5, lsl #16
     d14:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
     d18:	59300605 	ldmdbpl	r0!, {r0, r2, r9, sl}
			__WFI ();
     d1c:	05240405 	streq	r0, [r4, #-1029]!	; 0xfffffbfb
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d20:	2403060b 	strcs	r0, [r3], #-1547	; 0xfffff9f5
     d24:	2d04054a 	cfstr32cs	mvfx0, [r4, #-296]	; 0xfffffed8
     d28:	0b052106 	bleq	149148 <__ccfg+0x1291a0>
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d2c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     d30:	206e0306 	rsbcs	r0, lr, r6, lsl #6
     d34:	30060805 	andcc	r0, r6, r5, lsl #16
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d38:	061e0505 	ldreq	r0, [lr], -r5, lsl #10
     d3c:	0a051321 	beq	1459c8 <__ccfg+0x125a20>
     d40:	0612050e 	ldreq	r0, [r2], -lr, lsl #10
     d44:	200f0520 	andcs	r0, pc, r0, lsr #10
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d48:	35060405 	strcc	r0, [r6, #-1029]	; 0xfffffbfb
     d4c:	01060705 	tsteq	r6, r5, lsl #14
			while (!(AONWUCPowerStatusGet () &
     d50:	34060405 	strcc	r0, [r6], #-1029	; 0xfffffbfb
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d54:	06080559 			; <UNDEFINED> instruction: 0x06080559
     d58:	20070501 	andcs	r0, r7, r1, lsl #10
     d5c:	2f060505 	svccs	0x00060505
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d60:	06020559 			; <UNDEFINED> instruction: 0x06020559
     d64:	05204403 	streq	r4, [r0, #-1027]!	; 0xfffffbfd
     d68:	20390304 	eorscs	r0, r9, r4, lsl #6
     d6c:	052f0805 	streq	r0, [pc, #-2053]!	; 56f <AONRTCIntHandler+0x1f>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d70:	5e330604 	cfmsuba32pl	mvax0, mvax0, mvfx3, mvfx4
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d74:	060b0575 			; <UNDEFINED> instruction: 0x060b0575
     d78:	06040501 	streq	r0, [r4], -r1, lsl #10
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d7c:	06070533 			; <UNDEFINED> instruction: 0x06070533
     d80:	06050501 	streq	r0, [r5], -r1, lsl #10
			SysCtrlAdjustRechargeAfterPowerDown ();
     d84:	0609052f 	streq	r0, [r9], -pc, lsr #10
			reinit_uart ();
     d88:	4a080501 	bmi	202194 <__ccfg+0x1e21ec>
     d8c:	31060505 	tstcc	r6, r5, lsl #10
     d90:	03060405 	movweq	r0, #25605	; 0x6405
     d94:	03062e16 	movweq	r2, #28182	; 0x6e16
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d98:	07052e6d 	streq	r2, [r5, -sp, ror #28]
     d9c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     da0:	02052f06 	andeq	r2, r5, #6, 30
     da4:	017f8803 	cmneq	pc, r3, lsl #16
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     da8:	01061005 	tsteq	r6, r5
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dac:	f9030c05 			; <UNDEFINED> instruction: 0xf9030c05
     db0:	13052000 	movwne	r2, #20480	; 0x5000
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     db4:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
     db8:	060c052f 	streq	r0, [ip], -pc, lsr #10
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     dbc:	06040501 	streq	r0, [r4], -r1, lsl #10
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     dc0:	02201103 	eoreq	r1, r0, #-1073741824	; 0xc0000000
     dc4:	0101000e 	tsteq	r1, lr
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     dc8:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
     dcc:	00000002 	andeq	r0, r0, r2
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     dd0:	05ea0300 	strbeq	r0, [sl, #768]!	; 0x300
     dd4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     dd8:	13060105 	movwne	r0, #24837	; 0x6105
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     ddc:	01000602 	tsteq	r0, r2, lsl #12
			PRCMPowerDomainOff (
     de0:	00190501 	andseq	r0, r9, r1, lsl #10
     de4:	08380205 	ldmdaeq	r8!, {r0, r2, r9}
     de8:	81030000 	mrshi	r0, (UNDEF: 3)
     dec:	02050107 	andeq	r0, r5, #-1073741823	; 0xc0000001
     df0:	05060414 	streq	r0, [r6, #-1044]	; 0xfffffbec
	__SLEEP;
     df4:	01120324 	tsteq	r2, r4, lsr #6
     df8:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
     dfc:	04010622 	streq	r0, [r1], #-1570	; 0xfffff9de
	goto Redo;
     e00:	03190501 	tsteq	r9, #4194304	; 0x400000
     e04:	06042e67 	streq	r2, [r4], -r7, ror #28
     e08:	19032205 	stmdbne	r3, {r0, r2, r9, sp}
     e0c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
     e10:	6b030602 	blvs	c2620 <__ccfg+0xa2678>
     e14:	0606052e 	streq	r0, [r6], -lr, lsr #10
     e18:	20050501 	andcs	r0, r5, r1, lsl #10
     e1c:	052e2905 	streq	r2, [lr, #-2309]!	; 0xfffff6fb
     e20:	03052e1c 	movweq	r2, #24092	; 0x5e1c
     e24:	014b2f06 	cmpeq	fp, r6, lsl #30
     e28:	01011358 	tsteq	r1, r8, asr r3
     e2c:	20062e01 	andcs	r2, r6, r1, lsl #28
     e30:	662e6606 	strtvs	r6, [lr], -r6, lsl #12
     e34:	052e014a 	streq	r0, [lr, #-330]!	; 0xfffffeb6
     e38:	06051502 	streq	r1, [r5], -r2, lsl #10
     e3c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     e40:	2e25052e 	cfsh64cs	mvdx0, mvdx5, #30
int main (void) {
     e44:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e48:	062f0603 	strteq	r0, [pc], -r3, lsl #12
     e4c:	4b062c14 	blmi	18bea4 <__ccfg+0x16befc>
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e50:	01135801 	tsteq	r3, r1, lsl #16
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e54:	062e0101 	strteq	r0, [lr], -r1, lsl #2
	system_init ();
     e58:	2e660620 	cdpcs	6, 6, cr0, cr6, cr0, {1}
	tcv_init ();
     e5c:	05014a58 	streq	r4, [r1, #-2648]	; 0xfffff5a8
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e60:	02320601 	eorseq	r0, r2, #1048576	; 0x100000
     e64:	01010009 	tsteq	r1, r9
     e68:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e6c:	0008f402 	andeq	pc, r8, r2, lsl #8
     e70:	07d90300 	ldrbeq	r0, [r9, r0, lsl #6]
     e74:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e78:	03041413 	movweq	r1, #17427	; 0x4413
     e7c:	fe030305 	cdp2	3, 0, cr0, cr3, cr5, {0}
     e80:	01040178 	tsteq	r4, r8, ror r1
     e84:	03062105 	movweq	r2, #24837	; 0x6105
	delay (16, 0);
     e88:	040106fd 	streq	r0, [r1], #-1789	; 0xfffff903
     e8c:	03030503 	movweq	r0, #13571	; 0x3503
	__pi_release ();
     e90:	04207983 	strteq	r7, [r0], #-2435	; 0xfffff67d
     e94:	06020501 	streq	r0, [r2], -r1, lsl #10
     e98:	20078303 	andcs	r8, r7, r3, lsl #6
     e9c:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
     ea0:	04041303 	streq	r1, [r4], #-771	; 0xfffffcfd
     ea4:	03063305 	movweq	r3, #25349	; 0x6305
static void killev (__pi_pcb_t *pid) {
     ea8:	04017dad 	streq	r7, [r1], #-3501	; 0xfffff253
	wfun = (aword)(pid->code);
     eac:	03080501 	movweq	r0, #34049	; 0x8501
	for_all_tasks (i) {
     eb0:	042002d3 	strteq	r0, [r0], #-723	; 0xfffffd2d
		for (j = 0; j < nevents (i); j++) {
     eb4:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
     eb8:	04207dad 	strteq	r7, [r0], #-3501	; 0xfffff253
     ebc:	03080501 	movweq	r0, #34049	; 0x8501
			    || i->Events [j] . Event == wfun
     ec0:	052002d3 	streq	r0, [r0, #-723]!	; 0xfffffd2d
		for (j = 0; j < nevents (i); j++) {
     ec4:	08052203 	stmdaeq	r5, {r0, r1, r9, sp}
			if (i->Events [j] . Event == (aword)pid
     ec8:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
     ecc:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
     ed0:	7da70329 	stcvc	3, cr0, [r7, #164]!	; 0xa4
				wakeupev (i, j);
     ed4:	17050501 	strne	r0, [r5, -r1, lsl #10]
     ed8:	01063305 	tsteq	r6, r5, lsl #6
	for_all_tasks (i) {
     edc:	042e2d05 	strteq	r2, [lr], #-3333	; 0xfffff2fb
}
     ee0:	06030501 	streq	r0, [r3], -r1, lsl #10
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     ee4:	2e02d503 	cfsh32cs	mvfx13, mvfx2, #3
static void qfree (aword *ch) {
     ee8:	1e060805 	cdpne	8, 0, cr0, cr6, cr5, {0}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     eec:	05220305 	streq	r0, [r2, #-773]!	; 0xfffffcfb
	cc = (aword*)(mpools + MA_NP);
     ef0:	04042c08 	streq	r2, [r4], #-3080	; 0xfffff3f8
	m_setnextp (ch, chunk);
     ef4:	ad033305 	stcge	3, cr3, [r3, #-20]	; 0xffffffec
	m_setnextp (cc, ch);
     ef8:	0104207d 	tsteq	r4, sp, ror r0
}
     efc:	d5030305 	strle	r0, [r3, #-773]	; 0xfffffcfb
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f00:	41052002 	tstmi	r5, r2
     f04:	061d0558 			; <UNDEFINED> instruction: 0x061d0558
     f08:	010e051d 	tsteq	lr, sp, lsl r5
			m_setnextp (cc, m_nextp (chunk));
     f0c:	13130305 	tstne	r3, #335544320	; 0x14000000
			m_size (chunk) += m_hdrlen + m_size (ch);
     f10:	29050404 	stmdbcs	r5, {r2, sl}
     f14:	017da703 	cmneq	sp, r3, lsl #14
     f18:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
     f1c:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f20:	06030501 	streq	r0, [r3], -r1, lsl #10
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f24:	2e02d503 	cfsh32cs	mvfx13, mvfx2, #3
     f28:	01064105 	tsteq	r6, r5, lsl #2
     f2c:	1d061d05 	stcne	13, cr1, [r6, #-20]	; 0xffffffec
			m_setnextp (cc, m_nextp (chunk));
     f30:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
			m_size (ch) += m_hdrlen + m_size (chunk);
     f34:	03041802 	movweq	r1, #18434	; 0x4802
     f38:	ec030305 	stc	3, cr0, [r3], {5}
     f3c:	01040178 	tsteq	r4, r8, ror r1
     f40:	03060105 	movweq	r0, #24837	; 0x6105
     f44:	02200795 	eoreq	r0, r0, #39059456	; 0x2540000
     f48:	01010008 	tsteq	r1, r8
			if (m_size (chunk) >= m_size (ch))
     f4c:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
     f50:	00093c02 	andeq	r3, r9, r2, lsl #24
     f54:	07ec0300 	strbeq	r0, [ip, r0, lsl #6]!
		chunk = m_nextp (chunk))
     f58:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
     f5c:	03041413 	movweq	r1, #17427	; 0x4413
     f60:	eb030305 	bl	c1b7c <__ccfg+0xa1bd4>
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f64:	01040178 	tsteq	r4, r8, ror r1
	diag_wait (a);
     f68:	03062105 	movweq	r2, #24837	; 0x6105
	diag_wchar (c, a);
     f6c:	04010790 	streq	r0, [r1], #-1936	; 0xfffff870
}
     f70:	03030503 	movweq	r0, #13571	; 0x3503
     f74:	042078f0 	strteq	r7, [r0], #-2288	; 0xfffff710
	syserror (ESTATE, "state");
     f78:	06020501 	streq	r0, [r2], -r1, lsl #10
     f7c:	20079603 	andcs	r9, r7, r3, lsl #12
     f80:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
     f84:	04010609 	streq	r0, [r1], #-1545	; 0xfffff9f7
	for (i = 0; i < MAX_UTIMERS; i++)
     f88:	03330504 	teqeq	r3, #4, 10	; 0x1000000
void utimer_add (address ut) {
     f8c:	04207d9b 	strteq	r7, [r0], #-3483	; 0xfffff265
     f90:	03080501 	movweq	r0, #34049	; 0x8501
		if (__pi_utims [i] == NULL)
     f94:	042002e6 	strteq	r0, [r0], #-742	; 0xfffffd1a
	for (i = 0; i < MAX_UTIMERS; i++)
     f98:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
     f9c:	04207d9a 	strteq	r7, [r0], #-3482	; 0xfffff266
		syserror (ERESOURCE, "ut a");
     fa0:	03030501 	movweq	r0, #13569	; 0x3501
	__pi_utims [i] = ut;
     fa4:	062002e8 	strteq	r0, [r0], -r8, ror #5
}
     fa8:	0608051e 			; <UNDEFINED> instruction: 0x0608051e
     fac:	1f1e0501 	svcne	0x001e0501
     fb0:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
	*t = v;
     fb4:	042f0603 	strteq	r0, [pc], #-1539	; fbc <update_n_wake>
	TCI_RUN_AUXILIARY_TIMER;
     fb8:	03290504 			; <UNDEFINED> instruction: 0x03290504
void update_n_wake (word min, Boolean force) {
     fbc:	05017d94 	streq	r7, [r1, #-3476]	; 0xfffff26c
	if (TCI_UPDATE_DELAY_TICKS (force))
     fc0:	33051705 	movwcc	r1, #22277	; 0x5705
     fc4:	01040106 	tsteq	r4, r6, lsl #2
     fc8:	e8030305 	stmda	r3, {r0, r2, r8, r9}
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fcc:	02052e02 	andeq	r2, r5, #2, 28
     fd0:	05040447 	streq	r0, [r4, #-1095]	; 0xfffffbb9
     fd4:	7d9b032d 	ldcvc	3, cr0, [fp, #180]	; 0xb4
     fd8:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
     fdc:	e8030603 	stmda	r3, {r0, r1, r9, sl}
     fe0:	41052e02 	tstmi	r5, r2, lsl #28
     fe4:	1d050106 	stfnes	f0, [r5, #-24]	; 0xffffffe8
     fe8:	0e051d06 	cdpeq	13, 0, cr1, cr5, cr6, {0}
     fec:	06020501 	streq	r0, [r2], -r1, lsl #10
     ff0:	04260601 	strteq	r0, [r6], #-1537	; 0xfffff9ff
     ff4:	03030503 	movweq	r0, #13571	; 0x3503
     ff8:	040178d9 	streq	r7, [r1], #-2265	; 0xfffff727
     ffc:	06010501 	streq	r0, [r1], -r1, lsl #10
		for_all_tasks (i) {
    1000:	2007a803 	andcs	sl, r7, r3, lsl #16
	__pi_mintk = znew + min;
    1004:	01000702 	tsteq	r0, r2, lsl #14
    1008:	00180501 	andseq	r0, r8, r1, lsl #10
			if (!twaiting (i))
    100c:	09780205 	ldmdbeq	r8!, {r0, r2, r9}^
    1010:	c5030000 	strgt	r0, [r3, #-0]
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1014:	07040107 	streq	r0, [r4, -r7, lsl #2]
    1018:	bb030105 	bllt	c1434 <__ccfg+0xa148c>
    101c:	01040178 	tsteq	r4, r8, ror r1
    1020:	03061805 	movweq	r1, #26629	; 0x6805
    1024:	040107c5 	streq	r0, [r1], #-1989	; 0xfffff83b
    1028:	03050507 	movweq	r0, #21767	; 0x5507
    102c:	052078bb 	streq	r7, [r0, #-2235]!	; 0xfffff745
    1030:	02053c04 	andeq	r3, r5, #4, 24	; 0x400
    1034:	013d3d06 	teqeq	sp, r6, lsl #26
    1038:	063c0101 	ldrteq	r0, [ip], -r1, lsl #2
    103c:	2e660620 	cdpcs	6, 6, cr0, cr6, cr0, {1}
    1040:	2e014a58 			; <UNDEFINED> instruction: 0x2e014a58
				wakeuptm (i);
    1044:	04580113 	ldrbeq	r0, [r8], #-275	; 0xfffffeed
    1048:	0f010508 	svceq	0x00010508
		for_all_tasks (i) {
    104c:	01060505 	tsteq	r6, r5, lsl #10
				d = i->Timer - znew;
    1050:	053c0405 	ldreq	r0, [ip, #-1029]!	; 0xfffffbfb
    1054:	013d0602 	teqeq	sp, r2, lsl #12
    1058:	063c0101 	ldrteq	r0, [ip], -r1, lsl #2
		if ((word)(__pi_mintk - znew) < min) 
    105c:	2e660620 	cdpcs	6, 6, cr0, cr6, cr0, {1}
    1060:	2e014a58 			; <UNDEFINED> instruction: 0x2e014a58
    1064:	58012f13 	stmdapl	r1, {r0, r1, r4, r8, r9, sl, fp, sp}
	__pi_old = znew;
    1068:	01050104 	tsteq	r5, r4, lsl #2
}
    106c:	07d00306 	ldrbeq	r0, [r0, r6, lsl #6]
	TCI_RUN_DELAY_TIMER;
    1070:	000c0201 	andeq	r0, ip, r1, lsl #4
}
    1074:	15050101 	strne	r0, [r5, #-257]	; 0xfffffeff
    1078:	24020500 	strcs	r0, [r2], #-1280	; 0xfffffb00
    107c:	0300000a 	movweq	r0, #10
    1080:	05010880 	streq	r0, [r1, #-2176]	; 0xfffff780
    1084:	15051402 	strne	r1, [r5, #-1026]	; 0xfffffbfe
void proceed (word state) {
    1088:	02051006 	andeq	r1, r5, #6
	prcdstate (__pi_curr, state);
    108c:	3e062c32 	mcrcc	12, 0, r2, cr6, cr2, {1}
    1090:	09046767 	stmdbeq	r4, {r0, r1, r2, r5, r6, r8, r9, sl, sp, lr}
	release;
    1094:	03063105 	movweq	r3, #24837	; 0x6105
    1098:	04587ca8 	ldrbeq	r7, [r8], #-3240	; 0xfffff358
void __pi_wait (aword event, word state) {
    109c:	03020501 	movweq	r0, #9473	; 0x2501
	sint j = nevents (__pi_curr);
    10a0:	062003d8 			; <UNDEFINED> instruction: 0x062003d8
	if (j >= MAX_EVENTS_PER_TASK)
    10a4:	05090421 	streq	r0, [r9, #-1057]	; 0xfffffbdf
    10a8:	7ca70305 	stcvc	3, cr0, [r7], #20
    10ac:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		syserror (ENEVENTS, "sw");
    10b0:	c503060b 	strgt	r0, [r3, #-1547]	; 0xfffff9f5
    10b4:	0904017d 	stmdbeq	r4, {r0, r2, r3, r4, r5, r6, r8}
	setestate (__pi_curr->Events [j], state, event);
    10b8:	bb033105 	bllt	cd4d4 <__ccfg+0xad52c>
	incwait (__pi_curr);
    10bc:	01042002 	tsteq	r4, r2
	setestate (__pi_curr->Events [j], state, event);
    10c0:	c8033205 	stmdagt	r3, {r0, r2, r9, ip, sp}
}
    10c4:	04042e7d 	streq	r2, [r4], #-3709	; 0xfffff183
    10c8:	9b030505 	blls	c24e4 <__ccfg+0xa253c>
    10cc:	09042e02 	stmdbeq	r4, {r1, r9, sl, fp, sp}
void __pi_trigger (aword event) {
    10d0:	1d033105 	stfnes	f3, [r3, #-20]	; 0xffffffec
	for_all_tasks (i) {
    10d4:	0501043c 	streq	r0, [r1, #-1084]	; 0xfffffbc4
		for (j = 0; j < nevents (i); j++) {
    10d8:	dc030602 	stcle	6, cr0, [r3], {2}
    10dc:	e7032003 	str	r2, [r3, -r3]
    10e0:	05140179 	ldreq	r0, [r4, #-377]	; 0xfffffe87
    10e4:	12050107 	andne	r0, r5, #-1073741823	; 0xc0000001
			if (i->Events [j] . Event == event) {
    10e8:	14030501 	strne	r0, [r3], #-1281	; 0xfffffaff
    10ec:	01061505 	tsteq	r6, r5, lsl #10
    10f0:	052c3d05 	streq	r3, [ip, #-3333]!	; 0xfffff2fb
				wakeupev (i, j);
    10f4:	03052207 	movweq	r2, #20999	; 0x5207
    10f8:	32052f06 	andcc	r2, r5, #6, 30
	for_all_tasks (i) {
    10fc:	21055806 	tstcs	r5, r6, lsl #16
}
    1100:	0603052e 	streq	r0, [r3], -lr, lsr #10
aword __pi_join (aword pid, word st) {
    1104:	0606052f 	streq	r0, [r6], -pc, lsr #10
	for_all_tasks (i) {
    1108:	06040501 	streq	r0, [r4], -r1, lsl #10
    110c:	05040422 	streq	r0, [r4, #-1058]	; 0xfffffbde
	return 0;
    1110:	02910329 	addseq	r0, r1, #-1543503872	; 0xa4000000
		if ((aword)i == pid) {
    1114:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
			__pi_wait (pid, st);
    1118:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
}
    111c:	043c0638 	ldrteq	r0, [ip], #-1592	; 0xfffff9c8
	for_all_tasks (i) {
    1120:	06030501 	streq	r0, [r3], -r1, lsl #10
    1124:	207de903 	rsbscs	lr, sp, r3, lsl #18
void delay (word d, word state) {
    1128:	33050404 	movwcc	r0, #21508	; 0x5404
	settstate (__pi_curr, state);
    112c:	012d0306 			; <UNDEFINED> instruction: 0x012d0306
    1130:	06050104 	streq	r0, [r5], -r4, lsl #2
    1134:	052e5303 	streq	r5, [lr, #-771]!	; 0xfffffcfd
    1138:	04210604 	strteq	r0, [r1], #-1540	; 0xfffff9fc
	update_n_wake (d, YES);
    113c:	03290504 			; <UNDEFINED> instruction: 0x03290504
    1140:	05050127 	streq	r0, [r5, #-295]	; 0xfffffed9
	__pi_curr->Timer = __pi_old + d;
    1144:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    1148:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	inctimer (__pi_curr);
    114c:	56030604 	strpl	r0, [r3], -r4, lsl #12
    1150:	0504043c 	streq	r0, [r4, #-1084]	; 0xfffffbc4
    1154:	00db0329 	sbcseq	r0, fp, r9, lsr #6
}
    1158:	17050501 	strne	r0, [r5, -r1, lsl #10]
    115c:	01062d05 	tsteq	r6, r5, lsl #26
	if (fun == NULL)
    1160:	3c050104 	stfccs	f0, [r5], {4}
		return (int) __pi_curr;
    1164:	7f960306 	svcvc	0x00960306
    1168:	0112052e 	tsteq	r2, lr, lsr #10
	for_all_tasks (i)
    116c:	01060205 	tsteq	r6, r5, lsl #4
}
    1170:	069a0306 	ldreq	r0, [sl], r6, lsl #6
		if (i->code == fun)
    1174:	0401012e 	streq	r0, [r1], #-302	; 0xfffffed2
	for_all_tasks (i)
    1178:	03290504 			; <UNDEFINED> instruction: 0x03290504
    117c:	05017a95 	streq	r7, [r1, #-2709]	; 0xfffff56b
    1180:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
int __pi_strlen (const char *s) {
    1184:	01040106 	tsteq	r4, r6, lsl #2
	for (i = 0; *(s+i) != '\0'; i++);
    1188:	e6030205 	str	r0, [r3], -r5, lsl #4
}
    118c:	04042e05 	streq	r2, [r4], #-3589	; 0xfffff1fb
	for (i = 0; *(s+i) != '\0'; i++);
    1190:	9a032d05 	bls	cc5ac <__ccfg+0xac604>
	while ((Boolean)(*d++ = *s++));
    1194:	0104207a 	tsteq	r4, sl, ror r0
    1198:	03060205 	movweq	r0, #25093	; 0x6205
    119c:	042e05e6 	strteq	r0, [lr], #-1510	; 0xfffffa1a
}
    11a0:	03290504 			; <UNDEFINED> instruction: 0x03290504
	while (n--)
    11a4:	05017a95 	streq	r7, [r1, #-2709]	; 0xfffff56b
    11a8:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
		*dest++ = *src++;
    11ac:	01040106 	tsteq	r4, r6, lsl #2
    11b0:	03060205 	movweq	r0, #25093	; 0x6205
    11b4:	012e05e6 	smulwteq	lr, r6, r5
		*dest++ = c;
    11b8:	01010101 	tsteq	r1, r1, lsl #2
void adddevfunc (devreqfun_t rf, int loc) {
    11bc:	2e016601 	cfmadd32cs	mvax0, mvfx6, mvfx1, mvfx1
		syserror (EREQPAR, "addv");
    11c0:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
		syserror (ERESOURCE, "addv");
    11c4:	7acb0329 	bvc	ff2c1e70 <_estack+0xdf2bce70>
	if (ioreq [loc] != NULL)
    11c8:	17050501 	strne	r0, [r5, -r1, lsl #10]
    11cc:	01062d05 	tsteq	r6, r5, lsl #26
		syserror (ERESOURCE, "addv");
    11d0:	02050104 	andeq	r0, r5, #4, 2
	ioreq [loc] = rf;
    11d4:	05b00306 	ldreq	r0, [r0, #774]!	; 0x306
}
    11d8:	0504042e 	streq	r0, [r4, #-1070]	; 0xfffffbd2
    11dc:	7acb0329 	bvc	ff2c1e88 <_estack+0xdf2bce88>
sint io (word retry, word dev, word operation, char *buf, word len) {
    11e0:	17050501 	strne	r0, [r5, -r1, lsl #10]
    11e4:	01062d05 	tsteq	r6, r5, lsl #26
    11e8:	02050104 	andeq	r0, r5, #4, 2
    11ec:	05b00306 	ldreq	r0, [r0, #774]!	; 0x306
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11f0:	0101012e 	tsteq	r1, lr, lsr #2
    11f4:	04010101 	streq	r0, [r1], #-257	; 0xfffffeff
    11f8:	062f050a 	strteq	r0, [pc], -sl, lsl #10
		syserror (ENODEVICE, "io");
    11fc:	2e7eda03 	vaddcs.f32	s27, s28, s6
    1200:	02050104 	andeq	r0, r5, #4, 2
	if (len == 0)
    1204:	2001a603 	andcs	sl, r1, r3, lsl #12
	ret = (ioreq [dev]) (operation, buf, len);
    1208:	2e014a06 	vmlacs.f32	s8, s2, s12
    120c:	04010d03 	streq	r0, [r1], #-3331	; 0xfffff2fd
	if (ret >= 0)
    1210:	0305050a 	movweq	r0, #21770	; 0x550a
	if (ret == -1) {
    1214:	05017ecd 	streq	r7, [r1, #-3789]	; 0xfffff133
    1218:	0401062f 	streq	r0, [r1], #-1583	; 0xfffff9d1
		if (retry == WNONE)
    121c:	06020501 	streq	r0, [r2], -r1, lsl #10
		iowait (dev, operation, retry);
    1220:	2001b503 	andcs	fp, r1, r3, lsl #10
    1224:	13062305 	movwne	r2, #25349	; 0x6305
    1228:	0c030205 	sfmeq	f0, 4, [r3], {5}
			release;
    122c:	03230520 			; <UNDEFINED> instruction: 0x03230520
	if (ret == -2) {
    1230:	02052e74 	andeq	r2, r5, #116, 28	; 0x740
			(ioreq [dev]) (NONE, buf, len);
    1234:	05200c03 	streq	r0, [r0, #-3075]!	; 0xfffff3fd
		if (retry != WNONE) {
    1238:	20740323 	rsbscs	r0, r4, r3, lsr #6
			iowait (dev, operation, retry);
    123c:	32060205 	andcc	r0, r6, #1342177280	; 0x50000000
    1240:	01062705 	tsteq	r6, r5, lsl #14
			(ioreq [dev]) (NONE, buf, len);
    1244:	36060205 	strcc	r0, [r6], -r5, lsl #4
    1248:	0a03314d 	beq	cd784 <__ccfg+0xad7dc>
    124c:	c0034058 	andgt	r4, r3, r8, asr r0
		(ioreq [dev]) (NONE, buf, len);
    1250:	6767017d 			; <UNDEFINED> instruction: 0x6767017d
    1254:	05090467 	streq	r0, [r9, #-1127]	; 0xfffffb99
    1258:	7eae0305 	cdpvc	3, 10, cr0, cr14, cr5, {0}
}
    125c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	if (retry != WNONE) {
    1260:	d403060d 	strle	r0, [r3], #-1549	; 0xfffff9f3
		delay (-ret - 2, retry);
    1264:	09040101 	stmdbeq	r4, {r0, r8}
    1268:	ac033105 	stfges	f3, [r3], {5}
    126c:	0104207e 	tsteq	r4, lr, ror r0
    1270:	03060205 	movweq	r0, #25093	; 0x6205
		release;
    1274:	052e01d4 	streq	r0, [lr, #-468]!	; 0xfffffe2c
    1278:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    127c:	03300602 	teqeq	r0, #2097152	; 0x200000
    1280:	012e02c7 	smlawteq	lr, r7, r2, r0
    1284:	05152e2e 	ldreq	r2, [r5, #-3630]	; 0xfffff1d2
    1288:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    128c:	03052e05 	movweq	r2, #24069	; 0x5e05
		syserror (ERESOURCE, "mal1");
    1290:	0b043006 	bleq	10d2b0 <__ccfg+0xed308>
    1294:	c3030505 	movwgt	r0, #13573	; 0x3505
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1298:	0c040179 	stfeqs	f0, [r4], {121}	; 0x79
    129c:	05015e03 	streq	r5, [r1, #-3587]	; 0xfffff1fd
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12a0:	0401062e 	streq	r0, [r1], #-1582	; 0xfffff9d2
	m_size (mpools [0]) = mlen - m_hdrlen;
    12a4:	0605050b 	streq	r0, [r5], -fp, lsl #10
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12a8:	052e2303 	streq	r2, [lr, #-771]!	; 0xfffffcfd
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12ac:	05010634 	streq	r0, [r1, #-1588]	; 0xfffff9cc
    12b0:	043d0605 	ldrteq	r0, [sp], #-1541	; 0xfffff9fb
}
    12b4:	03150501 	tsteq	r5, #4194304	; 0x400000
    12b8:	052006d5 	streq	r0, [r0, #-1749]!	; 0xfffff92b
    12bc:	04051303 	streq	r1, [r5], #-771	; 0xfffffcfd
    12c0:	3a150513 	bcc	542714 <__ccfg+0x52276c>
    12c4:	03190205 	tsteq	r9, #1342177280	; 0x50000000
    12c8:	04017ecb 	streq	r7, [r1], #-3787	; 0xfffff135
void __pi_free (aword *ch) {
    12cc:	03240506 			; <UNDEFINED> instruction: 0x03240506
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12d0:	05017ed4 	streq	r7, [r1, #-3796]	; 0xfffff12c
    12d4:	23051705 	movwcs	r1, #22277	; 0x5705
		syserror (EMALLOC, "malg");
    12d8:	01040106 	tsteq	r4, r6, lsl #2
    12dc:	dd030205 	sfmle	f0, 4, [r3, #-20]	; 0xffffffec
	mcfree [MA_NP] += m_size (ch);
    12e0:	06042002 	streq	r2, [r4], -r2
		m_size (ch) ^= MALLOC_UMASK;
    12e4:	a3032305 	movwge	r2, #13061	; 0x3305
    12e8:	0104207d 	tsteq	r4, sp, ror r0
	mcfree [MA_NP] += m_size (ch);
    12ec:	03060205 	movweq	r0, #25093	; 0x6205
	QFREE;
    12f0:	6a4a02dd 	bvs	1281e6c <__ccfg+0x1261ec4>
	if (mevent [MA_NP] . nwait) {
    12f4:	13060105 	movwne	r0, #24837	; 0x6105
    12f8:	052d0205 	streq	r0, [sp, #-517]!	; 0xfffffdfb
		trigger ((aword)(&(mevent [MA_NP])));
    12fc:	5f030603 	svcpl	0x00030603
		mevent [MA_NP] . nwait --;
    1300:	0541412e 	strbeq	r4, [r1, #-302]	; 0xfffffed2
}
    1304:	05130604 	ldreq	r0, [r3, #-1540]	; 0xfffff9fc
    1308:	27021f03 	strcs	r1, [r2, -r3, lsl #30]
    130c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1310:	0205001f 	andeq	r0, r5, #31
void kill (aword pid) {
    1314:	00000000 	andeq	r0, r0, r0
		pid = (aword) __pi_curr;
    1318:	0108fd03 	tsteq	r8, r3, lsl #26	; <UNPREDICTABLE>
	j = NULL;
    131c:	16170205 	ldrne	r0, [r7], -r5, lsl #4
	for_all_tasks (i) {
    1320:	01062c05 	tsteq	r6, r5, lsl #24
	syserror (EREQPAR, "kpi");
    1324:	05661505 	strbeq	r1, [r6, #-1285]!	; 0xfffffafb
    1328:	1505202c 	strne	r2, [r5, #-44]	; 0xffffffd4
		if ((aword)i == pid) {
    132c:	21120520 	tstcs	r2, r0, lsr #10
    1330:	4a1f1505 	bmi	7c674c <__ccfg+0x7a67a4>
				__PCB = i->Next;
    1334:	02230105 	eoreq	r0, r3, #1073741825	; 0x40000001
			killev (i);
    1338:	01010003 	tsteq	r1, r3
			ufree (i);
    133c:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
			if (i == __pi_curr)
    1340:	00000002 	andeq	r0, r0, r2
    1344:	0adb0300 	beq	ff6c1f4c <_estack+0xdf6bcf4c>
				release;
    1348:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
				j->Next = i->Next;
    134c:	010f0514 	tsteq	pc, r4, lsl r5	; <UNPREDICTABLE>
    1350:	0e061c05 	cdpeq	12, 0, cr1, cr6, cr5, {0}
				__PCB = i->Next;
    1354:	05250605 	streq	r0, [r5, #-1541]!	; 0xfffff9fb
}
    1358:	06052007 	streq	r2, [r5], -r7
    135c:	06030558 			; <UNDEFINED> instruction: 0x06030558
    1360:	0606052e 	streq	r0, [r6], -lr, lsr #10
	if (size < 8)
    1364:	06310501 	ldrteq	r0, [r1], -r1, lsl #10
		_size = 2;
    1368:	010f052d 	tsteq	pc, sp, lsr #10
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    136c:	01060205 	tsteq	r6, r5, lsl #4
		_size = (((aword)size) + 3) >> 2;
    1370:	01055b06 	tsteq	r5, r6, lsl #22
		if (m_magic (chunk) != MALLOC_MAGIC)
    1374:	04021306 	streq	r1, [r2], #-774	; 0xfffffcfa
		_size = (((aword)size) + 3) >> 2;
    1378:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		if (mevent [MA_NP] . nfail != 255)
    137c:	02050031 	andeq	r0, r5, #49	; 0x31
    1380:	00000bdc 	ldrdeq	r0, [r0], -ip
			mevent [MA_NP] . nfail ++;
    1384:	010ae703 	tsteq	sl, r3, lsl #14
		mnfree [MA_NP] = 0;
    1388:	04140205 	ldreq	r0, [r4], #-517	; 0xfffffdfb
    138c:	03030503 	movweq	r0, #13571	; 0x3503
		if (m_magic (chunk) != MALLOC_MAGIC)
    1390:	040177b2 	streq	r7, [r1], #-1970	; 0xfffff84e
    1394:	06310501 	ldrteq	r0, [r1], -r1, lsl #10
			syserror (EMALLOC, "malc");
    1398:	0108cc03 	tsteq	r8, r3, lsl #24
    139c:	03050304 	movweq	r0, #21252	; 0x5304
		if (m_size (chunk) >= _size)
    13a0:	2e77b403 	cdpcs	4, 7, cr11, cr7, cr3, {0}
    13a4:	31050104 	tstcc	r5, r4, lsl #2
		chunk = m_nextp (chunk)) {
    13a8:	2008cc03 	andcs	ip, r8, r3, lsl #24
		m_setnextp (cc, m_nextp (chunk));
    13ac:	03050304 	movweq	r0, #21252	; 0x5304
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    13b0:	2077b403 	rsbscs	fp, r7, r3, lsl #8
    13b4:	02050104 	andeq	r0, r5, #4, 2
			m_size (chunk) = _size;
    13b8:	08d00306 	ldmeq	r0, {r1, r2, r8, r9}^
			cc = chunk + _size + m_hdrlen;
    13bc:	0d04012e 	stfeqs	f0, [r4, #-184]	; 0xffffff48
    13c0:	75a50306 	strvc	r0, [r5, #774]!	; 0x306
			m_size (cc) = waste - m_hdrlen;
    13c4:	06010474 			; <UNDEFINED> instruction: 0x06010474
			QFREE;
    13c8:	2e0adb03 	vmlacs.f64	d13, d10, d3
		mevent [MA_NP] . nfail = 0;
    13cc:	9b030d04 	blls	c47e4 <__ccfg+0xa483c>
		mcfree [MA_NP] -= m_size (chunk);
    13d0:	01010175 	tsteq	r1, r5, ror r1
    13d4:	064a5b19 			; <UNDEFINED> instruction: 0x064a5b19
    13d8:	043c1603 	ldrteq	r1, [ip], #-1539	; 0xfffff9fd
    13dc:	03150501 	tsteq	r5, #4194304	; 0x400000
		m_size (chunk) |= MALLOC_UMASK;
    13e0:	042008eb 	strteq	r0, [r0], #-2283	; 0xfffff715
		if (mnfree [MA_NP] > mcfree [MA_NP])
    13e4:	0602050d 	streq	r0, [r2], -sp, lsl #10
		m_size (chunk) |= MALLOC_UMASK;
    13e8:	2e779503 	cdpcs	5, 7, cr9, cr7, cr3, {0}
			mnfree [MA_NP] = mcfree [MA_NP];
    13ec:	01010101 	tsteq	r1, r1, lsl #2
}
    13f0:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    13f4:	01360303 	teqeq	r6, r3, lsl #6
    13f8:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
    13fc:	66204a03 	strtvs	r4, [r0], -r3, lsl #20
    1400:	eb030104 	bl	c1818 <__ccfg+0xa1870>
    1404:	15050108 	strne	r0, [r5, #-264]	; 0xfffffef8
    1408:	1e300106 	rsfnes	f0, f0, f6
aword __pi_fork (fsmcode func, aword data) {
    140c:	05220205 	streq	r0, [r2, #-517]!	; 0xfffffdfb
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1410:	02051e15 	andeq	r1, r5, #336	; 0x150
    1414:	15053006 	strne	r3, [r5, #-6]
    1418:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
		if ((j = __PCB) == NULL)
    141c:	06040520 	streq	r0, [r4], -r0, lsr #10
	i->Next = NULL;
    1420:	0d04216a 	stfeqs	f2, [r4, #-424]	; 0xfffffe58
	i->data = data;
    1424:	8e030205 	cdphi	2, 0, cr0, cr3, cr5, {0}
		if ((j = __PCB) == NULL)
    1428:	03040177 	movweq	r0, #16759	; 0x4177
}
    142c:	2b030305 	blcs	c2048 <__ccfg+0xa20a0>
			for (; j->Next != NULL; j = j->Next);
    1430:	050d0401 	streq	r0, [sp, #-1025]	; 0xfffffbff
    1434:	20550302 	subscs	r0, r5, r2, lsl #6
	return (aword) i;
    1438:	01042020 	tsteq	r4, r0, lsr #32
    143c:	200ac503 	andcs	ip, sl, r3, lsl #10
	if (mevent [MA_NP] . nwait != 255)
    1440:	03050d04 	movweq	r0, #23812	; 0x5d04
    1444:	4a75a603 	bmi	1d6ac58 <__ccfg+0x1d4acb0>
    1448:	01061005 	tsteq	r6, r5
		mevent [MA_NP] . nwait ++;
    144c:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
	wait ((aword)(&(mevent [MA_NP])), state);
    1450:	1f052023 	svcne	0x00052023
    1454:	06040520 	streq	r0, [r4], -r0, lsr #10
void diag (const char *mess, ...) {
    1458:	060e0530 			; <UNDEFINED> instruction: 0x060e0530
    145c:	06040501 	streq	r0, [r4], -r1, lsl #10
    1460:	1c02052f 	cfstr32ne	mvfx0, [r2], {47}	; 0x2f
	diag_disable_int (a, is);
    1464:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1468:	2e098f03 	cdpcs	15, 0, cr8, cr9, cr3, {0}
    146c:	01062a05 	tsteq	r6, r5, lsl #20
					d /= 10;
    1470:	05270405 	streq	r0, [r7, #-1029]!	; 0xfffffbfb
	diag_disable_int (a, is);
    1474:	2079032a 	rsbscs	r0, r9, sl, lsr #6
				d = (bc == 16) ? 10000 : 1000000000;
    1478:	6a060405 	bvs	182494 <__ccfg+0x1624ec>
	while (*mess != '\0') {
    147c:	b2030904 	andlt	r0, r3, #4, 18	; 0x10000
	dgout ('\r');
    1480:	2905017f 	stmdbcs	r5, {r0, r1, r2, r3, r4, r5, r6, r8}
	dgout ('\n');
    1484:	01040106 	tsteq	r4, r6, lsl #2
    1488:	03060405 	movweq	r0, #25605	; 0x6405
    148c:	696600d1 	stmdbvs	r6!, {r0, r4, r6, r7}^
	diag_wait (a);
    1490:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
	diag_enable_int (a, is);
    1494:	01789f03 	cmneq	r8, r3, lsl #30
    1498:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    149c:	2e07e503 	cfsh32cs	mvfx14, mvfx7, #3
}
    14a0:	01061a05 	tsteq	r6, r5, lsl #20
    14a4:	83060405 	movwhi	r0, #25605	; 0x6405
    14a8:	061a0521 	ldreq	r0, [sl], -r1, lsr #10
			mess++;
    14ac:	06040501 	streq	r0, [r4], -r1, lsl #10
		if (*mess == '%') {
    14b0:	05020469 	streq	r0, [r2, #-1129]	; 0xfffffb97
			if (*mess == 'l') {
    14b4:	78960305 	ldmvc	r6, {r0, r2, r8, r9}
				mess++;
    14b8:	06010501 	streq	r0, [r1], -r1, lsl #10
    14bc:	0501042f 	streq	r0, [r1, #-1071]	; 0xfffffbd1
				bc = 32;
    14c0:	f1030604 			; <UNDEFINED> instruction: 0xf1030604
				val = va_arg (ap, lword);
    14c4:	0c042007 	stceq	0, cr2, [r4], {7}
				bc = 16;
    14c8:	a0030505 	andge	r0, r3, r5, lsl #10
			switch (*mess) {
    14cc:	09040178 	stmdbeq	r4, {r3, r4, r5, r6, r8}
    14d0:	03063105 	movweq	r3, #24837	; 0x6105
    14d4:	040102d4 	streq	r0, [r1], #-724	; 0xfffffd2c
    14d8:	03040501 	movweq	r0, #17665	; 0x4501
				dgout ('%');
    14dc:	04200599 	strteq	r0, [r0], #-1433	; 0xfffffa67
    14e0:	032e050c 			; <UNDEFINED> instruction: 0x032e050c
				dgout (*mess);
    14e4:	042e7893 	strteq	r7, [lr], #-2195	; 0xfffff76d
    14e8:	0352050e 	cmpeq	r2, #58720256	; 0x3800000
			switch (*mess) {
    14ec:	04200288 	strteq	r0, [r0], #-648	; 0xfffffd78
					v = __pi_hex_enc_table [
    14f0:	032e050c 			; <UNDEFINED> instruction: 0x032e050c
					i += 4;
    14f4:	042e7df8 	strteq	r7, [lr], #-3576	; 0xfffff208
					(val >> (bc - i)) & 0xf];
    14f8:	06040501 	streq	r0, [r4], -r1, lsl #10
    14fc:	2007e503 	andcs	lr, r7, r3, lsl #10
					dgout (v);
    1500:	31050e04 	tstcc	r5, r4, lsl #28
    1504:	017aa003 	cmneq	sl, r3
				while (i < bc) {
    1508:	05150505 	ldreq	r0, [r5, #-1285]	; 0xfffffafb
			mess++;
    150c:	04010652 	streq	r0, [r1], #-1618	; 0xfffff9ae
					d /= 10;
    1510:	06040501 	streq	r0, [r4], -r1, lsl #10
				if ((val >> (bc - 1)) & 1) {
    1514:	2e05e003 	cdpcs	0, 0, cr14, cr5, cr3, {0}
    1518:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
					dgout ('-');
    151c:	01788603 	cmneq	r8, r3, lsl #12
    1520:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
						val |= 0xffff0000;
    1524:	0107fc03 	tsteq	r7, r3, lsl #24	; <UNPREDICTABLE>
    1528:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
    152c:	017aea03 	cmneq	sl, r3, lsl #20
				d = (bc == 16) ? 10000 : 1000000000;
    1530:	03060204 	movweq	r0, #25092	; 0x6204
    1534:	04017d9a 	streq	r7, [r1], #-3482	; 0xfffff266
    1538:	03310509 	teqeq	r1, #37748736	; 0x2400000
					v = (word) (val / d);
    153c:	043c02e6 	ldrteq	r0, [ip], #-742	; 0xfffffd1a
					if (v || d == 1) break;
    1540:	06040501 	streq	r0, [r4], -r1, lsl #10
    1544:	2e059903 	vmlacs.f16	s18, s10, s6	; <UNPREDICTABLE>
					d /= 10;
    1548:	01062305 	tsteq	r6, r5, lsl #6
				d = (bc == 16) ? 10000 : 1000000000;
    154c:	06200405 	strteq	r0, [r0], -r5, lsl #8
					dgout (v + '0');
    1550:	0509046a 	streq	r0, [r9, #-1130]	; 0xfffffb96
    1554:	799f0305 	ldmibvc	pc, {r0, r2, r8, r9}	; <UNPREDICTABLE>
    1558:	063f0501 	ldrteq	r0, [pc], -r1, lsl #10
					d /= 10;
    155c:	03290501 			; <UNDEFINED> instruction: 0x03290501
					val = val - (v * d);
    1560:	052005fa 	streq	r0, [r0, #-1530]!	; 0xfffffa06
					if (d == 0) break;
    1564:	7a86033f 	bvc	fe182268 <_estack+0xde17d268>
					v = (word) (val / d);
    1568:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    156c:	ea030604 	b	c2d84 <__ccfg+0xa2ddc>
				if (bc == 16)
    1570:	09042e06 	stmdbeq	r4, {r1, r2, r9, sl, fp, sp}
					val &= 0xffff;
    1574:	017f9003 	cmneq	pc, r3
				d = (bc == 16) ? 10000 : 1000000000;
    1578:	01062905 	tsteq	r6, r5, lsl #18
					dgout (*s);
    157c:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
					s++;
    1580:	2e00f303 	cdpcs	3, 0, cr15, cr0, cr3, {0}
				while (*s != '\0') {
    1584:	29050904 	stmdbcs	r5, {r2, r8, fp}
    1588:	207f8d03 	rsbscs	r8, pc, r3, lsl #26
			dgout (*mess++);
    158c:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1590:	00f30306 	rscseq	r0, r3, r6, lsl #6
    1594:	04405b4a 	strbeq	r5, [r0], #-2890	; 0xfffff4b6
    1598:	03050502 	movweq	r0, #21762	; 0x5502
	__pi_seed = __pi_seed * 1103515245 + 12345;
    159c:	040177ea 	streq	r7, [r1], #-2026	; 0xfffff816
    15a0:	03040501 	movweq	r0, #17665	; 0x4501
    15a4:	052e0899 	streq	r0, [lr, #-2201]!	; 0xfffff767
    15a8:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
	^ entropy
    15ac:	21830604 	orrcs	r0, r3, r4, lsl #12
}
    15b0:	01061a05 	tsteq	r6, r5, lsl #20
    15b4:	05310405 	ldreq	r0, [r1, #-1029]!	; 0xfffffbfb
    15b8:	04051d1a 	streq	r1, [r5], #-3354	; 0xfffff2e6
    15bc:	04594d06 	ldrbeq	r4, [r9], #-3334	; 0xfffff2fa
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    15c0:	7eee0309 	cdpvc	3, 14, cr0, cr14, cr9, {0}
    15c4:	06290501 	strteq	r0, [r9], -r1, lsl #10
    15c8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	sysassert (p->attributes.b.queued == 0, "tcv01");
    15cc:	97030604 	strls	r0, [r3, -r4, lsl #12]
    15d0:	0e047401 	cdpeq	4, 0, cr7, cr4, cr1, {0}
	if (q_empty (q))
    15d4:	f3033105 	vrhadd.u8	d3, d3, d5
    15d8:	05050179 	streq	r0, [r5, #-377]	; 0xfffffe87
		trigger (q);
    15dc:	06520515 			; <UNDEFINED> instruction: 0x06520515
	if (p->attributes.b.urgent) {
    15e0:	030d0501 	movweq	r0, #54529	; 0xd501
		p->u.bqueue.next = q->next;
    15e4:	042e00ce 	strteq	r0, [lr], #-206	; 0xffffff32
		p->u.bqueue.prev = q;
    15e8:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
		q->next->prev = (qitem_t*) p;
    15ec:	2e05be03 	cdpcs	14, 0, cr11, cr5, cr3, {0}
	p->attributes.b.queued = 1;
    15f0:	04110a05 	ldreq	r0, [r1], #-2565	; 0xfffff5fb
    15f4:	0305050e 	movweq	r0, #21774	; 0x550e
}
    15f8:	05017ac3 	streq	r7, [r1, #-2755]	; 0xfffff53d
		p->u.bqueue.prev = q->prev;
    15fc:	0401060d 	streq	r0, [r1], #-1549	; 0xfffff9f3
		q->prev->next = (qitem_t*) p;
    1600:	030a0501 	movweq	r0, #42241	; 0xa501
		q->prev = (qitem_t*) p;
    1604:	052005bd 	streq	r0, [r0, #-1469]!	; 0xfffffa43
    1608:	75320604 	ldrvc	r0, [r2, #-1540]!	; 0xfffff9fc
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    160c:	05131a05 	ldreq	r1, [r3, #-2565]	; 0xfffff5fb
	word cs = size + hblenb;
    1610:	0b05110a 	bleq	145a40 <__ccfg+0x125a98>
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1614:	0a050106 	beq	141a34 <__ccfg+0x121a8c>
    1618:	06040558 			; <UNDEFINED> instruction: 0x06040558
	p -> length = size;
    161c:	05090432 	streq	r0, [r9, #-1074]	; 0xfffffbce
}
    1620:	7ab80305 	bvc	fee0223c <_estack+0xdedfd23c>
	if (p->attributes.b.queued) {
    1624:	063f0501 	ldrteq	r0, [pc], -r1, lsl #10
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1628:	017ebc03 	cmneq	lr, r3, lsl #24
    162c:	c4033105 	strgt	r3, [r3], #-261	; 0xfffffefb
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1630:	01042001 	tsteq	r4, r1
		p->attributes.b.queued = 0;
    1634:	03060405 	movweq	r0, #25605	; 0x6405
    1638:	042e05cb 	strteq	r0, [lr], #-1483	; 0xfffffa35
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    163c:	03050509 	movweq	r0, #21769	; 0x5509
	deq (p);	// Remove from queue
    1640:	050178f1 	streq	r7, [r1, #-2289]	; 0xfffff70f
}
    1644:	0401063f 	streq	r0, [r1], #-1599	; 0xfffff9c1
	tfree ((address)p);
    1648:	06040501 	streq	r0, [r4], -r1, lsl #10
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    164c:	3c079203 	sfmcc	f1, 1, [r7], {3}
    1650:	05050c04 	streq	r0, [r5, #-3076]	; 0xfffff3fc
	deq (p);	// Soft dequeue, timer and hook left intact
    1654:	0177f503 	cmneq	r7, r3, lsl #10	; <UNPREDICTABLE>
	switch (dv) {
    1658:	01062e05 	tsteq	r6, r5, lsl #28
    165c:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1660:	088e0306 	stmeq	lr, {r1, r2, r8, r9}
			p->attributes.b.urgent = 1;
    1664:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    1668:	77c90305 	strbvc	r0, [r9, r5, lsl #6]
			verify_ses (p, "dispose ses");
    166c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1670:	08ba0304 	ldmeq	sl!, {r2, r8, r9}
    1674:	2e09033c 	mcrcs	3, 0, r0, cr9, cr12, {1}
    1678:	0302052f 	movweq	r0, #9519	; 0x252f
    167c:	04017db0 	streq	r7, [r1], #-3504	; 0xfffff250
			verify_phy (p, "dispose phy");
    1680:	03240506 			; <UNDEFINED> instruction: 0x03240506
    1684:	05017ed4 	streq	r7, [r1, #-3796]	; 0xfffff12c
}
    1688:	23051705 	movwcs	r1, #22277	; 0x5705
			enq (oqueues [p->attributes.b.phys], p);
    168c:	01040106 	tsteq	r4, r6, lsl #2
			p->attributes.b.urgent = 1;
    1690:	a8030105 	stmdage	r3, {r0, r2, r8}
    1694:	04055801 	streq	r5, [r5], #-2049	; 0xfffff7ff
			verify_phy (p, "dispose phy");
    1698:	02f00306 	rscseq	r0, r0, #402653184	; 0x18000000
    169c:	32057720 	andcc	r7, r5, #32, 14	; 0x800000
    16a0:	2c051906 			; <UNDEFINED> instruction: 0x2c051906
    16a4:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    16a8:	055a0604 	ldrbeq	r0, [sl, #-1540]	; 0xfffff9fc
    16ac:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
			enq (oqueues [p->attributes.b.phys], p);
    16b0:	054f0604 	strbeq	r0, [pc, #-1540]	; 10b4 <__pi_wait+0x18>
    16b4:	05010632 	streq	r0, [r1, #-1586]	; 0xfffff9ce
}
    16b8:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
			rlp (p);
    16bc:	05010632 	streq	r0, [r1, #-1586]	; 0xfffff9ce
}
    16c0:	04240604 	strteq	r0, [r4], #-1540	; 0xfffff9fc
    16c4:	03050502 	movweq	r0, #21762	; 0x5502
    16c8:	0401778b 	streq	r7, [r1], #-1931	; 0xfffff875
    16cc:	03040501 	movweq	r0, #17665	; 0x4501
    16d0:	043c08f8 	ldrteq	r0, [ip], #-2296	; 0xfffff708
    16d4:	0305050e 	movweq	r0, #21774	; 0x550e
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    16d8:	05017a88 	streq	r7, [r1, #-2696]	; 0xfffff578
	if (b->attributes.b.outgoing) {
    16dc:	0515064d 	ldreq	r0, [r5, #-1613]	; 0xfffff9b3
	b = header (p);
    16e0:	05051d2d 	streq	r1, [r5, #-3373]	; 0xfffff2d3
	if (b->attributes.b.outgoing) {
    16e4:	4d052306 	stcmi	3, cr2, [r5, #-24]	; 0xffffffe8
		verify_ses (b, "tcv02");
    16e8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    16ec:	2e052f06 	cdpcs	15, 0, cr2, cr5, cr6, {0}
    16f0:	01040106 	tsteq	r4, r6, lsl #2
    16f4:	03060405 	movweq	r0, #25605	; 0x6405
    16f8:	042e05f7 	strteq	r0, [lr], #-1527	; 0xfffffa09
		verify_plg (b, tcv_out, "tcv03");
    16fc:	03050502 	movweq	r0, #21762	; 0x5502
    1700:	04017785 	streq	r7, [r1], #-1925	; 0xfffff87b
    1704:	03390501 	teqeq	r9, #4194304	; 0x400000
    1708:	052008fe 	streq	r0, [r0, #-2302]!	; 0xfffff702
    170c:	0e04010a 	adfeqs	f0, f4, #2.0
    1710:	ea030505 	b	c2b2c <__ccfg+0xa2b84>
    1714:	0d050179 	stfeqs	f0, [r5, #-484]	; 0xfffffe1c
    1718:	01040106 	tsteq	r4, r6, lsl #2
    171c:	96030a05 	strls	r0, [r3], -r5, lsl #20
		dispose (b, plugins [b->attributes.b.plugin] ->
    1720:	04052006 	streq	r2, [r5], #-6
}
    1724:	09043206 	stmdbeq	r4, {r1, r2, r9, ip, sp}
		dispose (b, plugins [b->attributes.b.plugin] ->
    1728:	ec030505 	cfstr32	mvfx0, [r3], {5}
		rlp (b);
    172c:	41050177 	tstmi	r5, r7, ror r1
}
    1730:	01040106 	tsteq	r4, r6, lsl #2
		rlp (b);
    1734:	97030405 	strls	r0, [r3, -r5, lsl #8]
    1738:	09042e08 	stmdbeq	r4, {r3, r9, sl, fp, sp}
    173c:	e9034105 	stmdb	r3, {r0, r2, r8, lr}
    1740:	01042077 	tsteq	r4, r7, ror r0
    1744:	03060405 	movweq	r0, #25605	; 0x6405
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1748:	6e2e0897 	mcrvs	8, 1, r0, cr14, cr7, {4}
    174c:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
    1750:	2075d103 	rsbscs	sp, r5, r3, lsl #2
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1754:	0101014a 	tsteq	r1, sl, asr #2
	va_start (ap, plid);
    1758:	03050304 	movweq	r0, #21252	; 0x5304
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    175c:	04012b03 	streq	r2, [r1], #-2819	; 0xfffff4fd
    1760:	0302050d 	movweq	r0, #9485	; 0x250d
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1764:	02162055 	andseq	r2, r6, #85	; 0x55
    1768:	01010023 	tsteq	r1, r3, lsr #32
    176c:	05001205 	streq	r1, [r0, #-517]	; 0xfffffdfb
    1770:	00000002 	andeq	r0, r0, r2
			syserror (ENODEVICE, "tcv04");
    1774:	00e10300 	rsceq	r0, r1, r0, lsl #6
		syserror (EMALLOC, "tcv05");
    1778:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
	attp.b.outgoing = 1;
    177c:	1e061205 	cdpne	2, 0, cr1, cr6, cr5, {0}
    1780:	21220205 			; <UNDEFINED> instruction: 0x21220205
    1784:	2f2f061f 	svccs	0x002f061f
    1788:	08053f4b 	stmdaeq	r5, {r0, r1, r3, r6, r8, r9, sl, fp, ip, sp}
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    178c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
		if (descriptors [fd] == NULL)
    1790:	09022f06 	stmdbeq	r2, {r1, r2, r8, r9, sl, fp, sp}
    1794:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1798:	0205003a 	andeq	r0, r5, #58	; 0x3a
		return ERROR;
    179c:	00000000 	andeq	r0, r0, r0
}
    17a0:	0100f103 	tsteq	r0, r3, lsl #2	; <UNPREDICTABLE>
    17a4:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    17a8:	0e063a05 	vmlaeq.f32	s6, s12, s10
	s->attpattern.b.session = fd;
    17ac:	05240605 	streq	r0, [r4, #-1541]!	; 0xfffff9fb
    17b0:	05051c3a 	streq	r1, [r5, #-3130]	; 0xfffff3c6
	descriptors [fd] = s;
    17b4:	1c3a0524 	cfldr32ne	mvfx0, [sl], #-144	; 0xffffff70
	q_init (&(s->rqueue));
    17b8:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    17bc:	05230603 	streq	r0, [r3, #-1539]!	; 0xfffff9fd
    17c0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    17c4:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    17c8:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    17cc:	03052e0b 	movweq	r2, #24075	; 0x5e0b
    17d0:	09052506 	stmdbeq	r5, {r1, r2, r8, sl, sp}
    17d4:	03050106 	movweq	r0, #20742	; 0x5106
	descriptors [fd] = s;
    17d8:	0f042f06 	svceq	0x00042f06
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    17dc:	14030505 	strne	r0, [r3], #-1285	; 0xfffffafb
    17e0:	062f0501 	strteq	r0, [pc], -r1, lsl #10
	if (s == NULL)
    17e4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		syserror (EMALLOC, "tcv05");
    17e8:	207a0301 	rsbscs	r0, sl, r1, lsl #6
    17ec:	03060405 	movweq	r0, #25605	; 0x6405
    17f0:	0f04206f 	svceq	0x0004206f
    17f4:	c3030505 	movwgt	r0, #13573	; 0x3505
    17f8:	05140100 	ldreq	r0, [r4, #-256]	; 0xffffff00
    17fc:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
    1800:	04250605 	strteq	r0, [r5], #-1541	; 0xfffff9fb
    1804:	060b0501 	streq	r0, [fp], -r1, lsl #10
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1808:	017fb603 	cmneq	pc, r3, lsl #12
	    (plugins [ord] != NULL && plugins [ord] != pl))
    180c:	34060305 	strcc	r0, [r6], #-773	; 0xfffffcfb
    1810:	05050f04 	streq	r0, [r5, #-3844]	; 0xfffff0fc
    1814:	062f050e 	strteq	r0, [pc], -lr, lsl #10
	plugins [ord] = pl;
    1818:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	return 0;
    181c:	05410603 	strbeq	r0, [r1, #-1539]	; 0xfffff9fd
		return ERROR;
    1820:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
}
    1824:	06053f04 	streq	r3, [r5], -r4, lsl #30
    1828:	0604052b 	streq	r0, [r4], -fp, lsr #10
	verify_fds (fd, "tcv10");
    182c:	03052f23 	movweq	r2, #24355	; 0x5f23
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    1830:	05130622 	ldreq	r0, [r3, #-1570]	; 0xfffff9de
	verify_fds (fd, "tcv10");
    1834:	03051f09 	movweq	r1, #24329	; 0x5f09
    1838:	022f2106 	eoreq	r2, pc, #-2147483647	; 0x80000001
    183c:	01010007 	tsteq	r1, r7
	verify_plg (b, tcv_frm, "tcv11");
    1840:	05001105 	streq	r1, [r0, #-261]	; 0xfffffefb
	b = q_first (rq);
    1844:	000e4402 	andeq	r4, lr, r2, lsl #8
	if (q_end (b, rq)) {
    1848:	0af10300 	beq	ffc42450 <_estack+0xdfc3d450>
		if (state != WNONE) {
    184c:	16030501 	strne	r0, [r3], -r1, lsl #10
    1850:	010f0513 	tsteq	pc, r3, lsl r5	; <UNPREDICTABLE>
			when (rq, state);
    1854:	0d061105 	stfeqs	f1, [r6, #-20]	; 0xffffffec
			release;
    1858:	26250520 	strtcs	r0, [r5], -r0, lsr #10
	deq (b);	// Dequeue the packet ...
    185c:	051f0305 	ldreq	r0, [pc, #-773]	; 155f <diag+0x107>
    1860:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
	p = ((address)(b + 1));
    1864:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
	verify_plg (b, tcv_frm, "tcv11");
    1868:	052d0637 	streq	r0, [sp, #-1591]!	; 0xfffff9c9
    186c:	0305010f 	movweq	r0, #20751	; 0x510f
    1870:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1874:	19063206 	stmdbne	r6, {r1, r2, r9, ip, sp}
    1878:	062e7903 	strteq	r7, [lr], -r3, lsl #18
    187c:	69693231 	stmdbvs	r9!, {r0, r4, r5, r9, ip, sp}^
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    1880:	01061c05 	tsteq	r6, r5, lsl #24
    1884:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
		b->length - b->u.pointers.head - b->u.pointers.tail;
    1888:	0c052302 	stceq	3, cr2, [r5], {2}
    188c:	0602051d 			; <UNDEFINED> instruction: 0x0602051d
	b->u.pointers.tail =
    1890:	03043e23 	movweq	r3, #20003	; 0x4e23
}
    1894:	c5030305 	strgt	r0, [r3, #-773]	; 0xfffffcfb
		return NULL;
    1898:	01040175 	tsteq	r4, r5, ror r1
    189c:	bd030205 	sfmlt	f0, 4, [r3, #-20]	; 0xffffffec
    18a0:	0d02200a 	stceq	0, cr2, [r2, #-40]	; 0xffffffd8
    18a4:	be010100 	adflts	f0, f1, f0
    18a8:	0300000e 	movweq	r0, #14
	verify_fds (fd, "tcv16");
    18ac:	00015c00 	andeq	r5, r1, r0, lsl #24
								Boolean urg) {
    18b0:	fb010200 	blx	420ba <__ccfg+0x22112>
    18b4:	01000d0e 	tsteq	r0, lr, lsl #26
	verify_fds (fd, "tcv16");
    18b8:	00010101 	andeq	r0, r1, r1, lsl #2
    18bc:	00010000 	andeq	r0, r1, r0
    18c0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
	verify_pld (s, tcv_frm, "tcv17");
    18c4:	2f656d6f 	svccs	0x00656d6f
    18c8:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    18cc:	6179696c 	cmnvs	r9, ip, ror #18
    18d0:	2f33326e 	svccs	0x0033326e
    18d4:	4f534c4f 	svcmi	0x00534c4f
    18d8:	2f54454e 	svccs	0x0054454e
    18dc:	4f434950 	svcmi	0x00434950
    18e0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
	ptrs.head = (word) fd;
    18e4:	2f534f63 	svccs	0x00534f63
	ptrs.tail = (word) urg;
    18e8:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    18ec:	2f006c65 	svccs	0x00006c65
    18f0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
		if (state != WNONE) {
    18f4:	6168632f 	cmnvs	r8, pc, lsr #6
    18f8:	79696c72 	stmdbvc	r9!, {r1, r4, r5, r6, sl, fp, sp, lr}^
}
    18fc:	33326e61 	teqcc	r2, #1552	; 0x610
			when (eid, state);
    1900:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1904:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
			release;
    1908:	4349502f 	movtmi	r5, #36911	; 0x902f
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    190c:	502f534f 	eorpl	r5, pc, pc, asr #6
    1910:	534f6369 	movtpl	r6, #62313	; 0xf369
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    1914:	3143432f 	cmpcc	r3, pc, lsr #6
    1918:	2f585833 	svccs	0x00585833
    191c:	33314343 	teqcc	r1, #201326593	; 0xc000001
    1920:	41575858 	cmpmi	r7, r8, asr r8
    1924:	642f4552 	strtvs	r4, [pc], #-1362	; 192c <tcv_wnps+0x80>
    1928:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
		if (state != WNONE) {
    192c:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    1930:	73752f00 	cmnvc	r5, #0, 30
			tmwait (state);
    1934:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1938:	63672f62 	cmnvs	r7, #392	; 0x188
	b->attributes = s->attpattern;
    193c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
		b->attributes.b.urgent = 1;
    1940:	6f6e2d6d 	svcvs	0x006e2d6d
    1944:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
	b->u.pointers.head = ptrs.head;
    1948:	2f696261 	svccs	0x00696261
	b->u.pointers.tail = length;
    194c:	332e3031 			; <UNDEFINED> instruction: 0x332e3031
	return (address) (b + 1);
    1950:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    1954:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1958:	2f006564 	svccs	0x00006564
    195c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1960:	6168632f 	cmnvs	r8, pc, lsr #6
    1964:	79696c72 	stmdbvc	r9!, {r1, r4, r5, r6, sl, fp, sp, lr}^
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1968:	33326e61 	teqcc	r2, #1552	; 0x610
    196c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1970:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
	verify_fph (phy, "tcv23");
    1974:	4349502f 	movtmi	r5, #36911	; 0x902f
    1978:	502f534f 	eorpl	r5, pc, pc, asr #6
    197c:	534f6369 	movtpl	r6, #62313	; 0xf369
    1980:	3143432f 	cmpcc	r3, pc, lsr #6
}
    1984:	00585833 	subseq	r5, r8, r3, lsr r8
	return (physical [phy]) (opt, arg);
    1988:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 18d4 <tcv_wnps+0x28>
    198c:	68632f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1990:	696c7261 	stmdbvs	ip!, {r0, r5, r6, r9, ip, sp, lr}^
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    1994:	326e6179 	rsbcc	r6, lr, #1073741854	; 0x4000001e
	if (opt < 0) {
    1998:	4c4f2f33 	mcrrmi	15, 3, r2, pc, cr3
		if (fd < 0)
    199c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
		if (opt == PHYSOPT_PLUGINFO) {
    19a0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
			if (fd >= TCV_MAX_PLUGS)
    19a4:	2f534f43 	svccs	0x00534f43
			if ((p = plugins [fd]) == NULL)
    19a8:	4f636950 	svcmi	0x00636950
    19ac:	6b000053 	blvs	1b00 <tcvphy_rcv+0x54>
}
    19b0:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
		if (fd >= TCV_MAX_PHYS)
    19b4:	00632e6c 	rsbeq	r2, r3, ip, ror #28
		return physinfo [fd];
    19b8:	75000001 	strvc	r0, [r0, #-1]
    19bc:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
	verify_fds (fd, "tcv22");
    19c0:	00020068 	andeq	r0, r2, r8, rrx
    19c4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    19c8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    19cc:	00030068 	andeq	r0, r3, r8, rrx
    19d0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
}
    19d4:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    19d8:	00030068 	andeq	r0, r3, r8, rrx
    19dc:	63726100 	cmnvs	r2, #0, 2
			return 0;
    19e0:	00682e68 	rsbeq	r2, r8, r8, ror #28
    19e4:	73000004 	movwvc	r0, #4
    19e8:	6f697379 	svcvs	0x00697379
    19ec:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    19f0:	656b0000 	strbvs	r0, [fp, #-0]!
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    19f4:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    19f8:	0100682e 	tsteq	r0, lr, lsr #16
	if (dsp != TCV_DSP_PASS) {
    19fc:	623c0000 	eorsvs	r0, ip, #0
		if (ses == NONE)
    1a00:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
			syserror (EREQPAR, "tcv26");
    1a04:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
		verify_fds (ses, "tcv27");
    1a08:	00000000 	andeq	r0, r0, r0
    1a0c:	00260500 	eoreq	r0, r6, r0, lsl #10
    1a10:	0ea80205 	cdpeq	2, 10, cr0, cr8, cr5, {0}
    1a14:	c3030000 	movwgt	r0, #12288	; 0x3000
    1a18:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
		if ((p = apb (size)) != NULL) {
    1a1c:	14131316 	ldrne	r1, [r3], #-790	; 0xfffffcea
    1a20:	03062605 	movweq	r2, #26117	; 0x6605
		return NULL;
    1a24:	02050178 	andeq	r0, r5, #120, 2
			p->attributes = descriptors [ses] -> attpattern;
    1a28:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
			dispose (p, dsp);
    1a2c:	02051f07 	andeq	r1, r5, #7, 30
			p->attributes = descriptors [ses] -> attpattern;
    1a30:	05202106 	streq	r2, [r0, #-262]!	; 0xfffffefa
			p->attributes.b.outgoing = 0;
    1a34:	05210613 	streq	r0, [r1, #-1555]!	; 0xfffff9ed
			dispose (p, dsp);
    1a38:	13053c0a 	movwne	r3, #23562	; 0x5c0a
			return (address)(p + 1);
    1a3c:	3e080520 	cfsh32cc	mvfx0, mvfx8, #16
    1a40:	2c060f05 	stccs	15, cr0, [r6], {5}
	if ((p = apb (size)) != NULL)
    1a44:	01060305 	tsteq	r6, r5, lsl #6
    1a48:	2f060405 	svccs	0x00060405
		return (address)(p + 1);
    1a4c:	01061605 	tsteq	r6, r5, lsl #12
    1a50:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
    1a54:	4b310605 	blmi	c43270 <__ccfg+0xc232c8>
    1a58:	7a030205 	bvc	c2274 <__ccfg+0xa22cc>
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a5c:	06010501 	streq	r0, [r1], -r1, lsl #10
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1a60:	022e0a03 	eoreq	r0, lr, #12288	; 0x3000
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a64:	01010003 	tsteq	r1, r3
    1a68:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
		syserror (EREQPAR, "tcv28");
    1a6c:	000ee402 	andeq	lr, lr, r2, lsl #8
		syserror (EMALLOC, "tcv29");
    1a70:	06c90300 	strbeq	r0, [r9], r0, lsl #6
	physical [phy] = ps;
    1a74:	03020501 	movweq	r0, #9473	; 0x2501
	physinfo [phy] = info;
    1a78:	1314010d 	tstne	r4, #1073741827	; 0x40000003
    1a7c:	01060d05 	tsteq	r6, r5, lsl #26
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1a80:	70031f05 	andvc	r1, r3, r5, lsl #30
    1a84:	030d0520 	movweq	r0, #54560	; 0xd520
    1a88:	1f052e10 	svcne	0x00052e10
		syserror (EMALLOC, "tcv29");
    1a8c:	02052006 	andeq	r2, r5, #6
    1a90:	03060106 	movweq	r0, #24838	; 0x6106
	q_init (q);
    1a94:	05132011 	ldreq	r2, [r3, #-17]	; 0xffffffef
}
    1a98:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    1a9c:	1f051f05 	svcne	0x00051f05
    1aa0:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    1aa4:	25060106 	strcs	r0, [r6, #-262]	; 0xfffffefa
    1aa8:	060f0521 	streq	r0, [pc], -r1, lsr #10
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1aac:	1d020515 	cfstr32ne	mvfx0, [r2, #-84]	; 0xffffffac
	verify_fph (phy, "tcv30");
    1ab0:	0f052306 	svceq	0x00052306
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ab4:	01050106 	tsteq	r5, r6, lsl #2
    1ab8:	06030524 	streq	r0, [r3], -r4, lsr #10
	verify_fph (phy, "tcv30");
    1abc:	05206203 	streq	r6, [r0, #-515]!	; 0xfffffdfd
    1ac0:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
    1ac4:	04055806 	streq	r5, [r5], #-2054	; 0xfffff7fa
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1ac8:	05213006 	streq	r3, [r1, #-6]!
    1acc:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1ad0:	05910604 	ldreq	r0, [r1, #1540]	; 0x604
    1ad4:	36050d2e 	strcc	r0, [r5], -lr, lsr #26
		if (plugins [plg] == NULL)
    1ad8:	0a050106 	beq	141ef8 <__ccfg+0x121f50>
    1adc:	1f053406 	svcne	0x00053406
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1ae0:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
		return 0;
    1ae4:	06040558 			; <UNDEFINED> instruction: 0x06040558
}
    1ae8:	10052f22 	andne	r2, r5, r2, lsr #30
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1aec:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1af0:	ac0b0306 	stcge	3, cr0, [fp], {6}
    1af4:	01060705 	tsteq	r6, r5, lsl #14
    1af8:	64062e05 	strvs	r2, [r6], #-3589	; 0xfffff1fb
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1afc:	13060905 	movwne	r0, #26885	; 0x6905
    1b00:	01000702 	tsteq	r0, r2, lsl #14
    1b04:	001c0501 	andseq	r0, ip, r1, lsl #10
    1b08:	0f640205 	svceq	0x00640205
    1b0c:	c6030000 	strgt	r0, [r3], -r0
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1b10:	02050108 	andeq	r0, r5, #8, 2
	len -= (ap.head + ap.tail);
    1b14:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    1b18:	df03060d 	svcle	0x0003060d
    1b1c:	0104017c 	tsteq	r4, ip, ror r1
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1b20:	03060f05 	movweq	r0, #28421	; 0x6f05
    1b24:	052003a1 	streq	r0, [r0, #-929]!	; 0xfffffc5f
    1b28:	02040102 	andeq	r0, r4, #-2147483648	; 0x80000000
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1b2c:	da032405 	ble	cab48 <__ccfg+0xaaba0>
    1b30:	0505017c 	streq	r0, [r5, #-380]	; 0xfffffe84
    1b34:	060d0517 			; <UNDEFINED> instruction: 0x060d0517
	return 1;
    1b38:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1b3c:	03a10302 			; <UNDEFINED> instruction: 0x03a10302
    1b40:	052f0620 	streq	r0, [pc, #-1568]!	; 1528 <diag+0xd0>
    1b44:	022f0601 	eoreq	r0, pc, #1048576	; 0x100000
    1b48:	01010004 	tsteq	r1, r4
	verify_fph (phy, "tcv32");
    1b4c:	05002705 	streq	r2, [r0, #-1797]	; 0xfffff8fb
    1b50:	00000002 	andeq	r0, r0, r2
    1b54:	00de0300 	sbcseq	r0, lr, r0, lsl #6
    1b58:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    1b5c:	06270514 			; <UNDEFINED> instruction: 0x06270514
    1b60:	2402050e 	strcs	r0, [r2], #-1294	; 0xfffffaf2
	oq = oqueues [phy];
    1b64:	051c2705 	ldreq	r2, [ip, #-1797]	; 0xfffff8fb
	b = q_first (oq);
    1b68:	20062402 	andcs	r2, r6, r2, lsl #8
	if (q_end (b, oq)) {
    1b6c:	48030523 	stmdami	r3, {r0, r1, r5, r8, sl}
	*len = b->length;
    1b70:	01060605 	tsteq	r6, r5, lsl #12
	deq (b);	// Dequeue the packet ...
    1b74:	2d060205 	sfmcs	f0, 4, [r6, #-20]	; 0xffffffec
}
    1b78:	32060105 	andcc	r0, r6, #1073741825	; 0x40000001
		return NULL;
    1b7c:	01000502 	tsteq	r0, r2, lsl #10
    1b80:	001b0501 	andseq	r0, fp, r1, lsl #10
    1b84:	0f780205 	svceq	0x00780205
    1b88:	fa030000 	blx	c1b90 <__ccfg+0xa1be8>
	verify_fph (phy, "tcv33");
    1b8c:	02050100 	andeq	r0, r5, #0, 2
    1b90:	061b0513 			; <UNDEFINED> instruction: 0x061b0513
    1b94:	2102051f 	tstcs	r2, pc, lsl r5
    1b98:	01000602 	tsteq	r0, r2, lsl #12
    1b9c:	001e0501 	andseq	r0, lr, r1, lsl #10
    1ba0:	0f880205 	svceq	0x00880205
	oq = oqueues [phy];
    1ba4:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
	b = q_first (oq);
    1ba8:	02050100 	andeq	r0, r5, #0, 2
		return NULL;
    1bac:	0e051416 	cfmvdlreq	mvd5, r1
	return (address)(b + 1);
    1bb0:	061e0501 	ldreq	r0, [lr], -r1, lsl #10
}
    1bb4:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    1bb8:	1e053409 	cdpne	4, 0, cr3, cr5, cr9, {0}
    1bbc:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1bc0:	05270603 	streq	r0, [r7, #-1539]!	; 0xfffff9fd
	verify_plg (b, tcv_xmt, "tcv34");
    1bc4:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
	hblock_t *b = header (pkt);
    1bc8:	1f052e06 	svcne	0x00052e06
	verify_plg (b, tcv_xmt, "tcv34");
    1bcc:	20051f06 	andcs	r1, r5, r6, lsl #30
    1bd0:	0e050106 	adfeqs	f0, f5, f6
    1bd4:	02052006 	andeq	r2, r5, #6
    1bd8:	32060106 	andcc	r0, r6, #-2147483647	; 0x80000001
    1bdc:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    1be0:	05153b02 	ldreq	r3, [r5, #-2818]	; 0xfffff4fe
    1be4:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
	dispose (b, plugins [b->attributes.b.plugin] ->
    1be8:	06022f01 	streq	r2, [r2], -r1, lsl #30
}
    1bec:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	dispose (b, plugins [b->attributes.b.plugin] ->
    1bf0:	02050021 	andeq	r0, r5, #33	; 0x21
    1bf4:	00000000 	andeq	r0, r0, r0
    1bf8:	01018e03 	tsteq	r1, r3, lsl #28
}
    1bfc:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    while(1)
    1c00:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
{
    1c04:	05200609 	streq	r0, [r0, #-1545]!	; 0xfffff9f7
    SetupTrimDevice();
    1c08:	2e7a0321 	cdpcs	3, 7, cr0, cr10, cr1, {1}
        *pui32Dest++ = *pui32Src++;
    1c0c:	27060305 	strcs	r0, [r6, -r5, lsl #6]
    1c10:	01061205 	tsteq	r6, r5, lsl #4
    1c14:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    1c18:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    1c1c:	06054b03 	streq	r4, [r5], -r3, lsl #22
    1c20:	1f050106 	svcne	0x00050106
    __asm("    ldr     r0, =_bss\n"
    1c24:	20052b06 	andcs	r2, r5, r6, lsl #22
    1c28:	0e050106 	adfeqs	f0, f5, f6
    1c2c:	02052006 	andeq	r2, r5, #6
    1c30:	34060106 	strcc	r0, [r6], #-262	; 0xfffffefa
    1c34:	05660b05 	strbeq	r0, [r6, #-2821]!	; 0xfffff4fb
   main();
    1c38:	08051302 	stmdaeq	r5, {r1, r8, r9, ip}
    FaultISR();
    1c3c:	2f030501 	svccs	0x00030501
}
    1c40:	01061f05 	tsteq	r6, r5, lsl #30
    1c44:	05202105 	streq	r2, [r0, #-261]!	; 0xfffffefb
    1c48:	03052012 	movweq	r2, #20498	; 0x5012
    1c4c:	06052f06 	streq	r2, [r5], -r6, lsl #30
    1c50:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
static byte get_byte () {
    1c54:	0b053206 	bleq	14e474 <__ccfg+0x12e4cc>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c58:	0601054a 	streq	r0, [r1], -sl, asr #10
    1c5c:	00080213 	andeq	r0, r8, r3, lsl r2
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c60:	2a050101 	bcs	14206c <__ccfg+0x1220c4>
		b <<= 1;
    1c64:	b4020500 	strlt	r0, [r2], #-1280	; 0xfffffb00
    1c68:	0300000f 	movweq	r0, #15
			b |= 1;
    1c6c:	050101a6 	streq	r0, [r1, #-422]	; 0xfffffe5a
	for (b = 0, i = 0; i < 8; i++) {
    1c70:	05051402 	streq	r1, [r5, #-1026]	; 0xfffffbfe
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c74:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1c78:	02022106 	andeq	r2, r2, #-2147483647	; 0x80000001
}
    1c7c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1c80:	0205002e 	andeq	r0, r5, #46	; 0x2e
static void put_byte (byte b) {
    1c84:	00000fbc 			; <UNDEFINED> instruction: 0x00000fbc
    1c88:	0101ae03 	tsteq	r1, r3, lsl #28
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c8c:	02052006 	andeq	r2, r5, #6
    1c90:	200e0306 	andcs	r0, lr, r6, lsl #6
		if (b & 0x80)
    1c94:	01100313 	tsteq	r0, r3, lsl r3
    1c98:	01060605 	tsteq	r6, r5, lsl #12
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1c9c:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
		b <<= 1;
    1ca0:	09030602 	stmdbeq	r3, {r1, r9, sl}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1ca4:	0606052e 	streq	r0, [r6], -lr, lsr #10
    1ca8:	58050501 	stmdapl	r5, {r0, r8, sl}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cac:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
}
    1cb0:	27080603 	strcs	r0, [r8, -r3, lsl #12]
    1cb4:	0302052e 	movweq	r0, #9518	; 0x252e
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1cb8:	14052029 	strne	r2, [r5], #-41	; 0xffffffd7
    1cbc:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    1cc0:	0604052e 	streq	r0, [r4], -lr, lsr #10
	put_byte (cmd);
    1cc4:	052e5903 	streq	r5, [lr, #-2307]!	; 0xfffff6fd
    1cc8:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
}
    1ccc:	04052007 	streq	r2, [r5], #-7
    1cd0:	08053106 	stmdaeq	r5, {r1, r2, r8, ip, sp}
static void wwait (word st, word del) {
    1cd4:	07050106 	streq	r0, [r5, -r6, lsl #2]
    1cd8:	2e08053c 	mcrcs	5, 0, r0, cr8, cr12, {1}
    1cdc:	08060505 	stmdaeq	r6, {r0, r2, r8, sl}
	while (dopen && (rdsr () & 1)) {
    1ce0:	0303053e 	movweq	r0, #13630	; 0x353e
    1ce4:	05053c79 	streq	r3, [r5, #-3193]	; 0xfffff387
    1ce8:	052e0b03 	streq	r0, [lr, #-2819]!	; 0xfffff4fd
    1cec:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
	put_byte (CMD_RDSR);
    1cf0:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
	r = get_byte ();
    1cf4:	05110607 	ldreq	r0, [r1, #-1543]	; 0xfffff9f9
    1cf8:	17030603 	strne	r0, [r3, -r3, lsl #12]
    1cfc:	06070566 	streq	r0, [r7], -r6, ror #10
	while (dopen && (rdsr () & 1)) {
    1d00:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
}
    1d04:	03060205 	movweq	r0, #25093	; 0x6205
		if (st == WNONE)
    1d08:	0b053c16 	bleq	150d68 <__ccfg+0x130dc0>
    1d0c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
			mdelay (1);
    1d10:	01054006 	tsteq	r5, r6
    1d14:	010d0306 	tsteq	sp, r6, lsl #6
			delay (del, st);
    1d18:	73030205 	movwvc	r0, #12805	; 0x3205
    1d1c:	0301052e 	movweq	r0, #5422	; 0x152e
			release;
    1d20:	0a022e0d 	beq	8d55c <__ccfg+0x6d5b4>
    1d24:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1d28:	0205001b 	andeq	r0, r5, #27
static void ready () {
    1d2c:	00001088 	andeq	r1, r0, r8, lsl #1
	if (dopen) {
    1d30:	0102d203 	tsteq	r2, r3, lsl #4
		wwait (WNONE, 1);
    1d34:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    1d38:	0510061b 	ldreq	r0, [r0, #-1563]	; 0xfffff9e5
    1d3c:	4b062202 	blmi	18a54c <__ccfg+0x16a5a4>
	dstat = 0;
    1d40:	01000502 	tsteq	r0, r2, lsl #10
}
    1d44:	002a0501 	eoreq	r0, sl, r1, lsl #10
    1d48:	109c0205 	addsne	r0, ip, r5, lsl #4
    1d4c:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
	udelay (1);
    1d50:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
	udelay (1);
    1d54:	062a0516 			; <UNDEFINED> instruction: 0x062a0516
    1d58:	240b050e 	strcs	r0, [fp], #-1294	; 0xfffffaf2
    1d5c:	053e0505 	ldreq	r0, [lr, #-1285]!	; 0xfffffafb
		dopen = DOPEN_TEMP;
    1d60:	054a0602 	strbeq	r0, [sl, #-1538]	; 0xfffff9fe
    1d64:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    1d68:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    1d6c:	06014c02 	streq	r4, [r1], -r2, lsl #24
static void cclose () {
    1d70:	20061f3d 	andcs	r1, r6, sp, lsr pc
	if (dopen == DOPEN_TEMP) {
    1d74:	01051320 	tsteq	r5, r0, lsr #6
    1d78:	06022106 	streq	r2, [r2], -r6, lsl #2
		wwait (WNONE, 1);
    1d7c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1d80:	02050021 	andeq	r0, r5, #33	; 0x21
	cmd_0 (CMD_DP);
    1d84:	000010d0 	ldrdeq	r1, [r0], -r0
    1d88:	0102e503 	tsteq	r2, r3, lsl #10
		dopen = 0;
    1d8c:	13160205 	tstne	r6, #1342177280	; 0x50000000
}
    1d90:	06210514 			; <UNDEFINED> instruction: 0x06210514
word ee_open () {
    1d94:	05017903 	streq	r7, [r1, #-2307]	; 0xfffff6fd
	ready ();
    1d98:	2e062702 	cdpcs	7, 0, cr2, cr6, cr2, {0}
	dopen = DOPEN_PERM;
    1d9c:	21061305 	tstcs	r6, r5, lsl #6
    1da0:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
}
    1da4:	0f052013 	svceq	0x00052013
	if (dopen) {
    1da8:	03054a06 	movweq	r4, #23046	; 0x5a06
    1dac:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
		dopen = DOPEN_TEMP;
    1db0:	07052f06 	streq	r2, [r5, -r6, lsl #30]
		cclose ();
    1db4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
}
    1db8:	054b5a06 	strbeq	r5, [fp, #-2566]	; 0xfffff5fa
int ser_outf (word st, const char *m, ...) {
    1dbc:	01050d02 	tsteq	r5, r2, lsl #26
    1dc0:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
	if ((prcs = running (__outserial)) != 0) {
    1dc4:	01000302 	tsteq	r0, r2, lsl #6
    1dc8:	002d0501 	eoreq	r0, sp, r1, lsl #10
		join (prcs, st);
    1dcc:	00000205 	andeq	r0, r0, r5, lsl #4
    1dd0:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
		release;
    1dd4:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1dd8:	05141316 	ldreq	r1, [r4, #-790]	; 0xfffffcea
    1ddc:	7903062d 	stmdbvc	r3, {r0, r2, r3, r5, r9, sl}
    1de0:	02052001 	andeq	r2, r5, #1
		umwait (st);
    1de4:	05300627 	ldreq	r0, [r0, #-1575]!	; 0xfffff9d9
    1de8:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
	if (runstrand (__outserial, buf) == 0) {
    1dec:	052e060e 	streq	r0, [lr, #-1550]!	; 0xfffff9f2
    1df0:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    1df4:	01053c02 	tsteq	r5, r2, lsl #24
		ufree (buf);
    1df8:	06030533 			; <UNDEFINED> instruction: 0x06030533
		npwait (st);
    1dfc:	0606051c 			; <UNDEFINED> instruction: 0x0606051c
}
    1e00:	1f200501 	svcne	0x00200501
    1e04:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    1e08:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    1e0c:	0102641f 	tsteq	r2, pc, lsl r4
int ser_inf (word st, const char *fmt, ...) {
    1e10:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1e14:	02050026 	andeq	r0, r5, #38	; 0x26
	if (fmt == NULL)
    1e18:	00001104 	andeq	r1, r0, r4, lsl #2
	if (__inpline == NULL) {
    1e1c:	01038703 	tsteq	r3, r3, lsl #14
		if ((prcs = running (__inserial)) == 0) {
    1e20:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    1e24:	0e062605 	cfmadd32eq	mvax0, mvfx2, mvfx6, mvfx5
			prcs = runthread (__inserial);
    1e28:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    1e2c:	09052e06 	stmdbeq	r5, {r1, r2, r9, sl, fp, sp}
			if (prcs == 0) {
    1e30:	03052806 	movweq	r2, #22534	; 0x5806
				npwait (st);
    1e34:	2e790306 	cdpcs	3, 7, cr0, cr9, cr6, {0}
		release;
    1e38:	01060605 	tsteq	r6, r5, lsl #12
		join (prcs, st);
    1e3c:	30060405 	andcc	r0, r6, r5, lsl #8
    1e40:	0601053d 			; <UNDEFINED> instruction: 0x0601053d
	va_start (ap, fmt);
    1e44:	06020517 			; <UNDEFINED> instruction: 0x06020517
	prcs = vscan (__inpline, fmt, ap);
    1e48:	022e7703 	eoreq	r7, lr, #786432	; 0xc0000
    1e4c:	01010004 	tsteq	r1, r4
	ufree (__inpline);
    1e50:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
	__inpline = NULL;
    1e54:	00112802 	andseq	r2, r1, r2, lsl #16
}
    1e58:	03990300 	orrseq	r0, r9, #0, 6
    1e5c:	16020501 	strne	r0, [r2], -r1, lsl #10
    1e60:	0e062105 	adfeqs	f2, f6, f5
		return 0;
    1e64:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    1e68:	053e8506 	ldreq	r8, [lr, #-1286]!	; 0xfffffafa
    1e6c:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
int ser_in (word st, char *buf, int len) {
    1e70:	1e052e0b 	cdpne	14, 0, cr2, cr5, cr11, {0}
    1e74:	20130520 	andscs	r0, r3, r0, lsr #10
	if (len == 0)
    1e78:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
	if (__inpline == NULL) {
    1e7c:	59060105 	stmdbpl	r6, {r0, r2, r8}
		if ((prcs = running (__inserial)) == 0) {
    1e80:	01000502 	tsteq	r0, r2, lsl #10
    1e84:	00140501 	andseq	r0, r4, r1, lsl #10
			prcs = runthread (__inserial);
    1e88:	00000205 	andeq	r0, r0, r5, lsl #4
    1e8c:	a7030000 	strge	r0, [r3, -r0]
			if (prcs == 0) {
    1e90:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
				npwait (st);
    1e94:	06010516 			; <UNDEFINED> instruction: 0x06010516
		release;
    1e98:	00040267 	andeq	r0, r4, r7, ror #4
		join (prcs, st);
    1e9c:	18050101 	stmdane	r5, {r0, r8}
    1ea0:	00020500 	andeq	r0, r2, r0, lsl #10
	if (*__inpline == NULL) // bin cmd
    1ea4:	03000000 	movweq	r0, #0
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1ea8:	050103b2 	streq	r0, [r1, #-946]	; 0xfffffc4e
	if (prcs >= len)
    1eac:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
		prcs = len-1;
    1eb0:	200e0618 	andcs	r0, lr, r8, lsl r6
	memcpy (buf, __inpline, prcs);
    1eb4:	06240205 	strteq	r0, [r4], -r5, lsl #4
    1eb8:	0605055a 			; <UNDEFINED> instruction: 0x0605055a
    1ebc:	06030501 	streq	r0, [r3], -r1, lsl #10
	ufree (__inpline);
    1ec0:	06050521 	streq	r0, [r5], -r1, lsr #10
	__inpline = NULL;
    1ec4:	06020501 	streq	r0, [r2], -r1, lsl #10
	if (*buf) // if it's NULL, it's a bin cmd
    1ec8:	06120535 			; <UNDEFINED> instruction: 0x06120535
		buf [prcs] = '\0';
    1ecc:	59010501 	stmdbpl	r1, {r0, r8, sl}
}
    1ed0:	03060305 	movweq	r0, #25349	; 0x6305
		prcs = strlen (__inpline);
    1ed4:	053d207a 	ldreq	r2, [sp, #-122]!	; 0xffffff86
    1ed8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
		return 0;
    1edc:	0b052e17 	bleq	14d740 <__ccfg+0x12d798>
    1ee0:	0008023d 	andeq	r0, r8, sp, lsr r2
    1ee4:	1d050101 	stfnes	f0, [r5, #-4]
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    1ee8:	00020500 	andeq	r0, r2, r0, lsl #10
    1eec:	03000000 	movweq	r0, #0
    1ef0:	05010492 	streq	r0, [r1, #-1170]	; 0xfffffb6e
	RF_cmdFs.frequency = 
    1ef4:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
}
    1ef8:	050e061d 	streq	r0, [lr, #-1565]	; 0xfffff9e3
    1efc:	03052405 	movweq	r2, #21509	; 0x5405
    1f00:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    1f04:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
static int option (int opt, address val) {
    1f08:	01053206 	tsteq	r5, r6, lsl #4
	switch (opt) {
    1f0c:	03051306 	movweq	r1, #21254	; 0x5306
    1f10:	06022b06 	streq	r2, [r2], -r6, lsl #22
    1f14:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1f18:	0205001d 	andeq	r0, r5, #29
    1f1c:	00001160 	andeq	r1, r0, r0, ror #2
    1f20:	01049e03 	tsteq	r4, r3, lsl #28
    1f24:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    1f28:	01060505 	tsteq	r6, r5, lsl #10
    1f2c:	2f060305 	svccs	0x00060305
    1f30:	01060a05 	tsteq	r6, r5, lsl #20
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    1f34:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    1f38:	0601052e 	streq	r0, [r1], -lr, lsr #10
			goto RVal;
    1f3c:	06030525 	streq	r0, [r3], -r5, lsr #10
			_BIS (dstate, DSTATE_RXON);
    1f40:	0606051c 			; <UNDEFINED> instruction: 0x0606051c
    1f44:	06020501 	streq	r0, [r2], -r1, lsl #10
	int ret = 0;
    1f48:	0006023b 	andeq	r0, r6, fp, lsr r2
			p_trigger (drvprcs, qevent);
    1f4c:	1d050101 	stfnes	f0, [r5, #-4]
    1f50:	00020500 	andeq	r0, r2, r0, lsl #10
    1f54:	03000000 	movweq	r0, #0
    1f58:	050104ac 	streq	r0, [r1, #-1196]	; 0xfffffb54
    1f5c:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
    1f60:	061d0513 			; <UNDEFINED> instruction: 0x061d0513
    1f64:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    1f68:	02052504 	andeq	r2, r5, #4, 10	; 0x1000000
    1f6c:	232e0621 			; <UNDEFINED> instruction: 0x232e0621
    1f70:	13060105 	movwne	r0, #24837	; 0x6105
}
    1f74:	1d060305 	stcne	3, cr0, [r6, #-20]	; 0xffffffec
			_BIC (dstate, DSTATE_RXON);
    1f78:	01060605 	tsteq	r6, r5, lsl #12
    1f7c:	051f0205 	ldreq	r0, [pc, #-517]	; 1d7f <cclose+0xf>
			statid = (val == NULL) ? 0 : *val;
    1f80:	04052106 	streq	r2, [r5], #-262	; 0xfffffefa
    1f84:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
	int ret = 0;
    1f88:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
			ret = (int) statid;
    1f8c:	04023a06 	streq	r3, [r2], #-2566	; 0xfffff5fa
	if (val != NULL)
    1f90:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		*val = ret;
    1f94:	02050021 	andeq	r0, r5, #33	; 0x21
			ret = rbuffl + 2;
    1f98:	00001184 	andeq	r1, r0, r4, lsl #3
    1f9c:	0104b803 	tsteq	r4, r3, lsl #16
			if (val != NULL) {
    1fa0:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
				memcpy (val, &rxstat,
    1fa4:	0e062105 	adfeqs	f2, f6, f5
    1fa8:	05240905 	streq	r0, [r4, #-2309]!	; 0xfffff6fb
				memset (&rxstat, 0, 
    1fac:	0520060e 	streq	r0, [r0, #-1550]!	; 0xfffff9f2
    1fb0:	06010602 	streq	r0, [r1], -r2, lsl #12
			if (val == NULL)
    1fb4:	06010530 			; <UNDEFINED> instruction: 0x06010530
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    1fb8:	06220513 			; <UNDEFINED> instruction: 0x06220513
    1fbc:	011e051d 	tsteq	lr, sp, lsl r5
				utimer_set (bckf_timer, *val);
    1fc0:	01061f05 	tsteq	r6, r5, lsl #30
    1fc4:	01000202 	tsteq	r0, r2, lsl #4
    1fc8:	002b0501 	eoreq	r0, fp, r1, lsl #10
			for (ret = 0; ret < 8; ret++)
    1fcc:	11920205 	orrsne	r0, r2, r5, lsl #4
				if (RF_cmdPropRadioDivSetup.txPower
    1fd0:	c1030000 	mrsgt	r0, (UNDEF: 3)
					== patable [ret])
    1fd4:	02050104 	andeq	r0, r5, #4, 2
				if (RF_cmdPropRadioDivSetup.txPower
    1fd8:	20200514 	eorcs	r0, r0, r4, lsl r5
			for (ret = 0; ret < 8; ret++)
    1fdc:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    1fe0:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    1fe4:	08052e18 	stmdaeq	r5, {r3, r4, r9, sl, fp, sp}
    1fe8:	2f01052e 	svccs	0x0001052e
    1fec:	01000102 	tsteq	r0, r2, lsl #2
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    1ff0:	00330501 	eorseq	r0, r3, r1, lsl #10
    1ff4:	00000205 	andeq	r0, r0, r5, lsl #4
			_BIS (dstate, DSTATE_IRST);
    1ff8:	c6030000 	strgt	r0, [r3], -r0
    1ffc:	02050104 	andeq	r0, r5, #4, 2
    2000:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
			ret = (int) channel;
    2004:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
			goto RVal;
    2008:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
				(*val > 7) ? 7 : *val;
    200c:	11052f01 	tstne	r5, r1, lsl #30
    2010:	2e0d051d 	mcrcs	5, 0, r0, cr13, cr13, {0}
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2014:	2f060305 	svccs	0x00060305
    2018:	01060805 	tsteq	r6, r5, lsl #16
			plugch ();
    201c:	01000302 	tsteq	r0, r2, lsl #6
			_BIS (dstate, DSTATE_IRST);
    2020:	002b0501 	eoreq	r0, fp, r1, lsl #10
    2024:	00000205 	andeq	r0, r0, r5, lsl #4
			ret = (int) vrate;
    2028:	cd030000 	stcgt	0, cr0, [r3, #-0]
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    202c:	02050104 	andeq	r0, r5, #4, 2
    2030:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
    2034:	024b0205 	subeq	r0, fp, #1342177280	; 0x50000000
    2038:	01010002 	tsteq	r1, r2
    203c:	05003305 	streq	r3, [r0, #-773]	; 0xfffffcfb
    2040:	00000002 	andeq	r0, r0, r2
    2044:	04d30300 	ldrbeq	r0, [r3], #768	; 0x300
    2048:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    204c:	01000302 	tsteq	r0, r2, lsl #6
    2050:	00370501 	eorseq	r0, r7, r1, lsl #10
    2054:	11a20205 			; <UNDEFINED> instruction: 0x11a20205
    2058:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
			syserror (EREQPAR, "cc13 op");
    205c:	02050104 	andeq	r0, r5, #4, 2
    2060:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
    2064:	30060105 	andcc	r0, r6, r5, lsl #2
    2068:	1f060305 	svcne	0x00060305
    206c:	01060d05 	tsteq	r6, r5, lsl #26
    2070:	022e0b05 	eoreq	r0, lr, #5120	; 0x1400
    2074:	01010003 	tsteq	r1, r3
    2078:	05002e05 	streq	r2, [r0, #-3589]	; 0xfffff1fb
    207c:	0011b602 	andseq	fp, r1, r2, lsl #12
    2080:	04de0300 	ldrbeq	r0, [lr], #768	; 0x300
    2084:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2088:	13060b05 	movwne	r0, #27397	; 0x6b05
    208c:	01000202 	tsteq	r0, r2, lsl #4
    2090:	002b0501 	eoreq	r0, fp, r1, lsl #10
    2094:	11bc0205 			; <UNDEFINED> instruction: 0x11bc0205
static void issue_cmd (lword cmd) {
    2098:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
    209c:	02050104 	andeq	r0, r5, #4, 2
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20a0:	062b0514 			; <UNDEFINED> instruction: 0x062b0514
    20a4:	22050510 	andcs	r0, r5, #16, 10	; 0x4000000
    20a8:	21060305 	tstcs	r6, r5, lsl #6
		if (res != 0x86)
    20ac:	02053106 	andeq	r3, r5, #-2147483647	; 0x80000001
			syserror (EHARDWARE, "hang ic0");
    20b0:	0c052d06 	stceq	13, cr2, [r5], {6}
    20b4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
		if (cnt-- == 0) {
    20b8:	06030520 	streq	r0, [r3], -r0, lsr #10
			diag ("HUP %lx %lx", cmd, res);
    20bc:	3e02052f 	cfsh32cc	mvfx0, mvfx2, #31
    20c0:	01060e05 	tsteq	r6, r5, lsl #28
			syserror (EHARDWARE, "hang ic0");
    20c4:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
		udelay (1);
    20c8:	01010005 	tsteq	r1, r5
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20cc:	05004505 	streq	r4, [r0, #-1285]	; 0xfffffafb
}
    20d0:	0011e002 	andseq	lr, r1, r2
    20d4:	04f80300 	ldrbteq	r0, [r8], #768	; 0x300
    20d8:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    20dc:	06450514 			; <UNDEFINED> instruction: 0x06450514
static void rx_de () {
    20e0:	05052e0e 	streq	r2, [r5, #-3598]	; 0xfffff1f2
	if ((dstate & DSTATE_RXAC) == 0)
    20e4:	2022055c 	eorcs	r0, r2, ip, asr r5
    20e8:	054a1905 	strbeq	r1, [sl, #-2309]	; 0xfffff6fb
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    20ec:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
	_BIC (dstate, DSTATE_RXAC);
    20f0:	05054c02 	streq	r4, [r5, #-3074]	; 0xfffff3fe
    20f4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
}
    20f8:	0f054006 	svceq	0x00054006
    20fc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2100:	05054c06 	streq	r4, [r5, #-3078]	; 0xfffff3fa
static void rf_off () {
    2104:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
	if ((dstate & DSTATE_RFON) == 0)
    2108:	05053106 	streq	r3, [r5, #-262]	; 0xfffffefa
    210c:	03050106 	movweq	r0, #20742	; 0x5106
	IntDisable (INT_RFC_CPE_0);
    2110:	06054f06 	streq	r4, [r5], -r6, lsl #30
    2114:	03050106 	movweq	r0, #20742	; 0x5106
    2118:	05593006 	ldrbeq	r3, [r9, #-6]
    211c:	010d0304 	tsteq	sp, r4, lsl #6
	RFCAdi3VcoLdoVoltageMode (false);
    2120:	76030205 	strvc	r0, [r3], -r5, lsl #4
	RFCSynthPowerDown ();
    2124:	0605052e 	streq	r0, [r5], -lr, lsr #10
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2128:	06030501 	streq	r0, [r3], -r1, lsl #10
    212c:	06060535 			; <UNDEFINED> instruction: 0x06060535
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2130:	220b0501 	andcs	r0, fp, #4194304	; 0x400000
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2134:	052c0605 	streq	r0, [ip, #-1541]!	; 0xfffff9fb
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2138:	59210604 	stmdbpl	r1!, {r2, r9, sl}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    213c:	01060b05 	tsteq	r6, r5, lsl #22
    2140:	69060305 	stmdbvs	r6, {r0, r2, r8, r9}
    2144:	01060a05 	tsteq	r6, r5, lsl #20
    2148:	59060305 	stmdbpl	r6, {r0, r2, r8, r9}
	_BIC (dstate, DSTATE_RFON);
    214c:	03060a05 	movweq	r0, #27141	; 0x6a05
    2150:	01050161 	tsteq	r5, r1, ror #2
}
    2154:	05202903 	streq	r2, [r0, #-2307]!	; 0xfffff6fd
    2158:	7a030602 	bvc	c3968 <__ccfg+0xa39c0>
    215c:	0605052e 	streq	r0, [r5], -lr, lsr #10
    2160:	06030501 	streq	r0, [r3], -r1, lsl #10
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2164:	0502752f 	streq	r7, [r2, #-1327]	; 0xfffffad1
    2168:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    216c:	0205001a 	andeq	r0, r5, #26
		if (cmd->status == tstat)
    2170:	0000127c 	andeq	r1, r0, ip, ror r2
		if (timeout-- == 0) {
    2174:	0105ef03 	tsteq	r5, r3, lsl #30
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2178:	03170205 	tsteq	r7, #1342177280	; 0x50000000
    217c:	15050113 	strne	r0, [r5, #-275]	; 0xfffffeed
    2180:	1a050106 	bne	1425a0 <__ccfg+0x1225f8>
			syserror (EHARDWARE, "rt2");
    2184:	05206803 	streq	r6, [r0, #-2051]!	; 0xfffff7fd
    2188:	20180315 	andscs	r0, r8, r5, lsl r3
		udelay (1);
    218c:	05580c05 	ldrbeq	r0, [r8, #-3077]	; 0xfffff3fb
		if (cmd->status == tstat)
    2190:	03052005 	movweq	r2, #20485	; 0x5005
}
    2194:	02053106 	andeq	r3, r5, #-2147483647	; 0x80000001
    2198:	060d0552 			; <UNDEFINED> instruction: 0x060d0552
static void rf_on () {
    219c:	06020501 	streq	r0, [r2], -r1, lsl #10
	if (dstate & DSTATE_RFON)
    21a0:	0617053e 			; <UNDEFINED> instruction: 0x0617053e
    21a4:	2b1d0515 	blcs	743600 <__ccfg+0x723658>
    21a8:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    21ac:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    21b0:	05140617 	ldreq	r0, [r4, #-1559]	; 0xfffff9e9
    21b4:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    21b8:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
	OSCHF_TurnOnXosc();
    21bc:	01052e0d 	tsteq	r5, sp, lsl #28
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    21c0:	022e2c03 	eoreq	r2, lr, #768	; 0x300
    21c4:	0101000d 	tsteq	r1, sp
    21c8:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21cc:	0012cc02 	andseq	ip, r2, r2, lsl #24
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21d0:	06fb0300 	ldrbteq	r0, [fp], r0, lsl #6
    21d4:	03020501 	movweq	r0, #9473	; 0x2501
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    21d8:	1c05010c 	stfnes	f0, [r5], {12}
    21dc:	01740306 	cmneq	r4, r6, lsl #6
    21e0:	0c030505 	cfstr32eq	mvfx0, [r3], {5}
	issue_cmd (
    21e4:	06020520 	streq	r0, [r2], -r0, lsr #10
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    21e8:	06070525 	streq	r0, [r7], -r5, lsr #10
    21ec:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    21f0:	2f060305 	svccs	0x00060305
   pPatchTab[80] = 0;
    21f4:	0611054c 	ldreq	r0, [r1], -ip, asr #10
    21f8:	1c0f0516 	cfstr32ne	mvfx0, [pc], {22}
   pPatchTab[53] = 2;
    21fc:	05321105 	ldreq	r1, [r2, #-261]!	; 0xfffffefb
    2200:	02051c0f 	andeq	r1, r5, #3840	; 0xf00
   pPatchTab[55] = 3;
    2204:	11053206 	tstne	r5, r6, lsl #4
   pPatchTab[110] = 4;
    2208:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    220c:	05303006 	ldreq	r3, [r0, #-6]!
   pPatchTab[107] = 5;
    2210:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
   pPatchTab[65] = 6;
    2214:	03052005 	movweq	r2, #20485	; 0x5005
   pPatchTab[57] = 1;
    2218:	052f2f06 	streq	r2, [pc, #-3846]!	; 131a <kill+0x6>
   pPatchTab[65] = 6;
    221c:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
   pIrqPatch[1] = _IRQ_PATCH_0;
    2220:	08024201 	stmdaeq	r2, {r0, r9, lr}
    2224:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
   const uint32_t *pS = patchGenfskRfe;
    2228:	02050017 	andeq	r0, r5, #23
   volatile unsigned long *pD = &HWREG(RFC_RFERAM_BASE);
    222c:	00001314 	andeq	r1, r0, r4, lsl r3
      t2 = *pS++;
    2230:	0103d803 	tsteq	r3, r3, lsl #16
      t4 = *pS++;
    2234:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
      t6 = *pS++;
    2238:	03061705 	movweq	r1, #26373	; 0x6705
      t8 = *pS++;
    223c:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
      *pD++ = t1;
    2240:	06030526 	streq	r0, [r3], -r6, lsr #10
      *pD++ = t2;
    2244:	06090521 	streq	r0, [r9], -r1, lsr #10
      *pD++ = t3;
    2248:	20070501 	andcs	r0, r7, r1, lsl #10
      *pD++ = t4;
    224c:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
      *pD++ = t6;
    2250:	06040513 			; <UNDEFINED> instruction: 0x06040513
      *pD++ = t7;
    2254:	21020511 	tstcs	r2, r1, lsl r5
   } while (--nIterations);
    2258:	0f032e06 	svceq	0x00032e06
      *pD++ = t8;
    225c:	03030520 	movweq	r0, #13600	; 0x3520
    2260:	06054a72 			; <UNDEFINED> instruction: 0x06054a72
   *pD++ = t1;
    2264:	0e050106 	adfeqs	f0, f5, f6
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2268:	1d060523 	cfstr32ne	mvfx0, [r6, #-140]	; 0xffffff74
    226c:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
   *pD++ = t2;
    2270:	01060705 	tsteq	r6, r5, lsl #14
   *pD++ = t3;
    2274:	21060505 	tstcs	r6, r5, lsl #10
    2278:	01060b05 	tsteq	r6, r5, lsl #22
   *pD++ = t4;
    227c:	23060405 	movwcs	r0, #25605	; 0x6405
   *pD++ = t5;
    2280:	0a052f3d 	beq	14df7c <__ccfg+0x12dfd4>
    2284:	07050106 	streq	r0, [r5, -r6, lsl #2]
    2288:	06050520 	streq	r0, [r5], -r0, lsr #10
	RFCAdi3VcoLdoVoltageMode (true);
    228c:	0d052a3d 	vstreq	s4, [r5, #-244]	; 0xffffff0c
       	RFCRfTrimSet (&rfTrim);
    2290:	0e050106 	adfeqs	f0, f5, f6
    2294:	0301053a 	movweq	r0, #5434	; 0x153a
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2298:	07022e0c 	streq	r2, [r2, -ip, lsl #28]
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    229c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    22a0:	0205001c 	andeq	r0, r5, #28
    22a4:	00000000 	andeq	r0, r0, r0
	issue_cmd ((lword)&cmd_srt);
    22a8:	0103f403 	tsteq	r3, r3, lsl #8	; <UNPREDICTABLE>
	issue_cmd ((lword)&RF_cmdFs);
    22ac:	13160205 	tstne	r6, #1342177280	; 0x50000000
    22b0:	05131314 	ldreq	r1, [r3, #-788]	; 0xfffffcec
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    22b4:	7703061c 	smladvc	r3, ip, r6, r0
    22b8:	36040501 	strcc	r0, [r4], -r1, lsl #10
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22bc:	051f0605 	ldreq	r0, [pc, #-1541]	; 1cbf <cmd_0+0x7>
	IntEnable (INT_RFC_CPE_0);
    22c0:	1c052209 	sfmne	f2, 4, [r5], {9}
	_BIC (dstate, DSTATE_IRST);
    22c4:	052e7703 	streq	r7, [lr, #-1795]!	; 0xfffff8fd
    22c8:	2010030a 	andscs	r0, r0, sl, lsl #6
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22cc:	79030905 	stmdbvc	r3, {r0, r2, r8, fp}
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22d0:	0612052e 	ldreq	r0, [r2], -lr, lsr #10
	IntEnable (INT_RFC_CPE_0);
    22d4:	0602052e 	streq	r0, [r2], -lr, lsr #10
}
    22d8:	11030601 	tstne	r3, r1, lsl #12
	IntEnable (INT_RFC_CPE_0);
    22dc:	06050520 	streq	r0, [r5], -r0, lsr #10
    22e0:	06030501 	streq	r0, [r3], -r1, lsl #10
}
    22e4:	2e6f0321 	cdpcs	3, 6, cr0, cr15, cr1, {1}
    22e8:	01060605 	tsteq	r6, r5, lsl #12
    22ec:	04051f21 	streq	r1, [r5], #-3873	; 0xfffff0df
    22f0:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
    22f4:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    22f8:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    22fc:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    2300:	05310604 	ldreq	r0, [r1, #-1540]!	; 0xfffff9fc
    2304:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    2308:	04052f09 	streq	r2, [r5], #-3849	; 0xfffff0f7
    230c:	2f2f3d06 	svccs	0x002f3d06
    2310:	05450505 	strbeq	r0, [r5, #-1285]	; 0xfffffafb
    2314:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    2318:	2e0d0301 	cdpcs	3, 0, cr0, cr13, cr1, {0}
    231c:	01000702 	tsteq	r0, r2, lsl #14
    2320:	00200501 	eoreq	r0, r0, r1, lsl #10
    2324:	13640205 	cmnne	r4, #1342177280	; 0x50000000
    2328:	a2030000 	andge	r0, r3, #0
    232c:	02050107 	andeq	r0, r5, #-1073741823	; 0xc0000001
    2330:	0514161a 	ldreq	r1, [r4, #-1562]	; 0xfffff9e6
    2334:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2338:	05250603 	streq	r0, [r5, #-1539]!	; 0xfffff9fd
    233c:	050f0609 	streq	r0, [pc, #-1545]	; 1d3b <ready+0xf>
    2340:	2e700320 	cdpcs	3, 7, cr0, cr0, cr0, {1}
static void rx_int_enable () {
    2344:	23030d05 	movwcs	r0, #15621	; 0x3d05
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2348:	031a0520 	tsteq	sl, #32, 10	; 0x8000000
    234c:	0d052070 	stceq	0, cr2, [r5, #-448]	; 0xfffffe40
    2350:	052e1003 	streq	r1, [lr, #-3]!
    2354:	09052306 	stmdbeq	r5, {r1, r2, r8, r9, sp}
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2358:	05206d03 	streq	r6, [r0, #-3331]!	; 0xfffff2fd
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    235c:	0f030602 	svceq	0x00030602
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2360:	1f05132e 	svcne	0x0005132e
				diag ("BAD RX");
    2364:	06020501 	streq	r0, [r2], -r1, lsl #10
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2368:	09030601 	stmdbeq	r3, {r0, r9, sl}
    236c:	03030520 	movweq	r0, #13600	; 0x3520
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2370:	16050119 			; <UNDEFINED> instruction: 0x16050119
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2374:	06050106 	streq	r0, [r5], -r6, lsl #2
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2378:	0604052e 	streq	r0, [r4], -lr, lsr #10
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    237c:	061b052f 	ldreq	r0, [fp], -pc, lsr #10
		if (db->status == DATA_ENTRY_FINISHED) {
    2380:	06030501 	streq	r0, [r3], -r1, lsl #10
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2384:	052e0d03 	streq	r0, [lr, #-3331]!	; 0xfffff2fd
    2388:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
			nr++;
    238c:	05400602 	strbeq	r0, [r0, #-1538]	; 0xfffff9fe
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2390:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2394:	4f030603 	svcmi	0x00030603
    2398:	06060520 	streq	r0, [r6], -r0, lsr #10
    239c:	06040501 	streq	r0, [r4], -r1, lsl #10
				__dp [pl + 1] = __dp [pl] - 128;
    23a0:	4c03053d 	cfstr32mi	mvfx0, [r3], {61}	; 0x3d
				pl = __dp [1] + 2;
    23a4:	01060605 	tsteq	r6, r5, lsl #12
				__dp [pl + 1] = __dp [pl] - 128;
    23a8:	03062e05 	movweq	r2, #28165	; 0x6e05
    23ac:	09054a7a 	stmdbeq	r5, {r1, r3, r4, r5, r6, r9, fp, lr}
				__dp [pl] = 0;
    23b0:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    23b4:	03054406 	movweq	r4, #21510	; 0x5406
    23b8:	0e052214 	mcreq	2, 0, r2, cr5, cr4, {0}
    23bc:	06050106 	streq	r0, [r5], -r6, lsl #2
			db->status = DATA_ENTRY_PENDING;
    23c0:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    23c4:	06130530 			; <UNDEFINED> instruction: 0x06130530
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    23c8:	06040501 	streq	r0, [r4], -r1, lsl #10
				diag ("BAD RX");
    23cc:	0617052f 	ldreq	r0, [r7], -pc, lsr #10
    23d0:	20070501 	andcs	r0, r7, r1, lsl #10
	if (nr) {
    23d4:	2f060405 	svccs	0x00060405
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23d8:	01061805 	tsteq	r6, r5, lsl #16
}
    23dc:	05201005 	streq	r1, [r0, #-5]!
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23e0:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    23e4:	03052e09 	movweq	r2, #24073	; 0x5e09
    23e8:	061a0515 			; <UNDEFINED> instruction: 0x061a0515
}
    23ec:	30120501 	andscc	r0, r2, r1, lsl #10
    23f0:	051e1a05 	ldreq	r1, [lr, #-2565]	; 0xfffff5fb
    23f4:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    23f8:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    23fc:	03052e12 	movweq	r2, #24082	; 0x5e12
    2400:	0e053d06 	cdpeq	13, 0, cr3, cr5, cr6, {0}
    2404:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
thread (cc1350_driver)
    2408:	29060525 	stmdbcs	r6, {r0, r2, r5, r8, sl}
    240c:	05251205 	streq	r1, [r5, #-517]!	; 0xfffffdfb
    2410:	04052906 	streq	r2, [r5], #-2310	; 0xfffff6fa
    2414:	13052206 	movwne	r2, #20998	; 0x5206
    2418:	03050106 	movweq	r0, #20742	; 0x5106
		if (dstate & DSTATE_IRST) {
    241c:	01053106 	tsteq	r5, r6, lsl #2
    2420:	011b0306 	tsteq	fp, r6, lsl #6
    2424:	01000e02 	tsteq	r0, r2, lsl #28
			rf_off ();
    2428:	002c0501 	eoreq	r0, ip, r1, lsl #10
			_BIC (dstate,
    242c:	140c0205 	strne	r0, [ip], #-517	; 0xfffffdfb
    2430:	ab030000 	blge	c2438 <__ccfg+0xa2490>
		if (dstate & DSTATE_RXAC) {
    2434:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    2438:	2c051414 	cfstrscs	mvf1, [r5], {20}
			if ((dstate & DSTATE_RXON) == 0)
    243c:	05200e06 	streq	r0, [r0, #-3590]!	; 0xfffff1fa
				rx_de ();
    2440:	2c052419 	cfstrscs	mvf2, [r5], {25}
		if (paylen == 0) {
    2444:	2419051c 	ldrcs	r0, [r9], #-1308	; 0xfffffae4
    2448:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    244c:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    2450:	0b03060a 	bleq	c3c80 <__ccfg+0xa3cd8>
    2454:	030c0501 	movweq	r0, #50433	; 0xc501
    2458:	0a052077 	beq	14a63c <__ccfg+0x12a694>
				paylen -= 2;
    245c:	76032326 	strvc	r2, [r3], -r6, lsr #6
    2460:	06020520 	streq	r0, [r2], -r0, lsr #10
    2464:	0305182f 	movweq	r1, #22575	; 0x582f
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2468:	06051314 			; <UNDEFINED> instruction: 0x06051314
    246c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    2470:	0a052106 	beq	14a890 <__ccfg+0x12a8e8>
    2474:	01050106 	tsteq	r5, r6, lsl #2
		} else if (dstate & DSTATE_RXON) {
    2478:	05200f03 	streq	r0, [r0, #-3843]!	; 0xfffff0fd
			rf_on ();
    247c:	7303060b 	movwvc	r0, #13835	; 0x360b
	if (dstate & DSTATE_RXAC)
    2480:	060c0520 	streq	r0, [ip], -r0, lsr #10
    2484:	20040520 	andcs	r0, r4, r0, lsr #10
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2488:	0c052f06 	stceq	15, cr2, [r5], {6}
    248c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2490:	200b0306 	andcs	r0, fp, r6, lsl #6
	issue_cmd ((lword)&RF_cmdPropRx);
    2494:	01060905 	tsteq	r6, r5, lsl #18
	_BIS (dstate, DSTATE_RXAC);
    2498:	01000402 	tsteq	r0, r2, lsl #8
    249c:	00200501 	eoreq	r0, r0, r1, lsl #10
    24a0:	14400205 	strbne	r0, [r0], #-517	; 0xfffffdfb
				if (statid != 0xffff)
    24a4:	81030000 	mrshi	r0, (UNDEF: 3)
    24a8:	02050108 	andeq	r0, r5, #8, 2
					((address)(RF_cmdPropTx.pPkt)) [0] =
    24ac:	05010903 	streq	r0, [r1, #-2307]	; 0xfffff6fd
				RF_cmdPropTx.pktLen = (byte) paylen;
    24b0:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
		if (paylen == 0) {
    24b4:	20770320 	rsbscs	r0, r7, r0, lsr #6
			wait (qevent, DR_LOOP);
    24b8:	09031505 	stmdbeq	r3, {r0, r2, r8, sl, ip}
    24bc:	23020520 	movwcs	r0, #9504	; 0x2520
			if (dstate & DSTATE_RXAC) {
    24c0:	051d0505 	ldreq	r0, [sp, #-1285]	; 0xfffffafb
    24c4:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
				rx_int_enable ();
    24c8:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
			release;
    24cc:	023e0602 	eorseq	r0, lr, #2097152	; 0x200000
			} else if (dstate & DSTATE_RFON) {
    24d0:	01010004 	tsteq	r1, r4
				delay (offdelay, DR_GOOF);
    24d4:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
    24d8:	00000002 	andeq	r0, r0, r2
    24dc:	08940300 	ldmeq	r4, {r8, r9}
		if (bckf_timer) {
    24e0:	03020501 	movweq	r0, #9473	; 0x2501
			wait (qevent, DR_LOOP);
    24e4:	21050109 	tstcs	r5, r9, lsl #2
    24e8:	01770306 	cmneq	r7, r6, lsl #6
    24ec:	0c031b05 			; <UNDEFINED> instruction: 0x0c031b05
			delay (bckf_timer, DR_LOOP);
    24f0:	2b050520 	blcs	143978 <__ccfg+0x1239d0>
    24f4:	21060305 	tstcs	r6, r5, lsl #6
			if (dstate & DSTATE_RXAC)
    24f8:	01060805 	tsteq	r6, r5, lsl #16
    24fc:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
		rf_on ();
    2500:	12052008 	andne	r2, r5, #8
		rx_de ();
    2504:	1e080522 	cfsh32ne	mvfx0, mvfx8, #18
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2508:	4c060305 	stcmi	3, cr0, [r6], {5}
		RF_cmdPropTx . status = 0;
    250c:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2510:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
		issue_cmd ((lword)&cmd_cs);
    2514:	06025a01 	streq	r5, [r2], -r1, lsl #20
		if (dstate & DSTATE_IRST)
    2518:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    251c:	02050020 	andeq	r0, r5, #32
    2520:	00000000 	andeq	r0, r0, r0
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2524:	0108a703 	tsteq	r8, r3, lsl #14
    2528:	09030205 	stmdbeq	r3, {r0, r2, r9}
			delay (1, DR_XMIT);
    252c:	05141301 	ldreq	r1, [r4, #-769]	; 0xfffffcff
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2530:	74030620 	strvc	r0, [r3], #-1568	; 0xfffff9e0
    2534:	031d0501 	tsteq	sp, #4194304	; 0x400000
    2538:	1205200c 	andne	r2, r5, #12
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    253c:	200b052e 	andcs	r0, fp, lr, lsr #10
    2540:	20062f05 	andcs	r2, r6, r5, lsl #30
				RF_cmdPropTx . status = 0;
    2544:	01060205 	tsteq	r6, r5, lsl #4
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2548:	05052406 	streq	r2, [r5, #-1030]	; 0xfffffbfa
				issue_cmd ((lword)&RF_cmdPropTx);
    254c:	03052e06 	movweq	r2, #24070	; 0x5e06
				proceed (DR_XMIT);
    2550:	07052106 	streq	r2, [r5, -r6, lsl #2]
    2554:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
			txtries++;
    2558:	09054c06 	stmdbeq	r5, {r1, r2, sl, fp, lr}
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    255c:	01050106 	tsteq	r5, r6, lsl #2
    2560:	0603053e 			; <UNDEFINED> instruction: 0x0603053e
    2564:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2568:	052d0623 	streq	r0, [sp, #-1571]!	; 0xfffff9dd
		goto DR_LOOP__;
    256c:	054a0606 	strbeq	r0, [sl, #-1542]	; 0xfffff9fa
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2570:	0201060e 	andeq	r0, r1, #14680064	; 0xe00000
		paylen = 0;
    2574:	01010004 	tsteq	r1, r4
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2578:	05002305 	streq	r2, [r0, #-773]	; 0xfffffcfb
		txtries = 0;
    257c:	00145802 	andseq	r5, r4, r2, lsl #16
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2580:	09810300 	stmibeq	r1, {r8, r9}
    2584:	41020501 	tstmi	r2, r1, lsl #10
    2588:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    258c:	06230514 			; <UNDEFINED> instruction: 0x06230514
    2590:	05017503 	streq	r7, [r1, #-1283]	; 0xfffffafd
		    tcvphy_top (physid) == NULL)
    2594:	3c0c0302 	stccc	3, cr0, [ip], {2}
    2598:	0121061f 			; <UNDEFINED> instruction: 0x0121061f
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    259c:	06080501 	streq	r0, [r8], -r1, lsl #10
    25a0:	054a2803 	strbeq	r2, [sl, #-2051]	; 0xfffff7fd
			rf_off ();
    25a4:	20580302 	subscs	r0, r8, r2, lsl #6
endthread
    25a8:	05142e06 	ldreq	r2, [r4, #-3590]	; 0xfffff1fa
    25ac:	2103061c 	tstcs	r3, ip, lsl r6
    25b0:	06080501 	streq	r0, [r8], -r1, lsl #10
    25b4:	052e5f03 	streq	r5, [lr, #-3843]!	; 0xfffff0fd
    25b8:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    25bc:	02052008 	andeq	r2, r5, #8
    25c0:	00c70306 	sbceq	r0, r7, r6, lsl #6
    25c4:	043d3d20 	ldrteq	r3, [sp], #-3360	; 0xfffff2e0
    25c8:	060d0502 	streq	r0, [sp], -r2, lsl #10
    25cc:	017bcf03 	cmneq	fp, r3, lsl #30
    25d0:	0f050104 	svceq	0x00050104
    25d4:	04b10306 	ldrteq	r0, [r1], #774	; 0x306
    25d8:	01020520 	tsteq	r2, r0, lsr #10
    25dc:	24050204 	strcs	r0, [r5], #-516	; 0xfffffdfc
    25e0:	017bca03 	cmneq	fp, r3, lsl #20
    25e4:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
void RFCCPE0IntHandler (void) {
    25e8:	0401060d 	streq	r0, [r1], #-1549	; 0xfffff9f3
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    25ec:	03020501 	movweq	r0, #9473	; 0x2501
		_BIS (dstate, DSTATE_IRST);
    25f0:	062004b1 			; <UNDEFINED> instruction: 0x062004b1
    25f4:	7401012f 	strvc	r0, [r1], #-303	; 0xfffffed1
    25f8:	13060105 	movwne	r0, #24837	; 0x6105
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    25fc:	03060305 	movweq	r0, #25349	; 0x6305
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2600:	05587fb6 	ldrbeq	r7, [r8, #-4022]	; 0xfffff04a
    2604:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2608:	06052108 	streq	r2, [r5], -r8, lsl #2
	p_trigger (drvprcs, qevent);
    260c:	0604052d 	streq	r0, [r4], -sp, lsr #10
    2610:	07051321 	streq	r1, [r5, -r1, lsr #6]
    2614:	09050106 	stmdbeq	r5, {r1, r2, r8}
    2618:	4808053f 	stmdami	r8, {r0, r1, r2, r3, r4, r5, r8, sl}
    261c:	052f0905 	streq	r0, [pc, #-2309]!	; 1d1f <wwait+0x4b>
    2620:	0805280c 	stmdaeq	r5, {r2, r3, fp, sp}
    2624:	3304051b 	movwcc	r0, #17691	; 0x451b
    2628:	78030905 	stmdavc	r3, {r0, r2, r8, fp}
    262c:	06050520 	streq	r0, [r5], -r0, lsr #10
    2630:	1413131f 	ldrne	r1, [r3], #-799	; 0xfffffce1
	RISE_N_SHINE;
    2634:	14040515 	strne	r0, [r4], #-1301	; 0xfffffaeb
    2638:	31030505 	tstcc	r3, r5, lsl #10
}
    263c:	04053d66 	streq	r3, [r5], #-3430	; 0xfffff29a
    2640:	4a4e0306 	bmi	1383260 <__ccfg+0x13632b8>
    2644:	05411d05 	strbeq	r1, [r1, #-3333]	; 0xfffff2fb
    2648:	052d0606 	streq	r0, [sp, #-1542]!	; 0xfffff9fa
    264c:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    2650:	14210606 	strtne	r0, [r1], #-1542	; 0xfffff9fa
void phys_cc1350 (int phy, int mbs) {
    2654:	11060b05 	tstne	r6, r5, lsl #22
	if (rbuffl != 0)
    2658:	053c1805 	ldreq	r1, [ip, #-2053]!	; 0xfffff7fb
    265c:	0b052f06 	bleq	14e27c <__ccfg+0x12e2d4>
		syserror (ETOOMANY, "cc13");
    2660:	04054606 	streq	r4, [r5], #-1542	; 0xfffff9fa
		syserror (EREQPAR, "cc13 mb");
    2664:	052e3103 	streq	r3, [lr, #-259]!	; 0xfffffefd
	if (mbs == 0)
    2668:	03010608 	movweq	r0, #5640	; 0x1608
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    266c:	0505206a 	streq	r2, [r5, #-106]	; 0xffffff96
		syserror (EREQPAR, "cc13 mb");
    2670:	2e6e0306 	cdpcs	3, 6, cr0, cr14, cr6, {0}
    2674:	06150513 			; <UNDEFINED> instruction: 0x06150513
	i = 0;
    2678:	200e0501 	andcs	r0, lr, r1, lsl #10
	rbuffl = (byte) mbs;
    267c:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
		db->config.type = 0;	// General (data in structure)
    2680:	3d2f0606 	stccc	6, cr0, [pc, #-24]!	; 2670 <phys_cc1350+0x1c>
	rbuffl = (byte) mbs;
    2684:	01060905 	tsteq	r6, r5, lsl #18
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2688:	21060705 	tstcs	r6, r5, lsl #14
    268c:	01060b05 	tsteq	r6, r5, lsl #22
		if (db == NULL)
    2690:	59060605 	stmdbpl	r6, {r0, r2, r9, sl}
			syserror (EMALLOC, "cc13");
    2694:	01060a05 	tsteq	r6, r5, lsl #20
    2698:	23060505 	movwcs	r0, #25861	; 0x6505
    269c:	01061c05 	tsteq	r6, r5, lsl #24
		db->status = DATA_ENTRY_PENDING;
    26a0:	59060505 	stmdbpl	r6, {r0, r2, r8, sl}
		if (i)
    26a4:	05140605 	ldreq	r0, [r4, #-1541]	; 0xfffff9fb
			da->pNextEntry = (byte*) db;
    26a8:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
		db->length = rbuffl + 2;
    26ac:	06052e08 	streq	r2, [r5], -r8, lsl #28
    26b0:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
		db->config.type = 0;	// General (data in structure)
    26b4:	0c050106 	stfeqs	f0, [r5], {6}
		db->length = rbuffl + 2;
    26b8:	06060520 	streq	r0, [r6], -r0, lsr #10
	db->pNextEntry = (byte*) re;
    26bc:	0608052f 	streq	r0, [r8], -pc, lsr #10
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    26c0:	060b0501 	streq	r0, [fp], -r1, lsl #10
    26c4:	0608052a 	streq	r0, [r8], -sl, lsr #10
	if (rbuffs == NULL)
    26c8:	1d1c0514 	cfldr32ne	mvfx0, [ip, #-80]	; 0xffffffb0
	rbuffs->pCurrEntry = (byte*) re;
    26cc:	35060505 	strcc	r0, [r6, #-1285]	; 0xfffffafb
	rbuffs->pLastEntry = NULL;
    26d0:	59130605 	ldmdbpl	r3, {r0, r2, r9, sl}
    26d4:	14060905 	strne	r0, [r6], #-2309	; 0xfffff6fb
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26d8:	051f0805 	ldreq	r0, [pc, #-2053]	; 1edb <ser_in+0x6b>
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    26dc:	06052d0a 	streq	r2, [r5], -sl, lsl #26
    26e0:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
    26e4:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
	rbuffl -= 2;
    26e8:	05210606 	streq	r0, [r1, #-1542]!	; 0xfffff9fa
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26ec:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
	rbuffl -= 2;
    26f0:	05222c08 	streq	r2, [r2, #-3080]!	; 0xfffff3f8
	physid = phy;
    26f4:	051b060b 	ldreq	r0, [fp, #-1547]	; 0xfffff9f5
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26f8:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26fc:	09030605 	stmdbeq	r3, {r0, r2, r9, sl}
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2700:	06080520 	streq	r0, [r8], -r0, lsr #10
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2704:	06060501 	streq	r0, [r6], -r1, lsl #10
    2708:	060a052f 	streq	r0, [sl], -pc, lsr #10
	utimer_add (&bckf_timer);
    270c:	06050501 	streq	r0, [r5], -r1, lsl #10
	drvprcs = runthread (cc1350_driver);
    2710:	05206e03 	streq	r6, [r0, #-3587]!	; 0xfffff1fd
    2714:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
    2718:	17030606 	strne	r0, [r3, -r6, lsl #12]
	if (drvprcs == 0)
    271c:	07052f3c 	smladxeq	r5, ip, pc, r2	; <UNPREDICTABLE>
		syserror (ERESOURCE, "cc13");
    2720:	0b050106 	bleq	142b40 <__ccfg+0x122b98>
    2724:	0c051e06 	stceq	14, cr1, [r5], {6}
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2728:	0b050106 	bleq	142b48 <__ccfg+0x122ba0>
    272c:	06040520 	streq	r0, [r4], -r0, lsr #10
    2730:	023c0c03 	eorseq	r0, ip, #768	; 0x300
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2734:	01010009 	tsteq	r1, r9
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2738:	05000f05 	streq	r0, [r0, #-3845]	; 0xfffff0fb
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    273c:	00159c02 	andseq	r9, r5, r2, lsl #24
    2740:	0aae0300 	beq	feb83348 <_estack+0xdeb7e348>
    2744:	13020501 	movwne	r0, #9473	; 0x2501
    2748:	01062505 	tsteq	r6, r5, lsl #10
    274c:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
    2750:	18052025 	stmdane	r5, {r0, r2, r5, sp}
    2754:	20250520 	eorcs	r0, r5, r0, lsr #10
    2758:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    275c:	06210602 	strteq	r0, [r1], -r2, lsl #12
	plugch ();
    2760:	31010514 	tstcc	r1, r4, lsl r5
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2764:	01000802 	tsteq	r0, r2, lsl #16
    2768:	000c3001 	andeq	r3, ip, r1
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    276c:	03000300 	movweq	r0, #768	; 0x300
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2770:	02000001 	andeq	r0, r0, #1
    2774:	0d0efb01 	vstreq	d15, [lr, #-4]
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2778:	01010100 	mrseq	r0, (UNDEF: 17)
}
    277c:	00000001 	andeq	r0, r0, r1
    2780:	01000001 	tsteq	r0, r1
    2784:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 26d0 <phys_cc1350+0x7c>
    2788:	68632f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    278c:	696c7261 	stmdbvs	ip!, {r0, r5, r6, r9, ip, sp, lr}^
    2790:	326e6179 	rsbcc	r6, lr, #1073741854	; 0x4000001e
    2794:	4c4f2f33 	mcrrmi	15, 3, r2, pc, cr3
    2798:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    279c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    27a0:	2f534f43 	svccs	0x00534f43
    27a4:	4f636950 	svcmi	0x00636950
    27a8:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    27ac:	2f736269 	svccs	0x00736269
    27b0:	74654e56 	strbtvc	r4, [r5], #-3670	; 0xfffff1aa
    27b4:	752f0049 	strvc	r0, [pc, #-73]!	; 2773 <phys_cc1350+0x11f>
    27b8:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 25f4 <RFCCPE0IntHandler+0xc>
    27bc:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    27c0:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    27c4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    27c8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    27cc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    27d0:	2e30312f 	rsfcssp	f3, f0, #10.0
    27d4:	2f312e33 	svccs	0x00312e33
    27d8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    27dc:	00656475 	rsbeq	r6, r5, r5, ror r4
    27e0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 272c <phys_cc1350+0xd8>
    27e4:	68632f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    27e8:	696c7261 	stmdbvs	ip!, {r0, r5, r6, r9, ip, sp, lr}^
    27ec:	326e6179 	rsbcc	r6, lr, #1073741854	; 0x4000001e
    27f0:	4c4f2f33 	mcrrmi	15, 3, r2, pc, cr3
    27f4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    27f8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    27fc:	2f534f43 	svccs	0x00534f43
    2800:	4f636950 	svcmi	0x00636950
    2804:	43432f53 	movtmi	r2, #16211	; 0x3f53
    2808:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    280c:	63740000 	cmnvs	r4, #0
    2810:	00632e76 	rsbeq	r2, r3, r6, ror lr
    2814:	73000001 	movwvc	r0, #1
    2818:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    281c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2820:	73000002 	movwvc	r0, #2
    2824:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    2828:	00682e67 	rsbeq	r2, r8, r7, ror #28
    282c:	61000002 	tstvs	r0, r2
    2830:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    2834:	00030068 	andeq	r0, r3, r8, rrx
    2838:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    283c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    2840:	00682e73 	rsbeq	r2, r8, r3, ror lr
    2844:	74000001 	strvc	r0, [r0], #-1
    2848:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
    284c:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    2850:	00000100 	andeq	r0, r0, r0, lsl #2
    2854:	5f766374 	svcpl	0x00766374
    2858:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    285c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    2860:	00682e61 	rsbeq	r2, r8, r1, ror #28
    2864:	3c000001 	stccc	0, cr0, [r0], {1}
		if (res && (d < n))
    2868:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    286c:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    2870:	0000003e 	andeq	r0, r0, lr, lsr r0
    2874:	3a050000 	bcc	14287c <__ccfg+0x1228d4>
			res [d] = (char) c;
    2878:	c0020500 	andgt	r0, r2, r0, lsl #10
		d++;
    287c:	03000015 	movweq	r0, #21
    2880:	050101a7 	streq	r0, [r1, #-423]	; 0xfffffe59
    2884:	05011602 	streq	r1, [r1, #-1538]	; 0xfffff9fe
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2888:	050e063a 	streq	r0, [lr, #-1594]	; 0xfffff9c6
    288c:	3a052402 	bcc	14b89c <__ccfg+0x12b8f4>
    2890:	2402051c 	strcs	r0, [r2], #-1308	; 0xfffffae4
				enci (10000);
    2894:	051c3a05 	ldreq	r3, [ip, #-2565]	; 0xfffff5fb
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2898:	20062402 	andcs	r2, r6, r2, lsl #8
    289c:	0505134a 	streq	r1, [r5, #-842]	; 0xfffffcb6
	d = 0;
    28a0:	03050106 	movweq	r0, #20742	; 0x5106
		c = *fm++;
    28a4:	02053d06 	andeq	r3, r5, #384	; 0x180
		if (c == '\\') {
    28a8:	0606052f 	streq	r0, [r6], -pc, lsr #10
			if ((c = *fm++) == '\0') {
    28ac:	20050501 	andcs	r0, r5, r1, lsl #10
    28b0:	30060305 	andcc	r0, r6, r5, lsl #6
				outc ('\\');
    28b4:	01061705 	tsteq	r6, r5, lsl #14
			if ((c = *fm++) == '\0') {
    28b8:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
				outc ('\\');
    28bc:	052f0603 	streq	r0, [pc, #-1539]!	; 22c1 <rf_on+0x125>
    28c0:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
			outc (c);
    28c4:	03052011 	movweq	r2, #20497	; 0x5011
    28c8:	0b052106 	bleq	14ace8 <__ccfg+0x12ad40>
				outc (val);
    28cc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
				val = (word) va_arg (ap, aword);
    28d0:	19052806 	stmdbne	r5, {r1, r2, fp, sp}
		if (c == '%') {
    28d4:	01050106 	tsteq	r5, r6, lsl #2
    28d8:	0603054b 	streq	r0, [r3], -fp, asr #10
			c = *fm++;
    28dc:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    28e0:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
			switch (c) {
    28e4:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    28e8:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    28ec:	03052014 	movweq	r2, #20500	; 0x5014
    28f0:	11052106 	tstne	r5, r6, lsl #2
    28f4:	03050106 	movweq	r0, #20742	; 0x5106
    28f8:	0b052106 	bleq	14ad18 <__ccfg+0x12ad70>
    28fc:	05020106 	streq	r0, [r2, #-262]	; 0xfffffefa
				outc ('%');
    2900:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2904:	02050031 	andeq	r0, r5, #49	; 0x31
    2908:	0000160c 	andeq	r1, r0, ip, lsl #12
				outc (c);
    290c:	01029303 	tsteq	r2, r3, lsl #6
			outc (c);
    2910:	13170205 	tstne	r7, #1342177280	; 0x50000000
			if (c == '\0')
    2914:	06310514 			; <UNDEFINED> instruction: 0x06310514
				return d;
    2918:	20017803 	andcs	r7, r1, r3, lsl #16
}
    291c:	05260705 	streq	r0, [r6, #-1797]!	; 0xfffff8fb
    2920:	05052216 	streq	r2, [r5, #-534]	; 0xfffffdea
			switch (c) {
    2924:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    2928:	061a0526 	ldreq	r0, [sl], -r6, lsr #10
    292c:	1f0e0513 	svcne	0x000e0513
				for (i = 12; ; i -= 4) {
    2930:	21060205 	tstcs	r6, r5, lsl #4
				val = (word) va_arg (ap, aword);
    2934:	01061a05 	tsteq	r6, r5, lsl #20
						[ (val >> i) & 0xf ]);
    2938:	03060205 	movweq	r0, #25093	; 0x6205
    293c:	0105200c 	tsteq	r5, ip
    2940:	01021606 	tsteq	r2, r6, lsl #12
					outc (__pi_hex_enc_table
    2944:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2948:	0205002e 	andeq	r0, r5, #46	; 0x2e
					if (i == 0)
    294c:	00001622 	andeq	r1, r0, r2, lsr #12
    2950:	0100fe03 	tsteq	r0, r3, lsl #28	; <UNPREDICTABLE>
				for (i = 12; ; i -= 4) {
    2954:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
				val = (word) va_arg (ap, aword);
    2958:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
				if (c == 'd' && (val & 0x8000) != 0) {
    295c:	03052005 	movweq	r2, #20485	; 0x5005
				val = (word) va_arg (ap, aword);
    2960:	29052f06 	stmdbcs	r5, {r1, r2, r8, r9, sl, fp, sp}
				if (c == 'd' && (val & 0x8000) != 0) {
    2964:	1c050106 	stfnes	f0, [r5], {6}
    2968:	0603052e 	streq	r0, [r3], -lr, lsr #10
					outc ('-');
    296c:	06290521 	strteq	r0, [r9], -r1, lsr #10
    2970:	201c0501 	andscs	r0, ip, r1, lsl #10
					val = (~val) + 1;
    2974:	21060305 	tstcs	r6, r5, lsl #6
    2978:	01061a05 	tsteq	r6, r5, lsl #20
				for (i = 12; ; i -= 4) {
    297c:	024c0105 	subeq	r0, ip, #1073741825	; 0x40000001
				enci (10000);
    2980:	01010001 	tsteq	r1, r1
    2984:	05002e05 	streq	r2, [r0, #-3589]	; 0xfffff1fb
    2988:	00163c02 	andseq	r3, r6, r2, lsl #24
    298c:	02830300 	addeq	r0, r3, #0, 6
    2990:	16020501 	strne	r0, [r2], -r1, lsl #10
    2994:	0e062e05 	cdpeq	14, 0, cr2, cr6, cr5, {0}
    2998:	06240205 	strteq	r0, [r4], -r5, lsl #4
    299c:	1301012f 	movwne	r0, #4399	; 0x112f
    29a0:	05140101 	ldreq	r0, [r4, #-257]	; 0xfffffeff
    29a4:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    29a8:	02022d02 	andeq	r2, r2, #2, 26	; 0x80
    29ac:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    29b0:	0205003a 	andeq	r0, r5, #58	; 0x3a
    29b4:	0000164c 	andeq	r1, r0, ip, asr #12
    29b8:	0101df03 	tsteq	r1, r3, lsl #30
    29bc:	09030205 	stmdbeq	r3, {r0, r2, r9}
    29c0:	063a0501 	ldrteq	r0, [sl], -r1, lsl #10
    29c4:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
				if (c == 'd' || c == 'u') {
    29c8:	200b0302 	andcs	r0, fp, r2, lsl #6
    29cc:	75033a05 	strvc	r3, [r3, #-2565]	; 0xfffff5fb
					if (c == 'd' &&
    29d0:	03020520 	movweq	r0, #9504	; 0x2520
					val = va_arg (ap, lword);
    29d4:	30062009 	andcc	r2, r6, r9
					fm++;
    29d8:	05760405 	ldrbeq	r0, [r6, #-1029]!	; 0xfffffbfb
					if (c == 'd' &&
    29dc:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    29e0:	014c0604 	cmpeq	ip, r4, lsl #12
						outc ('-');
    29e4:	4a065806 	bmi	198a04 <__ccfg+0x178a5c>
    29e8:	03062706 	movweq	r2, #26374	; 0x6706
						val = (~val) + 1;
    29ec:	05133c79 	ldreq	r3, [r3, #-3193]	; 0xfffff387
				enci (10000);
    29f0:	12030601 	andne	r0, r3, #1048576	; 0x100000
					enci (1000000000UL);
    29f4:	03040520 	movweq	r0, #17696	; 0x4520
    29f8:	2b062e75 	blcs	18e3d4 <__ccfg+0x16e42c>
    29fc:	01061b05 	tsteq	r6, r5, lsl #22
    2a00:	4c060405 	cfstrsmi	mvf0, [r6], {5}
    2a04:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    2a08:	5b132e4a 	blpl	4ce338 <__ccfg+0x4ae390>
    2a0c:	1a060105 	bne	182e28 <__ccfg+0x162e80>
    2a10:	78030405 	stmdavc	r3, {r0, r2, sl}
    2a14:	3601052e 	strcc	r0, [r1], -lr, lsr #10
    2a18:	01000c02 	tsteq	r0, r2, lsl #24
    2a1c:	00310501 	eorseq	r0, r1, r1, lsl #10
    2a20:	16d80205 	ldrbne	r0, [r8], r5, lsl #4
    2a24:	ba030000 	blt	c2a2c <__ccfg+0xa2a84>
    2a28:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    2a2c:	31051418 	tstcc	r5, r8, lsl r4
    2a30:	01780306 	cmneq	r8, r6, lsl #6
    2a34:	09030605 	stmdbeq	r3, {r0, r2, r9, sl}
				} else if (c == 'x') {
    2a38:	2d040520 	cfstr32cs	mvfx0, [r4, #-128]	; 0xffffff80
					for (i = 28; ; i -= 4) {
    2a3c:	2f060205 	svccs	0x00060205
					val = va_arg (ap, lword);
    2a40:	01060505 	tsteq	r6, r5, lsl #10
							[ (val >> i) & 0xf ]);
    2a44:	2f060305 	svccs	0x00060305
    2a48:	06660601 	strbteq	r0, [r6], -r1, lsl #12
						outc (__pi_hex_enc_table
    2a4c:	0621064a 	strteq	r0, [r1], -sl, asr #12
    2a50:	0601133b 			; <UNDEFINED> instruction: 0x0601133b
    2a54:	2e064a66 	vmlscs.f32	s8, s12, s13
						if (i == 0)
    2a58:	0105132e 	tsteq	r5, lr, lsr #6
    2a5c:	3c090306 	stccc	3, cr0, [r9], {6}
					for (i = 28; ; i -= 4) {
    2a60:	77030305 	strvc	r0, [r3, -r5, lsl #6]
					outc ('%');
    2a64:	0536062e 	ldreq	r0, [r6, #-1582]!	; 0xfffff9d2
    2a68:	05210601 	streq	r0, [r1, #-1537]!	; 0xfffff9ff
    2a6c:	0b022d03 	bleq	8de80 <__ccfg+0x6ded8>
					outc ('l');
    2a70:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2a74:	0205004a 	andeq	r0, r5, #74	; 0x4a
				val = (word) va_arg (ap, aword);
    2a78:	00001748 	andeq	r1, r0, r8, asr #14
				outc (val);
    2a7c:	0103f503 	tsteq	r3, r3, lsl #10	; <UNPREDICTABLE>
    2a80:	13140205 	tstne	r4, #1342177280	; 0x50000000
				while (*st != '\0') {
    2a84:	05131413 	ldreq	r1, [r3, #-1043]	; 0xfffffbed
    2a88:	7903064a 	stmdbvc	r3, {r1, r3, r6, r9, sl}
    2a8c:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
    2a90:	053c0b03 	ldreq	r0, [ip, #-2819]!	; 0xfffff4fd
					outc (*st);
    2a94:	2075034a 	rsbscs	r0, r5, sl, asr #6
    2a98:	06270205 	strteq	r0, [r7], -r5, lsl #4
					st++;
    2a9c:	06050524 	streq	r0, [r5], -r4, lsr #10
		c = *fm++;
    2aa0:	20300501 	eorscs	r0, r0, r1, lsl #10
    2aa4:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
    2aa8:	30053d0c 	andcc	r3, r5, ip, lsl #26
char *vform (char *res, const char *fm, va_list aq) {
    2aac:	2e25053c 	mcrcs	5, 1, r0, cr5, cr12, {1}
    2ab0:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
	if (res != NULL) {
    2ab4:	03060305 	movweq	r0, #25349	; 0x6305
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2ab8:	02052e15 	andeq	r2, r5, #336	; 0x150
    2abc:	2e6e0306 	cdpcs	3, 6, cr0, cr14, cr6, {0}
    2ac0:	05171313 	ldreq	r1, [r7, #-787]	; 0xfffffced
}
    2ac4:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    2ac8:	05760602 	ldrbeq	r0, [r6, #-1538]!	; 0xfffff9fe
	fml = strlen (fm) + 17;
    2acc:	0a05010f 	beq	142f10 <__ccfg+0x122f68>
    2ad0:	03052006 	movweq	r2, #20486	; 0x5006
    2ad4:	13052f06 	movwne	r2, #24326	; 0x5f06
	if ((res = (char*) umalloc (fml)) == NULL)
    2ad8:	06050106 	streq	r0, [r5], -r6, lsl #2
    2adc:	0622052e 	strteq	r0, [r2], -lr, lsr #10
    2ae0:	0624051f 			; <UNDEFINED> instruction: 0x0624051f
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2ae4:	060f0501 	streq	r0, [pc], -r1, lsl #10
    2ae8:	06020520 	streq	r0, [r2], -r0, lsr #10
    2aec:	330a0501 	movwcc	r0, #42241	; 0xa501
    2af0:	13030105 	movwne	r0, #12549	; 0x3105
		ufree (res);
    2af4:	0602052e 	streq	r0, [r2], -lr, lsr #10
		goto Again;
    2af8:	05667303 	strbeq	r7, [r6, #-771]!	; 0xfffffcfd
	if (buf == NULL || fmt == NULL)
    2afc:	0515061a 	ldreq	r0, [r5, #-1562]	; 0xfffff9e6
int vscan (const char *buf, const char *fmt, va_list ap) {
    2b00:	02053913 	andeq	r3, r5, #311296	; 0x4c000
	if (buf == NULL || fmt == NULL)
    2b04:	1a052f06 	bne	14e724 <__ccfg+0x12e77c>
    2b08:	02051406 	andeq	r1, r5, #100663296	; 0x6000000
    2b0c:	132f061e 			; <UNDEFINED> instruction: 0x132f061e
		    	    case 'u': scanu (lword); break;
    2b10:	3c4a0114 	stfcce	f0, [sl], {20}
			while (isspace (*buf)) buf++;
    2b14:	06060514 			; <UNDEFINED> instruction: 0x06060514
    2b18:	4a050501 	bmi	143f24 <__ccfg+0x123f7c>
	while (*fmt != '\0') {
    2b1c:	32060205 	andcc	r0, r6, #1342177280	; 0x50000000
		if (*fmt++ != '%')
    2b20:	01061305 	tsteq	r6, r5, lsl #6
		switch (*fmt++) {
    2b24:	2f060205 	svccs	0x00060205
    2b28:	01060905 	tsteq	r6, r5, lsl #18
    2b2c:	03060205 	movweq	r0, #25093	; 0x6205
    2b30:	0515206d 	ldreq	r2, [r5, #-109]	; 0xffffff93
    2b34:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    2b38:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    2b3c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
}
    2b40:	023d0603 	eorseq	r0, sp, #3145728	; 0x300000
		switch (*fmt++) {
    2b44:	01010010 	tsteq	r1, r0, lsl r0
    2b48:	05003a05 	streq	r3, [r0, #-2565]	; 0xfffff5fb
    2b4c:	00000002 	andeq	r0, r0, r2
    2b50:	04a80300 	strteq	r0, [r8], #768	; 0x300
			while (isspace (*buf)) buf++;
    2b54:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2b58:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    2b5c:	201b063a 	andscs	r0, fp, sl, lsr r6
    2b60:	20250205 	eorcs	r0, r5, r5, lsl #4
    2b64:	27064a06 	strcs	r4, [r6, -r6, lsl #20]
    2b68:	3c790306 	ldclcc	3, cr0, [r9], #-24	; 0xffffffe8
			if (*buf == '\0')
    2b6c:	01151414 	tsteq	r5, r4, lsl r4
			if (*buf != ',') {
    2b70:	064a5806 	strbeq	r5, [sl], -r6, lsl #16
			sap = va_arg (ap, char*);
    2b74:	05142e2e 	ldreq	r2, [r4, #-3630]	; 0xfffff1d2
			nc++;
    2b78:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
			if (*buf != ',') {
    2b7c:	0a052e05 	beq	14e398 <__ccfg+0x12e3f0>
				while (!isspace (*buf) && *buf != ',' &&
    2b80:	06030530 			; <UNDEFINED> instruction: 0x06030530
    2b84:	08051341 	stmdaeq	r5, {r0, r6, r8, r9, ip}
    2b88:	060a052b 	streq	r0, [sl], -fp, lsr #10
    2b8c:	20080501 	andcs	r0, r8, r1, lsl #10
    2b90:	33060205 	movwcc	r0, #25093	; 0x6205
    2b94:	0613053d 			; <UNDEFINED> instruction: 0x0613053d
    2b98:	06020501 	streq	r0, [r2], -r1, lsl #10
			while (isspace (*buf)) buf++;
    2b9c:	0601053d 			; <UNDEFINED> instruction: 0x0601053d
    2ba0:	000b0213 	andeq	r0, fp, r3, lsl r2
    2ba4:	43050101 	movwmi	r0, #20737	; 0x5101
    2ba8:	08020500 	stmdaeq	r2, {r8, sl}
    2bac:	03000018 	movweq	r0, #24
			if (*buf == ',') buf++;
    2bb0:	050104c9 	streq	r0, [r1, #-1225]	; 0xfffffb37
    2bb4:	05051602 	streq	r1, [r5, #-1538]	; 0xfffff9fe
			*sap = '\0';
    2bb8:	0f050106 	svceq	0x00050106
			break;
    2bbc:	3b26052f 	blcc	984080 <__ccfg+0x9640d8>
		    case 'd': scani (word); break;
    2bc0:	05211d05 	streq	r1, [r1, #-3333]!	; 0xfffff2fb
    2bc4:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    2bc8:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    2bcc:	052f0602 	streq	r0, [pc, #-1538]!	; 25d2 <cc1350_driver+0x1ca>
    2bd0:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2bd4:	01052b0a 	tsteq	r5, sl, lsl #22
    2bd8:	00040232 	andeq	r0, r4, r2, lsr r2
    2bdc:	3c050101 	stfccs	f0, [r5], {1}
    2be0:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
    2be4:	03000018 	movweq	r0, #24
    2be8:	050104d5 	streq	r0, [r1, #-1237]	; 0xfffffb2b
    2bec:	13131902 	tstne	r3, #32768	; 0x8000
    2bf0:	3c050114 	stfccs	f0, [r5], {20}
    2bf4:	20750306 	rsbscs	r0, r5, r6, lsl #6
    2bf8:	03020520 	movweq	r0, #9504	; 0x2520
    2bfc:	0620200b 	strteq	r2, [r0], -fp
    2c00:	1303064a 	movwne	r0, #13898	; 0x364a
    2c04:	6d030620 	stcvs	6, cr0, [r3, #-128]	; 0xffffff80
    2c08:	0513143c 	ldreq	r1, [r3, #-1084]	; 0xfffffbc4
    2c0c:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    2c10:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    2c14:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2c18:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    2c1c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2c20:	3d4b0604 	stclcc	6, cr0, [fp, #-16]
    2c24:	3d330205 	lfmcc	f0, 4, [r3, #-20]!	; 0xffffffec
    2c28:	06150101 	ldreq	r0, [r5], -r1, lsl #2
    2c2c:	1e040514 	mcrne	5, 0, r0, cr4, cr4, {0}
		    case 'u': scanu (word); break;
    2c30:	30060205 	andcc	r0, r6, r5, lsl #4
    2c34:	4a4a0601 	bmi	1284440 <__ccfg+0x1264498>
    2c38:	132e2e06 			; <UNDEFINED> instruction: 0x132e2e06
    2c3c:	0622053e 			; <UNDEFINED> instruction: 0x0622053e
    2c40:	57150513 			; <UNDEFINED> instruction: 0x57150513
    2c44:	23060205 	movwcs	r0, #25093	; 0x6205
    2c48:	13060105 	movwne	r0, #24837	; 0x6105
    2c4c:	70030a05 	andvc	r0, r3, r5, lsl #20
    2c50:	000b022e 	andeq	r0, fp, lr, lsr #4
    2c54:	38050101 	stmdacc	r5, {r0, r8}
    2c58:	00020500 	andeq	r0, r2, r0, lsl #10
    2c5c:	03000000 	movweq	r0, #0
    2c60:	050104fc 	streq	r0, [r1, #-1276]	; 0xfffffb04
    2c64:	13131602 	tstne	r3, #2097152	; 0x200000
    2c68:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    2c6c:	77030638 	smladxvc	r3, r8, r6, r0
    2c70:	03020520 	movweq	r0, #9504	; 0x2520
    2c74:	06202009 	strteq	r2, [r0], -r9
		    case 'x': scanx (word); break;
    2c78:	0603054a 	streq	r0, [r3], -sl, asr #10
    2c7c:	052e0903 	streq	r0, [lr, #-2307]!	; 0xfffff6fd
    2c80:	77030602 	strvc	r0, [r3, -r2, lsl #12]
    2c84:	0514142e 	ldreq	r1, [r4, #-1070]	; 0xfffffbd2
    2c88:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2c8c:	03052005 	movweq	r2, #20485	; 0x5005
    2c90:	02052f06 	andeq	r2, r5, #6, 30
    2c94:	1b051319 	blne	147900 <__ccfg+0x127958>
    2c98:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2c9c:	06030520 	streq	r0, [r3], -r0, lsr #10
    2ca0:	05200a03 	streq	r0, [r0, #-2563]!	; 0xfffff5fd
    2ca4:	75030605 	strvc	r0, [r3, #-1541]	; 0xfffff9fb
    2ca8:	030a0501 	movweq	r0, #42241	; 0xa501
    2cac:	1a05200b 	bne	14ace0 <__ccfg+0x12ad38>
    2cb0:	03052006 	movweq	r2, #20486	; 0x5006
    2cb4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    2cb8:	2c052f06 	stccs	15, cr2, [r5], {6}
    2cbc:	06051106 	streq	r1, [r5], -r6, lsl #2
    2cc0:	062a0521 	strteq	r0, [sl], -r1, lsr #10
    2cc4:	0309051f 	movweq	r0, #38175	; 0x951f
    2cc8:	2105206f 	tstcs	r5, pc, rrx
    2ccc:	0c050106 	stfeqs	f0, [r5], {6}
    2cd0:	06030520 	streq	r0, [r3], -r0, lsr #10
    2cd4:	0620052f 	strteq	r0, [r0], -pc, lsr #10
    2cd8:	20060501 	andcs	r0, r6, r1, lsl #10
    2cdc:	05202005 	streq	r2, [r0, #-5]!
    2ce0:	02052006 	andeq	r2, r5, #6
    2ce4:	05133306 	ldreq	r3, [r3, #-774]	; 0xfffffcfa
    2ce8:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2cec:	422a0603 	eormi	r0, sl, #3145728	; 0x300000
			switch (*fmt++) {
    2cf0:	0f060505 	svceq	0x00060505
    2cf4:	05230a05 	streq	r0, [r3, #-2565]!	; 0xfffff5fb
    2cf8:	0520061a 	streq	r0, [r0, #-1562]!	; 0xfffff9e6
    2cfc:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    2d00:	2e0d0301 	cdpcs	3, 0, cr0, cr13, cr1, {0}
    2d04:	03060405 	movweq	r0, #25605	; 0x6405
    2d08:	08052074 	stmdaeq	r5, {r2, r4, r5, r6, sp}
		    	    case 'd': scani (lword); break;
    2d0c:	07050106 	streq	r0, [r5, -r6, lsl #2]
    2d10:	06050520 	streq	r0, [r5], -r0, lsr #10
    2d14:	062c052f 	strteq	r0, [ip], -pc, lsr #10
    2d18:	22070510 	andcs	r0, r7, #16, 10	; 0x4000000
    2d1c:	1e062a05 	vmlane.f32	s4, s12, s10
    2d20:	01000a02 	tsteq	r0, r2, lsl #20
    2d24:	00380501 	eorseq	r0, r8, r1, lsl #10
    2d28:	00000205 	andeq	r0, r0, r5, lsl #4
    2d2c:	a3030000 	movwge	r0, #12288	; 0x3000
    2d30:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
    2d34:	13131316 	tstne	r3, #1476395008	; 0x58000000
    2d38:	38050114 	stmdacc	r5, {r2, r4, r8}
    2d3c:	20770306 	rsbscs	r0, r7, r6, lsl #6
    2d40:	09030205 	stmdbeq	r3, {r0, r2, r9}
    2d44:	4a062020 	bmi	18adcc <__ccfg+0x16ae24>
    2d48:	03060305 	movweq	r0, #25349	; 0x6305
    2d4c:	02052e09 	andeq	r2, r5, #9, 28	; 0x90
    2d50:	2e770306 	cdpcs	3, 7, cr0, cr7, cr6, {0}
    2d54:	1a051414 	bne	147dac <__ccfg+0x127e04>
    2d58:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2d5c:	06030520 	streq	r0, [r3], -r0, lsr #10
    2d60:	1902052f 	stmdbne	r2, {r0, r1, r2, r3, r5, r8, sl}
    2d64:	01060505 	tsteq	r6, r5, lsl #10
		    	    case 'x': scanx (lword); break;
    2d68:	05201b05 	streq	r1, [r0, #-2821]!	; 0xfffff4fb
    2d6c:	206b0338 	rsbcs	r0, fp, r8, lsr r3
    2d70:	03060305 	movweq	r0, #25349	; 0x6305
    2d74:	05207cb3 	streq	r7, [r0, #-3251]!	; 0xfffff34d
    2d78:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2d7c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2d80:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2d84:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    2d88:	13052911 	movwne	r2, #22801	; 0x5911
    2d8c:	0f050106 	svceq	0x00050106
    2d90:	05052006 	streq	r2, [r5, #-6]
    2d94:	09051306 	stmdbeq	r5, {r1, r2, r8, r9, ip}
    2d98:	03dc0306 	bicseq	r0, ip, #402653184	; 0x18000000
    2d9c:	06210520 	strteq	r0, [r1], -r0, lsr #10
    2da0:	200c0501 	andcs	r0, ip, r1, lsl #10
    2da4:	2f060305 	svccs	0x00060305
    2da8:	01062005 	tsteq	r6, r5
    2dac:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    2db0:	06052020 	streq	r2, [r5], -r0, lsr #32
    2db4:	06020520 	streq	r0, [r2], -r0, lsr #10
    2db8:	061b0533 			; <UNDEFINED> instruction: 0x061b0533
    2dbc:	06030501 	streq	r0, [r3], -r1, lsl #10
    2dc0:	0601052b 	streq	r0, [r1], -fp, lsr #10
    2dc4:	053c0a03 	ldreq	r0, [ip, #-2563]!	; 0xfffff5fd
    2dc8:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    2dcc:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2dd0:	05200619 	streq	r0, [r0, #-1561]!	; 0xfffff9e7
    2dd4:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
		    	    case 'd': scani (lword); break;
    2dd8:	2e0a0301 	cdpcs	3, 0, cr0, cr10, cr1, {0}
    2ddc:	03060305 	movweq	r0, #25349	; 0x6305
    2de0:	1e052e77 	mcrne	14, 0, r2, cr5, cr7, {3}
    2de4:	06050106 	streq	r0, [r5], -r6, lsl #2
    2de8:	06040520 	streq	r0, [r4], -r0, lsr #10
    2dec:	06052f30 			; <UNDEFINED> instruction: 0x06052f30
    2df0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
		    	    case 'u': scanu (lword); break;
    2df4:	29052106 	stmdbcs	r5, {r1, r2, r8, sp}
    2df8:	062b051b 			; <UNDEFINED> instruction: 0x062b051b
    2dfc:	000a0201 	andeq	r0, sl, r1, lsl #4
    2e00:	16050101 	strne	r0, [r5], -r1, lsl #2
    2e04:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
    2e08:	03000018 	movweq	r0, #24
    2e0c:	050105cd 	streq	r0, [r1, #-1485]	; 0xfffffa33
    2e10:	13131302 	tstne	r3, #134217728	; 0x8000000
    2e14:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    2e18:	7a030616 	bvc	c4678 <__ccfg+0xa46d0>
    2e1c:	02052020 	andeq	r2, r5, #32
    2e20:	4a062042 	bmi	18af30 <__ccfg+0x16af88>
    2e24:	38062406 	stmdacc	r6, {r1, r2, sl, sp}
    2e28:	06011414 			; <UNDEFINED> instruction: 0x06011414
    2e2c:	2e064a58 			; <UNDEFINED> instruction: 0x2e064a58
    2e30:	0e05162e 	cfmadd32eq	mvax1, mvfx1, mvfx5, mvfx14
    2e34:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2e38:	0d052f06 	stceq	15, cr2, [r5, #-24]	; 0xffffffe8
		    	    case 'x': scanx (lword); break;
    2e3c:	0e051406 	cdpeq	4, 0, cr1, cr5, cr6, {0}
    2e40:	0602051e 			; <UNDEFINED> instruction: 0x0602051e
			if ((c = *buf++) == '\0')
    2e44:	060d0530 			; <UNDEFINED> instruction: 0x060d0530
    2e48:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    2e4c:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
			sap = va_arg (ap, char*);
    2e50:	01060605 	tsteq	r6, r5, lsl #12
			*sap = c;
    2e54:	054e0a05 	strbeq	r0, [lr, #-2565]	; 0xfffff5fb
			while (isspace (*buf)) buf++;
    2e58:	20210301 	eorcs	r0, r1, r1, lsl #6
    2e5c:	03060405 	movweq	r0, #25605	; 0x6405
    2e60:	033d2e5c 	teqeq	sp, #92, 28	; 0x5c0
    2e64:	02050117 	andeq	r0, r5, #-1073741819	; 0xc0000005
						*sap++ = *buf++;
    2e68:	012e6e03 			; <UNDEFINED> instruction: 0x012e6e03
			while (isspace (*buf)) buf++;
    2e6c:	0b032e3c 	bleq	ce764 <__ccfg+0xae7bc>
    2e70:	060b0501 	streq	r0, [fp], -r1, lsl #10
    2e74:	4a170501 	bmi	5c4280 <__ccfg+0x5a42d8>
		return 0;
    2e78:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
    2e7c:	03055805 	movweq	r5, #22533	; 0x5805
		    case 'x': scanx (word); break;
    2e80:	06052206 	streq	r2, [r5], -r6, lsl #4
    2e84:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
		    	    case 'x': scanx (lword); break;
    2e88:	02054e06 	andeq	r4, r5, #6, 28	; 0x60
    2e8c:	06100550 			; <UNDEFINED> instruction: 0x06100550
strand (__outserial, const char*)
    2e90:	06020501 	streq	r0, [r2], -r1, lsl #10
    2e94:	0605052f 	streq	r0, [r5], -pc, lsr #10
    2e98:	06030501 	streq	r0, [r3], -r1, lsl #10
    2e9c:	061a0521 	ldreq	r0, [sl], -r1, lsr #10
endstrand
    2ea0:	06020501 	streq	r0, [r2], -r1, lsl #10
    2ea4:	061b054b 	ldreq	r0, [fp], -fp, asr #10
	ptr = data;
    2ea8:	2f150501 	svccs	0x00150501
    2eac:	0602051f 			; <UNDEFINED> instruction: 0x0602051f
	if (*ptr)
    2eb0:	09051421 	stmdbeq	r5, {r0, r5, sl, ip}
		len = strlen (ptr);
    2eb4:	0c020106 	stfeqs	f0, [r2], {6}
    2eb8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    2ebc:	02050044 	andeq	r0, r5, #68	; 0x44
    2ec0:	00000000 	andeq	r0, r0, r0
    2ec4:	01068703 	tsteq	r6, r3, lsl #14
    2ec8:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    2ecc:	200e0644 	andcs	r0, lr, r4, asr #12
	len -= quant;
    2ed0:	26060205 	strcs	r0, [r6], -r5, lsl #4
    2ed4:	01061a05 	tsteq	r6, r5, lsl #20
    2ed8:	7a034405 	bvc	d3ef4 <__ccfg+0xb3f4c>
	if (len == 0) {
    2edc:	0602052e 	streq	r0, [r2], -lr, lsr #10
		ufree (data);
    2ee0:	054a0903 	strbeq	r0, [sl, #-2307]	; 0xfffff6fd
		finish;
    2ee4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2ee8:	672f0603 	strvs	r0, [pc, -r3, lsl #12]!
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    2eec:	01061605 	tsteq	r6, r5, lsl #12
    2ef0:	67060305 	strvs	r0, [r6, -r5, lsl #6]
    2ef4:	01061605 	tsteq	r6, r5, lsl #12
    2ef8:	5b060205 	blpl	183714 <__ccfg+0x16376c>
    2efc:	13060105 	movwne	r0, #24837	; 0x6105
strand (__inserial, address)
    2f00:	01000202 	tsteq	r0, r2, lsl #4
    2f04:	004b0501 	subeq	r0, fp, r1, lsl #10
    2f08:	00000205 	andeq	r0, r0, r5, lsl #4
    2f0c:	99030000 	stmdbls	r3, {}	; <UNPREDICTABLE>
    2f10:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
	if (__inpline != NULL)
    2f14:	4b051416 	blmi	147f74 <__ccfg+0x127fcc>
    2f18:	017a0306 	cmneq	sl, r6, lsl #6
		finish;
    2f1c:	05261a05 	streq	r1, [r6, #-2565]!	; 0xfffff5fb
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    2f20:	2e7a034b 	cdpcs	3, 7, cr0, cr10, cr11, {2}
    2f24:	03060205 	movweq	r0, #25093	; 0x6205
    2f28:	05054a09 	streq	r4, [r5, #-2569]	; 0xfffff5f7
    2f2c:	03050106 	movweq	r0, #20742	; 0x5106
		umwait (IM_INIT);
    2f30:	05672f06 	strbeq	r2, [r7, #-3846]!	; 0xfffff0fa
		release;
    2f34:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
	savedata (data);
    2f38:	05670603 	strbeq	r0, [r7, #-1539]!	; 0xfffff9fd
	len = MAX_LINE_LENGTH;
    2f3c:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
	io (IM_READ, __cport, READ, ptr, 1);
    2f40:	055a0602 	ldrbeq	r0, [sl, #-1538]	; 0xfffff9fe
    2f44:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    2f48:	01010002 	tsteq	r1, r2
    2f4c:	05003105 	streq	r3, [r0, #-261]	; 0xfffffefb
	if (ptr == (char*) data) { // new line
    2f50:	00000002 	andeq	r0, r0, r2
    2f54:	06aa0300 	strteq	r0, [sl], r0, lsl #6
		if (*ptr == '\0') { // bin cmd
    2f58:	16020501 	strne	r0, [r2], -r1, lsl #10
			proceed (IM_BIN);
    2f5c:	01060505 	tsteq	r6, r5, lsl #10
    2f60:	21060305 	tstcs	r6, r5, lsl #6
		if (*ptr < 0x20)
    2f64:	3d060105 	stfccs	f0, [r6, #-20]	; 0xffffffec
    2f68:	01000102 	tsteq	r0, r2, lsl #2
			proceed (IM_READ);
    2f6c:	00480501 	subeq	r0, r8, r1, lsl #10
    2f70:	19680205 	stmdbne	r8!, {r0, r2, r9}^
	if (*ptr == '\n' || *ptr == '\r') {
    2f74:	d1030000 	mrsle	r0, (UNDEF: 3)
    2f78:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2f7c:	48052406 	stmdami	r5, {r1, r2, sl, sp}
		*ptr = '\0';
    2f80:	0602051c 			; <UNDEFINED> instruction: 0x0602051c
		__inpline = (char*)data;
    2f84:	48050124 	stmdami	r5, {r2, r5, r8}
		finish;
    2f88:	05200e06 	streq	r0, [r0, #-3590]!	; 0xfffff1fa
	if (len) {
    2f8c:	06202402 	strteq	r2, [r0], -r2, lsl #8
		ptr++;
    2f90:	05134a4a 	ldreq	r4, [r3, #-2634]	; 0xfffff5b6
    2f94:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
		len--;
    2f98:	06022d13 			; <UNDEFINED> instruction: 0x06022d13
	proceed (IM_READ);
    2f9c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	io (IM_BIN, __cport, READ, ptr, 1);
    2fa0:	02050046 	andeq	r0, r5, #70	; 0x46
    2fa4:	00001994 	muleq	r0, r4, r9
    2fa8:	0106b203 	tsteq	r6, r3, lsl #4
    2fac:	05170205 	ldreq	r0, [r7, #-517]	; 0xfffffdfb
    2fb0:	050d0646 	streq	r0, [sp, #-1606]	; 0xfffff9ba
	len -= 2;
    2fb4:	03052505 	movweq	r2, #21765	; 0x5505
	if (len > *ptr + 1) // 1 for 0x04
    2fb8:	06052f06 	streq	r2, [r5], -r6, lsl #30
    2fbc:	03050106 	movweq	r0, #20742	; 0x5106
		len = *ptr + 1;
    2fc0:	06053006 	streq	r3, [r5], -r6
    2fc4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	ptr++;
    2fc8:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
	quant = io (IM_BINL, __cport, READ, ptr, len);
    2fcc:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    2fd0:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    2fd4:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    2fd8:	04053c07 	streq	r3, [r5], #-3079	; 0xfffff3f9
    2fdc:	0c052206 	sfmeq	f2, 4, [r5], {6}
    2fe0:	01050106 	tsteq	r5, r6, lsl #2
	len -= quant;
    2fe4:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
		__inpline = (char*)data;
    2fe8:	7a030603 	bvc	c47fc <__ccfg+0xa4854>
		finish;
    2fec:	06060520 	streq	r0, [r6], -r0, lsr #10
	ptr += quant;
    2ff0:	06030501 	streq	r0, [r3], -r1, lsl #10
    2ff4:	06130530 			; <UNDEFINED> instruction: 0x06130530
endstrand
    2ff8:	06020501 	streq	r0, [r2], -r1, lsl #10
    2ffc:	2e06014c 	adfcssm	f0, f6, #4.0
	proceed (IM_BINL);
    3000:	134a4a06 	movtne	r4, #43526	; 0xaa06
endstrand
    3004:	01063705 	tsteq	r6, r5, lsl #14
    3008:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
    300c:	0b052d09 	bleq	14e438 <__ccfg+0x12e490>
    3010:	023c7103 	eorseq	r7, ip, #-1073741824	; 0xc0000000
    3014:	0101000b 	tsteq	r1, fp
    3018:	05003d05 	streq	r3, [r0, #-3333]	; 0xfffff2fb
    301c:	00000002 	andeq	r0, r0, r2
    3020:	06d90300 	ldrbeq	r0, [r9], r0, lsl #6
    3024:	16020501 	strne	r0, [r2], -r1, lsl #10
    3028:	063d0501 	ldrteq	r0, [sp], -r1, lsl #10
    302c:	2402051c 	strcs	r0, [r2], #-1308	; 0xfffffae4
    3030:	4a4a0620 	bmi	12848b8 <__ccfg+0x1264910>
    3034:	06250513 			; <UNDEFINED> instruction: 0x06250513
    3038:	06020501 	streq	r0, [r2], -r1, lsl #10
    303c:	06430567 	strbeq	r0, [r3], -r7, ror #10
    3040:	2e220501 	cfsh64cs	mvdx0, mvdx2, #1
    3044:	052e4305 	streq	r4, [lr, #-773]!	; 0xfffffcfb
    3048:	01052e22 	tsteq	r5, r2, lsr #28
    304c:	0005024b 	andeq	r0, r5, fp, asr #4
    3050:	3d050101 	stfccs	f0, [r5, #-4]
    3054:	00020500 	andeq	r0, r2, r0, lsl #10
    3058:	03000000 	movweq	r0, #0
    305c:	050106e2 	streq	r0, [r1, #-1762]	; 0xfffff91e
    3060:	05011602 	streq	r1, [r1, #-1538]	; 0xfffff9fe
    3064:	051c063d 	ldreq	r0, [ip, #-1597]	; 0xfffff9c3
    3068:	06202402 	strteq	r2, [r0], -r2, lsl #8
    306c:	05134a4a 	ldreq	r4, [r3, #-2634]	; 0xfffff5b6
    3070:	05010622 	streq	r0, [r1, #-1570]	; 0xfffff9de
    3074:	05026701 	streq	r6, [r2, #-1793]	; 0xfffff8ff
    3078:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    307c:	02050040 	andeq	r0, r5, #64	; 0x40
    3080:	00000000 	andeq	r0, r0, r0
    3084:	0106ea03 	tsteq	r6, r3, lsl #20
    3088:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    308c:	03064005 	movweq	r4, #24581	; 0x6005
    3090:	0520017a 	streq	r0, [r0, #-378]!	; 0xfffffe86
    3094:	4005260c 	andmi	r2, r5, ip, lsl #12
    3098:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    309c:	0505260c 	streq	r2, [r5, #-1548]	; 0xfffff9f4
    30a0:	0602052e 	streq	r0, [r2], -lr, lsr #10
    30a4:	11058433 	tstne	r5, r3, lsr r4
    30a8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    30ac:	1d110531 	cfldr32ne	mvfx0, [r1, #-196]	; 0xffffff3c
    30b0:	21060205 	tstcs	r6, r5, lsl #4
    30b4:	061a0513 			; <UNDEFINED> instruction: 0x061a0513
    30b8:	06020511 			; <UNDEFINED> instruction: 0x06020511
    30bc:	09053d3e 	stmdbeq	r5, {r1, r2, r3, r4, r5, r8, sl, fp, ip, sp}
    30c0:	01050106 	tsteq	r5, r6, lsl #2
    30c4:	00020221 	andeq	r0, r2, r1, lsr #4
    30c8:	3e050101 	adfccs	f0, f5, f1
    30cc:	00020500 	andeq	r0, r2, r0, lsl #10
    30d0:	03000000 	movweq	r0, #0
    30d4:	050106fe 	streq	r0, [r1, #-1790]	; 0xfffff902
    30d8:	03021602 	movweq	r1, #9730	; 0x2602
    30dc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    30e0:	02050045 	andeq	r0, r5, #69	; 0x45
    30e4:	000019f4 	strdeq	r1, [r0], -r4
    30e8:	01078503 	tsteq	r7, r3, lsl #10
    30ec:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    30f0:	03064505 	movweq	r4, #25861	; 0x6505
    30f4:	052e017a 	streq	r0, [lr, #-378]!	; 0xfffffe86
    30f8:	03052605 	movweq	r2, #22021	; 0x5605
    30fc:	06053106 	streq	r3, [r5], -r6, lsl #2
    3100:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    3104:	03052f06 	movweq	r2, #24326	; 0x5f06
    3108:	2e062f06 	cdpcs	15, 0, cr2, cr6, cr6, {0}
    310c:	033c6601 	teqeq	ip, #1048576	; 0x100000
    3110:	0c05011d 	stfeqs	f0, [r5], {29}
    3114:	06050106 	streq	r0, [r5], -r6, lsl #2
    3118:	350a052e 	strcc	r0, [sl, #-1326]	; 0xfffffad2
    311c:	05270105 	streq	r0, [r7, #-261]!	; 0xfffffefb
    3120:	73030604 	movwvc	r0, #13828	; 0x3604
    3124:	06200520 	strteq	r0, [r0], -r0, lsr #10
    3128:	31040501 	tstcc	r4, r1, lsl #10
    312c:	051d1205 	ldreq	r1, [sp, #-517]	; 0xfffffdfb
    3130:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    3134:	0501061d 	streq	r0, [r1, #-1565]	; 0xfffff9e3
    3138:	2f3d0604 	svccs	0x003d0604
    313c:	01060b05 	tsteq	r6, r5, lsl #22
    3140:	41060205 	tstmi	r6, r5, lsl #4
    3144:	01060b05 	tsteq	r6, r5, lsl #22
    3148:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    314c:	052f0603 	streq	r0, [pc, #-1539]!	; 2b51 <vscan+0x55>
    3150:	0201060a 	andeq	r0, r1, #10485760	; 0xa00000
    3154:	01010009 	tsteq	r1, r9
    3158:	05004805 	streq	r4, [r0, #-2053]	; 0xfffff7fb
    315c:	001a5c02 	andseq	r5, sl, r2, lsl #24
    3160:	09860300 	stmibeq	r6, {r8, r9}
    3164:	18020501 	stmdane	r2, {r0, r8, sl}
    3168:	06050514 			; <UNDEFINED> instruction: 0x06050514
    316c:	03480501 	movteq	r0, #34049	; 0x8501
    3170:	05202078 	streq	r2, [r0, #-120]!	; 0xffffff88
    3174:	31052805 	tstcc	r5, r5, lsl #16
    3178:	20250520 	eorcs	r0, r5, r0, lsr #10
    317c:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    3180:	02053506 	andeq	r3, r5, #25165824	; 0x1800000
    3184:	11052906 	tstne	r5, r6, lsl #18
    3188:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    318c:	11052f06 	tstne	r5, r6, lsl #30
    3190:	21050106 	tstcs	r5, r6, lsl #2
    3194:	1e110522 	cfmul64ne	mvdx0, mvdx1, mvdx2
    3198:	30060205 	andcc	r0, r6, r5, lsl #4
    319c:	01062105 	tsteq	r6, r5, lsl #2
    31a0:	052e1005 	streq	r1, [lr, #-5]!
    31a4:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    31a8:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    31ac:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    31b0:	05343d02 	ldreq	r3, [r4, #-3330]!	; 0xfffff2fe
    31b4:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    31b8:	0101000b 	tsteq	r1, fp
    31bc:	05004405 	streq	r4, [r0, #-1029]	; 0xfffffbfb
    31c0:	001aac02 	andseq	sl, sl, r2, lsl #24
    31c4:	09a00300 	stmibeq	r0!, {r8, r9}
    31c8:	17020501 	strne	r0, [r2, -r1, lsl #10]
    31cc:	01141313 	tsteq	r4, r3, lsl r3
    31d0:	03064405 	movweq	r4, #25605	; 0x6405
    31d4:	02050177 	andeq	r0, r5, #-1073741795	; 0xc000001d
    31d8:	052e0903 	streq	r0, [lr, #-2307]!	; 0xfffff6fd
    31dc:	20770344 	rsbscs	r0, r7, r4, asr #6
    31e0:	09030205 	stmdbeq	r3, {r0, r2, r9}
    31e4:	4a06204a 	bmi	18b314 <__ccfg+0x16b36c>
    31e8:	03060305 	movweq	r0, #25349	; 0x6305
    31ec:	0e05200d 	cdpeq	0, 0, cr2, cr5, cr13, {0}
    31f0:	06030559 			; <UNDEFINED> instruction: 0x06030559
    31f4:	060f0547 	streq	r0, [pc], -r7, asr #10
    31f8:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    31fc:	03062805 	movweq	r2, #26629	; 0x6805
    3200:	1e052078 	mcrne	0, 0, r2, cr5, cr8, {3}
    3204:	06020501 	streq	r0, [r2], -r1, lsl #10
    3208:	030a0501 	movweq	r0, #42241	; 0xa501
    320c:	01052e16 	tsteq	r5, r6, lsl lr
    3210:	05200d03 	streq	r0, [r0, #-3331]!	; 0xfffff2fd
    3214:	67030603 	strvs	r0, [r3, -r3, lsl #12]
    3218:	2e58013c 	mrccs	1, 2, r0, cr8, cr12, {1}
    321c:	060e0513 			; <UNDEFINED> instruction: 0x060e0513
    3220:	74060501 	strvc	r0, [r6], #-1281	; 0xfffffaff
    3224:	42060205 	andmi	r0, r6, #1342177280	; 0x50000000
    3228:	01060505 	tsteq	r6, r5, lsl #10
    322c:	36060205 	strcc	r0, [r6], -r5, lsl #4
    3230:	01060c05 	tsteq	r6, r5, lsl #24
    3234:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
    3238:	06052e12 			; <UNDEFINED> instruction: 0x06052e12
    323c:	06020520 	streq	r0, [r2], -r0, lsr #10
    3240:	060b0523 	streq	r0, [fp], -r3, lsr #10
    3244:	4a050501 	bmi	144650 <__ccfg+0x1246a8>
    3248:	32060205 	andcc	r0, r6, #1342177280	; 0x50000000
    324c:	06090568 	streq	r0, [r9], -r8, ror #10
    3250:	000b0201 	andeq	r0, fp, r1, lsl #4
    3254:	3e050101 	adfccs	f0, f5, f1
    3258:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    325c:	0300001b 	movweq	r0, #27
    3260:	050109d1 	streq	r0, [r1, #-2513]	; 0xfffff62f
    3264:	14131702 	ldrne	r1, [r3], #-1794	; 0xfffff8fe
    3268:	063e0501 	ldrteq	r0, [lr], -r1, lsl #10
    326c:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
    3270:	06202802 	strteq	r2, [r0], -r2, lsl #16
    3274:	05144a4a 	ldreq	r4, [r4, #-2634]	; 0xfffff5b6
    3278:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    327c:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    3280:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    3284:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    3288:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    328c:	05330602 	ldreq	r0, [r3, #-1538]!	; 0xfffff9fe
    3290:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    3294:	2f2f0602 	svccs	0x002f0602
    3298:	05130101 	ldreq	r0, [r3, #-257]	; 0xfffffeff
    329c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    32a0:	0a052101 	beq	14b6ac <__ccfg+0x12b704>
    32a4:	02207903 	eoreq	r7, r0, #49152	; 0xc000
    32a8:	01010009 	tsteq	r1, r9
    32ac:	05003405 	streq	r3, [r0, #-1029]	; 0xfffffbfb
    32b0:	001b8c02 	andseq	r8, fp, r2, lsl #24
    32b4:	09e80300 	stmibeq	r8!, {r8, r9}^
    32b8:	16020501 	strne	r0, [r2], -r1, lsl #10
    32bc:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    32c0:	79030634 	stmdbvc	r3, {r2, r4, r5, r9, sl}
    32c4:	27020520 	strcs	r0, [r2, -r0, lsr #10]
    32c8:	4a4a0620 	bmi	1284b50 <__ccfg+0x1264ba8>
    32cc:	06050514 			; <UNDEFINED> instruction: 0x06050514
    32d0:	06020501 	streq	r0, [r2], -r1, lsl #10
    32d4:	0604053d 			; <UNDEFINED> instruction: 0x0604053d
    32d8:	06020501 	streq	r0, [r2], -r1, lsl #10
    32dc:	06050521 	streq	r0, [r5], -r1, lsr #10
    32e0:	06020501 	streq	r0, [r2], -r1, lsl #10
    32e4:	060a0523 	streq	r0, [sl], -r3, lsr #10
    32e8:	30090510 	andcc	r0, r9, r0, lsl r5
    32ec:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    32f0:	01010007 	tsteq	r1, r7
    32f4:	05003505 	streq	r3, [r0, #-1285]	; 0xfffffafb
    32f8:	001bc002 	andseq	ip, fp, r2
    32fc:	09f90300 	ldmibeq	r9!, {r8, r9}^
    3300:	16020501 	strne	r0, [r2], -r1, lsl #10
    3304:	0e063505 	cfsh32eq	mvfx3, mvfx6, #5
    3308:	05260205 	streq	r0, [r6, #-517]!	; 0xfffffdfb
    330c:	02052c0c 	andeq	r2, r5, #12, 24	; 0xc00
    3310:	06013006 	streq	r3, [r1], -r6
    3314:	2e064a4a 	vmlscs.f32	s8, s12, s20
    3318:	0105134a 	tsteq	r5, sl, asr #6
    331c:	02053e06 	andeq	r3, r5, #6, 28	; 0x60
    3320:	0006022c 	andeq	r0, r6, ip, lsr #4
    3324:	32050101 	andcc	r0, r5, #1073741824	; 0x40000000
    3328:	00020500 	andeq	r0, r2, r0, lsl #10
    332c:	03000000 	movweq	r0, #0
    3330:	05010a84 	streq	r0, [r1, #-2692]	; 0xfffff57c
    3334:	05011602 	streq	r1, [r1, #-1538]	; 0xfffff9fe
    3338:	051c0632 	ldreq	r0, [ip, #-1586]	; 0xfffff9ce
    333c:	06202402 	strteq	r2, [r0], -r2, lsl #8
    3340:	05134a4a 	ldreq	r4, [r3, #-2634]	; 0xfffff5b6
    3344:	cc03060a 	stcgt	6, cr0, [r3], {10}
    3348:	09050177 	stmdbeq	r5, {r0, r1, r2, r4, r5, r6, r8}
    334c:	2008b403 	andcs	fp, r8, r3, lsl #8
    3350:	03060205 	movweq	r0, #25093	; 0x6205
    3354:	133c77c9 	teqne	ip, #52690944	; 0x3240000
    3358:	13030514 	movwne	r0, #13588	; 0x3514
    335c:	01060505 	tsteq	r6, r5, lsl #10
    3360:	21060305 	tstcs	r6, r5, lsl #6
    3364:	01060605 	tsteq	r6, r5, lsl #12
    3368:	31060305 	tstcc	r6, r5, lsl #6
    336c:	05291105 	streq	r1, [r9, #-261]!	; 0xfffffefb
    3370:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    3374:	0520060f 	streq	r0, [r0, #-1551]!	; 0xfffff9f1
    3378:	05130605 	ldreq	r0, [r3, #-1541]	; 0xfffff9fb
    337c:	08b40301 	ldmeq	r4!, {r0, r8, r9}
    3380:	00080220 	andeq	r0, r8, r0, lsr #4
    3384:	28050101 	stmdacs	r5, {r0, r8}
    3388:	fc020500 	stc2	5, cr0, [r2], {-0}
    338c:	0300001b 	movweq	r0, #27
    3390:	05010a8c 	streq	r0, [r1, #-2700]	; 0xfffff574
    3394:	011a0301 	tsteq	sl, r1, lsl #6
    3398:	01000102 	tsteq	r0, r2, lsl #2
    339c:	00010e01 	andeq	r0, r1, r1, lsl #28
    33a0:	87000300 	strhi	r0, [r0, -r0, lsl #6]
    33a4:	02000000 	andeq	r0, r0, #0
    33a8:	0d0efb01 	vstreq	d15, [lr, #-4]
    33ac:	01010100 	mrseq	r0, (UNDEF: 17)
    33b0:	00000001 	andeq	r0, r0, r1
    33b4:	01000001 	tsteq	r0, r1
    33b8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3304 <NOROM_RFCRfTrimRead+0xa0>
    33bc:	68632f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    33c0:	696c7261 	stmdbvs	ip!, {r0, r5, r6, r9, ip, sp, lr}^
    33c4:	326e6179 	rsbcc	r6, lr, #1073741854	; 0x4000001e
    33c8:	4c4f2f33 	mcrrmi	15, 3, r2, pc, cr3
    33cc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    33d0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    33d4:	2f534f43 	svccs	0x00534f43
    33d8:	4f636950 	svcmi	0x00636950
    33dc:	43432f53 	movtmi	r2, #16211	; 0x3f53
    33e0:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    33e4:	73752f00 	cmnvc	r5, #0, 30
    33e8:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    33ec:	63672f62 	cmnvs	r7, #392	; 0x188
    33f0:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    33f4:	6f6e2d6d 	svcvs	0x006e2d6d
    33f8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    33fc:	2f696261 	svccs	0x00696261
    3400:	332e3031 			; <UNDEFINED> instruction: 0x332e3031
    3404:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    3408:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    340c:	00006564 	andeq	r6, r0, r4, ror #10
    3410:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    3414:	5f707574 	svcpl	0x00707574
    3418:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
    341c:	00010063 	andeq	r0, r1, r3, rrx
    3420:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    3424:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3428:	00020068 	andeq	r0, r2, r8, rrx
    342c:	01050000 	mrseq	r0, (UNDEF: 5)
    3430:	fe020500 	cdp2	5, 0, cr0, cr2, cr0, {0}
    3434:	0300001b 	movweq	r0, #27
    3438:	05010284 	streq	r0, [r1, #-644]	; 0xfffffd7c
    343c:	05141605 	ldreq	r1, [r4, #-1541]	; 0xfffff9fb
    3440:	0102100a 	tsteq	r2, sl
    3444:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3448:	02050001 	andeq	r0, r5, #1
    344c:	00001c00 	andeq	r1, r0, r0, lsl #24
    3450:	01029603 	tsteq	r2, r3, lsl #12
    3454:	14160505 	ldrne	r0, [r6], #-1285	; 0xfffffafb
    3458:	02100a05 	andseq	r0, r0, #20480	; 0x5000
    345c:	01010001 	tsteq	r1, r1
    3460:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    3464:	001c0202 	andseq	r0, ip, r2, lsl #4
    3468:	02a80300 	adceq	r0, r8, #0, 6
    346c:	16050501 	strne	r0, [r5], -r1, lsl #10
    3470:	100a0514 	andne	r0, sl, r4, lsl r5
    3474:	01000102 	tsteq	r0, r2, lsl #2
    3478:	00010501 	andeq	r0, r1, r1, lsl #10
    347c:	1c040205 	sfmne	f0, 4, [r4], {5}
    3480:	d2030000 	andle	r0, r3, #0
    3484:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    3488:	01051713 	tsteq	r5, r3, lsl r7
    348c:	017a0306 	cmneq	sl, r6, lsl #6
    3490:	06260505 	strteq	r0, [r6], -r5, lsl #10
    3494:	16051333 			; <UNDEFINED> instruction: 0x16051333
    3498:	05051406 	streq	r1, [r5, #-1030]	; 0xfffffbfa
    349c:	0405ce06 	streq	ip, [r5], #-3590	; 0xfffff1fa
    34a0:	05900d03 	ldreq	r0, [r0, #3331]	; 0xd03
    34a4:	01053305 	tsteq	r5, r5, lsl #6
    34a8:	0b022f06 	bleq	8f0c8 <__ccfg+0x6f120>
    34ac:	dd010100 	stfles	f0, [r1, #-0]
    34b0:	03000000 	movweq	r0, #0
    34b4:	0000d700 	andeq	sp, r0, r0, lsl #14
    34b8:	fb010200 	blx	43cc2 <__ccfg+0x23d1a>
    34bc:	01000d0e 	tsteq	r0, lr, lsl #26
    34c0:	00010101 	andeq	r0, r1, r1, lsl #2
    34c4:	00010000 	andeq	r0, r1, r0
    34c8:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    34cc:	2f656d6f 	svccs	0x00656d6f
    34d0:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    34d4:	6179696c 	cmnvs	r9, ip, ror #18
    34d8:	2f33326e 	svccs	0x0033326e
    34dc:	4f534c4f 	svcmi	0x00534c4f
    34e0:	2f54454e 	svccs	0x0054454e
    34e4:	4f434950 	svcmi	0x00434950
    34e8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    34ec:	2f534f63 	svccs	0x00534f63
    34f0:	33314343 	teqcc	r1, #201326593	; 0xc000001
    34f4:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    34f8:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    34fc:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    3500:	6e692f45 	cdpvs	15, 6, cr2, cr9, cr5, {2}
    3504:	752f0063 	strvc	r0, [pc, #-99]!	; 34a9 <NOROM_RFCRTrim+0xf5>
    3508:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 3344 <NOROM_RFCRfTrimRead+0xe0>
    350c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    3510:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    3514:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    3518:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    351c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3520:	2e30312f 	rsfcssp	f3, f0, #10.0
    3524:	2f312e33 	svccs	0x00312e33
    3528:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    352c:	00656475 	rsbeq	r6, r5, r5, ror r4
    3530:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 347c <NOROM_RFCRTrim+0xc8>
    3534:	68632f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    3538:	696c7261 	stmdbvs	ip!, {r0, r5, r6, r9, ip, sp, lr}^
    353c:	326e6179 	rsbcc	r6, lr, #1073741854	; 0x4000001e
    3540:	4c4f2f33 	mcrrmi	15, 3, r2, pc, cr3
    3544:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3548:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    354c:	2f534f43 	svccs	0x00534f43
    3550:	4f636950 	svcmi	0x00636950
    3554:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3558:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    355c:	77680000 	strbvc	r0, [r8, -r0]!
    3560:	6663635f 			; <UNDEFINED> instruction: 0x6663635f
    3564:	69735f67 	ldmdbvs	r3!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    3568:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
    356c:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    3570:	2e746375 	mrccs	3, 3, r6, cr4, cr5, {3}
    3574:	00010068 	andeq	r0, r1, r8, rrx
    3578:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    357c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3580:	00020068 	andeq	r0, r2, r8, rrx
    3584:	66636300 	strbtvs	r6, [r3], -r0, lsl #6
    3588:	00632e67 	rsbeq	r2, r3, r7, ror #28
    358c:	00000003 	andeq	r0, r0, r3
    3590:	00000209 	andeq	r0, r0, r9, lsl #4
    3594:	012d0003 			; <UNDEFINED> instruction: 0x012d0003
    3598:	01020000 	mrseq	r0, (UNDEF: 2)
    359c:	000d0efb 	strdeq	r0, [sp], -fp
    35a0:	01010101 	tsteq	r1, r1, lsl #2
    35a4:	01000000 	mrseq	r0, (UNDEF: 0)
    35a8:	2f010000 	svccs	0x00010000
    35ac:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    35b0:	6168632f 	cmnvs	r8, pc, lsr #6
    35b4:	79696c72 	stmdbvc	r9!, {r1, r4, r5, r6, sl, fp, sp, lr}^
    35b8:	33326e61 	teqcc	r2, #1552	; 0x610
    35bc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    35c0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    35c4:	4349502f 	movtmi	r5, #36911	; 0x902f
    35c8:	502f534f 	eorpl	r5, pc, pc, asr #6
    35cc:	534f6369 	movtpl	r6, #62313	; 0xf369
    35d0:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    35d4:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    35d8:	6f736e65 	svcvs	0x00736e65
    35dc:	2f007372 	svccs	0x00007372
    35e0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    35e4:	6168632f 	cmnvs	r8, pc, lsr #6
    35e8:	79696c72 	stmdbvc	r9!, {r1, r4, r5, r6, sl, fp, sp, lr}^
    35ec:	33326e61 	teqcc	r2, #1552	; 0x610
    35f0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    35f4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    35f8:	4349502f 	movtmi	r5, #36911	; 0x902f
    35fc:	502f534f 	eorpl	r5, pc, pc, asr #6
    3600:	534f6369 	movtpl	r6, #62313	; 0xf369
    3604:	3143432f 	cmpcc	r3, pc, lsr #6
    3608:	00585833 	subseq	r5, r8, r3, lsr r8
    360c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3558 <TrimAfterColdResetWakeupFromShutDown+0x50>
    3610:	68632f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    3614:	696c7261 	stmdbvs	ip!, {r0, r5, r6, r9, ip, sp, lr}^
    3618:	326e6179 	rsbcc	r6, lr, #1073741854	; 0x4000001e
    361c:	4c4f2f33 	mcrrmi	15, 3, r2, pc, cr3
    3620:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3624:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3628:	2f534f43 	svccs	0x00534f43
    362c:	4f636950 	svcmi	0x00636950
    3630:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3634:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3638:	3143432f 	cmpcc	r3, pc, lsr #6
    363c:	57585833 	smmlarpl	r8, r3, r8, r5
    3640:	2f455241 	svccs	0x00455241
    3644:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    3648:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    364c:	752f0062 	strvc	r0, [pc, #-98]!	; 35f2 <NOROM_SetupTrimDevice+0x16>
    3650:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 348c <NOROM_RFCRTrim+0xd8>
    3654:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    3658:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    365c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    3660:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    3664:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3668:	2e30312f 	rsfcssp	f3, f0, #10.0
    366c:	2f312e33 	svccs	0x00312e33
    3670:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3674:	00656475 	rsbeq	r6, r5, r5, ror r4
    3678:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    367c:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
    3680:	2e726f73 	mrccs	15, 3, r6, cr2, cr3, {3}
    3684:	00010063 	andeq	r0, r1, r3, rrx
    3688:	736d6300 	cmnvc	sp, #0, 6
    368c:	675f7369 	ldrbvs	r7, [pc, -r9, ror #6]
    3690:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    3694:	00000200 	andeq	r0, r0, r0, lsl #4
    3698:	6f697067 	svcvs	0x00697067
    369c:	0300682e 	movweq	r6, #2094	; 0x82e
    36a0:	74730000 	ldrbtvc	r0, [r3], #-0
    36a4:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    36a8:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    36ac:	72610000 	rsbvc	r0, r1, #0
    36b0:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    36b4:	00000200 	andeq	r0, r0, r0, lsl #4
    36b8:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    36bc:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    36c0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    36c4:	05000000 	streq	r0, [r0, #-0]
    36c8:	02050019 	andeq	r0, r5, #25
    36cc:	00000000 	andeq	r0, r0, r0
    36d0:	05010e03 	streq	r0, [r1, #-3587]	; 0xfffff1fd
    36d4:	0101011b 	tsteq	r1, fp, lsl r1
    36d8:	01063105 	tsteq	r6, r5, lsl #2
    36dc:	01000102 	tsteq	r0, r2, lsl #2
    36e0:	003f0501 	eorseq	r0, pc, r1, lsl #10
    36e4:	00000205 	andeq	r0, r0, r5, lsl #4
    36e8:	10030000 	andne	r0, r3, r0
    36ec:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    36f0:	05141313 	ldreq	r1, [r4, #-787]	; 0xfffffced
    36f4:	7a03063f 	bvc	c4ff8 <__ccfg+0xa5050>
    36f8:	05052001 	streq	r2, [r5, #-1]
    36fc:	06030526 	streq	r0, [r3], -r6, lsr #10
    3700:	06060522 	streq	r0, [r6], -r2, lsr #10
    3704:	06030501 	streq	r0, [r3], -r1, lsl #10
    3708:	0302044d 	movweq	r0, #9293	; 0x244d
    370c:	040100c1 	streq	r0, [r1], #-193	; 0xffffff3f
    3710:	20400301 	subcs	r0, r0, r1, lsl #6
    3714:	02044b3d 	andeq	r4, r4, #62464	; 0xf400
    3718:	04013303 	streq	r3, [r1], #-771	; 0xfffffcfd
    371c:	204e0301 	subcs	r0, lr, r1, lsl #6
    3720:	05310205 	ldreq	r0, [r1, #-517]!	; 0xfffffdfb
    3724:	04010607 	streq	r0, [r1], #-1543	; 0xfffff9f9
    3728:	030f0503 	movweq	r0, #62723	; 0xf503
    372c:	042e018b 	strteq	r0, [lr], #-395	; 0xfffffe75
    3730:	03070501 	movweq	r0, #29953	; 0x7501
    3734:	05207ef5 	streq	r7, [r0, #-3829]!	; 0xfffff10b
    3738:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    373c:	0305130b 	movweq	r1, #21259	; 0x530b
    3740:	05030413 	streq	r0, [r3, #-1043]	; 0xfffffbed
    3744:	01830329 	orreq	r0, r3, r9, lsr #6
    3748:	17050501 	strne	r0, [r5, -r1, lsl #10]
    374c:	0b050104 	bleq	143b64 <__ccfg+0x123bbc>
    3750:	7ef80306 	cdpvc	3, 15, cr0, cr8, cr6, {0}
    3754:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    3758:	0188030f 	orreq	r0, r8, pc, lsl #6
    375c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    3760:	7ef8030b 	cdpvc	3, 15, cr0, cr8, cr11, {0}
    3764:	0503042e 	streq	r0, [r3, #-1070]	; 0xfffffbd2
    3768:	01880333 	orreq	r0, r8, r3, lsr r3
    376c:	2042052e 	subcs	r0, r2, lr, lsr #10
    3770:	0b050104 	bleq	143b88 <__ccfg+0x123be0>
    3774:	2e7ef803 	cdpcs	8, 7, cr15, cr14, cr3, {0}
    3778:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    377c:	0205201f 	andeq	r2, r5, #31
    3780:	2208051e 	andcs	r0, r8, #125829120	; 0x7800000
    3784:	051e0205 	ldreq	r0, [lr, #-517]	; 0xfffffdfb
    3788:	3a052208 	bcc	14bfb0 <__ccfg+0x12c008>
    378c:	0b051f06 	bleq	14b3ac <__ccfg+0x12b404>
    3790:	06020501 	streq	r0, [r2], -r1, lsl #10
    3794:	23010511 	movwcs	r0, #5393	; 0x1511
    3798:	01000502 	tsteq	r0, r2, lsl #10
    379c:	0002ac01 	andeq	sl, r2, r1, lsl #24
    37a0:	19000300 	stmdbne	r0, {r8, r9}
    37a4:	02000001 	andeq	r0, r0, #1
    37a8:	0d0efb01 	vstreq	d15, [lr, #-4]
    37ac:	01010100 	mrseq	r0, (UNDEF: 17)
    37b0:	00000001 	andeq	r0, r0, r1
    37b4:	01000001 	tsteq	r0, r1
    37b8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3704 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8>
    37bc:	68632f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    37c0:	696c7261 	stmdbvs	ip!, {r0, r5, r6, r9, ip, sp, lr}^
    37c4:	326e6179 	rsbcc	r6, lr, #1073741854	; 0x4000001e
    37c8:	4c4f2f33 	mcrrmi	15, 3, r2, pc, cr3
    37cc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    37d0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    37d4:	2f534f43 	svccs	0x00534f43
    37d8:	4f636950 	svcmi	0x00636950
    37dc:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    37e0:	2f736269 	svccs	0x00736269
    37e4:	2f004f49 	svccs	0x00004f49
    37e8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    37ec:	6168632f 	cmnvs	r8, pc, lsr #6
    37f0:	79696c72 	stmdbvc	r9!, {r1, r4, r5, r6, sl, fp, sp, lr}^
    37f4:	33326e61 	teqcc	r2, #1552	; 0x610
    37f8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    37fc:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3800:	4349502f 	movtmi	r5, #36911	; 0x902f
    3804:	502f534f 	eorpl	r5, pc, pc, asr #6
    3808:	534f6369 	movtpl	r6, #62313	; 0xf369
    380c:	3143432f 	cmpcc	r3, pc, lsr #6
    3810:	2f585833 	svccs	0x00585833
    3814:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3818:	41575858 	cmpmi	r7, r8, asr r8
    381c:	642f4552 	strtvs	r4, [pc], #-1362	; 3824 <NOROM_SetupGetTrimForAmpcompTh2+0x8>
    3820:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    3824:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    3828:	73752f00 	cmnvc	r5, #0, 30
    382c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    3830:	63672f62 	cmnvs	r7, #392	; 0x188
    3834:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    3838:	6f6e2d6d 	svcvs	0x006e2d6d
    383c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3840:	2f696261 	svccs	0x00696261
    3844:	332e3031 			; <UNDEFINED> instruction: 0x332e3031
    3848:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    384c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3850:	2f006564 	svccs	0x00006564
    3854:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3858:	6168632f 	cmnvs	r8, pc, lsr #6
    385c:	79696c72 	stmdbvc	r9!, {r1, r4, r5, r6, sl, fp, sp, lr}^
    3860:	33326e61 	teqcc	r2, #1552	; 0x610
    3864:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3868:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    386c:	4349502f 	movtmi	r5, #36911	; 0x902f
    3870:	502f534f 	eorpl	r5, pc, pc, asr #6
    3874:	534f6369 	movtpl	r6, #62313	; 0xf369
    3878:	3143432f 	cmpcc	r3, pc, lsr #6
    387c:	00585833 	subseq	r5, r8, r3, lsr r8
    3880:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    3884:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    3888:	0100632e 	tsteq	r0, lr, lsr #6
    388c:	70670000 	rsbvc	r0, r7, r0
    3890:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3894:	00000200 	andeq	r0, r0, r0, lsl #4
    3898:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    389c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    38a0:	00000300 	andeq	r0, r0, r0, lsl #6
    38a4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    38a8:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    38ac:	75620000 	strbvc	r0, [r2, #-0]!
    38b0:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    38b4:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    38b8:	00682e73 	rsbeq	r2, r8, r3, ror lr
    38bc:	00000004 	andeq	r0, r0, r4
    38c0:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    38c4:	00000002 	andeq	r0, r0, r2
    38c8:	011b0300 	tsteq	fp, r0, lsl #6
    38cc:	052e0601 	streq	r0, [lr, #-1537]!	; 0xfffff9ff
    38d0:	056a0602 	strbeq	r0, [sl, #-1538]!	; 0xfffff9fe
    38d4:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    38d8:	03052005 	movweq	r2, #20485	; 0x5005
    38dc:	02053106 	andeq	r3, r5, #-2147483647	; 0x80000001
    38e0:	060f0540 	streq	r0, [pc], -r0, asr #10
    38e4:	03020401 	movweq	r0, #9217	; 0x2401
    38e8:	042e0187 	strteq	r0, [lr], #-391	; 0xfffffe79
    38ec:	03070501 	movweq	r0, #29953	; 0x7501
    38f0:	05207efd 	streq	r7, [r0, #-3837]!	; 0xfffff103
    38f4:	14051c0f 	strne	r1, [r5], #-3087	; 0xfffff3f1
    38f8:	1c052006 	stcne	0, cr2, [r5], {6}
    38fc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3900:	11030620 	tstne	r3, r0, lsr #12
    3904:	053d4b2e 	ldreq	r4, [sp, #-2862]!	; 0xfffff4d2
    3908:	2e710303 	cdpcs	3, 7, cr0, cr1, cr3, {0}
    390c:	29050204 	stmdbcs	r5, {r2, r9}
    3910:	0100fe03 	tsteq	r0, r3, lsl #28	; <UNPREDICTABLE>
    3914:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    3918:	06070501 	streq	r0, [r7], -r1, lsl #10
    391c:	017efd03 	cmneq	lr, r3, lsl #26	; <UNPREDICTABLE>
    3920:	0f050204 	svceq	0x00050204
    3924:	2e018303 	cdpcs	3, 0, cr8, cr1, cr3, {0}
    3928:	07050104 	streq	r0, [r5, -r4, lsl #2]
    392c:	2e7efd03 	cdpcs	13, 7, cr15, cr14, cr3, {0}
    3930:	33050204 	movwcc	r0, #20996	; 0x5204
    3934:	20018303 	andcs	r8, r1, r3, lsl #6
    3938:	06050104 	streq	r0, [r5], -r4, lsl #2
    393c:	207efd03 	rsbscs	pc, lr, r3, lsl #26
    3940:	30060405 	andcc	r0, r6, r5, lsl #8
    3944:	01060505 	tsteq	r6, r5, lsl #10
    3948:	40060405 	andmi	r0, r6, r5, lsl #8
    394c:	03060305 	movweq	r0, #25349	; 0x6305
    3950:	2f062e12 	svccs	0x00062e12
    3954:	64030605 	strvs	r0, [r3], #-1541	; 0xfffff9fb
    3958:	060d0520 	streq	r0, [sp], -r0, lsr #10
    395c:	06020501 	streq	r0, [r2], -r1, lsl #10
    3960:	053c1603 	ldreq	r1, [ip, #-1539]!	; 0xfffff9fd
    3964:	04010607 	streq	r0, [r1], #-1543	; 0xfffff9f9
    3968:	06290502 	strteq	r0, [r9], -r2, lsl #10
    396c:	5800eb03 	stmdapl	r0, {r0, r1, r8, r9, fp, sp, lr, pc}
    3970:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    3974:	0401060f 	streq	r0, [r1], #-1551	; 0xfffff9f1
    3978:	03070501 	movweq	r0, #29953	; 0x7501
    397c:	04207f90 	strteq	r7, [r0], #-3984	; 0xfffff070
    3980:	030f0502 	movweq	r0, #62722	; 0xf502
    3984:	052000f0 	streq	r0, [r0, #-240]!	; 0xffffff10
    3988:	01042e33 	tsteq	r4, r3, lsr lr
    398c:	90030505 	andls	r0, r3, r5, lsl #10
    3990:	0205207f 	andeq	r2, r5, #127	; 0x7f
    3994:	05053106 	streq	r3, [r5, #-262]	; 0xfffffefa
    3998:	03050106 	movweq	r0, #20742	; 0x5106
    399c:	02053e06 	andeq	r3, r5, #6, 28	; 0x60
    39a0:	06070551 			; <UNDEFINED> instruction: 0x06070551
    39a4:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    39a8:	df030629 	svcle	0x00030629
    39ac:	05053c00 	streq	r3, [r5, #-3072]	; 0xfffff400
    39b0:	060f0517 			; <UNDEFINED> instruction: 0x060f0517
    39b4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    39b8:	7f9c0307 	svcvc	0x009c0307
    39bc:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    39c0:	00e4030f 	rsceq	r0, r4, pc, lsl #6
    39c4:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    39c8:	7f9c0307 	svcvc	0x009c0307
    39cc:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    39d0:	00e40333 	rsceq	r0, r4, r3, lsr r3
    39d4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    39d8:	7f9c0305 	svcvc	0x009c0305
    39dc:	06020520 	streq	r0, [r2], -r0, lsr #10
    39e0:	060e0531 			; <UNDEFINED> instruction: 0x060e0531
    39e4:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    39e8:	31060205 	tstcc	r6, r5, lsl #4
    39ec:	01060305 	tsteq	r6, r5, lsl #6
    39f0:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
    39f4:	22060105 	andcs	r0, r6, #1073741825	; 0x40000001
    39f8:	052c0205 	streq	r0, [ip, #-517]!	; 0xfffffdfb
    39fc:	024c0601 	subeq	r0, ip, #1048576	; 0x100000
    3a00:	0101000d 	tsteq	r1, sp
    3a04:	05002905 	streq	r2, [r0, #-2309]	; 0xfffff6fb
    3a08:	00000002 	andeq	r0, r0, r2
    3a0c:	00d70300 	sbcseq	r0, r7, r0, lsl #6
    3a10:	16020501 	strne	r0, [r2], -r1, lsl #10
    3a14:	01060f05 	tsteq	r6, r5, lsl #30
    3a18:	051c2905 	ldreq	r2, [ip, #-2309]	; 0xfffff6fb
    3a1c:	0505240f 	streq	r2, [r5, #-1039]	; 0xfffffbf1
    3a20:	06030520 	streq	r0, [r3], -r0, lsr #10
    3a24:	06010521 	streq	r0, [r1], -r1, lsr #10
    3a28:	0303051a 	movweq	r0, #13594	; 0x351a
    3a2c:	02052e78 	andeq	r2, r5, #120, 28	; 0x780
    3a30:	07054006 	streq	r4, [r5, -r6]
    3a34:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    3a38:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
    3a3c:	01052f2f 	tsteq	r5, pc, lsr #30
    3a40:	03052206 	movweq	r2, #20998	; 0x5206
    3a44:	3e01052c 	cfsh32cc	mvfx0, mvfx1, #28
    3a48:	01000602 	tsteq	r0, r2, lsl #12
    3a4c:	00088501 	andeq	r8, r8, r1, lsl #10
    3a50:	2b000300 	blcs	4658 <patchGenfskRfe+0x1b0>
    3a54:	02000001 	andeq	r0, r0, #1
    3a58:	0d0efb01 	vstreq	d15, [lr, #-4]
    3a5c:	01010100 	mrseq	r0, (UNDEF: 17)
    3a60:	00000001 	andeq	r0, r0, r1
    3a64:	01000001 	tsteq	r0, r1
    3a68:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 39b4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x48>
    3a6c:	68632f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    3a70:	696c7261 	stmdbvs	ip!, {r0, r5, r6, r9, ip, sp, lr}^
    3a74:	326e6179 	rsbcc	r6, lr, #1073741854	; 0x4000001e
    3a78:	4c4f2f33 	mcrrmi	15, 3, r2, pc, cr3
    3a7c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3a80:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3a84:	2f534f43 	svccs	0x00534f43
    3a88:	4f636950 	svcmi	0x00636950
    3a8c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    3a90:	2f736269 	svccs	0x00736269
    3a94:	726f7453 	rsbvc	r7, pc, #1392508928	; 0x53000000
    3a98:	00656761 	rsbeq	r6, r5, r1, ror #14
    3a9c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 39e8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x7c>
    3aa0:	68632f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    3aa4:	696c7261 	stmdbvs	ip!, {r0, r5, r6, r9, ip, sp, lr}^
    3aa8:	326e6179 	rsbcc	r6, lr, #1073741854	; 0x4000001e
    3aac:	4c4f2f33 	mcrrmi	15, 3, r2, pc, cr3
    3ab0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3ab4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3ab8:	2f534f43 	svccs	0x00534f43
    3abc:	4f636950 	svcmi	0x00636950
    3ac0:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3ac4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3ac8:	3143432f 	cmpcc	r3, pc, lsr #6
    3acc:	57585833 	smmlarpl	r8, r3, r8, r5
    3ad0:	2f455241 	svccs	0x00455241
    3ad4:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    3ad8:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3adc:	752f0062 	strvc	r0, [pc, #-98]!	; 3a82 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x6>
    3ae0:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 391c <NOROM_SetupGetTrimForRadcExtCfg+0x4>
    3ae4:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    3ae8:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    3aec:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    3af0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    3af4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3af8:	2e30312f 	rsfcssp	f3, f0, #10.0
    3afc:	2f312e33 	svccs	0x00312e33
    3b00:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3b04:	00656475 	rsbeq	r6, r5, r5, ror r4
    3b08:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3a54 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xe8>
    3b0c:	68632f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    3b10:	696c7261 	stmdbvs	ip!, {r0, r5, r6, r9, ip, sp, lr}^
    3b14:	326e6179 	rsbcc	r6, lr, #1073741854	; 0x4000001e
    3b18:	4c4f2f33 	mcrrmi	15, 3, r2, pc, cr3
    3b1c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3b20:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3b24:	2f534f43 	svccs	0x00534f43
    3b28:	4f636950 	svcmi	0x00636950
    3b2c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3b30:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3b34:	74730000 	ldrbtvc	r0, [r3], #-0
    3b38:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    3b3c:	786d5f65 	stmdavc	sp!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    3b40:	38723532 	ldmdacc	r2!, {r1, r4, r5, r8, sl, ip, sp}^
    3b44:	2e353330 	mrccs	3, 1, r3, cr5, cr0, {1}
    3b48:	00010063 	andeq	r0, r1, r3, rrx
    3b4c:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    3b50:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    3b54:	73000002 	movwvc	r0, #2
    3b58:	61726f74 	cmnvs	r2, r4, ror pc
    3b5c:	655f6567 	ldrbvs	r6, [pc, #-1383]	; 35fd <NOROM_SetupTrimDevice+0x21>
    3b60:	6f727065 	svcvs	0x00727065
    3b64:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    3b68:	73000001 	movwvc	r0, #1
    3b6c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    3b70:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3b74:	61000003 	tstvs	r0, r3
    3b78:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    3b7c:	00040068 	andeq	r0, r4, r8, rrx
    3b80:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
    3b84:	54020500 	strpl	r0, [r2], #-1280	; 0xfffffb00
    3b88:	0300001c 	movweq	r0, #28
    3b8c:	02050118 	andeq	r0, r5, #24, 2
    3b90:	05141314 	ldreq	r1, [r4, #-788]	; 0xfffffcec
    3b94:	19050115 	stmdbne	r5, {r0, r2, r4, r8}
    3b98:	09050d06 	stmdbeq	r5, {r1, r2, r8, sl, fp}
    3b9c:	05020425 	streq	r0, [r2, #-1061]	; 0xfffffbdb
    3ba0:	028a032d 	addeq	r0, sl, #-1275068416	; 0xb4000000
    3ba4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    3ba8:	7df10319 	ldclvc	3, cr0, [r1, #100]!	; 0x64
    3bac:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    3bb0:	0195030f 	orrseq	r0, r5, pc, lsl #6
    3bb4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    3bb8:	f1030603 			; <UNDEFINED> instruction: 0xf1030603
    3bbc:	0204207e 	andeq	r2, r4, #126	; 0x7e
    3bc0:	03060f05 	movweq	r0, #28421	; 0x6f05
    3bc4:	0401018f 	streq	r0, [r1], #-399	; 0xfffffe71
    3bc8:	03050501 	movweq	r0, #21761	; 0x5501
    3bcc:	052e7ef1 	streq	r7, [lr, #-3825]!	; 0xfffff10f
    3bd0:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    3bd4:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
    3bd8:	05020421 	streq	r0, [r2, #-1057]	; 0xfffffbdf
    3bdc:	01890329 	orreq	r0, r9, r9, lsr #6
    3be0:	17050501 	strne	r0, [r5, -r1, lsl #10]
    3be4:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    3be8:	017ef303 	cmneq	lr, r3, lsl #6	; <UNPREDICTABLE>
    3bec:	01060605 	tsteq	r6, r5, lsl #12
    3bf0:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    3bf4:	29050204 	stmdbcs	r5, {r2, r9}
    3bf8:	01028103 	tsteq	r2, r3, lsl #2
    3bfc:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    3c00:	06020501 	streq	r0, [r2], -r1, lsl #10
    3c04:	017df603 	cmneq	sp, r3, lsl #12	; <UNPREDICTABLE>
    3c08:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    3c0c:	20028a03 	andcs	r8, r2, r3, lsl #20
    3c10:	03050104 	movweq	r0, #20740	; 0x5104
    3c14:	7dfb0306 	ldclvc	3, cr0, [fp, #24]!
    3c18:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    3c1c:	02b60329 	adcseq	r0, r6, #-1543503872	; 0xa4000000
    3c20:	17050501 	strne	r0, [r5, -r1, lsl #10]
    3c24:	01062d05 	tsteq	r6, r5, lsl #26
    3c28:	1c050104 	stfnes	f0, [r5], {4}
    3c2c:	7dc00306 	stclvc	3, cr0, [r0, #24]
    3c30:	0115052e 	tsteq	r5, lr, lsr #10
    3c34:	01060205 	tsteq	r6, r5, lsl #4
    3c38:	01052806 	tsteq	r5, r6, lsl #16
    3c3c:	04021306 	streq	r1, [r2], #-774	; 0xfffffcfa
    3c40:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3c44:	0205001f 	andeq	r0, r5, #31
    3c48:	00001c84 	andeq	r1, r0, r4, lsl #25
    3c4c:	05012803 	streq	r2, [r1, #-2051]	; 0xfffff7fd
    3c50:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    3c54:	1f05010e 	svcne	0x0005010e
    3c58:	04200e06 	strteq	r0, [r0], #-3590	; 0xfffff1fa
    3c5c:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    3c60:	043c01ff 	ldrteq	r0, [ip], #-511	; 0xfffffe01
    3c64:	06030501 	streq	r0, [r3], -r1, lsl #10
    3c68:	3c7e8603 	ldclcc	6, cr8, [lr], #-12
    3c6c:	01060605 	tsteq	r6, r5, lsl #12
    3c70:	2f060405 	svccs	0x00060405
    3c74:	29050204 	stmdbcs	r5, {r2, r9}
    3c78:	0101f403 	tsteq	r1, r3, lsl #8	; <UNPREDICTABLE>
    3c7c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    3c80:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    3c84:	06040501 	streq	r0, [r4], -r1, lsl #10
    3c88:	3c7e8903 			; <UNDEFINED> instruction: 0x3c7e8903
    3c8c:	29050204 	stmdbcs	r5, {r2, r9}
    3c90:	0102a803 	tsteq	r2, r3, lsl #16
    3c94:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    3c98:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    3c9c:	06030501 	streq	r0, [r3], -r1, lsl #10
    3ca0:	2e7dd403 	cdpcs	4, 7, cr13, cr13, cr3, {0}
    3ca4:	29050204 	stmdbcs	r5, {r2, r9}
    3ca8:	0101f103 	tsteq	r1, r3, lsl #2	; <UNPREDICTABLE>
    3cac:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    3cb0:	8c030601 	stchi	6, cr0, [r3], {1}
    3cb4:	0205017e 	andeq	r0, r5, #-2147483617	; 0x8000001f
    3cb8:	04207903 	strteq	r7, [r0], #-2307	; 0xfffff6fd
    3cbc:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    3cc0:	042001fb 	strteq	r0, [r0], #-507	; 0xfffffe05
    3cc4:	06030501 	streq	r0, [r3], -r1, lsl #10
    3cc8:	2e7e8b03 	vaddcs.f64	d24, d14, d3
    3ccc:	29050204 	stmdbcs	r5, {r2, r9}
    3cd0:	0102a603 	tsteq	r2, r3, lsl #12
    3cd4:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    3cd8:	d6030601 	strle	r0, [r3], -r1, lsl #12
    3cdc:	0204017d 	andeq	r0, r4, #1073741855	; 0x4000001f
    3ce0:	aa032d05 	bge	cf0fc <__ccfg+0xaf154>
    3ce4:	01042002 	tsteq	r4, r2
    3ce8:	03060305 	movweq	r0, #25349	; 0x6305
    3cec:	052e7dd6 	streq	r7, [lr, #-3542]!	; 0xfffff22a
    3cf0:	01790315 	cmneq	r9, r5, lsl r3
    3cf4:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    3cf8:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    3cfc:	20090301 	andcs	r0, r9, r1, lsl #6
    3d00:	01000402 	tsteq	r0, r2, lsl #8
    3d04:	001e0501 	andseq	r0, lr, r1, lsl #10
    3d08:	1cb80205 	lfmne	f0, 4, [r8], #20
    3d0c:	39030000 	stmdbcc	r3, {}	; <UNPREDICTABLE>
    3d10:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    3d14:	29050204 	stmdbcs	r5, {r2, r9}
    3d18:	0103cf03 	tsteq	r3, r3, lsl #30
    3d1c:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    3d20:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    3d24:	01040106 	tsteq	r4, r6, lsl #2
    3d28:	a8031e05 	stmdage	r3, {r0, r2, r9, sl, fp, ip}
    3d2c:	0204207c 	andeq	r2, r4, #124	; 0x7c
    3d30:	d8033805 	stmdale	r3, {r0, r2, fp, ip, sp}
    3d34:	01042003 	tsteq	r4, r3
    3d38:	03060205 	movweq	r0, #25093	; 0x6205
    3d3c:	2f3c7cab 	svccs	0x003c7cab
    3d40:	29050204 	stmdbcs	r5, {r2, r9}
    3d44:	0103cd03 	tsteq	r3, r3, lsl #26
    3d48:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    3d4c:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    3d50:	01040106 	tsteq	r4, r6, lsl #2
    3d54:	ad030105 	stfges	f0, [r3, #-20]	; 0xffffffec
    3d58:	04023c7c 	streq	r3, [r2], #-3196	; 0xfffff384
    3d5c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3d60:	02050027 	andeq	r0, r5, #39	; 0x27
    3d64:	00001cd4 	ldrdeq	r1, [r0], -r4
    3d68:	0100d703 	tsteq	r0, r3, lsl #14
    3d6c:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    3d70:	2e0e0627 	cfmadd32cs	mvax1, mvfx0, mvfx14, mvfx7
    3d74:	38050204 	stmdacc	r5, {r2, r9}
    3d78:	2e03ba03 	vmlacs.f32	s22, s6, s6
    3d7c:	09050104 	stmdbeq	r5, {r2, r8}
    3d80:	207cca03 	rsbscs	ip, ip, r3, lsl #20
    3d84:	38050204 	stmdacc	r5, {r2, r9}
    3d88:	2e03b603 	cfmadd32cs	mvax0, mvfx11, mvfx3, mvfx3
    3d8c:	08050104 	stmdaeq	r5, {r2, r8}
    3d90:	7cca0306 	stclvc	3, cr0, [sl], {6}
    3d94:	03020520 	movweq	r0, #9504	; 0x2520
    3d98:	04143c73 	ldreq	r3, [r4], #-3187	; 0xfffff38d
    3d9c:	03290502 			; <UNDEFINED> instruction: 0x03290502
    3da0:	050103ba 	streq	r0, [r1, #-954]	; 0xfffffc46
    3da4:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    3da8:	05010417 	streq	r0, [r1, #-1047]	; 0xfffffbe9
    3dac:	c0030602 	andgt	r0, r3, r2, lsl #12
    3db0:	0204017c 	andeq	r0, r4, #124, 2
    3db4:	c0033805 	andgt	r3, r3, r5, lsl #16
    3db8:	01042003 	tsteq	r4, r3
    3dbc:	03060205 	movweq	r0, #25093	; 0x6205
    3dc0:	2f2e7cc0 	svccs	0x002e7cc0
    3dc4:	01060605 	tsteq	r6, r5, lsl #12
    3dc8:	2f060205 	svccs	0x00060205
    3dcc:	29050204 	stmdbcs	r5, {r2, r9}
    3dd0:	0103b703 	tsteq	r3, r3, lsl #14
    3dd4:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    3dd8:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    3ddc:	01040106 	tsteq	r4, r6, lsl #2
    3de0:	03060205 	movweq	r0, #25093	; 0x6205
    3de4:	053c7cc3 	ldreq	r7, [ip, #-3267]!	; 0xfffff33d
    3de8:	0519060f 	ldreq	r0, [r9, #-1551]	; 0xfffff9f1
    3dec:	03053601 	movweq	r3, #22017	; 0x5601
    3df0:	2e790306 	cdpcs	3, 7, cr0, cr9, cr6, {0}
    3df4:	01060605 	tsteq	r6, r5, lsl #12
    3df8:	4b060405 	blmi	184e14 <__ccfg+0x164e6c>
    3dfc:	07024b4c 	streq	r4, [r2, -ip, asr #22]
    3e00:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3e04:	02050016 	andeq	r0, r5, #22
    3e08:	00001d2c 	andeq	r1, r0, ip, lsr #26
    3e0c:	01018103 	tsteq	r1, r3, lsl #2
    3e10:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    3e14:	050e0616 	streq	r0, [lr, #-1558]	; 0xfffff9ea
    3e18:	05052406 	streq	r2, [r5, #-1030]	; 0xfffffbfa
    3e1c:	06030520 	streq	r0, [r3], -r0, lsr #10
    3e20:	5e020530 	cfmv64hrpl	mvdx2, r0
    3e24:	01060805 	tsteq	r6, r5, lsl #16
    3e28:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
    3e2c:	051b0603 	ldreq	r0, [fp, #-1539]	; 0xfffff9fd
    3e30:	01660302 	cmneq	r6, r2, lsl #6
    3e34:	04140101 	ldreq	r0, [r4], #-257	; 0xfffffeff
    3e38:	03290502 			; <UNDEFINED> instruction: 0x03290502
    3e3c:	05010399 	streq	r0, [r1, #-921]	; 0xfffffc67
    3e40:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    3e44:	06380517 			; <UNDEFINED> instruction: 0x06380517
    3e48:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    3e4c:	7ce10302 	stclvc	3, cr0, [r1], #8
    3e50:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    3e54:	039f0338 	orrseq	r0, pc, #56, 6	; 0xe0000000
    3e58:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    3e5c:	e1030602 	tst	r3, r2, lsl #12
    3e60:	042f2e7c 	strteq	r2, [pc], #-3708	; 3e68 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x210>
    3e64:	03290502 			; <UNDEFINED> instruction: 0x03290502
    3e68:	05010397 	streq	r0, [r1, #-919]	; 0xfffffc69
    3e6c:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    3e70:	05010417 	streq	r0, [r1, #-1047]	; 0xfffffbe9
    3e74:	e3030602 	movw	r0, #13826	; 0x3602
    3e78:	0204017c 	andeq	r0, r4, #124, 2
    3e7c:	9d033805 	stcls	8, cr3, [r3, #-20]	; 0xffffffec
    3e80:	01042003 	tsteq	r4, r3
    3e84:	03060205 	movweq	r0, #25093	; 0x6205
    3e88:	052e7ce3 	streq	r7, [lr, #-3299]!	; 0xfffff31d
    3e8c:	2e160303 	cdpcs	3, 1, cr0, cr6, cr3, {0}
    3e90:	01060905 	tsteq	r6, r5, lsl #18
    3e94:	01000902 	tsteq	r0, r2, lsl #18
    3e98:	00170501 	andseq	r0, r7, r1, lsl #10
    3e9c:	1d700205 	lfmne	f0, 2, [r0, #-20]!	; 0xffffffec
    3ea0:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
    3ea4:	02050100 	andeq	r0, r5, #0, 2
    3ea8:	06170514 			; <UNDEFINED> instruction: 0x06170514
    3eac:	220c0510 	andcs	r0, ip, #16, 10	; 0x4000000
    3eb0:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    3eb4:	593d0603 	ldmdbpl	sp!, {r0, r1, r9, sl}
    3eb8:	6e030205 	cdpvs	2, 0, cr0, cr3, cr5, {0}
    3ebc:	03030501 	movweq	r0, #13569	; 0x3501
    3ec0:	09053c13 	stmdbeq	r5, {r0, r1, r4, sl, fp, ip, sp}
    3ec4:	03050106 	movweq	r0, #20742	; 0x5106
    3ec8:	01012f06 	tsteq	r1, r6, lsl #30
    3ecc:	14060105 	strne	r0, [r6], #-261	; 0xfffffefb
    3ed0:	01000302 	tsteq	r0, r2, lsl #6
    3ed4:	00110501 	andseq	r0, r1, r1, lsl #10
    3ed8:	1d940205 	lfmne	f0, 4, [r4, #20]
    3edc:	92030000 	andls	r0, r3, #0
    3ee0:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    3ee4:	06110516 			; <UNDEFINED> instruction: 0x06110516
    3ee8:	2402050e 	strcs	r0, [r2], #-1294	; 0xfffffaf2
    3eec:	08052f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    3ef0:	01050106 	tsteq	r5, r6, lsl #2
    3ef4:	052e0e03 	streq	r0, [lr, #-3587]!	; 0xfffff1fd
    3ef8:	20720308 	rsbscs	r0, r2, r8, lsl #6
    3efc:	03060205 	movweq	r0, #25093	; 0x6205
    3f00:	0105200d 	tsteq	r5, sp
    3f04:	03021306 	movweq	r1, #8966	; 0x2306
    3f08:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3f0c:	02050012 	andeq	r0, r5, #18
    3f10:	00001da8 	andeq	r1, r0, r8, lsr #27
    3f14:	0101a703 	tsteq	r1, r3, lsl #14
    3f18:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    3f1c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3f20:	03052005 	movweq	r2, #20485	; 0x5005
    3f24:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    3f28:	03050106 	movweq	r0, #20742	; 0x5106
    3f2c:	01052f06 	tsteq	r5, r6, lsl #30
    3f30:	03023006 	movweq	r3, #8198	; 0x2006
    3f34:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3f38:	0205002b 	andeq	r0, r5, #43	; 0x2b
    3f3c:	00000000 	andeq	r0, r0, r0
    3f40:	0101af03 	tsteq	r1, r3, lsl #30
    3f44:	02052006 	andeq	r2, r5, #6
    3f48:	05053006 	streq	r3, [r5, #-6]
    3f4c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3f50:	05053106 	streq	r3, [r5, #-262]	; 0xfffffefa
    3f54:	18050106 	stmdane	r5, {r1, r2, r8}
    3f58:	2012053c 	andscs	r0, r2, ip, lsr r5
    3f5c:	3f060205 	svccc	0x00060205
    3f60:	05020430 	streq	r0, [r2, #-1072]	; 0xfffffbd0
    3f64:	02d10329 	sbcseq	r0, r1, #-1543503872	; 0xa4000000
    3f68:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    3f6c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    3f70:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    3f74:	03020501 	movweq	r0, #9473	; 0x2501
    3f78:	042e7daa 	strteq	r7, [lr], #-3498	; 0xfffff256
    3f7c:	03380502 	teqeq	r8, #8388608	; 0x800000
    3f80:	042002d6 	strteq	r0, [r0], #-726	; 0xfffffd2a
    3f84:	06020501 	streq	r0, [r2], -r1, lsl #10
    3f88:	2e7daa03 	vaddcs.f32	s21, s26, s6
    3f8c:	3e4b4b2f 	vmlacc.f64	d20, d11, d31
    3f90:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    3f94:	02043102 	andeq	r3, r4, #-2147483648	; 0x80000000
    3f98:	c7032905 	strgt	r2, [r3, -r5, lsl #18]
    3f9c:	3d050102 	stfccs	f0, [r5, #-8]
    3fa0:	17050514 	smladne	r5, r4, r5, r0
    3fa4:	01063805 	tsteq	r6, r5, lsl #16
    3fa8:	02050104 	andeq	r0, r5, #4, 2
    3fac:	7db40306 	ldcvc	3, cr0, [r4, #24]!
    3fb0:	0105303c 	tsteq	r5, ip, lsr r0
    3fb4:	03051306 	movweq	r1, #21254	; 0x5306
    3fb8:	2e790306 	cdpcs	3, 7, cr0, cr9, cr6, {0}
    3fbc:	01060a05 	tsteq	r6, r5, lsl #20
    3fc0:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    3fc4:	3c74030a 	ldclcc	3, cr0, [r4], #-40	; 0xffffffd8
    3fc8:	01000502 	tsteq	r0, r2, lsl #10
    3fcc:	00310501 	eorseq	r0, r1, r1, lsl #10
    3fd0:	00000205 	andeq	r0, r0, r5, lsl #4
    3fd4:	ca030000 	bgt	c3fdc <__ccfg+0xa4034>
    3fd8:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    3fdc:	06310514 			; <UNDEFINED> instruction: 0x06310514
    3fe0:	220c0510 	andcs	r0, ip, #16, 10	; 0x4000000
    3fe4:	051e3105 	ldreq	r3, [lr, #-261]	; 0xfffffefb
    3fe8:	31052205 	tstcc	r5, r5, lsl #4
    3fec:	3005051e 	andcc	r0, r5, lr, lsl r5
    3ff0:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    3ff4:	01060605 	tsteq	r6, r5, lsl #12
    3ff8:	05201705 	streq	r1, [r0, #-1797]!	; 0xfffff8fb
    3ffc:	03052006 	movweq	r2, #20486	; 0x5006
    4000:	06053006 	streq	r3, [r5], -r6
    4004:	17050106 	strne	r0, [r5, -r6, lsl #2]
    4008:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
    400c:	04053032 	streq	r3, [r5], #-50	; 0xffffffce
    4010:	05010a03 	streq	r0, [r1, #-2563]	; 0xfffff5fd
    4014:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    4018:	10052009 	andne	r2, r5, r9
    401c:	20090520 	andcs	r0, r9, r0, lsr #10
    4020:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    4024:	01061105 	tsteq	r6, r5, lsl #2
    4028:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
    402c:	0905201f 	stmdbeq	r5, {r0, r1, r2, r3, r4, sp}
    4030:	0604052e 	streq	r0, [r4], -lr, lsr #10
    4034:	060d0524 	streq	r0, [sp], -r4, lsr #10
    4038:	4a070501 	bmi	1c5444 <__ccfg+0x1a549c>
    403c:	31060505 	tstcc	r6, r5, lsl #10
    4040:	01060b05 	tsteq	r6, r5, lsl #22
    4044:	2f060505 	svccs	0x00060505
    4048:	060c052f 	streq	r0, [ip], -pc, lsr #10
    404c:	03010501 	movweq	r0, #5377	; 0x1501
    4050:	04052031 	streq	r2, [r5], #-49	; 0xffffffcf
    4054:	20520306 	subscs	r0, r2, r6, lsl #6
    4058:	01060e05 	tsteq	r6, r5, lsl #28
    405c:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    4060:	1d052025 	stcne	0, cr2, [r5, #-148]	; 0xffffff6c
    4064:	06050520 	streq	r0, [r5], -r0, lsr #10
    4068:	060b053e 			; <UNDEFINED> instruction: 0x060b053e
    406c:	28040501 	stmdacs	r4, {r0, r8, sl}
    4070:	051e0b05 	ldreq	r0, [lr, #-2821]	; 0xfffff4fb
    4074:	2f220604 	svccs	0x00220604
    4078:	38050204 	stmdacc	r5, {r2, r9}
    407c:	02960306 	addseq	r0, r6, #402653184	; 0x18000000
    4080:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4084:	7dea0304 	stclvc	3, cr0, [sl, #16]!
    4088:	0602052e 	streq	r0, [r2], -lr, lsr #10
    408c:	207ec703 	rsbscs	ip, lr, r3, lsl #14
    4090:	29050204 	stmdbcs	r5, {r2, r9}
    4094:	0103c803 	tsteq	r3, r3, lsl #16
    4098:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    409c:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    40a0:	01040106 	tsteq	r4, r6, lsl #2
    40a4:	03060205 	movweq	r0, #25093	; 0x6205
    40a8:	2f2e7cb2 	svccs	0x002e7cb2
    40ac:	043d4b4b 	ldrteq	r4, [sp], #-2891	; 0xfffff4b5
    40b0:	03290502 			; <UNDEFINED> instruction: 0x03290502
    40b4:	050103c3 	streq	r0, [r1, #-963]	; 0xfffffc3d
    40b8:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    40bc:	06380517 			; <UNDEFINED> instruction: 0x06380517
    40c0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    40c4:	ee030602 	cfmadd32	mvax0, mvfx0, mvfx3, mvfx2
    40c8:	0b053c7d 	bleq	1532c4 <__ccfg+0x13331c>
    40cc:	82550306 	subshi	r0, r5, #402653184	; 0x18000000
    40d0:	03060905 	movweq	r0, #26885	; 0x6905
    40d4:	13052e1f 	movwne	r2, #24095	; 0x5e1f
    40d8:	0c050106 	stfeqs	f0, [r5], {6}
    40dc:	202a052e 	eorcs	r0, sl, lr, lsr #10
    40e0:	05202205 	streq	r2, [r0, #-517]!	; 0xfffffdfb
    40e4:	053e0605 	ldreq	r0, [lr, #-1541]!	; 0xfffff9fb
    40e8:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    40ec:	05310605 	ldreq	r0, [r1, #-1541]!	; 0xfffff9fb
    40f0:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    40f4:	04053502 	streq	r3, [r5], #-1282	; 0xfffffafe
    40f8:	2e0a0306 	cdpcs	3, 0, cr0, cr10, cr6, {0}
    40fc:	06090559 			; <UNDEFINED> instruction: 0x06090559
    4100:	4a0e0301 	bmi	384d0c <__ccfg+0x364d64>
    4104:	21060405 	tstcs	r6, r5, lsl #8
    4108:	59206b03 	stmdbpl	r0!, {r0, r1, r8, r9, fp, sp, lr}
    410c:	4b200b03 	blmi	806d20 <__ccfg+0x7e6d78>
    4110:	01060905 	tsteq	r6, r5, lsl #18
    4114:	5e060405 	cdppl	4, 0, cr0, cr6, cr5, {0}
    4118:	0609054b 	streq	r0, [r9], -fp, asr #10
    411c:	06030501 	streq	r0, [r3], -r1, lsl #10
    4120:	587fba03 	ldmdapl	pc!, {r0, r1, r9, fp, ip, sp, pc}^	; <UNPREDICTABLE>
    4124:	01060605 	tsteq	r6, r5, lsl #12
    4128:	083b0905 	ldmdaeq	fp!, {r0, r2, r8, fp}
    412c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4130:	0205003b 	andeq	r0, r5, #59	; 0x3b
    4134:	00000000 	andeq	r0, r0, r0
    4138:	0102a003 	tsteq	r2, r3
    413c:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    4140:	0e063b05 	vmlaeq.f64	d3, d6, d5
    4144:	05320c05 	ldreq	r0, [r2, #-3077]!	; 0xfffff3fb
    4148:	05051c3b 	streq	r1, [r5, #-3131]	; 0xfffff3c5
    414c:	1c3b0524 	cfldr32ne	mvfx0, [fp], #-144	; 0xffffff70
    4150:	05320505 	ldreq	r0, [r2, #-1285]!	; 0xfffffafb
    4154:	05320603 	ldreq	r0, [r2, #-1539]!	; 0xfffff9fd
    4158:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    415c:	14053c1a 	strne	r3, [r5], #-3098	; 0xfffff3e6
    4160:	06030520 	streq	r0, [r3], -r0, lsr #10
    4164:	0608053f 			; <UNDEFINED> instruction: 0x0608053f
    4168:	06030501 	streq	r0, [r3], -r1, lsl #10
    416c:	0608052f 	streq	r0, [r8], -pc, lsr #10
    4170:	06030501 	streq	r0, [r3], -r1, lsl #10
    4174:	0608052f 	streq	r0, [r8], -pc, lsr #10
    4178:	06030501 	streq	r0, [r3], -r1, lsl #10
    417c:	09052f30 	stmdbeq	r5, {r4, r5, r8, r9, sl, fp, sp}
    4180:	03050106 	movweq	r0, #20742	; 0x5106
    4184:	0c053006 	stceq	0, cr3, [r5], {6}
    4188:	06050106 	streq	r0, [r5], -r6, lsl #2
    418c:	0604054a 	streq	r0, [r4], -sl, asr #10
    4190:	060a0522 	streq	r0, [sl], -r2, lsr #10
    4194:	06040501 	streq	r0, [r4], -r1, lsl #10
    4198:	01052f21 	tsteq	r5, r1, lsr #30
    419c:	01220306 			; <UNDEFINED> instruction: 0x01220306
    41a0:	03060305 	movweq	r0, #25349	; 0x6305
    41a4:	11054a62 	tstne	r5, r2, ror #20
    41a8:	06050106 	streq	r0, [r5], -r6, lsl #2
    41ac:	06030520 	streq	r0, [r3], -r0, lsr #10
    41b0:	0624063e 			; <UNDEFINED> instruction: 0x0624063e
    41b4:	0204304a 	andeq	r3, r4, #74	; 0x4a
    41b8:	c8032905 	stmdagt	r3, {r0, r2, r8, fp, sp}
    41bc:	3d050101 	stfccs	f0, [r5, #-4]
    41c0:	17050514 	smladne	r5, r4, r5, r0
    41c4:	01063805 	tsteq	r6, r5, lsl #16
    41c8:	19050104 	stmdbne	r5, {r2, r8}
    41cc:	3c7eb403 	cfldrdcc	mvd11, [lr], #-12
    41d0:	38050204 	stmdacc	r5, {r2, r9}
    41d4:	2e01cc03 	cdpcs	12, 0, cr12, cr1, cr3, {0}
    41d8:	03050104 	movweq	r0, #20740	; 0x5104
    41dc:	7eb30306 	cdpvc	3, 11, cr0, cr3, cr6, {0}
    41e0:	19053d2e 	stmdbne	r5, {r1, r2, r3, r5, r8, sl, fp, ip, sp}
    41e4:	03050106 	movweq	r0, #20742	; 0x5106
    41e8:	4b4b062e 	blmi	12c5aa8 <__ccfg+0x12a5b00>
    41ec:	0608054c 	streq	r0, [r8], -ip, asr #10
    41f0:	2b0c0515 	blcs	30564c <__ccfg+0x2e56a4>
    41f4:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    41f8:	09052308 	stmdbeq	r5, {r3, r8, r9, sp}
    41fc:	03051d06 	movweq	r1, #23814	; 0x5d06
    4200:	05020426 	streq	r0, [r2, #-1062]	; 0xfffffbda
    4204:	01bb0329 			; <UNDEFINED> instruction: 0x01bb0329
    4208:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    420c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4210:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4214:	06020501 	streq	r0, [r2], -r1, lsl #10
    4218:	3c7ec103 	ldfccp	f4, [lr], #-12
    421c:	01060505 	tsteq	r6, r5, lsl #10
    4220:	40060205 	andmi	r0, r6, r5, lsl #4
    4224:	0304054b 	movweq	r0, #17739	; 0x454b
    4228:	13052073 	movwne	r2, #20595	; 0x5073
    422c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4230:	053d063c 	ldreq	r0, [sp, #-1596]!	; 0xfffff9c4
    4234:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4238:	05590604 	ldrbeq	r0, [r9, #-1540]	; 0xfffff9fc
    423c:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4240:	665d030b 	ldrbvs	r0, [sp], -fp, lsl #6
    4244:	01000c02 	tsteq	r0, r2, lsl #24
    4248:	00120501 	andseq	r0, r2, r1, lsl #10
    424c:	00000205 	andeq	r0, r0, r5, lsl #4
    4250:	da030000 	ble	c4258 <__ccfg+0xa42b0>
    4254:	01050102 	tsteq	r5, r2, lsl #2
    4258:	00010215 	andeq	r0, r1, r5, lsl r2
    425c:	18050101 	stmdane	r5, {r0, r8}
    4260:	00020500 	andeq	r0, r2, r0, lsl #10
    4264:	03000000 	movweq	r0, #0
    4268:	050102df 	streq	r0, [r1, #-735]	; 0xfffffd21
    426c:	01051502 	tsteq	r5, r2, lsl #10
    4270:	02021306 	andeq	r1, r2, #402653184	; 0x18000000
    4274:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    4278:	00290503 	eoreq	r0, r9, r3, lsl #10
    427c:	00000205 	andeq	r0, r0, r5, lsl #4
    4280:	05190000 	ldreq	r0, [r9, #-0]
    4284:	05051402 	streq	r1, [r5, #-1026]	; 0xfffffbfe
    4288:	03050106 	movweq	r0, #20742	; 0x5106
    428c:	07052106 	streq	r2, [r5, -r6, lsl #2]
    4290:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4294:	05053006 	streq	r3, [r5, #-6]
    4298:	03050106 	movweq	r0, #20742	; 0x5106
    429c:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
    42a0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    42a4:	01053e06 	tsteq	r5, r6, lsl #28
    42a8:	03021306 	movweq	r1, #8966	; 0x2306
    42ac:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    42b0:	00170503 	andseq	r0, r7, r3, lsl #10
    42b4:	00000205 	andeq	r0, r0, r5, lsl #4
    42b8:	12030000 	andne	r0, r3, #0
    42bc:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    42c0:	10061705 	andne	r1, r6, r5, lsl #14
    42c4:	06220205 	strteq	r0, [r2], -r5, lsl #4
    42c8:	0105672f 	tsteq	r5, pc, lsr #14
    42cc:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
    42d0:	0002022d 	andeq	r0, r2, sp, lsr #4
    42d4:	013c0101 	teqeq	ip, r1, lsl #2
    42d8:	00030000 	andeq	r0, r3, r0
    42dc:	000000db 	ldrdeq	r0, [r0], -fp
    42e0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    42e4:	0101000d 	tsteq	r1, sp
    42e8:	00000101 	andeq	r0, r0, r1, lsl #2
    42ec:	00000100 	andeq	r0, r0, r0, lsl #2
    42f0:	6f682f01 	svcvs	0x00682f01
    42f4:	632f656d 			; <UNDEFINED> instruction: 0x632f656d
    42f8:	6c726168 	ldfvse	f6, [r2], #-416	; 0xfffffe60
    42fc:	6e617969 	vnmulvs.f16	s15, s2, s19	; <UNPREDICTABLE>
    4300:	4f2f3332 	svcmi	0x002f3332
    4304:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4308:	502f5445 	eorpl	r5, pc, r5, asr #8
    430c:	534f4349 	movtpl	r4, #62281	; 0xf349
    4310:	6369502f 	cmnvs	r9, #47	; 0x2f
    4314:	502f534f 	eorpl	r5, pc, pc, asr #6
    4318:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    431c:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    4320:	006c6169 	rsbeq	r6, ip, r9, ror #2
    4324:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4328:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    432c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    4330:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4334:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4338:	61652d65 	cmnvs	r5, r5, ror #26
    433c:	312f6962 			; <UNDEFINED> instruction: 0x312f6962
    4340:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
    4344:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    4348:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    434c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    4350:	2f656d6f 	svccs	0x00656d6f
    4354:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    4358:	6179696c 	cmnvs	r9, ip, ror #18
    435c:	2f33326e 	svccs	0x0033326e
    4360:	4f534c4f 	svcmi	0x00534c4f
    4364:	2f54454e 	svccs	0x0054454e
    4368:	4f434950 	svcmi	0x00434950
    436c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4370:	2f534f63 	svccs	0x00534f63
    4374:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4378:	00005858 	andeq	r5, r0, r8, asr r8
    437c:	5f726573 	svcpl	0x00726573
    4380:	6674756f 	ldrbtvs	r7, [r4], -pc, ror #10
    4384:	0100632e 	tsteq	r0, lr, lsr #6
    4388:	74730000 	ldrbtvc	r0, [r3], #-0
    438c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    4390:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4394:	74730000 	ldrbtvc	r0, [r3], #-0
    4398:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    439c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    43a0:	72610000 	rsbvc	r0, r1, #0
    43a4:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    43a8:	00000300 	andeq	r0, r0, r0, lsl #6
    43ac:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    43b0:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    43b4:	00003e6e 	andeq	r3, r0, lr, ror #28
    43b8:	05000000 	streq	r0, [r0, #-0]
    43bc:	0205002c 	andeq	r0, r5, #44	; 0x2c
    43c0:	00001dbc 			; <UNDEFINED> instruction: 0x00001dbc
    43c4:	05010b03 	streq	r0, [r1, #-2819]	; 0xfffff4fd
    43c8:	13131402 	tstne	r3, #33554432	; 0x2000000
    43cc:	062c0514 			; <UNDEFINED> instruction: 0x062c0514
    43d0:	2e017a03 	vmlacs.f32	s14, s2, s6
    43d4:	05260e05 	streq	r0, [r6, #-3589]!	; 0xfffff1fb
    43d8:	03053c05 	movweq	r3, #23557	; 0x5c05
    43dc:	033d3006 	teqeq	sp, #6
    43e0:	0205010a 	andeq	r0, r5, #-2147483646	; 0x80000002
    43e4:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    43e8:	0522060d 	streq	r0, [r2, #-1549]!	; 0xfffff9f3
    43ec:	22061e02 	andcs	r1, r6, #2, 28
    43f0:	01060d05 	tsteq	r6, r5, lsl #26
    43f4:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    43f8:	05320603 	ldreq	r0, [r2, #-1539]!	; 0xfffff9fd
    43fc:	06054e02 	streq	r4, [r5], -r2, lsl #28
    4400:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4404:	0603054a 	streq	r0, [r3], -sl, asr #10
    4408:	02053d21 	andeq	r3, r5, #2112	; 0x840
    440c:	06010524 	streq	r0, [r1], -r4, lsr #10
    4410:	00090213 	andeq	r0, r9, r3, lsl r2
    4414:	014d0101 	cmpeq	sp, r1, lsl #2
    4418:	00030000 	andeq	r0, r3, r0
    441c:	000000da 	ldrdeq	r0, [r0], -sl
    4420:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    4424:	0101000d 	tsteq	r1, sp
    4428:	00000101 	andeq	r0, r0, r1, lsl #2
    442c:	00000100 	andeq	r0, r0, r0, lsl #2
    4430:	6f682f01 	svcvs	0x00682f01
    4434:	632f656d 			; <UNDEFINED> instruction: 0x632f656d
    4438:	6c726168 	ldfvse	f6, [r2], #-416	; 0xfffffe60
    443c:	6e617969 	vnmulvs.f16	s15, s2, s19	; <UNPREDICTABLE>
    4440:	4f2f3332 	svcmi	0x002f3332
    4444:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4448:	502f5445 	eorpl	r5, pc, r5, asr #8
    444c:	534f4349 	movtpl	r4, #62281	; 0xf349
    4450:	6369502f 	cmnvs	r9, #47	; 0x2f
    4454:	502f534f 	eorpl	r5, pc, pc, asr #6
    4458:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    445c:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    4460:	006c6169 	rsbeq	r6, ip, r9, ror #2
    4464:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4468:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    446c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    4470:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4474:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4478:	61652d65 	cmnvs	r5, r5, ror #26
    447c:	312f6962 			; <UNDEFINED> instruction: 0x312f6962
    4480:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
    4484:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    4488:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    448c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    4490:	2f656d6f 	svccs	0x00656d6f
    4494:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    4498:	6179696c 	cmnvs	r9, ip, ror #18
    449c:	2f33326e 	svccs	0x0033326e
    44a0:	4f534c4f 	svcmi	0x00534c4f
    44a4:	2f54454e 	svccs	0x0054454e
    44a8:	4f434950 	svcmi	0x00434950
    44ac:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    44b0:	2f534f63 	svccs	0x00534f63
    44b4:	33314343 	teqcc	r1, #201326593	; 0xc000001
    44b8:	00005858 	andeq	r5, r0, r8, asr r8
    44bc:	5f726573 	svcpl	0x00726573
    44c0:	2e666e69 	cdpcs	14, 6, cr6, cr6, cr9, {3}
    44c4:	00010063 	andeq	r0, r1, r3, rrx
    44c8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    44cc:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    44d0:	00020068 	andeq	r0, r2, r8, rrx
    44d4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    44d8:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    44dc:	00020068 	andeq	r0, r2, r8, rrx
    44e0:	63726100 	cmnvs	r2, #0, 2
    44e4:	00682e68 	rsbeq	r2, r8, r8, ror #28
    44e8:	3c000003 	stccc	0, cr0, [r0], {3}
    44ec:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    44f0:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    44f4:	0000003e 	andeq	r0, r0, lr, lsr r0
    44f8:	2d050000 	stccs	0, cr0, [r5, #-0]
    44fc:	10020500 	andne	r0, r2, r0, lsl #10
    4500:	0300001e 	movweq	r0, #30
    4504:	0205010d 	andeq	r0, r5, #1073741827	; 0x40000003
    4508:	05141317 	ldreq	r1, [r4, #-791]	; 0xfffffce9
    450c:	7803062d 	stmdavc	r3, {r0, r2, r3, r5, r9, sl}
    4510:	05052e01 	streq	r2, [r5, #-3585]	; 0xfffff1ff
    4514:	06020536 			; <UNDEFINED> instruction: 0x06020536
    4518:	06100523 	ldreq	r0, [r0], -r3, lsr #10
    451c:	20050501 	andcs	r0, r5, r1, lsl #10
    4520:	2f060305 	svccs	0x00060305
    4524:	01060f05 	tsteq	r6, r5, lsl #30
    4528:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    452c:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    4530:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    4534:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
    4538:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    453c:	3d210605 	stccc	6, cr0, [r1, #-20]!	; 0xffffffec
    4540:	2d160305 	ldccs	3, cr0, [r6, #-20]	; 0xffffffec
    4544:	304f0205 	subcc	r0, pc, r5, lsl #4
    4548:	01060905 	tsteq	r6, r5, lsl #18
    454c:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    4550:	060c053d 			; <UNDEFINED> instruction: 0x060c053d
    4554:	06020501 	streq	r0, [r2], -r1, lsl #10
    4558:	06010530 			; <UNDEFINED> instruction: 0x06010530
    455c:	030a0513 	movweq	r0, #42259	; 0xa513
    4560:	06026669 	streq	r6, [r2], -r9, ror #12
    4564:	5f010100 	svcpl	0x00010100
    4568:	03000001 	movweq	r0, #1
    456c:	0000bf00 	andeq	fp, r0, r0, lsl #30
    4570:	fb010200 	blx	44d7a <__ccfg+0x24dd2>
    4574:	01000d0e 	tsteq	r0, lr, lsl #26
    4578:	00010101 	andeq	r0, r1, r1, lsl #2
    457c:	00010000 	andeq	r0, r1, r0
    4580:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    4584:	2f656d6f 	svccs	0x00656d6f
    4588:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    458c:	6179696c 	cmnvs	r9, ip, ror #18
    4590:	2f33326e 	svccs	0x0033326e
    4594:	4f534c4f 	svcmi	0x00534c4f
    4598:	2f54454e 	svccs	0x0054454e
    459c:	4f434950 	svcmi	0x00434950
    45a0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    45a4:	2f534f63 	svccs	0x00534f63
    45a8:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    45ac:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    45b0:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    45b4:	73752f00 	cmnvc	r5, #0, 30
    45b8:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    45bc:	63672f62 	cmnvs	r7, #392	; 0x188
    45c0:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    45c4:	6f6e2d6d 	svcvs	0x006e2d6d
    45c8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    45cc:	2f696261 	svccs	0x00696261
    45d0:	332e3031 			; <UNDEFINED> instruction: 0x332e3031
    45d4:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    45d8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    45dc:	2f006564 	svccs	0x00006564
    45e0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    45e4:	6168632f 	cmnvs	r8, pc, lsr #6
    45e8:	79696c72 	stmdbvc	r9!, {r1, r4, r5, r6, sl, fp, sp, lr}^
    45ec:	33326e61 	teqcc	r2, #1552	; 0x610
    45f0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    45f4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    45f8:	4349502f 	movtmi	r5, #36911	; 0x902f
    45fc:	502f534f 	eorpl	r5, pc, pc, asr #6
    4600:	534f6369 	movtpl	r6, #62313	; 0xf369
    4604:	3143432f 	cmpcc	r3, pc, lsr #6
    4608:	00585833 	subseq	r5, r8, r3, lsr r8
    460c:	72657300 	rsbvc	r7, r5, #0, 6
    4610:	2e6e695f 			; <UNDEFINED> instruction: 0x2e6e695f
    4614:	00010063 	andeq	r0, r1, r3, rrx
    4618:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    461c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    4620:	00020068 	andeq	r0, r2, r8, rrx
    4624:	63726100 	cmnvs	r2, #0, 2
    4628:	00682e68 	rsbeq	r2, r8, r8, ror #28
    462c:	00000003 	andeq	r0, r0, r3
    4630:	05002a05 	streq	r2, [r0, #-2565]	; 0xfffff5fb
    4634:	001e7002 	andseq	r7, lr, r2
    4638:	010c0300 	mrseq	r0, LR_mon
    463c:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    4640:	03062a05 	movweq	r2, #27141	; 0x6a05
    4644:	0520017a 	streq	r0, [r0, #-378]!	; 0xfffffe86
    4648:	02053405 	andeq	r3, r5, #83886080	; 0x5000000
    464c:	10053206 	andne	r3, r5, r6, lsl #4
    4650:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4654:	0603052e 	streq	r0, [r3], -lr, lsr #10
    4658:	060f0521 	streq	r0, [pc], -r1, lsr #10
    465c:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    4660:	21060405 	tstcs	r6, r5, lsl #8
    4664:	01060b05 	tsteq	r6, r5, lsl #22
    4668:	4b060405 	blmi	185684 <__ccfg+0x1656dc>
    466c:	01060705 	tsteq	r6, r5, lsl #14
    4670:	21060505 	tstcs	r6, r5, lsl #10
    4674:	1603053d 			; <UNDEFINED> instruction: 0x1603053d
    4678:	4f02052d 	svcmi	0x0002052d
    467c:	01060505 	tsteq	r6, r5, lsl #10
    4680:	2f060305 	svccs	0x00060305
    4684:	01061305 	tsteq	r6, r5, lsl #6
    4688:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    468c:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    4690:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4694:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    4698:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    469c:	593e0602 	ldmdbpl	lr!, {r1, r9, sl}
    46a0:	060c053d 			; <UNDEFINED> instruction: 0x060c053d
    46a4:	06020501 	streq	r0, [r2], -r1, lsl #10
    46a8:	0605052f 	streq	r0, [r5], -pc, lsr #10
    46ac:	06030501 	streq	r0, [r3], -r1, lsl #10
    46b0:	060e052f 	streq	r0, [lr], -pc, lsr #10
    46b4:	22010501 	andcs	r0, r1, #4194304	; 0x400000
    46b8:	03060305 	movweq	r0, #25349	; 0x6305
    46bc:	0a052e75 	beq	150098 <__ccfg+0x1300f0>
    46c0:	6e030106 	adfvss	f0, f3, f6
    46c4:	0007024a 	andeq	r0, r7, sl, asr #4
    46c8:	0baa0101 	bleq	fea84ad4 <_estack+0xdea7fad4>
    46cc:	00030000 	andeq	r0, r3, r0
    46d0:	000001e4 	andeq	r0, r0, r4, ror #3
    46d4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    46d8:	0101000d 	tsteq	r1, sp
    46dc:	00000101 	andeq	r0, r0, r1, lsl #2
    46e0:	00000100 	andeq	r0, r0, r0, lsl #2
    46e4:	6f682f01 	svcvs	0x00682f01
    46e8:	632f656d 			; <UNDEFINED> instruction: 0x632f656d
    46ec:	6c726168 	ldfvse	f6, [r2], #-416	; 0xfffffe60
    46f0:	6e617969 	vnmulvs.f16	s15, s2, s19	; <UNPREDICTABLE>
    46f4:	4f2f3332 	svcmi	0x002f3332
    46f8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    46fc:	502f5445 	eorpl	r5, pc, r5, asr #8
    4700:	534f4349 	movtpl	r4, #62281	; 0xf349
    4704:	6369502f 	cmnvs	r9, #47	; 0x2f
    4708:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    470c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4710:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    4714:	2f656d6f 	svccs	0x00656d6f
    4718:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    471c:	6179696c 	cmnvs	r9, ip, ror #18
    4720:	2f33326e 	svccs	0x0033326e
    4724:	4f534c4f 	svcmi	0x00534c4f
    4728:	2f54454e 	svccs	0x0054454e
    472c:	4f434950 	svcmi	0x00434950
    4730:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4734:	2f534f63 	svccs	0x00534f63
    4738:	33314343 	teqcc	r1, #201326593	; 0xc000001
    473c:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    4740:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4744:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    4748:	72642f45 	rsbvc	r2, r4, #276	; 0x114
    474c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    4750:	0062696c 	rsbeq	r6, r2, ip, ror #18
    4754:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 46a0 <patchGenfskRfe+0x1f8>
    4758:	68632f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    475c:	696c7261 	stmdbvs	ip!, {r0, r5, r6, r9, ip, sp, lr}^
    4760:	326e6179 	rsbcc	r6, lr, #1073741854	; 0x4000001e
    4764:	4c4f2f33 	mcrrmi	15, 3, r2, pc, cr3
    4768:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    476c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4770:	2f534f43 	svccs	0x00534f43
    4774:	4f636950 	svcmi	0x00636950
    4778:	43432f53 	movtmi	r2, #16211	; 0x3f53
    477c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4780:	3143432f 	cmpcc	r3, pc, lsr #6
    4784:	57585833 	smmlarpl	r8, r3, r8, r5
    4788:	2f455241 	svccs	0x00455241
    478c:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    4790:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    4794:	2f007365 	svccs	0x00007365
    4798:	2f727375 	svccs	0x00727375
    479c:	2f62696c 	svccs	0x0062696c
    47a0:	2f636367 	svccs	0x00636367
    47a4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    47a8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    47ac:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    47b0:	30312f69 	eorscc	r2, r1, r9, ror #30
    47b4:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    47b8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    47bc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    47c0:	6f682f00 	svcvs	0x00682f00
    47c4:	632f656d 			; <UNDEFINED> instruction: 0x632f656d
    47c8:	6c726168 	ldfvse	f6, [r2], #-416	; 0xfffffe60
    47cc:	6e617969 	vnmulvs.f16	s15, s2, s19	; <UNPREDICTABLE>
    47d0:	4f2f3332 	svcmi	0x002f3332
    47d4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    47d8:	502f5445 	eorpl	r5, pc, r5, asr #8
    47dc:	534f4349 	movtpl	r4, #62281	; 0xf349
    47e0:	6369502f 	cmnvs	r9, #47	; 0x2f
    47e4:	0000534f 	andeq	r5, r0, pc, asr #6
    47e8:	72706672 	rsbsvc	r6, r0, #119537664	; 0x7200000
    47ec:	632e706f 			; <UNDEFINED> instruction: 0x632e706f
    47f0:	00000100 	andeq	r0, r0, r0, lsl #2
    47f4:	2e636672 	mcrcs	6, 3, r6, cr3, cr2, {3}
    47f8:	00020068 	andeq	r0, r2, r8, rrx
    47fc:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    4800:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4804:	72000002 	andvc	r0, r0, #2
    4808:	61705f66 	cmnvs	r0, r6, ror #30
    480c:	5f686374 	svcpl	0x00686374
    4810:	5f657063 	svcpl	0x00657063
    4814:	666e6567 	strbtvs	r6, [lr], -r7, ror #10
    4818:	682e6b73 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
    481c:	00000300 	andeq	r0, r0, r0, lsl #6
    4820:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    4824:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    4828:	6566725f 	strbvs	r7, [r6, #-607]!	; 0xfffffda1
    482c:	6e65675f 	mcrvs	7, 3, r6, cr5, cr15, {2}
    4830:	2e6b7366 	cdpcs	3, 6, cr7, cr11, cr6, {3}
    4834:	00030068 	andeq	r0, r3, r8, rrx
    4838:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    483c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    4840:	00040068 	andeq	r0, r4, r8, rrx
    4844:	5f667200 	svcpl	0x00667200
    4848:	6c69616d 	stfvse	f6, [r9], #-436	; 0xfffffe4c
    484c:	2e786f62 	cdpcs	15, 7, cr6, cr8, cr2, {3}
    4850:	00020068 	andeq	r0, r2, r8, rrx
    4854:	5f667200 	svcpl	0x00667200
    4858:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    485c:	635f6e6f 	cmpvs	pc, #1776	; 0x6f0
    4860:	682e646d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, sp, lr}
    4864:	00000200 	andeq	r0, r0, r0, lsl #4
    4868:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    486c:	5f706f72 	svcpl	0x00706f72
    4870:	2e646d63 	cdpcs	13, 6, cr6, cr4, cr3, {3}
    4874:	00020068 	andeq	r0, r2, r8, rrx
    4878:	5f667200 	svcpl	0x00667200
    487c:	61746164 	cmnvs	r4, r4, ror #2
    4880:	746e655f 	strbtvc	r6, [lr], #-1375	; 0xfffffaa1
    4884:	682e7972 	stmdavs	lr!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
    4888:	00000200 	andeq	r0, r0, r0, lsl #4
    488c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4890:	0100682e 	tsteq	r0, lr, lsr #16
    4894:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4898:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    489c:	00050068 	andeq	r0, r5, r8, rrx
    48a0:	616d7300 	cmnvs	sp, r0, lsl #6
    48a4:	66727472 			; <UNDEFINED> instruction: 0x66727472
    48a8:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    48ac:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    48b0:	00682e73 	rsbeq	r2, r8, r3, ror lr
    48b4:	00000001 	andeq	r0, r0, r1
    48b8:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
    48bc:	001ee802 	andseq	lr, lr, r2, lsl #16
    48c0:	039f0300 	orrseq	r0, pc, #0, 6
    48c4:	16020501 	strne	r0, [r2], -r1, lsl #10
    48c8:	14063805 	strne	r3, [r6], #-2053	; 0xfffff7fb
    48cc:	05202605 	streq	r2, [r0, #-1541]!	; 0xfffff9fb
    48d0:	26052038 			; <UNDEFINED> instruction: 0x26052038
    48d4:	1e15053c 	mrcne	5, 0, r0, cr5, cr12, {1}
    48d8:	02310105 	eorseq	r0, r1, #1073741825	; 0x40000001
    48dc:	01010008 	tsteq	r1, r8
    48e0:	05002a05 	streq	r2, [r0, #-2565]	; 0xfffff5fb
    48e4:	001f0802 	andseq	r0, pc, r2, lsl #16
    48e8:	06c90300 	strbeq	r0, [r9], r0, lsl #6
    48ec:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    48f0:	062a0514 			; <UNDEFINED> instruction: 0x062a0514
    48f4:	0205200e 	andeq	r2, r5, #14
    48f8:	06040524 	streq	r0, [r4], -r4, lsr #10
    48fc:	17053208 	strne	r3, [r5, -r8, lsl #4]
    4900:	0c050106 	stfeqs	f0, [r5], {6}
    4904:	03080520 	movweq	r0, #34080	; 0x8520
    4908:	04053c20 	streq	r3, [r5], #-3104	; 0xfffff3e0
    490c:	64032106 	strvs	r2, [r3], #-262	; 0xfffffefa
    4910:	06060520 	streq	r0, [r6], -r0, lsr #10
    4914:	05587503 	ldrbeq	r7, [r8, #-1283]	; 0xfffffafd
    4918:	0d030604 	stceq	6, cr0, [r3, #-16]
    491c:	9e010120 	adflssp	f0, f1, f0
    4920:	054a582e 	strbeq	r5, [sl, #-2094]	; 0xfffff7d2
    4924:	fa030601 	blx	c6130 <__ccfg+0xa6188>
    4928:	04050100 	streq	r0, [r5], #-256	; 0xffffff00
    492c:	7f900306 	svcvc	0x00900306
    4930:	0b055d20 	bleq	15bdb8 <__ccfg+0x13be10>
    4934:	20200106 	eorcs	r0, r0, r6, lsl #2
    4938:	2f060405 	svccs	0x00060405
    493c:	03060605 	movweq	r0, #26117	; 0x6605
    4940:	04050163 	streq	r0, [r5], #-355	; 0xfffffe9d
    4944:	2e210306 	cdpcs	3, 2, cr0, cr1, cr6, {0}
    4948:	01060a05 	tsteq	r6, r5, lsl #20
    494c:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    4950:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    4954:	00e20302 	rsceq	r0, r2, r2, lsl #6
    4958:	06050501 	streq	r0, [r5], -r1, lsl #10
    495c:	06030501 	streq	r0, [r3], -r1, lsl #10
    4960:	0f02052f 	svceq	0x0002052f
    4964:	15060805 	strne	r0, [r6, #-2053]	; 0xfffff7fb
    4968:	051d0905 	ldreq	r0, [sp, #-2309]	; 0xfffff6fb
    496c:	a4030604 	strge	r0, [r3], #-1540	; 0xfffff9fc
    4970:	1105207f 	tstne	r5, pc, ror r0
    4974:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4978:	05054106 	streq	r4, [r5, #-262]	; 0xfffffefa
    497c:	07051306 	streq	r1, [r5, -r6, lsl #6]
    4980:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
    4984:	04055b21 	streq	r5, [r5], #-2849	; 0xfffff4df
    4988:	06070552 			; <UNDEFINED> instruction: 0x06070552
    498c:	06050501 	streq	r0, [r5], -r1, lsl #10
    4990:	06010122 	streq	r0, [r1], -r2, lsr #2
    4994:	054a065a 	strbeq	r0, [sl, #-1626]	; 0xfffff9a6
    4998:	0535060d 	ldreq	r0, [r5, #-1549]!	; 0xfffff9f3
    499c:	05052120 	streq	r2, [r5, #-288]	; 0xfffffee0
    49a0:	11053c06 	tstne	r5, r6, lsl #24
    49a4:	08051306 	stmdaeq	r5, {r1, r2, r8, r9, ip}
    49a8:	061b052d 	ldreq	r0, [fp], -sp, lsr #10
    49ac:	061e052d 	ldreq	r0, [lr], -sp, lsr #10
    49b0:	06120501 	ldreq	r0, [r2], -r1, lsl #10
    49b4:	06040520 	streq	r0, [r4], -r0, lsr #10
    49b8:	10030601 	andne	r0, r3, r1, lsl #12
    49bc:	062e053c 			; <UNDEFINED> instruction: 0x062e053c
    49c0:	21140501 	tstcs	r4, r1, lsl #10
    49c4:	051f2e05 	ldreq	r2, [pc, #-3589]	; 3bc7 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xbf>
    49c8:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    49cc:	0501062e 	streq	r0, [r1, #-1582]	; 0xfffff9d2
    49d0:	04052024 	streq	r2, [r5], #-36	; 0xffffffdc
    49d4:	24594b06 	ldrbcs	r4, [r9], #-2822	; 0xfffff4fa
    49d8:	01060a05 	tsteq	r6, r5, lsl #20
    49dc:	0e030805 	cdpeq	8, 0, cr0, cr3, cr5, {0}
    49e0:	06040520 	streq	r0, [r4], -r0, lsr #10
    49e4:	20750322 	rsbscs	r0, r5, r2, lsr #6
    49e8:	01060c05 	tsteq	r6, r5, lsl #24
    49ec:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
    49f0:	0520490c 	streq	r4, [r0, #-2316]!	; 0xfffff6f4
    49f4:	03300604 	teqeq	r0, #4, 12	; 0x400000
    49f8:	032f0111 			; <UNDEFINED> instruction: 0x032f0111
    49fc:	0a055875 	beq	15abd8 <__ccfg+0x13ac30>
    4a00:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4a04:	0a053606 	beq	152224 <__ccfg+0x13227c>
    4a08:	06050106 	streq	r0, [r5], -r6, lsl #2
    4a0c:	1f0a0521 	svcne	0x000a0521
    4a10:	3c20202e 	stccc	0, cr2, [r0], #-184	; 0xffffff48
    4a14:	03060405 	movweq	r0, #25605	; 0x6405
    4a18:	0d056609 	stceq	6, cr6, [r5, #-36]	; 0xffffffdc
    4a1c:	20200106 	eorcs	r0, r0, r6, lsl #2
    4a20:	30060405 	andcc	r0, r6, r5, lsl #8
    4a24:	1e060d05 	cdpne	13, 0, cr0, cr6, cr5, {0}
    4a28:	42060405 	andmi	r0, r6, #83886080	; 0x5000000
    4a2c:	01001f02 	tsteq	r0, r2, lsl #30
    4a30:	00230501 	eoreq	r0, r3, r1, lsl #10
    4a34:	20980205 	addscs	r0, r8, r5, lsl #4
    4a38:	c4030000 	strgt	r0, [r3], #-0
    4a3c:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    4a40:	23051517 	movwcs	r1, #21783	; 0x5517
    4a44:	01780306 	cmneq	r8, r6, lsl #6
    4a48:	06020520 	streq	r0, [r2], -r0, lsr #10
    4a4c:	052e0a03 	streq	r0, [lr, #-2563]!	; 0xfffff5fd
    4a50:	0e051303 	cdpeq	3, 0, cr1, cr5, cr3, {0}
    4a54:	0c050106 	stfeqs	f0, [r5], {6}
    4a58:	2006053c 	andcs	r0, r6, ip, lsr r5
    4a5c:	31060305 	tstcc	r6, r5, lsl #6
    4a60:	01060605 	tsteq	r6, r5, lsl #12
    4a64:	30060405 	andcc	r0, r6, r5, lsl #8
    4a68:	03052606 	movweq	r2, #22022	; 0x5606
    4a6c:	06053a06 	streq	r3, [r5], -r6, lsl #20
    4a70:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4a74:	054b2f06 	strbeq	r2, [fp, #-3846]	; 0xfffff0fa
    4a78:	08053103 	stmdaeq	r5, {r0, r1, r8, ip, sp}
    4a7c:	053c7103 	ldreq	r7, [ip, #-259]!	; 0xfffffefd
    4a80:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    4a84:	20100301 	andscs	r0, r0, r1, lsl #6
    4a88:	01000902 	tsteq	r0, r2, lsl #18
    4a8c:	00160501 	andseq	r0, r6, r1, lsl #10
    4a90:	20e00205 	rsccs	r0, r0, r5, lsl #4
    4a94:	94030000 	strls	r0, [r3], #-0
    4a98:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    4a9c:	06160516 			; <UNDEFINED> instruction: 0x06160516
    4aa0:	240e050e 	strcs	r0, [lr], #-1294	; 0xfffffaf2
    4aa4:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    4aa8:	3d3f0602 	ldccc	6, cr0, [pc, #-8]!	; 4aa8 <patchGenfskRfe+0x600>
    4aac:	4b060105 	blmi	184ec8 <__ccfg+0x164f20>
    4ab0:	01000602 	tsteq	r0, r2, lsl #12
    4ab4:	00170501 	andseq	r0, r7, r1, lsl #10
    4ab8:	21040205 	tstcs	r4, r5, lsl #4
    4abc:	e0030000 	and	r0, r3, r0
    4ac0:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    4ac4:	06170516 			; <UNDEFINED> instruction: 0x06170516
    4ac8:	240e050e 	strcs	r0, [lr], #-1294	; 0xfffffaf2
    4acc:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    4ad0:	043f0602 	ldrteq	r0, [pc], #-1538	; 4ad8 <patchGenfskRfe+0x630>
    4ad4:	06350502 	ldrteq	r0, [r5], -r2, lsl #10
    4ad8:	2e7eb903 	vaddcs.f16	s23, s28, s6	; <UNPREDICTABLE>
    4adc:	02050104 	andeq	r0, r5, #4, 2
    4ae0:	2001c703 	andcs	ip, r1, r3, lsl #14
    4ae4:	303f5a06 	eorscc	r5, pc, r6, lsl #20
    4ae8:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
    4aec:	017eb203 	cmneq	lr, r3, lsl #4
    4af0:	01063505 	tsteq	r6, r5, lsl #10
    4af4:	02050104 	andeq	r0, r5, #4, 2
    4af8:	2001d003 	andcs	sp, r1, r3
    4afc:	35050204 	strcc	r0, [r5, #-516]	; 0xfffffdfc
    4b00:	207eb003 	rsbscs	fp, lr, r3
    4b04:	02050104 	andeq	r0, r5, #4, 2
    4b08:	01d00306 	bicseq	r0, r0, r6, lsl #6
    4b0c:	48053120 	stmdami	r5, {r5, r8, ip, sp}
    4b10:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4b14:	01313106 	teqeq	r1, r6, lsl #2
    4b18:	29050304 	stmdbcs	r5, {r2, r8, r9}
    4b1c:	05015f03 	streq	r5, [r1, #-3843]	; 0xfffff0fd
    4b20:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    4b24:	01040106 	tsteq	r4, r6, lsl #2
    4b28:	03060205 	movweq	r0, #25093	; 0x6205
    4b2c:	0304581c 	movweq	r5, #18460	; 0x481c
    4b30:	5f032905 	svcpl	0x00032905
    4b34:	17050501 	strne	r0, [r5, -r1, lsl #10]
    4b38:	01062d05 	tsteq	r6, r5, lsl #26
    4b3c:	02050104 	andeq	r0, r5, #4, 2
    4b40:	3c1c0306 	ldccc	3, cr0, [ip], {6}
    4b44:	01014b14 	tsteq	r1, r4, lsl fp
    4b48:	05010101 	streq	r0, [r1, #-257]	; 0xfffffeff
    4b4c:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    4b50:	01010009 	tsteq	r1, r9
    4b54:	05000d05 	streq	r0, [r0, #-3333]	; 0xfffff2fb
    4b58:	00216402 	eoreq	r6, r1, r2, lsl #8
    4b5c:	01e10300 	mvneq	r0, r0, lsl #6
    4b60:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    4b64:	054f0602 	strbeq	r0, [pc, #-1538]	; 456a <patchGenfskRfe+0xc2>
    4b68:	0a051303 	beq	14977c <__ccfg+0x1297d4>
    4b6c:	06050106 	streq	r0, [r5], -r6, lsl #2
    4b70:	06030520 	streq	r0, [r3], -r0, lsr #10
    4b74:	06060531 			; <UNDEFINED> instruction: 0x06060531
    4b78:	06040501 	streq	r0, [r4], -r1, lsl #10
    4b7c:	03055b30 	movweq	r5, #23344	; 0x5b30
    4b80:	0308054c 	movweq	r0, #34124	; 0x854c
    4b84:	06053c75 			; <UNDEFINED> instruction: 0x06053c75
    4b88:	01051306 	tsteq	r5, r6, lsl #6
    4b8c:	02200c03 	eoreq	r0, r0, #768	; 0x300
    4b90:	01010005 	tsteq	r1, r5
    4b94:	05001605 	streq	r1, [r0, #-1541]	; 0xfffff9fb
    4b98:	00219c02 	eoreq	r9, r1, r2, lsl #24
    4b9c:	01fe0300 	mvnseq	r0, r0, lsl #6
    4ba0:	16020501 	strne	r0, [r2], -r1, lsl #10
    4ba4:	0e061605 	cfmadd32eq	mvax0, mvfx1, mvfx6, mvfx5
    4ba8:	05320d05 	ldreq	r0, [r2, #-3333]!	; 0xfffff2fb
    4bac:	02052005 	andeq	r2, r5, #5
    4bb0:	04014f06 	streq	r4, [r1], #-3846	; 0xfffff0fa
    4bb4:	03290503 			; <UNDEFINED> instruction: 0x03290503
    4bb8:	0505011b 	streq	r0, [r5, #-283]	; 0xfffffee5
    4bbc:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    4bc0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4bc4:	60030602 	andvs	r0, r3, r2, lsl #12
    4bc8:	05030458 	streq	r0, [r3, #-1112]	; 0xfffffba8
    4bcc:	011b0329 	tsteq	fp, r9, lsr #6
    4bd0:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4bd4:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    4bd8:	06020501 	streq	r0, [r2], -r1, lsl #10
    4bdc:	193c6003 	ldmdbne	ip!, {r0, r1, sp, lr}
    4be0:	0107052f 	tsteq	r7, pc, lsr #10
    4be4:	053c1c05 	ldreq	r1, [ip, #-3077]!	; 0xfffff3fb
    4be8:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
    4bec:	31062e02 	tstcc	r6, r2, lsl #28
    4bf0:	01064805 	tsteq	r6, r5, lsl #16
    4bf4:	05320205 	ldreq	r0, [r2, #-517]!	; 0xfffffdfb
    4bf8:	02051c48 	andeq	r1, r5, #72, 24	; 0x4800
    4bfc:	04312406 	ldrteq	r2, [r1], #-1030	; 0xfffffbfa
    4c00:	03050502 	movweq	r0, #21762	; 0x5502
    4c04:	05017ee4 	streq	r7, [r1, #-3812]	; 0xfffff11c
    4c08:	04010635 	streq	r0, [r1], #-1589	; 0xfffff9cb
    4c0c:	03020501 	movweq	r0, #9473	; 0x2501
    4c10:	043c019f 	ldrteq	r0, [ip], #-415	; 0xfffffe61
    4c14:	03350502 	teqeq	r5, #8388608	; 0x800000
    4c18:	04207ee1 	strteq	r7, [r0], #-3809	; 0xfffff11f
    4c1c:	06020501 	streq	r0, [r2], -r1, lsl #10
    4c20:	20019f03 	andcs	r9, r1, r3, lsl #30
    4c24:	05040432 	streq	r0, [r4, #-1074]	; 0xfffffbce
    4c28:	01100304 	tsteq	r0, r4, lsl #6
    4c2c:	05017303 	streq	r7, [r1, #-771]	; 0xfffffcfd
    4c30:	016b0301 	cmneq	fp, r1, lsl #6
    4c34:	16030405 	strne	r0, [r3], -r5, lsl #8
    4c38:	01610301 	cmneq	r1, r1, lsl #6
    4c3c:	661d0315 			; <UNDEFINED> instruction: 0x661d0315
    4c40:	13016d03 	movwne	r6, #7427	; 0x1d03
    4c44:	06120515 			; <UNDEFINED> instruction: 0x06120515
    4c48:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
    4c4c:	01f10304 	mvnseq	r0, r4, lsl #6
    4c50:	0504042e 	streq	r0, [r4, #-1070]	; 0xfffffbd2
    4c54:	7e8f0312 	mcrvc	3, 4, r0, cr15, cr2, {0}
    4c58:	06040520 	streq	r0, [r4], -r0, lsr #10
    4c5c:	0612052f 	ldreq	r0, [r2], -pc, lsr #10
    4c60:	13053d13 	movwne	r3, #23827	; 0x5d13
    4c64:	12053d3d 	andne	r3, r5, #3904	; 0xf40
    4c68:	04051b3d 	streq	r1, [r5], #-2877	; 0xfffff4c3
    4c6c:	13132f06 	tstne	r3, #6, 30
    4c70:	12051313 	andne	r1, r5, #1275068416	; 0x4c000000
    4c74:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4c78:	11053006 	tstne	r5, r6
    4c7c:	05040106 	streq	r0, [r4, #-262]	; 0xfffffefa
    4c80:	d3031405 	movwle	r1, #13317	; 0x3405
    4c84:	1c055801 	stcne	8, cr5, [r5], {1}
    4c88:	06040521 	streq	r0, [r4], -r1, lsr #10
    4c8c:	13070532 	movwne	r0, #30002	; 0x7532
    4c90:	18060a05 	stmdane	r6, {r0, r2, r9, fp}
    4c94:	0607051b 			; <UNDEFINED> instruction: 0x0607051b
    4c98:	060a052f 	streq	r0, [sl], -pc, lsr #10
    4c9c:	06070513 			; <UNDEFINED> instruction: 0x06070513
    4ca0:	060a052f 	streq	r0, [sl], -pc, lsr #10
    4ca4:	06070513 			; <UNDEFINED> instruction: 0x06070513
    4ca8:	0a05132f 	beq	14996c <__ccfg+0x1299c4>
    4cac:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    4cb0:	2f2f2f21 	svccs	0x002f2f21
    4cb4:	0521212f 	streq	r2, [r1, #-303]!	; 0xfffffed1
    4cb8:	07053004 	streq	r3, [r5, -r4]
    4cbc:	3c780306 	ldclcc	3, cr0, [r8], #-24	; 0xffffffe8
    4cc0:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    4cc4:	05131313 	ldreq	r1, [r3, #-787]	; 0xfffffced
    4cc8:	052e060d 	streq	r0, [lr, #-1549]!	; 0xfffff9f3
    4ccc:	0521060c 	streq	r0, [r1, #-1548]!	; 0xfffff9f4
    4cd0:	06010604 	streq	r0, [r1], -r4, lsl #12
    4cd4:	13131322 	tstne	r3, #-2013265920	; 0x88000000
    4cd8:	0a051313 	beq	14992c <__ccfg+0x129984>
    4cdc:	01040106 	tsteq	r4, r6, lsl #2
    4ce0:	95030905 	strls	r0, [r3, #-2309]	; 0xfffff6fb
    4ce4:	05042e7e 	streq	r2, [r4, #-3710]	; 0xfffff182
    4ce8:	eb030a05 	bl	c7504 <__ccfg+0xa755c>
    4cec:	04052001 	streq	r2, [r5], #-1
    4cf0:	0a052f06 	beq	150910 <__ccfg+0x130968>
    4cf4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4cf8:	0a053d06 	beq	154118 <__ccfg+0x134170>
    4cfc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4d00:	0a053d06 	beq	154120 <__ccfg+0x134178>
    4d04:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4d08:	0a053d06 	beq	154128 <__ccfg+0x134180>
    4d0c:	01040106 	tsteq	r4, r6, lsl #2
    4d10:	03060905 	movweq	r0, #26885	; 0x6905
    4d14:	053c7e91 	ldreq	r7, [ip, #-3729]!	; 0xfffff16f
    4d18:	09053602 	stmdbeq	r5, {r1, r9, sl, ip, sp}
    4d1c:	0302053f 	movweq	r0, #9535	; 0x253f
    4d20:	5c3e3c12 	ldcpl	12, cr3, [lr], #-72	; 0xffffffb8
    4d24:	135a3d43 	cmpne	sl, #4288	; 0x10c0
    4d28:	15063005 	strne	r3, [r6, #-5]
    4d2c:	251d0205 	ldrcs	r0, [sp, #-517]	; 0xfffffdfb
    4d30:	055b061b 	ldrbeq	r0, [fp, #-1563]	; 0xfffff9e5
    4d34:	05010630 	streq	r0, [r1, #-1584]	; 0xfffff9d0
    4d38:	052f0602 	streq	r0, [pc, #-1538]!	; 473e <patchGenfskRfe+0x296>
    4d3c:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
    4d40:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    4d44:	05360601 	ldreq	r0, [r6, #-1537]!	; 0xfffff9ff
    4d48:	2e780302 	cdpcs	3, 7, cr0, cr8, cr2, {0}
    4d4c:	02520105 	subseq	r0, r2, #1073741825	; 0x40000001
    4d50:	01010031 	tsteq	r1, r1, lsr r0
    4d54:	05001e05 	streq	r1, [r0, #-3589]	; 0xfffff1fb
    4d58:	00234402 	eoreq	r4, r3, r2, lsl #8
    4d5c:	03b40300 			; <UNDEFINED> instruction: 0x03b40300
    4d60:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4d64:	01090313 	tsteq	r9, r3, lsl r3
    4d68:	03050204 	movweq	r0, #20996	; 0x5204
    4d6c:	017dee03 	cmneq	sp, r3, lsl #28
    4d70:	1e050104 	adfnes	f0, f5, f4
    4d74:	02860306 	addeq	r0, r6, #402653184	; 0x18000000
    4d78:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    4d7c:	7dfa0330 	ldclvc	3, cr0, [sl, #192]!	; 0xc0
    4d80:	7b32052e 	blvc	c86240 <__ccfg+0xc66298>
    4d84:	1b060305 	blne	1859a0 <__ccfg+0x1659f8>
    4d88:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4d8c:	05010632 	streq	r0, [r1, #-1586]	; 0xfffff9ce
    4d90:	05210609 	streq	r0, [r1, #-1545]!	; 0xfffff9f7
    4d94:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    4d98:	33062003 	movwcc	r2, #24579	; 0x6003
    4d9c:	0a050104 	beq	1451b4 <__ccfg+0x12520c>
    4da0:	028b0306 	addeq	r0, fp, #402653184	; 0x18000000
    4da4:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    4da8:	7df50330 	ldclvc	3, cr0, [r5, #192]!	; 0xc0
    4dac:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4db0:	029e0305 	addseq	r0, lr, #335544320	; 0x14000000
    4db4:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4db8:	7de20330 	stclvc	3, cr0, [r2, #192]!	; 0xc0
    4dbc:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4dc0:	8b030602 	blhi	c65d0 <__ccfg+0xa6628>
    4dc4:	27055802 	strcs	r5, [r5, -r2, lsl #16]
    4dc8:	2d050106 	stfcss	f0, [r5, #-24]	; 0xffffffe8
    4dcc:	030a0526 	movweq	r0, #42278	; 0xa526
    4dd0:	05052e7a 	streq	r2, [r5, #-3706]	; 0xfffff186
    4dd4:	05200f03 	streq	r0, [r0, #-3843]!	; 0xfffff0fd
    4dd8:	2e71030a 	cdpcs	3, 7, cr0, cr1, cr10, {0}
    4ddc:	21060605 	tstcs	r6, r5, lsl #12
    4de0:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    4de4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4de8:	013d0604 	teqeq	sp, r4, lsl #12
    4dec:	19051301 	stmdbne	r5, {r0, r8, r9, ip}
    4df0:	0d051406 	cfstrseq	mvf1, [r5, #-24]	; 0xffffffe8
    4df4:	201d0520 	andscs	r0, sp, r0, lsr #10
    4df8:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    4dfc:	04051e06 	streq	r1, [r5], #-3590	; 0xfffff1fa
    4e00:	07053006 	streq	r3, [r5, -r6]
    4e04:	21050106 	tstcs	r5, r6, lsl #2
    4e08:	4a370520 	bmi	dc6290 <__ccfg+0xda62e8>
    4e0c:	3f060505 	svccc	0x00060505
    4e10:	16061505 	strne	r1, [r6], -r5, lsl #10
    4e14:	052a0805 	streq	r0, [sl, #-2053]!	; 0xfffff7fb
    4e18:	05240605 	streq	r0, [r4, #-1541]!	; 0xfffff9fb
    4e1c:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
    4e20:	1f052013 	svcne	0x00052013
    4e24:	20130520 	andscs	r0, r3, r0, lsr #10
    4e28:	21060505 	tstcs	r6, r5, lsl #10
    4e2c:	01060f05 	tsteq	r6, r5, lsl #30
    4e30:	2f060505 	svccs	0x00060505
    4e34:	056e0405 	strbeq	r0, [lr, #-1029]!	; 0xfffffbfb
    4e38:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    4e3c:	6a030613 	bvs	c6690 <__ccfg+0xa66e8>
    4e40:	0106052e 	tsteq	r6, lr, lsr #10
    4e44:	11060205 	tstne	r6, r5, lsl #4
    4e48:	052f1b05 	streq	r1, [pc, #-2821]!	; 434b <port_confs+0x3b>
    4e4c:	12030605 	andne	r0, r3, #5242880	; 0x500000
    4e50:	0302053c 	movweq	r0, #9532	; 0x253c
    4e54:	05054a0a 	streq	r4, [r5, #-2570]	; 0xfffff5f6
    4e58:	03050106 	movweq	r0, #20742	; 0x5106
    4e5c:	01012106 	tsteq	r1, r6, lsl #2
    4e60:	05010114 	streq	r0, [r1, #-276]	; 0xfffffeec
    4e64:	05310601 	ldreq	r0, [r1, #-1537]!	; 0xfffff9ff
    4e68:	01052b03 	tsteq	r5, r3, lsl #22
    4e6c:	000f0269 	andeq	r0, pc, r9, ror #4
    4e70:	01050101 	tsteq	r5, r1, lsl #2
    4e74:	08020500 	stmdaeq	r2, {r8, sl}
    4e78:	03000024 	movweq	r0, #36	; 0x24
    4e7c:	0101048c 	smlabbeq	r1, ip, r4, r0
    4e80:	03052e06 	movweq	r2, #24070	; 0x5e06
    4e84:	820a0306 	andhi	r0, sl, #402653184	; 0x18000000
    4e88:	01060705 	tsteq	r6, r5, lsl #14
    4e8c:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    4e90:	304c0604 	subcc	r0, ip, r4, lsl #12
    4e94:	054f0305 	strbeq	r0, [pc, #-773]	; 4b97 <patchImageGenfsk+0x3b>
    4e98:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    4e9c:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
    4ea0:	07052f06 	streq	r2, [r5, -r6, lsl #30]
    4ea4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4ea8:	03052106 	movweq	r2, #20742	; 0x5106
    4eac:	060e0536 			; <UNDEFINED> instruction: 0x060e0536
    4eb0:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    4eb4:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
    4eb8:	01062405 	tsteq	r6, r5, lsl #8
    4ebc:	05581b05 	ldrbeq	r1, [r8, #-2821]	; 0xfffff4fb
    4ec0:	05052007 	streq	r2, [r5, #-7]
    4ec4:	13062506 	movwne	r2, #25862	; 0x6506
    4ec8:	051f0c05 	ldreq	r0, [pc, #-3077]	; 42cb <toupper+0x183>
    4ecc:	0c052105 	stfeqs	f2, [r5], {5}
    4ed0:	2105051f 	tstcs	r5, pc, lsl r5
    4ed4:	051f0c05 	ldreq	r0, [pc, #-3077]	; 42d7 <toupper+0x18f>
    4ed8:	01210605 			; <UNDEFINED> instruction: 0x01210605
    4edc:	062e2006 	strteq	r2, [lr], -r6
    4ee0:	030a052e 	movweq	r0, #42286	; 0xa52e
    4ee4:	0d054a72 	vstreq	s8, [r5, #-456]	; 0xfffffe38
    4ee8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4eec:	052f3006 	streq	r3, [pc, #-6]!	; 4eee <_ctype_+0xc2>
    4ef0:	7ede0302 	cdpvc	3, 13, cr0, cr14, cr2, {0}
    4ef4:	05141301 	ldreq	r1, [r4, #-769]	; 0xfffffcff
    4ef8:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4efc:	054e0602 	strbeq	r0, [lr, #-1538]	; 0xfffff9fe
    4f00:	05010627 	streq	r0, [r1, #-1575]	; 0xfffff9d9
    4f04:	0605200a 	streq	r2, [r5], -sl
    4f08:	03052f06 	movweq	r2, #24326	; 0x5f06
    4f0c:	060e0513 			; <UNDEFINED> instruction: 0x060e0513
    4f10:	06130501 	ldreq	r0, [r3], -r1, lsl #10
    4f14:	061b051f 			; <UNDEFINED> instruction: 0x061b051f
    4f18:	06060501 	streq	r0, [r6], -r1, lsl #10
    4f1c:	13030520 	movwne	r0, #13600	; 0x3520
    4f20:	01060e05 	tsteq	r6, r5, lsl #28
    4f24:	1f061305 	svcne	0x00061305
    4f28:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4f2c:	05301602 	ldreq	r1, [r0, #-1538]!	; 0xfffff9fe
    4f30:	019f0305 	orrseq	r0, pc, r5, lsl #6
    4f34:	01011558 	tsteq	r1, r8, asr r5
    4f38:	06080514 			; <UNDEFINED> instruction: 0x06080514
    4f3c:	2e100501 	cfmul32cs	mvfx0, mvfx0, mvfx1
    4f40:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    4f44:	05220606 	streq	r0, [r2, #-1542]!	; 0xfffff9fa
    4f48:	05010629 	streq	r0, [r1, #-1577]	; 0xfffff9d7
    4f4c:	05310605 	ldreq	r0, [r1, #-1541]!	; 0xfffff9fb
    4f50:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    4f54:	05320603 	ldreq	r0, [r2, #-1539]!	; 0xfffff9fd
    4f58:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4f5c:	4b300604 	blmi	c06774 <__ccfg+0xbe67cc>
    4f60:	01060f05 	tsteq	r6, r5, lsl #30
    4f64:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    4f68:	05300605 	ldreq	r0, [r0, #-1541]!	; 0xfffff9fb
    4f6c:	0b053504 	bleq	152384 <__ccfg+0x1323dc>
    4f70:	060e052a 	streq	r0, [lr], -sl, lsr #10
    4f74:	06050501 	streq	r0, [r5], -r1, lsl #10
    4f78:	6b030530 	blvs	c6440 <__ccfg+0xa6498>
    4f7c:	01060705 	tsteq	r6, r5, lsl #14
    4f80:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    4f84:	59330604 	ldmdbpl	r3!, {r2, r9, sl}
    4f88:	0607054b 	streq	r0, [r7], -fp, asr #10
    4f8c:	06030501 	streq	r0, [r3], -r1, lsl #10
    4f90:	2f4a1003 	svccs	0x004a1003
    4f94:	052e1e03 	streq	r1, [lr, #-3587]!	; 0xfffff1fd
    4f98:	05130631 	ldreq	r0, [r3, #-1585]	; 0xfffff9cf
    4f9c:	03053b19 	movweq	r3, #23321	; 0x5b19
    4fa0:	14062106 	strne	r2, [r6], #-262	; 0xfffffefa
    4fa4:	051e3105 	ldreq	r3, [lr, #-261]	; 0xfffffefb
    4fa8:	32220603 	eorcc	r0, r2, #3145728	; 0x300000
    4fac:	01060705 	tsteq	r6, r5, lsl #14
    4fb0:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    4fb4:	055b0603 	ldrbeq	r0, [fp, #-1539]	; 0xfffff9fd
    4fb8:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4fbc:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    4fc0:	03053106 	movweq	r3, #20742	; 0x5106
    4fc4:	06130541 	ldreq	r0, [r3], -r1, asr #10
    4fc8:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    4fcc:	4b060405 	blmi	185fe8 <__ccfg+0x166040>
    4fd0:	01060705 	tsteq	r6, r5, lsl #14
    4fd4:	41060505 	tstmi	r6, r5, lsl #10
    4fd8:	01061b05 	tsteq	r6, r5, lsl #22
    4fdc:	2f060505 	svccs	0x00060505
    4fe0:	01063305 	tsteq	r6, r5, lsl #6
    4fe4:	3e060505 	cfsh32cc	mvfx0, mvfx6, #5
    4fe8:	3f04052f 	svccc	0x0004052f
    4fec:	01060b05 	tsteq	r6, r5, lsl #22
    4ff0:	03060405 	movweq	r0, #25605	; 0x6405
    4ff4:	01013c09 	tsteq	r1, r9, lsl #24
    4ff8:	03060305 	movweq	r0, #25349	; 0x6305
    4ffc:	065800c3 	ldrbeq	r0, [r8], -r3, asr #1
    5000:	206d0342 	rsbcs	r0, sp, r2, asr #6
    5004:	060a053d 			; <UNDEFINED> instruction: 0x060a053d
    5008:	03030501 	movweq	r0, #13569	; 0x3501
    500c:	0a052e0c 	beq	150844 <__ccfg+0x13089c>
    5010:	05207403 	streq	r7, [r0, #-1027]!	; 0xfffffbfd
    5014:	05270603 	streq	r0, [r7, #-1539]!	; 0xfffff9fd
    5018:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    501c:	01220603 			; <UNDEFINED> instruction: 0x01220603
    5020:	0b031501 	bleq	ca42c <__ccfg+0xaa484>
    5024:	06070520 	streq	r0, [r7], -r0, lsr #10
    5028:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    502c:	05581f05 	ldrbeq	r1, [r8, #-3845]	; 0xfffff0fb
    5030:	3e053d07 	cdpcc	13, 0, cr3, cr5, cr7, {0}
    5034:	06040549 	streq	r0, [r4], -r9, asr #10
    5038:	3f01053e 	svccc	0x0001053e
    503c:	00200201 	eoreq	r0, r0, r1, lsl #4
    5040:	1f050101 	svcne	0x00050101
    5044:	e8020500 	stmda	r2, {r8, sl}
    5048:	03000025 	movweq	r0, #37	; 0x25
    504c:	050103eb 	streq	r0, [r1, #-1003]	; 0xfffffc15
    5050:	1f051702 	svcne	0x00051702
    5054:	06050d06 	streq	r0, [r5], -r6, lsl #26
    5058:	2e050525 	cfsh32cs	mvfx0, mvfx5, #21
    505c:	23060305 	movwcs	r0, #25349	; 0x6305
    5060:	30050204 	andcc	r0, r5, r4, lsl #4
    5064:	7eb00306 	cdpvc	3, 11, cr0, cr0, cr6, {0}
    5068:	06030566 	streq	r0, [r3], -r6, ror #10
    506c:	1705051b 	smladne	r5, fp, r5, r0
    5070:	01063005 	tsteq	r6, r5
    5074:	21060a05 	tstcs	r6, r5, lsl #20
    5078:	01060b05 	tsteq	r6, r5, lsl #22
    507c:	04200305 	strteq	r0, [r0], #-773	; 0xfffffcfb
    5080:	06020501 	streq	r0, [r2], -r1, lsl #10
    5084:	2e01d603 	cfmadd32cs	mvax0, mvfx13, mvfx1, mvfx3
    5088:	03050204 	movweq	r0, #20996	; 0x5204
    508c:	017e8103 	cmneq	lr, r3, lsl #2
    5090:	01063205 	tsteq	r6, r5, lsl #4
    5094:	02050104 	andeq	r0, r5, #4, 2
    5098:	2e028203 	cdpcs	2, 0, cr8, cr2, cr3, {0}
    509c:	582e9006 	stmdapl	lr!, {r1, r2, ip, pc}
    50a0:	0114014a 	tsteq	r4, sl, asr #2
    50a4:	06010558 			; <UNDEFINED> instruction: 0x06010558
    50a8:	000c0213 	andeq	r0, ip, r3, lsl r2
    50ac:	25050101 	strcs	r0, [r5, #-257]	; 0xfffffeff
    50b0:	54020500 	strpl	r0, [r2], #-1280	; 0xfffffb00
    50b4:	03000026 	movweq	r0, #38	; 0x26
    50b8:	050107d6 	streq	r0, [r1, #-2006]	; 0xfffff82a
    50bc:	01090302 	tsteq	r9, r2, lsl #6
    50c0:	03062505 	movweq	r2, #25861	; 0x6505
    50c4:	0d050177 	stfeqs	f0, [r5, #-476]	; 0xfffffe24
    50c8:	052e0903 	streq	r0, [lr, #-2307]!	; 0xfffff6fd
    50cc:	20770325 	rsbscs	r0, r7, r5, lsr #6
    50d0:	09030505 	stmdbeq	r3, {r0, r2, r8, sl}
    50d4:	06030520 	streq	r0, [r3], -r0, lsr #10
    50d8:	05360630 	ldreq	r0, [r6, #-1584]!	; 0xfffff9d0
    50dc:	7a030602 	bvc	c68ec <__ccfg+0xa6944>
    50e0:	0605052e 	streq	r0, [r5], -lr, lsr #10
    50e4:	06020501 	streq	r0, [r2], -r1, lsl #10
    50e8:	060e0524 	streq	r0, [lr], -r4, lsr #10
    50ec:	20050501 	andcs	r0, r5, r1, lsl #10
    50f0:	30060305 	andcc	r0, r6, r5, lsl #6
    50f4:	37060705 	strcc	r0, [r6, -r5, lsl #14]
    50f8:	28060205 	stmdacs	r6, {r0, r2, r9}
    50fc:	03060405 	movweq	r0, #25605	; 0x6405
    5100:	05017ea1 	streq	r7, [r1, #-3745]	; 0xfffff15f
    5104:	01df0309 	bicseq	r0, pc, r9, lsl #6
    5108:	030e0520 	movweq	r0, #58656	; 0xe520
    510c:	052e7eac 	streq	r7, [lr, #-3756]!	; 0xfffff154
    5110:	0b052813 	bleq	14f164 <__ccfg+0x12f1bc>
    5114:	2e01cc03 	cdpcs	12, 0, cr12, cr1, cr3, {0}
    5118:	23060205 	movwcs	r0, #25093	; 0x6205
    511c:	017e9b03 	cmneq	lr, r3, lsl #22
    5120:	05131413 	ldreq	r1, [r3, #-1043]	; 0xfffffbed
    5124:	04051303 	streq	r1, [r5], #-771	; 0xfffffcfd
    5128:	03051306 	movweq	r1, #21254	; 0x5306
    512c:	06055d06 	streq	r5, [r5], -r6, lsl #26
    5130:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5134:	03052f06 	movweq	r2, #24326	; 0x5f06
    5138:	060e055a 			; <UNDEFINED> instruction: 0x060e055a
    513c:	06030501 	streq	r0, [r3], -r1, lsl #10
    5140:	06060530 			; <UNDEFINED> instruction: 0x06060530
    5144:	06040501 	streq	r0, [r4], -r1, lsl #10
    5148:	06130530 			; <UNDEFINED> instruction: 0x06130530
    514c:	06030501 	streq	r0, [r3], -r1, lsl #10
    5150:	05131332 	ldreq	r1, [r3, #-818]	; 0xfffffcce
    5154:	05140606 	ldreq	r0, [r4, #-1542]	; 0xfffff9fa
    5158:	06051f17 			; <UNDEFINED> instruction: 0x06051f17
    515c:	1f170521 	svcne	0x00170521
    5160:	052b1305 	streq	r1, [fp, #-773]!	; 0xfffffcfb
    5164:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    5168:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    516c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    5170:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5174:	05260602 	streq	r0, [r6, #-1538]!	; 0xfffff9fe
    5178:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    517c:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    5180:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    5184:	02053c09 	andeq	r3, r5, #2304	; 0x900
    5188:	05053106 	streq	r3, [r5, #-262]	; 0xfffffefa
    518c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5190:	15053106 	strne	r3, [r5, #-262]	; 0xfffffefa
    5194:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5198:	15052106 	strne	r2, [r5, #-262]	; 0xfffffefa
    519c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    51a0:	030b0520 	movweq	r0, #46368	; 0xb520
    51a4:	052001c0 	streq	r0, [r0, #-448]!	; 0xfffffe40
    51a8:	7ec00315 	mcrvc	3, 6, r0, cr0, cr5, {0}
    51ac:	06020520 	streq	r0, [r2], -r0, lsr #10
    51b0:	06190523 	ldreq	r0, [r9], -r3, lsr #10
    51b4:	030b0501 	movweq	r0, #46337	; 0xb501
    51b8:	052001bd 	streq	r0, [r0, #-445]!	; 0xfffffe43
    51bc:	7ec30319 	mcrvc	3, 6, r0, cr3, cr9, {0}
    51c0:	06020520 	streq	r0, [r2], -r0, lsr #10
    51c4:	13151323 	tstne	r5, #-1946157056	; 0x8c000000
    51c8:	06250516 			; <UNDEFINED> instruction: 0x06250516
    51cc:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
    51d0:	0c030602 	stceq	6, cr0, [r3], {2}
    51d4:	06090566 	streq	r0, [r9], -r6, ror #10
    51d8:	030b0501 	movweq	r0, #46337	; 0xb501
    51dc:	052001ae 	streq	r0, [r0, #-430]!	; 0xfffffe52
    51e0:	7ed20309 	cdpvc	3, 13, cr0, cr2, cr9, {0}
    51e4:	0602052e 	streq	r0, [r2], -lr, lsr #10
    51e8:	2e01ab03 	vmlacs.f64	d10, d1, d3
    51ec:	01060905 	tsteq	r6, r5, lsl #18
    51f0:	31060205 	tstcc	r6, r5, lsl #4
    51f4:	01060b05 	tsteq	r6, r5, lsl #22
    51f8:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    51fc:	09052702 	stmdbeq	r5, {r1, r8, r9, sl, sp}
    5200:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    5204:	01220602 			; <UNDEFINED> instruction: 0x01220602
    5208:	01011301 	tsteq	r1, r1, lsl #6
    520c:	15010113 	strne	r0, [r1, #-275]	; 0xfffffeed
    5210:	0c053f4f 	stceq	15, cr3, [r5], {79}	; 0x4f
    5214:	0a050106 	beq	145634 <__ccfg+0x12568c>
    5218:	0602054a 	streq	r0, [r2], -sl, asr #10
    521c:	06050531 			; <UNDEFINED> instruction: 0x06050531
    5220:	06030501 	streq	r0, [r3], -r1, lsl #10
    5224:	60020521 	andvs	r0, r2, r1, lsr #10
    5228:	01062205 	tsteq	r6, r5, lsl #4
    522c:	a0034405 	andge	r4, r3, r5, lsl #8
    5230:	22053c7b 	andcs	r3, r5, #31488	; 0x7b00
    5234:	2004e003 	andcs	lr, r4, r3
    5238:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    523c:	017b9b03 	cmneq	fp, r3, lsl #22
    5240:	01063f05 	tsteq	r6, r5, lsl #30
    5244:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    5248:	01064405 	tsteq	r6, r5, lsl #8
    524c:	052d2e05 	streq	r2, [sp, #-3589]!	; 0xfffff1fb
    5250:	e7030602 	str	r0, [r3, -r2, lsl #12]
    5254:	32200804 	eorcc	r0, r0, #4, 16	; 0x40000
    5258:	01062805 	tsteq	r6, r5, lsl #16
    525c:	05230205 	streq	r0, [r3, #-517]!	; 0xfffffdfb
    5260:	02051d28 	andeq	r1, r5, #40, 26	; 0xa00
    5264:	09053106 	stmdbeq	r5, {r1, r2, r8, ip, sp}
    5268:	4e02052f 	cfsh32mi	mvfx0, mvfx2, #31
    526c:	01063005 	tsteq	r6, r5
    5270:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    5274:	01010026 	tsteq	r1, r6, lsr #32
    5278:	00000249 	andeq	r0, r0, r9, asr #4
    527c:	00ea0003 	rsceq	r0, sl, r3
    5280:	01020000 	mrseq	r0, (UNDEF: 2)
    5284:	000d0efb 	strdeq	r0, [sp], -fp
    5288:	01010101 	tsteq	r1, r1, lsl #2
    528c:	01000000 	mrseq	r0, (UNDEF: 0)
    5290:	2f010000 	svccs	0x00010000
    5294:	2f727375 	svccs	0x00727375
    5298:	2f62696c 	svccs	0x0062696c
    529c:	2f636367 	svccs	0x00636367
    52a0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    52a4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    52a8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    52ac:	30312f69 	eorscc	r2, r1, r9, ror #30
    52b0:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    52b4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    52b8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    52bc:	6f682f00 	svcvs	0x00682f00
    52c0:	632f656d 			; <UNDEFINED> instruction: 0x632f656d
    52c4:	6c726168 	ldfvse	f6, [r2], #-416	; 0xfffffe60
    52c8:	6e617969 	vnmulvs.f16	s15, s2, s19	; <UNPREDICTABLE>
    52cc:	4f2f3332 	svcmi	0x002f3332
    52d0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    52d4:	502f5445 	eorpl	r5, pc, r5, asr #8
    52d8:	534f4349 	movtpl	r4, #62281	; 0xf349
    52dc:	6369502f 	cmnvs	r9, #47	; 0x2f
    52e0:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    52e4:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    52e8:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    52ec:	2f656d6f 	svccs	0x00656d6f
    52f0:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    52f4:	6179696c 	cmnvs	r9, ip, ror #18
    52f8:	2f33326e 	svccs	0x0033326e
    52fc:	4f534c4f 	svcmi	0x00534c4f
    5300:	2f54454e 	svccs	0x0054454e
    5304:	4f434950 	svcmi	0x00434950
    5308:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    530c:	2f534f63 	svccs	0x00534f63
    5310:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    5314:	4e562f73 	mrcmi	15, 2, r2, cr6, cr3, {3}
    5318:	00497465 	subeq	r7, r9, r5, ror #8
    531c:	756c7000 	strbvc	r7, [ip, #-0]!
    5320:	756e5f67 	strbvc	r5, [lr, #-3943]!	; 0xfffff099
    5324:	632e6c6c 			; <UNDEFINED> instruction: 0x632e6c6c
    5328:	00000063 	andeq	r0, r0, r3, rrx
    532c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5330:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5334:	00010068 	andeq	r0, r1, r8, rrx
    5338:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    533c:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    5340:	00010068 	andeq	r0, r1, r8, rrx
    5344:	63726100 	cmnvs	r2, #0, 2
    5348:	00682e68 	rsbeq	r2, r8, r8, ror #28
    534c:	74000002 	strvc	r0, [r0], #-2
    5350:	645f7663 	ldrbvs	r7, [pc], #-1635	; 5358 <__exidx_end+0x42b>
    5354:	2e736665 	cdpcs	6, 7, cr6, cr3, cr5, {3}
    5358:	00030068 	andeq	r0, r3, r8, rrx
    535c:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    5360:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    5364:	003e6e69 	eorseq	r6, lr, r9, ror #28
    5368:	00000000 	andeq	r0, r0, r0
    536c:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
    5370:	0027c802 	eoreq	ip, r7, r2, lsl #16
    5374:	01360300 	teqeq	r6, r0, lsl #6
    5378:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    537c:	050e062b 	streq	r0, [lr, #-1579]	; 0xfffff9d5
    5380:	2b052410 	blcs	14e3c8 <__ccfg+0x12e420>
    5384:	2410051c 	ldrcs	r0, [r0], #-1308	; 0xfffffae4
    5388:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    538c:	02052015 	andeq	r2, r5, #21
    5390:	12053f06 	andne	r3, r5, #6, 30
    5394:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5398:	09053d06 	stmdbeq	r5, {r1, r2, r8, sl, fp, ip, sp}
    539c:	01050106 	tsteq	r5, r6, lsl #2
    53a0:	00040221 	andeq	r0, r4, r1, lsr #4
    53a4:	1f050101 	svcne	0x00050101
    53a8:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    53ac:	03000027 	movweq	r0, #39	; 0x27
    53b0:	050100c2 	streq	r0, [r1, #-194]	; 0xffffff3e
    53b4:	10051402 	andne	r1, r5, r2, lsl #8
    53b8:	1f050106 	svcne	0x00050106
    53bc:	2210051e 	andscs	r0, r0, #125829120	; 0x7800000
    53c0:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    53c4:	2a05210a 	bcs	14d7f4 <__ccfg+0x12d84c>
    53c8:	2e1e052d 	cfmul64cs	mvdx0, mvdx14, mvdx13
    53cc:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
    53d0:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    53d4:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
    53d8:	1e052209 	cdpne	2, 0, cr2, cr5, cr9, {0}
    53dc:	200f051e 	andcs	r0, pc, lr, lsl r5	; <UNPREDICTABLE>
    53e0:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
    53e4:	13060105 	movwne	r0, #24837	; 0x6105
    53e8:	01000302 	tsteq	r0, r2, lsl #6
    53ec:	00370501 	eorseq	r0, r7, r1, lsl #10
    53f0:	28100205 	ldmdacs	r0, {r0, r2, r9}
    53f4:	cc030000 	stcgt	0, cr0, [r3], {-0}
    53f8:	02050100 	andeq	r0, r5, #0, 2
    53fc:	06250514 			; <UNDEFINED> instruction: 0x06250514
    5400:	2e160501 	cfmul32cs	mvfx0, mvfx6, mvfx1
    5404:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    5408:	01010001 	tsteq	r1, r1
    540c:	05002505 	streq	r2, [r0, #-1285]	; 0xfffffafb
    5410:	00281802 	eoreq	r1, r8, r2, lsl #16
    5414:	00d10300 	sbcseq	r0, r1, r0, lsl #6
    5418:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    541c:	14060105 	strne	r0, [r6], #-261	; 0xfffffefb
    5420:	01000202 	tsteq	r0, r2, lsl #4
    5424:	00250501 	eoreq	r0, r5, r1, lsl #10
    5428:	281c0205 	ldmdacs	ip, {r0, r2, r9}
    542c:	d7030000 	strle	r0, [r3, -r0]
    5430:	02050100 	andeq	r0, r5, #0, 2
    5434:	06010514 			; <UNDEFINED> instruction: 0x06010514
    5438:	00020213 	andeq	r0, r2, r3, lsl r2
    543c:	39050101 	stmdbcc	r5, {r0, r8}
    5440:	20020500 	andcs	r0, r2, r0, lsl #10
    5444:	03000028 	movweq	r0, #40	; 0x28
    5448:	02050120 	andeq	r0, r5, #32, 2
    544c:	39051416 	stmdbcc	r5, {r1, r2, r4, sl, ip}
    5450:	017a0306 	cmneq	sl, r6, lsl #6
    5454:	05261005 	streq	r1, [r6, #-5]!
    5458:	207a0339 	rsbscs	r0, sl, r9, lsr r3
    545c:	05260505 	streq	r0, [r6, #-1285]!	; 0xfffffafb
    5460:	207a0339 	rsbscs	r0, sl, r9, lsr r3
    5464:	05260505 	streq	r0, [r6, #-1285]!	; 0xfffffafb
    5468:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    546c:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    5470:	03053c0d 	movweq	r3, #23565	; 0x5c0d
    5474:	06052106 	streq	r2, [r5], -r6, lsl #2
    5478:	0f050106 	svceq	0x00050106
    547c:	04052206 	streq	r2, [r5], #-518	; 0xfffffdfa
    5480:	06120513 			; <UNDEFINED> instruction: 0x06120513
    5484:	06160501 	ldreq	r0, [r6], -r1, lsl #10
    5488:	010f0549 	tsteq	pc, r9, asr #10
    548c:	05130405 	ldreq	r0, [r3, #-1029]	; 0xfffffbfb
    5490:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    5494:	051f0616 	ldreq	r0, [pc, #-1558]	; 4e86 <_ctype_+0x5a>
    5498:	0205010f 	andeq	r0, r5, #-1073741821	; 0xc0000003
    549c:	06100517 			; <UNDEFINED> instruction: 0x06100517
    54a0:	20050501 	andcs	r0, r5, r1, lsl #10
    54a4:	3f060205 	svccc	0x00060205
    54a8:	01061205 	tsteq	r6, r5, lsl #4
    54ac:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    54b0:	01060905 	tsteq	r6, r5, lsl #18
    54b4:	051d0a05 	ldreq	r0, [sp, #-2565]	; 0xfffff5fb
    54b8:	04053201 	streq	r3, [r5], #-513	; 0xfffffdff
    54bc:	20750306 	rsbscs	r0, r5, r6, lsl #6
    54c0:	01000902 	tsteq	r0, r2, lsl #18
    54c4:	00038701 	andeq	r8, r3, r1, lsl #14
    54c8:	09000300 	stmdbeq	r0, {r8, r9}
    54cc:	02000001 	andeq	r0, r0, #1
    54d0:	0d0efb01 	vstreq	d15, [lr, #-4]
    54d4:	01010100 	mrseq	r0, (UNDEF: 17)
    54d8:	00000001 	andeq	r0, r0, r1
    54dc:	01000001 	tsteq	r0, r1
    54e0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 542c <__exidx_end+0x4ff>
    54e4:	68632f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    54e8:	696c7261 	stmdbvs	ip!, {r0, r5, r6, r9, ip, sp, lr}^
    54ec:	326e6179 	rsbcc	r6, lr, #1073741854	; 0x4000001e
    54f0:	4c4f2f33 	mcrrmi	15, 3, r2, pc, cr3
    54f4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    54f8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    54fc:	2f534f43 	svccs	0x00534f43
    5500:	4f636950 	svcmi	0x00636950
    5504:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    5508:	2f736269 	svccs	0x00736269
    550c:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    5510:	2f006c61 	svccs	0x00006c61
    5514:	2f727375 	svccs	0x00727375
    5518:	2f62696c 	svccs	0x0062696c
    551c:	2f636367 	svccs	0x00636367
    5520:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5524:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5528:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    552c:	30312f69 	eorscc	r2, r1, r9, ror #30
    5530:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    5534:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5538:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    553c:	6f682f00 	svcvs	0x00682f00
    5540:	632f656d 			; <UNDEFINED> instruction: 0x632f656d
    5544:	6c726168 	ldfvse	f6, [r2], #-416	; 0xfffffe60
    5548:	6e617969 	vnmulvs.f16	s15, s2, s19	; <UNPREDICTABLE>
    554c:	4f2f3332 	svcmi	0x002f3332
    5550:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5554:	502f5445 	eorpl	r5, pc, r5, asr #8
    5558:	534f4349 	movtpl	r4, #62281	; 0xf349
    555c:	6369502f 	cmnvs	r9, #47	; 0x2f
    5560:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    5564:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    5568:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    556c:	2f656d6f 	svccs	0x00656d6f
    5570:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    5574:	6179696c 	cmnvs	r9, ip, ror #18
    5578:	2f33326e 	svccs	0x0033326e
    557c:	4f534c4f 	svcmi	0x00534c4f
    5580:	2f54454e 	svccs	0x0054454e
    5584:	4f434950 	svcmi	0x00434950
    5588:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    558c:	00534f63 	subseq	r4, r3, r3, ror #30
    5590:	6f667600 	svcvs	0x00667600
    5594:	632e6d72 			; <UNDEFINED> instruction: 0x632e6d72
    5598:	00000100 	andeq	r0, r0, r0, lsl #2
    559c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    55a0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    55a4:	00000200 	andeq	r0, r0, r0, lsl #4
    55a8:	61647473 	smcvs	18243	; 0x4743
    55ac:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    55b0:	00000200 	andeq	r0, r0, r0, lsl #4
    55b4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    55b8:	0300682e 	movweq	r6, #2094	; 0x82e
    55bc:	623c0000 	eorsvs	r0, ip, #0
    55c0:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    55c4:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    55c8:	00000000 	andeq	r0, r0, r0
    55cc:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    55d0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    55d4:	00000004 	andeq	r0, r0, r4
    55d8:	05001505 	streq	r1, [r0, #-1285]	; 0xfffffafb
    55dc:	00286802 	eoreq	r6, r8, r2, lsl #16
    55e0:	010c0300 	mrseq	r0, LR_mon
    55e4:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    55e8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    55ec:	04053c0b 	streq	r3, [r5], #-3083	; 0xfffff3f5
    55f0:	0e055a06 	vmlaeq.f32	s10, s10, s12
    55f4:	03050106 	movweq	r0, #20742	; 0x5106
    55f8:	04053006 	streq	r3, [r5], #-6
    55fc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5600:	00010259 	andeq	r0, r1, r9, asr r2
    5604:	43050101 	movwmi	r0, #20737	; 0x5101
    5608:	88020500 	stmdahi	r2, {r8, sl}
    560c:	19000028 	stmdbne	r0, {r3, r5}
    5610:	06052e06 	streq	r2, [r5], -r6, lsl #28
    5614:	03040520 	movweq	r0, #17696	; 0x4520
    5618:	05052e1d 	streq	r2, [r5, #-3613]	; 0xfffff1e3
    561c:	05202803 	streq	r2, [r0, #-2051]!	; 0xfffff7fd
    5620:	20710307 	rsbscs	r0, r1, r7, lsl #6
    5624:	4a030605 	bmi	c6e40 <__ccfg+0xa6e98>
    5628:	06020520 	streq	r0, [r2], -r0, lsr #10
    562c:	0514133e 	ldreq	r1, [r4, #-830]	; 0xfffffcc2
    5630:	02051803 	andeq	r1, r5, #196608	; 0x30000
    5634:	05011203 	streq	r1, [r1, #-515]	; 0xfffffdfd
    5638:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    563c:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    5640:	05051403 	streq	r1, [r5, #-1027]	; 0xfffffbfd
    5644:	03050106 	movweq	r0, #20742	; 0x5106
    5648:	06053006 	streq	r3, [r5], -r6
    564c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5650:	0b053e06 	bleq	154e70 <__ccfg+0x134ec8>
    5654:	10050106 	andne	r0, r5, r6, lsl #2
    5658:	2105052e 	tstcs	r5, lr, lsr #10
    565c:	052d0705 	streq	r0, [sp, #-1797]!	; 0xfffff8fb
    5660:	3d3d0605 	ldccc	6, cr0, [sp, #-20]!	; 0xffffffec
    5664:	da030405 	ble	c6680 <__ccfg+0xa66d8>
    5668:	a8030100 	stmdage	r3, {r8}
    566c:	05054a7f 	streq	r4, [r5, #-2687]	; 0xfffff581
    5670:	00c20306 	sbceq	r0, r2, r6, lsl #6
    5674:	052f0620 	streq	r0, [pc, #-1568]!	; 505c <__exidx_end+0x12f>
    5678:	05100612 	ldreq	r0, [r0, #-1554]	; 0xfffff9ee
    567c:	43030603 	movwmi	r0, #13827	; 0x3603
    5680:	0606052e 	streq	r0, [r6], -lr, lsr #10
    5684:	06040501 	streq	r0, [r4], -r1, lsl #10
    5688:	0606054c 	streq	r0, [r6], -ip, asr #10
    568c:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
    5690:	21060405 	tstcs	r6, r5, lsl #8
    5694:	c9030505 	stmdbgt	r3, {r0, r2, r8, sl}
    5698:	0559e400 	ldrbeq	lr, [r9, #-1024]	; 0xfffffc00
    569c:	06430604 	strbeq	r0, [r3], -r4, lsl #12
    56a0:	0607052f 	streq	r0, [r7], -pc, lsr #10
    56a4:	06050501 	streq	r0, [r5], -r1, lsl #10
    56a8:	060c0530 			; <UNDEFINED> instruction: 0x060c0530
    56ac:	31010501 	tstcc	r1, r1, lsl #10
    56b0:	a9030405 	stmdbge	r3, {r0, r2, sl}
    56b4:	05053c7f 	streq	r3, [r5, #-3199]	; 0xfffff381
    56b8:	0f056806 	svceq	0x00056806
    56bc:	13050501 	movwne	r0, #21761	; 0x5501
    56c0:	13060c05 	movwne	r0, #27653	; 0x6c05
    56c4:	052d1205 	streq	r1, [sp, #-517]!	; 0xfffffdfb
    56c8:	052f0605 	streq	r0, [pc, #-1541]!	; 50cb <__exidx_end+0x19e>
    56cc:	0514060e 	ldreq	r0, [r4, #-1550]	; 0xfffff9f2
    56d0:	052d0606 	streq	r0, [sp, #-1542]!	; 0xfffff9fa
    56d4:	0513060e 	ldreq	r0, [r3, #-1550]	; 0xfffff9f2
    56d8:	06052e14 			; <UNDEFINED> instruction: 0x06052e14
    56dc:	055a062d 	ldrbeq	r0, [sl, #-1581]	; 0xfffff9d3
    56e0:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    56e4:	05390614 	ldreq	r0, [r9, #-1556]!	; 0xfffff9ec
    56e8:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    56ec:	052e0612 	streq	r0, [lr, #-1554]!	; 0xfffff9ee
    56f0:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    56f4:	09030605 	stmdbeq	r3, {r0, r2, r9, sl}
    56f8:	12051320 	andne	r1, r5, #32, 6	; 0x80000000
    56fc:	08050106 	stmdaeq	r5, {r1, r2, r8}
    5700:	2d09052f 	cfstr32cs	mvfx0, [r9, #-188]	; 0xffffff44
    5704:	2f060505 	svccs	0x00060505
    5708:	01060805 	tsteq	r6, r5, lsl #16
    570c:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
    5710:	59300606 	ldmdbpl	r0!, {r1, r2, r9, sl}
    5714:	01060a05 	tsteq	r6, r5, lsl #20
    5718:	4c060505 	cfstr32mi	mvfx0, [r6], {5}
    571c:	03060c05 	movweq	r0, #27653	; 0x6c05
    5720:	0505016f 	streq	r0, [r5, #-367]	; 0xfffffe91
    5724:	06201103 	strteq	r1, [r0], -r3, lsl #2
    5728:	062e012e 	strteq	r0, [lr], -lr, lsr #2
    572c:	014a063c 	cmpeq	sl, ip, lsr r6
    5730:	20208274 	eorcs	r8, r0, r4, ror r2
    5734:	252e204a 	strcs	r2, [lr, #-74]!	; 0xffffffb6
    5738:	01060705 	tsteq	r6, r5, lsl #14
    573c:	21060505 	tstcs	r6, r5, lsl #10
    5740:	01060805 	tsteq	r6, r5, lsl #16
    5744:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    5748:	13300606 	teqne	r0, #6291456	; 0x600000
    574c:	14060905 	strne	r0, [r6], #-2309	; 0xfffff6fb
    5750:	051f0a05 	ldreq	r0, [pc, #-2565]	; 4d53 <patchImageGenfsk+0x1f7>
    5754:	06052d08 	streq	r2, [r5], -r8, lsl #26
    5758:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
    575c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    5760:	07052013 	smladeq	r5, r3, r0, r2
    5764:	05593f06 	ldrbeq	r3, [r9, #-3846]	; 0xfffff0fa
    5768:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    576c:	05300606 	ldreq	r0, [r0, #-1542]!	; 0xfffff9fa
    5770:	6f030605 	svcvs	0x00030605
    5774:	03060501 	movweq	r0, #25857	; 0x6501
    5778:	2e062011 	mcrcs	0, 0, r2, cr6, cr1, {0}
    577c:	3c062e01 	stccc	14, cr2, [r6], {1}
    5780:	66014a06 	strvs	r4, [r1], -r6, lsl #20
    5784:	582e0166 	stmdapl	lr!, {r1, r2, r5, r6, r8}
    5788:	0c052e20 	stceq	14, cr2, [r5], {32}
    578c:	060f0521 	streq	r0, [pc], -r1, lsr #10
    5790:	06060501 	streq	r0, [r6], -r1, lsl #10
    5794:	0513132f 	ldreq	r1, [r3, #-815]	; 0xfffffcd1
    5798:	0514060d 	ldreq	r0, [r4, #-1549]	; 0xfffff9f3
    579c:	08052d0a 	stmdaeq	r5, {r1, r3, r8, sl, fp, sp}
    57a0:	0606052d 	streq	r0, [r6], -sp, lsr #10
    57a4:	14070521 	strne	r0, [r7], #-1313	; 0xfffffadf
    57a8:	13060f05 	movwne	r0, #28421	; 0x6f05
    57ac:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
    57b0:	5a062d07 	bpl	190bd4 <__ccfg+0x170c2c>
    57b4:	01060a05 	tsteq	r6, r5, lsl #20
    57b8:	47061505 	strmi	r1, [r6, -r5, lsl #10]
    57bc:	01061705 	tsteq	r6, r5, lsl #14
    57c0:	2e061305 	cdpcs	3, 0, cr1, cr6, cr5, {0}
    57c4:	13060705 	movwne	r0, #26373	; 0x6705
    57c8:	26060605 	strcs	r0, [r6], -r5, lsl #12
    57cc:	4f050559 	svcmi	0x00050559
    57d0:	09051313 	stmdbeq	r5, {r0, r1, r4, r8, r9, ip}
    57d4:	05051106 	streq	r1, [r5, #-262]	; 0xfffffefa
    57d8:	134f062f 	movtne	r0, #63023	; 0xf62f
    57dc:	4a0b0513 	bmi	2c6c30 <__ccfg+0x2a6c88>
    57e0:	01060c05 	tsteq	r6, r5, lsl #24
    57e4:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
    57e8:	4b3d0606 	blmi	f47008 <__ccfg+0xf27060>
    57ec:	03060a05 	movweq	r0, #27141	; 0x6a05
    57f0:	02207fad 	eoreq	r7, r0, #692	; 0x2b4
    57f4:	01010007 	tsteq	r1, r7
    57f8:	05003505 	streq	r3, [r0, #-1285]	; 0xfffffafb
    57fc:	002aac02 	eoreq	sl, sl, r2, lsl #24
    5800:	01900300 	orrseq	r0, r0, r0, lsl #6
    5804:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    5808:	06350514 			; <UNDEFINED> instruction: 0x06350514
    580c:	05052e0e 	streq	r2, [r5, #-3598]	; 0xfffff1f2
    5810:	06030532 			; <UNDEFINED> instruction: 0x06030532
    5814:	01056730 	tsteq	r5, r0, lsr r7
    5818:	01120306 	tsteq	r2, r6, lsl #6
    581c:	03060205 	movweq	r0, #25093	; 0x6205
    5820:	08053c72 	stmdaeq	r5, {r1, r4, r5, r6, sl, fp, ip, sp}
    5824:	06050106 	streq	r0, [r5], -r6, lsl #2
    5828:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    582c:	0615053f 			; <UNDEFINED> instruction: 0x0615053f
    5830:	3c050501 	cfstr32cc	mvfx0, [r5], {1}
    5834:	40060205 	andmi	r0, r6, r5, lsl #4
    5838:	01060b05 	tsteq	r6, r5, lsl #22
    583c:	05580505 	ldrbeq	r0, [r8, #-1285]	; 0xfffffafb
    5840:	0505200b 	streq	r2, [r5, #-11]
    5844:	06030520 	streq	r0, [r3], -r0, lsr #10
    5848:	02133d22 	andseq	r3, r3, #2176	; 0x880
    584c:	01010002 	tsteq	r1, r2
    5850:	00000264 	andeq	r0, r0, r4, ror #4
    5854:	00d80003 	sbcseq	r0, r8, r3
    5858:	01020000 	mrseq	r0, (UNDEF: 2)
    585c:	000d0efb 	strdeq	r0, [sp], -fp
    5860:	01010101 	tsteq	r1, r1, lsl #2
    5864:	01000000 	mrseq	r0, (UNDEF: 0)
    5868:	2f010000 	svccs	0x00010000
    586c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5870:	6168632f 	cmnvs	r8, pc, lsr #6
    5874:	79696c72 	stmdbvc	r9!, {r1, r4, r5, r6, sl, fp, sp, lr}^
    5878:	33326e61 	teqcc	r2, #1552	; 0x610
    587c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5880:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5884:	4349502f 	movtmi	r5, #36911	; 0x902f
    5888:	502f534f 	eorpl	r5, pc, pc, asr #6
    588c:	534f6369 	movtpl	r6, #62313	; 0xf369
    5890:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    5894:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    5898:	61697265 	cmnvs	r9, r5, ror #4
    589c:	752f006c 	strvc	r0, [pc, #-108]!	; 5838 <__exidx_end+0x90b>
    58a0:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 56dc <__exidx_end+0x7af>
    58a4:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    58a8:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    58ac:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    58b0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    58b4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    58b8:	2e30312f 	rsfcssp	f3, f0, #10.0
    58bc:	2f312e33 	svccs	0x00312e33
    58c0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    58c4:	00656475 	rsbeq	r6, r5, r5, ror r4
    58c8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5814 <__exidx_end+0x8e7>
    58cc:	68632f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    58d0:	696c7261 	stmdbvs	ip!, {r0, r5, r6, r9, ip, sp, lr}^
    58d4:	326e6179 	rsbcc	r6, lr, #1073741854	; 0x4000001e
    58d8:	4c4f2f33 	mcrrmi	15, 3, r2, pc, cr3
    58dc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    58e0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    58e4:	2f534f43 	svccs	0x00534f43
    58e8:	4f636950 	svcmi	0x00636950
    58ec:	43432f53 	movtmi	r2, #16211	; 0x3f53
    58f0:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    58f4:	73760000 	cmnvc	r6, #0
    58f8:	2e6e6163 	powcsez	f6, f6, f3
    58fc:	00010063 	andeq	r0, r1, r3, rrx
    5900:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5904:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5908:	00020068 	andeq	r0, r2, r8, rrx
    590c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5910:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    5914:	00020068 	andeq	r0, r2, r8, rrx
    5918:	63726100 	cmnvs	r2, #0, 2
    591c:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5920:	3c000003 	stccc	0, cr0, [r0], {3}
    5924:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5928:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    592c:	0000003e 	andeq	r0, r0, lr, lsr r0
    5930:	3a050000 	bcc	145938 <__ccfg+0x125990>
    5934:	fc020500 	stc2	5, cr0, [r2], {-0}
    5938:	1900002a 	stmdbne	r0, {r1, r3, r5}
    593c:	03140205 	tsteq	r4, #1342177280	; 0x50000000
    5940:	0505013a 	streq	r0, [r5, #-314]	; 0xfffffec6
    5944:	3a050106 	bcc	145d64 <__ccfg+0x125dbc>
    5948:	05204403 	streq	r4, [r0, #-1027]!	; 0xfffffbfd
    594c:	2e3c0305 	cdpcs	3, 3, cr0, cr12, cr5, {0}
    5950:	053c1205 	ldreq	r1, [ip, #-517]!	; 0xfffffdfb
    5954:	16054005 	strne	r4, [r5], -r5
    5958:	05200e03 	streq	r0, [r0, #-3587]!	; 0xfffff1fd
    595c:	2e11030b 	cdpcs	3, 1, cr0, cr1, cr11, {0}
    5960:	03060805 	movweq	r0, #26629	; 0x6805
    5964:	09053c62 	stmdbeq	r5, {r1, r5, r6, sl, fp, ip, sp}
    5968:	08050106 	stmdaeq	r5, {r1, r2, r8}
    596c:	0603052e 	streq	r0, [r3], -lr, lsr #10
    5970:	06060521 	streq	r0, [r6], -r1, lsr #10
    5974:	06030501 	streq	r0, [r3], -r1, lsl #10
    5978:	060b0530 			; <UNDEFINED> instruction: 0x060b0530
    597c:	200f0501 	andcs	r0, pc, r1, lsl #10
    5980:	05200305 	streq	r0, [r0, #-773]!	; 0xfffffcfb
    5984:	ac2e0301 	stcge	3, cr0, [lr], #-4
    5988:	52030305 	andpl	r0, r3, #335544320	; 0x14000000
    598c:	030b053c 	movweq	r0, #46396	; 0xb53c
    5990:	0a05741b 	beq	162a04 <__ccfg+0x142a5c>
    5994:	0b052e06 	bleq	1511b4 <__ccfg+0x13120c>
    5998:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    599c:	0705ad06 	streq	sl, [r5, -r6, lsl #26]
    59a0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    59a4:	07053006 	streq	r3, [r5, -r6]
    59a8:	08051506 	stmdaeq	r5, {r1, r2, r8, sl, ip}
    59ac:	2d06051e 	cfstr32cs	mvfx0, [r6, #-120]	; 0xffffff88
    59b0:	2f060405 	svccs	0x00060405
    59b4:	06070514 			; <UNDEFINED> instruction: 0x06070514
    59b8:	060b0501 	streq	r0, [fp], -r1, lsl #10
    59bc:	060d052f 	streq	r0, [sp], -pc, lsr #10
    59c0:	660c0501 	strvs	r0, [ip], -r1, lsl #10
    59c4:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
    59c8:	0b052e2b 	bleq	15127c <__ccfg+0x1312d4>
    59cc:	060a054e 	streq	r0, [sl], -lr, asr #10
    59d0:	060b053c 			; <UNDEFINED> instruction: 0x060b053c
    59d4:	06040501 	streq	r0, [r4], -r1, lsl #10
    59d8:	06180583 	ldreq	r0, [r8], -r3, lsl #11
    59dc:	06040501 	streq	r0, [r4], -r1, lsl #10
    59e0:	0609054b 	streq	r0, [r9], -fp, asr #10
    59e4:	06040501 	streq	r0, [r4], -r1, lsl #10
    59e8:	0311052f 	tsteq	r1, #197132288	; 0xbc00000
    59ec:	063c2059 			; <UNDEFINED> instruction: 0x063c2059
    59f0:	2e062e66 	cdpcs	14, 0, cr2, cr6, cr6, {3}
    59f4:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    59f8:	20013c66 	andcs	r3, r1, r6, ror #24
    59fc:	3c060106 	stfccs	f0, [r6], {6}
    5a00:	4a063c74 	bmi	194bd8 <__ccfg+0x174c30>
    5a04:	21743c06 	cmncs	r4, r6, lsl #24
    5a08:	013c902e 	teqeq	ip, lr, lsr #32
    5a0c:	0601062e 	streq	r0, [r1], -lr, lsr #12
    5a10:	2190822e 	orrscs	r8, r0, lr, lsr #4
    5a14:	0690064a 	ldreq	r0, [r0], sl, asr #12
    5a18:	2e013c58 	mcrcs	12, 0, r3, cr1, cr8, {2}
    5a1c:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    5a20:	6682063c 			; <UNDEFINED> instruction: 0x6682063c
    5a24:	3c3c3c06 	ldccc	12, cr3, [ip], #-24	; 0xffffffe8
    5a28:	7704053c 	smladxvc	r4, ip, r5, r0
    5a2c:	01060c05 	tsteq	r6, r5, lsl #24
    5a30:	05201005 	streq	r1, [r0, #-5]!
    5a34:	06bc0616 	ssateq	r0, #29, r6, lsl #12
    5a38:	2e062e66 	cdpcs	14, 0, cr2, cr6, cr6, {3}
    5a3c:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    5a40:	2e013c3c 	mcrcs	12, 0, r3, cr1, cr12, {1}
    5a44:	3c060106 	stfccs	f0, [r6], {6}
    5a48:	06923c82 	ldreq	r3, [r2], r2, lsl #25
    5a4c:	3c580690 	mrrccc	6, 9, r0, r8, cr0
    5a50:	06012e01 	streq	r2, [r1], -r1, lsl #28
    5a54:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    5a58:	3c066674 	stccc	6, cr6, [r6], {116}	; 0x74
    5a5c:	723c3c3c 	eorsvc	r3, ip, #60, 24	; 0x3c00
    5a60:	2e063c06 	cdpcs	12, 0, cr3, cr6, cr6, {0}
    5a64:	903c3d74 	eorsls	r3, ip, r4, ror sp
    5a68:	062e013c 			; <UNDEFINED> instruction: 0x062e013c
    5a6c:	902e0601 	eorls	r0, lr, r1, lsl #12
    5a70:	04052174 	streq	r2, [r5], #-372	; 0xfffffe8c
    5a74:	0b05144f 	bleq	14abb8 <__ccfg+0x12ac10>
    5a78:	07050106 	streq	r0, [r5, -r6, lsl #2]
    5a7c:	0604052e 	streq	r0, [r4], -lr, lsr #10
    5a80:	0608053e 			; <UNDEFINED> instruction: 0x0608053e
    5a84:	2d060513 	cfstr32cs	mvfx0, [r6, #-76]	; 0xffffffb4
    5a88:	21060405 	tstcs	r6, r5, lsl #8
    5a8c:	06090513 			; <UNDEFINED> instruction: 0x06090513
    5a90:	06040501 	streq	r0, [r4], -r1, lsl #10
    5a94:	060b0521 	streq	r0, [fp], -r1, lsr #10
    5a98:	06070524 	streq	r0, [r7], -r4, lsr #10
    5a9c:	05740903 	ldrbeq	r0, [r4, #-2307]!	; 0xfffff6fd
    5aa0:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    5aa4:	0a053e0b 	beq	1552d8 <__ccfg+0x135330>
    5aa8:	05665403 	strbeq	r5, [r6, #-1027]!	; 0xfffffbfd
    5aac:	4a0a0311 	bmi	2866f8 <__ccfg+0x266750>
    5ab0:	02511605 	subseq	r1, r1, #5242880	; 0x500000
    5ab4:	01010003 	tsteq	r1, r3
    5ab8:	00000170 	andeq	r0, r0, r0, ror r1
    5abc:	00f50003 	rscseq	r0, r5, r3
    5ac0:	01020000 	mrseq	r0, (UNDEF: 2)
    5ac4:	000d0efb 	strdeq	r0, [sp], -fp
    5ac8:	01010101 	tsteq	r1, r1, lsl #2
    5acc:	01000000 	mrseq	r0, (UNDEF: 0)
    5ad0:	2f010000 	svccs	0x00010000
    5ad4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5ad8:	6168632f 	cmnvs	r8, pc, lsr #6
    5adc:	79696c72 	stmdbvc	r9!, {r1, r4, r5, r6, sl, fp, sp, lr}^
    5ae0:	33326e61 	teqcc	r2, #1552	; 0x610
    5ae4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5ae8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5aec:	4349502f 	movtmi	r5, #36911	; 0x902f
    5af0:	502f534f 	eorpl	r5, pc, pc, asr #6
    5af4:	534f6369 	movtpl	r6, #62313	; 0xf369
    5af8:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    5afc:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    5b00:	61697265 	cmnvs	r9, r5, ror #4
    5b04:	752f006c 	strvc	r0, [pc, #-108]!	; 5aa0 <__exidx_end+0xb73>
    5b08:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 5944 <__exidx_end+0xa17>
    5b0c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    5b10:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    5b14:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5b18:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5b1c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5b20:	2e30312f 	rsfcssp	f3, f0, #10.0
    5b24:	2f312e33 	svccs	0x00312e33
    5b28:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5b2c:	00656475 	rsbeq	r6, r5, r5, ror r4
    5b30:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5a7c <__exidx_end+0xb4f>
    5b34:	68632f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    5b38:	696c7261 	stmdbvs	ip!, {r0, r5, r6, r9, ip, sp, lr}^
    5b3c:	326e6179 	rsbcc	r6, lr, #1073741854	; 0x4000001e
    5b40:	4c4f2f33 	mcrrmi	15, 3, r2, pc, cr3
    5b44:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5b48:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5b4c:	2f534f43 	svccs	0x00534f43
    5b50:	4f636950 	svcmi	0x00636950
    5b54:	43432f53 	movtmi	r2, #16211	; 0x3f53
    5b58:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    5b5c:	6f682f00 	svcvs	0x00682f00
    5b60:	632f656d 			; <UNDEFINED> instruction: 0x632f656d
    5b64:	6c726168 	ldfvse	f6, [r2], #-416	; 0xfffffe60
    5b68:	6e617969 	vnmulvs.f16	s15, s2, s19	; <UNPREDICTABLE>
    5b6c:	4f2f3332 	svcmi	0x002f3332
    5b70:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5b74:	502f5445 	eorpl	r5, pc, r5, asr #8
    5b78:	534f4349 	movtpl	r4, #62281	; 0xf349
    5b7c:	6369502f 	cmnvs	r9, #47	; 0x2f
    5b80:	0000534f 	andeq	r5, r0, pc, asr #6
    5b84:	756f5f5f 	strbvc	r5, [pc, #-3935]!	; 4c2d <patchImageGenfsk+0xd1>
    5b88:	72657374 	rsbvc	r7, r5, #116, 6	; 0xd0000001
    5b8c:	2e6c6169 	powcsez	f6, f4, #1.0
    5b90:	00010063 	andeq	r0, r1, r3, rrx
    5b94:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5b98:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5b9c:	00020068 	andeq	r0, r2, r8, rrx
    5ba0:	63726100 	cmnvs	r2, #0, 2
    5ba4:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5ba8:	73000003 	movwvc	r0, #3
    5bac:	6f697379 	svcvs	0x00697379
    5bb0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    5bb4:	05000000 	streq	r0, [r0, #-0]
    5bb8:	02050001 	andeq	r0, r5, #1
    5bbc:	00002e90 	muleq	r0, r0, lr
    5bc0:	01011c03 	tsteq	r1, r3, lsl #24
    5bc4:	3c062006 	stccc	0, cr2, [r6], {6}
    5bc8:	013c2603 	teqeq	ip, r3, lsl #12
    5bcc:	5f030205 	svcpl	0x00030205
    5bd0:	15131358 	ldrne	r1, [r3, #-856]	; 0xfffffca8
    5bd4:	05130101 	ldreq	r0, [r3, #-257]	; 0xfffffeff
    5bd8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5bdc:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    5be0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5be4:	052f0603 	streq	r0, [pc, #-1539]!	; 55e9 <__exidx_end+0x6bc>
    5be8:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    5bec:	0a053c07 	beq	154c10 <__ccfg+0x134c68>
    5bf0:	06020528 	streq	r0, [r2], -r8, lsr #10
    5bf4:	060a052e 	streq	r0, [sl], -lr, lsr #10
    5bf8:	06020501 	streq	r0, [r2], -r1, lsl #10
    5bfc:	06060583 	streq	r0, [r6], -r3, lsl #11
    5c00:	211f2101 	tstcs	pc, r1, lsl #2
    5c04:	0602051f 			; <UNDEFINED> instruction: 0x0602051f
    5c08:	06060521 	streq	r0, [r6], -r1, lsr #10
    5c0c:	06020501 	streq	r0, [r2], -r1, lsl #10
    5c10:	06050521 	streq	r0, [r5], -r1, lsr #10
    5c14:	06030501 	streq	r0, [r3], -r1, lsl #10
    5c18:	74033d30 	strvc	r3, [r3], #-3376	; 0xfffff2d0
    5c1c:	060d054a 	streq	r0, [sp], -sl, asr #10
    5c20:	20110501 	andscs	r0, r1, r1, lsl #10
    5c24:	02200705 	eoreq	r0, r0, #1310720	; 0x140000
    5c28:	01010008 	tsteq	r1, r8
    5c2c:	0000021a 	andeq	r0, r0, sl, lsl r2
    5c30:	00f40003 	rscseq	r0, r4, r3
    5c34:	01020000 	mrseq	r0, (UNDEF: 2)
    5c38:	000d0efb 	strdeq	r0, [sp], -fp
    5c3c:	01010101 	tsteq	r1, r1, lsl #2
    5c40:	01000000 	mrseq	r0, (UNDEF: 0)
    5c44:	2f010000 	svccs	0x00010000
    5c48:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5c4c:	6168632f 	cmnvs	r8, pc, lsr #6
    5c50:	79696c72 	stmdbvc	r9!, {r1, r4, r5, r6, sl, fp, sp, lr}^
    5c54:	33326e61 	teqcc	r2, #1552	; 0x610
    5c58:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5c5c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5c60:	4349502f 	movtmi	r5, #36911	; 0x902f
    5c64:	502f534f 	eorpl	r5, pc, pc, asr #6
    5c68:	534f6369 	movtpl	r6, #62313	; 0xf369
    5c6c:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    5c70:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    5c74:	61697265 	cmnvs	r9, r5, ror #4
    5c78:	752f006c 	strvc	r0, [pc, #-108]!	; 5c14 <__exidx_end+0xce7>
    5c7c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 5ab8 <__exidx_end+0xb8b>
    5c80:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    5c84:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    5c88:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5c8c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5c90:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5c94:	2e30312f 	rsfcssp	f3, f0, #10.0
    5c98:	2f312e33 	svccs	0x00312e33
    5c9c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5ca0:	00656475 	rsbeq	r6, r5, r5, ror r4
    5ca4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5bf0 <__exidx_end+0xcc3>
    5ca8:	68632f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    5cac:	696c7261 	stmdbvs	ip!, {r0, r5, r6, r9, ip, sp, lr}^
    5cb0:	326e6179 	rsbcc	r6, lr, #1073741854	; 0x4000001e
    5cb4:	4c4f2f33 	mcrrmi	15, 3, r2, pc, cr3
    5cb8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5cbc:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5cc0:	2f534f43 	svccs	0x00534f43
    5cc4:	4f636950 	svcmi	0x00636950
    5cc8:	43432f53 	movtmi	r2, #16211	; 0x3f53
    5ccc:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    5cd0:	6f682f00 	svcvs	0x00682f00
    5cd4:	632f656d 			; <UNDEFINED> instruction: 0x632f656d
    5cd8:	6c726168 	ldfvse	f6, [r2], #-416	; 0xfffffe60
    5cdc:	6e617969 	vnmulvs.f16	s15, s2, s19	; <UNPREDICTABLE>
    5ce0:	4f2f3332 	svcmi	0x002f3332
    5ce4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5ce8:	502f5445 	eorpl	r5, pc, r5, asr #8
    5cec:	534f4349 	movtpl	r4, #62281	; 0xf349
    5cf0:	6369502f 	cmnvs	r9, #47	; 0x2f
    5cf4:	0000534f 	andeq	r5, r0, pc, asr #6
    5cf8:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    5cfc:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    5d00:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
    5d04:	00000100 	andeq	r0, r0, r0, lsl #2
    5d08:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    5d0c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    5d10:	00000200 	andeq	r0, r0, r0, lsl #4
    5d14:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5d18:	0300682e 	movweq	r6, #2094	; 0x82e
    5d1c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    5d20:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    5d24:	00040068 	andeq	r0, r4, r8, rrx
    5d28:	01050000 	mrseq	r0, (UNDEF: 5)
    5d2c:	00020500 	andeq	r0, r2, r0, lsl #10
    5d30:	0300002f 	movweq	r0, #47	; 0x2f
    5d34:	06010122 	streq	r0, [r1], -r2, lsr #2
    5d38:	053c0620 	ldreq	r0, [ip, #-1568]!	; 0xfffff9e0
    5d3c:	13136b02 	tstne	r3, #2048	; 0x800
    5d40:	06100516 			; <UNDEFINED> instruction: 0x06100516
    5d44:	20050501 	andcs	r0, r5, r1, lsl #10
    5d48:	30060305 	andcc	r0, r6, r5, lsl #6
    5d4c:	053f0205 	ldreq	r0, [pc, #-517]!	; 5b4f <__exidx_end+0xc22>
    5d50:	0501061d 	streq	r0, [r1, #-1565]	; 0xfffff9e3
    5d54:	1d053c0b 	stcne	12, cr3, [r5, #-44]	; 0xffffffd4
    5d58:	200b0520 	andcs	r0, fp, r0, lsr #10
    5d5c:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    5d60:	2f240603 	svccs	0x00240603
    5d64:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
    5d68:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    5d6c:	2f061f02 	svccs	0x00061f02
    5d70:	01060605 	tsteq	r6, r5, lsl #12
    5d74:	30060205 	andcc	r0, r6, r5, lsl #4
    5d78:	83160101 	tsthi	r6, #1073741824	; 0x40000000
    5d7c:	01060505 	tsteq	r6, r5, lsl #10
    5d80:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    5d84:	01060605 	tsteq	r6, r5, lsl #12
    5d88:	2f060405 	svccs	0x00060405
    5d8c:	01060705 	tsteq	r6, r5, lsl #14
    5d90:	05210405 	streq	r0, [r1, #-1029]!	; 0xfffffbfb
    5d94:	04051f07 	streq	r1, [r5], #-3847	; 0xfffff0f9
    5d98:	03052106 	movweq	r2, #20742	; 0x5106
    5d9c:	06070531 			; <UNDEFINED> instruction: 0x06070531
    5da0:	20060501 	andcs	r0, r6, r1, lsl #10
    5da4:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    5da8:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
    5dac:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5db0:	13052e05 	movwne	r2, #24069	; 0x5e05
    5db4:	0603052e 	streq	r0, [r3], -lr, lsr #10
    5db8:	0608052f 	streq	r0, [r8], -pc, lsr #10
    5dbc:	06030501 	streq	r0, [r3], -r1, lsl #10
    5dc0:	060d052f 	streq	r0, [sp], -pc, lsr #10
    5dc4:	06030501 	streq	r0, [r3], -r1, lsl #10
    5dc8:	3102052f 	tstcc	r2, pc, lsr #10
    5dcc:	01060605 	tsteq	r6, r5, lsl #12
    5dd0:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    5dd4:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    5dd8:	21010606 	tstcs	r1, r6, lsl #12
    5ddc:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
    5de0:	0606052f 	streq	r0, [r6], -pc, lsr #10
    5de4:	06020501 	streq	r0, [r2], -r1, lsl #10
    5de8:	05914023 	ldreq	r4, [r1, #35]	; 0x23
    5dec:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5df0:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    5df4:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    5df8:	07053c11 	smladeq	r5, r1, ip, r3
    5dfc:	06020521 	streq	r0, [r2], -r1, lsr #10
    5e00:	0605054b 	streq	r0, [r5], -fp, asr #10
    5e04:	06020501 	streq	r0, [r2], -r1, lsl #10
    5e08:	060a0524 	streq	r0, [sl], -r4, lsr #10
    5e0c:	9f060501 	svcls	0x00060501
    5e10:	051f0a05 	ldreq	r0, [pc, #-2565]	; 5413 <__exidx_end+0x4e6>
    5e14:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    5e18:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5e1c:	052f0602 	streq	r0, [pc, #-1538]!	; 5822 <__exidx_end+0x8f5>
    5e20:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5e24:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    5e28:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    5e2c:	052f0603 	streq	r0, [pc, #-1539]!	; 5831 <__exidx_end+0x904>
    5e30:	06053002 	streq	r3, [r5], -r2
    5e34:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5e38:	01053d06 	tsteq	r5, r6, lsl #26
    5e3c:	02052206 	andeq	r2, r5, #1610612736	; 0x60000000
    5e40:	0601053a 			; <UNDEFINED> instruction: 0x0601053a
    5e44:	000d0230 	andeq	r0, sp, r0, lsr r2
    5e48:	01990101 	orrseq	r0, r9, r1, lsl #2
    5e4c:	00030000 	andeq	r0, r3, r0
    5e50:	00000193 	muleq	r0, r3, r1
    5e54:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5e58:	0101000d 	tsteq	r1, sp
    5e5c:	00000101 	andeq	r0, r0, r1, lsl #2
    5e60:	00000100 	andeq	r0, r0, r0, lsl #2
    5e64:	73752f01 	cmnvc	r5, #1, 30
    5e68:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    5e6c:	63672f62 	cmnvs	r7, #392	; 0x188
    5e70:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    5e74:	6f6e2d6d 	svcvs	0x006e2d6d
    5e78:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5e7c:	2f696261 	svccs	0x00696261
    5e80:	332e3031 			; <UNDEFINED> instruction: 0x332e3031
    5e84:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    5e88:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5e8c:	2f006564 	svccs	0x00006564
    5e90:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5e94:	6168632f 	cmnvs	r8, pc, lsr #6
    5e98:	79696c72 	stmdbvc	r9!, {r1, r4, r5, r6, sl, fp, sp, lr}^
    5e9c:	33326e61 	teqcc	r2, #1552	; 0x610
    5ea0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5ea4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5ea8:	4349502f 	movtmi	r5, #36911	; 0x902f
    5eac:	502f534f 	eorpl	r5, pc, pc, asr #6
    5eb0:	534f6369 	movtpl	r6, #62313	; 0xf369
    5eb4:	3143432f 	cmpcc	r3, pc, lsr #6
    5eb8:	2f585833 	svccs	0x00585833
    5ebc:	33314343 	teqcc	r1, #201326593	; 0xc000001
    5ec0:	41575858 	cmpmi	r7, r8, asr r8
    5ec4:	642f4552 	strtvs	r4, [pc], #-1362	; 5ecc <__exidx_end+0xf9f>
    5ec8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    5ecc:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    5ed0:	6f682f00 	svcvs	0x00682f00
    5ed4:	632f656d 			; <UNDEFINED> instruction: 0x632f656d
    5ed8:	6c726168 	ldfvse	f6, [r2], #-416	; 0xfffffe60
    5edc:	6e617969 	vnmulvs.f16	s15, s2, s19	; <UNPREDICTABLE>
    5ee0:	4f2f3332 	svcmi	0x002f3332
    5ee4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5ee8:	502f5445 	eorpl	r5, pc, r5, asr #8
    5eec:	534f4349 	movtpl	r4, #62281	; 0xf349
    5ef0:	6369502f 	cmnvs	r9, #47	; 0x2f
    5ef4:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    5ef8:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    5efc:	43432f58 	movtmi	r2, #16216	; 0x3f58
    5f00:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    5f04:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    5f08:	5f66722f 	svcpl	0x0066722f
    5f0c:	63746170 	cmnvs	r4, #112, 2
    5f10:	00736568 	rsbseq	r6, r3, r8, ror #10
    5f14:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5e60 <__exidx_end+0xf33>
    5f18:	68632f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    5f1c:	696c7261 	stmdbvs	ip!, {r0, r5, r6, r9, ip, sp, lr}^
    5f20:	326e6179 	rsbcc	r6, lr, #1073741854	; 0x4000001e
    5f24:	4c4f2f33 	mcrrmi	15, 3, r2, pc, cr3
    5f28:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5f2c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5f30:	2f534f43 	svccs	0x00534f43
    5f34:	4f636950 	svcmi	0x00636950
    5f38:	43432f53 	movtmi	r2, #16211	; 0x3f53
    5f3c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    5f40:	74730000 	ldrbtvc	r0, [r3], #-0
    5f44:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    5f48:	0100682e 	tsteq	r0, lr, lsr #16
    5f4c:	66720000 	ldrbtvs	r0, [r2], -r0
    5f50:	69616d5f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    5f54:	786f626c 	stmdavc	pc!, {r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    5f58:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5f5c:	66720000 	ldrbtvs	r0, [r2], -r0
    5f60:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 5dec <__exidx_end+0xebf>
    5f64:	5f6e6f6d 	svcpl	0x006e6f6d
    5f68:	2e646d63 	cdpcs	13, 6, cr6, cr4, cr3, {3}
    5f6c:	00020068 	andeq	r0, r2, r8, rrx
    5f70:	5f667200 	svcpl	0x00667200
    5f74:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    5f78:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    5f7c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5f80:	66720000 	ldrbtvs	r0, [r2], -r0
    5f84:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
    5f88:	635f6863 	cmpvs	pc, #6488064	; 0x630000
    5f8c:	675f6570 			; <UNDEFINED> instruction: 0x675f6570
    5f90:	73666e65 	cmnvc	r6, #1616	; 0x650
    5f94:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    5f98:	72000003 	andvc	r0, r0, #3
    5f9c:	61705f66 	cmnvs	r0, r6, ror #30
    5fa0:	5f686374 	svcpl	0x00686374
    5fa4:	5f656672 	svcpl	0x00656672
    5fa8:	666e6567 	strbtvs	r6, [lr], -r7, ror #10
    5fac:	682e6b73 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
    5fb0:	00000300 	andeq	r0, r0, r0, lsl #6
    5fb4:	72616d73 	rsbvc	r6, r1, #7360	; 0x1cc0
    5fb8:	5f667274 	svcpl	0x00667274
    5fbc:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
    5fc0:	73676e69 	cmnvc	r7, #1680	; 0x690
    5fc4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    5fc8:	6d730000 	ldclvs	0, cr0, [r3, #-0]
    5fcc:	72747261 	rsbsvc	r7, r4, #268435462	; 0x10000006
    5fd0:	65735f66 	ldrbvs	r5, [r3, #-3942]!	; 0xfffff09a
    5fd4:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
    5fd8:	6c5f7367 	mrrcvs	3, 6, r7, pc, cr7	; <UNPREDICTABLE>
    5fdc:	72685f70 	rsbvc	r5, r8, #112, 30	; 0x1c0
    5fe0:	0400632e 	streq	r6, [r0], #-814	; 0xfffffcd2
    5fe4:	9c000000 	stcls	0, cr0, [r0], {-0}
    5fe8:	02000001 	andeq	r0, r0, #1
    5fec:	00015f00 	andeq	r5, r1, r0, lsl #30
    5ff0:	fb010200 	blx	467fa <__ccfg+0x26852>
    5ff4:	01000d0e 	tsteq	r0, lr, lsl #26
    5ff8:	00010101 	andeq	r0, r1, r1, lsl #2
    5ffc:	00010000 	andeq	r0, r1, r0
    6000:	2f2e0100 	svccs	0x002e0100
    6004:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6008:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    600c:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    6010:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    6014:	63006269 	movwvs	r6, #617	; 0x269
    6018:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    601c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6020:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    6024:	30302e30 	eorscc	r2, r0, r0, lsr lr
    6028:	5f393130 	svcpl	0x00393130
    602c:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    6030:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    6034:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    6038:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    603c:	6f745c36 	svcvs	0x00745c36
    6040:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    6044:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    6048:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    604c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    6050:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    6054:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6058:	61652d65 	cmnvs	r5, r5, ror #26
    605c:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    6060:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    6064:	71353130 	teqvc	r5, r0, lsr r1
    6068:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    606c:	6f6e2d6d 	svcvs	0x006e2d6d
    6070:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6074:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6078:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    607c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    6080:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    6084:	00656e69 	rsbeq	r6, r5, r9, ror #28
    6088:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    608c:	63635c69 	cmnvs	r3, #26880	; 0x6900
    6090:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    6094:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6098:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    609c:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    60a0:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    60a4:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    60a8:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    60ac:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    60b0:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    60b4:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 5f4c <__exidx_end+0x101f>
    60b8:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    60bc:	63675c72 	cmnvs	r7, #29184	; 0x7200
    60c0:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    60c4:	6f6e2d6d 	svcvs	0x006e2d6d
    60c8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    60cc:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    60d0:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    60d4:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    60d8:	615c3371 	cmpvs	ip, r1, ror r3
    60dc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    60e0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    60e4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    60e8:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    60ec:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    60f0:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    60f4:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    60f8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    60fc:	2f2e2e2f 	svccs	0x002e2e2f
    6100:	00636e69 	rsbeq	r6, r3, r9, ror #28
    6104:	69646100 	stmdbvs	r4!, {r8, sp, lr}^
    6108:	0100632e 	tsteq	r0, lr, lsr #6
    610c:	645f0000 	ldrbvs	r0, [pc], #-0	; 6114 <__exidx_end+0x11e7>
    6110:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    6114:	745f746c 	ldrbvc	r7, [pc], #-1132	; 611c <__exidx_end+0x11ef>
    6118:	73657079 	cmnvc	r5, #121	; 0x79
    611c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    6120:	735f0000 	cmpvc	pc, #0
    6124:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    6128:	00682e74 	rsbeq	r2, r8, r4, ror lr
    612c:	68000003 	stmdavs	r0, {r0, r1}
    6130:	79745f77 	ldmdbvc	r4!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6134:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    6138:	00040068 	andeq	r0, r4, r8, rrx
    613c:	6d6f7200 	sfmvs	f7, 2, [pc, #-0]	; 6144 <__exidx_end+0x1217>
    6140:	0100682e 	tsteq	r0, lr, lsr #16
    6144:	70630000 	rsbvc	r0, r3, r0
    6148:	00682e75 	rsbeq	r2, r8, r5, ror lr
    614c:	00000001 	andeq	r0, r0, r1
    6150:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
    6154:	03000030 	movweq	r0, #48	; 0x30
    6158:	21200135 			; <UNDEFINED> instruction: 0x21200135
    615c:	01040200 	mrseq	r0, R12_usr
    6160:	2f214b3d 	svccs	0x00214b3d
    6164:	05022c23 	streq	r2, [r2, #-3107]	; 0xfffff3dd
    6168:	00010100 	andeq	r0, r1, r0, lsl #2
    616c:	00000205 	andeq	r0, r0, r5, lsl #4
    6170:	c0030000 	andgt	r0, r3, r0
    6174:	2f200100 	svccs	0x00200100
    6178:	01040200 	mrseq	r0, R12_usr
    617c:	2f2f4b3d 	svccs	0x002f4b3d
    6180:	05022c23 	streq	r2, [r2, #-3107]	; 0xfffff3dd
    6184:	67010100 	strvs	r0, [r1, -r0, lsl #2]
    6188:	02000001 	andeq	r0, r0, #1
    618c:	00014700 	andeq	r4, r1, r0, lsl #14
    6190:	fb010200 	blx	4699a <__ccfg+0x269f2>
    6194:	01000d0e 	tsteq	r0, lr, lsl #26
    6198:	00010101 	andeq	r0, r1, r1, lsl #2
    619c:	00010000 	andeq	r0, r1, r0
    61a0:	2f2e0100 	svccs	0x002e0100
    61a4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    61a8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    61ac:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    61b0:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    61b4:	63006269 	movwvs	r6, #617	; 0x269
    61b8:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    61bc:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    61c0:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    61c4:	30302e30 	eorscc	r2, r0, r0, lsr lr
    61c8:	5f393130 	svcpl	0x00393130
    61cc:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    61d0:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    61d4:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    61d8:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    61dc:	6f745c36 	svcvs	0x00745c36
    61e0:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    61e4:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    61e8:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    61ec:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    61f0:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    61f4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    61f8:	61652d65 	cmnvs	r5, r5, ror #26
    61fc:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    6200:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    6204:	71353130 	teqvc	r5, r0, lsr r1
    6208:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    620c:	6f6e2d6d 	svcvs	0x006e2d6d
    6210:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6214:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6218:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    621c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    6220:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    6224:	00656e69 	rsbeq	r6, r5, r9, ror #28
    6228:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    622c:	63635c69 	cmnvs	r3, #26880	; 0x6900
    6230:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    6234:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6238:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    623c:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    6240:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    6244:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    6248:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    624c:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    6250:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    6254:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 60ec <__exidx_end+0x11bf>
    6258:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    625c:	63675c72 	cmnvs	r7, #29184	; 0x7200
    6260:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    6264:	6f6e2d6d 	svcvs	0x006e2d6d
    6268:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    626c:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    6270:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    6274:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    6278:	615c3371 	cmpvs	ip, r1, ror r3
    627c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6280:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6284:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6288:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    628c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6290:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    6294:	6f610000 	svcvs	0x00610000
    6298:	61625f6e 	cmnvs	r2, lr, ror #30
    629c:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    62a0:	0100632e 	tsteq	r0, lr, lsr #6
    62a4:	645f0000 	ldrbvs	r0, [pc], #-0	; 62ac <__exidx_end+0x137f>
    62a8:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    62ac:	745f746c 	ldrbvc	r7, [pc], #-1132	; 62b4 <__exidx_end+0x1387>
    62b0:	73657079 	cmnvc	r5, #121	; 0x79
    62b4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    62b8:	735f0000 	cmpvc	pc, #0
    62bc:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    62c0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    62c4:	61000003 	tstvs	r0, r3
    62c8:	625f6e6f 	subsvs	r6, pc, #1776	; 0x6f0
    62cc:	6f6d7461 	svcvs	0x006d7461
    62d0:	00682e6e 	rsbeq	r2, r8, lr, ror #28
    62d4:	00000001 	andeq	r0, r0, r1
    62d8:	44020500 	strmi	r0, [r2], #-1280	; 0xfffffb00
    62dc:	03000030 	movweq	r0, #48	; 0x30
    62e0:	361a013c 			; <UNDEFINED> instruction: 0x361a013c
    62e4:	2e77032f 	cdpcs	3, 7, cr0, cr7, cr15, {1}
    62e8:	4c2e0903 			; <UNDEFINED> instruction: 0x4c2e0903
    62ec:	0009023d 	andeq	r0, r9, sp, lsr r2
    62f0:	01a90101 			; <UNDEFINED> instruction: 0x01a90101
    62f4:	00020000 	andeq	r0, r2, r0
    62f8:	00000141 	andeq	r0, r0, r1, asr #2
    62fc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6300:	0101000d 	tsteq	r1, sp
    6304:	00000101 	andeq	r0, r0, r1, lsl #2
    6308:	00000100 	andeq	r0, r0, r0, lsl #2
    630c:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    6310:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6314:	2f2e2e2f 	svccs	0x002e2e2f
    6318:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    631c:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    6320:	3a630062 	bcc	18c64b0 <__ccfg+0x18a6508>
    6324:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    6328:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    632c:	302e322e 	eorcc	r3, lr, lr, lsr #4
    6330:	3030302e 	eorscc	r3, r0, lr, lsr #32
    6334:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    6338:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    633c:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    6340:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    6344:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    6348:	6f6f745c 	svcvs	0x006f745c
    634c:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    6350:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    6354:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    6358:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    635c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6360:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6364:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6368:	5f342d69 	svcpl	0x00342d69
    636c:	30322d39 	eorscc	r2, r2, r9, lsr sp
    6370:	33713531 	cmncc	r1, #205520896	; 0xc400000
    6374:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6378:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    637c:	61652d65 	cmnvs	r5, r5, ror #26
    6380:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    6384:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6388:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    638c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    6390:	6300656e 	movwvs	r6, #1390	; 0x56e
    6394:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    6398:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    639c:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    63a0:	30302e30 	eorscc	r2, r0, r0, lsr lr
    63a4:	5f393130 	svcpl	0x00393130
    63a8:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    63ac:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    63b0:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    63b4:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    63b8:	6f745c36 	svcvs	0x00745c36
    63bc:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    63c0:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    63c4:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    63c8:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    63cc:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    63d0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    63d4:	61652d65 	cmnvs	r5, r5, ror #26
    63d8:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    63dc:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    63e0:	71353130 	teqvc	r5, r0, lsr r1
    63e4:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    63e8:	6f6e2d6d 	svcvs	0x006e2d6d
    63ec:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    63f0:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    63f4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    63f8:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    63fc:	00737973 	rsbseq	r7, r3, r3, ror r9
    6400:	6e6f6100 	powvse	f6, f7, f0
    6404:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
    6408:	0100632e 	tsteq	r0, lr, lsr #6
    640c:	645f0000 	ldrbvs	r0, [pc], #-0	; 6414 <__exidx_end+0x14e7>
    6410:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    6414:	745f746c 	ldrbvc	r7, [pc], #-1132	; 641c <__exidx_end+0x14ef>
    6418:	73657079 	cmnvc	r5, #121	; 0x79
    641c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    6420:	735f0000 	cmpvc	pc, #0
    6424:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    6428:	00682e74 	rsbeq	r2, r8, r4, ror lr
    642c:	61000003 	tstvs	r0, r3
    6430:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
    6434:	682e6374 	stmdavs	lr!, {r2, r4, r5, r6, r8, r9, sp, lr}
    6438:	00000100 	andeq	r0, r0, r0, lsl #2
    643c:	02050000 	andeq	r0, r5, #0
    6440:	00003074 	andeq	r3, r0, r4, ror r0
    6444:	00013e03 	andeq	r3, r1, r3, lsl #28
    6448:	03010402 	movweq	r0, #5122	; 0x1402
    644c:	0200010a 	andeq	r0, r0, #-2147483646	; 0x80000002
    6450:	00210104 	eoreq	r0, r1, r4, lsl #2
    6454:	1f010402 	svcne	0x00010402
    6458:	01040200 	mrseq	r0, R12_usr
    645c:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    6460:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    6464:	30210104 	eorcc	r0, r1, r4, lsl #2
    6468:	00080221 	andeq	r0, r8, r1, lsr #4
    646c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6470:	00309402 	eorseq	r9, r0, r2, lsl #8
    6474:	00d70300 	sbcseq	r0, r7, r0, lsl #6
    6478:	04020001 	streq	r0, [r2], #-1
    647c:	010c0301 	tsteq	ip, r1, lsl #6
    6480:	01040200 	mrseq	r0, R12_usr
    6484:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    6488:	02001f01 	andeq	r1, r0, #1, 30
    648c:	00210104 	eoreq	r0, r1, r4, lsl #2
    6490:	21010402 	tstcs	r1, r2, lsl #8
    6494:	01040200 	mrseq	r0, R12_usr
    6498:	05023121 	streq	r3, [r2, #-289]	; 0xfffffedf
    649c:	9c010100 	stflss	f0, [r1], {-0}
    64a0:	02000001 	andeq	r0, r0, #1
    64a4:	00013900 	andeq	r3, r1, r0, lsl #18
    64a8:	fb010200 	blx	46cb2 <__ccfg+0x26d0a>
    64ac:	01000d0e 	tsteq	r0, lr, lsl #26
    64b0:	00010101 	andeq	r0, r1, r1, lsl #2
    64b4:	00010000 	andeq	r0, r1, r0
    64b8:	2f2e0100 	svccs	0x002e0100
    64bc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    64c0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    64c4:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    64c8:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    64cc:	63006269 	movwvs	r6, #617	; 0x269
    64d0:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    64d4:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    64d8:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    64dc:	30302e30 	eorscc	r2, r0, r0, lsr lr
    64e0:	5f393130 	svcpl	0x00393130
    64e4:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    64e8:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    64ec:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    64f0:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    64f4:	6f745c36 	svcvs	0x00745c36
    64f8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    64fc:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    6500:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    6504:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    6508:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    650c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6510:	61652d65 	cmnvs	r5, r5, ror #26
    6514:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    6518:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    651c:	71353130 	teqvc	r5, r0, lsr r1
    6520:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    6524:	6f6e2d6d 	svcvs	0x006e2d6d
    6528:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    652c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6530:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6534:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    6538:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    653c:	00656e69 	rsbeq	r6, r5, r9, ror #28
    6540:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    6544:	63635c69 	cmnvs	r3, #26880	; 0x6900
    6548:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    654c:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6550:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    6554:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    6558:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    655c:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    6560:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6564:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    6568:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    656c:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 6404 <__exidx_end+0x14d7>
    6570:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    6574:	63675c72 	cmnvs	r7, #29184	; 0x7200
    6578:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    657c:	6f6e2d6d 	svcvs	0x006e2d6d
    6580:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6584:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    6588:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    658c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    6590:	615c3371 	cmpvs	ip, r1, ror r3
    6594:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6598:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    659c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    65a0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    65a4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    65a8:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    65ac:	70630000 	rsbvc	r0, r3, r0
    65b0:	00632e75 	rsbeq	r2, r3, r5, ror lr
    65b4:	5f000001 	svcpl	0x00000001
    65b8:	61666564 	cmnvs	r6, r4, ror #10
    65bc:	5f746c75 	svcpl	0x00746c75
    65c0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    65c4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    65c8:	5f000002 	svcpl	0x00000002
    65cc:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    65d0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    65d4:	00000300 	andeq	r0, r0, r0, lsl #6
    65d8:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    65dc:	00010068 	andeq	r0, r1, r8, rrx
    65e0:	05000000 	streq	r0, [r0, #-0]
    65e4:	0030ac02 	eorseq	sl, r0, r2, lsl #24
    65e8:	00f50300 	rscseq	r0, r5, r0, lsl #6
    65ec:	01120301 	tsteq	r2, r1, lsl #6
    65f0:	01000402 	tsteq	r0, r2, lsl #8
    65f4:	02050001 	andeq	r0, r5, #1
    65f8:	00000000 	andeq	r0, r0, r0
    65fc:	0101c003 	tsteq	r1, r3
    6600:	02011103 	andeq	r1, r1, #-1073741824	; 0xc0000000
    6604:	01010003 	tsteq	r1, r3
    6608:	b4020500 	strlt	r0, [r2], #-1280	; 0xfffffb00
    660c:	03000030 	movweq	r0, #48	; 0x30
    6610:	0301028d 	movweq	r0, #4749	; 0x128d
    6614:	04020112 	streq	r0, [r2], #-274	; 0xfffffeee
    6618:	00010100 	andeq	r0, r1, r0, lsl #2
    661c:	00000205 	andeq	r0, r0, r5, lsl #4
    6620:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    6624:	11030102 	tstne	r3, r2, lsl #2
    6628:	00030201 	andeq	r0, r3, r1, lsl #4
    662c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6630:	00000002 	andeq	r0, r0, r2
    6634:	039e0300 	orrseq	r0, lr, #0, 6
    6638:	04021601 	streq	r1, [r2], #-1537	; 0xfffff9ff
    663c:	d6010100 	strle	r0, [r1], -r0, lsl #2
    6640:	02000002 	andeq	r0, r0, #2
    6644:	00017c00 	andeq	r7, r1, r0, lsl #24
    6648:	fb010200 	blx	46e52 <__ccfg+0x26eaa>
    664c:	01000d0e 	tsteq	r0, lr, lsl #26
    6650:	00010101 	andeq	r0, r1, r1, lsl #2
    6654:	00010000 	andeq	r0, r1, r0
    6658:	2f2e0100 	svccs	0x002e0100
    665c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6660:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6664:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    6668:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    666c:	63006269 	movwvs	r6, #617	; 0x269
    6670:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    6674:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6678:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    667c:	30302e30 	eorscc	r2, r0, r0, lsr lr
    6680:	5f393130 	svcpl	0x00393130
    6684:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    6688:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    668c:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    6690:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    6694:	6f745c36 	svcvs	0x00745c36
    6698:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    669c:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    66a0:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    66a4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    66a8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    66ac:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    66b0:	61652d65 	cmnvs	r5, r5, ror #26
    66b4:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    66b8:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    66bc:	71353130 	teqvc	r5, r0, lsr r1
    66c0:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    66c4:	6f6e2d6d 	svcvs	0x006e2d6d
    66c8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    66cc:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    66d0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    66d4:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    66d8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    66dc:	00656e69 	rsbeq	r6, r5, r9, ror #28
    66e0:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    66e4:	63635c69 	cmnvs	r3, #26880	; 0x6900
    66e8:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    66ec:	302e302e 	eorcc	r3, lr, lr, lsr #32
    66f0:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    66f4:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    66f8:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    66fc:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    6700:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6704:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    6708:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    670c:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 65a4 <__exidx_end+0x1677>
    6710:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    6714:	63675c72 	cmnvs	r7, #29184	; 0x7200
    6718:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    671c:	6f6e2d6d 	svcvs	0x006e2d6d
    6720:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6724:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    6728:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    672c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    6730:	615c3371 	cmpvs	ip, r1, ror r3
    6734:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6738:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    673c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6740:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    6744:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6748:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    674c:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    6750:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6754:	2f2e2e2f 	svccs	0x002e2e2f
    6758:	00636e69 	rsbeq	r6, r3, r9, ror #28
    675c:	63736f00 	cmnvs	r3, #0, 30
    6760:	0100632e 	tsteq	r0, lr, lsr #6
    6764:	736f0000 	cmnvc	pc, #0
    6768:	00682e63 	rsbeq	r2, r8, r3, ror #28
    676c:	5f000001 	svcpl	0x00000001
    6770:	61666564 	cmnvs	r6, r4, ror #10
    6774:	5f746c75 	svcpl	0x00746c75
    6778:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    677c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6780:	5f000002 	svcpl	0x00000002
    6784:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6788:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    678c:	00000300 	andeq	r0, r0, r0, lsl #6
    6790:	745f7768 	ldrbvc	r7, [pc], #-1896	; 6798 <__exidx_end+0x186b>
    6794:	73657079 	cmnvc	r5, #121	; 0x79
    6798:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    679c:	6f720000 	svcvs	0x00720000
    67a0:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    67a4:	61000001 	tstvs	r0, r1
    67a8:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
    67ac:	682e6374 	stmdavs	lr!, {r2, r4, r5, r6, r8, r9, sp, lr}
    67b0:	00000100 	andeq	r0, r0, r0, lsl #2
    67b4:	5f6e6f61 	svcpl	0x006e6f61
    67b8:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    67bc:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    67c0:	00000100 	andeq	r0, r0, r0, lsl #2
    67c4:	02050000 	andeq	r0, r5, #0
    67c8:	000030bc 	strheq	r3, [r0], -ip
    67cc:	0100e503 	tsteq	r0, r3, lsl #10
    67d0:	200f0320 	andcs	r0, pc, r0, lsr #6
    67d4:	03207103 			; <UNDEFINED> instruction: 0x03207103
    67d8:	0325200f 			; <UNDEFINED> instruction: 0x0325200f
    67dc:	03309e09 	teqeq	r0, #9, 28	; 0x90
    67e0:	a3339e09 	teqge	r3, #9, 28	; 0x90
    67e4:	01000702 	tsteq	r0, r2, lsl #14
    67e8:	02050001 	andeq	r0, r5, #1
    67ec:	00003118 	andeq	r3, r0, r8, lsl r1
    67f0:	0101a003 	tsteq	r1, r3
    67f4:	222e0c03 	eorcs	r0, lr, #768	; 0x300
    67f8:	3c7a0388 	ldclcc	3, cr0, [sl], #-544	; 0xfffffde0
    67fc:	06022526 	streq	r2, [r2], -r6, lsr #10
    6800:	00010100 	andeq	r0, r1, r0, lsl #2
    6804:	00000205 	andeq	r0, r0, r5, lsl #4
    6808:	c2030000 	andgt	r0, r3, #0
    680c:	25200101 	strcs	r0, [r0, #-257]!	; 0xfffffeff
    6810:	79033491 	stmdbvc	r3, {r0, r4, r7, sl, ip, sp}
    6814:	7a03272e 	bvc	d04d4 <__ccfg+0xb052c>
    6818:	0200262e 	andeq	r2, r0, #48234496	; 0x2e00000
    681c:	7a030104 	bvc	c6c34 <__ccfg+0xa6c8c>
    6820:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    6824:	2d305001 	ldccs	0, cr5, [r0, #-4]!
    6828:	4b241f30 	blmi	90e4f0 <__ccfg+0x8ee548>
    682c:	3d341f3d 	ldccc	15, cr1, [r4, #-244]!	; 0xffffff0c
    6830:	6d03326c 	sfmvs	f3, 4, [r3, #-432]	; 0xfffffe50
    6834:	3c100366 	ldccc	3, cr0, [r0], {102}	; 0x66
    6838:	00090226 	andeq	r0, r9, r6, lsr #4
    683c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6840:	00314402 	eorseq	r4, r1, r2, lsl #8
    6844:	01f30300 	mvnseq	r0, r0, lsl #6
    6848:	024b2101 	subeq	r2, fp, #1073741824	; 0x40000000
    684c:	01010007 	tsteq	r1, r7
    6850:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
    6854:	03000031 	movweq	r0, #49	; 0x31
    6858:	24010280 	strcs	r0, [r1], #-640	; 0xfffffd80
    685c:	22030204 	andcs	r0, r3, #4, 4	; 0x40000000
    6860:	03010458 	movweq	r0, #5208	; 0x1458
    6864:	02048262 	andeq	r8, r4, #536870918	; 0x20000006
    6868:	04203c03 	strteq	r3, [r0], #-3075	; 0xfffff3fd
    686c:	4a4a0301 	bmi	1287478 <__ccfg+0x12674d0>
    6870:	3d211f3d 	stccc	15, cr1, [r1, #-244]!	; 0xffffff0c
    6874:	1f30221f 	svcne	0x0030221f
    6878:	02232230 	eoreq	r2, r3, #48, 4
    687c:	0101000c 	tsteq	r1, ip
    6880:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
    6884:	03000031 	movweq	r0, #49	; 0x31
    6888:	250102a3 	strcs	r0, [r1, #-675]	; 0xfffffd5d
    688c:	0302044f 	movweq	r0, #9295	; 0x244f
    6890:	01044a17 	tsteq	r4, r7, lsl sl
    6894:	4b4a6d03 	blmi	12a1ca8 <__ccfg+0x1281d00>
    6898:	01000902 	tsteq	r0, r2, lsl #18
    689c:	02050001 	andeq	r0, r5, #1
    68a0:	00000000 	andeq	r0, r0, r0
    68a4:	0102bc03 	tsteq	r2, r3, lsl #24
    68a8:	20170322 	andscs	r0, r7, r2, lsr #6
    68ac:	28206903 	stmdacs	r0!, {r0, r1, r8, fp, sp, lr}
    68b0:	033c1003 	teqeq	ip, #3
    68b4:	15032e6c 	strne	r2, [r3, #-3692]	; 0xfffff194
    68b8:	586d032e 	stmdapl	sp!, {r1, r2, r3, r5, r8, r9}^
    68bc:	03201303 			; <UNDEFINED> instruction: 0x03201303
    68c0:	1103206f 	tstne	r3, pc, rrx
    68c4:	06023f20 	streq	r3, [r2], -r0, lsr #30
    68c8:	00010100 	andeq	r0, r1, r0, lsl #2
    68cc:	00000205 	andeq	r0, r0, r5, lsl #4
    68d0:	e3030000 	movw	r0, #12288	; 0x3000
    68d4:	21030102 	tstcs	r3, r2, lsl #2
    68d8:	02024d01 	andeq	r4, r2, #1, 26	; 0x40
    68dc:	00010100 	andeq	r0, r1, r0, lsl #2
    68e0:	00000205 	andeq	r0, r0, r5, lsl #4
    68e4:	90030000 	andls	r0, r3, r0
    68e8:	10030103 	andne	r0, r3, r3, lsl #2
    68ec:	211f2120 	tstcs	pc, r0, lsr #2
    68f0:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    68f4:	02003e01 	andeq	r3, r0, #1, 28
    68f8:	3d3d0104 	ldfccs	f0, [sp, #-16]!
    68fc:	02341d31 	eorseq	r1, r4, #3136	; 0xc40
    6900:	01010007 	tsteq	r1, r7
    6904:	00020500 	andeq	r0, r2, r0, lsl #10
    6908:	03000000 	movweq	r0, #0
    690c:	170103b5 			; <UNDEFINED> instruction: 0x170103b5
    6910:	3d332c31 	ldccc	12, cr2, [r3, #-196]!	; 0xffffff3c
    6914:	01000502 	tsteq	r0, r2, lsl #10
    6918:	0003a701 	andeq	sl, r3, r1, lsl #14
    691c:	65000200 	strvs	r0, [r0, #-512]	; 0xfffffe00
    6920:	02000002 	andeq	r0, r0, #2
    6924:	0d0efb01 	vstreq	d15, [lr, #-4]
    6928:	01010100 	mrseq	r0, (UNDEF: 17)
    692c:	00000001 	andeq	r0, r0, r1
    6930:	01000001 	tsteq	r0, r1
    6934:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6938:	2f2e2e2f 	svccs	0x002e2e2f
    693c:	642f2e2e 	strtvs	r2, [pc], #-3630	; 6944 <__exidx_end+0x1a17>
    6940:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    6944:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    6948:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    694c:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    6950:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    6954:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    6958:	31303030 	teqcc	r0, r0, lsr r0
    695c:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    6960:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    6964:	61746562 	cmnvs	r4, r2, ror #10
    6968:	63635c32 	cmnvs	r3, #12800	; 0x3200
    696c:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    6970:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 67a8 <__exidx_end+0x187b>
    6974:	6f635c73 	svcvs	0x00635c73
    6978:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    697c:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    6980:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    6984:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6988:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    698c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6990:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    6994:	3130322d 	teqcc	r0, sp, lsr #4
    6998:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    699c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    69a0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    69a4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    69a8:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    69ac:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    69b0:	616d5c65 	cmnvs	sp, r5, ror #24
    69b4:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    69b8:	3a630065 	bcc	18c6b54 <__ccfg+0x18a6bac>
    69bc:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    69c0:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    69c4:	302e322e 	eorcc	r3, lr, lr, lsr #4
    69c8:	3030302e 	eorscc	r3, r0, lr, lsr #32
    69cc:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    69d0:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    69d4:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    69d8:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    69dc:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    69e0:	6f6f745c 	svcvs	0x006f745c
    69e4:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    69e8:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    69ec:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    69f0:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    69f4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    69f8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    69fc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6a00:	5f342d69 	svcpl	0x00342d69
    6a04:	30322d39 	eorscc	r2, r2, r9, lsr sp
    6a08:	33713531 	cmncc	r1, #205520896	; 0xc400000
    6a0c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6a10:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6a14:	61652d65 	cmnvs	r5, r5, ror #26
    6a18:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    6a1c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6a20:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    6a24:	63007379 	movwvs	r7, #889	; 0x379
    6a28:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    6a2c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6a30:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    6a34:	30302e30 	eorscc	r2, r0, r0, lsr lr
    6a38:	5f393130 	svcpl	0x00393130
    6a3c:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    6a40:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    6a44:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    6a48:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    6a4c:	6f745c36 	svcvs	0x00745c36
    6a50:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    6a54:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    6a58:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    6a5c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    6a60:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    6a64:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6a68:	61652d65 	cmnvs	r5, r5, ror #26
    6a6c:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    6a70:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    6a74:	71353130 	teqvc	r5, r0, lsr r1
    6a78:	696c5c33 	stmdbvs	ip!, {r0, r1, r4, r5, sl, fp, ip, lr}^
    6a7c:	63675c62 	cmnvs	r7, #25088	; 0x6200
    6a80:	72615c63 	rsbvc	r5, r1, #25344	; 0x6300
    6a84:	6f6e2d6d 	svcvs	0x006e2d6d
    6a88:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6a8c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6a90:	2e392e34 	mrccs	14, 1, r2, cr9, cr4, {1}
    6a94:	6e695c33 	mcrvs	12, 3, r5, cr9, cr3, {1}
    6a98:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6a9c:	3a630065 	bcc	18c6c38 <__ccfg+0x18a6c90>
    6aa0:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    6aa4:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    6aa8:	302e322e 	eorcc	r3, lr, lr, lsr #4
    6aac:	3030302e 	eorscc	r3, r0, lr, lsr #32
    6ab0:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    6ab4:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    6ab8:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    6abc:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    6ac0:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    6ac4:	6f6f745c 	svcvs	0x006f745c
    6ac8:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    6acc:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    6ad0:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    6ad4:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    6ad8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6adc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6ae0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6ae4:	5f342d69 	svcpl	0x00342d69
    6ae8:	30322d39 	eorscc	r2, r2, r9, lsr sp
    6aec:	33713531 	cmncc	r1, #205520896	; 0xc400000
    6af0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6af4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6af8:	61652d65 	cmnvs	r5, r5, ror #26
    6afc:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    6b00:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6b04:	00006564 	andeq	r6, r0, r4, ror #10
    6b08:	2e636672 	mcrcs	6, 3, r6, cr3, cr2, {3}
    6b0c:	00010063 	andeq	r0, r1, r3, rrx
    6b10:	63667200 	cmnvs	r6, #0, 4
    6b14:	0100682e 	tsteq	r0, lr, lsr #16
    6b18:	645f0000 	ldrbvs	r0, [pc], #-0	; 6b20 <__exidx_end+0x1bf3>
    6b1c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    6b20:	745f746c 	ldrbvc	r7, [pc], #-1132	; 6b28 <__exidx_end+0x1bfb>
    6b24:	73657079 	cmnvc	r5, #121	; 0x79
    6b28:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    6b2c:	735f0000 	cmpvc	pc, #0
    6b30:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    6b34:	00682e74 	rsbeq	r2, r8, r4, ror lr
    6b38:	73000003 	movwvc	r0, #3
    6b3c:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    6b40:	00682e66 	rsbeq	r2, r8, r6, ror #28
    6b44:	72000004 	andvc	r0, r0, #4
    6b48:	616d5f66 	cmnvs	sp, r6, ror #30
    6b4c:	6f626c69 	svcvs	0x00626c69
    6b50:	00682e78 	rsbeq	r2, r8, r8, ror lr
    6b54:	72000001 	andvc	r0, r0, #1
    6b58:	6f635f66 	svcvs	0x00635f66
    6b5c:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
    6b60:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    6b64:	0100682e 	tsteq	r0, lr, lsr #16
    6b68:	66720000 	ldrbtvs	r0, [r2], -r0
    6b6c:	6f72705f 	svcvs	0x0072705f
    6b70:	6d635f70 	stclvs	15, cr5, [r3, #-448]!	; 0xfffffe40
    6b74:	00682e64 	rsbeq	r2, r8, r4, ror #28
    6b78:	73000001 	movwvc	r0, #1
    6b7c:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    6b80:	00682e67 	rsbeq	r2, r8, r7, ror #28
    6b84:	00000005 	andeq	r0, r0, r5
    6b88:	00020500 	andeq	r0, r2, r0, lsl #10
    6b8c:	03000000 	movweq	r0, #0
    6b90:	130100e8 	movwne	r0, #4328	; 0x10e8
    6b94:	01040200 	mrseq	r0, R12_usr
    6b98:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
    6b9c:	023f2f01 	eorseq	r2, pc, #1, 30
    6ba0:	01010003 	tsteq	r1, r3
    6ba4:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
    6ba8:	03000031 	movweq	r0, #49	; 0x31
    6bac:	000100fa 	strdeq	r0, [r1], -sl
    6bb0:	13010402 	movwne	r0, #5122	; 0x1402
    6bb4:	c7030204 	strgt	r0, [r3, -r4, lsl #4]
    6bb8:	01044a01 	tsteq	r4, r1, lsl #20
    6bbc:	2e7ebd03 	cdpcs	13, 7, cr11, cr14, cr3, {0}
    6bc0:	01040200 	mrseq	r0, R12_usr
    6bc4:	03020422 	movweq	r0, #9250	; 0x2422
    6bc8:	043c01c1 	ldrteq	r0, [ip], #-449	; 0xfffffe3f
    6bcc:	7ec20301 	cdpvc	3, 12, cr0, cr2, cr1, {0}
    6bd0:	05022f3c 	streq	r2, [r2, #-3900]	; 0xfffff0c4
    6bd4:	00010100 	andeq	r0, r1, r0, lsl #2
    6bd8:	32180205 	andscc	r0, r8, #1342177280	; 0x50000000
    6bdc:	8f030000 	svchi	0x00030000
    6be0:	23140101 	tstcs	r4, #1073741824	; 0x40000000
    6be4:	761b251d 			; <UNDEFINED> instruction: 0x761b251d
    6be8:	211f2f3d 	tstcs	pc, sp, lsr pc	; <UNPREDICTABLE>
    6bec:	212d222f 			; <UNDEFINED> instruction: 0x212d222f
    6bf0:	0c022121 	stfeqs	f2, [r2], {33}	; 0x21
    6bf4:	00010100 	andeq	r0, r1, r0, lsl #2
    6bf8:	32640205 	rsbcc	r0, r4, #1342177280	; 0x50000000
    6bfc:	a4030000 	strge	r0, [r3], #-0
    6c00:	96150101 	ldrls	r0, [r5], -r1, lsl #2
    6c04:	25211c2f 	strcs	r1, [r1, #-3119]!	; 0xfffff3d1
    6c08:	2f1f2125 	svccs	0x001f2125
    6c0c:	3d660a03 	vstmdbcc	r6!, {s1-s3}
    6c10:	73032f3d 	movwvc	r2, #16189	; 0x3f3d
    6c14:	66180358 			; <UNDEFINED> instruction: 0x66180358
    6c18:	032f3d3d 			; <UNDEFINED> instruction: 0x032f3d3d
    6c1c:	3d3d5868 	ldccc	8, cr5, [sp, #-416]!	; 0xfffffe60
    6c20:	580b032f 	stmdapl	fp, {r0, r1, r2, r3, r5, r8, r9}
    6c24:	032f3d3d 			; <UNDEFINED> instruction: 0x032f3d3d
    6c28:	3d3d580b 	ldccc	8, cr5, [sp, #-44]!	; 0xffffffd4
    6c2c:	3d3d5c2f 	ldccc	12, cr5, [sp, #-188]!	; 0xffffff44
    6c30:	3e3d5c2f 	cdpcc	12, 3, cr5, cr13, cr15, {1}
    6c34:	2f02492f 	svccs	0x0002492f
    6c38:	00010100 	andeq	r0, r1, r0, lsl #2
    6c3c:	33b40205 			; <UNDEFINED> instruction: 0x33b40205
    6c40:	f3030000 	vhadd.u8	d0, d3, d0
    6c44:	09030101 	stmdbeq	r3, {r0, r8}
    6c48:	2e770301 	cdpcs	3, 7, cr0, cr7, cr1, {0}
    6c4c:	af200903 	svcge	0x00200903
    6c50:	1f232121 	svcne	0x00232121
    6c54:	262f2222 	strtcs	r2, [pc], -r2, lsr #4
    6c58:	2d4a0b03 	vstrcs	d16, [sl, #-12]
    6c5c:	00335a2f 	eorseq	r5, r3, pc, lsr #20
    6c60:	03020402 	movweq	r0, #9218	; 0x2402
    6c64:	11032e76 	tstne	r3, r6, ror lr
    6c68:	f214033c 	vcge.s16	d0, d4, d28
    6c6c:	032e6f03 			; <UNDEFINED> instruction: 0x032e6f03
    6c70:	62034a23 	andvs	r4, r3, #143360	; 0x23000
    6c74:	32224c3c 	eorcc	r4, r2, #60, 24	; 0x3c00
    6c78:	224c3236 	subcs	r3, ip, #1610612739	; 0x60000003
    6c7c:	ac090350 	stcge	3, cr0, [r9], {80}	; 0x50
    6c80:	3626595e 			; <UNDEFINED> instruction: 0x3626595e
    6c84:	02666203 	rsbeq	r6, r6, #805306368	; 0x30000000
    6c88:	01010016 	tsteq	r1, r6, lsl r0
    6c8c:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    6c90:	03000034 	movweq	r0, #52	; 0x34
    6c94:	2f0102f7 	svccs	0x000102f7
    6c98:	000302ad 	andeq	r0, r3, sp, lsr #5
    6c9c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6ca0:	00000002 	andeq	r0, r0, r2
    6ca4:	03820300 	orreq	r0, r2, #0, 6
    6ca8:	025d2401 	subseq	r2, sp, #16777216	; 0x1000000
    6cac:	0101002a 	tsteq	r1, sl, lsr #32
    6cb0:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    6cb4:	03000034 	movweq	r0, #52	; 0x34
    6cb8:	21010396 			; <UNDEFINED> instruction: 0x21010396
    6cbc:	02413e23 	subeq	r3, r1, #560	; 0x230
    6cc0:	01010006 	tsteq	r1, r6
    6cc4:	000001e9 	andeq	r0, r0, r9, ror #3
    6cc8:	01670002 	cmneq	r7, r2
    6ccc:	01020000 	mrseq	r0, (UNDEF: 2)
    6cd0:	000d0efb 	strdeq	r0, [sp], -fp
    6cd4:	01010101 	tsteq	r1, r1, lsl #2
    6cd8:	01000000 	mrseq	r0, (UNDEF: 0)
    6cdc:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    6ce0:	2f2e2e2f 	svccs	0x002e2e2f
    6ce4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6ce8:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    6cec:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    6cf0:	0062696c 	rsbeq	r6, r2, ip, ror #18
    6cf4:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    6cf8:	63635c69 	cmnvs	r3, #26880	; 0x6900
    6cfc:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    6d00:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6d04:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    6d08:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    6d0c:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    6d10:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    6d14:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6d18:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    6d1c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    6d20:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 6bb8 <__exidx_end+0x1c8b>
    6d24:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    6d28:	63675c72 	cmnvs	r7, #29184	; 0x7200
    6d2c:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    6d30:	6f6e2d6d 	svcvs	0x006e2d6d
    6d34:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6d38:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    6d3c:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    6d40:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    6d44:	615c3371 	cmpvs	ip, r1, ror r3
    6d48:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6d4c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6d50:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6d54:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    6d58:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6d5c:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    6d60:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    6d64:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    6d68:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    6d6c:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    6d70:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    6d74:	31303030 	teqcc	r0, r0, lsr r0
    6d78:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    6d7c:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    6d80:	61746562 	cmnvs	r4, r2, ror #10
    6d84:	63635c32 	cmnvs	r3, #12800	; 0x3200
    6d88:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    6d8c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 6bc4 <__exidx_end+0x1c97>
    6d90:	6f635c73 	svcvs	0x00635c73
    6d94:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    6d98:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    6d9c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    6da0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6da4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6da8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6dac:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    6db0:	3130322d 	teqcc	r0, sp, lsr #4
    6db4:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    6db8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6dbc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6dc0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6dc4:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    6dc8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6dcc:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    6dd0:	73000073 	movwvc	r0, #115	; 0x73
    6dd4:	70757465 	rsbsvc	r7, r5, r5, ror #8
    6dd8:	0100632e 	tsteq	r0, lr, lsr #6
    6ddc:	6f610000 	svcvs	0x00610000
    6de0:	75775f6e 	ldrbvc	r5, [r7, #-3950]!	; 0xfffff092
    6de4:	00682e63 	rsbeq	r2, r8, r3, ror #28
    6de8:	5f000001 	svcpl	0x00000001
    6dec:	61666564 	cmnvs	r6, r4, ror #10
    6df0:	5f746c75 	svcpl	0x00746c75
    6df4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    6df8:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6dfc:	5f000002 	svcpl	0x00000002
    6e00:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6e04:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6e08:	00000300 	andeq	r0, r0, r0, lsl #6
    6e0c:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    6e10:	6f725f70 	svcvs	0x00725f70
    6e14:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    6e18:	63000001 	movwvs	r0, #1
    6e1c:	69706968 	ldmdbvs	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    6e20:	2e6f666e 	cdpcs	6, 6, cr6, cr15, cr14, {3}
    6e24:	00010068 	andeq	r0, r1, r8, rrx
    6e28:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    6e2c:	682e7075 	stmdavs	lr!, {r0, r2, r4, r5, r6, ip, sp, lr}
    6e30:	00000100 	andeq	r0, r0, r0, lsl #2
    6e34:	02050000 	andeq	r0, r5, #0
    6e38:	00003508 	andeq	r3, r0, r8, lsl #10
    6e3c:	01028d03 	tsteq	r2, r3, lsl #26
    6e40:	200a0320 	andcs	r0, sl, r0, lsr #6
    6e44:	01040200 	mrseq	r0, R12_usr
    6e48:	43424f41 	movtmi	r4, #12097	; 0x2f41
    6e4c:	041f212d 	ldreq	r2, [pc], #-301	; 6e54 <__exidx_end+0x1f27>
    6e50:	04870302 	streq	r0, [r7], #770	; 0x302
    6e54:	03010466 	movweq	r0, #5222	; 0x1466
    6e58:	363c7c86 	ldrtcc	r7, [ip], -r6, lsl #25
    6e5c:	4a090342 	bmi	247b6c <__ccfg+0x227bc4>
    6e60:	2f2f3d2d 	svccs	0x002f3d2d
    6e64:	212f2f1f 			; <UNDEFINED> instruction: 0x212f2f1f
    6e68:	25483123 	strbcs	r3, [r8, #-291]	; 0xfffffedd
    6e6c:	41580a03 	cmpmi	r8, r3, lsl #20
    6e70:	1e023f5d 	mcrne	15, 0, r3, cr2, cr13, {2}
    6e74:	00010100 	andeq	r0, r1, r0, lsl #2
    6e78:	35dc0205 	ldrbcc	r0, [ip, #517]	; 0x205
    6e7c:	f0030000 			; <UNDEFINED> instruction: 0xf0030000
    6e80:	30280100 	eorcc	r0, r8, r0, lsl #2
    6e84:	03413343 	movteq	r3, #4931	; 0x1343
    6e88:	03333c09 	teqeq	r3, #2304	; 0x900
    6e8c:	0e032e0b 	cdpeq	14, 0, cr2, cr3, cr11, {0}
    6e90:	7903273c 	stmdbvc	r3, {r2, r3, r4, r5, r8, r9, sl, sp}
    6e94:	20150320 	andscs	r0, r5, r0, lsr #6
    6e98:	422e0903 	eormi	r0, lr, #49152	; 0xc000
    6e9c:	09034967 	stmdbeq	r3, {r0, r1, r2, r5, r6, r8, fp, lr}
    6ea0:	242d5920 	strtcs	r5, [sp], #-2336	; 0xfffff6e0
    6ea4:	02004b69 	andeq	r4, r0, #107520	; 0x1a400
    6ea8:	4d270104 	stfmis	f0, [r7, #-16]!
    6eac:	01001302 	tsteq	r0, r2, lsl #6
    6eb0:	00045701 	andeq	r5, r4, r1, lsl #14
    6eb4:	65000200 	strvs	r0, [r0, #-512]	; 0xfffffe00
    6eb8:	02000001 	andeq	r0, r0, #1
    6ebc:	0d0efb01 	vstreq	d15, [lr, #-4]
    6ec0:	01010100 	mrseq	r0, (UNDEF: 17)
    6ec4:	00000001 	andeq	r0, r0, r1
    6ec8:	01000001 	tsteq	r0, r1
    6ecc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6ed0:	2f2e2e2f 	svccs	0x002e2e2f
    6ed4:	642f2e2e 	strtvs	r2, [pc], #-3630	; 6edc <__exidx_end+0x1faf>
    6ed8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    6edc:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    6ee0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    6ee4:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    6ee8:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    6eec:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    6ef0:	31303030 	teqcc	r0, r0, lsr r0
    6ef4:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    6ef8:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    6efc:	61746562 	cmnvs	r4, r2, ror #10
    6f00:	63635c32 	cmnvs	r3, #12800	; 0x3200
    6f04:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    6f08:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 6d40 <__exidx_end+0x1e13>
    6f0c:	6f635c73 	svcvs	0x00635c73
    6f10:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    6f14:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    6f18:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    6f1c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6f20:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6f24:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6f28:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    6f2c:	3130322d 	teqcc	r0, sp, lsr #4
    6f30:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    6f34:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6f38:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6f3c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6f40:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    6f44:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6f48:	616d5c65 	cmnvs	sp, r5, ror #24
    6f4c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    6f50:	3a630065 	bcc	18c70ec <__ccfg+0x18a7144>
    6f54:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    6f58:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    6f5c:	302e322e 	eorcc	r3, lr, lr, lsr #4
    6f60:	3030302e 	eorscc	r3, r0, lr, lsr #32
    6f64:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    6f68:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    6f6c:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    6f70:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    6f74:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    6f78:	6f6f745c 	svcvs	0x006f745c
    6f7c:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    6f80:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    6f84:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    6f88:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    6f8c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6f90:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6f94:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6f98:	5f342d69 	svcpl	0x00342d69
    6f9c:	30322d39 	eorscc	r2, r2, r9, lsr sp
    6fa0:	33713531 	cmncc	r1, #205520896	; 0xc400000
    6fa4:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6fa8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6fac:	61652d65 	cmnvs	r5, r5, ror #26
    6fb0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    6fb4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6fb8:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    6fbc:	00007379 	andeq	r7, r0, r9, ror r3
    6fc0:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    6fc4:	6f725f70 	svcvs	0x00725f70
    6fc8:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    6fcc:	73000001 	movwvc	r0, #1
    6fd0:	70757465 	rsbsvc	r7, r5, r5, ror #8
    6fd4:	6d6f725f 	sfmvs	f7, 2, [pc, #-380]!	; 6e60 <__exidx_end+0x1f33>
    6fd8:	0100682e 	tsteq	r0, lr, lsr #16
    6fdc:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    6fe0:	74635f73 	strbtvc	r5, [r3], #-3955	; 0xfffff08d
    6fe4:	682e6c72 	stmdavs	lr!, {r1, r4, r5, r6, sl, fp, sp, lr}
    6fe8:	00000100 	andeq	r0, r0, r0, lsl #2
    6fec:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    6ff0:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    6ff4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    6ff8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    6ffc:	00000200 	andeq	r0, r0, r0, lsl #4
    7000:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    7004:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    7008:	00030068 	andeq	r0, r3, r8, rrx
    700c:	69646400 	stmdbvs	r4!, {sl, sp, lr}^
    7010:	0100682e 	tsteq	r0, lr, lsr #16
    7014:	736f0000 	cmnvc	pc, #0
    7018:	00682e63 	rsbeq	r2, r8, r3, ror #28
    701c:	00000001 	andeq	r0, r0, r1
    7020:	80020500 	andhi	r0, r2, r0, lsl #10
    7024:	03000036 	movweq	r0, #54	; 0x36
    7028:	030100ff 	movweq	r0, #4351	; 0x10ff
    702c:	0e03200b 	cdpeq	0, 0, cr2, cr3, cr11, {0}
    7030:	2072032e 	rsbscs	r0, r2, lr, lsr #6
    7034:	042e0e03 	strteq	r0, [lr], #-3587	; 0xfffff1fd
    7038:	00d70302 	sbcseq	r0, r7, r2, lsl #6
    703c:	03010420 	movweq	r0, #5152	; 0x1420
    7040:	04207fa8 	strteq	r7, [r0], #-4008	; 0xfffff058
    7044:	00d90302 	sbcseq	r0, r9, r2, lsl #6
    7048:	04212d2e 	strteq	r2, [r1], #-3374	; 0xfffff2d2
    704c:	7fac0301 	svcvc	0x00ac0301
    7050:	214d302e 	cmpcs	sp, lr, lsr #32
    7054:	2222652f 	eorcs	r6, r2, #197132288	; 0xbc00000
    7058:	03221e22 			; <UNDEFINED> instruction: 0x03221e22
    705c:	0d035878 	stceq	8, cr5, [r3, #-480]	; 0xfffffe20
    7060:	3c730320 	ldclcc	3, cr0, [r3], #-128	; 0xffffff80
    7064:	21201003 			; <UNDEFINED> instruction: 0x21201003
    7068:	02212121 	eoreq	r2, r1, #1073741832	; 0x40000008
    706c:	0101000d 	tsteq	r1, sp
    7070:	fc020500 	stc2	5, cr0, [r2], {-0}
    7074:	03000036 	movweq	r0, #54	; 0x36
    7078:	1a0101bf 	bne	4777c <__ccfg+0x277d4>
    707c:	204a7803 	subcs	r7, sl, r3, lsl #16
    7080:	200e0328 	andcs	r0, lr, r8, lsr #6
    7084:	422e7a03 	eormi	r7, lr, #12288	; 0x3000
    7088:	302e0e03 	eorcc	r0, lr, r3, lsl #28
    708c:	2d432d31 	stclcs	13, cr2, [r3, #-196]	; 0xffffff3c
    7090:	21300204 	teqcs	r0, r4, lsl #4
    7094:	0b030104 	bleq	c74ac <__ccfg+0xa7504>
    7098:	652f3d2e 	strvs	r3, [pc, #-3374]!	; 6372 <__exidx_end+0x1445>
    709c:	660c0323 	strvs	r0, [ip], -r3, lsr #6
    70a0:	28302c4d 	ldmdacs	r0!, {r0, r2, r3, r6, sl, fp, sp}
    70a4:	022d522d 	eoreq	r5, sp, #-805306366	; 0xd0000002
    70a8:	01010015 	tsteq	r1, r5, lsl r0
    70ac:	a8020500 	stmdage	r2, {r8, sl}
    70b0:	03000037 	movweq	r0, #55	; 0x37
    70b4:	0301049f 	movweq	r0, #5279	; 0x149f
    70b8:	0903010c 	stmdbeq	r3, {r2, r3, r8}
    70bc:	20770320 	rsbscs	r0, r7, r0, lsr #6
    70c0:	27333121 	ldrcs	r3, [r3, -r1, lsr #2]!
    70c4:	22313030 	eorscs	r3, r1, #48	; 0x30
    70c8:	31351d2d 	teqcc	r5, sp, lsr #26
    70cc:	223d3e3d 	eorscs	r3, sp, #976	; 0x3d0
    70d0:	03271d3b 			; <UNDEFINED> instruction: 0x03271d3b
    70d4:	12032076 	andne	r2, r3, #118	; 0x76
    70d8:	0006022e 	andeq	r0, r6, lr, lsr #4
    70dc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    70e0:	00380402 	eorseq	r0, r8, r2, lsl #8
    70e4:	04e50300 	strbteq	r0, [r5], #768	; 0x300
    70e8:	03341801 	teqeq	r4, #65536	; 0x10000
    70ec:	33362079 	teqcc	r6, #121	; 0x79
    70f0:	01000502 	tsteq	r0, r2, lsl #10
    70f4:	02050001 	andeq	r0, r5, #1
    70f8:	00000000 	andeq	r0, r0, r0
    70fc:	01058103 	tsteq	r5, r3, lsl #2
    7100:	06023318 			; <UNDEFINED> instruction: 0x06023318
    7104:	00010100 	andeq	r0, r1, r0, lsl #2
    7108:	381c0205 	ldmdacc	ip, {r0, r2, r9}
    710c:	95030000 	strls	r0, [r3, #-0]
    7110:	03190105 	tsteq	r9, #1073741825	; 0x40000001
    7114:	06022e13 			; <UNDEFINED> instruction: 0x06022e13
    7118:	00010100 	andeq	r0, r1, r0, lsl #2
    711c:	382c0205 	stmdacc	ip!, {r0, r2, r9}
    7120:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
    7124:	03190105 	tsteq	r9, #1073741825	; 0x40000001
    7128:	08022e13 	stmdaeq	r2, {r0, r1, r4, r9, sl, fp, sp}
    712c:	00010100 	andeq	r0, r1, r0, lsl #2
    7130:	38400205 	stmdacc	r0, {r0, r2, r9}^
    7134:	db030000 	blle	c713c <__ccfg+0xa7194>
    7138:	0b030105 	bleq	c7554 <__ccfg+0xa75ac>
    713c:	20090320 	andcs	r0, r9, r0, lsr #6
    7140:	03207703 			; <UNDEFINED> instruction: 0x03207703
    7144:	79032009 	stmdbvc	r3, {r0, r3, sp}
    7148:	322a3520 	eorcc	r3, sl, #32, 10	; 0x8000000
    714c:	32303122 	eorscc	r3, r0, #-2147483640	; 0x80000008
    7150:	32302747 	eorscc	r2, r0, #18612224	; 0x11c0000
    7154:	2e170347 	cdpcs	3, 1, cr0, cr7, cr7, {2}
    7158:	273a3637 			; <UNDEFINED> instruction: 0x273a3637
    715c:	01000802 	tsteq	r0, r2, lsl #16
    7160:	02050001 	andeq	r0, r5, #1
    7164:	000038a4 	andeq	r3, r0, r4, lsr #17
    7168:	0106a903 	tsteq	r6, r3, lsl #18
    716c:	03552115 	cmpeq	r5, #1073741829	; 0x40000005
    7170:	03022009 	movweq	r2, #8201	; 0x2009
    7174:	00010100 	andeq	r0, r1, r0, lsl #2
    7178:	38b80205 	ldmcc	r8!, {r0, r2, r9}
    717c:	bc030000 	stclt	0, cr0, [r3], {-0}
    7180:	21150106 	tstcs	r5, r6, lsl #2
    7184:	20090355 	andcs	r0, r9, r5, asr r3
    7188:	01000302 	tsteq	r0, r2, lsl #6
    718c:	02050001 	andeq	r0, r5, #1
    7190:	000038cc 	andeq	r3, r0, ip, asr #17
    7194:	0106cf03 	tsteq	r6, r3, lsl #30
    7198:	03552115 	cmpeq	r5, #1073741829	; 0x40000005
    719c:	03022009 	movweq	r2, #8201	; 0x2009
    71a0:	00010100 	andeq	r0, r1, r0, lsl #2
    71a4:	38e00205 	stmiacc	r0!, {r0, r2, r9}^
    71a8:	e2030000 	and	r0, r3, #0
    71ac:	21160106 	tstcs	r6, r6, lsl #2
    71b0:	7a032f43 	bvc	d2ec4 <__ccfg+0xb2f1c>
    71b4:	2c354020 	ldccs	0, cr4, [r5], #-128	; 0xffffff80
    71b8:	03207103 			; <UNDEFINED> instruction: 0x03207103
    71bc:	03022e16 	movweq	r2, #11798	; 0x2e16
    71c0:	00010100 	andeq	r0, r1, r0, lsl #2
    71c4:	39080205 	stmdbcc	r8, {r0, r2, r9}
    71c8:	82030000 	andhi	r0, r3, #0
    71cc:	33160107 	tstcc	r6, #-1073741823	; 0xc0000001
    71d0:	01000602 	tsteq	r0, r2, lsl #12
    71d4:	02050001 	andeq	r0, r5, #1
    71d8:	00003918 	andeq	r3, r0, r8, lsl r9
    71dc:	01079403 	tsteq	r7, r3, lsl #8
    71e0:	29432116 	stmdbcs	r3, {r1, r2, r4, r8, sp}^
    71e4:	79033334 	stmdbvc	r3, {r2, r4, r5, r8, r9, ip, sp}
    71e8:	031e3520 	tsteq	lr, #32, 10	; 0x8000000
    71ec:	16032e71 			; <UNDEFINED> instruction: 0x16032e71
    71f0:	00050220 	andeq	r0, r5, r0, lsr #4
    71f4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    71f8:	00394402 	eorseq	r4, r9, r2, lsl #8
    71fc:	07b40300 	ldreq	r0, [r4, r0, lsl #6]!
    7200:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    7204:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    7208:	01010003 	tsteq	r1, r3
    720c:	58020500 	stmdapl	r2, {r8, sl}
    7210:	03000039 	movweq	r0, #57	; 0x39
    7214:	150107c8 	strne	r0, [r1, #-1992]	; 0xfffff838
    7218:	0a035521 	beq	dc6a4 <__ccfg+0xbc6fc>
    721c:	00030220 	andeq	r0, r3, r0, lsr #4
    7220:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7224:	00396c02 	eorseq	r6, r9, r2, lsl #24
    7228:	02a70300 	adceq	r0, r7, #0, 6
    722c:	09032001 	stmdbeq	r3, {r0, sp}
    7230:	211f3d20 	tstcs	pc, r0, lsr #26
    7234:	d1032f4e 	tstle	r3, lr, asr #30
    7238:	b903ac02 	stmdblt	r3, {r1, sl, fp, sp, pc}
    723c:	c703207d 	smlsdxgt	r3, sp, r0, r2
    7240:	b9032002 	stmdblt	r3, {r1, sp}
    7244:	2f5c207d 	svccs	0x005c207d
    7248:	2f3d211f 	svccs	0x003d211f
    724c:	3d3d211f 	ldfccs	f2, [sp, #-124]!	; 0xffffff84
    7250:	3d43211f 	stfcce	f2, [r3, #-124]	; 0xffffff84
    7254:	3d523d6e 	ldclcc	13, cr3, [r2, #-440]	; 0xfffffe48
    7258:	0903211f 	stmdbeq	r3, {r0, r1, r2, r3, r4, r8, sp}
    725c:	0a033d3c 	beq	d6754 <__ccfg+0xb67ac>
    7260:	0b033d66 	bleq	d6800 <__ccfg+0xb6858>
    7264:	3d7c3d66 	ldclcc	13, cr3, [ip, #-408]!	; 0xfffffe68
    7268:	4b40211f 	blmi	100f6ec <__ccfg+0xfef744>
    726c:	01001202 	tsteq	r0, r2, lsl #4
    7270:	02050001 	andeq	r0, r5, #1
    7274:	00003a7c 	andeq	r3, r0, ip, ror sl
    7278:	0107de03 	tsteq	r7, r3, lsl #28
    727c:	01040200 	mrseq	r0, R12_usr
    7280:	52200e03 	eorpl	r0, r0, #3, 28	; 0x30
    7284:	1d231d23 	stcne	13, cr1, [r3, #-140]!	; 0xffffff74
    7288:	034b684d 	movteq	r6, #47181	; 0xb84d
    728c:	4134207a 	teqmi	r4, sl, ror r0
    7290:	01040200 	mrseq	r0, R12_usr
    7294:	02315b3d 	eorseq	r5, r1, #62464	; 0xf400
    7298:	0101000b 	tsteq	r1, fp
    729c:	e0020500 	and	r0, r2, r0, lsl #10
    72a0:	0300003a 	movweq	r0, #58	; 0x3a
    72a4:	03010893 	movweq	r0, #6291	; 0x1893
    72a8:	2d2f0109 	stfcss	f0, [pc, #-36]!	; 728c <__exidx_end+0x235f>
    72ac:	02002221 	andeq	r2, r0, #268435458	; 0x10000002
    72b0:	4b3d0104 	blmi	f476c8 <__ccfg+0xf27720>
    72b4:	01000702 	tsteq	r0, r2, lsl #14
    72b8:	02050001 	andeq	r0, r5, #1
    72bc:	00003b08 	andeq	r3, r0, r8, lsl #22
    72c0:	01039b03 	tsteq	r3, r3, lsl #22
    72c4:	03010903 	movweq	r0, #6403	; 0x1903
    72c8:	03203c77 			; <UNDEFINED> instruction: 0x03203c77
    72cc:	30522009 	subscc	r2, r2, r9
    72d0:	4a0a0331 	bmi	287f9c <__ccfg+0x267ff4>
    72d4:	484c2b23 	stmdami	ip, {r0, r1, r5, r8, r9, fp, sp}^
    72d8:	762d2f24 	strtvc	r2, [sp], -r4, lsr #30
    72dc:	1c322933 			; <UNDEFINED> instruction: 0x1c322933
    72e0:	3d522650 	ldclcc	6, cr2, [r2, #-320]	; 0xfffffec0
    72e4:	5d2f4d4f 	stcpl	13, cr4, [pc, #-316]!	; 71b0 <__exidx_end+0x2283>
    72e8:	243d4b84 	ldrtcs	r4, [sp], #-2948	; 0xfffff47c
    72ec:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    72f0:	2f5b4b01 	svccs	0x005b4b01
    72f4:	3f4d864b 	svccc	0x004d864b
    72f8:	1e4a0903 	vmlane.f16	s1, s20, s6	; <UNPREDICTABLE>
    72fc:	0b031e22 	bleq	ceb8c <__ccfg+0xaebe4>
    7300:	0303043c 	movweq	r0, #13372	; 0x343c
    7304:	024a7db9 	subeq	r7, sl, #11840	; 0x2e40
    7308:	0101001f 	tsteq	r1, pc, lsl r0
    730c:	00000365 	andeq	r0, r0, r5, ror #6
    7310:	01a80002 			; <UNDEFINED> instruction: 0x01a80002
    7314:	01020000 	mrseq	r0, (UNDEF: 2)
    7318:	000d0efb 	strdeq	r0, [sp], -fp
    731c:	01010101 	tsteq	r1, r1, lsl #2
    7320:	01000000 	mrseq	r0, (UNDEF: 0)
    7324:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    7328:	2f2e2e2f 	svccs	0x002e2e2f
    732c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7330:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    7334:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    7338:	0062696c 	rsbeq	r6, r2, ip, ror #18
    733c:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    7340:	63635c69 	cmnvs	r3, #26880	; 0x6900
    7344:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    7348:	302e302e 	eorcc	r3, lr, lr, lsr #32
    734c:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7350:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7354:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7358:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    735c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7360:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7364:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7368:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7200 <__exidx_end+0x22d3>
    736c:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7370:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7374:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7378:	6f6e2d6d 	svcvs	0x006e2d6d
    737c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7380:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7384:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7388:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    738c:	615c3371 	cmpvs	ip, r1, ror r3
    7390:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7394:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7398:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    739c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    73a0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    73a4:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    73a8:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    73ac:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    73b0:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    73b4:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    73b8:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    73bc:	31303030 	teqcc	r0, r0, lsr r0
    73c0:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    73c4:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    73c8:	61746562 	cmnvs	r4, r2, ror #10
    73cc:	63635c32 	cmnvs	r3, #12800	; 0x3200
    73d0:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    73d4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 720c <__exidx_end+0x22df>
    73d8:	6f635c73 	svcvs	0x00635c73
    73dc:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    73e0:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    73e4:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    73e8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    73ec:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    73f0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    73f4:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    73f8:	3130322d 	teqcc	r0, sp, lsr #4
    73fc:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7400:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7404:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7408:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    740c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7410:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7414:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    7418:	2f2e0073 	svccs	0x002e0073
    741c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7420:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7424:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    7428:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    742c:	74635f73 	strbtvc	r5, [r3], #-3955	; 0xfffff08d
    7430:	632e6c72 			; <UNDEFINED> instruction: 0x632e6c72
    7434:	00000100 	andeq	r0, r0, r0, lsl #2
    7438:	5f6e6f61 	svcpl	0x006e6f61
    743c:	2e637577 	mcrcs	5, 3, r7, cr3, cr7, {3}
    7440:	00010068 	andeq	r0, r1, r8, rrx
    7444:	63736f00 	cmnvs	r3, #0, 30
    7448:	0100682e 	tsteq	r0, lr, lsr #16
    744c:	72700000 	rsbsvc	r0, r0, #0
    7450:	682e6d63 	stmdavs	lr!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}
    7454:	00000100 	andeq	r0, r0, r0, lsl #2
    7458:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    745c:	6f725f70 	svcvs	0x00725f70
    7460:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    7464:	5f000001 	svcpl	0x00000001
    7468:	61666564 	cmnvs	r6, r4, ror #10
    746c:	5f746c75 	svcpl	0x00746c75
    7470:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    7474:	00682e73 	rsbeq	r2, r8, r3, ror lr
    7478:	5f000002 	svcpl	0x00000002
    747c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    7480:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    7484:	00000300 	andeq	r0, r0, r0, lsl #6
    7488:	745f7768 	ldrbvc	r7, [pc], #-1896	; 7490 <__exidx_end+0x2563>
    748c:	73657079 	cmnvc	r5, #121	; 0x79
    7490:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    7494:	6f720000 	svcvs	0x00720000
    7498:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    749c:	73000001 	movwvc	r0, #1
    74a0:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
    74a4:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
    74a8:	00010068 	andeq	r0, r1, r8, rrx
    74ac:	6e6f6100 	powvse	f6, f7, f0
    74b0:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    74b4:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    74b8:	00010068 	andeq	r0, r1, r8, rrx
    74bc:	05000000 	streq	r0, [r0, #-0]
    74c0:	00000002 	andeq	r0, r0, r2
    74c4:	00f90300 	rscseq	r0, r9, r0, lsl #6
    74c8:	03020401 	movweq	r0, #9217	; 0x2401
    74cc:	040102e9 	streq	r0, [r1], #-745	; 0xfffffd17
    74d0:	7d970301 	ldcvc	3, cr0, [r7, #4]
    74d4:	0302042e 	movweq	r0, #9262	; 0x242e
    74d8:	002e02e9 	eoreq	r0, lr, r9, ror #5
    74dc:	03010402 	movweq	r0, #5122	; 0x1402
    74e0:	042000ce 	strteq	r0, [r0], #-206	; 0xffffff32
    74e4:	04020001 	streq	r0, [r2], #-1
    74e8:	7cd10301 	ldclvc	3, cr0, [r1], {1}
    74ec:	2e0c032e 	cdpcs	3, 0, cr0, cr12, cr14, {1}
    74f0:	01040200 	mrseq	r0, R12_usr
    74f4:	034b8967 	movteq	r8, #47463	; 0xb967
    74f8:	03044a09 	movweq	r4, #18953	; 0x4a09
    74fc:	5801a503 	stmdapl	r1, {r0, r1, r8, sl, sp, pc}
    7500:	e4030104 	str	r0, [r3], #-260	; 0xfffffefc
    7504:	02004a7e 	andeq	r4, r0, #516096	; 0x7e000
    7508:	045d0104 	ldrbeq	r0, [sp], #-260	; 0xfffffefc
    750c:	03810304 	orreq	r0, r1, #4, 6	; 0x10000000
    7510:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    7514:	3c140301 	ldccc	3, cr0, [r4], {1}
    7518:	02000104 	andeq	r0, r0, #4, 2
    751c:	ef030104 	svc	0x00030104
    7520:	04042e7c 	streq	r2, [r4], #-3708	; 0xfffff184
    7524:	2e03b703 	cdpcs	7, 0, cr11, cr3, cr3, {0}
    7528:	03241c32 			; <UNDEFINED> instruction: 0x03241c32
    752c:	02002042 	andeq	r2, r0, #66	; 0x42
    7530:	14030104 	strne	r0, [r3], #-260	; 0xfffffefc
    7534:	0001042e 	andeq	r0, r1, lr, lsr #8
    7538:	03010402 	movweq	r0, #5122	; 0x1402
    753c:	03207cf7 			; <UNDEFINED> instruction: 0x03207cf7
    7540:	1b412e09 	blne	1052d6c <__ccfg+0x1032dc4>
    7544:	384b8328 	stmdacc	fp, {r3, r5, r8, r9, pc}^
    7548:	04041b24 	streq	r1, [r4], #-2852	; 0xfffff4dc
    754c:	2e02e703 	cdpcs	7, 0, cr14, cr2, cr3, {0}
    7550:	01040200 	mrseq	r0, R12_usr
    7554:	043c1403 	ldrteq	r1, [ip], #-1027	; 0xfffffbfd
    7558:	04020001 	streq	r0, [r2], #-1
    755c:	7d8d0301 	stcvc	3, cr0, [sp, #4]
    7560:	17023020 	strne	r3, [r2, -r0, lsr #32]
    7564:	00010100 	andeq	r0, r1, r0, lsl #2
    7568:	3c580205 	lfmcc	f0, 2, [r8], {5}
    756c:	da030000 	ble	c7574 <__ccfg+0xa75cc>
    7570:	1d030101 	stfnes	f0, [r3, #-4]
    7574:	2063032e 	rsbcs	r0, r3, lr, lsr #6
    7578:	59201d03 	stmdbpl	r0!, {r0, r1, r8, sl, fp, ip}
    757c:	3232412f 	eorscc	r4, r2, #-1073741813	; 0xc000000b
    7580:	21321c22 	teqcs	r2, r2, lsr #24
    7584:	1b325c94 	blne	c9e7dc <__ccfg+0xc7e834>
    7588:	5f030504 	svcpl	0x00030504
    758c:	0104212e 	tsteq	r4, lr, lsr #2
    7590:	432e2403 			; <UNDEFINED> instruction: 0x432e2403
    7594:	04331b32 	ldrteq	r1, [r3], #-2866	; 0xfffff4ce
    7598:	20500305 	subscs	r0, r0, r5, lsl #6
    759c:	03010421 	movweq	r0, #5153	; 0x1421
    75a0:	05042e2e 	streq	r2, [r4, #-3630]	; 0xfffff1d2
    75a4:	042e5103 	strteq	r5, [lr], #-259	; 0xfffffefd
    75a8:	20340301 	eorscs	r0, r4, r1, lsl #6
    75ac:	4d030504 	cfstr32mi	mvfx0, [r3, #-16]
    75b0:	03010420 	movweq	r0, #5152	; 0x1420
    75b4:	652f2e34 	strvs	r2, [pc, #-3636]!	; 6788 <__exidx_end+0x185b>
    75b8:	4d2f6923 			; <UNDEFINED> instruction: 0x4d2f6923
    75bc:	32213e21 	eorcc	r3, r1, #528	; 0x210
    75c0:	01040200 	mrseq	r0, R12_usr
    75c4:	03065806 	movweq	r5, #26630	; 0x6806
    75c8:	3fca4a0f 	svccc	0x00ca4a0f
    75cc:	24242a2f 	strtcs	r2, [r4], #-2607	; 0xfffff5d1
    75d0:	9340322b 	movtls	r3, #555	; 0x22b
    75d4:	3d3e3d31 	ldccc	13, cr3, [lr, #-196]!	; 0xffffff3c
    75d8:	6303213e 	movwvs	r2, #12606	; 0x313e
    75dc:	26032d3c 			; <UNDEFINED> instruction: 0x26032d3c
    75e0:	3d313120 	ldfccs	f3, [r1, #-128]!	; 0xffffff80
    75e4:	213e3d3e 	teqcs	lr, lr, lsr sp
    75e8:	212e0b03 			; <UNDEFINED> instruction: 0x212e0b03
    75ec:	033c7803 	teqeq	ip, #196608	; 0x30000
    75f0:	77032009 	strvc	r2, [r3, -r9]
    75f4:	3c0e032e 	stccc	3, cr0, [lr], {46}	; 0x2e
    75f8:	20710321 	rsbscs	r0, r1, r1, lsr #6
    75fc:	7b3c0f03 	blvc	f0b210 <__ccfg+0xeeb268>
    7600:	6521231d 	strvs	r2, [r1, #-797]!	; 0xfffffce3
    7604:	28232122 	stmdacs	r3!, {r1, r5, r8, sp}
    7608:	34207803 	strtcc	r7, [r0], #-2051	; 0xfffff7fd
    760c:	3d4c2221 	sfmcc	f2, 2, [ip, #-132]	; 0xffffff7c
    7610:	2c403e21 	mcrrcs	14, 2, r3, r0, cr1
    7614:	21023d32 	tstcs	r2, r2, lsr sp
    7618:	00010100 	andeq	r0, r1, r0, lsl #2
    761c:	3e780205 	cdpcc	2, 7, cr0, cr8, cr5, {0}
    7620:	b6030000 	strlt	r0, [r3], -r0
    7624:	40270103 	eormi	r0, r7, r3, lsl #2
    7628:	24a22f22 	strtcs	r2, [r2], #3874	; 0xf22
    762c:	4e2a404e 	cdpmi	0, 2, cr4, cr10, cr14, {2}
    7630:	00090286 	andeq	r0, r9, r6, lsl #5
    7634:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7638:	00000002 	andeq	r0, r0, r2
    763c:	03e50300 	mvneq	r0, #0, 6
    7640:	200c0301 	andcs	r0, ip, r1, lsl #6
    7644:	5a30282f 	bpl	c11708 <__ccfg+0xbf1760>
    7648:	322d302d 	eorcc	r3, sp, #45	; 0x2d
    764c:	2b24211f 	blcs	90fad0 <__ccfg+0x8efb28>
    7650:	24322c2f 	ldrtcs	r2, [r2], #-3119	; 0xfffff3d1
    7654:	2f34302f 	svccs	0x0034302f
    7658:	3e1e224b 	cdpcc	2, 1, cr2, cr14, cr11, {2}
    765c:	01000c02 	tsteq	r0, r2, lsl #24
    7660:	02050001 	andeq	r0, r5, #1
    7664:	00003ed8 	ldrdeq	r3, [r0], -r8
    7668:	0104a603 	tsteq	r4, r3, lsl #12
    766c:	26483f13 			; <UNDEFINED> instruction: 0x26483f13
    7670:	01000402 	tsteq	r0, r2, lsl #8
    7674:	00022b01 	andeq	r2, r2, r1, lsl #22
    7678:	43000200 	movwmi	r0, #512	; 0x200
    767c:	02000001 	andeq	r0, r0, #1
    7680:	0d0efb01 	vstreq	d15, [lr, #-4]
    7684:	01010100 	mrseq	r0, (UNDEF: 17)
    7688:	00000001 	andeq	r0, r0, r1
    768c:	01000001 	tsteq	r0, r1
    7690:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7694:	2f2e2e2f 	svccs	0x002e2e2f
    7698:	642f2e2e 	strtvs	r2, [pc], #-3630	; 76a0 <__exidx_end+0x2773>
    769c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    76a0:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    76a4:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    76a8:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    76ac:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    76b0:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    76b4:	31303030 	teqcc	r0, r0, lsr r0
    76b8:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    76bc:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    76c0:	61746562 	cmnvs	r4, r2, ror #10
    76c4:	63635c32 	cmnvs	r3, #12800	; 0x3200
    76c8:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    76cc:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7504 <__exidx_end+0x25d7>
    76d0:	6f635c73 	svcvs	0x00635c73
    76d4:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    76d8:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    76dc:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    76e0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    76e4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    76e8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    76ec:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    76f0:	3130322d 	teqcc	r0, sp, lsr #4
    76f4:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    76f8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    76fc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7700:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7704:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7708:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    770c:	616d5c65 	cmnvs	sp, r5, ror #24
    7710:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    7714:	3a630065 	bcc	18c78b0 <__ccfg+0x18a7908>
    7718:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    771c:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    7720:	302e322e 	eorcc	r3, lr, lr, lsr #4
    7724:	3030302e 	eorscc	r3, r0, lr, lsr #32
    7728:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    772c:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7730:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    7734:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7738:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    773c:	6f6f745c 	svcvs	0x006f745c
    7740:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    7744:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7748:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    774c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7750:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7754:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7758:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    775c:	5f342d69 	svcpl	0x00342d69
    7760:	30322d39 	eorscc	r2, r2, r9, lsr sp
    7764:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7768:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    776c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7770:	61652d65 	cmnvs	r5, r5, ror #26
    7774:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7778:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    777c:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    7780:	00007379 	andeq	r7, r0, r9, ror r3
    7784:	70696863 	rsbvc	r6, r9, r3, ror #16
    7788:	6f666e69 	svcvs	0x00666e69
    778c:	0100632e 	tsteq	r0, lr, lsr #6
    7790:	68630000 	stmdavs	r3!, {}^	; <UNPREDICTABLE>
    7794:	6e697069 	cdpvs	0, 6, cr7, cr9, cr9, {3}
    7798:	682e6f66 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, sl, fp, sp, lr}
    779c:	00000100 	andeq	r0, r0, r0, lsl #2
    77a0:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    77a4:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    77a8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    77ac:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    77b0:	00000200 	andeq	r0, r0, r0, lsl #4
    77b4:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    77b8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    77bc:	00030068 	andeq	r0, r3, r8, rrx
    77c0:	05000000 	streq	r0, [r0, #-0]
    77c4:	00000002 	andeq	r0, r0, r2
    77c8:	00c40300 	sbceq	r0, r4, r0, lsl #6
    77cc:	022f1301 	eoreq	r1, pc, #67108864	; 0x4000000
    77d0:	01010006 	tsteq	r1, r6
    77d4:	00020500 	andeq	r0, r2, r0, lsl #10
    77d8:	03000000 	movweq	r0, #0
    77dc:	140100d0 	strne	r0, [r1], #-208	; 0xffffff30
    77e0:	2e0a032f 	cdpcs	3, 0, cr0, cr10, cr15, {1}
    77e4:	01000802 	tsteq	r0, r2, lsl #16
    77e8:	02050001 	andeq	r0, r5, #1
    77ec:	00003ef0 	strdeq	r3, [r0], -r0
    77f0:	0100e603 	tsteq	r0, r3, lsl #12
    77f4:	044e2a1a 	strbeq	r2, [lr], #-2586	; 0xfffff5e6
    77f8:	019b0302 	orrseq	r0, fp, r2, lsl #6
    77fc:	0301042e 	movweq	r0, #5166	; 0x142e
    7800:	232e7ee6 			; <UNDEFINED> instruction: 0x232e7ee6
    7804:	724b4b4c 	subvc	r4, fp, #76, 22	; 0x13000
    7808:	0502242f 	streq	r2, [r2, #-1071]	; 0xfffffbd1
    780c:	00010100 	andeq	r0, r1, r0, lsl #2
    7810:	00000205 	andeq	r0, r0, r5, lsl #4
    7814:	83030000 	movwhi	r0, #12288	; 0x3000
    7818:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    781c:	2001b003 	andcs	fp, r1, r3
    7820:	d6030104 	strle	r0, [r3], -r4, lsl #2
    7824:	31392e7e 	teqcc	r9, lr, ror lr
    7828:	3c780323 	ldclcc	3, cr0, [r8], #-140	; 0xffffff74
    782c:	034a0a03 	movteq	r0, #43523	; 0xaa03
    7830:	02252e09 	eoreq	r2, r5, #9, 28	; 0x90
    7834:	01010005 	tsteq	r1, r5
    7838:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
    783c:	0300003f 	movweq	r0, #63	; 0x3f
    7840:	040101a6 	streq	r0, [r1], #-422	; 0xfffffe5a
    7844:	00e30302 	rsceq	r0, r3, r2, lsl #6
    7848:	2e110320 	cdpcs	3, 1, cr0, cr1, cr0, {1}
    784c:	033c6f03 	teqeq	ip, #3, 30
    7850:	04252011 	strteq	r2, [r5], #-17	; 0xffffffef
    7854:	7f8c0301 	svcvc	0x008c0301
    7858:	2195923c 	orrscs	r9, r5, ip, lsr r2
    785c:	41222122 			; <UNDEFINED> instruction: 0x41222122
    7860:	09033941 	stmdbeq	r3, {r0, r6, r8, fp, ip, sp}
    7864:	7303272e 	movwvc	r2, #14126	; 0x372e
    7868:	6403212e 	strvs	r2, [r3], #-302	; 0xfffffed2
    786c:	20300320 	eorscs	r0, r0, r0, lsr #6
    7870:	01000402 	tsteq	r0, r2, lsl #8
    7874:	02050001 	andeq	r0, r5, #1
    7878:	00003fa8 	andeq	r3, r0, r8, lsr #31
    787c:	0101e003 	tsteq	r1, r3
    7880:	a4030204 	strge	r0, [r3], #-516	; 0xfffffdfc
    7884:	01042001 	tsteq	r4, r1
    7888:	2e7edd03 	cdpcs	13, 7, cr13, cr14, cr3, {0}
    788c:	90030204 	andls	r0, r3, r4, lsl #4
    7890:	01042e02 	tsteq	r4, r2, lsl #28
    7894:	2e7df003 	cdpcs	0, 7, cr15, cr13, cr3, {0}
    7898:	01040200 	mrseq	r0, R12_usr
    789c:	022e0903 	eoreq	r0, lr, #49152	; 0xc000
    78a0:	01010002 	tsteq	r1, r2
    78a4:	0000021e 	andeq	r0, r0, lr, lsl r2
    78a8:	01420002 	cmpeq	r2, r2
    78ac:	01020000 	mrseq	r0, (UNDEF: 2)
    78b0:	000d0efb 	strdeq	r0, [sp], -fp
    78b4:	01010101 	tsteq	r1, r1, lsl #2
    78b8:	01000000 	mrseq	r0, (UNDEF: 0)
    78bc:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    78c0:	2f2e2e2f 	svccs	0x002e2e2f
    78c4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    78c8:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    78cc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    78d0:	0062696c 	rsbeq	r6, r2, ip, ror #18
    78d4:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    78d8:	63635c69 	cmnvs	r3, #26880	; 0x6900
    78dc:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    78e0:	302e302e 	eorcc	r3, lr, lr, lsr #32
    78e4:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    78e8:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    78ec:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    78f0:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    78f4:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    78f8:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    78fc:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7900:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7798 <__exidx_end+0x286b>
    7904:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7908:	63675c72 	cmnvs	r7, #29184	; 0x7200
    790c:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7910:	6f6e2d6d 	svcvs	0x006e2d6d
    7914:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7918:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    791c:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7920:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    7924:	615c3371 	cmpvs	ip, r1, ror r3
    7928:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    792c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7930:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7934:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7938:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    793c:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    7940:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    7944:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7948:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    794c:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7950:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7954:	31303030 	teqcc	r0, r0, lsr r0
    7958:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    795c:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7960:	61746562 	cmnvs	r4, r2, ror #10
    7964:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7968:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    796c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 77a4 <__exidx_end+0x2877>
    7970:	6f635c73 	svcvs	0x00635c73
    7974:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7978:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    797c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7980:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7984:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7988:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    798c:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7990:	3130322d 	teqcc	r0, sp, lsr #4
    7994:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7998:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    799c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    79a0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    79a4:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    79a8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    79ac:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    79b0:	64000073 	strvs	r0, [r0], #-115	; 0xffffff8d
    79b4:	682e6964 	stmdavs	lr!, {r2, r5, r6, r8, fp, sp, lr}
    79b8:	00000100 	andeq	r0, r0, r0, lsl #2
    79bc:	2e696464 	cdpcs	4, 6, cr6, cr9, cr4, {3}
    79c0:	00010063 	andeq	r0, r1, r3, rrx
    79c4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    79c8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    79cc:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    79d0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    79d4:	00020068 	andeq	r0, r2, r8, rrx
    79d8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    79dc:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    79e0:	0300682e 	movweq	r6, #2094	; 0x82e
    79e4:	70630000 	rsbvc	r0, r3, r0
    79e8:	00682e75 	rsbeq	r2, r8, r5, ror lr
    79ec:	00000001 	andeq	r0, r0, r1
    79f0:	c0020500 	andgt	r0, r2, r0, lsl #10
    79f4:	0300003f 	movweq	r0, #63	; 0x3f
    79f8:	20010188 	andcs	r0, r1, r8, lsl #3
    79fc:	1e503031 	mrcne	0, 2, r3, cr0, cr1, {1}
    7a00:	2c232222 	sfmcs	f2, 4, [r3], #-136	; 0xffffff78
    7a04:	01000502 	tsteq	r0, r2, lsl #10
    7a08:	00020401 	andeq	r0, r2, r1, lsl #8
    7a0c:	3fe80205 	svccc	0x00e80205
    7a10:	c3030000 	movwgt	r0, #12288	; 0x3000
    7a14:	0a030100 	beq	c7e1c <__ccfg+0xa7e74>
    7a18:	00040201 	andeq	r0, r4, r1, lsl #4
    7a1c:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    7a20:	00020500 	andeq	r0, r2, r0, lsl #10
    7a24:	03000000 	movweq	r0, #0
    7a28:	030100d8 	movweq	r0, #4312	; 0x10d8
    7a2c:	2333010e 	teqcs	r3, #-2147483645	; 0x80000003
    7a30:	352e7803 	strcc	r7, [lr, #-2051]!	; 0xfffff7fd
    7a34:	04024f35 	streq	r4, [r2], #-3893	; 0xfffff0cb
    7a38:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    7a3c:	02050002 	andeq	r0, r5, #2
    7a40:	00000000 	andeq	r0, r0, r0
    7a44:	01018503 	tsteq	r1, r3, lsl #10
    7a48:	03201103 			; <UNDEFINED> instruction: 0x03201103
    7a4c:	1303206f 	movwne	r2, #12399	; 0x306f
    7a50:	2e79032e 	cdpcs	3, 7, cr0, cr9, cr14, {1}
    7a54:	342e0903 	strtcc	r0, [lr], #-2307	; 0xfffff6fd
    7a58:	442e7103 	strtmi	r7, [lr], #-259	; 0xfffffefd
    7a5c:	2f2e0c03 	svccs	0x002e0c03
    7a60:	0002022d 	andeq	r0, r2, sp, lsr #4
    7a64:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    7a68:	00020500 	andeq	r0, r2, r0, lsl #10
    7a6c:	03000000 	movweq	r0, #0
    7a70:	030101af 	movweq	r0, #4527	; 0x11af
    7a74:	031b2011 	tsteq	fp, #17
    7a78:	13032e74 	movwne	r2, #15988	; 0x3e74
    7a7c:	01042f20 	tsteq	r4, r0, lsr #30
    7a80:	30206903 	eorcc	r6, r0, r3, lsl #18
    7a84:	231d234d 	tstcs	sp, #872415233	; 0x34000001
    7a88:	02042122 	andeq	r2, r4, #-2147483640	; 0x80000008
    7a8c:	022e1d03 	eoreq	r1, lr, #3, 26	; 0xc0
    7a90:	01010005 	tsteq	r1, r5
    7a94:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    7a98:	00000002 	andeq	r0, r0, r2
    7a9c:	01de0300 	bicseq	r0, lr, r0, lsl #6
    7aa0:	20110301 	andscs	r0, r1, r1, lsl #6
    7aa4:	2e74031b 	mrccs	3, 3, r0, cr4, cr11, {0}
    7aa8:	2d2e1403 	cfstrscs	mvf1, [lr, #-12]!
    7aac:	03010430 	movweq	r0, #5168	; 0x1430
    7ab0:	30207fb9 	strhtcc	r7, [r0], -r9
    7ab4:	231d234d 	tstcs	sp, #872415233	; 0x34000001
    7ab8:	02042122 	andeq	r2, r4, #-2147483640	; 0x80000008
    7abc:	2e00c803 	cdpcs	8, 0, cr12, cr0, cr3, {0}
    7ac0:	00050242 	andeq	r0, r5, r2, asr #4
    7ac4:	01a90101 			; <UNDEFINED> instruction: 0x01a90101
    7ac8:	00030000 	andeq	r0, r3, r0
    7acc:	000000d4 	ldrdeq	r0, [r0], -r4
    7ad0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    7ad4:	0101000d 	tsteq	r1, sp
    7ad8:	00000101 	andeq	r0, r0, r1, lsl #2
    7adc:	00000100 	andeq	r0, r0, r0, lsl #2
    7ae0:	2f2e2e01 	svccs	0x002e2e01
    7ae4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7ae8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7aec:	2f2e2e2f 	svccs	0x002e2e2f
    7af0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7af4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7af8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    7afc:	2f62696c 	svccs	0x0062696c
    7b00:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    7b04:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    7b08:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    7b0c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    7b10:	2f2e2e2f 	svccs	0x002e2e2f
    7b14:	732f2e2e 			; <UNDEFINED> instruction: 0x732f2e2e
    7b18:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    7b1c:	752f0067 	strvc	r0, [pc, #-103]!	; 7abd <__exidx_end+0x2b90>
    7b20:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 795c <__exidx_end+0x2a2f>
    7b24:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    7b28:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    7b2c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7b30:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7b34:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7b38:	2e30312f 	rsfcssp	f3, f0, #10.0
    7b3c:	2f312e33 	svccs	0x00312e33
    7b40:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7b44:	00656475 	rsbeq	r6, r5, r5, ror r4
    7b48:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    7b4c:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    7b50:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    7b54:	42702d62 	rsbsmi	r2, r0, #6272	; 0x1880
    7b58:	65643033 	strbvs	r3, [r4, #-51]!	; 0xffffffcd
    7b5c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    7b60:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    7b64:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    7b68:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    7b6c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    7b70:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    7b74:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    7b78:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7b7c:	6d000065 	stcvs	0, cr0, [r0, #-404]	; 0xfffffe6c
    7b80:	70636d65 	rsbvc	r6, r3, r5, ror #26
    7b84:	00632e79 	rsbeq	r2, r3, r9, ror lr
    7b88:	73000001 	movwvc	r0, #1
    7b8c:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    7b90:	00682e66 	rsbeq	r2, r8, r6, ror #28
    7b94:	73000002 	movwvc	r0, #2
    7b98:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    7b9c:	00682e67 	rsbeq	r2, r8, r7, ror #28
    7ba0:	00000003 	andeq	r0, r0, r3
    7ba4:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    7ba8:	003ff002 	eorseq	pc, pc, r2
    7bac:	01330300 	teqeq	r3, r0, lsl #6
    7bb0:	0e030305 	cdpeq	3, 0, cr0, cr3, cr5, {0}
    7bb4:	13131301 	tstne	r3, #67108864	; 0x4000000
    7bb8:	06010516 			; <UNDEFINED> instruction: 0x06010516
    7bbc:	05016b03 	streq	r6, [r1, #-2819]	; 0xfffff4fd
    7bc0:	3c150306 	ldccc	3, cr0, [r5], {6}
    7bc4:	02001c05 	andeq	r1, r0, #1280	; 0x500
    7bc8:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
    7bcc:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
    7bd0:	0b057401 	bleq	164bdc <__ccfg+0x144c34>
    7bd4:	1a059806 	bne	16dbf4 <__ccfg+0x14dc4c>
    7bd8:	0b050106 	bleq	147ff8 <__ccfg+0x128050>
    7bdc:	1a052f06 	bne	1537fc <__ccfg+0x133854>
    7be0:	0b050106 	bleq	148000 <__ccfg+0x128058>
    7be4:	1a052f06 	bne	153804 <__ccfg+0x13385c>
    7be8:	0b050106 	bleq	148008 <__ccfg+0x128060>
    7bec:	1a052f06 	bne	15380c <__ccfg+0x133864>
    7bf0:	0b050106 	bleq	148010 <__ccfg+0x128068>
    7bf4:	0d053d06 	stceq	13, cr3, [r5, #-24]	; 0xffffffe8
    7bf8:	06017a03 	streq	r7, [r1], -r3, lsl #20
    7bfc:	50100520 	andspl	r0, r0, r0, lsr #10
    7c00:	20240d05 	eorcs	r0, r4, r5, lsl #26
    7c04:	05292805 	streq	r2, [r9, #-2053]!	; 0xfffff7fb
    7c08:	17052110 	smladne	r5, r0, r1, r2
    7c0c:	060d051f 			; <UNDEFINED> instruction: 0x060d051f
    7c10:	300b0525 	andcc	r0, fp, r5, lsr #10
    7c14:	01061a05 	tsteq	r6, r5, lsl #20
    7c18:	2f060b05 	svccs	0x00060b05
    7c1c:	060f0d05 	streq	r0, [pc], -r5, lsl #26
    7c20:	17054a20 	strne	r4, [r5, -r0, lsr #20]
    7c24:	2028053e 	eorcs	r0, r8, lr, lsr r5
    7c28:	05211005 	streq	r1, [r1, #-5]!
    7c2c:	05360609 	ldreq	r0, [r6, #-1545]!	; 0xfffff9f7
    7c30:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    7c34:	5e032009 	cdppl	0, 0, cr2, cr3, cr9, {0}
    7c38:	0605052e 	streq	r0, [r5], -lr, lsr #10
    7c3c:	05202303 	streq	r2, [r0, #-771]!	; 0xfffffcfd
    7c40:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    7c44:	063b0609 	ldrteq	r0, [fp], -r9, lsl #12
    7c48:	01052001 	tsteq	r5, r1
    7c4c:	03090533 	movweq	r0, #38195	; 0x9533
    7c50:	03065859 	movweq	r5, #26713	; 0x6859
    7c54:	0e052022 	cdpeq	0, 0, cr2, cr5, cr2, {1}
    7c58:	09050106 	stmdbeq	r5, {r1, r2, r8}
    7c5c:	063c0620 	ldrteq	r0, [ip], -r0, lsr #12
    7c60:	05015e03 	streq	r5, [r1, #-3587]	; 0xfffff1fd
    7c64:	2022030e 	eorcs	r0, r2, lr, lsl #6
    7c68:	030d0520 	movweq	r0, #54560	; 0xd520
    7c6c:	02022075 	andeq	r2, r2, #117	; 0x75
    7c70:	ca010100 	bgt	48078 <__ccfg+0x280d0>
    7c74:	03000001 	movweq	r0, #1
    7c78:	0000bf00 	andeq	fp, r0, r0, lsl #30
    7c7c:	fb010200 	blx	48486 <__ccfg+0x284de>
    7c80:	01000d0e 	tsteq	r0, lr, lsl #26
    7c84:	00010101 	andeq	r0, r1, r1, lsl #2
    7c88:	00010000 	andeq	r0, r1, r0
    7c8c:	2e2e0100 	sufcse	f0, f6, f0
    7c90:	2f2e2e2f 	svccs	0x002e2e2f
    7c94:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7c98:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7c9c:	2f2e2e2f 	svccs	0x002e2e2f
    7ca0:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    7ca4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    7ca8:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    7cac:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    7cb0:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    7cb4:	752f0067 	strvc	r0, [pc, #-103]!	; 7c55 <__exidx_end+0x2d28>
    7cb8:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 7af4 <__exidx_end+0x2bc7>
    7cbc:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    7cc0:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    7cc4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7cc8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7ccc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7cd0:	2e30312f 	rsfcssp	f3, f0, #10.0
    7cd4:	2f312e33 	svccs	0x00312e33
    7cd8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7cdc:	00656475 	rsbeq	r6, r5, r5, ror r4
    7ce0:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    7ce4:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    7ce8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    7cec:	42702d62 	rsbsmi	r2, r0, #6272	; 0x1880
    7cf0:	65643033 	strbvs	r3, [r4, #-51]!	; 0xffffffcd
    7cf4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    7cf8:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    7cfc:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    7d00:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    7d04:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    7d08:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    7d0c:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    7d10:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7d14:	6d000065 	stcvs	0, cr0, [r0, #-404]	; 0xfffffe6c
    7d18:	65736d65 	ldrbvs	r6, [r3, #-3429]!	; 0xfffff29b
    7d1c:	00632e74 	rsbeq	r2, r3, r4, ror lr
    7d20:	73000001 	movwvc	r0, #1
    7d24:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    7d28:	00682e66 	rsbeq	r2, r8, r6, ror #28
    7d2c:	73000002 	movwvc	r0, #2
    7d30:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    7d34:	00682e67 	rsbeq	r2, r8, r7, ror #28
    7d38:	00000003 	andeq	r0, r0, r3
    7d3c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    7d40:	00409802 	subeq	r9, r0, r2, lsl #16
    7d44:	01280300 			; <UNDEFINED> instruction: 0x01280300
    7d48:	15130305 	ldrne	r0, [r3, #-773]	; 0xfffffcfb
    7d4c:	15131313 	ldrne	r1, [r3, #-787]	; 0xfffffced
    7d50:	05010905 	streq	r0, [r1, #-2309]	; 0xfffff6fb
    7d54:	76030601 	strvc	r0, [r3], -r1, lsl #12
    7d58:	030a0501 	movweq	r0, #42241	; 0xa501
    7d5c:	0905200a 	stmdbeq	r5, {r1, r3, sp}
    7d60:	06070520 	streq	r0, [r7], -r0, lsr #10
    7d64:	060c0530 			; <UNDEFINED> instruction: 0x060c0530
    7d68:	200a0501 	andcs	r0, sl, r1, lsl #10
    7d6c:	052f1005 	streq	r1, [pc, #-5]!	; 7d6f <__exidx_end+0x2e42>
    7d70:	20740309 	rsbscs	r0, r4, r9, lsl #6
    7d74:	09030a05 	stmdbeq	r3, {r0, r2, r9, fp}
    7d78:	23100520 	tstcs	r0, #32, 10	; 0x8000000
    7d7c:	052d0a05 	streq	r0, [sp, #-2565]!	; 0xfffff5fb
    7d80:	053c0607 	ldreq	r0, [ip, #-1543]!	; 0xfffff9f9
    7d84:	0b051309 	bleq	14c9b0 <__ccfg+0x12ca08>
    7d88:	0e050106 	adfeqs	f0, f5, f6
    7d8c:	06090520 	streq	r0, [r9], -r0, lsr #10
    7d90:	3603051d 			; <UNDEFINED> instruction: 0x3603051d
    7d94:	01060605 	tsteq	r6, r5, lsl #12
    7d98:	75031005 	strvc	r1, [r3, #-5]
    7d9c:	0607052e 	streq	r0, [r7], -lr, lsr #10
    7da0:	162e0e03 	strtne	r0, [lr], -r3, lsl #28
    7da4:	01061305 	tsteq	r6, r5, lsl #6
    7da8:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
    7dac:	05210607 	streq	r0, [r1, #-1543]!	; 0xfffff9f9
    7db0:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
    7db4:	0705200e 	streq	r2, [r5, -lr]
    7db8:	14052106 	strne	r2, [r5], #-262	; 0xfffffefa
    7dbc:	160d0501 	strne	r0, [sp], -r1, lsl #10
    7dc0:	05ae0b05 	streq	r0, [lr, #2821]!	; 0xb05
    7dc4:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    7dc8:	0521060b 	streq	r0, [r1, #-1547]!	; 0xfffff9f5
    7dcc:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    7dd0:	0521060b 	streq	r0, [r1, #-1547]!	; 0xfffff9f5
    7dd4:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    7dd8:	0521060b 	streq	r0, [r1, #-1547]!	; 0xfffff9f5
    7ddc:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    7de0:	0521060b 	streq	r0, [r1, #-1547]!	; 0xfffff9f5
    7de4:	017a030d 	cmneq	sl, sp, lsl #6
    7de8:	18052006 	stmdane	r5, {r1, r2, sp}
    7dec:	0d052e33 	stceq	14, cr2, [r5, #-204]	; 0xffffff34
    7df0:	061d2321 	ldreq	r2, [sp], -r1, lsr #6
    7df4:	054a0623 	strbeq	r0, [sl, #-1571]	; 0xfffff9dd
    7df8:	0576060b 	ldrbeq	r0, [r6, #-1547]!	; 0xfffff9f5
    7dfc:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    7e00:	0521060b 	streq	r0, [r1, #-1547]!	; 0xfffff9f5
    7e04:	31060f0d 	tstcc	r6, sp, lsl #30
    7e08:	2e1f1805 	cdpcs	8, 1, cr1, cr15, cr5, {0}
    7e0c:	05210d05 	streq	r0, [r1, #-3333]!	; 0xfffff2fb
    7e10:	06280609 	strteq	r0, [r8], -r9, lsl #12
    7e14:	03100501 	tsteq	r0, #4194304	; 0x400000
    7e18:	05202e5a 	streq	r2, [r0, #-3674]!	; 0xfffff1a6
    7e1c:	27030605 	strcs	r0, [r3, -r5, lsl #12]
    7e20:	060a052e 	streq	r0, [sl], -lr, lsr #10
    7e24:	06090501 	streq	r0, [r9], -r1, lsl #10
    7e28:	2001061f 	andcs	r0, r1, pc, lsl r6
    7e2c:	05320105 	ldreq	r0, [r2, #-261]!	; 0xfffffefb
    7e30:	3c4a0309 	mcrrcc	3, 0, r0, sl, cr9
    7e34:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    7e38:	2e15030d 	cdpcs	3, 1, cr0, cr5, cr13, {0}
    7e3c:	01000202 	tsteq	r0, r2, lsl #4
    7e40:	0000b501 	andeq	fp, r0, r1, lsl #10
    7e44:	88000300 	stmdahi	r0, {r8, r9}
    7e48:	02000000 	andeq	r0, r0, #0
    7e4c:	0d0efb01 	vstreq	d15, [lr, #-4]
    7e50:	01010100 	mrseq	r0, (UNDEF: 17)
    7e54:	00000001 	andeq	r0, r0, r1
    7e58:	01000001 	tsteq	r0, r1
    7e5c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7e60:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7e64:	2f2e2e2f 	svccs	0x002e2e2f
    7e68:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7e6c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7e70:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    7e74:	2f62696c 	svccs	0x0062696c
    7e78:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    7e7c:	7974632f 	ldmdbvc	r4!, {r0, r1, r2, r3, r5, r8, r9, sp, lr}^
    7e80:	2f006570 	svccs	0x00006570
    7e84:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    7e88:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    7e8c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    7e90:	3342702d 	movtcc	r7, #8237	; 0x202d
    7e94:	2f656430 	svccs	0x00656430
    7e98:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    7e9c:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    7ea0:	302e332e 	eorcc	r3, lr, lr, lsr #6
    7ea4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    7ea8:	2f62696c 	svccs	0x0062696c
    7eac:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    7eb0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    7eb4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7eb8:	6f740000 	svcvs	0x00740000
    7ebc:	65707075 	ldrbvs	r7, [r0, #-117]!	; 0xffffff8b
    7ec0:	00632e72 	rsbeq	r2, r3, r2, ror lr
    7ec4:	63000001 	movwvs	r0, #1
    7ec8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    7ecc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    7ed0:	05000000 	streq	r0, [r0, #-0]
    7ed4:	02050001 	andeq	r0, r5, #1
    7ed8:	00004148 	andeq	r4, r0, r8, asr #2
    7edc:	0100c103 	tsteq	r0, r3, lsl #2
    7ee0:	0e030305 	cdpeq	3, 0, cr0, cr3, cr5, {0}
    7ee4:	06260501 	strteq	r0, [r6], -r1, lsl #10
    7ee8:	04020001 	streq	r0, [r2], #-1
    7eec:	01056601 	tsteq	r5, r1, lsl #12
    7ef0:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    7ef4:	00030222 	andeq	r0, r3, r2, lsr #4
    7ef8:	005a0101 	subseq	r0, sl, r1, lsl #2
    7efc:	00030000 	andeq	r0, r3, r0
    7f00:	00000054 	andeq	r0, r0, r4, asr r0
    7f04:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    7f08:	0101000d 	tsteq	r1, sp
    7f0c:	00000101 	andeq	r0, r0, r1, lsl #2
    7f10:	00000100 	andeq	r0, r0, r0, lsl #2
    7f14:	75622f01 	strbvc	r2, [r2, #-3841]!	; 0xfffff0ff
    7f18:	2f646c69 	svccs	0x00646c69
    7f1c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    7f20:	702d6269 	eorvc	r6, sp, r9, ror #4
    7f24:	64303342 	ldrtvs	r3, [r0], #-834	; 0xfffffcbe
    7f28:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    7f2c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    7f30:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    7f34:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    7f38:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    7f3c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    7f40:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    7f44:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7f48:	00006564 	andeq	r6, r0, r4, ror #10
    7f4c:	70797463 	rsbsvc	r7, r9, r3, ror #8
    7f50:	00682e65 	rsbeq	r2, r8, r5, ror #28
    7f54:	00000001 	andeq	r0, r0, r1

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
       4:	5f62616c 	svcpl	0x0062616c
       8:	616f7242 	cmnvs	pc, r2, asr #4
       c:	73616364 	cmnvc	r1, #100, 6	; 0x90000001
      10:	72545f74 	subsvc	r5, r4, #116, 30	; 0x1d0
      14:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
      18:	69737369 	ldmdbvs	r3!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
      1c:	73006e6f 	movwvc	r6, #3695	; 0xe6f
      20:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
      24:	4e65636e 	cdpmi	3, 6, cr6, cr5, cr14, {3}
      28:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
      2c:	5f5f0072 	svcpl	0x005f0072
      30:	616c7473 	smcvs	51011	; 0xc743
      34:	68435f62 	stmdavs	r3, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
      38:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
      3c:	0044495f 	subeq	r4, r4, pc, asr r9
		where = 1;
      40:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
		delay (1, st);
      44:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
		release;
      48:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
      4c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
      50:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
}
      54:	6c00746e 	cfstrsvs	mvf7, [r0], {110}	; 0x6e
      58:	20676e6f 	rsbcs	r6, r7, pc, ror #28
      5c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
			nq++;
      60:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
      68:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
      6c:	7073006f 	rsbsvc	r0, r3, pc, rrx
      70:	5f00746b 	svcpl	0x0000746b
      74:	5f69705f 	svcpl	0x0069705f
      78:	5f007473 	svcpl	0x00007473
      7c:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
      80:	445f6261 	ldrbmi	r6, [pc], #-609	; 88 <g_pfnVectors+0x88>
      84:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
      88:	5f5f0074 	svcpl	0x005f0074
      8c:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      90:	00747369 	rsbseq	r7, r4, r9, ror #6
	if (!button_still_pressed (__button_list [pbutton]))
      94:	70756f74 	rsbsvc	r6, r5, r4, ror pc
      98:	00726570 	rsbseq	r6, r2, r0, ror r5
      9c:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
      a0:	2f006449 	svccs	0x00006449
	if (baction == NULL)
      a4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      a8:	6168632f 	cmnvs	r8, pc, lsr #6
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	79696c72 	stmdbvc	r9!, {r1, r4, r5, r6, sl, fp, sp, lr}^
endthread
      b0:	33326e61 	teqcc	r2, #1552	; 0x610
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      b4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
      b8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
endthread
      bc:	4349502f 	movtmi	r5, #36911	; 0x902f
      c0:	412f534f 			; <UNDEFINED> instruction: 0x412f534f
      c4:	2f737070 	svccs	0x00737070
fsm receiver {
      c8:	43503250 	cmpmi	r0, #80, 4
      cc:	00746168 	rsbseq	r6, r4, r8, ror #2
      d0:	20554e47 	subscs	r4, r5, r7, asr #28
      d4:	20393943 	eorscs	r3, r9, r3, asr #18
        packet = tcv_rnp(Receiving, sfd);
      d8:	332e3031 			; <UNDEFINED> instruction: 0x332e3031
      dc:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
      e0:	30313230 	eorscc	r3, r1, r0, lsr r2
      e4:	20313236 	eorscs	r3, r1, r6, lsr r2
        receivedPtr = (struct msg *)(packet + 1);
      e8:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
      ec:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
        if(receivedPtr->receiverId == nodeId) {
      f0:	6d2d2029 	stcvs	0, cr2, [sp, #-164]!	; 0xffffff5c
      f4:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	; 0xfffffe74
      f8:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
            proceed Broadcast; // Proceed to handling broadcast message
      fc:	6d2d7865 	stcvs	8, cr7, [sp, #-404]!	; 0xfffffe6c
        proceed Receiving;
     100:	6d2d2033 	stcvs	0, cr2, [sp, #-204]!	; 0xffffff34
     104:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
        ser_outf(Receive_Msg, "Message ");
     108:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
     10c:	616f6c66 	cmnvs	pc, r6, ror #24
        proceed Show_Message;
     110:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
        ser_outf(Broadcast, "Broadcast ");
     114:	6f733d69 	svcvs	0x00733d69
     118:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
        ser_outf(Show_Message, "Message from node %d (Seq %d): %s\n\r", receivedPtr->senderId, receivedPtr->sequenceNumber, receivedPtr->payload);
     11c:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
     120:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
     124:	2d37766d 	ldccs	6, cr7, [r7, #-436]!	; 0xfffffe4c
     128:	672d206d 	strvs	r2, [sp, -sp, rrx]!
     12c:	64672d20 	strbtvs	r2, [r7], #-3360	; 0xfffff2e0
        tcv_endp(packet);
     130:	66726177 			; <UNDEFINED> instruction: 0x66726177
     134:	2d20332d 	stccs	3, cr3, [r0, #-180]!	; 0xffffff4c
        proceed Receiving;
     138:	72747367 	rsbsvc	r7, r4, #-1677721599	; 0x9c000001
}
     13c:	2d746369 	ldclcs	3, cr6, [r4, #-420]!	; 0xfffffe5c
        proceed Receiving;
     140:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
        } else if (receivedPtr->receiverId == '0' || receivedPtr->receiverId == 0) {
     144:	4f2d2066 	svcmi	0x002d2066
     148:	732d2073 			; <UNDEFINED> instruction: 0x732d2073
            proceed Broadcast; // Proceed to handling broadcast message
     14c:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
}
     150:	2d203939 			; <UNDEFINED> instruction: 0x2d203939
     154:	6e756666 	cdpvs	6, 7, cr6, cr5, cr6, {3}
     158:	6f697463 	svcvs	0x00697463
     15c:	65732d6e 	ldrbvs	r2, [r3, #-3438]!	; 0xfffff292
     160:	6f697463 	svcvs	0x00697463
     164:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
     168:	74616466 	strbtvc	r6, [r1], #-1126	; 0xfffffb9a
     16c:	65732d61 	ldrbvs	r2, [r3, #-3425]!	; 0xfffff29f
     170:	6f697463 	svcvs	0x00697463
     174:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
fsm send(struct msg * ptr) {
     178:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; ffffffe8 <_estack+0xdfffafe8>
     17c:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
        address spkt = tcv_wnp(Send_Msg, sfd, sizeof(struct msg) + 4);
     180:	612d7463 			; <UNDEFINED> instruction: 0x612d7463
     184:	7361696c 	cmnvc	r1, #108, 18	; 0x1b0000
     188:	20676e69 	rsbcs	r6, r7, r9, ror #28
     18c:	7361662d 	cmnvc	r1, #47185920	; 0x2d00000
     190:	662d206d 	strtvs	r2, [sp], -sp, rrx
        *p = ptr->senderId; p++;
     194:	2d78616d 	ldfcse	f6, [r8, #-436]!	; 0xfffffe4c
     198:	6f727265 	svcvs	0x00727265
        strcpy(p, ptr->payload);
     19c:	313d7372 	teqcc	sp, r2, ror r3
        *p = ptr->receiverId; p++;
     1a0:	63740030 	cmnvs	r4, #48	; 0x30
        *p = ptr->sequenceNumber; p++;
     1a4:	6c635f76 	stclvs	15, cr5, [r3], #-472	; 0xfffffe28
        strcpy(p, ptr->payload);
     1a8:	6374006f 	cmnvs	r4, #111	; 0x6f
        sequence++;
     1ac:	756f5f76 	strbvc	r5, [pc, #-3958]!	; fffff23e <_estack+0xdfffa23e>
     1b0:	5f5f0074 	svcpl	0x005f0074
     1b4:	616c7473 	smcvs	51011	; 0xc743
        tcv_endp (spkt);
     1b8:	65535f62 	ldrbvs	r5, [r3, #-3938]	; 0xfffff09e
        ser_outf(Send_Msg, "\n\rMessage Sent\n\r");
     1bc:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
     1c0:	63740067 	cmnvs	r4, #103	; 0x67
}
     1c4:	6d745f76 	ldclvs	15, cr5, [r4, #-472]!	; 0xfffffe28
        finish;
     1c8:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
}
     1cc:	2074726f 	rsbscs	r7, r4, pc, ror #4
     1d0:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     1d4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     1d8:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     1dc:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     1e0:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
fsm root {
     1e4:	5f00745f 	svcpl	0x0000745f
     1e8:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     1ec:	535f6261 	cmppl	pc, #268435462	; 0x10000006
     1f0:	5f646e65 	svcpl	0x00646e65
     1f4:	0067734d 	rsbeq	r7, r7, sp, asr #6
     1f8:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
        sequence = 0;
     1fc:	5f62616c 	svcpl	0x0062616c
        ptr = (struct Message *) umalloc(sizeof(struct msg));
     200:	5f746547 	svcpl	0x00746547
        sequence = 0;
     204:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
        ptr = (struct Message *) umalloc(sizeof(struct msg));
     208:	44496567 	strbmi	r6, [r9], #-1383	; 0xfffffa99
     20c:	71657300 	cmnvc	r5, r0, lsl #6
     210:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
        phys_cc1350(0, CC1350_BUF_SZ);
     214:	63740065 	cmnvs	r4, #101	; 0x65
        tcv_plug(0, &plug_null);
     218:	63725f76 	cmnvs	r2, #472	; 0x1d8
     21c:	77610076 			; <UNDEFINED> instruction: 0x77610076
        sfd = tcv_open(NONE, 0, 0);
     220:	0064726f 	rsbeq	r7, r4, pc, ror #4
     224:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0xfffffab2
     228:	6d695400 	cfstrdvs	mvd5, [r9, #-0]
     22c:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
     230:	006c6961 	rsbeq	r6, ip, r1, ror #18
            diag("unable to open TCV session");
     234:	504d544b 	subpl	r5, sp, fp, asr #8
     238:	7070612f 	rsbsvc	r6, r0, pc, lsr #2
            syserror(EASSERT, "no session");
     23c:	5f00632e 	svcpl	0x0000632e
     240:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
        tcv_control(sfd, PHYSOPT_ON, NULL);
     244:	425f6261 	subsmi	r6, pc, #268435462	; 0x10000006
     248:	64616f72 	strbtvs	r6, [r1], #-3954	; 0xfffff08e
        runfsm receiver;
     24c:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
     250:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
        receiverId = 0;
     254:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     258:	675f5f00 	ldrbvs	r5, [pc, -r0, lsl #30]
        ser_outf(Menu, "\n\rP2P Chat (Node #%d)\n\r"
     25c:	5f63756e 	svcpl	0x0063756e
     260:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
        ser_inf(Choice, "%c", &choice);
     264:	00747369 	rsbseq	r7, r4, r9, ror #6
     268:	646e6573 	strbtvs	r6, [lr], #-1395	; 0xfffffa8d
     26c:	79617000 	stmdbvc	r1!, {ip, sp, lr}^
        choice = toupper((unsigned char)choice);
     270:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
     274:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     278:	6d72665f 	ldclvs	6, cr6, [r2, #-380]!	; 0xfffffe84
     27c:	63617000 	cmnvs	r1, #0
        switch (choice) {
     280:	0074656b 	rsbseq	r6, r4, fp, ror #10
     284:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     288:	7275635f 	rsbsvc	r6, r5, #2080374785	; 0x7c000001
                proceed Broadcast_Transmission;
     28c:	5f5f0072 	svcpl	0x005f0072
                proceed Menu;
     290:	616c7473 	smcvs	51011	; 0xc743
        ser_outf(Change_ID, "\n\rNew node ID (1-25):");
     294:	4e495f62 	cdpmi	15, 4, cr5, cr9, cr2, {3}
     298:	75005449 	strvc	r5, [r0, #-1097]	; 0xfffffbb7
        ser_inf(Get_ChangeID, "%d", &nodeId);
     29c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     2a0:	2064656e 	rsbcs	r6, r4, lr, ror #10
     2a4:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
            if (nodeId < 1 || nodeId > 25) {
     2a8:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     2ac:	65706f5f 	ldrbvs	r6, [r0, #-3935]!	; 0xfffff0a1
                ser_outf(Get_ChangeID, "\n\rInvalid ID");
     2b0:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     2b4:	746d785f 	strbtvc	r7, [sp], #-2143	; 0xfffff7a1
                proceed Change_ID;
     2b8:	6f687300 	svcvs	0x00687300
     2bc:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
            proceed Menu;
     2c0:	7200746e 	andvc	r7, r0, #1845493760	; 0x6e000000
        ser_outf(Direct_Transmission, "\n\rReceiver node ID (1-25):");
     2c4:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     2c8:	50646576 	rsbpl	r6, r4, r6, ror r5
        ser_inf(Get_ReceiverID, "%d", &receiverId);
     2cc:	74007274 	strvc	r7, [r0], #-628	; 0xfffffd8c
     2d0:	64617663 	strbtvs	r7, [r1], #-1635	; 0xfffff99d
     2d4:	00745f70 	rsbseq	r5, r4, r0, ror pc
            if (receiverId < 1 || receiverId > 25) {
     2d8:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     2dc:	6576655f 	ldrbvs	r6, [r6, #-1375]!	; 0xfffffaa1
                ser_outf(Get_ReceiverID, "\n\rInvalid ID");
     2e0:	745f746e 	ldrbvc	r7, [pc], #-1134	; 2e8 <root+0x104>
     2e4:	61656800 	cmnvs	r5, r0, lsl #16
                proceed Direct_Transmission;
     2e8:	5f5f0064 	svcpl	0x005f0064
     2ec:	616c7473 	smcvs	51011	; 0xc743
        ser_outf(Broadcast_Transmission, "\n\rMessage: ");
     2f0:	68435f62 	stmdavs	r3, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
     2f4:	6563696f 	strbvs	r6, [r3, #-2415]!	; 0xfffff691
        ser_in(Receive_Msg, ptr->payload, 27);
     2f8:	735f5f00 	cmpvc	pc, #0, 30
     2fc:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     300:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
        if(strlen(ptr->payload) >= 27) {
     304:	69766965 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, fp, sp, lr}^
     308:	7200676e 	andvc	r6, r0, #28835840	; 0x1b80000
     30c:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
            ptr->payload[26] = '\0';
     310:	49726576 	ldmdbmi	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     314:	5f5f0064 	svcpl	0x005f0064
        call send(ptr, Menu);
     318:	616c7473 	smcvs	51011	; 0xc743
        ptr->senderId = nodeId;
     31c:	65525f62 	ldrbvs	r5, [r2, #-3938]	; 0xfffff09e
     320:	76696563 	strbtvc	r6, [r9], -r3, ror #10
        ptr->receiverId = receiverId;
     324:	734d5f65 	movtvc	r5, #57189	; 0xdf65
        ptr->sequenceNumber = (byte)sequence;
     328:	76450067 	strbvc	r0, [r5], -r7, rrx
     32c:	73746e65 	cmnvc	r4, #1616	; 0x650
        call send(ptr, Menu);
     330:	615f5f00 	cmpvs	pc, r0, lsl #30
     334:	65720070 	ldrbvs	r0, [r2, #-112]!	; 0xffffff90
     338:	76696563 	strbtvc	r6, [r9], -r3, ror #10
     33c:	5f007265 	svcpl	0x00007265
                proceed Direct_Transmission;
     340:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
                ser_outf(Choice, "\n\rIncorrect Option.");
     344:	475f6261 	ldrbmi	r6, [pc, -r1, ror #4]
     348:	525f7465 	subspl	r7, pc, #1694498816	; 0x65000000
                proceed Menu;
     34c:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
}
     350:	49726576 	ldmdbmi	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     354:	68630044 	stmdavs	r3!, {r2, r6}^
     358:	6563696f 	strbvs	r6, [r3, #-2415]!	; 0xfffff691
     35c:	756c7000 	strbvc	r7, [ip, #-0]!
     360:	756e5f67 	strbvc	r5, [lr, #-3943]!	; 0xfffff099
     364:	5f006c6c 	svcpl	0x00006c6c
     368:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     36c:	445f6261 	ldrbmi	r6, [pc], #-609	; 374 <root+0x190>
     370:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
     374:	72545f74 	subsvc	r5, r4, #116, 30	; 0x1d0
     378:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
     37c:	69737369 	ldmdbvs	r3!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     380:	73006e6f 	movwvc	r6, #3695	; 0xe6f
     384:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
     388:	00644972 	rsbeq	r4, r4, r2, ror r9
     38c:	636d7366 	cmnvs	sp, #-1744830463	; 0x98000001
     390:	0065646f 	rsbeq	r6, r5, pc, ror #8
     394:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     398:	5f62616c 	svcpl	0x0062616c
     39c:	756e654d 	strbvc	r6, [lr, #-1357]!	; 0xfffffab3
     3a0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
static void devinit_uart (int devnum) {
     3a4:	63705f69 	cmnvs	r0, #420	; 0x1a4
	adddevfunc (ioreq_uart_a, devnum);
     3a8:	00735f62 	rsbseq	r5, r3, r2, ror #30
     3ac:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
void udelay (volatile word n) {
     3b0:	6263705f 	rsbvs	r7, r3, #95	; 0x5f
     3b4:	5f00745f 	svcpl	0x0000745f
	while (n) {
     3b8:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     3bc:	535f6261 	cmppl	pc, #268435462	; 0x10000006
}
     3c0:	5f776f68 	svcpl	0x00776f68
	while (n--);
     3c4:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
     3c8:	00656761 	rsbeq	r6, r5, r1, ror #14
     3cc:	746f6f72 	strbtvc	r6, [pc], #-3954	; 3d4 <udelay+0x24>
		n--;
     3d0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     3d4:	696d5f69 	stmdbvs	sp!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     3d8:	006b746e 	rsbeq	r7, fp, lr, ror #8
void mdelay (volatile word n) {
     3dc:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
     3e0:	50470074 	subpl	r0, r7, r4, ror r0
	while (n) {
     3e4:	735f4f49 	cmpvc	pc, #292	; 0x124
     3e8:	754f7465 	strbvc	r7, [pc, #-1125]	; ffffff8b <_estack+0xdfffaf8b>
}
     3ec:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
		udelay (999);
     3f0:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     3f4:	6944656c 	stmdbvs	r4, {r2, r3, r5, r6, r8, sl, sp, lr}^
		n--;
     3f8:	6465006f 	strbtvs	r0, [r5], #-111	; 0xffffff91
     3fc:	5f006567 	svcpl	0x00006567
     400:	5f69705f 	svcpl	0x0069705f
     404:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
void __pi_ondomain (lword d) {
     408:	71657200 	cmnvc	r5, r0, lsl #4
     40c:	006d6470 	rsbeq	r6, sp, r0, ror r4
		if (__pi_systat.effpdm > 1)
     410:	424e4f41 	submi	r4, lr, #260	; 0x104
     414:	6f4d7461 	svcvs	0x004d7461
			__pi_systat.effpdm = 1;
     418:	616e456e 	cmnvs	lr, lr, ror #10
	PRCMPowerDomainOn (d);
     41c:	00656c62 	rsbeq	r6, r5, r2, ror #24
     420:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
     424:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     428:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     42c:	666f5f69 	strbtvs	r5, [pc], -r9, ror #30
     430:	6d6f6466 	cfstrdvs	mvd6, [pc, #-408]!	; 2a0 <root+0xbc>
     434:	006e6961 	rsbeq	r6, lr, r1, ror #18
	__pi_systat.ondmns |= d;
     438:	74746567 	ldrbtvc	r6, [r4], #-1383	; 0xfffffa99
     43c:	75007661 	strvc	r7, [r0, #-1633]	; 0xfffff99f
}
     440:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
     444:	5f5f0073 	svcpl	0x005f0073
void __pi_offdomain (lword d) {
     448:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
	PRCMPowerDomainOff (d);
     44c:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     450:	77007172 	smlsdxvc	r0, r2, r1, r7
     454:	65726568 	ldrbvs	r6, [r2, #-1384]!	; 0xfffffa98
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     458:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
     45c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     460:	5f6e7566 	svcpl	0x006e7566
     464:	66650074 			; <UNDEFINED> instruction: 0x66650074
	if (d & PRCM_DOMAIN_RFCORE) {
     468:	6d647066 	stclvs	0, cr7, [r4, #-408]!	; 0xfffffe68
     46c:	4e4f4100 	dvfmie	f4, f7, f0
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     470:	41435557 	cmpmi	r3, r7, asr r5
			__pi_systat.effpdm = __pi_systat.reqpdm;
     474:	61577875 	cmpvs	r7, r5, ror r8
     478:	7075656b 	rsbsvc	r6, r5, fp, ror #10
	__pi_systat.ondmns &= ~d;
     47c:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     480:	4f410074 	svcmi	0x00410074
}
     484:	4355574e 	cmpmi	r5, #20447232	; 0x1380000
     488:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
void __pi_syserror (word ec, const char *m) {
     48c:	61745372 	cmnvs	r4, r2, ror r3
	diag ("SYSERR: %x, %s", ec, m);
     490:	47737574 			; <UNDEFINED> instruction: 0x47737574
     494:	55007465 	strpl	r7, [r0, #-1125]	; 0xfffffb9b
  __ASM volatile ("cpsid i" : : : "memory");
     498:	49545241 	ldmdbmi	r4, {r0, r6, r9, ip, lr}^
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     49c:	6c43746e 	cfstrdvs	mvd7, [r3], {110}	; 0x6e
		all_leds_blink;
     4a0:	00726165 	rsbseq	r6, r2, r5, ror #2
     4a4:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     4a8:	695f6d65 	ldmdbvs	pc, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     4ac:	0074696e 	rsbseq	r6, r4, lr, ror #18
     4b0:	574e4f41 	strbpl	r4, [lr, -r1, asr #30]
     4b4:	68534355 	ldmdavs	r3, {r0, r2, r4, r6, r8, r9, lr}^
     4b8:	6f447475 	svcvs	0x00447475
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4bc:	6e456e77 	mcrvs	14, 2, r6, cr5, cr7, {3}
     4c0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     4c4:	6e766500 	cdpvs	5, 7, cr6, cr6, cr0, {0}
     4c8:	006e7074 	rsbeq	r7, lr, r4, ror r0
     4cc:	64746573 	ldrbtvs	r6, [r4], #-1395	; 0xfffffa8d
     4d0:	50006c65 	andpl	r6, r0, r5, ror #24
	while (1) {
     4d4:	4d4d4352 	stclmi	3, cr4, [sp, #-328]	; 0xfffffeb8
     4d8:	6f507563 	svcvs	0x00507563
     4dc:	4f726577 	svcmi	0x00726577
void tci_run_delay_timer () {
     4e0:	5f006666 	svcpl	0x00006666
	setdel = __pi_mintk - __pi_old;
     4e4:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
     4e8:	50534d5f 	subspl	r4, r3, pc, asr sp
     4ec:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
     4f0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4f4:	5f00745f 	svcpl	0x0000745f
     4f8:	5f69705f 	svcpl	0x0069705f
     4fc:	6f646e6f 	svcvs	0x00646e6f
     500:	6e69616d 	powvsez	f6, f1, #5.0
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     504:	52415500 	subpl	r5, r1, #0, 10
	sti_tim;
     508:	46774854 			; <UNDEFINED> instruction: 0x46774854
}
     50c:	43776f6c 	cmnmi	r7, #108, 30	; 0x1b0
     510:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     514:	69446c6f 	stmdbvs	r4, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
     518:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     51c:	5f5f0065 	svcpl	0x005f0065
     520:	00424350 	subeq	r4, r2, r0, asr r3
	cli_aux;
     524:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     528:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
     52c:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xfffff08c
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     530:	74617274 	strbtvc	r7, [r1], #-628	; 0xfffffd8c
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     534:	4f410065 	svcmi	0x00410065
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     538:	434f494e 	movtmi	r4, #63822	; 0xf94e
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     53c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
	sti_aux;
     540:	6944657a 	stmdbvs	r4, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
}
     544:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     548:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
     54c:	78523233 	ldmdavc	r2, {r0, r1, r4, r5, r9, ip, sp}^
void AONRTCIntHandler () {
     550:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     554:	6552006c 	ldrbvs	r0, [r2, #-108]	; 0xffffff94
     558:	725f6f64 	subsvc	r6, pc, #100, 30	; 0x190
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     55c:	69750078 	ldmdbvs	r5!, {r3, r4, r5, r6}^
		if (__pi_utims [0] == 0)
     560:	78543233 	ldmdavc	r4, {r0, r1, r4, r5, r9, ip, sp}^
     564:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
		if (*(__pi_utims [0])) {
     568:	7953006c 	ldmdbvc	r3, {r2, r3, r5, r6}^
     56c:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
			(*(__pi_utims [0]))--;
     570:	6f6c436c 	svcvs	0x006c436c
		if (__pi_utims [1] == 0)
     574:	65476b63 	strbvs	r6, [r7, #-2915]	; 0xfffff49d
		if (*(__pi_utims [1])) {
     578:	52500074 	subspl	r0, r0, #116	; 0x74
			aux_timer_inactive = 0;
     57c:	61434d43 	cmpvs	r3, r3, asr #26
			(*(__pi_utims [1]))--;
     580:	52656863 	rsbpl	r6, r5, #6488064	; 0x630000
		if (__pi_utims [2] == 0)
     584:	6e657465 	cdpvs	4, 6, cr7, cr5, cr5, {3}
		if (*(__pi_utims [2])) {
     588:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
			(*(__pi_utims [2]))--;
     58c:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
		if (__pi_utims [3] != 0) {
     590:	5000656c 	andpl	r6, r0, ip, ror #10
			if (*(__pi_utims [3])) {
     594:	4c4d4352 	mcrrmi	3, 5, r4, sp, cr2
				aux_timer_inactive = 0;
     598:	5364616f 	cmnpl	r4, #-1073741797	; 0xc000001b
				(*(__pi_utims [3]))--;
     59c:	73007465 	movwvc	r7, #1125	; 0x465
	if (__pi_systat.ledsts) {
     5a0:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     5a4:	76655f6d 	strbtvc	r5, [r5], -sp, ror #30
		if (__pi_systat.ledblc++ == 0) {
     5a8:	5f746e65 	svcpl	0x00746e65
     5ac:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
			if (__pi_systat.ledblk) {
     5b0:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
     5b4:	6e453233 	mcrvs	2, 2, r3, cr5, cr3, {1}
     5b8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     5bc:	616e6500 	cmnvs	lr, r0, lsl #10
     5c0:	5f656c62 	svcpl	0x00656c62
     5c4:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
				if (__pi_systat.ledsts & 0x2)
     5c8:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
     5cc:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
     5d0:	00737470 	rsbseq	r7, r3, r0, ror r4
				if (__pi_systat.ledsts & 0x4)
     5d4:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
				__pi_systat.ledblk = 0;
     5d8:	4f464946 	svcmi	0x00464946
     5dc:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
			if (__pi_systat.fstblk)
     5e0:	6f00656c 	svcvs	0x0000656c
     5e4:	6e6d646e 	cdpvs	4, 6, cr6, cr13, cr14, {3}
				__pi_systat.ledblc = 200;
     5e8:	69750073 	ldmdbvs	r5!, {r0, r1, r4, r5, r6}^
	if (events & AON_RTC_EVFLAGS_CH0) {
     5ec:	6e493233 	mcrvs	2, 2, r3, cr9, cr3, {1}
		cli_tim;
     5f0:	616c4674 	smcvs	50276	; 0xc464
		__pi_new += setdel;
     5f4:	64007367 	strvs	r7, [r0], #-871	; 0xfffffc99
		cli_tim;
     5f8:	754e6f69 	strbvc	r6, [lr, #-3945]	; 0xfffff097
		__pi_new += setdel;
     5fc:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
     600:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     604:	61755f69 	cmnvs	r5, r9, ror #30
		RISE_N_SHINE;
     608:	735f7472 	cmpvc	pc, #1912602624	; 0x72000000
     60c:	61727465 	cmnvs	r2, r5, ror #8
}
     610:	50006574 	andpl	r6, r0, r4, ror r5
		aux_timer_inactive = 1;
     614:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
     618:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     61c:	72464f49 	subvc	r4, r6, #292	; 0x124
     620:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
     624:	61736944 	cmnvs	r3, r4, asr #18
				if (__pi_systat.ledsts & 0x2)
     628:	00656c62 	rsbeq	r6, r5, r2, ror #24
     62c:	696e6970 	stmdbvs	lr!, {r4, r5, r6, r8, fp, sp, lr}^
     630:	745f646f 	ldrbvc	r6, [pc], #-1135	; 638 <AONRTCIntHandler+0xe8>
				if (__pi_systat.ledsts & 0x4)
     634:	43525000 	cmpmi	r2, #0
				__pi_systat.ledblk = 1;
     638:	6361434d 	cmnvs	r1, #872415233	; 0x34000001
     63c:	65526568 	ldrbvs	r6, [r2, #-1384]	; 0xfffffa98
		if (aux_timer_inactive) {
     640:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
			cli_aux;
     644:	446e6f69 	strbtmi	r6, [lr], #-3945	; 0xfffff097
     648:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
     64c:	6600656c 	strvs	r6, [r0], -ip, ror #10
     650:	6c627473 	cfstrdvs	mvd7, [r2], #-460	; 0xfffffe34
     654:	6573006b 	ldrbvs	r0, [r3, #-107]!	; 0xffffff95
     658:	776f7074 			; <UNDEFINED> instruction: 0x776f7074
     65c:	6f6d7265 	svcvs	0x006d7265
     660:	6f006564 	svcvs	0x00006564
     664:	61726570 	cmnvs	r2, r0, ror r5
word tci_update_delay_ticks (Boolean force) {
     668:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	cli_tim;
     66c:	78756100 	ldmdavc	r5!, {r8, sp, lr}^
     670:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
	if (setdel) {
     674:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
		if (force) {
     678:	7463616e 	strbtvc	r6, [r3], #-366	; 0xfffffe92
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     67c:	00657669 	rsbeq	r7, r5, r9, ror #12
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     680:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     684:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     688:	5f007366 	svcpl	0x00007366
				AON_RTC_O_CH0CMP)) - gettav ());
     68c:	5f69705f 	svcpl	0x0069705f
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     690:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     694:	70007461 	andvc	r7, r0, r1, ror #8
     698:	646f6d64 	strbtvs	r6, [pc], #-3428	; 6a0 <tci_update_delay_ticks+0x38>
     69c:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
}
     6a0:	745f6f64 	ldrbvc	r6, [pc], #-3940	; 6a8 <tci_update_delay_ticks+0x40>
		sti_tim;
     6a4:	5f5f0078 	svcpl	0x005f0078
     6a8:	6f5f6970 	svcvs	0x005f6970
		return YES;
     6ac:	6200646c 	andvs	r6, r0, #108, 8	; 0x6c000000
     6b0:	00657361 	rsbeq	r7, r5, r1, ror #6
     6b4:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
     6b8:	56636e49 	strbtpl	r6, [r3], -r9, asr #28
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6bc:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
	UARTDisable (UART0_BASE);
     6c0:	33697500 	cmncc	r9, #0, 10
     6c4:	73614232 	cmnvc	r1, #536870915	; 0x20000003
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6c8:	5f5f0065 	svcpl	0x005f0065
	UARTDisable (UART0_BASE);
     6cc:	775f6f64 	ldrbvc	r6, [pc, -r4, ror #30]
	UARTConfigSetExpClk (UART0_BASE,
     6d0:	615f6966 	cmpvs	pc, r6, ror #18
     6d4:	656e5f73 	strbvs	r5, [lr, #-3955]!	; 0xfffff08d
     6d8:	64656465 	strbtvs	r6, [r5], #-1125	; 0xfffffb9b
     6dc:	4e4f4100 	dvfmie	f4, f7, f0
     6e0:	49435452 	stmdbmi	r3, {r1, r4, r6, sl, ip, lr}^
}
     6e4:	6156636e 	cmpvs	r6, lr, ror #6
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6e8:	4365756c 	cmnmi	r5, #108, 10	; 0x1b000000
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     6ec:	65533268 	ldrbvs	r3, [r3, #-616]	; 0xfffffd98
     6f0:	5f5f0074 	svcpl	0x005f0074
     6f4:	75706e69 	ldrbvc	r6, [r0, #-3689]!	; 0xfffff197
	urates [0] = rate;
     6f8:	69705f74 	ldmdbvs	r0!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
}
     6fc:	6400736e 	strvs	r7, [r0], #-878	; 0xfffffc92
     700:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
     704:	755f7469 	ldrbvc	r7, [pc, #-1129]	; 2a3 <root+0xbf>
     708:	00747261 	rsbseq	r7, r4, r1, ror #4
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     70c:	524e4f41 	subpl	r4, lr, #260	; 0x104
     710:	6e494354 	mcrvs	3, 2, r4, cr9, cr4, {2}
     714:	6e614874 	mcrvs	8, 3, r4, cr1, cr4, {3}
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     718:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     71c:	72617000 	rsbvc	r7, r1, #0
     720:	74006d61 	strvc	r6, [r0], #-3425	; 0xfffff29f
	__pi_uart_setrate (urates [0], __pi_uart);
     724:	725f6963 	subsvc	r6, pc, #1622016	; 0x18c000
     728:	645f6e75 	ldrbvs	r6, [pc], #-3701	; 730 <reinit_uart+0x24>
     72c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     730:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
     734:	5f007265 	svcpl	0x00007265
	switch (operation) {
     738:	5f69705f 	svcpl	0x0069705f
static int ioreq_uart_a (int operation, char *buf, int len) {
     73c:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
     740:	00657361 	rsbeq	r7, r5, r1, ror #6
	switch (operation) {
     744:	6f646552 	svcvs	0x00646552
     748:	625f5f00 	subsvs	r5, pc, #0, 30
     74c:	655f7373 	ldrbvs	r7, [pc, #-883]	; 3e1 <mdelay+0x5>
				len--;
     750:	5f5f646e 	svcpl	0x005f646e
				*buf++ = uart_a_read;
     754:	65727000 	ldrbvs	r7, [r2, #-0]!
			while (len && uart_a_char_available) {
     758:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     75c:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
			if (len != operation) {
     760:	6f660074 	svcvs	0x00660074
}
     764:	00656372 	rsbeq	r6, r5, r2, ror r3
     768:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
			uart_a_disable_int;
     76c:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
			if (uart_a_char_available) {
     770:	4700656c 	strmi	r6, [r0, -ip, ror #10]
			uart_a_disable_int;
     774:	5f4f4950 	svcpl	0x004f4950
     778:	61656c63 	cmnvs	r5, r3, ror #24
     77c:	65764572 	ldrbvs	r4, [r6, #-1394]!	; 0xfffffa8e
			if (uart_a_char_available) {
     780:	6944746e 	stmdbvs	r4, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
				uart_a_enable_int;
     784:	5f5f006f 	svcpl	0x005f006f
     788:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
     78c:	5f736e6f 	svcpl	0x00736e6f
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     790:	69746573 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
     794:	6d007172 	stfvss	f7, [r0, #-456]	; 0xfffffe38
			return -2;
     798:	616c6564 	cmnvs	ip, r4, ror #10
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     79c:	5f5f0079 	svcpl	0x005f0079
				uart_a_write (*buf);
     7a0:	61736964 	cmnvs	r3, r4, ror #18
				len--;
     7a4:	5f656c62 	svcpl	0x00656c62
			while (len && uart_a_room_in_tx) {
     7a8:	00717269 	rsbseq	r7, r1, r9, ror #4
     7ac:	75625f5f 	strbvc	r5, [r2, #-3935]!	; 0xfffff0a1
			if (len != operation) {
     7b0:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
			uart_a_disable_int;
     7b4:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
     7b8:	50470074 	subpl	r0, r7, r4, ror r0
     7bc:	635f4f49 	cmpvs	pc, #292	; 0x124
			if (uart_a_room_in_tx) {
     7c0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
				uart_a_enable_int;
     7c4:	006f6944 	rsbeq	r6, pc, r4, asr #18
     7c8:	43737953 	cmnmi	r3, #1359872	; 0x14c000
     7cc:	416c7274 	smcmi	50980	; 0xc724
	switch (operation) {
     7d0:	79536e6f 	ldmdbvc	r3, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
			uart_a_disable_int;
     7d4:	5f00636e 	svcpl	0x0000636e
			if (uart_a_room_in_tx) {
     7d8:	5f69705f 	svcpl	0x0069705f
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7dc:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
     7e0:	6572666b 	ldrbvs	r6, [r2, #-1643]!	; 0xfffff995
			uart_a_enable_int;
     7e4:	63740065 	cmnvs	r4, #101	; 0x65
     7e8:	75725f69 	ldrbvc	r5, [r2, #-3945]!	; 0xfffff097
     7ec:	75615f6e 	strbvc	r5, [r1, #-3950]!	; 0xfffff092
     7f0:	696c6978 	stmdbvs	ip!, {r3, r4, r5, r6, r8, fp, sp, lr}^
			return 0;
     7f4:	5f797261 	svcpl	0x00797261
			if (len == UART_CNTRL_SETRATE) {
     7f8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
				if (__pi_uart_setrate (*((word*)buf),
     7fc:	5f5f0072 	svcpl	0x005f0072
     800:	6c6e6970 			; <UNDEFINED> instruction: 0x6c6e6970
     804:	5f747369 	svcpl	0x00747369
				syserror (EREQPAR, "uar");
     808:	69746573 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
			syserror (ENOOPER, "uai");
     80c:	6c007172 	stfvss	f7, [r0], {114}	; 0x72
			if (len == UART_CNTRL_GETRATE) {
     810:	6c626465 	cfstrdvs	mvd6, [r2], #-404	; 0xfffffe6c
				return 1;
     814:	50470063 	subpl	r0, r7, r3, rrx
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     818:	6e494f49 	cdpvs	15, 4, cr4, cr9, cr9, {2}
			syserror (ENOOPER, "uai");
     81c:	6e614874 	mcrvs	8, 3, r4, cr1, cr4, {3}
     820:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     824:	6f6f4200 	svcvs	0x006f4200
     828:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
     82c:	64656c00 	strbtvs	r6, [r5], #-3072	; 0xfffff400
     830:	00737473 	rsbseq	r7, r3, r3, ror r4
     834:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     838:	4f464946 	svcmi	0x00464946
void UART0IntHandler () {
     83c:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
     840:	7465536c 	strbtvc	r5, [r5], #-876	; 0xfffffc94
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     844:	64656c00 	strbtvs	r6, [r5], #-3072	; 0xfffff400
     848:	006b6c62 	rsbeq	r6, fp, r2, ror #24
     84c:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     850:	5300745f 	movwpl	r7, #1119	; 0x45f
     854:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
		RISE_N_SHINE;
     858:	79536c72 	ldmdbvc	r3, {r1, r4, r5, r6, sl, fp, sp, lr}^
     85c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     860:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
		i_trigger (devevent (UART_A, READ));
     864:	65730074 	ldrbvs	r0, [r3, #-116]!	; 0xffffff8c
     868:	76617474 			; <UNDEFINED> instruction: 0x76617474
     86c:	65766500 	ldrbvs	r6, [r6, #-1280]!	; 0xfffffb00
     870:	0073746e 	rsbseq	r7, r3, lr, ror #8
     874:	6c656475 	cfstrdvs	mvd6, [r5], #-468	; 0xfffffe2c
     878:	41007961 	tstmi	r0, r1, ror #18
     87c:	61424e4f 	cmpvs	r2, pc, asr #28
     880:	6e6f4d74 	mcrvs	13, 3, r4, cr15, cr4, {3}
     884:	61736944 	cmnvs	r3, r4, asr #18
     888:	00656c62 	rsbeq	r6, r5, r2, ror #24
     88c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     890:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
     894:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     898:	61625f69 	cmnvs	r2, r9, ror #30
     89c:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
		i_trigger (devevent (UART_A, WRITE));
     8a0:	4e4f4100 	dvfmie	f4, f7, f0
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     8a4:	46434f49 	strbmi	r4, [r3], -r9, asr #30
     8a8:	7a656572 	bvc	1959e78 <__ccfg+0x1939ed0>
		RISE_N_SHINE;
     8ac:	616e4565 	cmnvs	lr, r5, ror #10
     8b0:	00656c62 	rsbeq	r6, r5, r2, ror #24
     8b4:	424e4f41 	submi	r4, lr, #260	; 0x104
		i_trigger (devevent (UART_A, WRITE));
     8b8:	6f4d7461 	svcvs	0x004d7461
     8bc:	7461426e 	strbtvc	r4, [r1], #-622	; 0xfffffd92
     8c0:	79726574 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     8c4:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xfffff0aa
     8c8:	47656761 	strbmi	r6, [r5, -r1, ror #14]!
     8cc:	73007465 	movwvc	r7, #1125	; 0x465
     8d0:	61747379 	cmnvs	r4, r9, ror r3
     8d4:	00745f74 	rsbseq	r5, r4, r4, ror pc
     8d8:	65726f69 	ldrbvs	r6, [r2, #-3945]!	; 0xfffff097
     8dc:	61755f71 	cmnvs	r5, r1, ror pc
     8e0:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
}
     8e4:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     8e8:	74755f69 	ldrbtvc	r5, [r5], #-3945	; 0xfffff097
     8ec:	00736d69 	rsbseq	r6, r3, r9, ror #26
     8f0:	746e6973 	strbtvc	r6, [lr], #-2419	; 0xfffff68d
void __buttons_setirq (int val) {
     8f4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     8f8:	65735f4f 	ldrbvs	r5, [r3, #-3919]!	; 0xfffff0b1
     8fc:	6f694474 	svcvs	0x00694474
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     900:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
     904:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     908:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     90c:	79735f69 	ldmdbvc	r3!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     910:	72726573 	rsbsvc	r6, r2, #482344960	; 0x1cc00000
		bn = BUTTON_GPIO (__button_list [i]);
     914:	7000726f 	andvc	r7, r0, pc, ror #4
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     918:	006d756e 	rsbeq	r7, sp, lr, ror #10
     91c:	6e766564 	cdpvs	5, 7, cr6, cr6, cr4, {3}
     920:	2f006d75 	svccs	0x00006d75
     924:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     928:	6168632f 	cmnvs	r8, pc, lsr #6
}
     92c:	79696c72 	stmdbvc	r9!, {r1, r4, r5, r6, sl, fp, sp, lr}^
     930:	33326e61 	teqcc	r2, #1552	; 0x610
     934:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
     938:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
void __pinlist_setirq (int val) {
     93c:	4349502f 	movtmi	r5, #36911	; 0x902f
	for (i = 0; i < N_PINLIST; i++) {
     940:	502f534f 	eorpl	r5, pc, pc, asr #6
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     944:	534f6369 	movtpl	r6, #62313	; 0xf369
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     948:	3143432f 	cmpcc	r3, pc, lsr #6
	for (i = 0; i < N_PINLIST; i++) {
     94c:	2f585833 	svccs	0x00585833
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     950:	6e69616d 	powvsez	f6, f1, #5.0
     954:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     958:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
     95c:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
     960:	6142746e 	cmpvs	r2, lr, ror #8
     964:	72657474 	rsbvc	r7, r5, #116, 8	; 0x74000000
  __ASM volatile ("cpsie i" : : : "memory");
     968:	41550079 	cmpmi	r5, r9, ror r0
}
     96c:	6e495452 	mcrvs	4, 2, r5, cr9, cr2, {2}
     970:	616e4574 	smcvs	58452	; 0xe454
     974:	00656c62 	rsbeq	r6, r5, r2, ror #24
void GPIOIntHandler () {
     978:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
if (buttons_int) {
     97c:	5575634d 	ldrbpl	r6, [r5, #-845]!	; 0xfffffcb3
     980:	436f646c 	cmnmi	pc, #108, 8	; 0x6c000000
     984:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
	buttons_disable ();
     988:	65727567 	ldrbvs	r7, [r2, #-1383]!	; 0xfffffa99
	i_trigger ((aword)&__button_list);
     98c:	616c6600 	cmnvs	ip, r0, lsl #12
     990:	6f007367 	svcvs	0x00007367
     994:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
     998:	616e4574 	smcvs	58452	; 0xe454
     99c:	56656c62 	strbtpl	r6, [r5], -r2, ror #24
     9a0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     9a4:	6c616800 	stclvs	8, cr6, [r1], #-0
     9a8:	6f740074 	svcvs	0x00740074
     9ac:	4d664f70 	stclmi	15, cr4, [r6, #-448]!	; 0xfffffe40
     9b0:	536e6961 	cmnpl	lr, #1589248	; 0x184000
     9b4:	6b636174 	blvs	18d8f8c <__ccfg+0x18b8fe4>
     9b8:	64675f00 	strbtvs	r5, [r7], #-3840	; 0xfffff100
	RISE_N_SHINE;
     9bc:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     9c0:	52415500 	subpl	r5, r1, #0, 10
if (pin_sensor_int) {
     9c4:	6e493054 	mcrvs	0, 2, r3, cr9, cr4, {2}
     9c8:	6e614874 	mcrvs	8, 3, r4, cr1, cr4, {3}
     9cc:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
	i_trigger ((aword)(&__input_pins));
     9d0:	65654400 	strbvs	r4, [r5, #-1024]!	; 0xfffffc00
     9d4:	656c5370 	strbvs	r5, [ip, #-880]!	; 0xfffffc90
     9d8:	70007065 	andvc	r7, r0, r5, rrx
     9dc:	5f74726f 	svcpl	0x0074726f
     9e0:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     9e4:	74006769 	strvc	r6, [r0], #-1897	; 0xfffff897
     9e8:	755f6963 	ldrbvc	r6, [pc, #-2403]	; 8d <g_pfnVectors+0x8d>
     9ec:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
     9f0:	65645f65 	strbvs	r5, [r4, #-3941]!	; 0xfffff09b
     9f4:	5f79616c 	svcpl	0x0079616c
     9f8:	6b636974 	blvs	18dafd0 <__ccfg+0x18bb028>
     9fc:	654d0073 	strbvs	r0, [sp, #-115]	; 0xffffff8d
	__pinsen_disable_and_clear;
     a00:	72757361 	rsbsvc	r7, r5, #-2080374783	; 0x84000001
	RISE_N_SHINE;
     a04:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
     a08:	71657276 	smcvc	22310	; 0x5726
}
     a0c:	5f6e7566 	svcpl	0x006e7566
     a10:	696b0074 	stmdbvs	fp!, {r2, r4, r5, r6}^
     a14:	76656c6c 	strbtvc	r6, [r5], -ip, ror #24
     a18:	6f682f00 	svcvs	0x00682f00
     a1c:	632f656d 			; <UNDEFINED> instruction: 0x632f656d
     a20:	6c726168 	ldfvse	f6, [r2], #-416	; 0xfffffe60
void system_init () {
     a24:	6e617969 	vnmulvs.f16	s15, s2, s19	; <UNPREDICTABLE>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a28:	4f2f3332 	svcmi	0x002f3332
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a2c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     a30:	502f5445 	eorpl	r5, pc, r5, asr #8
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a34:	534f4349 	movtpl	r4, #62281	; 0xf349
     a38:	6369502f 	cmnvs	r9, #47	; 0x2f
     a3c:	6b2f534f 	blvs	bd5780 <__ccfg+0xbb57d8>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a40:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     a44:	656b2f6c 	strbvs	r2, [fp, #-3948]!	; 0xfffff094
     a48:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a4c:	5f00632e 	svcpl	0x0000632e
     a50:	5f69705f 	svcpl	0x0069705f
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a54:	63727473 	cmnvs	r2, #1929379840	; 0x73000000
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a58:	5f007970 	svcpl	0x00007970
     a5c:	5f69705f 	svcpl	0x0069705f
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a60:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a64:	7500636f 	strvc	r6, [r0, #-879]	; 0xfffffc91
     a68:	6961776e 	stmdbvs	r1!, {r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
		pin = (port_confs [i] >> 19) & 0x1f;
     a6c:	66710074 			; <UNDEFINED> instruction: 0x66710074
     a70:	00656572 	rsbeq	r6, r5, r2, ror r5
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a74:	65726f69 	ldrbvs	r6, [r2, #-3945]!	; 0xfffff097
     a78:	5f5f0071 	svcpl	0x005f0071
     a7c:	665f6970 			; <UNDEFINED> instruction: 0x665f6970
     a80:	006b726f 	rsbeq	r7, fp, pc, ror #4
     a84:	6c6c696b 			; <UNDEFINED> instruction: 0x6c6c696b
     a88:	6f706d00 	svcvs	0x00706d00
     a8c:	00736c6f 	rsbseq	r6, r3, pc, ror #24
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a90:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
		if (port_confs [i] & 0x40)
     a94:	615f7265 	cmpvs	pc, r5, ror #4
     a98:	55006464 	strpl	r6, [r0, #-1124]	; 0xfffffb9c
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a9c:	42545241 	subsmi	r5, r4, #268435460	; 0x10000004
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     aa0:	00797375 	rsbseq	r7, r9, r5, ror r3
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     aa4:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	all_leds_blink;
     aa8:	6c616d5f 	stclvs	13, cr6, [r1], #-380	; 0xfffffe84
     aac:	5f636f6c 	svcpl	0x00636f6c
     ab0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     ab4:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     ab8:	72745f69 	rsbsvc	r5, r4, #420	; 0x1a4
     abc:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
     ac0:	5f5f0072 	svcpl	0x005f0072
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac4:	755f6970 	ldrbvc	r6, [pc, #-2416]	; 15c <_Min_Stack_Size+0x5c>
     ac8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     acc:	65735f72 	ldrbvs	r5, [r3, #-3954]!	; 0xfffff08e
     ad0:	5f5f0074 	svcpl	0x005f0074
     ad4:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     ad8:	656c7274 	strbvs	r7, [ip, #-628]!	; 0xfffffd8c
     adc:	5f5f006e 	svcpl	0x005f006e
	IntEnable (INT_AON_RTC_COMB);
     ae0:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; a08 <GPIOIntHandler+0x90>	; <UNPREDICTABLE>
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ae4:	72667861 	rsbvc	r7, r6, #6356992	; 0x610000
     ae8:	63006565 	movwvs	r6, #1381	; 0x565
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     aec:	6e6e7572 	mcrvs	5, 3, r7, cr14, cr2, {3}
	IntEnable (INT_AON_RTC_COMB);
     af0:	00676e69 	rsbeq	r6, r7, r9, ror #28
     af4:	6b68636e 	blvs	1a198b4 <__ccfg+0x19f990c>
	__pi_malloc_init ();
     af8:	666e6d00 	strbtvs	r6, [lr], -r0, lsl #26
	IntEnable (INT_AON_GPIO_EDGE);
     afc:	00656572 	rsbeq	r6, r5, r2, ror r5
     b00:	636f7270 	cmnvs	pc, #112, 4
     b04:	00646565 	rsbeq	r6, r4, r5, ror #10
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b08:	6e656c6d 	cdpvs	12, 6, cr6, cr5, cr13, {3}
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b0c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     b10:	74705f69 	ldrbtvc	r5, [r0], #-3945	; 0xfffff097
     b14:	67676972 			; <UNDEFINED> instruction: 0x67676972
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b18:	61007265 	tstvs	r0, r5, ror #4
     b1c:	65646464 	strbvs	r6, [r4, #-1124]!	; 0xfffffb9c
     b20:	6e756676 	mrcvs	6, 3, r6, cr5, cr6, {3}
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b24:	69700063 	ldmdbvs	r0!, {r0, r1, r5, r6}^
     b28:	72657664 	rsbvc	r7, r5, #100, 12	; 0x6400000
     b2c:	61696400 	cmnvs	r9, r0, lsl #8
	urates [0] = UART_RATE / 100;
     b30:	5f5f0067 	svcpl	0x005f0067
     b34:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     b38:	61637274 	smcvs	14116	; 0x3724
	reinit_uart ();
     b3c:	5f5f0074 	svcpl	0x005f0074
	EXTRA_INITIALIZERS;
     b40:	6a5f6970 	bvs	17db108 <__ccfg+0x17bb160>
     b44:	006e696f 	rsbeq	r6, lr, pc, ror #18
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b48:	6576656d 	ldrbvs	r6, [r6, #-1389]!	; 0xfffffa93
     b4c:	745f746e 	ldrbvc	r7, [pc], #-1134	; b54 <system_init+0x130>
     b50:	66636d00 	strbtvs	r6, [r3], -r0, lsl #26
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b54:	00656572 	rsbeq	r6, r5, r2, ror r5
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b58:	74736177 	ldrbtvc	r6, [r3], #-375	; 0xfffffe89
			devinit [i] . init (devinit [i] . param);
     b5c:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b60:	00797274 	rsbseq	r7, r9, r4, ror r2
     b64:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
     b68:	73656d00 	cmnvc	r5, #0, 26
	IntEnable (INT_UART0_COMB);
     b6c:	656d0073 	strbvs	r0, [sp, #-115]!	; 0xffffff8d
     b70:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
     b74:	705f5f00 	subsvc	r5, pc, r0, lsl #30
}
     b78:	61625f69 	cmnvs	r2, r9, ror #30
	tci_run_auxiliary_timer ();
     b7c:	61747364 	cmnvs	r4, r4, ror #6
		diag ("");
     b80:	64006574 	strvs	r6, [r0], #-1396	; 0xfffffa8c
     b84:	74756f67 	ldrbtvc	r6, [r5], #-3943	; 0xfffff099
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     b88:	736f6800 	cmnvc	pc, #0, 16
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     b8c:	64695f74 	strbtvs	r5, [r9], #-3956	; 0xfffff08c
		diag ("Leftover RAM: %d bytes",
     b90:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     b94:	61775f69 	cmnvs	r7, r9, ror #30
     b98:	5f007469 	svcpl	0x00007469
     b9c:	5f69705f 	svcpl	0x0069705f
     ba0:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
     ba4:	006d656d 	rsbeq	r6, sp, sp, ror #10
     ba8:	646e726c 	strbtvs	r7, [lr], #-620	; 0xfffffd94
     bac:	6c696b00 			; <UNDEFINED> instruction: 0x6c696b00
     bb0:	6c6c616c 	stfvse	f6, [ip], #-432	; 0xfffffe50
     bb4:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     bb8:	656d5f69 	strbvs	r5, [sp, #-3945]!	; 0xfffff097
     bbc:	6572666d 	ldrbvs	r6, [r2, #-1645]!	; 0xfffff993
     bc0:	425f0065 	subsmi	r0, pc, #101	; 0x65
     bc4:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
     bc8:	6e756863 	cdpvs	8, 7, cr6, cr5, cr3, {3}
     bcc:	7075006b 	rsbsvc	r0, r5, fp, rrx
     bd0:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     bd4:	775f6e5f 			; <UNDEFINED> instruction: 0x775f6e5f
     bd8:	00656b61 	rsbeq	r6, r5, r1, ror #22
__attribute__ ((noreturn)) void __pi_release () {
     bdc:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     be0:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
     be4:	65670064 	strbvs	r0, [r7, #-100]!	; 0xffffff9c
	check_stack_overflow;
     be8:	646f6374 	strbtvs	r6, [pc], #-884	; bf0 <__pi_release+0x14>
     bec:	6c640065 	stclvs	0, cr0, [r4], #-404	; 0xfffffe6c
     bf0:	00746665 	rsbseq	r6, r4, r5, ror #12
     bf4:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	for_all_tasks (__pi_curr) {
     bf8:	6d656d5f 	stclvs	13, cr6, [r5, #-380]!	; 0xfffffe84
	update_n_wake (MAX_WORD, NO);
     bfc:	00797063 	rsbseq	r7, r9, r3, rrx
     c00:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	for_all_tasks (__pi_curr) {
     c04:	7865685f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, fp, sp, lr}^
     c08:	636e655f 	cmnvs	lr, #398458880	; 0x17c00000
     c0c:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
     c10:	7700656c 	strvc	r6, [r0, -ip, ror #10]
	system_event_count ++;
     c14:	006e7566 	rsbeq	r7, lr, r6, ror #10
  __ASM volatile ("cpsid i" : : : "memory");
     c18:	6961666e 	stmdbvs	r1!, {r1, r2, r3, r5, r6, r9, sl, sp, lr}^
	__SLEEP;
     c1c:	5f5f006c 	svcpl	0x005f006c
     c20:	665f6970 			; <UNDEFINED> instruction: 0x665f6970
     c24:	00656572 	rsbeq	r6, r5, r2, ror r5
     c28:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
     c2c:	0079706f 	rsbseq	r7, r9, pc, rrx
     c30:	535f4944 	cmppl	pc, #68, 18	; 0x110000
	switch (__pi_systat.effpdm) {
     c34:	5f004749 	svcpl	0x00004749
     c38:	5f69705f 	svcpl	0x0069705f
     c3c:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
     c40:	5f007465 	svcpl	0x00007465
  __ASM volatile ("cpsie i" : : : "memory");
     c44:	5f69705f 	svcpl	0x0069705f
     c48:	6e727473 	mrcvs	4, 3, r7, cr2, cr3, {3}
	check_stack_overflow;
     c4c:	00797063 	rsbseq	r7, r9, r3, rrx
     c50:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c54:	645f7265 	ldrbvs	r7, [pc], #-613	; c5c <__pi_release+0x80>
     c58:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
     c5c:	5f5f0065 	svcpl	0x005f0065
			(__pi_curr->code) (tstate (__pi_curr));
     c60:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
	for_all_tasks (__pi_curr) {
     c64:	636e7274 	cmnvs	lr, #116, 4	; 0x40000007
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c68:	74007461 	strvc	r7, [r0], #-1121	; 0xfffffb9f
     c6c:	715f7663 	cmpvc	pc, r3, ror #12
     c70:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
     c74:	65727000 	ldrbvs	r7, [r2, #-0]!
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c78:	5f5f0076 	svcpl	0x005f0076
     c7c:	5f766374 	svcpl	0x00766374
     c80:	74746162 	ldrbtvc	r6, [r4], #-354	; 0xfffffe9e
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c84:	00745f72 	rsbseq	r5, r4, r2, ror pc
     c88:	70766374 	rsbsvc	r6, r6, r4, ror r3
     c8c:	745f7968 	ldrbvc	r7, [pc], #-2408	; c94 <__pi_release+0xb8>
     c90:	7400706f 	strvc	r7, [r0], #-111	; 0xffffff91
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c94:	635f7663 	cmpvs	pc, #103809024	; 0x6300000
     c98:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     c9c:	74006c6f 	strvc	r6, [r0], #-3183	; 0xfffff391
     ca0:	725f7663 	subsvc	r7, pc, #103809024	; 0x6300000
			__WFI ();
     ca4:	00646165 	rsbeq	r6, r4, r5, ror #2
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ca8:	70766374 	rsbsvc	r6, r6, r4, ror r3
     cac:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
     cb0:	65736f70 	ldrbvs	r6, [r3, #-3952]!	; 0xfffff090
     cb4:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cb8:	5f796870 	svcpl	0x00796870
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cbc:	00676572 	rsbeq	r6, r7, r2, ror r5
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cc0:	5f766374 	svcpl	0x00766374
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cc4:	73617265 	cmnvc	r1, #1342177286	; 0x50000006
     cc8:	656e0065 	strbvs	r0, [lr, #-101]!	; 0xffffff9b
     ccc:	63007478 	movwvs	r7, #1144	; 0x478
     cd0:	666c7274 			; <UNDEFINED> instruction: 0x666c7274
     cd4:	745f6e75 	ldrbvc	r6, [pc], #-3701	; cdc <__pi_release+0x100>
     cd8:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     cdc:	5f796870 	svcpl	0x00796870
     ce0:	00746567 	rsbseq	r6, r4, r7, ror #10
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ce4:	5f766374 	svcpl	0x00766374
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     ce8:	706f7264 	rsbvc	r7, pc, r4, ror #4
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cec:	79687000 	stmdbvc	r8!, {ip, sp, lr}^
     cf0:	666e6973 			; <UNDEFINED> instruction: 0x666e6973
     cf4:	6374006f 	cmnvs	r4, #111	; 0x6f
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     cf8:	6e775f76 	mrcvs	15, 3, r5, cr7, cr6, {3}
     cfc:	65007370 	strvs	r7, [r0, #-880]	; 0xfffffc90
     d00:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
			SysCtrlSetRechargeBeforePowerDown
     d04:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     d08:	5f796870 	svcpl	0x00796870
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d0c:	73617265 	cmnvc	r1, #1342177286	; 0x50000006
     d10:	63740065 	cmnvs	r4, #101	; 0x65
     d14:	615f7076 	cmpvs	pc, r6, ror r0	; <UNPREDICTABLE>
     d18:	63617474 	cmnvs	r1, #116, 8	; 0x74000000
			__WFI ();
     d1c:	716f0068 	cmnvc	pc, r8, rrx
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d20:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     d24:	5f5f0073 	svcpl	0x005f0073
     d28:	5f766374 	svcpl	0x00766374
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d2c:	65746971 	ldrbvs	r6, [r4, #-2417]!	; 0xfffff68f
     d30:	00735f6d 	rsbseq	r5, r3, sp, ror #30
     d34:	63745f5f 	cmnvs	r4, #380	; 0x17c
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d38:	69715f76 	ldmdbvs	r1!, {r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     d3c:	5f6d6574 	svcpl	0x006d6574
     d40:	5f5f0074 	svcpl	0x005f0074
     d44:	5f766374 	svcpl	0x00766374
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d48:	6f6c6268 	svcvs	0x006c6268
     d4c:	745f6b63 	ldrbvc	r6, [pc], #-2915	; d54 <__pi_release+0x178>
			while (!(AONWUCPowerStatusGet () &
     d50:	67727500 	ldrbvs	r7, [r2, -r0, lsl #10]!
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d54:	00746e65 	rsbseq	r6, r4, r5, ror #28
     d58:	63736564 	cmnvs	r3, #100, 10	; 0x19000000
     d5c:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0xfffff68e
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d60:	0073726f 	rsbseq	r7, r3, pc, ror #4
     d64:	5f766374 	svcpl	0x00766374
     d68:	70646e65 	rsbvc	r6, r4, r5, ror #28
     d6c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d70:	656e5f70 	strbvs	r5, [lr, #-3952]!	; 0xfffff090
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d74:	71720077 	cmnvc	r2, r7, ror r0
     d78:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d7c:	72747000 	rsbsvc	r7, r4, #0
     d80:	63740073 	cmnvs	r4, #115	; 0x73
			SysCtrlAdjustRechargeAfterPowerDown ();
     d84:	72775f76 	rsbsvc	r5, r7, #472	; 0x1d8
			reinit_uart ();
     d88:	00657469 	rsbeq	r7, r5, r9, ror #8
     d8c:	5f766374 	svcpl	0x00766374
     d90:	736f6c63 	cmnvc	pc, #25344	; 0x6300
     d94:	5f5f0065 	svcpl	0x005f0065
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d98:	5f766374 	svcpl	0x00766374
     d9c:	64736573 	ldrbtvs	r6, [r3], #-1395	; 0xfffffa8d
     da0:	5f637365 	svcpl	0x00637365
     da4:	6f700074 	svcvs	0x00700074
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     da8:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dac:	70007372 	andvc	r7, r0, r2, ror r3
     db0:	00737968 	rsbseq	r7, r3, r8, ror #18
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     db4:	73796870 	cmnvc	r9, #112, 16	; 0x700000
     db8:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     dbc:	65757100 	ldrbvs	r7, [r5, #-256]!	; 0xffffff00
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     dc0:	00646575 	rsbeq	r6, r4, r5, ror r5
     dc4:	5f766374 	svcpl	0x00766374
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     dc8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     dcc:	73657300 	cmnvc	r5, #0, 6
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     dd0:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
     dd4:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     dd8:	6c635f70 	stclvs	15, cr5, [r3], #-448	; 0xfffffe40
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     ddc:	00656e6f 	rsbeq	r6, r5, pc, ror #28
			PRCMPowerDomainOff (
     de0:	70766374 	rsbsvc	r6, r6, r4, ror r3
     de4:	7373615f 	cmnvc	r3, #-1073741801	; 0xc0000017
     de8:	006e6769 	rsbeq	r6, lr, r9, ror #14
     dec:	70747461 	rsbsvc	r7, r4, r1, ror #8
     df0:	696c7000 	stmdbvs	ip!, {ip, sp, lr}^
	__SLEEP;
     df4:	63740064 	cmnvs	r4, #100	; 0x64
     df8:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
     dfc:	646e655f 	strbtvs	r6, [lr], #-1375	; 0xfffffaa1
	goto Redo;
     e00:	74746100 	ldrbtvc	r6, [r4], #-256	; 0xffffff00
     e04:	74746170 	ldrbtvc	r6, [r4], #-368	; 0xfffffe90
     e08:	006e7265 	rsbeq	r7, lr, r5, ror #4
     e0c:	5f766374 	svcpl	0x00766374
     e10:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
     e14:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     e18:	65706f5f 	ldrbvs	r6, [r0, #-3935]!	; 0xfffff0a1
     e1c:	7461006e 	strbtvc	r0, [r1], #-110	; 0xffffff92
     e20:	62697274 	rsbvs	r7, r9, #116, 4	; 0x40000007
     e24:	73657475 	cmnvc	r5, #1962934272	; 0x75000000
     e28:	745f5f00 	ldrbvc	r5, [pc], #-3840	; e30 <__pi_release+0x254>
     e2c:	715f7663 	cmpvc	pc, r3, ror #12
     e30:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
     e34:	7000745f 	andvc	r7, r0, pc, asr r4
     e38:	6967756c 	stmdbvs	r7!, {r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     e3c:	656c006e 	strbvs	r0, [ip, #-110]!	; 0xffffff92
     e40:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
int main (void) {
     e44:	73696400 	cmnvc	r9, #0, 8
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e48:	682f0070 	stmdavs	pc!, {r4, r5, r6}	; <UNPREDICTABLE>
     e4c:	2f656d6f 	svccs	0x00656d6f
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e50:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e54:	6179696c 	cmnvs	r9, ip, ror #18
	system_init ();
     e58:	2f33326e 	svccs	0x0033326e
	tcv_init ();
     e5c:	4f534c4f 	svcmi	0x00534c4f
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e60:	2f54454e 	svccs	0x0054454e
     e64:	4f434950 	svcmi	0x00434950
     e68:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e6c:	2f534f63 	svccs	0x00534f63
     e70:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
     e74:	4e562f73 	mrcmi	15, 2, r2, cr6, cr3, {3}
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e78:	2f497465 	svccs	0x00497465
     e7c:	2e766374 	mrccs	3, 3, r6, cr6, cr4, {3}
     e80:	63740063 	cmnvs	r4, #99	; 0x63
     e84:	6e725f76 	mrcvs	15, 3, r5, cr2, cr6, {3}
	delay (16, 0);
     e88:	63740070 	cmnvs	r4, #112	; 0x70
     e8c:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
	__pi_release ();
     e90:	7663725f 			; <UNDEFINED> instruction: 0x7663725f
     e94:	75716200 	ldrbvc	r6, [r1, #-512]!	; 0xfffffe00
     e98:	00657565 	rsbeq	r7, r5, r5, ror #10
     e9c:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
     ea0:	00736e69 	rsbseq	r6, r3, r9, ror #28
     ea4:	725f7245 	subsvc	r7, pc, #1342177284	; 0x50000004
static void killev (__pi_pcb_t *pid) {
     ea8:	5f5f0074 	svcpl	0x005f0074
	wfun = (aword)(pid->code);
     eac:	5f766374 	svcpl	0x00766374
	for_all_tasks (i) {
     eb0:	6f6c6268 	svcvs	0x006c6268
		for (j = 0; j < nevents (i); j++) {
     eb4:	735f6b63 	cmpvc	pc, #101376	; 0x18c00
     eb8:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
     ebc:	6e696f67 	cdpvs	15, 6, cr6, cr9, cr7, {3}
			    || i->Events [j] . Event == wfun
     ec0:	63740067 	cmnvs	r4, #103	; 0x67
		for (j = 0; j < nevents (i); j++) {
     ec4:	635f7076 	cmpvs	pc, #118	; 0x76
			if (i->Events [j] . Event == (aword)pid
     ec8:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     ecc:	5f006c6f 	svcpl	0x00006c6f
     ed0:	61747365 	cmnvs	r4, r5, ror #6
				wakeupev (i, j);
     ed4:	70006b63 	andvc	r6, r0, r3, ror #22
     ed8:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
	for_all_tasks (i) {
     edc:	00637253 	rsbeq	r7, r3, r3, asr r2
}
     ee0:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     ee4:	52534974 	subspl	r4, r3, #116, 18	; 0x1d0000
static void qfree (aword *ch) {
     ee8:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     eec:	0072656c 	rsbseq	r6, r2, ip, ror #10
	cc = (aword*)(mpools + MA_NP);
     ef0:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
	m_setnextp (ch, chunk);
     ef4:	6e490061 	cdpvs	0, 4, cr0, cr9, cr1, {3}
	m_setnextp (cc, ch);
     ef8:	66654474 			; <UNDEFINED> instruction: 0x66654474
}
     efc:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f00:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     f04:	0072656c 	rsbseq	r6, r2, ip, ror #10
     f08:	53696d4e 	cmnpl	r9, #4992	; 0x1380
			m_setnextp (cc, m_nextp (chunk));
     f0c:	6e614852 	mcrvs	8, 3, r4, cr1, cr2, {2}
			m_size (chunk) += m_hdrlen + m_size (ch);
     f10:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     f14:	74655f00 	strbtvc	r5, [r5], #-3840	; 0xfffff100
     f18:	00747865 	rsbseq	r7, r4, r5, ror #16
     f1c:	6164655f 	cmnvs	r4, pc, asr r5
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f20:	67006174 	smlsdxvs	r0, r4, r1, r6
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f24:	6e66705f 	mcrvs	0, 3, r7, cr6, cr15, {2}
     f28:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
     f2c:	0073726f 	rsbseq	r7, r3, pc, ror #4
			m_setnextp (cc, m_nextp (chunk));
     f30:	33697570 	cmncc	r9, #112, 10	; 0x1c000000
			m_size (ch) += m_hdrlen + m_size (chunk);
     f34:	73654432 	cmnvc	r5, #838860800	; 0x32000000
     f38:	65520074 	ldrbvs	r0, [r2, #-116]	; 0xffffff8c
     f3c:	49746573 	ldmdbmi	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
     f40:	2f005253 	svccs	0x00005253
     f44:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     f48:	6168632f 	cmnvs	r8, pc, lsr #6
			if (m_size (chunk) >= m_size (ch))
     f4c:	79696c72 	stmdbvc	r9!, {r1, r4, r5, r6, sl, fp, sp, lr}^
     f50:	33326e61 	teqcc	r2, #1552	; 0x610
     f54:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
		chunk = m_nextp (chunk))
     f58:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
     f5c:	4349502f 	movtmi	r5, #36911	; 0x902f
     f60:	502f534f 	eorpl	r5, pc, pc, asr #6
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f64:	534f6369 	movtpl	r6, #62313	; 0xf369
	diag_wait (a);
     f68:	3143432f 	cmpcc	r3, pc, lsr #6
	diag_wchar (c, a);
     f6c:	2f585833 	svccs	0x00585833
}
     f70:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     f74:	5f707574 	svcpl	0x00707574
	syserror (ESTATE, "state");
     f78:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
     f7c:	43430063 	movtmi	r0, #12387	; 0x3063
     f80:	465f4746 	ldrbmi	r4, [pc], -r6, asr #14
     f84:	5f514552 	svcpl	0x00514552
	for (i = 0; i < MAX_UTIMERS; i++)
     f88:	5346464f 	movtpl	r4, #26191	; 0x664f
void utimer_add (address ut) {
     f8c:	43005445 	movwmi	r5, #1093	; 0x445
     f90:	5f474643 	svcpl	0x00474643
		if (__pi_utims [i] == NULL)
     f94:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	for (i = 0; i < MAX_UTIMERS; i++)
     f98:	5f49545f 	svcpl	0x0049545f
     f9c:	4954504f 	ldmdbmi	r4, {r0, r1, r2, r3, r6, ip, lr}^
		syserror (ERESOURCE, "ut a");
     fa0:	00534e4f 	subseq	r4, r3, pc, asr #28
	__pi_utims [i] = ut;
     fa4:	47464343 	strbmi	r4, [r6, -r3, asr #6]
}
     fa8:	5f4c425f 	svcpl	0x004c425f
     fac:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
     fb0:	2f004749 	svccs	0x00004749
	*t = v;
     fb4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	TCI_RUN_AUXILIARY_TIMER;
     fb8:	6168632f 	cmnvs	r8, pc, lsr #6
void update_n_wake (word min, Boolean force) {
     fbc:	79696c72 	stmdbvc	r9!, {r1, r4, r5, r6, sl, fp, sp, lr}^
	if (TCI_UPDATE_DELAY_TICKS (force))
     fc0:	33326e61 	teqcc	r2, #1552	; 0x610
     fc4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
     fc8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fcc:	4349502f 	movtmi	r5, #36911	; 0x902f
     fd0:	502f534f 	eorpl	r5, pc, pc, asr #6
     fd4:	534f6369 	movtpl	r6, #62313	; 0xf369
     fd8:	3143432f 	cmpcc	r3, pc, lsr #6
     fdc:	2f585833 	svccs	0x00585833
     fe0:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
     fe4:	4300632e 	movwmi	r6, #814	; 0x32e
     fe8:	5f474643 	svcpl	0x00474643
     fec:	47464343 	strbmi	r4, [r6, -r3, asr #6]
     ff0:	5041545f 	subpl	r5, r1, pc, asr r4
     ff4:	5041445f 	subpl	r4, r1, pc, asr r4
     ff8:	4300305f 	movwmi	r3, #95	; 0x5f
     ffc:	5f474643 	svcpl	0x00474643
		for_all_tasks (i) {
    1000:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	__pi_mintk = znew + min;
    1004:	5041545f 	subpl	r5, r1, pc, asr r4
    1008:	5041445f 	subpl	r4, r1, pc, asr r4
			if (!twaiting (i))
    100c:	4300315f 	movwmi	r3, #351	; 0x15f
    1010:	5f474643 	svcpl	0x00474643
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1014:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1018:	4f52505f 	svcmi	0x0052505f
    101c:	32315f54 	eorscc	r5, r1, #84, 30	; 0x150
    1020:	36395f37 	shasxcc	r5, r9, r7
    1024:	635f5f00 	cmpvs	pc, #0, 30
    1028:	00676663 	rsbeq	r6, r7, r3, ror #12
    102c:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1030:	5a49535f 	bpl	1255db4 <__ccfg+0x1235e0c>
    1034:	4e415f45 	cdpmi	15, 4, cr5, cr1, cr5, {2}
    1038:	49445f44 	stmdbmi	r4, {r2, r6, r8, r9, sl, fp, ip, lr}^
    103c:	4c465f53 	mcrrmi	15, 5, r5, r6, cr3
    1040:	00534741 	subseq	r4, r3, r1, asr #14
				wakeuptm (i);
    1044:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1048:	4545495f 	strbmi	r4, [r5, #-2399]	; 0xfffff6a1
		for_all_tasks (i) {
    104c:	414d5f45 	cmpmi	sp, r5, asr #30
				d = i->Timer - znew;
    1050:	00315f43 	eorseq	r5, r1, r3, asr #30
    1054:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1058:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
		if ((word)(__pi_mintk - znew) < min) 
    105c:	52505f47 	subspl	r5, r0, #284	; 0x11c
    1060:	365f544f 	ldrbcc	r5, [pc], -pc, asr #8
    1064:	32335f33 	eorscc	r5, r3, #51, 30	; 0xcc
	__pi_old = znew;
    1068:	46434300 	strbmi	r4, [r3], -r0, lsl #6
}
    106c:	4f4d5f47 	svcmi	0x004d5f47
	TCI_RUN_DELAY_TIMER;
    1070:	435f4544 	cmpmi	pc, #68, 10	; 0x11000000
}
    1074:	00464e4f 	subeq	r4, r6, pc, asr #28
    1078:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    107c:	4c4f565f 	mcrrmi	6, 5, r5, pc, cr15
    1080:	4f4c5f54 	svcmi	0x004c5f54
    1084:	305f4441 	subscc	r4, pc, r1, asr #8
void proceed (word state) {
    1088:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	prcdstate (__pi_curr, state);
    108c:	4f565f47 	svcmi	0x00565f47
    1090:	4c5f544c 	cfldrdmi	mvd5, [pc], {76}	; 0x4c
	release;
    1094:	5f44414f 	svcpl	0x0044414f
    1098:	43430031 	movtmi	r0, #12337	; 0x3031
void __pi_wait (aword event, word state) {
    109c:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
	sint j = nevents (__pi_curr);
    10a0:	5f474643 	svcpl	0x00474643
	if (j >= MAX_EVENTS_PER_TASK)
    10a4:	544f5250 	strbpl	r5, [pc], #-592	; 10ac <__pi_wait+0x10>
    10a8:	5f35395f 	svcpl	0x0035395f
    10ac:	43003436 	movwmi	r3, #1078	; 0x436
		syserror (ENEVENTS, "sw");
    10b0:	5f474643 	svcpl	0x00474643
    10b4:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
	setestate (__pi_curr->Events [j], state, event);
    10b8:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
	incwait (__pi_curr);
    10bc:	00315f46 	eorseq	r5, r1, r6, asr #30
	setestate (__pi_curr->Events [j], state, event);
    10c0:	47464343 	strbmi	r4, [r6, -r3, asr #6]
}
    10c4:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0xfffffaa1
    10c8:	5f464c5f 	svcpl	0x00464c5f
    10cc:	004b4c43 	subeq	r4, fp, r3, asr #24
void __pi_trigger (aword event) {
    10d0:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	for_all_tasks (i) {
    10d4:	4545495f 	strbmi	r4, [r5, #-2399]	; 0xfffff6a1
		for (j = 0; j < nevents (i); j++) {
    10d8:	4c425f45 	mcrrmi	15, 4, r5, r2, cr5
    10dc:	00315f45 	eorseq	r5, r1, r5, asr #30
    10e0:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    10e4:	4545495f 	strbmi	r4, [r5, #-2399]	; 0xfffff6a1
			if (i->Events [j] . Event == event) {
    10e8:	4c425f45 	mcrrmi	15, 4, r5, r2, cr5
    10ec:	00305f45 	eorseq	r5, r0, r5, asr #30
    10f0:	47464343 	strbmi	r4, [r6, -r3, asr #6]
				wakeupev (i, j);
    10f4:	414d495f 	cmpmi	sp, pc, asr r9
    10f8:	565f4547 	ldrbpl	r4, [pc], -r7, asr #10
	for_all_tasks (i) {
    10fc:	44494c41 	strbmi	r4, [r9], #-3137	; 0xfffff3bf
}
    1100:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
aword __pi_join (aword pid, word st) {
    1104:	43430046 	movtmi	r0, #12358	; 0x3046
	for_all_tasks (i) {
    1108:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
    110c:	5f474643 	svcpl	0x00474643
	return 0;
    1110:	544f5250 	strbpl	r5, [pc], #-592	; 1118 <__pi_join+0x14>
		if ((aword)i == pid) {
    1114:	5f31335f 	svcpl	0x0031335f
			__pi_wait (pid, st);
    1118:	43430030 	movtmi	r0, #12336	; 0x3030
}
    111c:	455f4746 	ldrbmi	r4, [pc, #-1862]	; 9de <GPIOIntHandler+0x66>
	for_all_tasks (i) {
    1120:	45534152 	ldrbmi	r4, [r3, #-338]	; 0xfffffeae
    1124:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
void delay (word d, word state) {
    1128:	43430046 	movtmi	r0, #12358	; 0x3046
	settstate (__pi_curr, state);
    112c:	525f4746 	subspl	r4, pc, #18350080	; 0x1180000
    1130:	4f5f4354 	svcmi	0x005f4354
    1134:	45534646 	ldrbmi	r4, [r3, #-1606]	; 0xfffff9ba
    1138:	43430054 	movtmi	r0, #12372	; 0x3054
	update_n_wake (d, YES);
    113c:	495f4746 	ldmdbmi	pc, {r1, r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    1140:	5f454545 	svcpl	0x00454545
	__pi_curr->Timer = __pi_old + d;
    1144:	5f43414d 	svcpl	0x0043414d
    1148:	63630030 	cmnvs	r3, #48	; 0x30
	inctimer (__pi_curr);
    114c:	745f6766 	ldrbvc	r6, [pc], #-1894	; 1154 <delay+0x2c>
    1150:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    1154:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
}
    1158:	5f726f73 	svcpl	0x00726f73
    115c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
	if (fun == NULL)
    1160:	6f682f00 	svcvs	0x00682f00
		return (int) __pi_curr;
    1164:	632f656d 			; <UNDEFINED> instruction: 0x632f656d
    1168:	6c726168 	ldfvse	f6, [r2], #-416	; 0xfffffe60
	for_all_tasks (i)
    116c:	6e617969 	vnmulvs.f16	s15, s2, s19	; <UNPREDICTABLE>
}
    1170:	4f2f3332 	svcmi	0x002f3332
		if (i->code == fun)
    1174:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
	for_all_tasks (i)
    1178:	502f5445 	eorpl	r5, pc, r5, asr #8
    117c:	534f4349 	movtpl	r4, #62281	; 0xf349
    1180:	6369502f 	cmnvs	r9, #47	; 0x2f
int __pi_strlen (const char *s) {
    1184:	502f534f 	eorpl	r5, pc, pc, asr #6
	for (i = 0; *(s+i) != '\0'; i++);
    1188:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
}
    118c:	6e65532f 	cdpvs	3, 6, cr5, cr5, cr15, {1}
	for (i = 0; *(s+i) != '\0'; i++);
    1190:	73726f73 	cmnvc	r2, #460	; 0x1cc
	while ((Boolean)(*d++ = *s++));
    1194:	6e69702f 	cdpvs	0, 6, cr7, cr9, cr15, {1}
    1198:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
    119c:	2e726f73 	mrccs	15, 3, r6, cr2, cr3, {3}
}
    11a0:	50470063 	subpl	r0, r7, r3, rrx
	while (n--)
    11a4:	725f4f49 	subsvc	r4, pc, #292	; 0x124
    11a8:	44646165 	strbtmi	r6, [r4], #-357	; 0xfffffe9b
		*dest++ = *src++;
    11ac:	6a006f69 	bvs	1cf58 <__exidx_end+0x1802b>
    11b0:	006b6e75 	rsbeq	r6, fp, r5, ror lr
    11b4:	5f6e6970 	svcpl	0x006e6970
		*dest++ = c;
    11b8:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
void adddevfunc (devreqfun_t rf, int loc) {
    11bc:	725f726f 	subsvc	r7, pc, #-268435450	; 0xf0000006
		syserror (EREQPAR, "addv");
    11c0:	00646165 	rsbeq	r6, r4, r5, ror #2
		syserror (ERESOURCE, "addv");
    11c4:	6d726554 	cfldr64vs	mvdx6, [r2, #-336]!	; 0xfffffeb0
	if (ioreq [loc] != NULL)
    11c8:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    11cc:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
		syserror (ERESOURCE, "addv");
    11d0:	7463615f 	strbtvc	r6, [r3], #-351	; 0xfffffea1
	ioreq [loc] = rf;
    11d4:	006e6f69 	rsbeq	r6, lr, r9, ror #30
}
    11d8:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    11dc:	7475625f 	ldrbtvc	r6, [r5], #-607	; 0xfffffda1
sint io (word retry, word dev, word operation, char *buf, word len) {
    11e0:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    11e4:	75627000 	strbvc	r7, [r2, #-0]!
    11e8:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    11ec:	63616200 	cmnvs	r1, #0, 4
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11f0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    11f4:	6f682f00 	svcvs	0x00682f00
    11f8:	632f656d 			; <UNDEFINED> instruction: 0x632f656d
		syserror (ENODEVICE, "io");
    11fc:	6c726168 	ldfvse	f6, [r2], #-416	; 0xfffffe60
    1200:	6e617969 	vnmulvs.f16	s15, s2, s19	; <UNPREDICTABLE>
	if (len == 0)
    1204:	4f2f3332 	svcmi	0x002f3332
	ret = (ioreq [dev]) (operation, buf, len);
    1208:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    120c:	502f5445 	eorpl	r5, pc, r5, asr #8
	if (ret >= 0)
    1210:	534f4349 	movtpl	r4, #62281	; 0xf349
	if (ret == -1) {
    1214:	6369502f 	cmnvs	r9, #47	; 0x2f
    1218:	502f534f 	eorpl	r5, pc, pc, asr #6
		if (retry == WNONE)
    121c:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
		iowait (dev, operation, retry);
    1220:	2f4f492f 	svccs	0x004f492f
    1224:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    1228:	2e736e6f 	cdpcs	14, 7, cr6, cr3, cr15, {3}
			release;
    122c:	65440063 	strbvs	r0, [r4, #-99]	; 0xffffff9d
	if (ret == -2) {
    1230:	6e756f62 	cdpvs	15, 7, cr6, cr5, cr2, {3}
			(ioreq [dev]) (NONE, buf, len);
    1234:	45006563 	strmi	r6, [r0, #-1379]	; 0xfffffa9d
		if (retry != WNONE) {
    1238:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
			iowait (dev, operation, retry);
    123c:	5f656500 	svcpl	0x00656500
    1240:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
			(ioreq [dev]) (NONE, buf, len);
    1244:	6172655f 	cmnvs	r2, pc, asr r5
    1248:	75006573 	strvc	r6, [r0, #-1395]	; 0xfffffa8d
    124c:	006f7470 	rsbeq	r7, pc, r0, ror r4	; <UNPREDICTABLE>
		(ioreq [dev]) (NONE, buf, len);
    1250:	5f646d63 	svcpl	0x00646d63
    1254:	65650030 	strbvs	r0, [r5, #-48]!	; 0xffffffd0
    1258:	6f6c635f 	svcvs	0x006c635f
}
    125c:	2f006573 	svccs	0x00006573
	if (retry != WNONE) {
    1260:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
		delay (-ret - 2, retry);
    1264:	6168632f 	cmnvs	r8, pc, lsr #6
    1268:	79696c72 	stmdbvc	r9!, {r1, r4, r5, r6, sl, fp, sp, lr}^
    126c:	33326e61 	teqcc	r2, #1552	; 0x610
    1270:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
		release;
    1274:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1278:	4349502f 	movtmi	r5, #36911	; 0x902f
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    127c:	502f534f 	eorpl	r5, pc, pc, asr #6
    1280:	534f6369 	movtpl	r6, #62313	; 0xf369
    1284:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    1288:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    128c:	61726f74 	cmnvs	r2, r4, ror pc
		syserror (ERESOURCE, "mal1");
    1290:	732f6567 			; <UNDEFINED> instruction: 0x732f6567
    1294:	61726f74 	cmnvs	r2, r4, ror pc
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1298:	6d5f6567 	cfldr64vs	mvdx6, [pc, #-412]	; 1104 <__pi_join>
    129c:	72353278 	eorsvc	r3, r5, #120, 4	; 0x80000007
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12a0:	35333038 	ldrcc	r3, [r3, #-56]!	; 0xffffffc8
	m_size (mpools [0]) = mlen - m_hdrlen;
    12a4:	6500632e 	strvs	r6, [r0, #-814]	; 0xfffffcd2
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12a8:	72655f65 	rsbvc	r5, r5, #404	; 0x194
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12ac:	00657361 	rsbeq	r7, r5, r1, ror #6
    12b0:	775f6565 	ldrbvc	r6, [pc, -r5, ror #10]
}
    12b4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    12b8:	706f6400 	rsbvc	r6, pc, r0, lsl #8
    12bc:	65006e65 	strvs	r6, [r0, #-3685]	; 0xfffff19b
    12c0:	706f5f65 	rsbvc	r5, pc, r5, ror #30
    12c4:	57006e65 	strpl	r6, [r0, -r5, ror #28]
    12c8:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
void __pi_free (aword *ch) {
    12cc:	646d6300 	strbtvs	r6, [sp], #-768	; 0xfffffd00
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12d0:	6c00335f 	stcvs	3, cr3, [r0], {95}	; 0x5f
    12d4:	00747361 	rsbseq	r7, r4, r1, ror #6
		syserror (EMALLOC, "malg");
    12d8:	705f6565 	subsvc	r6, pc, r5, ror #10
    12dc:	63696e61 	cmnvs	r9, #1552	; 0x610
	mcfree [MA_NP] += m_size (ch);
    12e0:	5f656500 	svcpl	0x00656500
		m_size (ch) ^= MALLOC_UMASK;
    12e4:	636e7973 	cmnvs	lr, #1884160	; 0x1cc000
    12e8:	6f726600 	svcvs	0x00726600
	mcfree [MA_NP] += m_size (ch);
    12ec:	6565006d 	strbvs	r0, [r5, #-109]!	; 0xffffff93
	QFREE;
    12f0:	6165725f 	cmnvs	r5, pc, asr r2
	if (mevent [MA_NP] . nwait) {
    12f4:	64720064 	ldrbtvs	r0, [r2], #-100	; 0xffffff9c
    12f8:	63007273 	movwvs	r7, #627	; 0x273
		trigger ((aword)(&(mevent [MA_NP])));
    12fc:	736f6c63 	cmnvc	pc, #25344	; 0x6300
		mevent [MA_NP] . nwait --;
    1300:	73640065 	cmnvc	r4, #101	; 0x65
}
    1304:	00746174 	rsbseq	r6, r4, r4, ror r1
    1308:	65706f63 	ldrbvs	r6, [r0, #-3939]!	; 0xfffff09d
    130c:	7063006e 	rsbvc	r0, r3, lr, rrx
    1310:	67007274 	smlsdxvs	r0, r4, r2, r7
void kill (aword pid) {
    1314:	625f7465 	subsvs	r7, pc, #1694498816	; 0x65000000
		pid = (aword) __pi_curr;
    1318:	00657479 	rsbeq	r7, r5, r9, ror r4
	j = NULL;
    131c:	735f6565 	cmpvc	pc, #423624704	; 0x19400000
	for_all_tasks (i) {
    1320:	00657a69 	rsbeq	r7, r5, r9, ror #20
	syserror (EREQPAR, "kpi");
    1324:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1328:	44450079 	strbmi	r0, [r5], #-121	; 0xffffff87
		if ((aword)i == pid) {
    132c:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    1330:	776f6470 			; <UNDEFINED> instruction: 0x776f6470
				__PCB = i->Next;
    1334:	7777006e 	ldrbvc	r0, [r7, -lr, rrx]!
			killev (i);
    1338:	00746961 	rsbseq	r6, r4, r1, ror #18
			ufree (i);
    133c:	5f747570 	svcpl	0x00747570
			if (i == __pi_curr)
    1340:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    1344:	72657300 	rsbvc	r7, r5, #0, 6
				release;
    1348:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
				j->Next = i->Next;
    134c:	682f0066 	stmdavs	pc!, {r1, r2, r5, r6}	; <UNPREDICTABLE>
    1350:	2f656d6f 	svccs	0x00656d6f
				__PCB = i->Next;
    1354:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
}
    1358:	6179696c 	cmnvs	r9, ip, ror #18
    135c:	2f33326e 	svccs	0x0033326e
    1360:	4f534c4f 	svcmi	0x00534c4f
	if (size < 8)
    1364:	2f54454e 	svccs	0x0054454e
		_size = 2;
    1368:	4f434950 	svcmi	0x00434950
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    136c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
		_size = (((aword)size) + 3) >> 2;
    1370:	2f534f63 	svccs	0x00534f63
		if (m_magic (chunk) != MALLOC_MAGIC)
    1374:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
		_size = (((aword)size) + 3) >> 2;
    1378:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
		if (mevent [MA_NP] . nfail != 255)
    137c:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    1380:	7265732f 	rsbvc	r7, r5, #-1140850688	; 0xbc000000
			mevent [MA_NP] . nfail ++;
    1384:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
		mnfree [MA_NP] = 0;
    1388:	00632e66 	rsbeq	r2, r3, r6, ror #28
    138c:	5f726573 	svcpl	0x00726573
		if (m_magic (chunk) != MALLOC_MAGIC)
    1390:	00666e69 	rsbeq	r6, r6, r9, ror #28
    1394:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 12e0 <__pi_free+0x14>
			syserror (EMALLOC, "malc");
    1398:	68632f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    139c:	696c7261 	stmdbvs	ip!, {r0, r5, r6, r9, ip, sp, lr}^
		if (m_size (chunk) >= _size)
    13a0:	326e6179 	rsbcc	r6, lr, #1073741854	; 0x4000001e
    13a4:	4c4f2f33 	mcrrmi	15, 3, r2, pc, cr3
		chunk = m_nextp (chunk)) {
    13a8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
		m_setnextp (cc, m_nextp (chunk));
    13ac:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    13b0:	2f534f43 	svccs	0x00534f43
    13b4:	4f636950 	svcmi	0x00636950
			m_size (chunk) = _size;
    13b8:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
			cc = chunk + _size + m_hdrlen;
    13bc:	2f736269 	svccs	0x00736269
    13c0:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
			m_size (cc) = waste - m_hdrlen;
    13c4:	732f6c61 			; <UNDEFINED> instruction: 0x732f6c61
			QFREE;
    13c8:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
		mevent [MA_NP] . nfail = 0;
    13cc:	632e666e 			; <UNDEFINED> instruction: 0x632e666e
		mcfree [MA_NP] -= m_size (chunk);
    13d0:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    13d4:	696c706e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, ip, sp, lr}^
    13d8:	7300656e 	movwvc	r6, #1390	; 0x56e
    13dc:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
		m_size (chunk) |= MALLOC_UMASK;
    13e0:	682f006e 	stmdavs	pc!, {r1, r2, r3, r5, r6}	; <UNPREDICTABLE>
		if (mnfree [MA_NP] > mcfree [MA_NP])
    13e4:	2f656d6f 	svccs	0x00656d6f
		m_size (chunk) |= MALLOC_UMASK;
    13e8:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
			mnfree [MA_NP] = mcfree [MA_NP];
    13ec:	6179696c 	cmnvs	r9, ip, ror #18
}
    13f0:	2f33326e 	svccs	0x0033326e
    13f4:	4f534c4f 	svcmi	0x00534c4f
    13f8:	2f54454e 	svccs	0x0054454e
    13fc:	4f434950 	svcmi	0x00434950
    1400:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1404:	2f534f63 	svccs	0x00534f63
    1408:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
aword __pi_fork (fsmcode func, aword data) {
    140c:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1410:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    1414:	7265732f 	rsbvc	r7, r5, #-1140850688	; 0xbc000000
    1418:	2e6e695f 			; <UNDEFINED> instruction: 0x2e6e695f
		if ((j = __PCB) == NULL)
    141c:	73690063 	cmnvc	r9, #99	; 0x63
	i->Next = NULL;
    1420:	5f657573 	svcpl	0x00657573
	i->data = data;
    1424:	00646d63 	rsbeq	r6, r4, r3, ror #26
		if ((j = __PCB) == NULL)
    1428:	75646f6d 	strbvc	r6, [r4, #-3949]!	; 0xfffff093
}
    142c:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
			for (; j->Next != NULL; j = j->Next);
    1430:	63006e6f 	movwvs	r6, #3695	; 0xe6f
    1434:	616d6d6f 	cmnvs	sp, pc, ror #26
	return (aword) i;
    1438:	6f4e646e 	svcvs	0x004e646e
    143c:	70416200 	subvc	r6, r1, r0, lsl #4
	if (mevent [MA_NP] . nwait != 255)
    1440:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
    1444:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1448:	72007375 	andvc	r7, r0, #-738197503	; 0xd4000001
		mevent [MA_NP] . nwait ++;
    144c:	6e6f5f66 	cdpvs	15, 6, cr5, cr15, cr6, {3}
	wait ((aword)(&(mevent [MA_NP])), state);
    1450:	61566200 	cmpvs	r6, r0, lsl #4
    1454:	6e654c72 	mcrvs	12, 3, r4, cr5, cr2, {3}
void diag (const char *mess, ...) {
    1458:	6b507000 	blvs	141d460 <__ccfg+0x13fd4b8>
    145c:	65630074 	strbvs	r0, [r3, #-116]!	; 0xffffff8c
    1460:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
	diag_disable_int (a, is);
    1464:	71657246 	cmnvc	r5, r6, asr #4
    1468:	69687700 	stmdbvs	r8!, {r8, r9, sl, ip, sp, lr}^
    146c:	4d6e6574 	cfstr64mi	mvdx6, [lr, #-464]!	; 0xfffffe30
					d /= 10;
    1470:	0065646f 	rsbeq	r6, r5, pc, ror #8
	diag_disable_int (a, is);
    1474:	5f636672 	svcpl	0x00636672
				d = (bc == 16) ? 10000 : 1000000000;
    1478:	5f444d43 	svcpl	0x00444d43
	while (*mess != '\0') {
    147c:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
	dgout ('\r');
    1480:	5f53435f 	svcpl	0x0053435f
	dgout ('\n');
    1484:	61700073 	cmnvs	r0, r3, ror r0
    1488:	72547473 	subsvc	r7, r4, #1929379840	; 0x73000000
    148c:	72006769 	andvc	r6, r0, #27525120	; 0x1a40000
	diag_wait (a);
    1490:	69725466 	ldmdbvs	r2!, {r1, r2, r5, r6, sl, ip, lr}^
	diag_enable_int (a, is);
    1494:	00745f6d 	rsbseq	r5, r4, sp, ror #30
    1498:	78654e70 	stmdavc	r5!, {r4, r5, r6, r9, sl, fp, lr}^
    149c:	746e4574 	strbtvc	r4, [lr], #-1396	; 0xfffffa8c
}
    14a0:	72007972 	andvc	r7, r0, #1867776	; 0x1c8000
    14a4:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    14a8:	5244006c 	subpl	r0, r4, #108	; 0x6c
			mess++;
    14ac:	4f4f4c5f 	svcmi	0x004f4c5f
		if (*mess == '%') {
    14b0:	005f5f50 	subseq	r5, pc, r0, asr pc	; <UNPREDICTABLE>
			if (*mess == 'l') {
    14b4:	74754f70 	ldrbtvc	r4, [r5], #-3952	; 0xfffff090
				mess++;
    14b8:	00747570 	rsbseq	r7, r4, r0, ror r5
    14bc:	70655262 	rsbvc	r5, r5, r2, ror #4
				bc = 32;
    14c0:	4f746165 	svcmi	0x00746165
				val = va_arg (ap, lword);
    14c4:	526e006b 	rsbpl	r0, lr, #107	; 0x6b
				bc = 16;
    14c8:	6e674978 			; <UNDEFINED> instruction: 0x6e674978
			switch (*mess) {
    14cc:	6465726f 	strbtvs	r7, [r5], #-623	; 0xfffffd91
    14d0:	63656600 	cmnvs	r5, #0, 12
    14d4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    14d8:	78526e00 	ldmdavc	r2, {r9, sl, fp, sp, lr}^
				dgout ('%');
    14dc:	006b6f4e 	rsbeq	r6, fp, lr, asr #30
    14e0:	6466666f 	strbtvs	r6, [r6], #-1647	; 0xfffff991
				dgout (*mess);
    14e4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    14e8:	65726600 	ldrbvs	r6, [r2, #-1536]!	; 0xfffffa00
			switch (*mess) {
    14ec:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
					v = __pi_hex_enc_table [
    14f0:	70007963 	andvc	r7, r0, r3, ror #18
					i += 4;
    14f4:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
					(val >> (bc - i)) & 0xf];
    14f8:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    14fc:	63667200 	cmnvs	r6, #0, 4
					dgout (v);
    1500:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    1504:	746e4561 	strbtvc	r4, [lr], #-1377	; 0xfffffa9f
				while (i < bc) {
    1508:	65477972 	strbvs	r7, [r7, #-2418]	; 0xfffff68e
			mess++;
    150c:	6172656e 	cmnvs	r2, lr, ror #10
					d /= 10;
    1510:	00745f6c 	rsbseq	r5, r4, ip, ror #30
				if ((val >> (bc - 1)) & 1) {
    1514:	72754370 	rsbsvc	r4, r5, #112, 6	; 0xc0000001
    1518:	746e4572 	strbtvc	r4, [lr], #-1394	; 0xfffffa8e
					dgout ('-');
    151c:	74007972 	strvc	r7, [r0], #-2418	; 0xfffff68e
    1520:	53656d69 	cmnpl	r5, #6720	; 0x1a40
						val |= 0xffff0000;
    1524:	706d6174 	rsbvc	r6, sp, r4, ror r1
    1528:	71726900 	cmnvc	r2, r0, lsl #18
    152c:	76746e49 	ldrbtvc	r6, [r4], -r9, asr #28
				d = (bc == 16) ? 10000 : 1000000000;
    1530:	69617700 	stmdbvs	r1!, {r8, r9, sl, ip, sp, lr}^
    1534:	6d635f74 	stclvs	15, cr5, [r3, #-464]!	; 0xfffffe30
    1538:	4c700064 	ldclmi	0, cr0, [r0], #-400	; 0xfffffe70
					v = (word) (val / d);
    153c:	45747361 	ldrbmi	r7, [r4, #-865]!	; 0xfffffc9f
					if (v || d == 1) break;
    1540:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    1544:	726f6600 	rsbvc	r6, pc, #0, 12
					d /= 10;
    1548:	4374616d 	cmnmi	r4, #1073741851	; 0x4000001b
				d = (bc == 16) ? 10000 : 1000000000;
    154c:	00666e6f 	rsbeq	r6, r6, pc, ror #28
					dgout (v + '0');
    1550:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    1554:	6d695474 	cfstrdvs	mvd5, [r9, #-464]!	; 0xfffffe30
    1558:	46520065 	ldrbmi	r0, [r2], -r5, rrx
					d /= 10;
    155c:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
					val = val - (v * d);
    1560:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
					if (d == 0) break;
    1564:	69646152 	stmdbvs	r4!, {r1, r4, r6, r8, sp, lr}^
					v = (word) (val / d);
    1568:	7669446f 	strbtvc	r4, [r9], -pc, ror #8
    156c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
				if (bc == 16)
    1570:	65710070 	ldrbvs	r0, [r1, #-112]!	; 0xffffff90
					val &= 0xffff;
    1574:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
				d = (bc == 16) ? 10000 : 1000000000;
    1578:	6b636200 	blvs	18d9d80 <__ccfg+0x18b9dd8>
					dgout (*s);
    157c:	69745f66 	ldmdbvs	r4!, {r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
					s++;
    1580:	0072656d 	rsbseq	r6, r2, sp, ror #10
				while (*s != '\0') {
    1584:	43746b70 	cmnmi	r4, #112, 22	; 0x1c000
    1588:	00666e6f 	rsbeq	r6, r6, pc, ror #28
			dgout (*mess++);
    158c:	616e4562 	cmnvs	lr, r2, ror #10
    1590:	69737352 	ldmdbvs	r3!, {r1, r4, r6, r8, r9, ip, sp, lr}^
    1594:	74737400 	ldrbtvc	r7, [r3], #-1024	; 0xfffffc00
    1598:	63007461 	movwvs	r7, #1121	; 0x461
	__pi_seed = __pi_seed * 1103515245 + 12345;
    159c:	35333163 	ldrcc	r3, [r3, #-355]!	; 0xfffffe9d
    15a0:	72645f30 	rsbvc	r5, r4, #48, 30	; 0xc0
    15a4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    15a8:	63667200 	cmnvs	r6, #0, 4
	^ entropy
    15ac:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
}
    15b0:	5f53465f 	svcpl	0x0053465f
    15b4:	66720073 			; <UNDEFINED> instruction: 0x66720073
    15b8:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    15bc:	53465f44 	movtpl	r5, #28484	; 0x6f44
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    15c0:	7200745f 	andvc	r7, r0, #1593835520	; 0x5f000000
    15c4:	00774278 	rsbseq	r4, r7, r8, ror r2
    15c8:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
	sysassert (p->attributes.b.queued == 0, "tcv01");
    15cc:	6e654779 	mcrvs	7, 3, r4, cr5, cr9, {3}
    15d0:	506b7366 	rsbpl	r7, fp, r6, ror #6
	if (q_empty (q))
    15d4:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    15d8:	61686300 	cmnvs	r8, r0, lsl #6
		trigger (q);
    15dc:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
	if (p->attributes.b.urgent) {
    15e0:	6e797300 	cdpvs	3, 7, cr7, cr9, cr0, {0}
		p->u.bqueue.next = q->next;
    15e4:	6f436874 	svcvs	0x00436874
		p->u.bqueue.prev = q;
    15e8:	6200666e 	andvs	r6, r0, #115343360	; 0x6e00000
		q->next->prev = (qitem_t*) p;
    15ec:	6f747541 	svcvs	0x00747541
	p->attributes.b.queued = 1;
    15f0:	73756c46 	cmnvc	r5, #17920	; 0x4600
    15f4:	63724368 	cmnvs	r2, #104, 6	; 0xa0000001
}
    15f8:	00727245 	rsbseq	r7, r2, r5, asr #4
		p->u.bqueue.prev = q->prev;
    15fc:	61746172 	cmnvs	r4, r2, ror r1
		q->prev->next = (qitem_t*) p;
    1600:	00656c62 	rsbeq	r6, r5, r2, ror #24
		q->prev = (qitem_t*) p;
    1604:	4d785462 	cfldrdmi	mvd5, [r8, #-392]!	; 0xfffffe78
    1608:	0065646f 	rsbeq	r6, r5, pc, ror #8
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    160c:	6c616e61 	stclvs	14, cr6, [r1], #-388	; 0xfffffe7c
	word cs = size + hblenb;
    1610:	6643676f 	strbvs	r6, [r3], -pc, ror #14
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1614:	646f4d67 	strbtvs	r4, [pc], #-3431	; 161c <apb+0x10>
    1618:	45620065 	strbmi	r0, [r2, #-101]!	; 0xffffff9b
	p -> length = size;
    161c:	6d43616e 	stfvse	f6, [r3, #-440]	; 0xfffffe48
}
    1620:	756e0064 	strbvc	r0, [lr, #-100]!	; 0xffffff9c
	if (p->attributes.b.queued) {
    1624:	726f436d 	rsbvc	r4, pc, #-1275068415	; 0xb4000001
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1628:	766e4972 			; <UNDEFINED> instruction: 0x766e4972
    162c:	72497000 	subvc	r7, r9, #0
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1630:	74615071 	strbtvc	r5, [r1], #-113	; 0xffffff8f
		p->attributes.b.queued = 0;
    1634:	52006863 	andpl	r6, r0, #6488064	; 0x630000
    1638:	70434346 	subvc	r4, r3, r6, asr #6
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    163c:	746e4965 	strbtvc	r4, [lr], #-2405	; 0xfffff69b
	deq (p);	// Remove from queue
    1640:	61736944 	cmnvs	r3, r4, asr #18
}
    1644:	00656c62 	rsbeq	r6, r5, r2, ror #24
	tfree ((address)p);
    1648:	6f437363 	svcvs	0x00437363
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    164c:	6300666e 	movwvs	r6, #1646	; 0x66e
    1650:	4372726f 	cmnmi	r2, #-268435450	; 0xf0000006
	deq (p);	// Soft dequeue, timer and hook left intact
    1654:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
	switch (dv) {
    1658:	61720067 	cmnvs	r2, r7, rrx
    165c:	62003074 	andvs	r3, r0, #116	; 0x74
    1660:	4d736169 	ldfmie	f6, [r3, #-420]!	; 0xfffffe5c
			p->attributes.b.urgent = 1;
    1664:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1668:	43434652 	movtmi	r4, #13906	; 0x3652
			verify_ses (p, "dispose ses");
    166c:	49306570 	ldmdbmi	r0!, {r4, r5, r6, r8, sl, sp, lr}
    1670:	6e45746e 	cdpvs	4, 4, cr7, cr5, cr14, {3}
    1674:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1678:	6e496200 	cdpvs	2, 4, cr6, cr9, cr0, {0}
    167c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
			verify_phy (p, "dispose phy");
    1680:	63724365 	cmnvs	r2, #-1811939327	; 0x94000001
    1684:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
}
    1688:	49676966 	stmdbmi	r7!, {r1, r2, r5, r6, r8, fp, sp, lr}^
			enq (oqueues [p->attributes.b.phys], p);
    168c:	63644166 	cmnvs	r4, #-2147483623	; 0x80000019
			p->attributes.b.urgent = 1;
    1690:	5f667200 	svcpl	0x00667200
    1694:	63746170 	cmnvs	r4, #112, 2
			verify_phy (p, "dispose phy");
    1698:	70635f68 	rsbvc	r5, r3, r8, ror #30
    169c:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
    16a0:	6b73666e 	blvs	1cdb060 <__ccfg+0x1cbb0b8>
    16a4:	646e6500 	strbtvs	r6, [lr], #-1280	; 0xfffffb00
    16a8:	67697254 			; <UNDEFINED> instruction: 0x67697254
    16ac:	00726567 	rsbseq	r6, r2, r7, ror #10
			enq (oqueues [p->attributes.b.phys], p);
    16b0:	5f636672 	svcpl	0x00636672
    16b4:	5f444d43 	svcpl	0x00444d43
}
    16b8:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
			rlp (p);
    16bc:	5f53435f 	svcpl	0x0053435f
}
    16c0:	72660074 	rsbvc	r0, r6, #116	; 0x74
    16c4:	45746e6f 	ldrbmi	r6, [r4, #-3695]!	; 0xfffff191
    16c8:	6f4d646e 	svcvs	0x004d646e
    16cc:	74006564 	strvc	r6, [r0], #-1380	; 0xfffffa9c
    16d0:	67676972 			; <UNDEFINED> instruction: 0x67676972
    16d4:	6f4e7265 	svcvs	0x004e7265
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    16d8:	75517000 	ldrbvc	r7, [r1, #-0]
	if (b->attributes.b.outgoing) {
    16dc:	00657565 	rsbeq	r7, r5, r5, ror #10
	b = header (p);
    16e0:	54646e65 	strbtpl	r6, [r4], #-3685	; 0xfffff19b
	if (b->attributes.b.outgoing) {
    16e4:	00657079 	rsbeq	r7, r5, r9, ror r0
		verify_ses (b, "tcv02");
    16e8:	5f646d63 	svcpl	0x00646d63
    16ec:	72007363 	andvc	r7, r0, #-1946157055	; 0x8c000001
    16f0:	54697373 	strbtpl	r7, [r9], #-883	; 0xfffffc8d
    16f4:	6e007268 	cdpvs	2, 0, cr7, cr0, cr8, {3}
    16f8:	69427753 	stmdbvs	r2, {r0, r1, r4, r6, r8, r9, sl, ip, sp, lr}^
		verify_plg (b, tcv_out, "tcv03");
    16fc:	6e007374 	mcrvs	3, 0, r7, cr0, cr4, {3}
    1700:	6f436d75 	svcvs	0x00436d75
    1704:	75427272 	strbvc	r7, [r2, #-626]	; 0xfffffd8e
    1708:	73007973 	movwvc	r7, #2419	; 0x973
    170c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1710:	56520073 			; <UNDEFINED> instruction: 0x56520073
    1714:	62006c61 	andvs	r6, r0, #24832	; 0x6100
    1718:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    171c:	48656475 	stmdami	r5!, {r0, r2, r4, r5, r6, sl, sp, lr}^
		dispose (b, plugins [b->attributes.b.plugin] ->
    1720:	6c007264 	sfmvs	f7, 4, [r0], {100}	; 0x64
}
    1724:	52747361 	rsbspl	r7, r4, #-2080374783	; 0x84000001
		dispose (b, plugins [b->attributes.b.plugin] ->
    1728:	00697373 	rsbeq	r7, r9, r3, ror r3
		rlp (b);
    172c:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
}
    1730:	66526769 	ldrbvs	r6, [r2], -r9, ror #14
		rlp (b);
    1734:	6e6f7246 	cdpvs	2, 6, cr7, cr15, cr6, {2}
    1738:	646e6574 	strbtvs	r6, [lr], #-1396	; 0xfffffa8c
    173c:	646f6d00 	strbtvs	r6, [pc], #-3328	; 1744 <tcv_endp+0x6c>
    1740:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1744:	65525200 	ldrbvs	r5, [r2, #-512]	; 0xfffffe00
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1748:	526e0074 	rsbpl	r0, lr, #116	; 0x74
    174c:	66754278 			; <UNDEFINED> instruction: 0x66754278
    1750:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	; 0xfffffee8
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1754:	5f787200 	svcpl	0x00787200
	va_start (ap, plid);
    1758:	75006361 	strvc	r6, [r0, #-865]	; 0xfffffc9f
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    175c:	4d323369 	ldcmi	3, cr3, [r2, #-420]!	; 0xfffffe5c
    1760:	006b7361 	rsbeq	r7, fp, r1, ror #6
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1764:	6e457363 	cdpvs	3, 4, cr7, cr5, cr3, {3}
    1768:	69725464 	ldmdbvs	r2!, {r2, r5, r6, sl, ip, lr}^
    176c:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    1770:	69426200 	stmdbvs	r2, {r9, sp, lr}^
			syserror (ENODEVICE, "tcv04");
    1774:	76655274 			; <UNDEFINED> instruction: 0x76655274
		syserror (EMALLOC, "tcv05");
    1778:	61737265 	cmnvs	r3, r5, ror #4
	attp.b.outgoing = 1;
    177c:	4162006c 	cmnmi	r2, ip, rrx
    1780:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
    1784:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
    1788:	61747365 	cmnvs	r4, r5, ror #6
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    178c:	7300706d 	movwvc	r7, #109	; 0x6d
		if (descriptors [fd] == NULL)
    1790:	6f626d79 	svcvs	0x00626d79
    1794:	7461526c 	strbtvc	r5, [r1], #-620	; 0xfffffd94
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1798:	616d0065 	cmnvs	sp, r5, rrx
		return ERROR;
    179c:	746b5078 	strbtvc	r5, [fp], #-120	; 0xffffff88
}
    17a0:	006e654c 	rsbeq	r6, lr, ip, asr #10
    17a4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    17a8:	7562725f 	strbvc	r7, [r2, #-607]!	; 0xfffffda1
	s->attpattern.b.session = fd;
    17ac:	00736666 	rsbseq	r6, r3, r6, ror #12
    17b0:	78654e70 	stmdavc	r5!, {r4, r5, r6, r9, sl, fp, lr}^
	descriptors [fd] = s;
    17b4:	00704f74 	rsbseq	r4, r0, r4, ror pc
	q_init (&(s->rqueue));
    17b8:	46746e69 	ldrbtmi	r6, [r4], -r9, ror #28
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    17bc:	00716572 	rsbseq	r6, r1, r2, ror r5
    17c0:	74754162 	ldrbtvc	r4, [r5], #-354	; 0xfffffe9e
    17c4:	756c466f 	strbvc	r4, [ip, #-1647]!	; 0xfffff991
    17c8:	67496873 	smlsldxvs	r6, r9, r3, r8
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    17cc:	65726f6e 	ldrbvs	r6, [r2, #-3950]!	; 0xfffff092
    17d0:	74730064 	ldrbtvc	r0, [r3], #-100	; 0xffffff9c
    17d4:	54747261 	ldrbtpl	r7, [r4], #-609	; 0xfffffd9f
	descriptors [fd] = s;
    17d8:	67676972 			; <UNDEFINED> instruction: 0x67676972
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    17dc:	70007265 	andvc	r7, r0, r5, ror #4
    17e0:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
	if (s == NULL)
    17e4:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
		syserror (EMALLOC, "tcv05");
    17e8:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
    17ec:	006b7366 	rsbeq	r7, fp, r6, ror #6
    17f0:	6f5f6672 	svcvs	0x005f6672
    17f4:	62006666 	andvs	r6, r0, #106954752	; 0x6600000
    17f8:	43616e45 	cmnmi	r1, #1104	; 0x450
    17fc:	0072726f 	rsbseq	r7, r2, pc, ror #4
    1800:	4f734662 	svcmi	0x00734662
    1804:	64496666 	strbvs	r6, [r9], #-1638	; 0xfffff99a
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1808:	5200656c 	andpl	r6, r0, #108, 10	; 0x1b000000
	    (plugins [ord] != NULL && plugins [ord] != pl))
    180c:	6d635f46 	stclvs	15, cr5, [r3, #-280]!	; 0xfffffee8
    1810:	00734664 	rsbseq	r4, r3, r4, ror #12
    1814:	61657270 	smcvs	22304	; 0x5720
	plugins [ord] = pl;
    1818:	6e6f436d 	cdpvs	3, 6, cr4, cr15, cr13, {3}
	return 0;
    181c:	79730066 	ldmdbvc	r3!, {r1, r2, r5, r6}^
		return ERROR;
    1820:	6f57636e 	svcvs	0x0057636e
}
    1824:	6f006472 	svcvs	0x00006472
    1828:	6f697470 	svcvs	0x00697470
	verify_fds (fd, "tcv10");
    182c:	6170006e 	cmnvs	r0, lr, rrx
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    1830:	47686374 			; <UNDEFINED> instruction: 0x47686374
	verify_fds (fd, "tcv10");
    1834:	73666e65 	cmnvc	r6, #1616	; 0x650
    1838:	6566526b 	strbvs	r5, [r6, #-619]!	; 0xfffffd95
    183c:	726f6300 	rsbvc	r6, pc, #0, 6
	verify_plg (b, tcv_frm, "tcv11");
    1840:	72655072 	rsbvc	r5, r5, #114	; 0x72
	b = q_first (rq);
    1844:	00646f69 	rsbeq	r6, r4, r9, ror #30
	if (q_end (b, rq)) {
    1848:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
		if (state != WNONE) {
    184c:	52007472 	andpl	r7, r0, #1912602624	; 0x72000000
    1850:	70434346 	subvc	r4, r3, r6, asr #6
			when (rq, state);
    1854:	746e4965 	strbtvc	r4, [lr], #-2405	; 0xfffff69b
			release;
    1858:	61656c43 	cmnvs	r5, r3, asr #24
	deq (b);	// Dequeue the packet ...
    185c:	6e650072 	mcrvs	0, 3, r0, cr5, cr2, {3}
    1860:	47726574 			; <UNDEFINED> instruction: 0x47726574
	p = ((address)(b + 1));
    1864:	73666e65 	cmnvc	r6, #1616	; 0x650
	verify_plg (b, tcv_frm, "tcv11");
    1868:	6570436b 	ldrbvs	r4, [r0, #-875]!	; 0xfffffc95
    186c:	63746150 	cmnvs	r4, #80, 2
    1870:	6c700068 	ldclvs	0, cr0, [r0], #-416	; 0xfffffe60
    1874:	68636775 	stmdavs	r3!, {r0, r2, r4, r5, r6, r8, r9, sl, sp, lr}^
    1878:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    187c:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xfffff09b
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    1880:	00736552 	rsbseq	r6, r3, r2, asr r5
    1884:	63617266 	cmnvs	r1, #1610612742	; 0x60000006
		b->length - b->u.pointers.head - b->u.pointers.tail;
    1888:	65724674 	ldrbvs	r4, [r2, #-1652]!	; 0xfffff98c
    188c:	72700071 	rsbsvc	r0, r0, #113	; 0x71
	b->u.pointers.tail =
    1890:	61635365 	cmnvs	r3, r5, ror #6
}
    1894:	6200656c 	andvs	r6, r0, #108, 10	; 0x1b000000
		return NULL;
    1898:	4f797375 	svcmi	0x00797375
    189c:	6f6c0070 	svcvs	0x006c0070
    18a0:	69766944 	ldmdbvs	r6!, {r2, r6, r8, fp, sp, lr}^
    18a4:	00726564 	rsbseq	r6, r2, r4, ror #10
    18a8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
	verify_fds (fd, "tcv16");
    18ac:	72006469 	andvc	r6, r0, #1761607680	; 0x69000000
								Boolean urg) {
    18b0:	6e6f4378 	mcrvs	3, 3, r4, cr15, cr8, {3}
    18b4:	4e620066 	cdpmi	0, 6, cr0, cr2, cr6, {3}
	verify_fds (fd, "tcv16");
    18b8:	5073466f 	rsbspl	r4, r3, pc, ror #12
    18bc:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    18c0:	4f007055 	svcmi	0x00007055
	verify_pld (s, tcv_frm, "tcv17");
    18c4:	6e764552 	mrcvs	5, 3, r4, cr6, cr2, {2}
    18c8:	46620074 			; <UNDEFINED> instruction: 0x46620074
    18cc:	66664f73 	uqsub16vs	r4, r6, r3
    18d0:	79737542 	ldmdbvc	r3!, {r1, r6, r8, sl, ip, sp, lr}^
    18d4:	61727600 	cmnvs	r2, r0, lsl #12
    18d8:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
    18dc:	69727478 	ldmdbvs	r2!, {r3, r4, r5, r6, sl, ip, sp, lr}^
    18e0:	62007365 	andvs	r7, r0, #-1811939327	; 0x94000001
	ptrs.head = (word) fd;
    18e4:	4662734d 	strbtmi	r7, [r2], -sp, asr #6
	ptrs.tail = (word) urg;
    18e8:	74737269 	ldrbtvc	r7, [r3], #-617	; 0xfffffd97
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    18ec:	5f787200 	svcpl	0x00787200
    18f0:	72006564 	andvc	r6, r0, #100, 10	; 0x19000000
		if (state != WNONE) {
    18f4:	6e695f78 	mcrvs	15, 3, r5, cr9, cr8, {3}
    18f8:	6e655f74 	mcrvs	15, 3, r5, cr5, cr4, {3}
}
    18fc:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
			when (eid, state);
    1900:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
    1904:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
			release;
    1908:	64610030 	strbtvs	r0, [r1], #-48	; 0xffffffd0
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    190c:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    1910:	72003173 	andvc	r3, r0, #-1073741796	; 0xc000001c
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    1914:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    1918:	505f444d 	subspl	r4, pc, sp, asr #8
    191c:	5f504f52 	svcpl	0x00504f52
    1920:	49444152 	stmdbmi	r4, {r1, r4, r6, r8, lr}^
    1924:	49445f4f 	stmdbmi	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1928:	45535f56 	ldrbmi	r5, [r3, #-3926]	; 0xfffff0aa
		if (state != WNONE) {
    192c:	5f505554 	svcpl	0x00505554
    1930:	66720073 			; <UNDEFINED> instruction: 0x66720073
			tmwait (state);
    1934:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    1938:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
	b->attributes = s->attpattern;
    193c:	525f504f 	subspl	r5, pc, #79	; 0x4f
		b->attributes.b.urgent = 1;
    1940:	4f494441 	svcmi	0x00494441
    1944:	5649445f 			; <UNDEFINED> instruction: 0x5649445f
	b->u.pointers.head = ptrs.head;
    1948:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
	b->u.pointers.tail = length;
    194c:	745f5055 	ldrbvc	r5, [pc], #-85	; 1954 <tcv_wnps+0xa8>
	return (address) (b + 1);
    1950:	63667200 	cmnvs	r6, #0, 4
    1954:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
    1958:	4f52505f 	svcmi	0x0052505f
    195c:	58525f50 	ldmdapl	r2, {r4, r6, r8, r9, sl, fp, ip, lr}^
    1960:	7200735f 	andvc	r7, r0, #2080374785	; 0x7c000001
    1964:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1968:	505f444d 	subspl	r4, pc, sp, asr #8
    196c:	5f504f52 	svcpl	0x00504f52
    1970:	745f5852 	ldrbvc	r5, [pc], #-2130	; 1978 <tcvp_control+0x10>
	verify_fph (phy, "tcv23");
    1974:	74617000 	strbtvc	r7, [r1], #-0
    1978:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    197c:	78526e00 	ldmdavc	r2, {r9, sl, fp, sp, lr}^
    1980:	706f7453 	rsbvc	r7, pc, r3, asr r4	; <UNPREDICTABLE>
}
    1984:	00646570 	rsbeq	r6, r4, r0, ror r5
	return (physical [phy]) (opt, arg);
    1988:	526d756e 	rsbpl	r7, sp, #461373440	; 0x1b800000
    198c:	49697373 	stmdbmi	r9!, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}^
    1990:	00656c64 	rsbeq	r6, r5, r4, ror #24
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    1994:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
	if (opt < 0) {
    1998:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xfffff0a9
		if (fd < 0)
    199c:	73787200 	cmnvc	r8, #0, 4
		if (opt == PHYSOPT_PLUGINFO) {
    19a0:	00746174 	rsbseq	r6, r4, r4, ror r1
			if (fd >= TCV_MAX_PLUGS)
    19a4:	67655270 			; <UNDEFINED> instruction: 0x67655270
			if ((p = plugins [fd]) == NULL)
    19a8:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
    19ac:	65646972 	strbvs	r6, [r4, #-2418]!	; 0xfffff68e
}
    19b0:	74617200 	strbtvc	r7, [r1], #-512	; 0xfffffe00
		if (fd >= TCV_MAX_PHYS)
    19b4:	745f726d 	ldrbvc	r7, [pc], #-621	; 19bc <tcv_control+0x28>
		return physinfo [fd];
    19b8:	70416200 	subvc	r6, r1, r0, lsl #4
    19bc:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
	verify_fds (fd, "tcv22");
    19c0:	69737352 	ldmdbvs	r3!, {r1, r4, r6, r8, r9, ip, sp, lr}^
    19c4:	74616400 	strbtvc	r6, [r1], #-1024	; 0xfffffc00
    19c8:	65755161 	ldrbvs	r5, [r5, #-353]!	; 0xfffffe9f
    19cc:	745f6575 	ldrbvc	r6, [pc], #-1397	; 19d4 <tcv_control+0x40>
    19d0:	63667200 	cmnvs	r6, #0, 4
}
    19d4:	6f72705f 	svcvs	0x0072705f
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    19d8:	4f785270 	svcmi	0x00785270
    19dc:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
			return 0;
    19e0:	00735f74 	rsbseq	r5, r3, r4, ror pc
    19e4:	5f636672 	svcpl	0x00636672
    19e8:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    19ec:	754f7852 	strbvc	r7, [pc, #-2130]	; 11a2 <__pi_memcpy>
    19f0:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    19f4:	7200745f 	andvc	r7, r0, #1593835520	; 0x5f000000
    19f8:	69725466 	ldmdbvs	r2!, {r1, r2, r5, r6, sl, ip, lr}^
	if (dsp != TCV_DSP_PASS) {
    19fc:	4652006d 	ldrbmi	r0, [r2], -sp, rrx
		if (ses == NONE)
    1a00:	6f6c4343 	svcvs	0x006c4343
			syserror (EREQPAR, "tcv26");
    1a04:	69446b63 	stmdbvs	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
		verify_fds (ses, "tcv27");
    1a08:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    1a0c:	6f630065 	svcvs	0x00630065
    1a10:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1a14:	746e7953 	strbtvc	r7, [lr], #-2387	; 0xfffff6ad
    1a18:	78740068 	ldmdavc	r4!, {r3, r5, r6}^
		if ((p = apb (size)) != NULL) {
    1a1c:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    1a20:	00726574 	rsbseq	r6, r2, r4, ror r5
		return NULL;
    1a24:	6e457363 	cdpvs	3, 4, cr7, cr5, cr3, {3}
			p->attributes = descriptors [ses] -> attpattern;
    1a28:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
			dispose (p, dsp);
    1a2c:	656c0065 	strbvs	r0, [ip, #-101]!	; 0xffffff9b
			p->attributes = descriptors [ses] -> attpattern;
    1a30:	007a536e 	rsbseq	r5, sl, lr, ror #6
			p->attributes.b.outgoing = 0;
    1a34:	5f636672 	svcpl	0x00636672
			dispose (p, dsp);
    1a38:	69646172 	stmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
			return (address)(p + 1);
    1a3c:	5f704f6f 	svcpl	0x00704f6f
    1a40:	66720073 			; <UNDEFINED> instruction: 0x66720073
	if ((p = apb (size)) != NULL)
    1a44:	61725f63 	cmnvs	r2, r3, ror #30
    1a48:	4f6f6964 	svcmi	0x006f6964
		return (address)(p + 1);
    1a4c:	00745f70 	rsbseq	r5, r4, r0, ror pc
    1a50:	70655262 	rsbvc	r5, r5, r2, ror #4
    1a54:	4e746165 	rpwmisz	f6, f4, f5
    1a58:	66006b6f 	strvs	r6, [r0], -pc, ror #22
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a5c:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1a60:	00704f72 	rsbseq	r4, r0, r2, ror pc
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a64:	5f636672 	svcpl	0x00636672
    1a68:	61746164 	cmnvs	r4, r4, ror #2
		syserror (EREQPAR, "tcv28");
    1a6c:	72746e45 	rsbsvc	r6, r4, #1104	; 0x450
		syserror (EMALLOC, "tcv29");
    1a70:	6e654779 	mcrvs	7, 3, r4, cr5, cr9, {3}
	physical [phy] = ps;
    1a74:	6c617265 	sfmvs	f7, 2, [r1], #-404	; 0xfffffe6c
	physinfo [phy] = info;
    1a78:	7200735f 	andvc	r7, r0, #2080374785	; 0x7c000001
    1a7c:	61705f66 	cmnvs	r0, r6, ror #30
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1a80:	5f686374 	svcpl	0x00686374
    1a84:	5f656672 	svcpl	0x00656672
    1a88:	666e6567 	strbtvs	r6, [lr], -r7, ror #10
		syserror (EMALLOC, "tcv29");
    1a8c:	6e006b73 	vmovvs.16	d0[1], r6
    1a90:	6b4f7852 	blvs	13dfbe0 <__ccfg+0x13bfc38>
	q_init (q);
    1a94:	645f5f00 	ldrbvs	r5, [pc], #-3840	; 1a9c <tcvphy_reg+0x40>
}
    1a98:	796d6d75 	stmdbvc	sp!, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    1a9c:	5f5f0030 	svcpl	0x005f0030
    1aa0:	6d6d7564 	cfstr64vs	mvdx7, [sp, #-400]!	; 0xfffffe70
    1aa4:	5f003179 	svcpl	0x00003179
    1aa8:	6d75645f 	cfldrdvs	mvd6, [r5, #-380]!	; 0xfffffe84
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1aac:	0032796d 	eorseq	r7, r2, sp, ror #18
	verify_fph (phy, "tcv30");
    1ab0:	75645f5f 	strbvc	r5, [r4, #-3935]!	; 0xfffff0a1
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ab4:	33796d6d 	cmncc	r9, #6976	; 0x1b40
    1ab8:	74496e00 	strbvc	r6, [r9], #-3584	; 0xfffff200
	verify_fph (phy, "tcv30");
    1abc:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
    1ac0:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    1ac4:	746b7000 	strbtvc	r7, [fp], #-0
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1ac8:	006e654c 	rsbeq	r6, lr, ip, asr #10
    1acc:	656c7572 	strbvs	r7, [ip, #-1394]!	; 0xfffffa8e
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1ad0:	5f465200 	svcpl	0x00465200
    1ad4:	50646d63 	rsbpl	r6, r4, r3, ror #26
		if (plugins [plg] == NULL)
    1ad8:	52706f72 	rsbspl	r6, r0, #456	; 0x1c8
    1adc:	46520078 			; <UNDEFINED> instruction: 0x46520078
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1ae0:	45504343 	ldrbmi	r4, [r0, #-835]	; 0xfffffcbd
		return 0;
    1ae4:	746e4930 	strbtvc	r4, [lr], #-2352	; 0xfffff6d0
}
    1ae8:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1aec:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1af0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1a3c <tcvp_new+0x48>
    1af4:	68632f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1af8:	696c7261 	stmdbvs	ip!, {r0, r5, r6, r9, ip, sp, lr}^
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1afc:	326e6179 	rsbcc	r6, lr, #1073741854	; 0x4000001e
    1b00:	4c4f2f33 	mcrrmi	15, 3, r2, pc, cr3
    1b04:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1b08:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1b0c:	2f534f43 	svccs	0x00534f43
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1b10:	4f636950 	svcmi	0x00636950
	len -= (ap.head + ap.tail);
    1b14:	43432f53 	movtmi	r2, #16211	; 0x3f53
    1b18:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    1b1c:	7066722f 	rsbvc	r7, r6, pc, lsr #4
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1b20:	2e706f72 	mrccs	15, 3, r6, cr0, cr2, {3}
    1b24:	69740063 	ldmdbvs	r4!, {r0, r1, r5, r6}^
    1b28:	756f656d 	strbvc	r6, [pc, #-1389]!	; 15c3 <enq+0x3>
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1b2c:	72640074 	rsbvc	r0, r4, #116	; 0x74
    1b30:	63727076 	cmnvs	r2, #118	; 0x76
    1b34:	506e0073 	rsbpl	r0, lr, r3, ror r0
	return 1;
    1b38:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    1b3c:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
    1b40:	66720073 			; <UNDEFINED> instruction: 0x66720073
    1b44:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    1b48:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
	verify_fph (phy, "tcv32");
    1b4c:	545f504f 	ldrbpl	r5, [pc], #-79	; 1b54 <tcvphy_get+0x8>
    1b50:	00735f58 	rsbseq	r5, r3, r8, asr pc
    1b54:	5f636672 	svcpl	0x00636672
    1b58:	5f444d43 	svcpl	0x00444d43
    1b5c:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
    1b60:	5f58545f 	svcpl	0x0058545f
	oq = oqueues [phy];
    1b64:	64690074 	strbtvs	r0, [r9], #-116	; 0xffffff8c
	b = q_first (oq);
    1b68:	704f656c 	subvc	r6, pc, ip, ror #10
	if (q_end (b, oq)) {
    1b6c:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
	*len = b->length;
    1b70:	4d676966 			; <UNDEFINED> instruction: 0x4d676966
	deq (b);	// Dequeue the packet ...
    1b74:	41637369 	cmnmi	r3, r9, ror #6
}
    1b78:	70006364 	andvc	r6, r0, r4, ror #6
		return NULL;
    1b7c:	63746150 	cmnvs	r4, #80, 2
    1b80:	62615468 	rsbvs	r5, r1, #104, 8	; 0x68000000
    1b84:	46736300 	ldrbtmi	r6, [r3], -r0, lsl #6
    1b88:	6e6f4373 	mcrvs	3, 3, r4, cr15, cr3, {3}
	verify_fph (phy, "tcv33");
    1b8c:	6d630066 	stclvs	0, cr0, [r3, #-408]!	; 0xfffffe68
    1b90:	72735f64 	rsbsvc	r5, r3, #100, 30	; 0x190
    1b94:	46620074 			; <UNDEFINED> instruction: 0x46620074
    1b98:	66664f73 	uqsub16vs	r4, r6, r3
    1b9c:	646e6500 	strbtvs	r6, [lr], #-1280	; 0xfffffb00
    1ba0:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
	oq = oqueues [phy];
    1ba4:	68436200 	stmdavs	r3, {r9, sp, lr}^
	b = q_first (oq);
    1ba8:	6464416b 	strbtvs	r4, [r4], #-363	; 0xfffffe95
		return NULL;
    1bac:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
	return (address)(b + 1);
    1bb0:	63667200 	cmnvs	r6, #0, 4
}
    1bb4:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
    1bb8:	4e59535f 	mrcmi	3, 2, r5, cr9, cr15, {2}
    1bbc:	54535f43 	ldrbpl	r5, [r3], #-3907	; 0xfffff0bd
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1bc0:	5f545241 	svcpl	0x00545241
	verify_plg (b, tcv_xmt, "tcv34");
    1bc4:	5f544152 	svcpl	0x00544152
	hblock_t *b = header (pkt);
    1bc8:	66720073 			; <UNDEFINED> instruction: 0x66720073
	verify_plg (b, tcv_xmt, "tcv34");
    1bcc:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    1bd0:	59535f44 	ldmdbpl	r3, {r2, r6, r8, r9, sl, fp, ip, lr}^
    1bd4:	535f434e 	cmppl	pc, #939524097	; 0x38000001
    1bd8:	54524154 	ldrbpl	r4, [r2], #-340	; 0xfffffeac
    1bdc:	5441525f 	strbpl	r5, [r1], #-607	; 0xfffffda1
    1be0:	7000745f 	andvc	r7, r0, pc, asr r4
    1be4:	656c7961 	strbvs	r7, [ip, #-2401]!	; 0xfffff69f
	dispose (b, plugins [b->attributes.b.plugin] ->
    1be8:	756e006e 	strbvc	r0, [lr, #-110]!	; 0xffffff92
}
    1bec:	7373526d 	cmnvc	r3, #-805306362	; 0xd0000006
	dispose (b, plugins [b->attributes.b.plugin] ->
    1bf0:	73754269 	cmnvc	r5, #-1879048186	; 0x90000006
    1bf4:	78740079 	ldmdavc	r4!, {r0, r3, r4, r5, r6}^
    1bf8:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
}
    1bfc:	55620072 	strbpl	r0, [r2, #-114]!	; 0xffffff8e
    while(1)
    1c00:	72436573 	subvc	r6, r3, #482344960	; 0x1cc00000
{
    1c04:	6e650063 	cdpvs	0, 6, cr0, cr5, cr3, {3}
    SetupTrimDevice();
    1c08:	47726574 			; <UNDEFINED> instruction: 0x47726574
        *pui32Dest++ = *pui32Src++;
    1c0c:	73666e65 	cmnvc	r6, #1616	; 0x650
    1c10:	7379536b 	cmnvc	r9, #-1409286143	; 0xac000001
    1c14:	63746150 	cmnvs	r4, #80, 2
    1c18:	65640068 	strbvs	r0, [r4, #-104]!	; 0xffffff98
    1c1c:	74616976 	strbtvc	r6, [r1], #-2422	; 0xfffff68a
    1c20:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    __asm("    ldr     r0, =_bss\n"
    1c24:	61746172 	cmnvs	r4, r2, ror r1
    1c28:	5f656c62 	svcpl	0x00656c62
    1c2c:	50700074 	rsbspl	r0, r0, r4, ror r0
    1c30:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    1c34:	00636556 	rsbeq	r6, r3, r6, asr r5
   main();
    1c38:	696b536e 	stmdbvs	fp!, {r1, r2, r3, r5, r6, r8, r9, ip, lr}^
    FaultISR();
    1c3c:	68700070 	ldmdavs	r0!, {r4, r5, r6}^
}
    1c40:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
    1c44:	35333163 	ldrcc	r3, [r3, #-355]!	; 0xfffffe9d
    1c48:	68700030 	ldmdavs	r0!, {r4, r5}^
    1c4c:	64697379 	strbtvs	r7, [r9], #-889	; 0xfffffc87
    1c50:	5f465200 	svcpl	0x00465200
static byte get_byte () {
    1c54:	50646d63 	rsbpl	r6, r4, r3, ror #26
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c58:	54706f72 	ldrbtpl	r6, [r0], #-3954	; 0xfffff08e
    1c5c:	65720078 	ldrbvs	r0, [r2, #-120]!	; 0xffffff88
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c60:	65724666 	ldrbvs	r4, [r2, #-1638]!	; 0xfffff99a
		b <<= 1;
    1c64:	46520071 			; <UNDEFINED> instruction: 0x46520071
    1c68:	6f6c4343 	svcvs	0x006c4343
			b |= 1;
    1c6c:	6e456b63 	vmlsvs.f64	d22, d5, d19
	for (b = 0, i = 0; i < 8; i++) {
    1c70:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c74:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1c78:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
}
    1c7c:	63006e6f 	movwvs	r6, #3695	; 0xe6f
    1c80:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
static void put_byte (byte b) {
    1c84:	65727567 	ldrbvs	r7, [r2, #-1383]!	; 0xfffffa99
    1c88:	666e6547 	strbtvs	r6, [lr], -r7, asr #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c8c:	61506b73 	cmpvs	r0, r3, ror fp
    1c90:	00686374 	rsbeq	r6, r8, r4, ror r3
		if (b & 0x80)
    1c94:	67697274 			; <UNDEFINED> instruction: 0x67697274
    1c98:	54726567 	ldrbtpl	r6, [r2], #-1383	; 0xfffffa99
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1c9c:	00657079 	rsbeq	r7, r5, r9, ror r0
		b <<= 1;
    1ca0:	5f766374 	svcpl	0x00766374
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1ca4:	5f65706f 	svcpl	0x0065706f
    1ca8:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cac:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
}
    1cb0:	6f6c635f 	svcvs	0x006c635f
    1cb4:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1cb8:	6374006c 	cmnvs	r4, #108	; 0x6c
    1cbc:	756f5f76 	strbvc	r5, [pc, #-3958]!	; d4e <__pi_release+0x172>
    1cc0:	756e5f74 	strbvc	r5, [lr, #-3956]!	; 0xfffff08c
	put_byte (cmd);
    1cc4:	74006c6c 	strvc	r6, [r0], #-3180	; 0xfffff394
    1cc8:	665f7663 	ldrbvs	r7, [pc], -r3, ror #12
}
    1ccc:	6e5f6d72 	mrcvs	13, 2, r6, cr15, cr2, {3}
    1cd0:	006c6c75 	rsbeq	r6, ip, r5, ror ip
static void wwait (word st, word del) {
    1cd4:	6e756f62 	cdpvs	15, 7, cr6, cr5, cr2, {3}
    1cd8:	4b007364 	blmi	1ea70 <__exidx_end+0x19b43>
    1cdc:	2f504d54 	svccs	0x00504d54
	while (dopen && (rdsr () & 1)) {
    1ce0:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    1ce4:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
    1ce8:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    1cec:	6373646e 	cmnvs	r3, #1845493760	; 0x6e000000
	put_byte (CMD_RDSR);
    1cf0:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
	r = get_byte ();
    1cf4:	6374006c 	cmnvs	r4, #108	; 0x6c
    1cf8:	63725f76 	cmnvs	r2, #472	; 0x1d8
    1cfc:	756e5f76 	strbvc	r5, [lr, #-3958]!	; 0xfffff08a
	while (dopen && (rdsr () & 1)) {
    1d00:	74006c6c 	strvc	r6, [r0], #-3180	; 0xfffff394
}
    1d04:	785f7663 	ldmdavc	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
		if (st == WNONE)
    1d08:	6e5f746d 	cdpvs	4, 5, cr7, cr15, cr13, {3}
    1d0c:	006c6c75 	rsbeq	r6, ip, r5, ror ip
			mdelay (1);
    1d10:	726f6676 	rsbvc	r6, pc, #123731968	; 0x7600000
    1d14:	6741006d 	strbvs	r0, [r1, -sp, rrx]
			delay (del, st);
    1d18:	006e6961 	rsbeq	r6, lr, r1, ror #18
    1d1c:	6374756f 	cmnvs	r4, #465567744	; 0x1bc00000
			release;
    1d20:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    1d24:	66765f69 	ldrbtvs	r5, [r6], -r9, ror #30
    1d28:	73726170 	cmnvc	r2, #112, 2
static void ready () {
    1d2c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
	if (dopen) {
    1d30:	2f656d6f 	svccs	0x00656d6f
		wwait (WNONE, 1);
    1d34:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    1d38:	6179696c 	cmnvs	r9, ip, ror #18
    1d3c:	2f33326e 	svccs	0x0033326e
	dstat = 0;
    1d40:	4f534c4f 	svcmi	0x00534c4f
}
    1d44:	2f54454e 	svccs	0x0054454e
    1d48:	4f434950 	svcmi	0x00434950
    1d4c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
	udelay (1);
    1d50:	2f534f63 	svccs	0x00534f63
	udelay (1);
    1d54:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    1d58:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    1d5c:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
		dopen = DOPEN_TEMP;
    1d60:	6f66762f 	svcvs	0x0066762f
    1d64:	632e6d72 			; <UNDEFINED> instruction: 0x632e6d72
    1d68:	74655200 	strbtvc	r5, [r5], #-512	; 0xfffffe00
    1d6c:	645f7972 	ldrbvs	r7, [pc], #-2418	; 1d74 <cclose+0x4>
static void cclose () {
    1d70:	6f776c5f 	svcvs	0x00776c5f
	if (dopen == DOPEN_TEMP) {
    1d74:	76006472 			; <UNDEFINED> instruction: 0x76006472
    1d78:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
		wwait (WNONE, 1);
    1d7c:	74655200 	strbtvc	r5, [r5], #-512	; 0xfffffe00
    1d80:	645f7972 	ldrbvs	r7, [pc], #-2418	; 1d88 <cclose+0x18>
	cmd_0 (CMD_DP);
    1d84:	726f775f 	rsbvc	r7, pc, #24903680	; 0x17c0000
    1d88:	682f0064 	stmdavs	pc!, {r2, r5, r6}	; <UNPREDICTABLE>
		dopen = 0;
    1d8c:	2f656d6f 	svccs	0x00656d6f
}
    1d90:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
word ee_open () {
    1d94:	6179696c 	cmnvs	r9, ip, ror #18
	ready ();
    1d98:	2f33326e 	svccs	0x0033326e
	dopen = DOPEN_PERM;
    1d9c:	4f534c4f 	svcmi	0x00534c4f
    1da0:	2f54454e 	svccs	0x0054454e
}
    1da4:	4f434950 	svcmi	0x00434950
	if (dopen) {
    1da8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1dac:	2f534f63 	svccs	0x00534f63
		dopen = DOPEN_TEMP;
    1db0:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
		cclose ();
    1db4:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
}
    1db8:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
int ser_outf (word st, const char *m, ...) {
    1dbc:	6373762f 	cmnvs	r3, #49283072	; 0x2f00000
    1dc0:	632e6e61 			; <UNDEFINED> instruction: 0x632e6e61
	if ((prcs = running (__outserial)) != 0) {
    1dc4:	6f5f5f00 	svcvs	0x005f5f00
    1dc8:	65737475 	ldrbvs	r7, [r3, #-1141]!	; 0xfffffb8b
		join (prcs, st);
    1dcc:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    1dd0:	6f682f00 	svcvs	0x00682f00
		release;
    1dd4:	632f656d 			; <UNDEFINED> instruction: 0x632f656d
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1dd8:	6c726168 	ldfvse	f6, [r2], #-416	; 0xfffffe60
    1ddc:	6e617969 	vnmulvs.f16	s15, s2, s19	; <UNPREDICTABLE>
    1de0:	4f2f3332 	svcmi	0x002f3332
		umwait (st);
    1de4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    1de8:	502f5445 	eorpl	r5, pc, r5, asr #8
	if (runstrand (__outserial, buf) == 0) {
    1dec:	534f4349 	movtpl	r4, #62281	; 0xf349
    1df0:	6369502f 	cmnvs	r9, #47	; 0x2f
    1df4:	502f534f 	eorpl	r5, pc, pc, asr #6
		ufree (buf);
    1df8:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
		npwait (st);
    1dfc:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
}
    1e00:	2f6c6169 	svccs	0x006c6169
    1e04:	756f5f5f 	strbvc	r5, [pc, #-3935]!	; ead <killev+0x5>
    1e08:	72657374 	rsbvc	r7, r5, #116, 6	; 0xd0000001
    1e0c:	2e6c6169 	powcsez	f6, f4, #1.0
int ser_inf (word st, const char *fmt, ...) {
    1e10:	5f5f0063 	svcpl	0x005f0063
    1e14:	575f4d4f 	ldrbpl	r4, [pc, -pc, asr #26]
	if (fmt == NULL)
    1e18:	45544952 	ldrbmi	r4, [r4, #-2386]	; 0xfffff6ae
	if (__inpline == NULL) {
    1e1c:	61757100 	cmnvs	r5, r0, lsl #2
		if ((prcs = running (__inserial)) == 0) {
    1e20:	2f00746e 	svccs	0x0000746e
    1e24:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
			prcs = runthread (__inserial);
    1e28:	6168632f 	cmnvs	r8, pc, lsr #6
    1e2c:	79696c72 	stmdbvc	r9!, {r1, r4, r5, r6, sl, fp, sp, lr}^
			if (prcs == 0) {
    1e30:	33326e61 	teqcc	r2, #1552	; 0x610
				npwait (st);
    1e34:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
		release;
    1e38:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
		join (prcs, st);
    1e3c:	4349502f 	movtmi	r5, #36911	; 0x902f
    1e40:	502f534f 	eorpl	r5, pc, pc, asr #6
	va_start (ap, fmt);
    1e44:	534f6369 	movtpl	r6, #62313	; 0xf369
	prcs = vscan (__inpline, fmt, ap);
    1e48:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    1e4c:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
	ufree (__inpline);
    1e50:	61697265 	cmnvs	r9, r5, ror #4
	__inpline = NULL;
    1e54:	5f5f2f6c 	svcpl	0x005f2f6c
}
    1e58:	65736e69 	ldrbvs	r6, [r3, #-3689]!	; 0xfffff197
    1e5c:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    1e60:	5f00632e 	svcpl	0x0000632e
		return 0;
    1e64:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    1e68:	61697265 	cmnvs	r9, r5, ror #4
    1e6c:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
int ser_in (word st, char *buf, int len) {
    1e70:	2f656d6f 	svccs	0x00656d6f
    1e74:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
	if (len == 0)
    1e78:	6179696c 	cmnvs	r9, ip, ror #18
	if (__inpline == NULL) {
    1e7c:	2f33326e 	svccs	0x0033326e
		if ((prcs = running (__inserial)) == 0) {
    1e80:	4f534c4f 	svcmi	0x00534c4f
    1e84:	2f54454e 	svccs	0x0054454e
			prcs = runthread (__inserial);
    1e88:	4f434950 	svcmi	0x00434950
    1e8c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
			if (prcs == 0) {
    1e90:	2f534f63 	svccs	0x00534f63
				npwait (st);
    1e94:	33314343 	teqcc	r1, #201326593	; 0xc000001
		release;
    1e98:	732f5858 			; <UNDEFINED> instruction: 0x732f5858
		join (prcs, st);
    1e9c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    1ea0:	735f6672 	cmpvc	pc, #119537664	; 0x7200000
	if (*__inpline == NULL) // bin cmd
    1ea4:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1ea8:	5f73676e 	svcpl	0x0073676e
	if (prcs >= len)
    1eac:	685f706c 	ldmdavs	pc, {r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
		prcs = len-1;
    1eb0:	00632e72 	rsbeq	r2, r3, r2, ror lr
	memcpy (buf, __inpline, prcs);
    1eb4:	65764f70 	ldrbvs	r4, [r6, #-3952]!	; 0xfffff090
    1eb8:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
    1ebc:	75007365 	strvc	r7, [r0, #-869]	; 0xfffffc9b
	ufree (__inpline);
    1ec0:	70746e69 	rsbsvc	r6, r4, r9, ror #28
	__inpline = NULL;
    1ec4:	745f7274 	ldrbvc	r7, [pc], #-628	; 1ecc <ser_in+0x5c>
	if (*buf) // if it's NULL, it's a bin cmd
    1ec8:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fd0 <update_n_wake+0x14>
		buf [prcs] = '\0';
    1ecc:	33746e69 	cmncc	r4, #1680	; 0x690
}
    1ed0:	00745f32 	rsbseq	r5, r4, r2, lsr pc
		prcs = strlen (__inpline);
    1ed4:	71724962 	cmnvc	r2, r2, ror #18
    1ed8:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
		return 0;
    1edc:	0064656c 	rsbeq	r6, r4, ip, ror #10
    1ee0:	65666153 	strbvs	r6, [r6, #-339]!	; 0xfffffead
    1ee4:	69706148 	ldmdbvs	r0!, {r3, r6, r8, sp, lr}^
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    1ee8:	41787541 	cmnmi	r8, r1, asr #10
    1eec:	65536964 	ldrbvs	r6, [r3, #-2404]	; 0xfffff69c
    1ef0:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
	RF_cmdFs.frequency = 
    1ef4:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
}
    1ef8:	4f565f52 	svcmi	0x00565f52
    1efc:	565f4449 	ldrbpl	r4, [pc], -r9, asr #8
    1f00:	5f44494f 	svcpl	0x0044494f
    1f04:	4f4e0054 	svcmi	0x004e0054
static int option (int opt, address val) {
    1f08:	5f4d4f52 	svcpl	0x004d4f52
	switch (opt) {
    1f0c:	63555043 	cmpvs	r5, #67	; 0x43
    1f10:	64697370 	strbtvs	r7, [r9], #-880	; 0xfffffc90
    1f14:	524f4e00 	subpl	r4, pc, #0, 28
    1f18:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    1f1c:	70635550 	rsbvc	r5, r3, r0, asr r5
    1f20:	00656973 	rsbeq	r6, r5, r3, ror r9
    1f24:	65666153 	strbvs	r6, [r6, #-339]!	; 0xfffffead
    1f28:	69706148 	ldmdbvs	r0!, {r3, r6, r8, sp, lr}^
    1f2c:	64696f56 	strbtvs	r6, [r9], #-3926	; 0xfffff0aa
    1f30:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 1038 <update_n_wake+0x7c>
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    1f34:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    1f38:	2e00745f 	cfmvsrcs	mvf0, r7
			goto RVal;
    1f3c:	2f2e2e2f 	svccs	0x002e2e2f
			_BIS (dstate, DSTATE_RXON);
    1f40:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1f44:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
	int ret = 0;
    1f48:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
			p_trigger (drvprcs, qevent);
    1f4c:	2f62696c 	svccs	0x0062696c
    1f50:	2e696461 	cdpcs	4, 6, cr6, cr9, cr1, {3}
    1f54:	4e470063 	cdpmi	0, 4, cr0, cr7, cr3, {3}
    1f58:	20432055 	subcs	r2, r3, r5, asr r0
    1f5c:	2e392e34 	mrccs	14, 1, r2, cr9, cr4, {1}
    1f60:	30322033 	eorscc	r2, r2, r3, lsr r0
    1f64:	35303531 	ldrcc	r3, [r0, #-1329]!	; 0xfffffacf
    1f68:	28203932 	stmdacs	r0!, {r1, r4, r5, r8, fp, ip, sp}
    1f6c:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
    1f70:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
}
    1f74:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
			_BIC (dstate, DSTATE_RXON);
    1f78:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
    1f7c:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
			statid = (val == NULL) ? 0 : *val;
    1f80:	342d6465 	strtcc	r6, [sp], #-1125	; 0xfffffb9b
    1f84:	622d395f 	eorvs	r3, sp, #1556480	; 0x17c000
	int ret = 0;
    1f88:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
			ret = (int) statid;
    1f8c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
	if (val != NULL)
    1f90:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
		*val = ret;
    1f94:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
			ret = rbuffl + 2;
    1f98:	37393732 			; <UNDEFINED> instruction: 0x37393732
    1f9c:	2d205d37 	stccs	13, cr5, [r0, #-220]!	; 0xffffff24
			if (val != NULL) {
    1fa0:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
				memcpy (val, &rxstat,
    1fa4:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
    1fa8:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0xfffffc93
				memset (&rxstat, 0, 
    1fac:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
    1fb0:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
			if (val == NULL)
    1fb4:	2d20336d 	stccs	3, cr3, [r0, #-436]!	; 0xfffffe4c
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    1fb8:	4f2d2067 	svcmi	0x002d2067
    1fbc:	732d2073 			; <UNDEFINED> instruction: 0x732d2073
				utimer_set (bckf_timer, *val);
    1fc0:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
    1fc4:	2d203939 			; <UNDEFINED> instruction: 0x2d203939
    1fc8:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; 1e38 <ser_inf+0x28>
			for (ret = 0; ret < 8; ret++)
    1fcc:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
				if (RF_cmdPropRadioDivSetup.txPower
    1fd0:	612d7463 			; <UNDEFINED> instruction: 0x612d7463
					== patable [ret])
    1fd4:	7361696c 	cmnvc	r1, #108, 18	; 0x1b0000
				if (RF_cmdPropRadioDivSetup.txPower
    1fd8:	20676e69 	rsbcs	r6, r7, r9, ror #28
			for (ret = 0; ret < 8; ret++)
    1fdc:	7566662d 	strbvc	r6, [r6, #-1581]!	; 0xfffff9d3
    1fe0:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    1fe4:	732d6e6f 			; <UNDEFINED> instruction: 0x732d6e6f
    1fe8:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1fec:	20736e6f 	rsbscs	r6, r3, pc, ror #28
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    1ff0:	6164662d 	cmnvs	r4, sp, lsr #12
    1ff4:	732d6174 			; <UNDEFINED> instruction: 0x732d6174
			_BIS (dstate, DSTATE_IRST);
    1ff8:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1ffc:	20736e6f 	rsbscs	r6, r3, pc, ror #28
    2000:	7361662d 	cmnvc	r1, #47185920	; 0x2d00000
			ret = (int) channel;
    2004:	5066006d 	rsbpl	r0, r6, sp, rrx
			goto RVal;
    2008:	46007274 			; <UNDEFINED> instruction: 0x46007274
				(*val > 7) ? 7 : *val;
    200c:	5f525450 	svcpl	0x00525450
    2010:	44494f56 	strbmi	r4, [r9], #-3926	; 0xfffff0aa
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2014:	4e49555f 	mcrmi	5, 2, r5, cr9, cr15, {2}
    2018:	545f3854 	ldrbpl	r3, [pc], #-2132	; 2020 <option+0x118>
			plugch ();
    201c:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
			_BIS (dstate, DSTATE_IRST);
    2020:	6b6e654a 	blvs	1b9b550 <__ccfg+0x1b7b5a8>
    2024:	5c736e69 	ldclpl	14, cr6, [r3], #-420	; 0xfffffe5c
			ret = (int) vrate;
    2028:	73626f6a 	cmnvc	r2, #424	; 0x1a8
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    202c:	4757465c 			; <UNDEFINED> instruction: 0x4757465c
    2030:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    2034:	6972442d 	ldmdbvs	r2!, {r0, r2, r3, r5, sl, lr}^
    2038:	4c726576 	cfldr64mi	mvdx6, [r2], #-472	; 0xfffffe28
    203c:	775c6269 	ldrbvc	r6, [ip, -r9, ror #4]
    2040:	736b726f 	cmnvc	fp, #-268435450	; 0xf0000006
    2044:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    2048:	646f6d5c 	strbtvs	r6, [pc], #-3420	; 2050 <option+0x148>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    204c:	73656c75 	cmnvc	r5, #29952	; 0x7500
    2050:	74756f5c 	ldrbtvc	r6, [r5], #-3932	; 0xfffff0a4
    2054:	5c747570 	cfldr64pl	mvdx7, [r4], #-448	; 0xfffffe40
    2058:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
			syserror (EREQPAR, "cc13 op");
    205c:	635f7878 	cmpvs	pc, #120, 16	; 0x780000
    2060:	325f6168 	subscc	r6, pc, #104, 2
    2064:	655f305f 	ldrbvs	r3, [pc, #-95]	; 200d <option+0x105>
    2068:	645c7478 	ldrbvs	r7, [ip], #-1144	; 0xfffffb88
    206c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    2070:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    2074:	6e69625c 	mcrvs	2, 3, r6, cr9, cr12, {2}
    2078:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    207c:	38747500 	ldmdacc	r4!, {r8, sl, ip, sp, lr}^
    2080:	6e676953 			; <UNDEFINED> instruction: 0x6e676953
    2084:	4e006c61 	cdpmi	12, 0, cr6, cr0, cr1, {3}
    2088:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1f54 <option+0x4c>
    208c:	4e4f415f 	mcrmi	1, 2, r4, cr15, cr15, {2}
    2090:	4d746142 	ldfmie	f6, [r4, #-264]!	; 0xfffffef8
    2094:	65546e6f 	ldrbvs	r6, [r4, #-3695]	; 0xfffff191
static void issue_cmd (lword cmd) {
    2098:	7265706d 	rsbvc	r7, r5, #109	; 0x6d
    209c:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20a0:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
    20a4:	43676544 	cmnmi	r7, #68, 10	; 0x11000000
    20a8:	6c6f7600 	stclvs	6, cr7, [pc], #-0	; 20b0 <issue_cmd+0x18>
		if (res != 0x86)
    20ac:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
			syserror (EHARDWARE, "hang ic0");
    20b0:	706f6c53 	rsbvc	r6, pc, r3, asr ip	; <UNPREDICTABLE>
    20b4:	5f5f0065 	svcpl	0x005f0065
		if (cnt-- == 0) {
    20b8:	33746e69 	cmncc	r4, #1680	; 0x690
			diag ("HUP %lx %lx", cmd, res);
    20bc:	00745f32 	rsbseq	r5, r4, r2, lsr pc
    20c0:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
			syserror (EHARDWARE, "hang ic0");
    20c4:	745f3874 	ldrbvc	r3, [pc], #-2164	; 20cc <issue_cmd+0x34>
		udelay (1);
    20c8:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20cc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
}
    20d0:	2f2e2e2f 	svccs	0x002e2e2f
    20d4:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    20d8:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    20dc:	6f612f62 	svcvs	0x00612f62
static void rx_de () {
    20e0:	61625f6e 	cmnvs	r2, lr, ror #30
	if ((dstate & DSTATE_RXAC) == 0)
    20e4:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    20e8:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    20ec:	43706d65 	cmnmi	r0, #6464	; 0x1940
	_BIC (dstate, DSTATE_RXAC);
    20f0:	6572726f 	ldrbvs	r7, [r2, #-623]!	; 0xfffffd91
    20f4:	6f697463 	svcvs	0x00697463
}
    20f8:	6973006e 	ldmdbvs	r3!, {r1, r2, r3, r5, r6}^
    20fc:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
    2100:	706d6554 	rsbvc	r6, sp, r4, asr r5
static void rf_off () {
    2104:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
	if ((dstate & DSTATE_RFON) == 0)
    2108:	566e7275 			; <UNDEFINED> instruction: 0x566e7275
    210c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
	IntDisable (INT_RFC_CPE_0);
    2110:	33697500 	cmncc	r9, #0, 10
    2114:	72754332 	rsbsvc	r4, r5, #-939524096	; 0xc8000000
    2118:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    211c:	00636553 	rsbeq	r6, r3, r3, asr r5
	RFCAdi3VcoLdoVoltageMode (false);
    2120:	4f524f4e 	svcmi	0x00524f4e
	RFCSynthPowerDown ();
    2124:	4f415f4d 	svcmi	0x00415f4d
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2128:	4354524e 	cmpmi	r4, #-536870908	; 0xe0000004
    212c:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2130:	43746e65 	cmnmi	r4, #1616	; 0x650
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2134:	61706d6f 	cmnvs	r0, pc, ror #26
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2138:	61566572 	cmpvs	r6, r2, ror r5
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    213c:	4765756c 	strbmi	r7, [r5, -ip, ror #10]!
    2140:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
    2144:	53323369 	teqpl	r2, #-1543503871	; 0xa4000001
    2148:	6e6f6365 	cdpvs	3, 6, cr6, cr15, cr5, {3}
	_BIC (dstate, DSTATE_RFON);
    214c:	63655364 	cmnvs	r5, #100, 6	; 0x90000001
    2150:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
}
    2154:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 125c <io+0x7c>
    2158:	36746e69 	ldrbtcc	r6, [r4], -r9, ror #28
    215c:	00745f34 	rsbseq	r5, r4, r4, lsr pc
    2160:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2164:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    2168:	53746e65 	cmnpl	r4, #1616	; 0x650
    216c:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
		if (cmd->status == tstat)
    2170:	4f4e0063 	svcmi	0x004e0063
		if (timeout-- == 0) {
    2174:	5f4d4f52 	svcpl	0x004d4f52
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2178:	524e4f41 	subpl	r4, lr, #260	; 0x104
    217c:	75434354 	strbvc	r4, [r3, #-852]	; 0xfffffcac
    2180:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
			syserror (EHARDWARE, "rt2");
    2184:	42343674 	eorsmi	r3, r4, #116, 12	; 0x7400000
    2188:	61567469 	cmpvs	r6, r9, ror #8
		udelay (1);
    218c:	4765756c 	strbmi	r7, [r5, -ip, ror #10]!
		if (cmd->status == tstat)
    2190:	63007465 	movwvs	r7, #1125	; 0x465
}
    2194:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    2198:	7452746e 	ldrbvc	r7, [r2], #-1134	; 0xfffffb92
static void rf_on () {
    219c:	65730063 	ldrbvs	r0, [r3, #-99]!	; 0xffffff9d
	if (dstate & DSTATE_RFON)
    21a0:	646e4163 	strbtvs	r4, [lr], #-355	; 0xfffffe9d
    21a4:	53627553 	cmnpl	r2, #348127232	; 0x14c00000
    21a8:	2e006365 	cdpcs	3, 0, cr6, cr0, cr5, {3}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    21ac:	2f2e2e2f 	svccs	0x002e2e2f
    21b0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    21b4:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    21b8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
	OSCHF_TurnOnXosc();
    21bc:	2f62696c 	svccs	0x0062696c
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    21c0:	5f6e6f61 	svcpl	0x006e6f61
    21c4:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
    21c8:	69730063 	ldmdbvs	r3!, {r0, r1, r5, r6}^
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21cc:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21d0:	4e006570 	cfrshl64mi	mvdx0, mvdx0, r6
    21d4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 20a0 <issue_cmd+0x8>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    21d8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    21dc:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    21e0:	47697270 			; <UNDEFINED> instruction: 0x47697270
	issue_cmd (
    21e4:	4e007465 	cdpmi	4, 0, cr7, cr0, cr5, {3}
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    21e8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 20b4 <issue_cmd+0x1c>
    21ec:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    21f0:	616c6564 	cmnvs	ip, r4, ror #10
   pPatchTab[80] = 0;
    21f4:	69750079 	ldmdbvs	r5!, {r0, r3, r4, r5, r6}^
    21f8:	65523233 	ldrbvs	r3, [r2, #-563]	; 0xfffffdcd
   pPatchTab[53] = 2;
    21fc:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
    2200:	6f433233 	svcvs	0x00433233
   pPatchTab[55] = 3;
    2204:	00746e75 	rsbseq	r6, r4, r5, ror lr
   pPatchTab[110] = 4;
    2208:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    220c:	2f2e2e2f 	svccs	0x002e2e2f
   pPatchTab[107] = 5;
    2210:	642f2e2e 	strtvs	r2, [pc], #-3630	; 2218 <rf_on+0x7c>
   pPatchTab[65] = 6;
    2214:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
   pPatchTab[57] = 1;
    2218:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
   pPatchTab[65] = 6;
    221c:	7570632f 	ldrbvc	r6, [r0, #-815]!	; 0xfffffcd1
   pIrqPatch[1] = _IRQ_PATCH_0;
    2220:	4e00632e 	cdpmi	3, 0, cr6, cr0, cr14, {1}
    2224:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 20f0 <rx_de+0x10>
   const uint32_t *pS = patchGenfskRfe;
    2228:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
   volatile unsigned long *pD = &HWREG(RFC_RFERAM_BASE);
    222c:	6d697270 	sfmvs	f7, 2, [r9, #-448]!	; 0xfffffe40
      t2 = *pS++;
    2230:	006b7361 	rsbeq	r7, fp, r1, ror #6
      t4 = *pS++;
    2234:	4f524f4e 	svcmi	0x00524f4e
      t6 = *pS++;
    2238:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
      t8 = *pS++;
    223c:	6f6c4343 	svcvs	0x006c4343
      *pD++ = t1;
    2240:	6f536b63 	svcvs	0x00536b63
      *pD++ = t2;
    2244:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
      *pD++ = t3;
    2248:	00746553 	rsbseq	r6, r4, r3, asr r5
      *pD++ = t4;
    224c:	52545046 	subspl	r5, r4, #70	; 0x46
      *pD++ = t6;
    2250:	454c465f 	strbmi	r4, [ip, #-1631]	; 0xfffff9a1
      *pD++ = t7;
    2254:	45484354 	strbmi	r4, [r8, #-852]	; 0xfffffcac
   } while (--nIterations);
    2258:	5f323352 	svcpl	0x00323352
      *pD++ = t8;
    225c:	50460054 	subpl	r0, r6, r4, asr r0
    2260:	535f5254 	cmppl	pc, #84, 4	; 0x40000005
   *pD++ = t1;
    2264:	56444454 			; <UNDEFINED> instruction: 0x56444454
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2268:	545f4c41 	ldrbpl	r4, [pc], #-3137	; 2270 <rf_on+0xd4>
    226c:	524f4e00 	subpl	r4, pc, #0, 28
   *pD++ = t2;
    2270:	4f5f4d4f 	svcmi	0x005f4d4f
   *pD++ = t3;
    2274:	6c434353 	mcrrvs	3, 5, r4, r3, cr3
    2278:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
   *pD++ = t4;
    227c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
   *pD++ = t5;
    2280:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
    2284:	33697500 	cmncc	r9, #0, 10
    2288:	63734f32 	cmnvs	r3, #50, 30	; 0xc8
	RFCAdi3VcoLdoVoltageMode (true);
    228c:	6c655300 	stclvs	3, cr5, [r5], #-0
       	RFCRfTrimSet (&rfTrim);
    2290:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
    2294:	42706d6f 	rsbsmi	r6, r0, #7104	; 0x1bc0
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2298:	00666552 	rsbeq	r6, r6, r2, asr r5
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    229c:	52545046 	subspl	r5, r4, #70	; 0x46
    22a0:	5345525f 	movtpl	r5, #21087	; 0x525f
    22a4:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
	issue_cmd ((lword)&cmd_srt);
    22a8:	545f3444 	ldrbpl	r3, [pc], #-1092	; 22b0 <rf_on+0x114>
	issue_cmd ((lword)&RF_cmdFs);
    22ac:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    22b0:	736f5865 	cmnvc	pc, #6619136	; 0x650000
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    22b4:	5f6e4f63 	svcpl	0x006e4f63
    22b8:	4e005643 	cfmadd32mi	mvax2, mvfx5, mvfx0, mvfx3
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22bc:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2188 <wait_cmd.constprop.0+0x24>
	IntEnable (INT_RFC_CPE_0);
    22c0:	43534f5f 	cmpmi	r3, #380	; 0x17c
	_BIC (dstate, DSTATE_IRST);
    22c4:	415f4648 	cmpmi	pc, r8, asr #12
    22c8:	6d657474 	cfstrdvs	mvd7, [r5, #-464]!	; 0xfffffe30
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22cc:	6f547470 	svcvs	0x00547470
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22d0:	74697753 	strbtvc	r7, [r9], #-1875	; 0xfffff8ad
	IntEnable (INT_RFC_CPE_0);
    22d4:	6f546863 	svcvs	0x00546863
}
    22d8:	63736f58 	cmnvs	r3, #88, 30	; 0x160
	IntEnable (INT_RFC_CPE_0);
    22dc:	53464800 	movtpl	r4, #26624	; 0x6800
    22e0:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
}
    22e4:	66615365 	strbtvs	r5, [r1], -r5, ror #6
    22e8:	69775365 	ldmdbvs	r7!, {r0, r2, r5, r6, r8, r9, ip, lr}^
    22ec:	00686374 	rsbeq	r6, r8, r4, ror r3
    22f0:	706d6574 	rsbvc	r6, sp, r4, ror r5
    22f4:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    22f8:	0066664f 	rsbeq	r6, r6, pc, asr #12
    22fc:	5377656e 	cmnpl	r7, #461373440	; 0x1b800000
    2300:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    2304:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
    2308:	6e49656d 	cdpvs	5, 4, cr6, cr9, cr13, {3}
    230c:	70007355 	andvc	r7, r0, r5, asr r3
    2310:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    2314:	70003150 	andvc	r3, r0, r0, asr r1
    2318:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    231c:	70003250 	andvc	r3, r0, r0, asr r2
    2320:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    2324:	5f003350 	svcpl	0x00003350
    2328:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
    232c:	5f363174 	svcpl	0x00363174
    2330:	50460074 	subpl	r0, r6, r4, ror r0
    2334:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    2338:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    233c:	33444556 	movtcc	r4, #17750	; 0x4556
    2340:	7000545f 	andvc	r5, r0, pc, asr r4
static void rx_int_enable () {
    2344:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2348:	5373756f 	cmnpl	r3, #465567744	; 0x1bc00000
    234c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    2350:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
    2354:	6e49656d 	cdpvs	5, 4, cr6, cr9, cr13, {3}
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2358:	2e007355 	mcrcs	3, 0, r7, cr0, cr5, {2}
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    235c:	2f2e2e2f 	svccs	0x002e2e2f
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2360:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
				diag ("BAD RX");
    2364:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2368:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    236c:	2f62696c 	svccs	0x0062696c
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2370:	2e63736f 	cdpcs	3, 6, cr7, cr3, cr15, {3}
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2374:	69740063 	ldmdbvs	r4!, {r0, r1, r5, r6}^
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2378:	6f58656d 	svcvs	0x0058656d
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    237c:	74536373 	ldrbvc	r6, [r3], #-883	; 0xfffffc8d
		if (db->status == DATA_ENTRY_FINISHED) {
    2380:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2384:	0056435f 	subseq	r4, r6, pc, asr r3
    2388:	706d6574 	rsbvc	r6, sp, r4, ror r5
			nr++;
    238c:	746c6544 	strbtvc	r6, [ip], #-1348	; 0xfffffabc
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2390:	6f6c0061 	svcvs	0x006c0061
    2394:	72685477 	rsbvc	r5, r8, #1996488704	; 0x77000000
    2398:	6f687365 	svcvs	0x00687365
    239c:	5200646c 	andpl	r6, r0, #108, 8	; 0x6c000000
				__dp [pl + 1] = __dp [pl] - 128;
    23a0:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
				pl = __dp [1] + 2;
    23a4:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
				__dp [pl + 1] = __dp [pl] - 128;
    23a8:	4e006563 	cfsh32mi	mvfx6, mvfx0, #51
    23ac:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2278 <rf_on+0xdc>
				__dp [pl] = 0;
    23b0:	43534f5f 	cmpmi	r3, #380	; 0x17c
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    23b4:	545f4648 	ldrbpl	r4, [pc], #-1608	; 23bc <rx_int_enable+0x78>
    23b8:	4f6e7275 	svcmi	0x006e7275
    23bc:	736f586e 	cmnvc	pc, #7208960	; 0x6e0000
			db->status = DATA_ENTRY_PENDING;
    23c0:	50460063 	subpl	r0, r6, r3, rrx
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    23c4:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    23c8:	54455345 	strbpl	r5, [r5], #-837	; 0xfffffcbb
				diag ("BAD RX");
    23cc:	5f564544 	svcpl	0x00564544
    23d0:	50460054 	subpl	r0, r6, r4, asr r0
	if (nr) {
    23d4:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23d8:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
}
    23dc:	32444556 	subcc	r4, r4, #360710144	; 0x15800000
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23e0:	5200545f 	andpl	r5, r0, #1593835520	; 0x5f000000
    23e4:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    23e8:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
}
    23ec:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    23f0:	336e6f69 	cmncc	lr, #420	; 0x1a4
    23f4:	706d6100 	rsbvc	r6, sp, r0, lsl #2
    23f8:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    23fc:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
    2400:	76726573 			; <UNDEFINED> instruction: 0x76726573
    2404:	6f4c6465 	svcvs	0x004c6465
thread (cc1350_driver)
    2408:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    240c:	00346e6f 	eorseq	r6, r4, pc, ror #28
    2410:	4f524f4e 	svcmi	0x00524f4e
    2414:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2418:	5f464843 	svcpl	0x00464843
		if (dstate & DSTATE_IRST) {
    241c:	74697753 	strbtvc	r7, [r9], #-1875	; 0xfffff8ad
    2420:	6f546863 	svcvs	0x00546863
    2424:	734f6352 	movtvc	r6, #62290	; 0xf352
			rf_off ();
    2428:	72755463 	rsbsvc	r5, r5, #1660944384	; 0x63000000
			_BIC (dstate,
    242c:	66664f6e 	strbtvs	r4, [r6], -lr, ror #30
    2430:	63736f58 	cmnvs	r3, #88, 30	; 0x160
		if (dstate & DSTATE_RXAC) {
    2434:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2438:	414d5f52 	cmpmi	sp, r2, asr pc
			if ((dstate & DSTATE_RXON) == 0)
    243c:	4c415658 	mcrrmi	6, 5, r5, r1, cr8
				rx_de ();
    2440:	5300545f 	movwpl	r5, #1119	; 0x45f
		if (paylen == 0) {
    2444:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2448:	43444174 	movtmi	r4, #16756	; 0x4174
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    244c:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    2450:	706e4942 	rsbvc	r4, lr, r2, asr #18
    2454:	64007475 	strvs	r7, [r0], #-1141	; 0xfffffb8b
    2458:	61746c65 	cmnvs	r4, r5, ror #24
				paylen -= 2;
    245c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2460:	78614d00 	stmdavc	r1!, {r8, sl, fp, lr}^
    2464:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2468:	4f4e0065 	svcmi	0x004e0065
    246c:	5f4d4f52 	svcpl	0x004d4f52
    2470:	5f43534f 	svcpl	0x0043534f
    2474:	534f5048 	movtpl	r5, #61512	; 0xf048
		} else if (dstate & DSTATE_RXON) {
    2478:	6c655243 	sfmvs	f5, 2, [r5], #-268	; 0xfffffef4
			rf_on ();
    247c:	76697461 	strbtvc	r7, [r9], -r1, ror #8
	if (dstate & DSTATE_RXAC)
    2480:	65724665 	ldrbvs	r4, [r2, #-1637]!	; 0xfffff99b
    2484:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2488:	664f7963 	strbvs	r7, [pc], -r3, ror #18
    248c:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2490:	00746547 	rsbseq	r6, r4, r7, asr #10
	issue_cmd ((lword)&RF_cmdPropRx);
    2494:	4f524f4e 	svcmi	0x00524f4e
	_BIS (dstate, DSTATE_RXAC);
    2498:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    249c:	5f464843 	svcpl	0x00464843
    24a0:	75626544 	strbvc	r6, [r2, #-1348]!	; 0xfffffabc
				if (statid != 0xffff)
    24a4:	74654767 	strbtvc	r4, [r5], #-1895	; 0xfffff899
    24a8:	73797243 	cmnvc	r9, #805306372	; 0x30000004
					((address)(RF_cmdPropTx.pPkt)) [0] =
    24ac:	416c6174 	smcmi	50708	; 0xc614
				RF_cmdPropTx.pktLen = (byte) paylen;
    24b0:	696c706d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, ip, sp, lr}^
		if (paylen == 0) {
    24b4:	65647574 	strbvs	r7, [r4, #-1396]!	; 0xfffffa8c
			wait (qevent, DR_LOOP);
    24b8:	61654d00 	cmnvs	r5, r0, lsl #26
    24bc:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
			if (dstate & DSTATE_RXAC) {
    24c0:	46006575 			; <UNDEFINED> instruction: 0x46006575
    24c4:	5f525450 	svcpl	0x00525450
				rx_int_enable ();
    24c8:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
			release;
    24cc:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
			} else if (dstate & DSTATE_RFON) {
    24d0:	00545f31 	subseq	r5, r4, r1, lsr pc
				delay (offdelay, DR_GOOF);
    24d4:	33637243 	cmncc	r3, #805306372	; 0x30000004
    24d8:	6c460032 	mcrrvs	0, 3, r0, r6, cr2
    24dc:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
		if (bckf_timer) {
    24e0:	32337265 	eorscc	r7, r3, #1342177286	; 0x50000006
			wait (qevent, DR_LOOP);
    24e4:	74654700 	strbtvc	r4, [r5], #-1792	; 0xfffff900
    24e8:	70696843 	rsbvc	r6, r9, r3, asr #16
    24ec:	46006449 	strmi	r6, [r0], -r9, asr #8
			delay (bckf_timer, DR_LOOP);
    24f0:	5f525450 	svcpl	0x00525450
    24f4:	4e41454d 	cdpmi	5, 4, cr4, cr1, cr13, {2}
			if (dstate & DSTATE_RXAC)
    24f8:	5f4c4156 	svcpl	0x004c4156
    24fc:	50460054 	subpl	r0, r6, r4, asr r0
		rf_on ();
    2500:	415f5254 	cmpmi	pc, r4, asr r2	; <UNPREDICTABLE>
		rx_de ();
    2504:	4f434344 	svcmi	0x00434344
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2508:	4942504d 	stmdbmi	r2, {r0, r2, r3, r6, ip, lr}^
		RF_cmdPropTx . status = 0;
    250c:	00545f4e 	subseq	r5, r4, lr, asr #30
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2510:	52545046 	subspl	r5, r4, #70	; 0x46
		issue_cmd ((lword)&cmd_cs);
    2514:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 23a0 <rx_int_enable+0x5c>
		if (dstate & DSTATE_IRST)
    2518:	45524250 	ldrbmi	r4, [r2, #-592]	; 0xfffffdb0
    251c:	00545f46 	subseq	r5, r4, r6, asr #30
    2520:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2524:	6f437463 	svcvs	0x00437463
    2528:	4941706d 	stmdbmi	r1, {r0, r2, r3, r5, r6, ip, sp, lr}^
			delay (1, DR_XMIT);
    252c:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2530:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2534:	4f435f52 	svcmi	0x00435f52
    2538:	4941504d 	stmdbmi	r1, {r0, r2, r3, r6, ip, lr}^
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    253c:	00545f4e 	subseq	r5, r4, lr, asr #30
    2540:	706d6574 	rsbvc	r6, sp, r4, ror r5
				RF_cmdPropTx . status = 0;
    2544:	746c6544 	strbtvc	r6, [ip], #-1348	; 0xfffffabc
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2548:	00325861 	eorseq	r5, r2, r1, ror #16
				issue_cmd ((lword)&RF_cmdPropTx);
    254c:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
				proceed (DR_XMIT);
    2550:	6f6c4766 	svcvs	0x006c4766
    2554:	736c6162 	cmnvc	ip, #-2147483624	; 0x80000018
			txtries++;
    2558:	4f504800 	svcmi	0x00504800
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    255c:	525f4353 	subspl	r4, pc, #1275068417	; 0x4c000001
    2560:	72466c65 	subvc	r6, r6, #25856	; 0x6500
    2564:	664f7165 	strbvs	r7, [pc], -r5, ror #2
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2568:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
		goto DR_LOOP__;
    256c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2570:	69546174 	ldmdbvs	r4, {r2, r4, r5, r6, r8, sp, lr}^
		paylen = 0;
    2574:	6953656d 	ldmdbvs	r3, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2578:	5865636e 	stmdapl	r5!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
		txtries = 0;
    257c:	4f63736f 	svcmi	0x0063736f
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2580:	4d6e496e 			; <UNDEFINED> instruction: 0x4d6e496e
    2584:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
    2588:	5461746c 	strbtpl	r7, [r1], #-1132	; 0xfffffb94
    258c:	53706d65 	cmnpl	r0, #6464	; 0x1940
    2590:	65636e69 	strbvs	r6, [r3, #-3689]!	; 0xfffff197
		    tcvphy_top (physid) == NULL)
    2594:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2598:	66006e4f 	strvs	r6, [r0], -pc, asr #28
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    259c:	61507469 	cmpvs	r0, r9, ror #8
    25a0:	736d6172 	cmnvc	sp, #-2147483620	; 0x8000001c
			rf_off ();
    25a4:	61747300 	cmnvs	r4, r0, lsl #6
endthread
    25a8:	70757472 	rsbsvc	r7, r5, r2, ror r4
    25ac:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    25b0:	73556e49 	cmpvc	r5, #1168	; 0x490
    25b4:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    25b8:	736f5865 	cmnvc	pc, #6619136	; 0x650000
    25bc:	66664f63 	strbtvs	r4, [r6], -r3, ror #30
    25c0:	0056435f 	subseq	r4, r6, pc, asr r3
    25c4:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    25c8:	756f5366 	strbvc	r5, [pc, #-870]!	; 226a <rf_on+0xce>
    25cc:	52656372 	rsbpl	r6, r5, #-939524095	; 0xc8000001
    25d0:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    25d4:	706d6100 	rsbvc	r6, sp, r0, lsl #2
    25d8:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    25dc:	00316854 	eorseq	r6, r1, r4, asr r8
    25e0:	4863734f 	stmdami	r3!, {r0, r1, r2, r3, r6, r8, r9, ip, sp, lr}^
    25e4:	6f6c4766 	svcvs	0x006c4766
void RFCCPE0IntHandler (void) {
    25e8:	736c6162 	cmnvc	ip, #-2147483624	; 0x80000018
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    25ec:	4800745f 	stmdami	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
		_BIS (dstate, DSTATE_IRST);
    25f0:	5f445241 	svcpl	0x00445241
    25f4:	5f495041 	svcpl	0x00495041
    25f8:	69740054 	ldmdbvs	r4!, {r2, r4, r6}^
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    25fc:	6e55656d 	cdpvs	5, 5, cr6, cr5, cr13, {3}
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2600:	576c6974 			; <UNDEFINED> instruction: 0x576c6974
    2604:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2608:	4d6e4970 			; <UNDEFINED> instruction: 0x4d6e4970
	p_trigger (drvprcs, qevent);
    260c:	69750073 	ldmdbvs	r5!, {r0, r1, r4, r5, r6}^
    2610:	72533233 	subsvc	r3, r3, #805306371	; 0x30000003
    2614:	6b6c4363 	blvs	1b133a8 <__ccfg+0x1af3400>
    2618:	43534f00 	cmpmi	r3, #0, 30
    261c:	6f536648 	svcvs	0x00536648
    2620:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2624:	74697753 	strbtvc	r7, [r9], #-1875	; 0xfffff8ad
    2628:	46006863 	strmi	r6, [r0], -r3, ror #16
    262c:	5f525450 	svcpl	0x00525450
    2630:	33435243 	movtcc	r5, #12867	; 0x3243
	RISE_N_SHINE;
    2634:	00545f32 	subseq	r5, r4, r2, lsr pc
    2638:	706d6574 	rsbvc	r6, sp, r4, ror r5
}
    263c:	43676544 	cmnmi	r7, #68, 10	; 0x11000000
    2640:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2644:	494d5f52 	stmdbmi	sp, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    2648:	4c41564e 	mcrrmi	6, 4, r5, r1, cr14
    264c:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
    2650:	5f525450 	svcpl	0x00525450
void phys_cc1350 (int phy, int mbs) {
    2654:	4f534648 	svcmi	0x00534648
	if (rbuffl != 0)
    2658:	45435255 	strbmi	r5, [r3, #-597]	; 0xfffffdab
    265c:	45464153 	strbmi	r4, [r6, #-339]	; 0xfffffead
		syserror (ETOOMANY, "cc13");
    2660:	54495753 	strbpl	r5, [r9], #-1875	; 0xfffff8ad
		syserror (EREQPAR, "cc13 mb");
    2664:	545f4843 	ldrbpl	r4, [pc], #-2115	; 266c <phys_cc1350+0x18>
	if (mbs == 0)
    2668:	6e694d00 	cdpvs	13, 6, cr4, cr9, cr0, {0}
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    266c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
		syserror (EREQPAR, "cc13 mb");
    2670:	72700065 	rsbsvc	r0, r0, #101	; 0x65
    2674:	694c7665 	stmdbvs	ip, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
	i = 0;
    2678:	74696d6d 	strbtvc	r6, [r9], #-3437	; 0xfffff293
	rbuffl = (byte) mbs;
    267c:	6e493532 	mcrvs	5, 2, r3, cr9, cr2, {1}
		db->config.type = 0;	// General (data in structure)
    2680:	4e007355 	mcrmi	3, 0, r7, cr0, cr5, {2}
	rbuffl = (byte) mbs;
    2684:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2550 <cc1350_driver+0x148>
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2688:	43534f5f 	cmpmi	r3, #380	; 0x17c
    268c:	4f50485f 	svcmi	0x0050485f
		if (db == NULL)
    2690:	65524353 	ldrbvs	r4, [r2, #-851]	; 0xfffffcad
			syserror (EMALLOC, "cc13");
    2694:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
    2698:	72466576 	subvc	r6, r6, #494927872	; 0x1d800000
    269c:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
		db->status = DATA_ENTRY_PENDING;
    26a0:	4f79636e 	svcmi	0x0079636e
		if (i)
    26a4:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
			da->pNextEntry = (byte*) db;
    26a8:	526f5474 	rsbpl	r5, pc, #116, 8	; 0x74000000
		db->length = rbuffl + 2;
    26ac:	726f4346 	rsbvc	r4, pc, #402653185	; 0x18000001
    26b0:	726f4665 	rsbvc	r4, pc, #105906176	; 0x6500000
		db->config.type = 0;	// General (data in structure)
    26b4:	4374616d 	cmnmi	r4, #1073741851	; 0x4000001b
		db->length = rbuffl + 2;
    26b8:	65766e6f 	ldrbvs	r6, [r6, #-3695]!	; 0xfffff191
	db->pNextEntry = (byte*) re;
    26bc:	53007472 	movwpl	r7, #1138	; 0x472
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    26c0:	63656c65 	cmnvs	r5, #25856	; 0x6500
    26c4:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 24fc <cc1350_driver+0xf4>
	if (rbuffs == NULL)
    26c8:	65524170 	ldrbvs	r4, [r2, #-368]	; 0xfffffe90
	rbuffs->pCurrEntry = (byte*) re;
    26cc:	69750066 	ldmdbvs	r5!, {r1, r2, r5, r6}^
	rbuffs->pLastEntry = NULL;
    26d0:	6c433233 	sfmvs	f3, 2, [r3], {51}	; 0x33
    26d4:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26d8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    26dc:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
    26e0:	76726573 			; <UNDEFINED> instruction: 0x76726573
    26e4:	6f4c6465 	svcvs	0x004c6465
	rbuffl -= 2;
    26e8:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26ec:	00316e6f 	eorseq	r6, r1, pc, ror #28
	rbuffl -= 2;
    26f0:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
	physid = phy;
    26f4:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26f8:	61636f4c 	cmnvs	r3, ip, asr #30
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26fc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2700:	5f5f0032 	svcpl	0x005f0032
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2704:	31746e69 	cmncc	r4, r9, ror #28
    2708:	00745f36 	rsbseq	r5, r4, r6, lsr pc
	utimer_add (&bckf_timer);
    270c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
	drvprcs = runthread (cc1350_driver);
    2710:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    2714:	61636f4c 	cmnvs	r3, ip, asr #30
    2718:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	if (drvprcs == 0)
    271c:	74530035 	ldrbvc	r0, [r3], #-53	; 0xffffffcb
		syserror (ERESOURCE, "cc13");
    2720:	44646e61 	strbtmi	r6, [r4], #-3681	; 0xfffff19f
    2724:	61697665 	cmnvs	r9, r5, ror #12
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2728:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    272c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    2730:	66720065 	ldrbtvs	r0, [r2], -r5, rrx
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2734:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2738:	71657246 	cmnvc	r5, r6, asr #4
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    273c:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    2740:	68007465 	stmdavs	r0, {r0, r2, r5, r6, sl, ip, sp, lr}
    2744:	54686769 	strbtpl	r6, [r8], #-1897	; 0xfffff897
    2748:	73657268 	cmnvc	r5, #104, 4	; 0x80000006
    274c:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xfffff098
    2750:	524f4e00 	subpl	r4, pc, #0, 28
    2754:	4f5f4d4f 	svcmi	0x005f4d4f
    2758:	46484353 			; <UNDEFINED> instruction: 0x46484353
    275c:	6265445f 	rsbvs	r4, r5, #1593835520	; 0x5f000000
	plugch ();
    2760:	65476775 	strbvs	r6, [r7, #-1909]	; 0xfffff88b
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2764:	70784574 	rsbsvc	r4, r8, r4, ror r5
    2768:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    276c:	65764164 	ldrbvs	r4, [r6, #-356]!	; 0xfffffe9c
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2770:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    2774:	73797243 	cmnvc	r9, #805306372	; 0x30000004
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2778:	416c6174 	smcmi	50708	; 0xc614
}
    277c:	696c706d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    2780:	65647574 	strbvs	r7, [r4, #-1396]!	; 0xfffffa8c
    2784:	63736f00 	cmnvs	r3, #0, 30
    2788:	52676643 	rsbpl	r6, r7, #70254592	; 0x4300000
    278c:	6f436765 	svcvs	0x00436765
    2790:	46007970 			; <UNDEFINED> instruction: 0x46007970
    2794:	5f525450 	svcpl	0x00525450
    2798:	46544547 	ldrbmi	r4, [r4], -r7, asr #10
    279c:	5a49534c 	bpl	12574d4 <__ccfg+0x123752c>
    27a0:	00545f45 	subseq	r5, r4, r5, asr #30
    27a4:	4f524f4e 	svcmi	0x00524f4e
    27a8:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    27ac:	5f464843 	svcpl	0x00464843
    27b0:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    27b4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    27b8:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
    27bc:	4600656d 	strmi	r6, [r0], -sp, ror #10
    27c0:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
    27c4:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    27c8:	00657a69 	rsbeq	r7, r5, r9, ror #20
    27cc:	52545046 	subspl	r5, r4, #70	; 0x46
    27d0:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 265c <phys_cc1350+0x8>
    27d4:	45524150 	ldrbmi	r4, [r2, #-336]	; 0xfffffeb0
    27d8:	00545f46 	subseq	r5, r4, r6, asr #30
    27dc:	52545046 	subspl	r5, r4, #70	; 0x46
    27e0:	5445475f 	strbpl	r4, [r5], #-1887	; 0xfffff8a1
    27e4:	50494843 	subpl	r4, r9, r3, asr #16
    27e8:	545f4449 	ldrbpl	r4, [pc], #-1097	; 27f0 <tcv_rcv_null+0x4>
    27ec:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    27f0:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
    27f4:	56524553 			; <UNDEFINED> instruction: 0x56524553
    27f8:	5f354445 	svcpl	0x00354445
    27fc:	61700054 	cmnvs	r0, r4, asr r0
    2800:	506d6172 	rsbpl	r6, sp, r2, ror r1
    2804:	4f4e0030 	svcmi	0x004e0030
    2808:	5f4d4f52 	svcpl	0x004d4f52
    280c:	43434652 	movtmi	r4, #13906	; 0x3652
    2810:	6e496570 	mcrvs	5, 2, r6, cr9, cr0, {3}
    2814:	74654774 	strbtvc	r4, [r5], #-1908	; 0xfffff88c
    2818:	43646e41 	cmnmi	r4, #1040	; 0x410
    281c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2820:	764f7000 	strbvc	r7, [pc], -r0
    2824:	69727265 	ldmdbvs	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2828:	73006564 	movwvc	r6, #1380	; 0x564
    282c:	5f657a69 	svcpl	0x00657a69
    2830:	766f0074 			; <UNDEFINED> instruction: 0x766f0074
    2834:	69727265 	ldmdbvs	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2838:	695f6564 	ldmdbvs	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    283c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    2840:	524f4e00 	subpl	r4, pc, #0, 28
    2844:	525f4d4f 	subspl	r4, pc, #5056	; 0x13c0
    2848:	64414346 	strbvs	r4, [r1], #-838	; 0xfffffcba
    284c:	63563369 	cmpvs	r6, #-1543503871	; 0xa4000001
    2850:	6f644c6f 	svcvs	0x00644c6f
    2854:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xfffff0aa
    2858:	4d656761 	stclmi	7, cr6, [r5, #-388]!	; 0xfffffe7c
    285c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2860:	5f636672 	svcpl	0x00636672
    2864:	5f444d43 	svcpl	0x00444d43
		if (res && (d < n))
    2868:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
    286c:	4441525f 	strbmi	r5, [r1], #-607	; 0xfffffda1
    2870:	535f4f49 	cmppl	pc, #292	; 0x124
    2874:	50555445 	subspl	r5, r5, r5, asr #8
			res [d] = (char) c;
    2878:	4e00745f 	cfmvsrmi	mvf0, r7
		d++;
    287c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2748 <phys_cc1350+0xf4>
    2880:	4346525f 	movtmi	r5, #25183	; 0x625f
    2884:	72546652 	subsvc	r6, r4, #85983232	; 0x5200000
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2888:	65536d69 	ldrbvs	r6, [r3, #-3433]	; 0xfffff297
    288c:	4f4e0074 	svcmi	0x004e0074
    2890:	5f4d4f52 	svcpl	0x004d4f52
				enci (10000);
    2894:	53434652 	movtpl	r4, #13906	; 0x3652
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2898:	68746e79 	ldmdavs	r4!, {r0, r3, r4, r5, r6, r9, sl, fp, sp, lr}^
    289c:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
	d = 0;
    28a0:	776f4472 			; <UNDEFINED> instruction: 0x776f4472
		c = *fm++;
    28a4:	766f006e 	strbtvc	r0, [pc], -lr, rrx
		if (c == '\\') {
    28a8:	69727265 	ldmdbvs	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
			if ((c = *fm++) == '\0') {
    28ac:	725f6564 	subsvc	r6, pc, #100, 10	; 0x19000000
    28b0:	6d697274 	sfmvs	f7, 2, [r9, #-464]!	; 0xfffffe30
				outc ('\\');
    28b4:	704f7000 	subvc	r7, pc, r0
			if ((c = *fm++) == '\0') {
    28b8:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
				outc ('\\');
    28bc:	69750070 	ldmdbvs	r5!, {r4, r5, r6}^
    28c0:	66493233 			; <UNDEFINED> instruction: 0x66493233
			outc (c);
    28c4:	66720067 	ldrbtvs	r0, [r2], -r7, rrx
    28c8:	65645f63 	strbvs	r5, [r4, #-3939]!	; 0xfffff09d
				outc (val);
    28cc:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
				val = (word) va_arg (ap, aword);
    28d0:	71724974 	cmnvc	r2, r4, ror r9
		if (c == '%') {
    28d4:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    28d8:	524f4e00 	subpl	r4, pc, #0, 28
			c = *fm++;
    28dc:	525f4d4f 	subspl	r4, pc, #5056	; 0x13c0
    28e0:	50434346 	subpl	r4, r3, r6, asr #6
			switch (c) {
    28e4:	74615045 	strbtvc	r5, [r1], #-69	; 0xffffffbb
    28e8:	65526863 	ldrbvs	r6, [r2, #-2147]	; 0xfffff79d
    28ec:	00746573 	rsbseq	r6, r4, r3, ror r5
    28f0:	5f636672 	svcpl	0x00636672
    28f4:	5f444d43 	svcpl	0x00444d43
    28f8:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
    28fc:	4441525f 	strbmi	r5, [r1], #-607	; 0xfffffda1
				outc ('%');
    2900:	535f4f49 	cmppl	pc, #292	; 0x124
    2904:	50555445 	subspl	r5, r5, r5, asr #8
    2908:	7000735f 	andvc	r7, r0, pc, asr r3
				outc (c);
    290c:	72546652 	subsvc	r6, r4, #85983232	; 0x5200000
			outc (c);
    2910:	6f006d69 	svcvs	0x00006d69
			if (c == '\0')
    2914:	72726576 	rsbsvc	r6, r2, #494927872	; 0x1d800000
				return d;
    2918:	5f656469 	svcpl	0x00656469
}
    291c:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
    2920:	2f2e0065 	svccs	0x002e0065
			switch (c) {
    2924:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2928:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    292c:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
				for (i = 12; ; i -= 4) {
    2930:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
				val = (word) va_arg (ap, aword);
    2934:	722f6269 	eorvc	r6, pc, #-1879048186	; 0x90000006
						[ (val >> i) & 0xf ]);
    2938:	632e6366 			; <UNDEFINED> instruction: 0x632e6366
    293c:	63667200 	cmnvs	r6, #0, 4
    2940:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
					outc (__pi_hex_enc_table
    2944:	4441525f 	strbmi	r5, [r1], #-607	; 0xfffffda1
    2948:	535f4f49 	cmppl	pc, #292	; 0x124
					if (i == 0)
    294c:	50555445 	subspl	r5, r5, r5, asr #8
    2950:	7200735f 	andvc	r7, r0, #2080374785	; 0x7c000001
				for (i = 12; ; i -= 4) {
    2954:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
				val = (word) va_arg (ap, aword);
    2958:	525f444d 	subspl	r4, pc, #1291845632	; 0x4d000000
				if (c == 'd' && (val & 0x8000) != 0) {
    295c:	4f494441 	svcmi	0x00494441
				val = (word) va_arg (ap, aword);
    2960:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
				if (c == 'd' && (val & 0x8000) != 0) {
    2964:	745f5055 	ldrbvc	r5, [pc], #-85	; 296c <__pi_vfparse+0xe4>
    2968:	6e456200 	cdpvs	2, 4, cr6, cr5, cr0, {0}
					outc ('-');
    296c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    2970:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
					val = (~val) + 1;
    2974:	725f3167 	subsvc	r3, pc, #-1073741799	; 0xc0000019
    2978:	6d697274 	sfmvs	f7, 2, [r9, #-464]!	; 0xfffffe30
				for (i = 12; ; i -= 4) {
    297c:	524f4e00 	subpl	r4, pc, #0, 28
				enci (10000);
    2980:	525f4d4f 	subspl	r4, pc, #5056	; 0x13c0
    2984:	54524346 	ldrbpl	r4, [r2], #-838	; 0xfffffcba
    2988:	006d6972 	rsbeq	r6, sp, r2, ror r9
    298c:	4f524f4e 	svcmi	0x00524f4e
    2990:	46525f4d 	ldrbmi	r5, [r2], -sp, asr #30
    2994:	6f6f4443 	svcvs	0x006f4443
    2998:	6c656272 	sfmvs	f6, 2, [r5], #-456	; 0xfffffe38
    299c:	6e65536c 	cdpvs	3, 6, cr5, cr5, cr12, {3}
    29a0:	006f5464 	rsbeq	r5, pc, r4, ror #8
    29a4:	41434652 	cmpmi	r3, r2, asr r6
    29a8:	6e496b63 	vmlsvs.f64	d22, d9, d19
    29ac:	656c4374 	strbvs	r4, [ip, #-884]!	; 0xfffffc8c
    29b0:	64007261 	strvs	r7, [r0], #-609	; 0xfffffd9f
    29b4:	64697669 	strbtvs	r7, [r9], #-1641	; 0xfffff997
    29b8:	4e007265 	cdpmi	2, 0, cr7, cr0, cr5, {3}
    29bc:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2888 <__pi_vfparse>
    29c0:	4346525f 	movtmi	r5, #25183	; 0x625f
    29c4:	72546652 	subsvc	r6, r4, #85983232	; 0x5200000
				if (c == 'd' || c == 'u') {
    29c8:	65526d69 	ldrbvs	r6, [r2, #-3433]	; 0xfffff297
    29cc:	6d006461 	cfstrsvs	mvf6, [r0, #-388]	; 0xfffffe7c
					if (c == 'd' &&
    29d0:	65723170 	ldrbvs	r3, [r2, #-368]!	; 0xfffffe90
					val = va_arg (ap, lword);
    29d4:	72540076 	subsvc	r0, r4, #118	; 0x76
					fm++;
    29d8:	66416d69 	strbvs	r6, [r1], -r9, ror #26
					if (c == 'd' &&
    29dc:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    29e0:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
						outc ('-');
    29e4:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    29e8:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
						val = (~val) + 1;
    29ec:	72467075 	subvc	r7, r6, #117	; 0x75
				enci (10000);
    29f0:	68536d6f 	ldmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
					enci (1000000000UL);
    29f4:	6f447475 	svcvs	0x00447475
    29f8:	4e006e77 	mcrmi	14, 0, r6, cr0, cr7, {3}
    29fc:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 28c8 <__pi_vfparse+0x40>
    2a00:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    2a04:	66417075 			; <UNDEFINED> instruction: 0x66417075
    2a08:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    2a0c:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
    2a10:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    2a14:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    2a18:	72467075 	subvc	r7, r6, #117	; 0x75
    2a1c:	68536d6f 	ldmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    2a20:	6f447475 	svcvs	0x00447475
    2a24:	66436e77 			; <UNDEFINED> instruction: 0x66436e77
    2a28:	4e003167 	adfmisz	f3, f0, f7
    2a2c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 28f8 <__pi_vfparse+0x70>
    2a30:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    2a34:	66417075 			; <UNDEFINED> instruction: 0x66417075
				} else if (c == 'x') {
    2a38:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
					for (i = 28; ; i -= 4) {
    2a3c:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
					val = va_arg (ap, lword);
    2a40:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
							[ (val >> i) & 0xf ]);
    2a44:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    2a48:	72467075 	subvc	r7, r6, #117	; 0x75
						outc (__pi_hex_enc_table
    2a4c:	68536d6f 	ldmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    2a50:	6f447475 	svcvs	0x00447475
    2a54:	66436e77 			; <UNDEFINED> instruction: 0x66436e77
						if (i == 0)
    2a58:	4e003267 	cdpmi	2, 0, cr3, cr0, cr7, {3}
    2a5c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2928 <__pi_vfparse+0xa0>
					for (i = 28; ; i -= 4) {
    2a60:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
					outc ('%');
    2a64:	66417075 			; <UNDEFINED> instruction: 0x66417075
    2a68:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    2a6c:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
					outc ('l');
    2a70:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    2a74:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
				val = (word) va_arg (ap, aword);
    2a78:	72467075 	subvc	r7, r6, #117	; 0x75
				outc (val);
    2a7c:	68536d6f 	ldmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    2a80:	6f447475 	svcvs	0x00447475
				while (*st != '\0') {
    2a84:	66436e77 			; <UNDEFINED> instruction: 0x66436e77
    2a88:	2e003367 	cdpcs	3, 0, cr3, cr0, cr7, {3}
    2a8c:	2f2e2e2f 	svccs	0x002e2e2f
    2a90:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
					outc (*st);
    2a94:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    2a98:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
					st++;
    2a9c:	2f62696c 	svccs	0x0062696c
		c = *fm++;
    2aa0:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    2aa4:	00632e70 	rsbeq	r2, r3, r0, ror lr
    2aa8:	4f524f4e 	svcmi	0x00524f4e
char *vform (char *res, const char *fm, va_list aq) {
    2aac:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    2ab0:	53707574 	cmnpl	r0, #116, 10	; 0x1d000000
	if (res != NULL) {
    2ab4:	61437465 	cmpvs	r3, r5, ror #8
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2ab8:	4d656863 	stclmi	8, cr6, [r5, #-396]!	; 0xfffffe74
    2abc:	4165646f 	cmnmi	r5, pc, ror #8
    2ac0:	726f6363 	rsbvc	r6, pc, #-1946157055	; 0x8c000001
}
    2ac4:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    2ac8:	63436f54 	movtvs	r6, #16212	; 0x3f54
	fml = strlen (fm) + 17;
    2acc:	65536766 	ldrbvs	r6, [r3, #-1894]	; 0xfffff89a
    2ad0:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
    2ad4:	69750067 	ldmdbvs	r5!, {r0, r1, r2, r5, r6}^
	if ((res = (char*) umalloc (fml)) == NULL)
    2ad8:	63463233 	movtvs	r3, #25139	; 0x6233
    2adc:	52316766 	eorspl	r6, r1, #26738688	; 0x1980000
    2ae0:	73697665 	cmnvc	r9, #105906176	; 0x6500000
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2ae4:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    2ae8:	574e4f41 	strbpl	r4, [lr, -r1, asr #30]
    2aec:	744a4355 	strbvc	r4, [sl], #-853	; 0xfffffcab
    2af0:	6f506761 	svcvs	0x00506761
		ufree (res);
    2af4:	4f726577 	svcmi	0x00726577
		goto Again;
    2af8:	54006666 	strpl	r6, [r0], #-1638	; 0xfffff99a
	if (buf == NULL || fmt == NULL)
    2afc:	416d6972 	smcmi	54930	; 0xd692
int vscan (const char *buf, const char *fmt, va_list ap) {
    2b00:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
	if (buf == NULL || fmt == NULL)
    2b04:	646c6f43 	strbtvs	r6, [ip], #-3907	; 0xfffff0bd
    2b08:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2b0c:	4f4e0074 	svcmi	0x004e0074
		    	    case 'u': scanu (lword); break;
    2b10:	5f4d4f52 	svcpl	0x004d4f52
			while (isspace (*buf)) buf++;
    2b14:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    2b18:	69725470 	ldmdbvs	r2!, {r4, r5, r6, sl, ip, lr}^
	while (*fmt != '\0') {
    2b1c:	7665446d 	strbtvc	r4, [r5], -sp, ror #8
		if (*fmt++ != '%')
    2b20:	00656369 	rsbeq	r6, r5, r9, ror #6
		switch (*fmt++) {
    2b24:	69727476 	ldmdbvs	r2!, {r1, r2, r4, r5, r6, sl, ip, sp, lr}^
    2b28:	64755f6d 	ldrbtvs	r5, [r5], #-3949	; 0xfffff093
    2b2c:	75006769 	strvc	r6, [r0, #-1897]	; 0xfffff897
    2b30:	41323369 	teqmi	r2, r9, ror #6
    2b34:	79536e6f 	ldmdbvc	r3, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2b38:	73655273 	cmnvc	r5, #805306375	; 0x30000007
    2b3c:	74637465 	strbtvc	r7, [r3], #-1125	; 0xfffffb9b
}
    2b40:	6363006c 	cmnvs	r3, #108	; 0x6c
		switch (*fmt++) {
    2b44:	4d5f6766 	ldclmi	7, cr6, [pc, #-408]	; 29b4 <__pi_vfparse+0x12c>
    2b48:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    2b4c:	52666e6f 	rsbpl	r6, r6, #1776	; 0x6f0
    2b50:	54006765 	strpl	r6, [r0], #-1893	; 0xfffff89b
			while (isspace (*buf)) buf++;
    2b54:	416d6972 	smcmi	54930	; 0xd692
    2b58:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
    2b5c:	646c6f43 	strbtvs	r6, [ip], #-3907	; 0xfffff0bd
    2b60:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2b64:	6b615774 	blvs	185893c <__ccfg+0x1838994>
    2b68:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
			if (*buf == '\0')
    2b6c:	536d6f72 	cmnpl	sp, #456	; 0x1c8
			if (*buf != ',') {
    2b70:	44747568 	ldrbtmi	r7, [r4], #-1384	; 0xfffffa98
			sap = va_arg (ap, char*);
    2b74:	576e776f 	strbpl	r7, [lr, -pc, ror #14]!
			nc++;
    2b78:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
			if (*buf != ',') {
    2b7c:	6f724670 	svcvs	0x00724670
				while (!isspace (*buf) && *buf != ',' &&
    2b80:	776f506d 	strbvc	r5, [pc, -sp, rrx]!
    2b84:	6f447265 	svcvs	0x00447265
    2b88:	4e006e77 	mcrmi	14, 0, r6, cr0, cr7, {3}
    2b8c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2a58 <__pi_vfparse+0x1d0>
    2b90:	6968545f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    2b94:	646f4373 	strbtvs	r4, [pc], #-883	; 2b9c <vscan+0xa0>
    2b98:	42734965 	rsbsmi	r4, r3, #1654784	; 0x194000
			while (isspace (*buf)) buf++;
    2b9c:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    2ba0:	43726f46 	cmnmi	r2, #280	; 0x118
    2ba4:	78333143 	ldmdavc	r3!, {r0, r1, r6, r8, ip, sp}
    2ba8:	52774878 	rsbspl	r4, r7, #120, 16	; 0x780000
    2bac:	30327665 	eorscc	r7, r2, r5, ror #12
			if (*buf == ',') buf++;
    2bb0:	4c646e41 	stclmi	14, cr6, [r4], #-260	; 0xfffffefc
    2bb4:	72657461 	rsbvc	r7, r5, #1627389952	; 0x61000000
			*sap = '\0';
    2bb8:	6c61485f 	stclvs	8, cr4, [r1], #-380	; 0xfffffe84
			break;
    2bbc:	56664974 			; <UNDEFINED> instruction: 0x56664974
		    case 'd': scani (word); break;
    2bc0:	616c6f69 	cmnvs	ip, r9, ror #30
    2bc4:	00646574 	rsbeq	r6, r4, r4, ror r5
    2bc8:	69727476 	ldmdbvs	r2!, {r1, r2, r4, r5, r6, sl, ip, sp, lr}^
    2bcc:	6f625f6d 	svcvs	0x00625f6d
    2bd0:	63630064 	cmnvs	r3, #100	; 0x64
    2bd4:	78456766 	stmdavc	r5, {r1, r2, r5, r6, r8, r9, sl, sp, lr}^
    2bd8:	43664c74 	cmnmi	r6, #116, 24	; 0x7400
    2bdc:	63006b6c 	movwvs	r6, #2924	; 0xb6c
    2be0:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    2be4:	6648746e 	strbvs	r7, [r8], -lr, ror #8
    2be8:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2bec:	6975006b 	ldmdbvs	r5!, {r0, r1, r3, r5, r6}^
    2bf0:	64563233 	ldrbvs	r3, [r6], #-563	; 0xfffffdcd
    2bf4:	72547264 	subsvc	r7, r4, #100, 4	; 0x40000006
    2bf8:	61566d69 	cmpvs	r6, r9, ror #26
    2bfc:	4f4e006c 	svcmi	0x004e006c
    2c00:	5f4d4f52 	svcpl	0x004d4f52
    2c04:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    2c08:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    2c0c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    2c10:	41726f46 	cmnmi	r2, r6, asr #30
    2c14:	7962616e 	stmdbvc	r2!, {r1, r2, r3, r5, r6, r8, sp, lr}^
    2c18:	73736170 	cmnvc	r3, #112, 2
    2c1c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    2c20:	4e003165 	adfmisz	f3, f0, f5
    2c24:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2af0 <vform+0x44>
    2c28:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    2c2c:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
		    case 'u': scanu (word); break;
    2c30:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    2c34:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    2c38:	726c6244 	rsbvc	r6, ip, #68, 4	; 0x40000004
    2c3c:	706f6f4c 	rsbvc	r6, pc, ip, asr #30
    2c40:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
    2c44:	65527265 	ldrbvs	r7, [r2, #-613]	; 0xfffffd9b
    2c48:	56746573 			; <UNDEFINED> instruction: 0x56746573
    2c4c:	61746c6f 	cmnvs	r4, pc, ror #24
    2c50:	63006567 	movwvs	r6, #1383	; 0x567
    2c54:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    2c58:	7254746e 	subsvc	r7, r4, #1845493760	; 0x6e000000
    2c5c:	76006d69 	strvc	r6, [r0], -r9, ror #26
    2c60:	43736d69 	cmnmi	r3, #6720	; 0x1a40
    2c64:	6f4d6c74 	svcvs	0x004d6c74
    2c68:	00306564 	eorseq	r6, r0, r4, ror #10
    2c6c:	61696269 	cmnvs	r9, r9, ror #4
    2c70:	66664f73 	uqsub16vs	r4, r6, r3
    2c74:	00746573 	rsbseq	r6, r4, r3, ror r5
		    case 'x': scanx (word); break;
    2c78:	54746567 	ldrbtpl	r6, [r4], #-1383	; 0xfffffa99
    2c7c:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    2c80:	6f58726f 	svcvs	0x0058726f
    2c84:	66686373 			; <UNDEFINED> instruction: 0x66686373
    2c88:	566c7443 	strbtpl	r7, [ip], -r3, asr #8
    2c8c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    2c90:	524f4e00 	subpl	r4, pc, #0, 28
    2c94:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    2c98:	70757465 	rsbsvc	r7, r5, r5, ror #8
    2c9c:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    2ca0:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    2ca4:	6f58726f 	svcvs	0x0058726f
    2ca8:	66486373 			; <UNDEFINED> instruction: 0x66486373
    2cac:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
    2cb0:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    2cb4:	4f4e0074 	svcmi	0x004e0074
    2cb8:	5f4d4f52 	svcpl	0x004d4f52
    2cbc:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    2cc0:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    2cc4:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    2cc8:	52726f46 	rsbspl	r6, r2, #280	; 0x118
    2ccc:	63734f63 	cmnvs	r3, #396	; 0x18c
    2cd0:	4249664c 	submi	r6, r9, #76, 12	; 0x4c00000
    2cd4:	54736169 	ldrbtpl	r6, [r3], #-361	; 0xfffffe97
    2cd8:	006d6972 	rsbeq	r6, sp, r2, ror r9
    2cdc:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
    2ce0:	6a644161 	bvs	191326c <__ccfg+0x18f32c4>
    2ce4:	00747375 	rsbseq	r7, r4, r5, ror r3
    2ce8:	4f524f4e 	svcmi	0x00524f4e
    2cec:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
			switch (*fmt++) {
    2cf0:	47707574 			; <UNDEFINED> instruction: 0x47707574
    2cf4:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    2cf8:	6f466d69 	svcvs	0x00466d69
    2cfc:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    2d00:	43664863 	cmnmi	r6, #6488064	; 0x630000
    2d04:	67006c74 	smlsdxvs	r0, r4, ip, r6
    2d08:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
		    	    case 'd': scani (lword); break;
    2d0c:	6f466d69 	svcvs	0x00466d69
    2d10:	64615272 	strbtvs	r5, [r1], #-626	; 0xfffffd8e
    2d14:	74784563 	ldrbtvc	r4, [r8], #-1379	; 0xfffffa9d
    2d18:	56676643 	strbtpl	r6, [r7], -r3, asr #12
    2d1c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    2d20:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    2d24:	72546174 	subsvc	r6, r4, #116, 2
    2d28:	75006d69 	strvc	r6, [r0, #-3433]	; 0xfffff297
    2d2c:	58323369 	ldmdapl	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
    2d30:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    2d34:	73614666 	cmnvc	r1, #106954752	; 0x6600000
    2d38:	61745374 	cmnvs	r4, r4, ror r3
    2d3c:	61567472 	cmpvs	r6, r2, ror r4
    2d40:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2d44:	4f524f4e 	svcmi	0x00524f4e
    2d48:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    2d4c:	47707574 			; <UNDEFINED> instruction: 0x47707574
    2d50:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    2d54:	6f466d69 	svcvs	0x00466d69
    2d58:	706d4172 	rsbvc	r4, sp, r2, ror r1
    2d5c:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    2d60:	00316854 	eorseq	r6, r1, r4, asr r8
    2d64:	4f524f4e 	svcmi	0x00524f4e
		    	    case 'x': scanx (lword); break;
    2d68:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    2d6c:	47707574 			; <UNDEFINED> instruction: 0x47707574
    2d70:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    2d74:	6f466d69 	svcvs	0x00466d69
    2d78:	706d4172 	rsbvc	r4, sp, r2, ror r1
    2d7c:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    2d80:	00326854 	eorseq	r6, r2, r4, asr r8
    2d84:	4f524f4e 	svcmi	0x00524f4e
    2d88:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    2d8c:	47707574 			; <UNDEFINED> instruction: 0x47707574
    2d90:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    2d94:	6f466d69 	svcvs	0x00466d69
    2d98:	63644172 	cmnvs	r4, #-2147483620	; 0x8000001c
    2d9c:	62566853 	subsvs	r6, r6, #5439488	; 0x530000
    2da0:	6e456675 	mcrvs	6, 2, r6, cr5, cr5, {3}
    2da4:	524f4e00 	subpl	r4, pc, #0, 28
    2da8:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 2db0 <vscan+0x2b4>
    2dac:	32334944 	eorscc	r4, r3, #68, 18	; 0x110000
    2db0:	57676552 			; <UNDEFINED> instruction: 0x57676552
    2db4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    2db8:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    2dbc:	61443167 	cmpvs	r4, r7, ror #2
    2dc0:	74006174 	strvc	r6, [r0], #-372	; 0xfffffe8c
    2dc4:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    2dc8:	6352726f 	cmpvs	r2, #-268435450	; 0xf0000006
    2dcc:	4c63734f 	stclmi	3, cr7, [r3], #-316	; 0xfffffec4
    2dd0:	69424966 	stmdbvs	r2, {r1, r2, r5, r6, r8, fp, lr}^
    2dd4:	72547361 	subsvc	r7, r4, #-2080374783	; 0x84000001
		    	    case 'd': scani (lword); break;
    2dd8:	61566d69 	cmpvs	r6, r9, ror #26
    2ddc:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2de0:	67726174 			; <UNDEFINED> instruction: 0x67726174
    2de4:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    2de8:	4e006d69 	cdpmi	13, 0, cr6, cr0, cr9, {3}
    2dec:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2cb8 <vscan+0x1bc>
    2df0:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
		    	    case 'u': scanu (lword); break;
    2df4:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    2df8:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    2dfc:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    2e00:	63646152 	cmnvs	r4, #-2147483628	; 0x80000014
    2e04:	43747845 	cmnmi	r4, #4521984	; 0x450000
    2e08:	2e006766 	cdpcs	7, 0, cr6, cr0, cr6, {3}
    2e0c:	2f2e2e2f 	svccs	0x002e2e2f
    2e10:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2e14:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    2e18:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2e1c:	2f62696c 	svccs	0x0062696c
    2e20:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    2e24:	6f725f70 	svcvs	0x00725f70
    2e28:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    2e2c:	53627573 	cmnpl	r2, #482344960	; 0x1cc00000
    2e30:	6e496365 	cdpvs	3, 4, cr6, cr9, cr5, {3}
    2e34:	4f4e0063 	svcmi	0x004e0063
    2e38:	5f4d4f52 	svcpl	0x004d4f52
		    	    case 'x': scanx (lword); break;
    2e3c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    2e40:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
			if ((c = *buf++) == '\0')
    2e44:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    2e48:	52726f46 	rsbspl	r6, r2, #280	; 0x118
    2e4c:	63734f63 	cmnvs	r3, #396	; 0x18c
			sap = va_arg (ap, char*);
    2e50:	7452664c 	ldrbvc	r6, [r2], #-1612	; 0xfffff9b4
			*sap = c;
    2e54:	43656e75 	cmnmi	r5, #1872	; 0x750
			while (isspace (*buf)) buf++;
    2e58:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    2e5c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    2e60:	524f4e00 	subpl	r4, pc, #0, 28
    2e64:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
						*sap++ = *buf++;
    2e68:	70757465 	rsbsvc	r7, r5, r5, ror #8
			while (isspace (*buf)) buf++;
    2e6c:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    2e70:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    2e74:	6f58726f 	svcvs	0x0058726f
		return 0;
    2e78:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    2e7c:	75676552 	strbvc	r6, [r7, #-1362]!	; 0xfffffaae
		    case 'x': scanx (word); break;
    2e80:	6f74616c 	svcvs	0x0074616c
    2e84:	646e4172 	strbtvs	r4, [lr], #-370	; 0xfffffe8e
		    	    case 'x': scanx (lword); break;
    2e88:	72696d43 	rsbvc	r6, r9, #4288	; 0x10c0
    2e8c:	52727772 	rsbspl	r7, r2, #29884416	; 0x1c80000
strand (__outserial, const char*)
    2e90:	6f697461 	svcvs	0x00697461
    2e94:	33697500 	cmncc	r9, #0, 10
    2e98:	69725432 	ldmdbvs	r2!, {r1, r4, r5, sl, ip, lr}^
    2e9c:	6553006d 	ldrbvs	r0, [r3, #-109]	; 0xffffff93
endstrand
    2ea0:	53707574 	cmnpl	r0, #116, 10	; 0x1d000000
    2ea4:	456e6769 	strbmi	r6, [lr, #-1897]!	; 0xfffff897
	ptr = data;
    2ea8:	6e657478 	mcrvs	4, 3, r7, cr5, cr8, {3}
    2eac:	64645664 	strbtvs	r5, [r4], #-1636	; 0xfffff99c
	if (*ptr)
    2eb0:	69725472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, lr}^
		len = strlen (ptr);
    2eb4:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
    2eb8:	67006575 	smlsdxvs	r0, r5, r5, r6
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    2ebc:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    2ec0:	6f466d69 	svcvs	0x00466d69
    2ec4:	63644172 	cmnvs	r4, #-2147483620	; 0x8000001c
    2ec8:	62566853 	subsvs	r6, r6, #5439488	; 0x530000
    2ecc:	6e456675 	mcrvs	6, 2, r6, cr5, cr5, {3}
	len -= quant;
    2ed0:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    2ed4:	4f4e0065 	svcmi	0x004e0065
    2ed8:	5f4d4f52 	svcpl	0x004d4f52
	if (len == 0) {
    2edc:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
		ufree (data);
    2ee0:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
		finish;
    2ee4:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    2ee8:	41726f46 	cmnmi	r2, r6, asr #30
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    2eec:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    2ef0:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    2ef4:	69006e45 	stmdbvs	r0, {r0, r2, r6, r9, sl, fp, sp, lr}
    2ef8:	69533233 	ldmdbvs	r3, {r0, r1, r4, r5, r9, ip, sp}^
    2efc:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
strand (__inserial, address)
    2f00:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    2f04:	006c6156 	rsbeq	r6, ip, r6, asr r1
    2f08:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
    2f0c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2f10:	69750031 	ldmdbvs	r5!, {r0, r4, r5}^
	if (__inpline != NULL)
    2f14:	63463233 	movtvs	r3, #25139	; 0x6233
    2f18:	56316766 	ldrtpl	r6, [r1], -r6, ror #14
		finish;
    2f1c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    2f20:	524f4e00 	subpl	r4, pc, #0, 28
    2f24:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    2f28:	70757465 	rsbsvc	r7, r5, r5, ror #8
    2f2c:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
		umwait (IM_INIT);
    2f30:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
		release;
    2f34:	6f58726f 	svcvs	0x0058726f
	savedata (data);
    2f38:	66486373 			; <UNDEFINED> instruction: 0x66486373
	len = MAX_LINE_LENGTH;
    2f3c:	61696249 	cmnvs	r9, r9, asr #4
	io (IM_READ, __cport, READ, ptr, 1);
    2f40:	65687473 	strbvs	r7, [r8, #-1139]!	; 0xfffffb8d
    2f44:	67006d72 	smlsdxvs	r0, r2, sp, r6
    2f48:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    2f4c:	6f466d69 	svcvs	0x00466d69
	if (ptr == (char*) data) { // new line
    2f50:	63644172 	cmnvs	r4, #-2147483620	; 0x8000001c
    2f54:	6f4d6853 	svcvs	0x004d6853
		if (*ptr == '\0') { // bin cmd
    2f58:	6e456564 	cdpvs	5, 4, cr6, cr5, cr4, {3}
			proceed (IM_BIN);
    2f5c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    2f60:	33690065 	cmncc	r9, #101	; 0x65
		if (*ptr < 0x20)
    2f64:	64645632 	strbtvs	r5, [r4], #-1586	; 0xfffff9ce
    2f68:	656c5372 	strbvs	r5, [ip, #-882]!	; 0xfffffc8e
			proceed (IM_READ);
    2f6c:	72547065 	subsvc	r7, r4, #101	; 0x65
    2f70:	66006d69 	strvs	r6, [r0], -r9, ror #26
	if (*ptr == '\n' || *ptr == '\r') {
    2f74:	31676663 	cmncc	r7, r3, ror #12
    2f78:	4363734f 	cmnmi	r3, #1006632961	; 0x3c000001
    2f7c:	00666e6f 	rsbeq	r6, r6, pc, ror #28
		*ptr = '\0';
    2f80:	726c6264 	rsbvc	r6, ip, #100, 4	; 0x40000006
		__inpline = (char*)data;
    2f84:	706f6f4c 	rsbvc	r6, pc, ip, asr #30
		finish;
    2f88:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
	if (len) {
    2f8c:	65527265 	ldrbvs	r7, [r2, #-613]	; 0xfffffd9b
		ptr++;
    2f90:	56746573 			; <UNDEFINED> instruction: 0x56746573
    2f94:	61746c6f 	cmnvs	r4, pc, ror #24
		len--;
    2f98:	61566567 	cmpvs	r6, r7, ror #10
	proceed (IM_READ);
    2f9c:	0065756c 	rsbeq	r7, r5, ip, ror #10
	io (IM_BIN, __cport, READ, ptr, 1);
    2fa0:	6d697274 	sfmvs	f7, 2, [r9, #-464]!	; 0xfffffe30
    2fa4:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    2fa8:	4c63736f 	stclmi	3, cr7, [r3], #-444	; 0xfffffe44
    2fac:	67655266 	strbvs	r5, [r5, -r6, ror #4]!
    2fb0:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xfffff38b
	len -= 2;
    2fb4:	6e41726f 	cdpvs	2, 4, cr7, cr1, cr15, {3}
	if (len > *ptr + 1) // 1 for 0x04
    2fb8:	696d4364 	stmdbvs	sp!, {r2, r5, r6, r8, r9, lr}^
    2fbc:	72777272 	rsbsvc	r7, r7, #536870919	; 0x20000007
		len = *ptr + 1;
    2fc0:	69746152 	ldmdbvs	r4!, {r1, r4, r6, r8, sp, lr}^
    2fc4:	6c61566f 	stclvs	6, cr5, [r1], #-444	; 0xfffffe44
	ptr++;
    2fc8:	69006575 	stmdbvs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
	quant = io (IM_BINL, __cport, READ, ptr, len);
    2fcc:	73616962 	cmnvc	r1, #1605632	; 0x188000
    2fd0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    2fd4:	524f4e00 	subpl	r4, pc, #0, 28
    2fd8:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    2fdc:	70757465 	rsbsvc	r7, r5, r5, ror #8
    2fe0:	41746553 	cmnmi	r4, r3, asr r5
	len -= quant;
    2fe4:	74526e6f 	ldrbvc	r6, [r2], #-3695	; 0xfffff191
		__inpline = (char*)data;
    2fe8:	62755363 	rsbsvs	r5, r5, #-1946157055	; 0x8c000001
		finish;
    2fec:	49636553 	stmdbmi	r3!, {r0, r1, r4, r6, r8, sl, sp, lr}^
	ptr += quant;
    2ff0:	4e00636e 	cdpmi	3, 0, cr6, cr0, cr14, {3}
    2ff4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2ec0 <__outserial+0x30>
endstrand
    2ff8:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    2ffc:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
	proceed (IM_BINL);
    3000:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
endstrand
    3004:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3008:	63706d41 	cmnvs	r0, #4160	; 0x1040
    300c:	43706d6f 	cmnmi	r0, #7104	; 0x1bc0
    3010:	006c7274 	rsbeq	r7, ip, r4, ror r2
    3014:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3018:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    301c:	6f526648 	svcvs	0x00526648
    3020:	69750077 	ldmdbvs	r5!, {r0, r1, r2, r4, r5, r6}^
    3024:	6f583233 	svcvs	0x00583233
    3028:	66486373 			; <UNDEFINED> instruction: 0x66486373
    302c:	006c6f43 	rsbeq	r6, ip, r3, asr #30
    3030:	4f524f4e 	svcmi	0x00524f4e
    3034:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3038:	53707574 	cmnpl	r0, #116, 10	; 0x1d000000
    303c:	64567465 	ldrbvs	r7, [r6], #-1125	; 0xfffffb9b
    3040:	654c7264 	strbvs	r7, [ip, #-612]	; 0xfffffd9c
    3044:	006c6576 	rsbeq	r6, ip, r6, ror r5
    3048:	5477656e 	ldrbtpl	r6, [r7], #-1390	; 0xfffffa92
    304c:	526d6972 	rsbpl	r6, sp, #1867776	; 0x1c8000
    3050:	75007761 	strvc	r7, [r0, #-1889]	; 0xfffff89f
    3054:	54323369 	ldrtpl	r3, [r2], #-873	; 0xfffffc97
    3058:	566d6972 			; <UNDEFINED> instruction: 0x566d6972
    305c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3060:	32336900 	eorscc	r6, r3, #0, 18
    3064:	74737543 	ldrbtvc	r7, [r3], #-1347	; 0xfffffabd
    3068:	72656d6f 	rsbvc	r6, r5, #7104	; 0x1bc0
    306c:	746c6544 	strbtvc	r6, [ip], #-1348	; 0xfffffabc
    3070:	6a644161 	bvs	19135fc <__ccfg+0x18f3654>
    3074:	00747375 	rsbseq	r7, r4, r5, ror r3
    3078:	56323369 	ldrtpl	r3, [r2], -r9, ror #6
    307c:	53726464 	cmnpl	r2, #100, 8	; 0x64000000
    3080:	7065656c 	rsbvc	r6, r5, ip, ror #10
    3084:	746c6544 	strbtvc	r6, [ip], #-1348	; 0xfffffabc
    3088:	64760061 	ldrbtvs	r0, [r6], #-97	; 0xffffff9f
    308c:	72547264 	subsvc	r7, r4, #100, 4	; 0x40000006
    3090:	63416d69 	movtvs	r6, #7529	; 0x1d69
    3094:	00657674 	rsbeq	r7, r5, r4, ror r6
    3098:	54727563 	ldrbtpl	r7, [r2], #-1379	; 0xfffffa9d
    309c:	00706d65 	rsbseq	r6, r0, r5, ror #26
    30a0:	66666964 	strbtvs	r6, [r6], -r4, ror #18
    30a4:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    30a8:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    30ac:	6c536576 	cfldr64vs	mvdx6, [r3], {118}	; 0x76
    30b0:	00706565 	rsbseq	r6, r0, r5, ror #10
    30b4:	6d637270 	sfmvs	f7, 2, [r3, #-448]!	; 0xfffffe40
    30b8:	526d6152 	rsbpl	r6, sp, #-2147483628	; 0x80000014
    30bc:	6e657465 	cdpvs	4, 6, cr7, cr5, cr5, {3}
    30c0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    30c4:	524f4e00 	subpl	r4, pc, #0, 28
    30c8:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    30cc:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    30d0:	64416c72 	strbvs	r6, [r1], #-3186	; 0xfffff38e
    30d4:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
    30d8:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    30dc:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    30e0:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    30e4:	776f5072 			; <UNDEFINED> instruction: 0x776f5072
    30e8:	6f447265 	svcvs	0x00447265
    30ec:	4e006e77 	mcrmi	14, 0, r6, cr0, cr7, {3}
    30f0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2fbc <__inserial+0xbc>
    30f4:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    30f8:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    30fc:	52746553 	rsbspl	r6, r4, #348127232	; 0x14c00000
    3100:	61686365 	cmnvs	r8, r5, ror #6
    3104:	42656772 	rsbmi	r6, r5, #29884416	; 0x1c80000
    3108:	726f6665 	rsbvc	r6, pc, #105906176	; 0x6500000
    310c:	776f5065 	strbvc	r5, [pc, -r5, rrx]!
    3110:	6f447265 	svcvs	0x00447265
    3114:	2e006e77 	mcrcs	14, 0, r6, cr0, cr7, {3}
    3118:	2f2e2e2f 	svccs	0x002e2e2f
    311c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3120:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    3124:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3128:	2f62696c 	svccs	0x0062696c
    312c:	5f737973 	svcpl	0x00737973
    3130:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    3134:	4e00632e 	cdpmi	3, 0, cr6, cr0, cr14, {1}
    3138:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3004 <__inserial+0x104>
    313c:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    3140:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    3144:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    3148:	756f5374 	strbvc	r5, [pc, #-884]!	; 2ddc <vscan+0x2e0>
    314c:	47656372 			; <UNDEFINED> instruction: 0x47656372
    3150:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
    3154:	44323369 	ldrtmi	r3, [r2], #-873	; 0xfffffc97
    3158:	69616d6f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    315c:	7000736e 	andvc	r7, r0, lr, ror #6
    3160:	00457265 	subeq	r7, r5, r5, ror #4
    3164:	65546470 	ldrbvs	r6, [r4, #-1136]	; 0xfffffb90
    3168:	7500706d 	strvc	r7, [r0, #-109]	; 0xffffff93
    316c:	41323369 	teqmi	r2, r9, ror #6
    3170:	6c437875 	mcrrvs	8, 7, r7, r3, cr5
    3174:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    3178:	43525000 	cmpmi	r2, #0
    317c:	6d6f444d 	cfstrdvs	mvd4, [pc, #-308]!	; 3050 <NOROM_AONBatMonTemperatureGetDegC+0xc>
    3180:	456e6961 	strbmi	r6, [lr, #-2401]!	; 0xfffff69f
    3184:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    3188:	65700065 	ldrbvs	r0, [r0, #-101]!	; 0xffffff9b
    318c:	6e004d72 	mcrvs	13, 0, r4, cr0, cr2, {3}
    3190:	65527765 	ldrbvs	r7, [r2, #-1893]	; 0xfffff89b
    3194:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    3198:	65506567 	ldrbvs	r6, [r0, #-1383]	; 0xfffffa99
    319c:	646f6972 	strbtvs	r6, [pc], #-2418	; 31a4 <NOROM_OSCHF_AttemptToSwitchToXosc+0x48>
    31a0:	64647600 	strbtvs	r7, [r4], #-1536	; 0xfffffa00
    31a4:	70614372 	rsbvc	r4, r1, r2, ror r3
    31a8:	33697500 	cmncc	r9, #0, 10
    31ac:	78644932 	stmdavc	r4!, {r1, r4, r5, r8, fp, lr}^
    31b0:	53647000 	cmnpl	r4, #0
    31b4:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    31b8:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
    31bc:	74736567 	ldrbtvc	r6, [r3], #-1383	; 0xfffffa99
    31c0:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    31c4:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    31c8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    31cc:	6400646f 	strvs	r6, [r0], #-1135	; 0xfffffb91
    31d0:	61746c65 	cmnvs	r4, r5, ror #24
    31d4:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    31d8:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
    31dc:	69725470 	ldmdbvs	r2!, {r4, r5, r6, sl, ip, lr}^
    31e0:	6162006d 	cmnvs	r2, sp, rrx
    31e4:	72685474 	rsbvc	r5, r8, #116, 8	; 0x74000000
    31e8:	6f687365 	svcvs	0x00687365
    31ec:	7800646c 	stmdavc	r0, {r2, r3, r5, r6, sl, sp, lr}
    31f0:	5063736f 	rsbpl	r7, r3, pc, ror #6
    31f4:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    31f8:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    31fc:	43525000 	cmpmi	r2, #0
    3200:	616f4c4d 	cmnvs	pc, sp, asr #24
    3204:	74654764 	strbtvc	r4, [r5], #-1892	; 0xfffff89c
    3208:	69687300 	stmdbvs	r8!, {r8, r9, ip, sp, lr}^
    320c:	64657466 	strbtvs	r7, [r5], #-1126	; 0xfffffb9a
    3210:	706d6554 	rsbvc	r6, sp, r4, asr r5
    3214:	44637400 	strbtmi	r7, [r3], #-1024	; 0xfffffc00
    3218:	61746c65 	cmnvs	r4, r5, ror #24
    321c:	705f6700 	subsvc	r6, pc, r0, lsl #14
    3220:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3224:	75646f4d 	strbvc	r6, [r4, #-3917]!	; 0xfffff0b3
    3228:	4743656c 	strbmi	r6, [r3, -ip, ror #10]
    322c:	72756300 	rsbsvc	r6, r5, #0, 6
    3230:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    3234:	6f610065 	svcvs	0x00610065
    3238:	7379536e 	cmnvc	r9, #-1207959551	; 0xb8000001
    323c:	506c7463 	rsbpl	r7, ip, r3, ror #8
    3240:	74637277 	strbtvc	r7, [r3], #-631	; 0xfffffd89
    3244:	6470006c 	ldrbtvs	r0, [r0], #-108	; 0xffffff94
    3248:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    324c:	524f4e00 	subpl	r4, pc, #0, 28
    3250:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3254:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    3258:	6f506c72 	svcvs	0x00506c72
    325c:	45726577 	ldrbmi	r6, [r2, #-1399]!	; 0xfffffa89
    3260:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    3264:	6e696874 	mcrvs	8, 3, r6, cr9, cr4, {3}
    3268:	4c700067 	ldclmi	0, cr0, [r0], #-412	; 0xfffffe64
    326c:	756b6f6f 	strbvc	r6, [fp, #-3951]!	; 0xfffff091
    3270:	62615470 	rsbvs	r5, r1, #112, 8	; 0x70000000
    3274:	7000656c 	andvc	r6, r0, ip, ror #10
    3278:	63655264 	cmnvs	r5, #100, 4	; 0x40000006
    327c:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    3280:	72655065 	rsbvc	r5, r5, #101	; 0x65
    3284:	00646f69 	rsbeq	r6, r4, r9, ror #30
    3288:	426e6f61 	rsbmi	r6, lr, #388	; 0x184
    328c:	6f6d7461 	svcvs	0x006d7461
    3290:	7461426e 	strbtvc	r4, [r1], #-622	; 0xfffffd92
    3294:	64647600 	strbtvs	r7, [r4], #-1536	; 0xfffffa00
    3298:	69725472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, lr}^
    329c:	656c536d 	strbvs	r5, [ip, #-877]!	; 0xfffffc93
    32a0:	50007065 	andpl	r7, r0, r5, rrx
    32a4:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    32a8:	6c617551 	cfstr64vs	mvdx7, [r1], #-324	; 0xfffffebc
    32ac:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
    32b0:	5f736c61 	svcpl	0x00736c61
    32b4:	4f4e0074 	svcmi	0x004e0074
    32b8:	5f4d4f52 	svcpl	0x004d4f52
    32bc:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    32c0:	5f6c7274 	svcpl	0x006c7274
    32c4:	43444344 	movtmi	r4, #17220	; 0x4344
    32c8:	6c6f565f 	stclvs	6, cr5, [pc], #-380	; 3154 <NOROM_OSCHF_TurnOnXosc+0x10>
    32cc:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    32d0:	646e6f43 	strbtvs	r6, [lr], #-3907	; 0xfffff0bd
    32d4:	6f697469 	svcvs	0x00697469
    32d8:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    32dc:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    32e0:	70006c6f 	andvc	r6, r0, pc, ror #24
    32e4:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    32e8:	6c617551 	cfstr64vs	mvdx7, [r1], #-324	; 0xfffffebc
    32ec:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
    32f0:	00736c61 	rsbseq	r6, r3, r1, ror #24
    32f4:	544f5250 	strbpl	r5, [pc], #-592	; 32fc <NOROM_RFCRfTrimRead+0x98>
    32f8:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    32fc:	5f544942 	svcpl	0x00544942
    3300:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
    3304:	74656972 	strbtvc	r6, [r5], #-2418	; 0xfffff68e
    3308:	00797261 	rsbseq	r7, r9, r1, ror #4
    330c:	4b434150 	blmi	10d3854 <__ccfg+0x10b38ac>
    3310:	5f454741 	svcpl	0x00454741
    3314:	00347834 	eorseq	r7, r4, r4, lsr r8
    3318:	50494843 	subpl	r4, r9, r3, asr #16
    331c:	5059545f 	subspl	r5, r9, pc, asr r4
    3320:	43435f45 	movtmi	r5, #16197	; 0x3f45
    3324:	30343632 	eorscc	r3, r4, r2, lsr r6
    3328:	66617700 	strbtvs	r7, [r1], -r0, lsl #14
    332c:	64497265 	strbvs	r7, [r9], #-613	; 0xfffffd9b
    3330:	4d414600 	stclmi	6, cr4, [r1, #-0]
    3334:	5f594c49 	svcpl	0x00594c49
    3338:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    333c:	4c5f7878 	mrrcmi	8, 7, r7, pc, cr8	; <UNPREDICTABLE>
    3340:	4e007a69 	vmlsmi.f32	s14, s0, s19
    3344:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3210 <NOROM_RFCDoorbellSendTo+0x20>
    3348:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    334c:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    3350:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    3354:	69684374 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, lr}^
    3358:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    335c:	00796c69 	rsbseq	r6, r9, r9, ror #24
    3360:	4f524f4e 	svcmi	0x00524f4e
    3364:	68435f4d 	stmdavs	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    3368:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    336c:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    3370:	61507465 	cmpvs	r0, r5, ror #8
    3374:	67616b63 	strbvs	r6, [r1, -r3, ror #22]!
    3378:	70795465 	rsbsvc	r5, r9, r5, ror #8
    337c:	4f4e0065 	svcmi	0x004e0065
    3380:	5f4d4f52 	svcpl	0x004d4f52
    3384:	70696843 	rsbvc	r6, r9, r3, asr #16
    3388:	6f666e49 	svcvs	0x00666e49
    338c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    3390:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    3394:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    3398:	70006e6f 	andvc	r6, r0, pc, ror #28
    339c:	546b6361 	strbtpl	r6, [fp], #-865	; 0xfffffc9f
    33a0:	00657079 	rsbeq	r7, r5, r9, ror r0
    33a4:	70696843 	rsbvc	r6, r9, r3, asr #16
    33a8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    33ac:	4800745f 	stmdami	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
    33b0:	76655277 			; <UNDEFINED> instruction: 0x76655277
    33b4:	6f697369 	svcvs	0x00697369
    33b8:	00745f6e 	rsbseq	r5, r4, lr, ror #30
    33bc:	50494843 	subpl	r4, r9, r3, asr #16
    33c0:	5059545f 	subspl	r5, r9, pc, asr r4
    33c4:	43435f45 	movtmi	r5, #16197	; 0x3f45
    33c8:	30313331 	eorscc	r3, r1, r1, lsr r3
    33cc:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    33d0:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    33d4:	5f796c69 	svcpl	0x00796c69
    33d8:	77680074 			; <UNDEFINED> instruction: 0x77680074
    33dc:	00766552 	rsbseq	r6, r6, r2, asr r5
    33e0:	50494843 	subpl	r4, r9, r3, asr #16
    33e4:	5059545f 	subspl	r5, r9, pc, asr r4
    33e8:	43435f45 	movtmi	r5, #16197	; 0x3f45
    33ec:	30353632 	eorscc	r3, r5, r2, lsr r6
    33f0:	43415000 	movtmi	r5, #4096	; 0x1000
    33f4:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    33f8:	5343575f 	movtpl	r5, #14175	; 0x375f
    33fc:	696d0050 	stmdbvs	sp!, {r4, r6}^
    3400:	52726f6e 	rsbspl	r6, r2, #440	; 0x1b8
    3404:	46007665 	strmi	r7, [r0], -r5, ror #12
    3408:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    340c:	43435f59 	movtmi	r5, #16217	; 0x3f59
    3410:	78783632 	ldmdavc	r8!, {r1, r4, r5, r9, sl, ip, sp}^
    3414:	0032525f 	eorseq	r5, r2, pc, asr r2
    3418:	50494843 	subpl	r4, r9, r3, asr #16
    341c:	5059545f 	subspl	r5, r9, pc, asr r4
    3420:	43435f45 	movtmi	r5, #16197	; 0x3f45
    3424:	30353331 	eorscc	r3, r5, r1, lsr r3
    3428:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    342c:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    3430:	68435f6f 	stmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    3434:	61467069 	cmpvs	r6, r9, rrx
    3438:	796c696d 	stmdbvc	ip!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^
    343c:	43437349 	movtmi	r7, #13129	; 0x3349
    3440:	78783331 	ldmdavc	r8!, {r0, r4, r5, r8, r9, ip, sp}^
    3444:	4d414600 	stclmi	6, cr4, [r1, #-0]
    3448:	5f594c49 	svcpl	0x00594c49
    344c:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    3450:	006e776f 	rsbeq	r7, lr, pc, ror #14
    3454:	50494843 	subpl	r4, r9, r3, asr #16
    3458:	5059545f 	subspl	r5, r9, pc, asr r4
    345c:	43435f45 	movtmi	r5, #16197	; 0x3f45
    3460:	30323632 	eorscc	r3, r2, r2, lsr r6
    3464:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    3468:	65523167 	ldrbvs	r3, [r2, #-359]	; 0xfffffe99
    346c:	41460076 	hvcmi	24582	; 0x6006
    3470:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    3474:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    3478:	00787836 	rsbseq	r7, r8, r6, lsr r8
    347c:	70696863 	rsbvc	r6, r9, r3, ror #16
    3480:	006d6146 	rsbeq	r6, sp, r6, asr #2
    3484:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    3488:	6e555f56 	mrcvs	15, 2, r5, cr5, cr6, {2}
    348c:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    3490:	6366006e 	cmnvs	r6, #110	; 0x6e
    3494:	50316766 	eorspl	r6, r1, r6, ror #14
    3498:	6f746f72 	svcvs	0x00746f72
    349c:	006c6f63 	rsbeq	r6, ip, r3, ror #30
    34a0:	746f7250 	strbtvc	r7, [pc], #-592	; 34a8 <NOROM_RFCRTrim+0xf4>
    34a4:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 32f0 <NOROM_RFCRfTrimRead+0x8c>
    34a8:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
    34ac:	6f746365 	svcvs	0x00746365
    34b0:	00745f72 	rsbseq	r5, r4, r2, ror pc
    34b4:	544f5250 	strbpl	r5, [pc], #-592	; 34bc <NOROM_RFCRTrim+0x108>
    34b8:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    34bc:	5f544942 	svcpl	0x00544942
    34c0:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
    34c4:	3230385f 	eorscc	r3, r0, #6225920	; 0x5f0000
    34c8:	5f35315f 	svcpl	0x0035315f
    34cc:	48430034 	stmdami	r3, {r2, r4, r5}^
    34d0:	545f5049 	ldrbpl	r5, [pc], #-73	; 34d8 <NOROM_RFCRfTrimSet+0xc>
    34d4:	5f455059 	svcpl	0x00455059
    34d8:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    34dc:	006e776f 	rsbeq	r7, lr, pc, ror #14
    34e0:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    34e4:	5f325f56 	svcpl	0x00325f56
    34e8:	41460032 	cmpmi	r6, r2, lsr r0
    34ec:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    34f0:	3143435f 	cmpcc	r3, pc, asr r3
    34f4:	00787833 	rsbseq	r7, r8, r3, lsr r8
    34f8:	4b434150 	blmi	10d3a40 <__ccfg+0x10b3a98>
    34fc:	5f454741 	svcpl	0x00454741
    3500:	00377837 	eorseq	r7, r7, r7, lsr r8
    3504:	544f5250 	strbpl	r5, [pc], #-592	; 350c <TrimAfterColdResetWakeupFromShutDown+0x4>
    3508:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    350c:	6b6e555f 	blvs	1b98a90 <__ccfg+0x1b78ae8>
    3510:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
    3514:	52574800 	subspl	r4, r7, #0, 16
    3518:	325f5645 	subscc	r5, pc, #72351744	; 0x4500000
    351c:	4e00305f 	mcrmi	0, 0, r3, cr0, cr15, {2}
    3520:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 33ec <NOROM_RFCRTrim+0x38>
    3524:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    3528:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    352c:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    3530:	69684374 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, lr}^
    3534:	70795470 	rsbsvc	r5, r9, r0, ror r4
    3538:	57480065 	strbpl	r0, [r8, -r5, rrx]
    353c:	5f564552 	svcpl	0x00564552
    3540:	00315f32 	eorseq	r5, r1, r2, lsr pc
    3544:	544f5250 	strbpl	r5, [pc], #-592	; 354c <TrimAfterColdResetWakeupFromShutDown+0x44>
    3548:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    354c:	5f544942 	svcpl	0x00544942
    3550:	00454c42 	subeq	r4, r5, r2, asr #24
    3554:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    3558:	435f594c 	cmpmi	pc, #76, 18	; 0x130000
    355c:	78363243 	ldmdavc	r6!, {r0, r1, r6, r9, ip, sp}
    3560:	67415f78 	smlsldxvs	r5, r1, r8, pc	; <UNPREDICTABLE>
    3564:	57480061 	strbpl	r0, [r8, -r1, rrx]
    3568:	5f564552 	svcpl	0x00564552
    356c:	00335f32 	eorseq	r5, r3, r2, lsr pc
    3570:	70696863 	rsbvc	r6, r9, r3, ror #16
    3574:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    3578:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    357c:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    3580:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    3584:	4f545355 	svcmi	0x00545355
    3588:	00305f4d 	eorseq	r5, r0, sp, asr #30
    358c:	50494843 	subpl	r4, r9, r3, asr #16
    3590:	5059545f 	subspl	r5, r9, pc, asr r4
    3594:	55435f45 	strbpl	r5, [r3, #-3909]	; 0xfffff0bb
    3598:	4d4f5453 	cfstrdmi	mvd5, [pc, #-332]	; 3454 <NOROM_RFCRTrim+0xa0>
    359c:	4300315f 	movwmi	r3, #351	; 0x15f
    35a0:	5f504948 	svcpl	0x00504948
    35a4:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    35a8:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    35ac:	00303336 	eorseq	r3, r0, r6, lsr r3
    35b0:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    35b4:	5f315f56 	svcpl	0x00315f56
    35b8:	41500030 	cmpmi	r0, r0, lsr r0
    35bc:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    35c0:	6e555f45 	cdpvs	15, 5, cr5, cr5, cr5, {2}
    35c4:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    35c8:	2f2e006e 	svccs	0x002e006e
    35cc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    35d0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    35d4:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    35d8:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    35dc:	632f6269 			; <UNDEFINED> instruction: 0x632f6269
    35e0:	69706968 	ldmdbvs	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    35e4:	2e6f666e 	cdpcs	6, 6, cr6, cr15, cr14, {3}
    35e8:	63660063 	cmnvs	r6, #99	; 0x63
    35ec:	55316766 	ldrpl	r6, [r1, #-1894]!	; 0xfffff89a
    35f0:	49726573 	ldmdbmi	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    35f4:	68430064 	stmdavs	r3, {r2, r5, r6}^
    35f8:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    35fc:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    3600:	65447465 	strbvs	r7, [r4, #-1125]	; 0xfffffb9b
    3604:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    3608:	77486449 	strbvc	r6, [r8, -r9, asr #8]
    360c:	43766552 	cmnmi	r6, #343932928	; 0x14800000
    3610:	0065646f 	rsbeq	r6, r5, pc, ror #8
    3614:	70696843 	rsbvc	r6, r9, r3, asr #16
    3618:	6f666e49 	svcvs	0x00666e49
    361c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    3620:	6f6e694d 	svcvs	0x006e694d
    3624:	52774872 	rsbspl	r4, r7, #7471104	; 0x720000
    3628:	6d007665 	stcvs	6, cr7, [r0, #-404]	; 0xfffffe6c
    362c:	726f6e69 	rsbvc	r6, pc, #1680	; 0x690
    3630:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    3634:	4f4e0076 	svcmi	0x004e0076
    3638:	5f4d4f52 	svcpl	0x004d4f52
    363c:	70696843 	rsbvc	r6, r9, r3, asr #16
    3640:	6f666e49 	svcvs	0x00666e49
    3644:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    3648:	70707553 	rsbsvc	r7, r0, r3, asr r5
    364c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    3650:	6f725064 	svcvs	0x00725064
    3654:	6f636f74 	svcvs	0x00636f74
    3658:	56425f6c 	strbpl	r5, [r2], -ip, ror #30
    365c:	43415000 	movtmi	r5, #4096	; 0x1000
    3660:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    3664:	4641575f 			; <UNDEFINED> instruction: 0x4641575f
    3668:	50005245 	andpl	r5, r0, r5, asr #4
    366c:	414b4341 	cmpmi	fp, r1, asr #6
    3670:	355f4547 	ldrbcc	r4, [pc, #-1351]	; 3131 <NOROM_OSCClockSourceGet+0x19>
    3674:	50003578 	andpl	r3, r0, r8, ror r5
    3678:	616b6361 	cmnvs	fp, r1, ror #6
    367c:	79546567 	ldmdbvc	r4, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
    3680:	745f6570 	ldrbvc	r6, [pc], #-1392	; 3688 <NOROM_SetupSetVddrLevel+0x8>
    3684:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    3688:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    368c:	77485f6f 	strbvc	r5, [r8, -pc, ror #30]
    3690:	69766552 	ldmdbvs	r6!, {r1, r4, r6, r8, sl, sp, lr}^
    3694:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    3698:	475f7349 	ldrbmi	r7, [pc, -r9, asr #6]
    369c:	5f514554 	svcpl	0x00514554
    36a0:	00305f32 	eorseq	r5, r0, r2, lsr pc
    36a4:	70696843 	rsbvc	r6, r9, r3, asr #16
    36a8:	6f666e49 	svcvs	0x00666e49
    36ac:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    36b0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    36b4:	75006449 	strvc	r6, [r0, #-1097]	; 0xfffffbb7
    36b8:	52323369 	eorspl	r3, r2, #-1543503871	; 0xa4000001
    36bc:	4e006765 	cdpmi	7, 0, cr6, cr0, cr5, {3}
    36c0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 358c <TrimAfterColdResetWakeupFromShutDown+0x84>
    36c4:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    36c8:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    36cc:	65696674 	strbvs	r6, [r9, #-1652]!	; 0xfffff98c
    36d0:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    36d4:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
    36d8:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    36dc:	524f4e00 	subpl	r4, pc, #0, 28
    36e0:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 36e8 <NOROM_SetupSetVddrLevel+0x68>
    36e4:	36314944 	ldrtcc	r4, [r1], -r4, asr #18
    36e8:	52746942 	rsbspl	r6, r4, #1081344	; 0x108000
    36ec:	00646165 	rsbeq	r6, r4, r5, ror #2
    36f0:	7465526e 	strbtvc	r5, [r5], #-622	; 0xfffffd92
    36f4:	78754100 	ldmdavc	r5!, {r8, lr}^
    36f8:	44696441 	strbtmi	r6, [r9], #-1089	; 0xfffffbbf
    36fc:	61536964 	cmpvs	r3, r4, ror #18
    3700:	72576566 	subsvc	r6, r7, #427819008	; 0x19800000
    3704:	00657469 	rsbeq	r7, r5, r9, ror #8
    3708:	36316975 			; <UNDEFINED> instruction: 0x36316975
    370c:	61746144 	cmnvs	r4, r4, asr #2
    3710:	33697500 	cmncc	r9, #0, 10
    3714:	44725732 	ldrbtmi	r5, [r2], #-1842	; 0xfffff8ce
    3718:	00617461 	rsbeq	r7, r1, r1, ror #8
    371c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3720:	61746144 	cmnvs	r4, r4, asr #2
    3724:	33697500 	cmncc	r9, #0, 10
    3728:	69685332 	stmdbvs	r8!, {r1, r4, r5, r8, r9, ip, lr}^
    372c:	4e007466 	cdpmi	4, 0, cr7, cr0, cr6, {3}
    3730:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 35fc <NOROM_SetupTrimDevice+0x20>
    3734:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3738:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    373c:	65696674 	strbvs	r6, [r9, #-1652]!	; 0xfffff98c
    3740:	7257646c 	subsvc	r6, r7, #108, 8	; 0x6c000000
    3744:	00657469 	rsbeq	r7, r5, r9, ror #8
    3748:	7461446e 	strbtvc	r4, [r1], #-1134	; 0xfffffb92
    374c:	69750061 	ldmdbvs	r5!, {r0, r5, r6}^
    3750:	61563233 	cmpvs	r6, r3, lsr r2
    3754:	7541006c 	strbvc	r0, [r1, #-108]	; 0xffffff94
    3758:	69644178 	stmdbvs	r4!, {r3, r4, r5, r6, r8, lr}^
    375c:	53696444 	cmnpl	r9, #68, 8	; 0x44000000
    3760:	52656661 	rsbpl	r6, r5, #101711872	; 0x6100000
    3764:	00646165 	rsbeq	r6, r4, r5, ror #2
    3768:	4f524f4e 	svcmi	0x00524f4e
    376c:	44445f4d 	strbmi	r5, [r4], #-3917	; 0xfffff0b3
    3770:	42363149 	eorsmi	r3, r6, #1073741842	; 0x40000012
    3774:	72577469 	subsvc	r7, r7, #1761607680	; 0x69000000
    3778:	00657469 	rsbeq	r7, r5, r9, ror #8
    377c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3780:	2f2e2e2f 	svccs	0x002e2e2f
    3784:	642f2e2e 	strtvs	r2, [pc], #-3630	; 378c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x90>
    3788:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    378c:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    3790:	6964642f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    3794:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
    3798:	52323369 	eorspl	r3, r2, #-1543503871	; 0xa4000001
    379c:	64416765 	strbvs	r6, [r1], #-1893	; 0xfffff89b
    37a0:	6e007264 	cdpvs	2, 0, cr7, cr0, cr4, {3}
    37a4:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    37a8:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
    37ac:	37314320 	ldrcc	r4, [r1, -r0, lsr #6]!
    37b0:	2e303120 	rsfcssp	f3, f0, f0
    37b4:	20312e33 	eorscs	r2, r1, r3, lsr lr
    37b8:	31323032 	teqcc	r2, r2, lsr r0
    37bc:	31323630 	teqcc	r2, r0, lsr r6
    37c0:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
    37c4:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    37c8:	2d202965 			; <UNDEFINED> instruction: 0x2d202965
    37cc:	6f6c666d 	svcvs	0x006c666d
    37d0:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
    37d4:	733d6962 	teqvc	sp, #1605632	; 0x188000
    37d8:	2074666f 	rsbscs	r6, r4, pc, ror #12
    37dc:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
    37e0:	20626d75 	rsbcs	r6, r2, r5, ror sp
    37e4:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
    37e8:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
    37ec:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
    37f0:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
    37f4:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
    37f8:	613d7570 	teqvs	sp, r0, ror r5
    37fc:	74376d72 	ldrtvc	r6, [r7], #-3442	; 0xfffff28e
    3800:	20696d64 	rsbcs	r6, r9, r4, ror #26
    3804:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
    3808:	613d6863 	teqvs	sp, r3, ror #16
    380c:	34766d72 	ldrbtcc	r6, [r6], #-3442	; 0xfffff28e
    3810:	672d2074 			; <UNDEFINED> instruction: 0x672d2074
    3814:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    3818:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
    381c:	75622d6f 	strbvc	r2, [r2, #-3439]!	; 0xfffff291
    3820:	69746c69 	ldmdbvs	r4!, {r0, r3, r5, r6, sl, fp, sp, lr}^
    3824:	2e2e006e 	cdpcs	0, 2, cr0, cr14, cr14, {3}
    3828:	2f2e2e2f 	svccs	0x002e2e2f
    382c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3830:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3834:	2f2e2e2f 	svccs	0x002e2e2f
    3838:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    383c:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    3840:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3844:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3848:	616d2f63 	cmnvs	sp, r3, ror #30
    384c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    3850:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    3854:	656d2f6d 	strbvs	r2, [sp, #-3949]!	; 0xfffff093
    3858:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
    385c:	7574732d 	ldrbvc	r7, [r4, #-813]!	; 0xfffffcd3
    3860:	00632e62 	rsbeq	r2, r3, r2, ror #28
    3864:	30637273 	rsbcc	r7, r3, r3, ror r2
    3868:	74736400 	ldrbtvc	r6, [r3], #-1024	; 0xfffffc00
    386c:	6c610030 	stclvs	0, cr0, [r1], #-192	; 0xffffff40
    3870:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
    3874:	73645f64 	cmnvc	r4, #100, 30	; 0x190
    3878:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
    387c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
    3880:	72735f64 	rsbsvc	r5, r3, #100, 30	; 0x190
    3884:	622f0063 	eorvs	r0, pc, #99	; 0x63
    3888:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    388c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3890:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    3894:	30334270 	eorscc	r4, r3, r0, ror r2
    3898:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    389c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    38a0:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    38a4:	2f302e33 	svccs	0x00302e33
    38a8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    38ac:	72612f64 	rsbvc	r2, r1, #100, 30	; 0x190
    38b0:	6f6e2d6d 	svcvs	0x006e2d6d
    38b4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    38b8:	2f696261 	svccs	0x00696261
    38bc:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    38c0:	6f6e2f62 	svcvs	0x006e2f62
    38c4:	6e2f7066 	cdpvs	0, 2, cr7, cr15, cr6, {3}
    38c8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    38cc:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    38d0:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 3750 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x54>
    38d4:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    38d8:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    38dc:	6c006d72 	stcvs	13, cr6, [r0], {114}	; 0x72
    38e0:	00306e65 	eorseq	r6, r0, r5, ror #28
    38e4:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
    38e8:	756f6420 	strbvc	r6, [pc, #-1056]!	; 34d0 <NOROM_RFCRfTrimSet+0x4>
    38ec:	00656c62 	rsbeq	r6, r5, r2, ror #24
    38f0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    38f4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    38f8:	2f2e2e2f 	svccs	0x002e2e2f
    38fc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3900:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3904:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3908:	2f62696c 	svccs	0x0062696c
    390c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    3910:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    3914:	2f676e69 	svccs	0x00676e69
    3918:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
    391c:	632e7465 			; <UNDEFINED> instruction: 0x632e7465
    3920:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
    3924:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
    3928:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
    392c:	622f0072 	eorvs	r0, pc, #114	; 0x72
    3930:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    3934:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3938:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    393c:	30334270 	eorscc	r4, r3, r0, ror r2
    3940:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    3944:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3948:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    394c:	2f302e33 	svccs	0x00302e33
    3950:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    3954:	72612f64 	rsbvc	r2, r1, #100, 30	; 0x190
    3958:	6f6e2d6d 	svcvs	0x006e2d6d
    395c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3960:	2f696261 	svccs	0x00696261
    3964:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    3968:	6f6e2f62 	svcvs	0x006e2f62
    396c:	6e2f7066 	cdpvs	0, 2, cr7, cr15, cr6, {3}
    3970:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3974:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    3978:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    397c:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    3980:	75620067 	strbvc	r0, [r2, #-103]!	; 0xffffff99
    3984:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    3988:	2f2e2e00 	svccs	0x002e2e00
    398c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3990:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3994:	2f2e2e2f 	svccs	0x002e2e2f
    3998:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    399c:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    39a0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    39a4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    39a8:	74632f63 	strbtvc	r2, [r3], #-3939	; 0xfffff09d
    39ac:	2f657079 	svccs	0x00657079
    39b0:	70756f74 	rsbsvc	r6, r5, r4, ror pc
    39b4:	2e726570 	mrccs	5, 3, r6, cr2, cr0, {3}
    39b8:	622f0063 	eorvs	r0, pc, #99	; 0x63
    39bc:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    39c0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    39c4:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    39c8:	30334270 	eorscc	r4, r3, r0, ror r2
    39cc:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    39d0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    39d4:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    39d8:	2f302e33 	svccs	0x00302e33
    39dc:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    39e0:	72612f64 	rsbvc	r2, r1, #100, 30	; 0x190
    39e4:	6f6e2d6d 	svcvs	0x006e2d6d
    39e8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    39ec:	2f696261 	svccs	0x00696261
    39f0:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    39f4:	6f6e2f62 	svcvs	0x006e2f62
    39f8:	6e2f7066 	cdpvs	0, 2, cr7, cr15, cr6, {3}
    39fc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3a00:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    3a04:	632f6362 			; <UNDEFINED> instruction: 0x632f6362
    3a08:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    3a0c:	74635f00 	strbtvc	r5, [r3], #-3840	; 0xfffff100
    3a10:	5f657079 	svcpl	0x00657079
    3a14:	2f2e2e00 	svccs	0x002e2e00
    3a18:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3a1c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3a20:	2f2e2e2f 	svccs	0x002e2e2f
    3a24:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3a28:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    3a2c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3a30:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3a34:	74632f63 	strbtvc	r2, [r3], #-3939	; 0xfffff09d
    3a38:	2f657079 	svccs	0x00657079
    3a3c:	70797463 	rsbsvc	r7, r9, r3, ror #8
    3a40:	632e5f65 			; <UNDEFINED> instruction: 0x632e5f65
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__ccfg+0x10b0d7c>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	2e30313a 	mrccs	1, 1, r3, cr0, cr10, {1}
   c:	30322d33 	eorscc	r2, r2, r3, lsr sp
  10:	302e3132 	eorcc	r3, lr, r2, lsr r1
  14:	29342d37 	ldmdbcs	r4!, {r0, r1, r2, r4, r5, r8, sl, fp, sp}
  18:	2e303120 	rsfcssp	f3, f0, f0
  1c:	20312e33 	eorscs	r2, r1, r3, lsr lr
  20:	31323032 	teqcc	r2, r2, lsr r0
  24:	31323630 	teqcc	r2, r0, lsr r6
  28:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  2c:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  30:	47002965 	strmi	r2, [r0, -r5, ror #18]
  34:	203a4343 	eorscs	r4, sl, r3, asr #6
  38:	554e4728 	strbpl	r4, [lr, #-1832]	; 0xfffff8d8
  3c:	6f6f5420 	svcvs	0x006f5420
		where = 1;
  40:	6620736c 	strtvs	r7, [r0], -ip, ror #6
		delay (1, st);
  44:	4120726f 			; <UNDEFINED> instruction: 0x4120726f
		release;
  48:	45204d52 	strmi	r4, [r0, #-3410]!	; 0xfffff2ae
  4c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  50:	20646564 	rsbcs	r6, r4, r4, ror #10
}
  54:	636f7250 	cmnvs	pc, #80, 4
  58:	6f737365 	svcvs	0x00737365
  5c:	20297372 	eorcs	r7, r9, r2, ror r3
			nq++;
  60:	2e392e34 	mrccs	14, 1, r2, cr9, cr4, {1}
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
  64:	30322033 	eorscc	r2, r2, r3, lsr r0
  68:	35303531 	ldrcc	r3, [r0, #-1329]!	; 0xfffffacf
  6c:	28203932 	stmdacs	r0!, {r1, r4, r5, r8, fp, ip, sp}
  70:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  74:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  78:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  7c:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  80:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  84:	342d6465 	strtcc	r6, [sp], #-1125	; 0xfffffb9b
  88:	622d395f 	eorvs	r3, sp, #1556480	; 0x17c000
  8c:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
  90:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
	if (!button_still_pressed (__button_list [pbutton]))
  94:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  98:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  9c:	37393732 			; <UNDEFINED> instruction: 0x37393732
  a0:	Address 0x00000000000000a0 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
  10:	4d2d3705 	stcmi	7, cr3, [sp, #-20]!	; 0xffffffec
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	0901084d 	stmdbeq	r1, {r0, r2, r3, r6, fp}
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1e011a01 	vmlane.f32	s2, s2, s2
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	00000024 	andeq	r0, r0, r4, lsr #32
      14:	00000000 	andeq	r0, r0, r0
      18:	000000c8 	andeq	r0, r0, r8, asr #1
      1c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
      20:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
      24:	0e0a7901 	vmlaeq.f16	s14, s20, s2	; <UNPREDICTABLE>
      28:	0ece4204 	cdpeq	2, 12, cr4, cr14, cr4, {0}
      2c:	470b4200 	strmi	r4, [fp, -r0, lsl #4]
      30:	ce42040e 	cdpgt	4, 4, cr0, cr2, cr14, {0}
      34:	0000000e 	andeq	r0, r0, lr
      38:	00000028 	andeq	r0, r0, r8, lsr #32
      3c:	00000000 	andeq	r0, r0, r0
		where = 1;
      40:	00000178 	andeq	r0, r0, r8, ror r1
		delay (1, st);
      44:	0000006c 	andeq	r0, r0, ip, rrx
		release;
      48:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
      4c:	86038504 	strhi	r8, [r3], -r4, lsl #10
      50:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
      54:	c5c6ce0a 	strbgt	ip, [r6, #3594]	; 0xe0a
      58:	42000ec4 	andmi	r0, r0, #196, 28	; 0xc40
      5c:	c6ce420b 	strbgt	r4, [lr], fp, lsl #4
			nq++;
      60:	000ec4c5 	andeq	ip, lr, r5, asr #9
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	00000024 	andeq	r0, r0, r4, lsr #32
      68:	00000000 	andeq	r0, r0, r0
      6c:	000001e4 	andeq	r0, r0, r4, ror #3
      70:	000001c0 	andeq	r0, r0, r0, asr #3
      74:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
      78:	02018e02 	andeq	r8, r1, #2, 28
      7c:	080e0ab5 	stmdaeq	lr, {r0, r2, r4, r5, r7, r9, fp}
      80:	0ec4ce42 	cdpeq	14, 12, cr12, cr4, cr2, {2}
      84:	410b4200 	mrsmi	r4, R11_fiq
      88:	0000080e 	andeq	r0, r0, lr, lsl #16
      8c:	0000000c 	andeq	r0, r0, ip
      90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      94:	7c020001 	stcvc	0, cr0, [r2], {1}
      98:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      9c:	0000000c 	andeq	r0, r0, ip
      a0:	0000008c 	andeq	r0, r0, ip, lsl #1
	if (baction == NULL)
      a4:	000003a4 	andeq	r0, r0, r4, lsr #7
      a8:	0000000c 	andeq	r0, r0, ip
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00000018 	andeq	r0, r0, r8, lsl r0
endthread
      b0:	0000008c 	andeq	r0, r0, ip, lsl #1
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      b4:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
      b8:	0000002c 	andeq	r0, r0, ip, lsr #32
endthread
      bc:	47080e41 	strmi	r0, [r8, -r1, asr #28]
      c0:	41000e0a 	tstmi	r0, sl, lsl #28
      c4:	0000000b 	andeq	r0, r0, fp
fsm receiver {
      c8:	00000018 	andeq	r0, r0, r8, lsl r0
      cc:	0000008c 	andeq	r0, r0, ip, lsl #1
      d0:	000003dc 	ldrdeq	r0, [r0], -ip
      d4:	0000002a 	andeq	r0, r0, sl, lsr #32
        packet = tcv_rnp(Receiving, sfd);
      d8:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
      dc:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
      e0:	000b4204 	andeq	r4, fp, r4, lsl #4
      e4:	00000018 	andeq	r0, r0, r8, lsl r0
        receivedPtr = (struct msg *)(packet + 1);
      e8:	0000008c 	andeq	r0, r0, ip, lsl #1
      ec:	00000408 	andeq	r0, r0, r8, lsl #8
        if(receivedPtr->receiverId == nodeId) {
      f0:	00000040 	andeq	r0, r0, r0, asr #32
      f4:	83100e41 	tsthi	r0, #1040	; 0x410
      f8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
            proceed Broadcast; // Proceed to handling broadcast message
      fc:	00018e02 	andeq	r8, r1, r2, lsl #28
        proceed Receiving;
     100:	00000018 	andeq	r0, r0, r8, lsl r0
     104:	0000008c 	andeq	r0, r0, ip, lsl #1
        ser_outf(Receive_Msg, "Message ");
     108:	00000448 	andeq	r0, r0, r8, asr #8
     10c:	00000044 	andeq	r0, r0, r4, asr #32
        proceed Show_Message;
     110:	83100e41 	tsthi	r0, #1040	; 0x410
        ser_outf(Broadcast, "Broadcast ");
     114:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     118:	00018e02 	andeq	r8, r1, r2, lsl #28
        ser_outf(Show_Message, "Message from node %d (Seq %d): %s\n\r", receivedPtr->senderId, receivedPtr->sequenceNumber, receivedPtr->payload);
     11c:	00000014 	andeq	r0, r0, r4, lsl r0
     120:	0000008c 	andeq	r0, r0, ip, lsl #1
     124:	00000000 	andeq	r0, r0, r0
     128:	00000024 	andeq	r0, r0, r4, lsr #32
     12c:	83080e42 	movwhi	r0, #36418	; 0x8e42
        tcv_endp(packet);
     130:	00018e02 	andeq	r8, r1, r2, lsl #28
     134:	00000014 	andeq	r0, r0, r4, lsl r0
        proceed Receiving;
     138:	0000008c 	andeq	r0, r0, ip, lsl #1
}
     13c:	0000048c 	andeq	r0, r0, ip, lsl #9
        proceed Receiving;
     140:	00000054 	andeq	r0, r0, r4, asr r0
        } else if (receivedPtr->receiverId == '0' || receivedPtr->receiverId == 0) {
     144:	83080e42 	movwhi	r0, #36418	; 0x8e42
     148:	00018e02 	andeq	r8, r1, r2, lsl #28
            proceed Broadcast; // Proceed to handling broadcast message
     14c:	00000014 	andeq	r0, r0, r4, lsl r0
}
     150:	0000008c 	andeq	r0, r0, ip, lsl #1
     154:	000004e0 	andeq	r0, r0, r0, ror #9
     158:	00000044 	andeq	r0, r0, r4, asr #32
     15c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     160:	00018e02 	andeq	r8, r1, r2, lsl #28
     164:	00000014 	andeq	r0, r0, r4, lsl r0
     168:	0000008c 	andeq	r0, r0, ip, lsl #1
     16c:	00000524 	andeq	r0, r0, r4, lsr #10
     170:	0000002c 	andeq	r0, r0, ip, lsr #32
     174:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
fsm send(struct msg * ptr) {
     178:	00018e02 	andeq	r8, r1, r2, lsl #28
     17c:	00000014 	andeq	r0, r0, r4, lsl r0
        address spkt = tcv_wnp(Send_Msg, sfd, sizeof(struct msg) + 4);
     180:	0000008c 	andeq	r0, r0, ip, lsl #1
     184:	00000550 	andeq	r0, r0, r0, asr r5
     188:	00000118 	andeq	r0, r0, r8, lsl r1
     18c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     190:	00018e02 	andeq	r8, r1, r2, lsl #28
        *p = ptr->senderId; p++;
     194:	0000001c 	andeq	r0, r0, ip, lsl r0
     198:	0000008c 	andeq	r0, r0, ip, lsl #1
        strcpy(p, ptr->payload);
     19c:	00000668 	andeq	r0, r0, r8, ror #12
        *p = ptr->receiverId; p++;
     1a0:	00000054 	andeq	r0, r0, r4, asr r0
        *p = ptr->sequenceNumber; p++;
     1a4:	83180e41 	tsthi	r8, #1040	; 0x410
        strcpy(p, ptr->payload);
     1a8:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
        sequence++;
     1ac:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     1b0:	00018e02 	andeq	r8, r1, r2, lsl #28
     1b4:	00000018 	andeq	r0, r0, r8, lsl r0
        tcv_endp (spkt);
     1b8:	0000008c 	andeq	r0, r0, ip, lsl #1
        ser_outf(Send_Msg, "\n\rMessage Sent\n\r");
     1bc:	000006bc 			; <UNDEFINED> instruction: 0x000006bc
     1c0:	00000050 	andeq	r0, r0, r0, asr r0
}
     1c4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
        finish;
     1c8:	86038504 	strhi	r8, [r3], -r4, lsl #10
}
     1cc:	00018e02 	andeq	r8, r1, r2, lsl #28
     1d0:	0000000c 	andeq	r0, r0, ip
     1d4:	0000008c 	andeq	r0, r0, ip, lsl #1
     1d8:	0000070c 	andeq	r0, r0, ip, lsl #14
     1dc:	0000002c 	andeq	r0, r0, ip, lsr #32
     1e0:	0000001c 	andeq	r0, r0, ip, lsl r0
fsm root {
     1e4:	0000008c 	andeq	r0, r0, ip, lsl #1
     1e8:	00000738 	andeq	r0, r0, r8, lsr r7
     1ec:	00000100 	andeq	r0, r0, r0, lsl #2
     1f0:	84180e43 	ldrhi	r0, [r8], #-3651	; 0xfffff1bd
     1f4:	86058506 	strhi	r8, [r5], -r6, lsl #10
     1f8:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
        sequence = 0;
     1fc:	00018e02 	andeq	r8, r1, r2, lsl #28
        ptr = (struct Message *) umalloc(sizeof(struct msg));
     200:	0000000c 	andeq	r0, r0, ip
        sequence = 0;
     204:	0000008c 	andeq	r0, r0, ip, lsl #1
        ptr = (struct Message *) umalloc(sizeof(struct msg));
     208:	00000000 	andeq	r0, r0, r0
     20c:	0000000c 	andeq	r0, r0, ip
     210:	00000018 	andeq	r0, r0, r8, lsl r0
        phys_cc1350(0, CC1350_BUF_SZ);
     214:	0000008c 	andeq	r0, r0, ip, lsl #1
        tcv_plug(0, &plug_null);
     218:	00000838 	andeq	r0, r0, r8, lsr r8
     21c:	000000bc 	strheq	r0, [r0], -ip
        sfd = tcv_open(NONE, 0, 0);
     220:	840c0e43 	strhi	r0, [ip], #-3651	; 0xfffff1bd
     224:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     228:	00000001 	andeq	r0, r0, r1
     22c:	00000018 	andeq	r0, r0, r8, lsl r0
     230:	0000008c 	andeq	r0, r0, ip, lsl #1
            diag("unable to open TCV session");
     234:	000008f4 	strdeq	r0, [r0], -r4
     238:	00000048 	andeq	r0, r0, r8, asr #32
            syserror(EASSERT, "no session");
     23c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     240:	86038504 	strhi	r8, [r3], -r4, lsl #10
        tcv_control(sfd, PHYSOPT_ON, NULL);
     244:	00018e02 	andeq	r8, r1, r2, lsl #28
     248:	0000001c 	andeq	r0, r0, ip, lsl r0
        runfsm receiver;
     24c:	0000008c 	andeq	r0, r0, ip, lsl #1
     250:	0000093c 	andeq	r0, r0, ip, lsr r9
        receiverId = 0;
     254:	0000003c 	andeq	r0, r0, ip, lsr r0
     258:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
        ser_outf(Menu, "\n\rP2P Chat (Node #%d)\n\r"
     25c:	86048505 	strhi	r8, [r4], -r5, lsl #10
     260:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
        ser_inf(Choice, "%c", &choice);
     264:	00000001 	andeq	r0, r0, r1
     268:	00000018 	andeq	r0, r0, r8, lsl r0
     26c:	0000008c 	andeq	r0, r0, ip, lsl #1
        choice = toupper((unsigned char)choice);
     270:	00000978 	andeq	r0, r0, r8, ror r9
     274:	000000ac 	andeq	r0, r0, ip, lsr #1
     278:	83100e41 	tsthi	r0, #1040	; 0x410
     27c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
        switch (choice) {
     280:	00018e02 	andeq	r8, r1, r2, lsl #28
     284:	00000028 	andeq	r0, r0, r8, lsr #32
     288:	0000008c 	andeq	r0, r0, ip, lsl #1
                proceed Broadcast_Transmission;
     28c:	00000a24 	andeq	r0, r0, r4, lsr #20
                proceed Menu;
     290:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
        ser_outf(Change_ID, "\n\rNew node ID (1-25):");
     294:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     298:	86058506 	strhi	r8, [r5], -r6, lsl #10
        ser_inf(Get_ChangeID, "%d", &nodeId);
     29c:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     2a0:	02018e02 	andeq	r8, r1, #2, 28
     2a4:	c8ce0aaa 	stmiagt	lr, {r1, r3, r5, r7, r9, fp}^
            if (nodeId < 1 || nodeId > 25) {
     2a8:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
     2ac:	0b42000e 	bleq	10802ec <__ccfg+0x1060344>
                ser_outf(Get_ChangeID, "\n\rInvalid ID");
     2b0:	0000000c 	andeq	r0, r0, ip
     2b4:	0000008c 	andeq	r0, r0, ip, lsl #1
                proceed Change_ID;
     2b8:	00000000 	andeq	r0, r0, r0
     2bc:	00000024 	andeq	r0, r0, r4, lsr #32
            proceed Menu;
     2c0:	0000000c 	andeq	r0, r0, ip
        ser_outf(Direct_Transmission, "\n\rReceiver node ID (1-25):");
     2c4:	0000008c 	andeq	r0, r0, ip, lsl #1
     2c8:	00000000 	andeq	r0, r0, r0
        ser_inf(Get_ReceiverID, "%d", &receiverId);
     2cc:	00000028 	andeq	r0, r0, r8, lsr #32
     2d0:	0000001c 	andeq	r0, r0, ip, lsl r0
     2d4:	0000008c 	andeq	r0, r0, ip, lsl #1
            if (receiverId < 1 || receiverId > 25) {
     2d8:	00000bdc 	ldrdeq	r0, [r0], -ip
     2dc:	00000268 	andeq	r0, r0, r8, ror #4
                ser_outf(Get_ReceiverID, "\n\rInvalid ID");
     2e0:	83100e42 	tsthi	r0, #1056	; 0x420
     2e4:	8b038704 	blhi	e1efc <__ccfg+0xc1f54>
                proceed Direct_Transmission;
     2e8:	42018e02 	andmi	r8, r1, #2, 28
     2ec:	0000070d 	andeq	r0, r0, sp, lsl #14
        ser_outf(Broadcast_Transmission, "\n\rMessage: ");
     2f0:	00000014 	andeq	r0, r0, r4, lsl r0
     2f4:	0000008c 	andeq	r0, r0, ip, lsl #1
        ser_in(Receive_Msg, ptr->payload, 27);
     2f8:	00000000 	andeq	r0, r0, r0
     2fc:	00000034 	andeq	r0, r0, r4, lsr r0
     300:	83080e42 	movwhi	r0, #36418	; 0x8e42
        if(strlen(ptr->payload) >= 27) {
     304:	00018e02 	andeq	r8, r1, r2, lsl #28
     308:	00000018 	andeq	r0, r0, r8, lsl r0
     30c:	0000008c 	andeq	r0, r0, ip, lsl #1
            ptr->payload[26] = '\0';
     310:	00000000 	andeq	r0, r0, r0
     314:	00000054 	andeq	r0, r0, r4, asr r0
        call send(ptr, Menu);
     318:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
        ptr->senderId = nodeId;
     31c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     320:	00018e02 	andeq	r8, r1, r2, lsl #28
        ptr->receiverId = receiverId;
     324:	00000014 	andeq	r0, r0, r4, lsl r0
        ptr->sequenceNumber = (byte)sequence;
     328:	0000008c 	andeq	r0, r0, ip, lsl #1
     32c:	00000e44 	andeq	r0, r0, r4, asr #28
        call send(ptr, Menu);
     330:	00000064 	andeq	r0, r0, r4, rrx
     334:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     338:	00018e02 	andeq	r8, r1, r2, lsl #28
     33c:	0000000c 	andeq	r0, r0, ip
                proceed Direct_Transmission;
     340:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
                ser_outf(Choice, "\n\rIncorrect Option.");
     344:	7c020001 	stcvc	0, cr0, [r2], {1}
     348:	000d0c0e 	andeq	r0, sp, lr, lsl #24
                proceed Menu;
     34c:	00000018 	andeq	r0, r0, r8, lsl r0
}
     350:	0000033c 	andeq	r0, r0, ip, lsr r3
     354:	00000ea8 	andeq	r0, r0, r8, lsr #29
     358:	0000003c 	andeq	r0, r0, ip, lsr r0
     35c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     360:	86038504 	strhi	r8, [r3], -r4, lsl #10
     364:	00018e02 	andeq	r8, r1, r2, lsl #28
     368:	00000018 	andeq	r0, r0, r8, lsl r0
     36c:	0000033c 	andeq	r0, r0, ip, lsr r3
     370:	00000ee4 	andeq	r0, r0, r4, ror #29
     374:	00000080 	andeq	r0, r0, r0, lsl #1
     378:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     37c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     380:	00000001 	andeq	r0, r0, r1
     384:	0000000c 	andeq	r0, r0, ip
     388:	0000033c 	andeq	r0, r0, ip, lsr r3
     38c:	00000f64 	andeq	r0, r0, r4, ror #30
     390:	00000014 	andeq	r0, r0, r4, lsl r0
     394:	00000014 	andeq	r0, r0, r4, lsl r0
     398:	0000033c 	andeq	r0, r0, ip, lsr r3
     39c:	00000000 	andeq	r0, r0, r0
     3a0:	00000024 	andeq	r0, r0, r4, lsr #32
static void devinit_uart (int devnum) {
     3a4:	83080e41 	movwhi	r0, #36417	; 0x8e41
	adddevfunc (ioreq_uart_a, devnum);
     3a8:	00018e02 	andeq	r8, r1, r2, lsl #28
     3ac:	00000014 	andeq	r0, r0, r4, lsl r0
void udelay (volatile word n) {
     3b0:	0000033c 	andeq	r0, r0, ip, lsr r3
     3b4:	00000f78 	andeq	r0, r0, r8, ror pc
	while (n) {
     3b8:	00000010 	andeq	r0, r0, r0, lsl r0
     3bc:	83080e42 	movwhi	r0, #36418	; 0x8e42
}
     3c0:	00018e02 	andeq	r8, r1, r2, lsl #28
	while (n--);
     3c4:	00000014 	andeq	r0, r0, r4, lsl r0
     3c8:	0000033c 	andeq	r0, r0, ip, lsr r3
     3cc:	00000f88 	andeq	r0, r0, r8, lsl #31
		n--;
     3d0:	0000002c 	andeq	r0, r0, ip, lsr #32
     3d4:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
     3d8:	00018e02 	andeq	r8, r1, r2, lsl #28
void mdelay (volatile word n) {
     3dc:	00000014 	andeq	r0, r0, r4, lsl r0
     3e0:	0000033c 	andeq	r0, r0, ip, lsr r3
	while (n) {
     3e4:	00000000 	andeq	r0, r0, r0
     3e8:	00000054 	andeq	r0, r0, r4, asr r0
}
     3ec:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
		udelay (999);
     3f0:	00018e02 	andeq	r8, r1, r2, lsl #28
     3f4:	0000000c 	andeq	r0, r0, ip
		n--;
     3f8:	0000033c 	andeq	r0, r0, ip, lsr r3
     3fc:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
     400:	00000006 	andeq	r0, r0, r6
     404:	00000028 	andeq	r0, r0, r8, lsr #32
void __pi_ondomain (lword d) {
     408:	0000033c 	andeq	r0, r0, ip, lsr r3
     40c:	00000fbc 			; <UNDEFINED> instruction: 0x00000fbc
		if (__pi_systat.effpdm > 1)
     410:	000000cc 	andeq	r0, r0, ip, asr #1
     414:	83180e41 	tsthi	r8, #1040	; 0x410
			__pi_systat.effpdm = 1;
     418:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
	PRCMPowerDomainOn (d);
     41c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     420:	02018e02 	andeq	r8, r1, #2, 28
     424:	c7ce0a59 			; <UNDEFINED> instruction: 0xc7ce0a59
     428:	c3c4c5c6 	bicgt	ip, r4, #830472192	; 0x31800000
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     42c:	0b42000e 	bleq	108046c <__ccfg+0x10604c4>
     430:	00000014 	andeq	r0, r0, r4, lsl r0
     434:	0000033c 	andeq	r0, r0, ip, lsr r3
	__pi_systat.ondmns |= d;
     438:	00001088 	andeq	r1, r0, r8, lsl #1
     43c:	00000014 	andeq	r0, r0, r4, lsl r0
}
     440:	83080e41 	movwhi	r0, #36417	; 0x8e41
     444:	00018e02 	andeq	r8, r1, r2, lsl #28
void __pi_offdomain (lword d) {
     448:	00000014 	andeq	r0, r0, r4, lsl r0
	PRCMPowerDomainOff (d);
     44c:	0000033c 	andeq	r0, r0, ip, lsr r3
     450:	0000109c 	muleq	r0, ip, r0
     454:	00000034 	andeq	r0, r0, r4, lsr r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     458:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     45c:	00018e02 	andeq	r8, r1, r2, lsl #28
     460:	00000018 	andeq	r0, r0, r8, lsl r0
     464:	0000033c 	andeq	r0, r0, ip, lsr r3
	if (d & PRCM_DOMAIN_RFCORE) {
     468:	000010d0 	ldrdeq	r1, [r0], -r0
     46c:	00000034 	andeq	r0, r0, r4, lsr r0
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     470:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
			__pi_systat.effpdm = __pi_systat.reqpdm;
     474:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     478:	00000001 	andeq	r0, r0, r1
	__pi_systat.ondmns &= ~d;
     47c:	00000018 	andeq	r0, r0, r8, lsl r0
     480:	0000033c 	andeq	r0, r0, ip, lsr r3
}
     484:	00000000 	andeq	r0, r0, r0
     488:	0000002c 	andeq	r0, r0, ip, lsr #32
void __pi_syserror (word ec, const char *m) {
     48c:	83100e41 	tsthi	r0, #1040	; 0x410
	diag ("SYSERR: %x, %s", ec, m);
     490:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     494:	00018e02 	andeq	r8, r1, r2, lsl #28
  __ASM volatile ("cpsid i" : : : "memory");
     498:	00000014 	andeq	r0, r0, r4, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     49c:	0000033c 	andeq	r0, r0, ip, lsr r3
		all_leds_blink;
     4a0:	00001104 	andeq	r1, r0, r4, lsl #2
     4a4:	00000024 	andeq	r0, r0, r4, lsr #32
     4a8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     4ac:	00018e02 	andeq	r8, r1, r2, lsl #28
     4b0:	00000018 	andeq	r0, r0, r8, lsl r0
     4b4:	0000033c 	andeq	r0, r0, ip, lsr r3
     4b8:	00001128 	andeq	r1, r0, r8, lsr #2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4bc:	00000038 	andeq	r0, r0, r8, lsr r0
     4c0:	83100e41 	tsthi	r0, #1040	; 0x410
     4c4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     4c8:	00018e02 	andeq	r8, r1, r2, lsl #28
     4cc:	0000000c 	andeq	r0, r0, ip
     4d0:	0000033c 	andeq	r0, r0, ip, lsr r3
	while (1) {
     4d4:	00000000 	andeq	r0, r0, r0
     4d8:	00000014 	andeq	r0, r0, r4, lsl r0
     4dc:	00000014 	andeq	r0, r0, r4, lsl r0
void tci_run_delay_timer () {
     4e0:	0000033c 	andeq	r0, r0, ip, lsr r3
	setdel = __pi_mintk - __pi_old;
     4e4:	00000000 	andeq	r0, r0, r0
     4e8:	00000040 	andeq	r0, r0, r0, asr #32
     4ec:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     4f0:	00018e02 	andeq	r8, r1, r2, lsl #28
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4f4:	00000014 	andeq	r0, r0, r4, lsl r0
     4f8:	0000033c 	andeq	r0, r0, ip, lsr r3
     4fc:	00000000 	andeq	r0, r0, r0
     500:	00000018 	andeq	r0, r0, r8, lsl r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     504:	83080e41 	movwhi	r0, #36417	; 0x8e41
	sti_tim;
     508:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     50c:	0000000c 	andeq	r0, r0, ip
     510:	0000033c 	andeq	r0, r0, ip, lsr r3
     514:	00001160 	andeq	r1, r0, r0, ror #2
     518:	00000024 	andeq	r0, r0, r4, lsr #32
     51c:	0000000c 	andeq	r0, r0, ip
     520:	0000033c 	andeq	r0, r0, ip, lsr r3
	cli_aux;
     524:	00000000 	andeq	r0, r0, r0
     528:	00000020 	andeq	r0, r0, r0, lsr #32
     52c:	0000000c 	andeq	r0, r0, ip
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     530:	0000033c 	andeq	r0, r0, ip, lsr r3
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     534:	00001184 	andeq	r1, r0, r4, lsl #3
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     538:	0000000e 	andeq	r0, r0, lr
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     53c:	0000000c 	andeq	r0, r0, ip
	sti_aux;
     540:	0000033c 	andeq	r0, r0, ip, lsr r3
}
     544:	00001192 	muleq	r0, r2, r1
     548:	00000010 	andeq	r0, r0, r0, lsl r0
     54c:	0000000c 	andeq	r0, r0, ip
void AONRTCIntHandler () {
     550:	0000033c 	andeq	r0, r0, ip, lsr r3
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     554:	00000000 	andeq	r0, r0, r0
     558:	0000001c 	andeq	r0, r0, ip, lsl r0
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     55c:	0000000c 	andeq	r0, r0, ip
		if (__pi_utims [0] == 0)
     560:	0000033c 	andeq	r0, r0, ip, lsr r3
     564:	00000000 	andeq	r0, r0, r0
		if (*(__pi_utims [0])) {
     568:	00000010 	andeq	r0, r0, r0, lsl r0
     56c:	0000000c 	andeq	r0, r0, ip
			(*(__pi_utims [0]))--;
     570:	0000033c 	andeq	r0, r0, ip, lsr r3
		if (__pi_utims [1] == 0)
     574:	00000000 	andeq	r0, r0, r0
		if (*(__pi_utims [1])) {
     578:	00000006 	andeq	r0, r0, r6
			aux_timer_inactive = 0;
     57c:	0000000c 	andeq	r0, r0, ip
			(*(__pi_utims [1]))--;
     580:	0000033c 	andeq	r0, r0, ip, lsr r3
		if (__pi_utims [2] == 0)
     584:	000011a2 	andeq	r1, r0, r2, lsr #3
		if (*(__pi_utims [2])) {
     588:	00000014 	andeq	r0, r0, r4, lsl r0
			(*(__pi_utims [2]))--;
     58c:	0000000c 	andeq	r0, r0, ip
		if (__pi_utims [3] != 0) {
     590:	0000033c 	andeq	r0, r0, ip, lsr r3
			if (*(__pi_utims [3])) {
     594:	000011b6 			; <UNDEFINED> instruction: 0x000011b6
				aux_timer_inactive = 0;
     598:	00000004 	andeq	r0, r0, r4
				(*(__pi_utims [3]))--;
     59c:	00000014 	andeq	r0, r0, r4, lsl r0
	if (__pi_systat.ledsts) {
     5a0:	0000033c 	andeq	r0, r0, ip, lsr r3
     5a4:	000011bc 			; <UNDEFINED> instruction: 0x000011bc
		if (__pi_systat.ledblc++ == 0) {
     5a8:	00000024 	andeq	r0, r0, r4, lsr #32
     5ac:	83080e41 	movwhi	r0, #36417	; 0x8e41
			if (__pi_systat.ledblk) {
     5b0:	00018e02 	andeq	r8, r1, r2, lsl #28
     5b4:	00000020 	andeq	r0, r0, r0, lsr #32
     5b8:	0000033c 	andeq	r0, r0, ip, lsr r3
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     5bc:	000011e0 	andeq	r1, r0, r0, ror #3
     5c0:	0000009c 	muleq	r0, ip, r0
     5c4:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
				if (__pi_systat.ledsts & 0x2)
     5c8:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     5cc:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     5d0:	89038804 	stmdbhi	r3, {r2, fp, pc}
				if (__pi_systat.ledsts & 0x4)
     5d4:	00018e02 	andeq	r8, r1, r2, lsl #28
				__pi_systat.ledblk = 0;
     5d8:	00000014 	andeq	r0, r0, r4, lsl r0
     5dc:	0000033c 	andeq	r0, r0, ip, lsr r3
			if (__pi_systat.fstblk)
     5e0:	0000127c 	andeq	r1, r0, ip, ror r2
     5e4:	00000050 	andeq	r0, r0, r0, asr r0
				__pi_systat.ledblc = 200;
     5e8:	83080e42 	movwhi	r0, #36418	; 0x8e42
	if (events & AON_RTC_EVFLAGS_CH0) {
     5ec:	00018e02 	andeq	r8, r1, r2, lsl #28
		cli_tim;
     5f0:	00000014 	andeq	r0, r0, r4, lsl r0
		__pi_new += setdel;
     5f4:	0000033c 	andeq	r0, r0, ip, lsr r3
		cli_tim;
     5f8:	000012cc 	andeq	r1, r0, ip, asr #5
		__pi_new += setdel;
     5fc:	00000048 	andeq	r0, r0, r8, asr #32
     600:	83080e41 	movwhi	r0, #36417	; 0x8e41
     604:	00018e02 	andeq	r8, r1, r2, lsl #28
		RISE_N_SHINE;
     608:	00000014 	andeq	r0, r0, r4, lsl r0
     60c:	0000033c 	andeq	r0, r0, ip, lsr r3
}
     610:	00001314 	andeq	r1, r0, r4, lsl r3
		aux_timer_inactive = 1;
     614:	00000050 	andeq	r0, r0, r0, asr r0
     618:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     61c:	00018e02 	andeq	r8, r1, r2, lsl #28
     620:	00000020 	andeq	r0, r0, r0, lsr #32
     624:	0000033c 	andeq	r0, r0, ip, lsr r3
				if (__pi_systat.ledsts & 0x2)
     628:	00000000 	andeq	r0, r0, r0
     62c:	00000058 	andeq	r0, r0, r8, asr r0
     630:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
				if (__pi_systat.ledsts & 0x4)
     634:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
				__pi_systat.ledblk = 1;
     638:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     63c:	89038804 	stmdbhi	r3, {r2, fp, pc}
		if (aux_timer_inactive) {
     640:	00018e02 	andeq	r8, r1, r2, lsl #28
			cli_aux;
     644:	00000018 	andeq	r0, r0, r8, lsl r0
     648:	0000033c 	andeq	r0, r0, ip, lsr r3
     64c:	00001364 	andeq	r1, r0, r4, ror #6
     650:	000000a8 	andeq	r0, r0, r8, lsr #1
     654:	83100e44 	tsthi	r0, #68, 28	; 0x440
     658:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     65c:	00018e02 	andeq	r8, r1, r2, lsl #28
     660:	00000018 	andeq	r0, r0, r8, lsl r0
     664:	0000033c 	andeq	r0, r0, ip, lsr r3
word tci_update_delay_ticks (Boolean force) {
     668:	0000140c 	andeq	r1, r0, ip, lsl #8
	cli_tim;
     66c:	00000034 	andeq	r0, r0, r4, lsr r0
     670:	83100e41 	tsthi	r0, #1040	; 0x410
	if (setdel) {
     674:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		if (force) {
     678:	00018e02 	andeq	r8, r1, r2, lsl #28
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     67c:	0000000c 	andeq	r0, r0, ip
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     680:	0000033c 	andeq	r0, r0, ip, lsr r3
     684:	00001440 	andeq	r1, r0, r0, asr #8
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     688:	00000018 	andeq	r0, r0, r8, lsl r0
				AON_RTC_O_CH0CMP)) - gettav ());
     68c:	00000014 	andeq	r0, r0, r4, lsl r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     690:	0000033c 	andeq	r0, r0, ip, lsr r3
     694:	00000000 	andeq	r0, r0, r0
     698:	00000030 	andeq	r0, r0, r0, lsr r0
     69c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
}
     6a0:	00018e02 	andeq	r8, r1, r2, lsl #28
		sti_tim;
     6a4:	00000014 	andeq	r0, r0, r4, lsl r0
     6a8:	0000033c 	andeq	r0, r0, ip, lsr r3
		return YES;
     6ac:	00000000 	andeq	r0, r0, r0
     6b0:	00000038 	andeq	r0, r0, r8, lsr r0
     6b4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     6b8:	00018e02 	andeq	r8, r1, r2, lsl #28
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6bc:	00000040 	andeq	r0, r0, r0, asr #32
	UARTDisable (UART0_BASE);
     6c0:	0000033c 	andeq	r0, r0, ip, lsr r3
     6c4:	00001458 	andeq	r1, r0, r8, asr r4
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6c8:	00000144 	andeq	r0, r0, r4, asr #2
	UARTDisable (UART0_BASE);
     6cc:	80100e41 	andshi	r0, r0, r1, asr #28
	UARTConfigSetExpClk (UART0_BASE,
     6d0:	82038104 	andhi	r8, r3, #4, 2
     6d4:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     6d8:	0b84380e 	bleq	fe10e718 <_estack+0xde109718>
     6dc:	09860a85 	stmibeq	r6, {r0, r2, r7, r9, fp}
     6e0:	07880887 	streq	r0, [r8, r7, lsl #17]
}
     6e4:	058e0689 	streq	r0, [lr, #1673]	; 0x689
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6e8:	2c0e0a62 			; <UNDEFINED> instruction: 0x2c0e0a62
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     6ec:	c8c9ce42 	stmiagt	r9, {r1, r6, r9, sl, fp, lr, pc}^
     6f0:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
     6f4:	c341100e 	movtgt	r1, #4110	; 0x100e
	urates [0] = rate;
     6f8:	0ec0c1c2 	acseqdm	f4, f2
}
     6fc:	000b4100 	andeq	r4, fp, r0, lsl #2
     700:	0000000c 	andeq	r0, r0, ip
     704:	0000033c 	andeq	r0, r0, ip, lsr r3
     708:	0000159c 	muleq	r0, ip, r5
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     70c:	00000024 	andeq	r0, r0, r4, lsr #32
     710:	0000000c 	andeq	r0, r0, ip
     714:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     718:	7c020001 	stcvc	0, cr0, [r2], {1}
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     71c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     720:	00000018 	andeq	r0, r0, r8, lsl r0
	__pi_uart_setrate (urates [0], __pi_uart);
     724:	00000710 	andeq	r0, r0, r0, lsl r7
     728:	000015c0 	andeq	r1, r0, r0, asr #11
     72c:	0000004c 	andeq	r0, r0, ip, asr #32
     730:	83100e41 	tsthi	r0, #1040	; 0x410
     734:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	switch (operation) {
     738:	00018e02 	andeq	r8, r1, r2, lsl #28
static int ioreq_uart_a (int operation, char *buf, int len) {
     73c:	00000014 	andeq	r0, r0, r4, lsl r0
     740:	00000710 	andeq	r0, r0, r0, lsl r7
	switch (operation) {
     744:	0000160c 	andeq	r1, r0, ip, lsl #12
     748:	00000016 	andeq	r0, r0, r6, lsl r0
     74c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				len--;
     750:	00018e02 	andeq	r8, r1, r2, lsl #28
				*buf++ = uart_a_read;
     754:	0000000c 	andeq	r0, r0, ip
			while (len && uart_a_char_available) {
     758:	00000710 	andeq	r0, r0, r0, lsl r7
     75c:	00001622 	andeq	r1, r0, r2, lsr #12
			if (len != operation) {
     760:	0000001a 	andeq	r0, r0, sl, lsl r0
}
     764:	00000018 	andeq	r0, r0, r8, lsl r0
     768:	00000710 	andeq	r0, r0, r0, lsl r7
			uart_a_disable_int;
     76c:	0000163c 	andeq	r1, r0, ip, lsr r6
			if (uart_a_char_available) {
     770:	0000000e 	andeq	r0, r0, lr
			uart_a_disable_int;
     774:	83080e41 	movwhi	r0, #36417	; 0x8e41
     778:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
     77c:	000ec3ce 	andeq	ip, lr, lr, asr #7
			if (uart_a_char_available) {
     780:	00000024 	andeq	r0, r0, r4, lsr #32
				uart_a_enable_int;
     784:	00000710 	andeq	r0, r0, r0, lsl r7
     788:	0000164c 	andeq	r1, r0, ip, asr #12
     78c:	0000008c 	andeq	r0, r0, ip, lsl #1
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     790:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     794:	5f018e02 	svcpl	0x00018e02
			return -2;
     798:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     79c:	560b4200 	strpl	r4, [fp], -r0, lsl #4
				uart_a_write (*buf);
     7a0:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
				len--;
     7a4:	000b4200 	andeq	r4, fp, r0, lsl #4
			while (len && uart_a_room_in_tx) {
     7a8:	00000020 	andeq	r0, r0, r0, lsr #32
     7ac:	00000710 	andeq	r0, r0, r0, lsl r7
			if (len != operation) {
     7b0:	000016d8 	ldrdeq	r1, [r0], -r8
			uart_a_disable_int;
     7b4:	00000070 	andeq	r0, r0, r0, ror r0
     7b8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     7bc:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
			if (uart_a_room_in_tx) {
     7c0:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
				uart_a_enable_int;
     7c4:	430b4200 	movwmi	r4, #45568	; 0xb200
     7c8:	000ec4ce 	andeq	ip, lr, lr, asr #9
     7cc:	0000003c 	andeq	r0, r0, ip, lsr r0
	switch (operation) {
     7d0:	00000710 	andeq	r0, r0, r0, lsl r7
			uart_a_disable_int;
     7d4:	00001748 	andeq	r1, r0, r8, asr #14
			if (uart_a_room_in_tx) {
     7d8:	000000c0 	andeq	r0, r0, r0, asr #1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7dc:	82080e41 	andhi	r0, r8, #1040	; 0x410
     7e0:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
			uart_a_enable_int;
     7e4:	0a84300e 	beq	fe10c824 <_estack+0xde107824>
     7e8:	08860985 	stmeq	r6, {r0, r2, r7, r8, fp}
     7ec:	06880787 	streq	r0, [r8], r7, lsl #15
     7f0:	048a0589 	streq	r0, [sl], #1417	; 0x589
			return 0;
     7f4:	0a6b038e 	beq	1ac1634 <__ccfg+0x1aa168c>
			if (len == UART_CNTRL_SETRATE) {
     7f8:	ce42280e 	cdpgt	8, 4, cr2, cr2, cr14, {0}
				if (__pi_uart_setrate (*((word*)buf),
     7fc:	c7c8c9ca 	strbgt	ip, [r8, sl, asr #19]
     800:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     804:	c2c34108 	sbcgt	r4, r3, #8, 2
				syserror (EREQPAR, "uar");
     808:	0b41000e 	bleq	1040848 <__ccfg+0x10208a0>
			syserror (ENOOPER, "uai");
     80c:	0000001c 	andeq	r0, r0, ip, lsl r0
			if (len == UART_CNTRL_GETRATE) {
     810:	00000710 	andeq	r0, r0, r0, lsl r7
				return 1;
     814:	00000000 	andeq	r0, r0, r0
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     818:	0000006c 	andeq	r0, r0, ip, rrx
			syserror (ENOOPER, "uai");
     81c:	83180e42 	tsthi	r8, #1056	; 0x420
     820:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     824:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     828:	00018e02 	andeq	r8, r1, r2, lsl #28
     82c:	0000000c 	andeq	r0, r0, ip
     830:	00000710 	andeq	r0, r0, r0, lsl r7
     834:	00001808 	andeq	r1, r0, r8, lsl #16
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     838:	00000024 	andeq	r0, r0, r4, lsr #32
void UART0IntHandler () {
     83c:	00000018 	andeq	r0, r0, r8, lsl r0
     840:	00000710 	andeq	r0, r0, r0, lsl r7
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     844:	0000182c 	andeq	r1, r0, ip, lsr #16
     848:	00000080 	andeq	r0, r0, r0, lsl #1
     84c:	83100e42 	tsthi	r0, #1056	; 0x420
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     850:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     854:	00018e02 	andeq	r8, r1, r2, lsl #28
		RISE_N_SHINE;
     858:	00000014 	andeq	r0, r0, r4, lsl r0
     85c:	00000710 	andeq	r0, r0, r0, lsl r7
     860:	00000000 	andeq	r0, r0, r0
		i_trigger (devevent (UART_A, READ));
     864:	00000070 	andeq	r0, r0, r0, ror r0
     868:	83080e42 	movwhi	r0, #36418	; 0x8e42
     86c:	00018e02 	andeq	r8, r1, r2, lsl #28
     870:	00000018 	andeq	r0, r0, r8, lsl r0
     874:	00000710 	andeq	r0, r0, r0, lsl r7
     878:	00000000 	andeq	r0, r0, r0
     87c:	00000078 	andeq	r0, r0, r8, ror r0
     880:	83100e42 	tsthi	r0, #1056	; 0x420
     884:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     888:	00018e02 	andeq	r8, r1, r2, lsl #28
     88c:	00000020 	andeq	r0, r0, r0, lsr #32
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     890:	00000710 	andeq	r0, r0, r0, lsl r7
     894:	000018ac 	andeq	r1, r0, ip, lsr #17
     898:	000000bc 	strheq	r0, [r0], -ip
     89c:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
		i_trigger (devevent (UART_A, WRITE));
     8a0:	86048505 	strhi	r8, [r4], -r5, lsl #10
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     8a4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     8a8:	0e0a6701 	cdpeq	7, 0, cr6, cr10, cr1, {0}
		RISE_N_SHINE;
     8ac:	000b4114 	andeq	r4, fp, r4, lsl r1
     8b0:	00000018 	andeq	r0, r0, r8, lsl r0
     8b4:	00000710 	andeq	r0, r0, r0, lsl r7
		i_trigger (devevent (UART_A, WRITE));
     8b8:	00000000 	andeq	r0, r0, r0
     8bc:	0000003a 	andeq	r0, r0, sl, lsr r0
     8c0:	83100e41 	tsthi	r0, #1040	; 0x410
     8c4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     8c8:	00018e02 	andeq	r8, r1, r2, lsl #28
     8cc:	00000018 	andeq	r0, r0, r8, lsl r0
     8d0:	00000710 	andeq	r0, r0, r0, lsl r7
     8d4:	00000000 	andeq	r0, r0, r0
     8d8:	00000038 	andeq	r0, r0, r8, lsr r0
     8dc:	83100e41 	tsthi	r0, #1040	; 0x410
     8e0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
}
     8e4:	00018e02 	andeq	r8, r1, r2, lsl #28
     8e8:	0000000c 	andeq	r0, r0, ip
     8ec:	00000710 	andeq	r0, r0, r0, lsl r7
     8f0:	00000000 	andeq	r0, r0, r0
void __buttons_setirq (int val) {
     8f4:	0000000a 	andeq	r0, r0, sl
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     8f8:	00000018 	andeq	r0, r0, r8, lsl r0
     8fc:	00000710 	andeq	r0, r0, r0, lsl r7
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     900:	00001968 	andeq	r1, r0, r8, ror #18
     904:	0000002c 	andeq	r0, r0, ip, lsr #32
     908:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     90c:	4c018e02 	stcmi	14, cr8, [r1], {2}
     910:	000ec4ce 	andeq	ip, lr, lr, asr #9
		bn = BUTTON_GPIO (__button_list [i]);
     914:	0000001c 	andeq	r0, r0, ip, lsl r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     918:	00000710 	andeq	r0, r0, r0, lsl r7
     91c:	00001994 	muleq	r0, r4, r9
     920:	00000060 	andeq	r0, r0, r0, rrx
     924:	83080e41 	movwhi	r0, #36417	; 0x8e41
     928:	61018e02 	tstvs	r1, r2, lsl #28
}
     92c:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
     930:	000b4300 	andeq	r4, fp, r0, lsl #6
     934:	00000014 	andeq	r0, r0, r4, lsl r0
     938:	00000710 	andeq	r0, r0, r0, lsl r7
void __pinlist_setirq (int val) {
     93c:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < N_PINLIST; i++) {
     940:	00000040 	andeq	r0, r0, r0, asr #32
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     944:	83080e42 	movwhi	r0, #36418	; 0x8e42
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     948:	00018e02 	andeq	r8, r1, r2, lsl #28
	for (i = 0; i < N_PINLIST; i++) {
     94c:	00000014 	andeq	r0, r0, r4, lsl r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     950:	00000710 	andeq	r0, r0, r0, lsl r7
     954:	00000000 	andeq	r0, r0, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     958:	0000002c 	andeq	r0, r0, ip, lsr #32
     95c:	83080e42 	movwhi	r0, #36418	; 0x8e42
     960:	00018e02 	andeq	r8, r1, r2, lsl #28
     964:	0000001c 	andeq	r0, r0, ip, lsl r0
  __ASM volatile ("cpsie i" : : : "memory");
     968:	00000710 	andeq	r0, r0, r0, lsl r7
}
     96c:	00000000 	andeq	r0, r0, r0
     970:	0000003c 	andeq	r0, r0, ip, lsr r0
     974:	83180e41 	tsthi	r8, #1040	; 0x410
void GPIOIntHandler () {
     978:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
if (buttons_int) {
     97c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     980:	00018e02 	andeq	r8, r1, r2, lsl #28
     984:	0000000c 	andeq	r0, r0, ip
	buttons_disable ();
     988:	00000710 	andeq	r0, r0, r0, lsl r7
	i_trigger ((aword)&__button_list);
     98c:	00000000 	andeq	r0, r0, r0
     990:	00000006 	andeq	r0, r0, r6
     994:	0000001c 	andeq	r0, r0, ip, lsl r0
     998:	00000710 	andeq	r0, r0, r0, lsl r7
     99c:	000019f4 	strdeq	r1, [r0], -r4
     9a0:	00000068 	andeq	r0, r0, r8, rrx
     9a4:	83180e41 	tsthi	r8, #1040	; 0x410
     9a8:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     9ac:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     9b0:	00018e02 	andeq	r8, r1, r2, lsl #28
     9b4:	00000014 	andeq	r0, r0, r4, lsl r0
     9b8:	00000710 	andeq	r0, r0, r0, lsl r7
	RISE_N_SHINE;
     9bc:	00001a5c 	andeq	r1, r0, ip, asr sl
     9c0:	00000050 	andeq	r0, r0, r0, asr r0
if (pin_sensor_int) {
     9c4:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     9c8:	00018e02 	andeq	r8, r1, r2, lsl #28
     9cc:	0000002c 	andeq	r0, r0, ip, lsr #32
	i_trigger ((aword)(&__input_pins));
     9d0:	00000710 	andeq	r0, r0, r0, lsl r7
     9d4:	00001aac 	andeq	r1, r0, ip, lsr #21
     9d8:	000000a0 	andeq	r0, r0, r0, lsr #1
     9dc:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     9e0:	86088509 	strhi	r8, [r8], -r9, lsl #10
     9e4:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     9e8:	8a048905 	bhi	122e04 <__ccfg+0x102e5c>
     9ec:	8e028b03 	vmlahi.f64	d8, d2, d3
     9f0:	380e4501 	stmdacc	lr, {r0, r8, sl, lr}
     9f4:	240e0a57 	strcs	r0, [lr], #-2647	; 0xfffff5a9
     9f8:	00000b42 	andeq	r0, r0, r2, asr #22
     9fc:	00000014 	andeq	r0, r0, r4, lsl r0
	__pinsen_disable_and_clear;
     a00:	00000710 	andeq	r0, r0, r0, lsl r7
	RISE_N_SHINE;
     a04:	00001b4c 	andeq	r1, r0, ip, asr #22
     a08:	00000040 	andeq	r0, r0, r0, asr #32
}
     a0c:	83080e42 	movwhi	r0, #36418	; 0x8e42
     a10:	00018e02 	andeq	r8, r1, r2, lsl #28
     a14:	00000014 	andeq	r0, r0, r4, lsl r0
     a18:	00000710 	andeq	r0, r0, r0, lsl r7
     a1c:	00001b8c 	andeq	r1, r0, ip, lsl #23
     a20:	00000034 	andeq	r0, r0, r4, lsr r0
void system_init () {
     a24:	83080e42 	movwhi	r0, #36418	; 0x8e42
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a28:	00018e02 	andeq	r8, r1, r2, lsl #28
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a2c:	00000018 	andeq	r0, r0, r8, lsl r0
     a30:	00000710 	andeq	r0, r0, r0, lsl r7
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a34:	00001bc0 	andeq	r1, r0, r0, asr #23
     a38:	0000003c 	andeq	r0, r0, ip, lsr r0
     a3c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a40:	57018e02 	strpl	r8, [r1, -r2, lsl #28]
     a44:	000ec4ce 	andeq	ip, lr, lr, asr #9
     a48:	00000018 	andeq	r0, r0, r8, lsl r0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a4c:	00000710 	andeq	r0, r0, r0, lsl r7
     a50:	00000000 	andeq	r0, r0, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a54:	0000003c 	andeq	r0, r0, ip, lsr r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a58:	83100e42 	tsthi	r0, #1056	; 0x420
     a5c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a60:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a64:	0000000c 	andeq	r0, r0, ip
     a68:	00000710 	andeq	r0, r0, r0, lsl r7
		pin = (port_confs [i] >> 19) & 0x1f;
     a6c:	00001bfc 	strdeq	r1, [r0], -ip
     a70:	00000002 	andeq	r0, r0, r2
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a74:	0000000c 	andeq	r0, r0, ip
     a78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     a7c:	7c020001 	stcvc	0, cr0, [r2], {1}
     a80:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     a84:	0000000c 	andeq	r0, r0, ip
     a88:	00000a74 	andeq	r0, r0, r4, ror sl
     a8c:	00001bfe 	strdeq	r1, [r0], -lr
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a90:	00000002 	andeq	r0, r0, r2
		if (port_confs [i] & 0x40)
     a94:	0000000c 	andeq	r0, r0, ip
     a98:	00000a74 	andeq	r0, r0, r4, ror sl
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a9c:	00001c00 	andeq	r1, r0, r0, lsl #24
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     aa0:	00000002 	andeq	r0, r0, r2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     aa4:	0000000c 	andeq	r0, r0, ip
	all_leds_blink;
     aa8:	00000a74 	andeq	r0, r0, r4, ror sl
     aac:	00001c02 	andeq	r1, r0, r2, lsl #24
     ab0:	00000002 	andeq	r0, r0, r2
     ab4:	00000014 	andeq	r0, r0, r4, lsl r0
     ab8:	00000a74 	andeq	r0, r0, r4, ror sl
     abc:	00001c04 	andeq	r1, r0, r4, lsl #24
     ac0:	00000048 	andeq	r0, r0, r8, asr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     ac8:	00018e02 	andeq	r8, r1, r2, lsl #28
     acc:	0000000c 	andeq	r0, r0, ip
     ad0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ad4:	7c020001 	stcvc	0, cr0, [r2], {1}
     ad8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     adc:	0000000c 	andeq	r0, r0, ip
	IntEnable (INT_AON_RTC_COMB);
     ae0:	00000acc 	andeq	r0, r0, ip, asr #21
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ae4:	00000000 	andeq	r0, r0, r0
     ae8:	00000002 	andeq	r0, r0, r2
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     aec:	00000018 	andeq	r0, r0, r8, lsl r0
	IntEnable (INT_AON_RTC_COMB);
     af0:	00000acc 	andeq	r0, r0, ip, asr #21
     af4:	00000000 	andeq	r0, r0, r0
	__pi_malloc_init ();
     af8:	00000058 	andeq	r0, r0, r8, asr r0
	IntEnable (INT_AON_GPIO_EDGE);
     afc:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     b00:	86038504 	strhi	r8, [r3], -r4, lsl #10
     b04:	00018e02 	andeq	r8, r1, r2, lsl #28
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b08:	0000000c 	andeq	r0, r0, ip
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b10:	7c020001 	stcvc	0, cr0, [r2], {1}
     b14:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b18:	0000002c 	andeq	r0, r0, ip, lsr #32
     b1c:	00000b08 	andeq	r0, r0, r8, lsl #22
     b20:	00000000 	andeq	r0, r0, r0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b24:	000000d4 	ldrdeq	r0, [r0], -r4
     b28:	83100e42 	tsthi	r0, #1056	; 0x420
     b2c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	urates [0] = UART_RATE / 100;
     b30:	02018e02 	andeq	r8, r1, #2, 28
     b34:	c5ce0a57 	strbgt	r0, [lr, #2647]	; 0xa57
     b38:	000ec3c4 	andeq	ip, lr, r4, asr #7
	reinit_uart ();
     b3c:	ce420b44 	vmlsgt.f64	d16, d2, d4
	EXTRA_INITIALIZERS;
     b40:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
     b44:	00000000 	andeq	r0, r0, r0
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b48:	00000024 	andeq	r0, r0, r4, lsr #32
     b4c:	00000b08 	andeq	r0, r0, r8, lsl #22
     b50:	00000000 	andeq	r0, r0, r0
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b54:	00000038 	andeq	r0, r0, r8, lsr r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b58:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
			devinit [i] . init (devinit [i] . param);
     b5c:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b60:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     b64:	4a0b4300 	bmi	2d176c <__ccfg+0x2b17c4>
     b68:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
	IntEnable (INT_UART0_COMB);
     b6c:	000b4300 	andeq	r4, fp, r0, lsl #6
     b70:	0000000c 	andeq	r0, r0, ip
     b74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
}
     b78:	7c020001 	stcvc	0, cr0, [r2], {1}
	tci_run_auxiliary_timer ();
     b7c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		diag ("");
     b80:	00000014 	andeq	r0, r0, r4, lsl r0
     b84:	00000b70 	andeq	r0, r0, r0, ror fp
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     b88:	00001c54 	andeq	r1, r0, r4, asr ip
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     b8c:	00000030 	andeq	r0, r0, r0, lsr r0
		diag ("Leftover RAM: %d bytes",
     b90:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
     b94:	00018e02 	andeq	r8, r1, r2, lsl #28
     b98:	00000014 	andeq	r0, r0, r4, lsl r0
     b9c:	00000b70 	andeq	r0, r0, r0, ror fp
     ba0:	00001c84 	andeq	r1, r0, r4, lsl #25
     ba4:	00000034 	andeq	r0, r0, r4, lsr r0
     ba8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     bac:	00018e02 	andeq	r8, r1, r2, lsl #28
     bb0:	00000014 	andeq	r0, r0, r4, lsl r0
     bb4:	00000b70 	andeq	r0, r0, r0, ror fp
     bb8:	00001cb8 			; <UNDEFINED> instruction: 0x00001cb8
     bbc:	0000001c 	andeq	r0, r0, ip, lsl r0
     bc0:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     bc4:	00018e02 	andeq	r8, r1, r2, lsl #28
     bc8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bcc:	00000b70 	andeq	r0, r0, r0, ror fp
     bd0:	00001cd4 	ldrdeq	r1, [r0], -r4
     bd4:	00000058 	andeq	r0, r0, r8, asr r0
     bd8:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
__attribute__ ((noreturn)) void __pi_release () {
     bdc:	86058506 	strhi	r8, [r5], -r6, lsl #10
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     be0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     be4:	00018e02 	andeq	r8, r1, r2, lsl #28
	check_stack_overflow;
     be8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bec:	00000b70 	andeq	r0, r0, r0, ror fp
     bf0:	00001d2c 	andeq	r1, r0, ip, lsr #26
     bf4:	00000044 	andeq	r0, r0, r4, asr #32
	for_all_tasks (__pi_curr) {
     bf8:	83180e41 	tsthi	r8, #1040	; 0x410
	update_n_wake (MAX_WORD, NO);
     bfc:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c00:	87038604 	strhi	r8, [r3, -r4, lsl #12]
	for_all_tasks (__pi_curr) {
     c04:	00018e02 	andeq	r8, r1, r2, lsl #28
     c08:	00000014 	andeq	r0, r0, r4, lsl r0
     c0c:	00000b70 	andeq	r0, r0, r0, ror fp
     c10:	00001d70 	andeq	r1, r0, r0, ror sp
	system_event_count ++;
     c14:	00000024 	andeq	r0, r0, r4, lsr #32
  __ASM volatile ("cpsid i" : : : "memory");
     c18:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	__SLEEP;
     c1c:	00018e02 	andeq	r8, r1, r2, lsl #28
     c20:	00000014 	andeq	r0, r0, r4, lsl r0
     c24:	00000b70 	andeq	r0, r0, r0, ror fp
     c28:	00001d94 	muleq	r0, r4, sp
     c2c:	00000014 	andeq	r0, r0, r4, lsl r0
     c30:	83080e41 	movwhi	r0, #36417	; 0x8e41
	switch (__pi_systat.effpdm) {
     c34:	00018e02 	andeq	r8, r1, r2, lsl #28
     c38:	0000000c 	andeq	r0, r0, ip
     c3c:	00000b70 	andeq	r0, r0, r0, ror fp
     c40:	00001da8 	andeq	r1, r0, r8, lsr #27
  __ASM volatile ("cpsie i" : : : "memory");
     c44:	00000014 	andeq	r0, r0, r4, lsl r0
     c48:	0000001c 	andeq	r0, r0, ip, lsl r0
	check_stack_overflow;
     c4c:	00000b70 	andeq	r0, r0, r0, ror fp
     c50:	00000000 	andeq	r0, r0, r0
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c54:	00000068 	andeq	r0, r0, r8, rrx
     c58:	83180e41 	tsthi	r8, #1040	; 0x410
     c5c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
			(__pi_curr->code) (tstate (__pi_curr));
     c60:	87038604 	strhi	r8, [r3, -r4, lsl #12]
	for_all_tasks (__pi_curr) {
     c64:	00018e02 	andeq	r8, r1, r2, lsl #28
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c68:	0000001c 	andeq	r0, r0, ip, lsl r0
     c6c:	00000b70 	andeq	r0, r0, r0, ror fp
     c70:	00000000 	andeq	r0, r0, r0
     c74:	0000012c 	andeq	r0, r0, ip, lsr #2
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c78:	83180e41 	tsthi	r8, #1040	; 0x410
     c7c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c80:	87038604 	strhi	r8, [r3, -r4, lsl #12]
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c84:	00018e02 	andeq	r8, r1, r2, lsl #28
     c88:	00000028 	andeq	r0, r0, r8, lsr #32
     c8c:	00000b70 	andeq	r0, r0, r0, ror fp
     c90:	00000000 	andeq	r0, r0, r0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c94:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     c98:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
     c9c:	86088509 	strhi	r8, [r8], -r9, lsl #10
     ca0:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
			__WFI ();
     ca4:	8a048905 	bhi	1230c0 <__ccfg+0x103118>
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ca8:	8e028b03 	vmlahi.f64	d8, d2, d3
     cac:	0e0a6201 	cdpeq	2, 0, cr6, cr10, cr1, {0}
     cb0:	000b4224 	andeq	r4, fp, r4, lsr #4
     cb4:	0000000c 	andeq	r0, r0, ip
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cb8:	00000b70 	andeq	r0, r0, r0, ror fp
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cbc:	00000000 	andeq	r0, r0, r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cc0:	00000002 	andeq	r0, r0, r2
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cc4:	0000000c 	andeq	r0, r0, ip
     cc8:	00000b70 	andeq	r0, r0, r0, ror fp
     ccc:	00000000 	andeq	r0, r0, r0
     cd0:	00000004 	andeq	r0, r0, r4
     cd4:	0000000c 	andeq	r0, r0, ip
     cd8:	00000b70 	andeq	r0, r0, r0, ror fp
     cdc:	00000000 	andeq	r0, r0, r0
     ce0:	00000014 	andeq	r0, r0, r4, lsl r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ce4:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     ce8:	00000b70 	andeq	r0, r0, r0, ror fp
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cec:	00000000 	andeq	r0, r0, r0
     cf0:	0000001a 	andeq	r0, r0, sl, lsl r0
     cf4:	83080e41 	movwhi	r0, #36417	; 0x8e41
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     cf8:	4a018e02 	bmi	64508 <__ccfg+0x44560>
     cfc:	000ec3ce 	andeq	ip, lr, lr, asr #7
     d00:	0000000c 	andeq	r0, r0, ip
			SysCtrlSetRechargeBeforePowerDown
     d04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d08:	7c020001 	stcvc	0, cr0, [r2], {1}
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d0c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d10:	00000030 	andeq	r0, r0, r0, lsr r0
     d14:	00000d00 	andeq	r0, r0, r0, lsl #26
     d18:	00001dbc 			; <UNDEFINED> instruction: 0x00001dbc
			__WFI ();
     d1c:	00000054 	andeq	r0, r0, r4, asr r0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d20:	810c0e41 	tsthi	ip, r1, asr #28
     d24:	83028203 	movwhi	r8, #8707	; 0x2203
     d28:	280e4101 	stmdacs	lr, {r0, r8, lr}
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d2c:	06850784 	streq	r0, [r5], r4, lsl #15
     d30:	048e0586 	streq	r0, [lr], #1414	; 0x586
     d34:	421c0e61 	andsmi	r0, ip, #1552	; 0x610
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d38:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
     d3c:	c3410c0e 	movtgt	r0, #7182	; 0x1c0e
     d40:	000ec1c2 	andeq	ip, lr, r2, asr #3
     d44:	0000000c 	andeq	r0, r0, ip
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d4c:	7c020001 	stcvc	0, cr0, [r2], {1}
			while (!(AONWUCPowerStatusGet () &
     d50:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d54:	00000030 	andeq	r0, r0, r0, lsr r0
     d58:	00000d44 	andeq	r0, r0, r4, asr #26
     d5c:	00001e10 	andeq	r1, r0, r0, lsl lr
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d60:	00000060 	andeq	r0, r0, r0, rrx
     d64:	810c0e41 	tsthi	ip, r1, asr #28
     d68:	83028203 	movwhi	r8, #8707	; 0x2203
     d6c:	200e4101 	andcs	r4, lr, r1, lsl #2
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d70:	05850684 	streq	r0, [r5, #1668]	; 0x684
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d74:	0a64048e 	beq	1901fb4 <__ccfg+0x18e200c>
     d78:	ce42180e 	cdpgt	8, 4, cr1, cr2, cr14, {0}
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d7c:	0c0ec4c5 	cfstrseq	mvf12, [lr], {197}	; 0xc5
     d80:	c1c2c341 	bicgt	ip, r2, r1, asr #6
			SysCtrlAdjustRechargeAfterPowerDown ();
     d84:	0b41000e 	bleq	1040dc4 <__ccfg+0x1020e1c>
			reinit_uart ();
     d88:	0000000c 	andeq	r0, r0, ip
     d8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d90:	7c020001 	stcvc	0, cr0, [r2], {1}
     d94:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d98:	0000001c 	andeq	r0, r0, ip, lsl r0
     d9c:	00000d88 	andeq	r0, r0, r8, lsl #27
     da0:	00001e70 	andeq	r1, r0, r0, ror lr
     da4:	00000078 	andeq	r0, r0, r8, ror r0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     da8:	83180e41 	tsthi	r8, #1040	; 0x410
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dac:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     db0:	87038604 	strhi	r8, [r3, -r4, lsl #12]
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     db4:	00018e02 	andeq	r8, r1, r2, lsl #28
     db8:	0000000c 	andeq	r0, r0, ip
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     dbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     dc0:	7c020001 	stcvc	0, cr0, [r2], {1}
     dc4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     dc8:	0000000c 	andeq	r0, r0, ip
     dcc:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     dd0:	00001ee8 	andeq	r1, r0, r8, ror #29
     dd4:	00000020 	andeq	r0, r0, r0, lsr #32
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     dd8:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     ddc:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
			PRCMPowerDomainOff (
     de0:	00001f08 	andeq	r1, r0, r8, lsl #30
     de4:	00000190 	muleq	r0, r0, r1
     de8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     dec:	86038504 	strhi	r8, [r3], -r4, lsl #10
     df0:	00018e02 	andeq	r8, r1, r2, lsl #28
	__SLEEP;
     df4:	00000018 	andeq	r0, r0, r8, lsl r0
     df8:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     dfc:	00002098 	muleq	r0, r8, r0
	goto Redo;
     e00:	00000048 	andeq	r0, r0, r8, asr #32
     e04:	83100e41 	tsthi	r0, #1040	; 0x410
     e08:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     e0c:	00018e02 	andeq	r8, r1, r2, lsl #28
     e10:	00000014 	andeq	r0, r0, r4, lsl r0
     e14:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     e18:	000020e0 	andeq	r2, r0, r0, ror #1
     e1c:	00000024 	andeq	r0, r0, r4, lsr #32
     e20:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     e24:	00018e02 	andeq	r8, r1, r2, lsl #28
     e28:	00000018 	andeq	r0, r0, r8, lsl r0
     e2c:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     e30:	00002104 	andeq	r2, r0, r4, lsl #2
     e34:	00000060 	andeq	r0, r0, r0, rrx
     e38:	83100e41 	tsthi	r0, #1040	; 0x410
     e3c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     e40:	00018e02 	andeq	r8, r1, r2, lsl #28
int main (void) {
     e44:	00000018 	andeq	r0, r0, r8, lsl r0
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e48:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     e4c:	00002164 	andeq	r2, r0, r4, ror #2
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e50:	00000038 	andeq	r0, r0, r8, lsr r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e54:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
	system_init ();
     e58:	86038504 	strhi	r8, [r3], -r4, lsl #10
	tcv_init ();
     e5c:	00018e02 	andeq	r8, r1, r2, lsl #28
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e60:	00000030 	andeq	r0, r0, r0, lsr r0
     e64:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     e68:	0000219c 	muleq	r0, ip, r1
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e6c:	000001a8 	andeq	r0, r0, r8, lsr #3
     e70:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     e74:	86078508 	strhi	r8, [r7], -r8, lsl #10
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e78:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     e7c:	8a038904 	bhi	e3294 <__ccfg+0xc32ec>
     e80:	02018e02 	andeq	r8, r1, #2, 28
     e84:	cace0a9d 	bgt	ff383900 <_estack+0xdf37e900>
	delay (16, 0);
     e88:	c6c7c8c9 	strbgt	ip, [r7], r9, asr #17
     e8c:	000ec4c5 	andeq	ip, lr, r5, asr #9
	__pi_release ();
     e90:	00000b44 	andeq	r0, r0, r4, asr #22
     e94:	00000030 	andeq	r0, r0, r0, lsr r0
     e98:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     e9c:	00002344 	andeq	r2, r0, r4, asr #6
     ea0:	000000c4 	andeq	r0, r0, r4, asr #1
     ea4:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
static void killev (__pi_pcb_t *pid) {
     ea8:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
	wfun = (aword)(pid->code);
     eac:	87058606 	strhi	r8, [r5, -r6, lsl #12]
	for_all_tasks (i) {
     eb0:	89038804 	stmdbhi	r3, {r2, fp, pc}
		for (j = 0; j < nevents (i); j++) {
     eb4:	02018e02 	andeq	r8, r1, #2, 28
     eb8:	c9ce0a4b 	stmibgt	lr, {r0, r1, r3, r6, r9, fp}^
     ebc:	c5c6c7c8 	strbgt	ip, [r6, #1992]	; 0x7c8
			    || i->Events [j] . Event == wfun
     ec0:	000ec3c4 	andeq	ip, lr, r4, asr #7
		for (j = 0; j < nevents (i); j++) {
     ec4:	00000b46 	andeq	r0, r0, r6, asr #22
			if (i->Events [j] . Event == (aword)pid
     ec8:	00000028 	andeq	r0, r0, r8, lsr #32
     ecc:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     ed0:	00002408 	andeq	r2, r0, r8, lsl #8
				wakeupev (i, j);
     ed4:	000001e0 	andeq	r0, r0, r0, ror #3
     ed8:	83180e42 	tsthi	r8, #1056	; 0x420
	for_all_tasks (i) {
     edc:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
}
     ee0:	87038604 	strhi	r8, [r3, -r4, lsl #12]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     ee4:	02018e02 	andeq	r8, r1, #2, 28
static void qfree (aword *ch) {
     ee8:	c6c7ced0 			; <UNDEFINED> instruction: 0xc6c7ced0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     eec:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
	cc = (aword*)(mpools + MA_NP);
     ef0:	00000000 	andeq	r0, r0, r0
	m_setnextp (ch, chunk);
     ef4:	00000018 	andeq	r0, r0, r8, lsl r0
	m_setnextp (cc, ch);
     ef8:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
}
     efc:	000025e8 	andeq	r2, r0, r8, ror #11
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f00:	0000006c 	andeq	r0, r0, ip, rrx
     f04:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     f08:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
			m_setnextp (cc, m_nextp (chunk));
     f0c:	00000001 	andeq	r0, r0, r1
			m_size (chunk) += m_hdrlen + m_size (ch);
     f10:	00000024 	andeq	r0, r0, r4, lsr #32
     f14:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     f18:	00002654 	andeq	r2, r0, r4, asr r6
     f1c:	00000174 	andeq	r0, r0, r4, ror r1
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f20:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f24:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
     f28:	87078608 	strhi	r8, [r7, -r8, lsl #12]
     f2c:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
			m_setnextp (cc, m_nextp (chunk));
     f30:	8b038a04 	blhi	e3748 <__ccfg+0xc37a0>
			m_size (ch) += m_hdrlen + m_size (chunk);
     f34:	00018e02 	andeq	r8, r1, r2, lsl #28
     f38:	0000000c 	andeq	r0, r0, ip
     f3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f40:	7c020001 	stcvc	0, cr0, [r2], {1}
     f44:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f48:	00000014 	andeq	r0, r0, r4, lsl r0
			if (m_size (chunk) >= m_size (ch))
     f4c:	00000f38 	andeq	r0, r0, r8, lsr pc
     f50:	000027c8 	andeq	r2, r0, r8, asr #15
     f54:	00000024 	andeq	r0, r0, r4, lsr #32
		chunk = m_nextp (chunk))
     f58:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     f5c:	00018e02 	andeq	r8, r1, r2, lsl #28
     f60:	0000000c 	andeq	r0, r0, ip
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f64:	00000f38 	andeq	r0, r0, r8, lsr pc
	diag_wait (a);
     f68:	000027ec 	andeq	r2, r0, ip, ror #15
	diag_wchar (c, a);
     f6c:	00000024 	andeq	r0, r0, r4, lsr #32
}
     f70:	0000000c 	andeq	r0, r0, ip
     f74:	00000f38 	andeq	r0, r0, r8, lsr pc
	syserror (ESTATE, "state");
     f78:	00002810 	andeq	r2, r0, r0, lsl r8
     f7c:	00000008 	andeq	r0, r0, r8
     f80:	0000000c 	andeq	r0, r0, ip
     f84:	00000f38 	andeq	r0, r0, r8, lsr pc
	for (i = 0; i < MAX_UTIMERS; i++)
     f88:	00002818 	andeq	r2, r0, r8, lsl r8
void utimer_add (address ut) {
     f8c:	00000004 	andeq	r0, r0, r4
     f90:	0000000c 	andeq	r0, r0, ip
		if (__pi_utims [i] == NULL)
     f94:	00000f38 	andeq	r0, r0, r8, lsr pc
	for (i = 0; i < MAX_UTIMERS; i++)
     f98:	0000281c 	andeq	r2, r0, ip, lsl r8
     f9c:	00000004 	andeq	r0, r0, r4
		syserror (ERESOURCE, "ut a");
     fa0:	00000018 	andeq	r0, r0, r8, lsl r0
	__pi_utims [i] = ut;
     fa4:	00000f38 	andeq	r0, r0, r8, lsr pc
}
     fa8:	00002820 	andeq	r2, r0, r0, lsr #16
     fac:	00000048 	andeq	r0, r0, r8, asr #32
     fb0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
	*t = v;
     fb4:	86038504 	strhi	r8, [r3], -r4, lsl #10
	TCI_RUN_AUXILIARY_TIMER;
     fb8:	00018e02 	andeq	r8, r1, r2, lsl #28
void update_n_wake (word min, Boolean force) {
     fbc:	0000000c 	andeq	r0, r0, ip
	if (TCI_UPDATE_DELAY_TICKS (force))
     fc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     fc4:	7c020001 	stcvc	0, cr0, [r2], {1}
     fc8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fcc:	0000000c 	andeq	r0, r0, ip
     fd0:	00000fbc 			; <UNDEFINED> instruction: 0x00000fbc
     fd4:	00002868 	andeq	r2, r0, r8, ror #16
     fd8:	00000020 	andeq	r0, r0, r0, lsr #32
     fdc:	00000028 	andeq	r0, r0, r8, lsr #32
     fe0:	00000fbc 			; <UNDEFINED> instruction: 0x00000fbc
     fe4:	00002888 	andeq	r2, r0, r8, lsl #17
     fe8:	00000224 	andeq	r0, r0, r4, lsr #4
     fec:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
     ff0:	86078508 	strhi	r8, [r7], -r8, lsl #10
     ff4:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     ff8:	8a038904 	bhi	e3410 <__ccfg+0xc3468>
     ffc:	02018e02 	andeq	r8, r1, #2, 28
		for_all_tasks (i) {
    1000:	200e0a49 	andcs	r0, lr, r9, asr #20
	__pi_mintk = znew + min;
    1004:	00000b42 	andeq	r0, r0, r2, asr #22
    1008:	0000001c 	andeq	r0, r0, ip, lsl r0
			if (!twaiting (i))
    100c:	00000fbc 			; <UNDEFINED> instruction: 0x00000fbc
    1010:	00002aac 	andeq	r2, r0, ip, lsr #21
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1014:	00000050 	andeq	r0, r0, r0, asr r0
    1018:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    101c:	86058506 	strhi	r8, [r5], -r6, lsl #10
    1020:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    1024:	00018e02 	andeq	r8, r1, r2, lsl #28
    1028:	0000000c 	andeq	r0, r0, ip
    102c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1030:	7c020001 	stcvc	0, cr0, [r2], {1}
    1034:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1038:	00000020 	andeq	r0, r0, r0, lsr #32
    103c:	00001028 	andeq	r1, r0, r8, lsr #32
    1040:	00002afc 	strdeq	r2, [r0], -ip
				wakeuptm (i);
    1044:	00000392 	muleq	r0, r2, r3
    1048:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xfffff1bd
		for_all_tasks (i) {
    104c:	86068507 	strhi	r8, [r6], -r7, lsl #10
				d = i->Timer - znew;
    1050:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    1054:	8e028903 	vmlahi.f16	s16, s4, s6	; <UNPREDICTABLE>
    1058:	00000001 	andeq	r0, r0, r1
		if ((word)(__pi_mintk - znew) < min) 
    105c:	0000000c 	andeq	r0, r0, ip
    1060:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1064:	7c020001 	stcvc	0, cr0, [r2], {1}
	__pi_old = znew;
    1068:	000d0c0e 	andeq	r0, sp, lr, lsl #24
}
    106c:	00000028 	andeq	r0, r0, r8, lsr #32
	TCI_RUN_DELAY_TIMER;
    1070:	0000105c 	andeq	r1, r0, ip, asr r0
}
    1074:	00002e90 	muleq	r0, r0, lr
    1078:	00000070 	andeq	r0, r0, r0, ror r0
    107c:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
    1080:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1084:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
void proceed (word state) {
    1088:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
	prcdstate (__pi_curr, state);
    108c:	c7ce4214 	bfigt	r4, r4, #4, #11
    1090:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
	release;
    1094:	000b4200 	andeq	r4, fp, r0, lsl #4
    1098:	0000000c 	andeq	r0, r0, ip
void __pi_wait (aword event, word state) {
    109c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	sint j = nevents (__pi_curr);
    10a0:	7c020001 	stcvc	0, cr0, [r2], {1}
	if (j >= MAX_EVENTS_PER_TASK)
    10a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    10a8:	00000034 	andeq	r0, r0, r4, lsr r0
    10ac:	00001098 	muleq	r0, r8, r0
		syserror (ENEVENTS, "sw");
    10b0:	00002f00 	andeq	r2, r0, r0, lsl #30
    10b4:	0000011c 	andeq	r0, r0, ip, lsl r1
	setestate (__pi_curr->Events [j], state, event);
    10b8:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
	incwait (__pi_curr);
    10bc:	86048505 	strhi	r8, [r4], -r5, lsl #10
	setestate (__pi_curr->Events [j], state, event);
    10c0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
}
    10c4:	0a7c0201 	beq	1f018d0 <__ccfg+0x1ee1928>
    10c8:	ce42140e 	cdpgt	4, 4, cr1, cr2, cr14, {0}
    10cc:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
void __pi_trigger (aword event) {
    10d0:	0b42000e 	bleq	1081110 <__ccfg+0x1061168>
	for_all_tasks (i) {
    10d4:	42140e41 	andsmi	r0, r4, #1040	; 0x410
		for (j = 0; j < nevents (i); j++) {
    10d8:	c5c6c7ce 	strbgt	ip, [r6, #1998]	; 0x7ce
    10dc:	00000ec4 	andeq	r0, r0, r4, asr #29
    10e0:	0000000c 	andeq	r0, r0, ip
    10e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			if (i->Events [j] . Event == event) {
    10e8:	7c020001 	stcvc	0, cr0, [r2], {1}
    10ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    10f0:	00000024 	andeq	r0, r0, r4, lsr #32
				wakeupev (i, j);
    10f4:	000010e0 	andeq	r1, r0, r0, ror #1
    10f8:	0000301c 	andeq	r3, r0, ip, lsl r0
	for_all_tasks (i) {
    10fc:	00000028 	andeq	r0, r0, r8, lsr #32
}
    1100:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
aword __pi_join (aword pid, word st) {
    1104:	86038504 	strhi	r8, [r3], -r4, lsl #10
	for_all_tasks (i) {
    1108:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
    110c:	c5c6ce0a 	strbgt	ip, [r6, #3594]	; 0xe0a
	return 0;
    1110:	42000ec4 	andmi	r0, r0, #196, 28	; 0xc40
		if ((aword)i == pid) {
    1114:	0000000b 	andeq	r0, r0, fp
			__pi_wait (pid, st);
    1118:	00000028 	andeq	r0, r0, r8, lsr #32
}
    111c:	000010e0 	andeq	r1, r0, r0, ror #1
	for_all_tasks (i) {
    1120:	00000000 	andeq	r0, r0, r0
    1124:	0000002c 	andeq	r0, r0, ip, lsr #32
void delay (word d, word state) {
    1128:	83180e41 	tsthi	r8, #1040	; 0x410
	settstate (__pi_curr, state);
    112c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
    1130:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    1134:	50018e02 	andpl	r8, r1, r2, lsl #28
    1138:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
	update_n_wake (d, YES);
    113c:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    1140:	000b4200 	andeq	r4, fp, r0, lsl #4
	__pi_curr->Timer = __pi_old + d;
    1144:	0000000c 	andeq	r0, r0, ip
    1148:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	inctimer (__pi_curr);
    114c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1150:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1154:	0000000c 	andeq	r0, r0, ip
}
    1158:	00001144 	andeq	r1, r0, r4, asr #2
    115c:	00003044 	andeq	r3, r0, r4, asr #32
	if (fun == NULL)
    1160:	00000030 	andeq	r0, r0, r0, lsr r0
		return (int) __pi_curr;
    1164:	0000000c 	andeq	r0, r0, ip
    1168:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	for_all_tasks (i)
    116c:	7c020001 	stcvc	0, cr0, [r2], {1}
}
    1170:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1174:	0000000c 	andeq	r0, r0, ip
	for_all_tasks (i)
    1178:	00001164 	andeq	r1, r0, r4, ror #2
    117c:	00003074 	andeq	r3, r0, r4, ror r0
    1180:	00000020 	andeq	r0, r0, r0, lsr #32
int __pi_strlen (const char *s) {
    1184:	0000000c 	andeq	r0, r0, ip
	for (i = 0; *(s+i) != '\0'; i++);
    1188:	00001164 	andeq	r1, r0, r4, ror #2
}
    118c:	00003094 	muleq	r0, r4, r0
	for (i = 0; *(s+i) != '\0'; i++);
    1190:	00000018 	andeq	r0, r0, r8, lsl r0
	while ((Boolean)(*d++ = *s++));
    1194:	0000000c 	andeq	r0, r0, ip
    1198:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    119c:	7c020001 	stcvc	0, cr0, [r2], {1}
}
    11a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11a4:	0000000c 	andeq	r0, r0, ip
	while (n--)
    11a8:	00001194 	muleq	r0, r4, r1
		*dest++ = *src++;
    11ac:	000030ac 	andeq	r3, r0, ip, lsr #1
    11b0:	00000008 	andeq	r0, r0, r8
    11b4:	0000000c 	andeq	r0, r0, ip
		*dest++ = c;
    11b8:	00001194 	muleq	r0, r4, r1
void adddevfunc (devreqfun_t rf, int loc) {
    11bc:	00000000 	andeq	r0, r0, r0
		syserror (EREQPAR, "addv");
    11c0:	00000006 	andeq	r0, r0, r6
		syserror (ERESOURCE, "addv");
    11c4:	0000000c 	andeq	r0, r0, ip
	if (ioreq [loc] != NULL)
    11c8:	00001194 	muleq	r0, r4, r1
    11cc:	000030b4 	strheq	r3, [r0], -r4
		syserror (ERESOURCE, "addv");
    11d0:	00000008 	andeq	r0, r0, r8
	ioreq [loc] = rf;
    11d4:	0000000c 	andeq	r0, r0, ip
}
    11d8:	00001194 	muleq	r0, r4, r1
    11dc:	00000000 	andeq	r0, r0, r0
sint io (word retry, word dev, word operation, char *buf, word len) {
    11e0:	00000006 	andeq	r0, r0, r6
    11e4:	0000000c 	andeq	r0, r0, ip
    11e8:	00001194 	muleq	r0, r4, r1
    11ec:	00000000 	andeq	r0, r0, r0
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11f0:	00000008 	andeq	r0, r0, r8
    11f4:	0000000c 	andeq	r0, r0, ip
    11f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		syserror (ENODEVICE, "io");
    11fc:	7c020001 	stcvc	0, cr0, [r2], {1}
    1200:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1204:	0000001c 	andeq	r0, r0, ip, lsl r0
	ret = (ioreq [dev]) (operation, buf, len);
    1208:	000011f4 	strdeq	r1, [r0], -r4
    120c:	000030bc 	strheq	r3, [r0], -ip
	if (ret >= 0)
    1210:	0000005c 	andeq	r0, r0, ip, asr r0
	if (ret == -1) {
    1214:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
    1218:	86038504 	strhi	r8, [r3], -r4, lsl #10
		if (retry == WNONE)
    121c:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
		iowait (dev, operation, retry);
    1220:	0000100e 	andeq	r1, r0, lr
    1224:	00000014 	andeq	r0, r0, r4, lsl r0
    1228:	000011f4 	strdeq	r1, [r0], -r4
			release;
    122c:	00003118 	andeq	r3, r0, r8, lsl r1
	if (ret == -2) {
    1230:	0000002c 	andeq	r0, r0, ip, lsr #32
			(ioreq [dev]) (NONE, buf, len);
    1234:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		if (retry != WNONE) {
    1238:	00018e02 	andeq	r8, r1, r2, lsl #28
			iowait (dev, operation, retry);
    123c:	00000018 	andeq	r0, r0, r8, lsl r0
    1240:	000011f4 	strdeq	r1, [r0], -r4
			(ioreq [dev]) (NONE, buf, len);
    1244:	00000000 	andeq	r0, r0, r0
    1248:	00000090 	muleq	r0, r0, r0
    124c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		(ioreq [dev]) (NONE, buf, len);
    1250:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1254:	00018e02 	andeq	r8, r1, r2, lsl #28
    1258:	00000014 	andeq	r0, r0, r4, lsl r0
}
    125c:	000011f4 	strdeq	r1, [r0], -r4
	if (retry != WNONE) {
    1260:	00003144 	andeq	r3, r0, r4, asr #2
		delay (-ret - 2, retry);
    1264:	00000018 	andeq	r0, r0, r8, lsl r0
    1268:	83080e41 	movwhi	r0, #36417	; 0x8e41
    126c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1270:	00000014 	andeq	r0, r0, r4, lsl r0
		release;
    1274:	000011f4 	strdeq	r1, [r0], -r4
    1278:	0000315c 	andeq	r3, r0, ip, asr r1
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    127c:	00000060 	andeq	r0, r0, r0, rrx
    1280:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1284:	00018e02 	andeq	r8, r1, r2, lsl #28
    1288:	00000014 	andeq	r0, r0, r4, lsl r0
    128c:	000011f4 	strdeq	r1, [r0], -r4
		syserror (ERESOURCE, "mal1");
    1290:	000031bc 			; <UNDEFINED> instruction: 0x000031bc
    1294:	00000034 	andeq	r0, r0, r4, lsr r0
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1298:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    129c:	00018e02 	andeq	r8, r1, r2, lsl #28
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12a0:	00000018 	andeq	r0, r0, r8, lsl r0
	m_size (mpools [0]) = mlen - m_hdrlen;
    12a4:	000011f4 	strdeq	r1, [r0], -r4
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12a8:	00000000 	andeq	r0, r0, r0
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12ac:	00000038 	andeq	r0, r0, r8, lsr r0
    12b0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
}
    12b4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    12b8:	00000001 	andeq	r0, r0, r1
    12bc:	0000000c 	andeq	r0, r0, ip
    12c0:	000011f4 	strdeq	r1, [r0], -r4
    12c4:	00000000 	andeq	r0, r0, r0
    12c8:	0000000c 	andeq	r0, r0, ip
void __pi_free (aword *ch) {
    12cc:	00000018 	andeq	r0, r0, r8, lsl r0
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12d0:	000011f4 	strdeq	r1, [r0], -r4
    12d4:	00000000 	andeq	r0, r0, r0
		syserror (EMALLOC, "malg");
    12d8:	00000034 	andeq	r0, r0, r4, lsr r0
    12dc:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
	mcfree [MA_NP] += m_size (ch);
    12e0:	86038504 	strhi	r8, [r3], -r4, lsl #10
		m_size (ch) ^= MALLOC_UMASK;
    12e4:	00018e02 	andeq	r8, r1, r2, lsl #28
    12e8:	0000000c 	andeq	r0, r0, ip
	mcfree [MA_NP] += m_size (ch);
    12ec:	000011f4 	strdeq	r1, [r0], -r4
	QFREE;
    12f0:	00000000 	andeq	r0, r0, r0
	if (mevent [MA_NP] . nwait) {
    12f4:	0000001c 	andeq	r0, r0, ip, lsl r0
    12f8:	0000000c 	andeq	r0, r0, ip
		trigger ((aword)(&(mevent [MA_NP])));
    12fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		mevent [MA_NP] . nwait --;
    1300:	7c020001 	stcvc	0, cr0, [r2], {1}
}
    1304:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1308:	0000000c 	andeq	r0, r0, ip
    130c:	000012f8 	strdeq	r1, [r0], -r8
    1310:	00000000 	andeq	r0, r0, r0
void kill (aword pid) {
    1314:	00000014 	andeq	r0, r0, r4, lsl r0
		pid = (aword) __pi_curr;
    1318:	0000000c 	andeq	r0, r0, ip
	j = NULL;
    131c:	000012f8 	strdeq	r1, [r0], -r8
	for_all_tasks (i) {
    1320:	000031f0 	strdeq	r3, [r0], -r0
	syserror (EREQPAR, "kpi");
    1324:	00000028 	andeq	r0, r0, r8, lsr #32
    1328:	0000000c 	andeq	r0, r0, ip
		if ((aword)i == pid) {
    132c:	000012f8 	strdeq	r1, [r0], -r8
    1330:	00003218 	andeq	r3, r0, r8, lsl r2
				__PCB = i->Next;
    1334:	0000004c 	andeq	r0, r0, ip, asr #32
			killev (i);
    1338:	0000000c 	andeq	r0, r0, ip
			ufree (i);
    133c:	000012f8 	strdeq	r1, [r0], -r8
			if (i == __pi_curr)
    1340:	00003264 	andeq	r3, r0, r4, ror #4
    1344:	00000150 	andeq	r0, r0, r0, asr r1
				release;
    1348:	00000018 	andeq	r0, r0, r8, lsl r0
				j->Next = i->Next;
    134c:	000012f8 	strdeq	r1, [r0], -r8
    1350:	000033b4 			; <UNDEFINED> instruction: 0x000033b4
				__PCB = i->Next;
    1354:	00000118 	andeq	r0, r0, r8, lsl r1
}
    1358:	84100e43 	ldrhi	r0, [r0], #-3651	; 0xfffff1bd
    135c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1360:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (size < 8)
    1364:	00000018 	andeq	r0, r0, r8, lsl r0
		_size = 2;
    1368:	000012f8 	strdeq	r1, [r0], -r8
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    136c:	000034cc 	andeq	r3, r0, ip, asr #9
		_size = (((aword)size) + 3) >> 2;
    1370:	00000020 	andeq	r0, r0, r0, lsr #32
		if (m_magic (chunk) != MALLOC_MAGIC)
    1374:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
		_size = (((aword)size) + 3) >> 2;
    1378:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
		if (mevent [MA_NP] . nfail != 255)
    137c:	00000001 	andeq	r0, r0, r1
    1380:	00000014 	andeq	r0, r0, r4, lsl r0
			mevent [MA_NP] . nfail ++;
    1384:	000012f8 	strdeq	r1, [r0], -r8
		mnfree [MA_NP] = 0;
    1388:	00000000 	andeq	r0, r0, r0
    138c:	00000060 	andeq	r0, r0, r0, rrx
		if (m_magic (chunk) != MALLOC_MAGIC)
    1390:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1394:	00018e02 	andeq	r8, r1, r2, lsl #28
			syserror (EMALLOC, "malc");
    1398:	0000000c 	andeq	r0, r0, ip
    139c:	000012f8 	strdeq	r1, [r0], -r8
		if (m_size (chunk) >= _size)
    13a0:	000034ec 	andeq	r3, r0, ip, ror #9
    13a4:	0000001c 	andeq	r0, r0, ip, lsl r0
		chunk = m_nextp (chunk)) {
    13a8:	0000000c 	andeq	r0, r0, ip
		m_setnextp (cc, m_nextp (chunk));
    13ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    13b0:	7c020001 	stcvc	0, cr0, [r2], {1}
    13b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    13b8:	00000018 	andeq	r0, r0, r8, lsl r0
			cc = chunk + _size + m_hdrlen;
    13bc:	000013a8 	andeq	r1, r0, r8, lsr #7
    13c0:	00003508 	andeq	r3, r0, r8, lsl #10
			m_size (cc) = waste - m_hdrlen;
    13c4:	000000d4 	ldrdeq	r0, [r0], -r4
			QFREE;
    13c8:	83100e41 	tsthi	r0, #1040	; 0x410
		mevent [MA_NP] . nfail = 0;
    13cc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		mcfree [MA_NP] -= m_size (chunk);
    13d0:	00018e02 	andeq	r8, r1, r2, lsl #28
    13d4:	00000014 	andeq	r0, r0, r4, lsl r0
    13d8:	000013a8 	andeq	r1, r0, r8, lsr #7
    13dc:	000035dc 	ldrdeq	r3, [r0], -ip
		m_size (chunk) |= MALLOC_UMASK;
    13e0:	000000a4 	andeq	r0, r0, r4, lsr #1
		if (mnfree [MA_NP] > mcfree [MA_NP])
    13e4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		m_size (chunk) |= MALLOC_UMASK;
    13e8:	00018e02 	andeq	r8, r1, r2, lsl #28
			mnfree [MA_NP] = mcfree [MA_NP];
    13ec:	0000000c 	andeq	r0, r0, ip
}
    13f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    13f4:	7c020001 	stcvc	0, cr0, [r2], {1}
    13f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    13fc:	00000018 	andeq	r0, r0, r8, lsl r0
    1400:	000013ec 	andeq	r1, r0, ip, ror #7
    1404:	00003680 	andeq	r3, r0, r0, lsl #13
    1408:	0000007c 	andeq	r0, r0, ip, ror r0
aword __pi_fork (fsmcode func, aword data) {
    140c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1410:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1414:	00000001 	andeq	r0, r0, r1
    1418:	00000014 	andeq	r0, r0, r4, lsl r0
		if ((j = __PCB) == NULL)
    141c:	000013ec 	andeq	r1, r0, ip, ror #7
	i->Next = NULL;
    1420:	000036fc 	strdeq	r3, [r0], -ip
	i->data = data;
    1424:	000000ac 	andeq	r0, r0, ip, lsr #1
		if ((j = __PCB) == NULL)
    1428:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
}
    142c:	00018e02 	andeq	r8, r1, r2, lsl #28
			for (; j->Next != NULL; j = j->Next);
    1430:	0000000c 	andeq	r0, r0, ip
    1434:	000013ec 	andeq	r1, r0, ip, ror #7
	return (aword) i;
    1438:	000037a8 	andeq	r3, r0, r8, lsr #15
    143c:	0000005c 	andeq	r0, r0, ip, asr r0
	if (mevent [MA_NP] . nwait != 255)
    1440:	0000000c 	andeq	r0, r0, ip
    1444:	000013ec 	andeq	r1, r0, ip, ror #7
    1448:	00003804 	andeq	r3, r0, r4, lsl #16
		mevent [MA_NP] . nwait ++;
    144c:	00000018 	andeq	r0, r0, r8, lsl r0
	wait ((aword)(&(mevent [MA_NP])), state);
    1450:	0000000c 	andeq	r0, r0, ip
    1454:	000013ec 	andeq	r1, r0, ip, ror #7
void diag (const char *mess, ...) {
    1458:	00000000 	andeq	r0, r0, r0
    145c:	00000010 	andeq	r0, r0, r0, lsl r0
    1460:	0000000c 	andeq	r0, r0, ip
	diag_disable_int (a, is);
    1464:	000013ec 	andeq	r1, r0, ip, ror #7
    1468:	0000381c 	andeq	r3, r0, ip, lsl r8
    146c:	00000010 	andeq	r0, r0, r0, lsl r0
					d /= 10;
    1470:	0000000c 	andeq	r0, r0, ip
	diag_disable_int (a, is);
    1474:	000013ec 	andeq	r1, r0, ip, ror #7
				d = (bc == 16) ? 10000 : 1000000000;
    1478:	0000382c 	andeq	r3, r0, ip, lsr #16
	while (*mess != '\0') {
    147c:	00000014 	andeq	r0, r0, r4, lsl r0
	dgout ('\r');
    1480:	00000018 	andeq	r0, r0, r8, lsl r0
	dgout ('\n');
    1484:	000013ec 	andeq	r1, r0, ip, ror #7
    1488:	00003840 	andeq	r3, r0, r0, asr #16
    148c:	00000064 	andeq	r0, r0, r4, rrx
	diag_wait (a);
    1490:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
	diag_enable_int (a, is);
    1494:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1498:	00018e02 	andeq	r8, r1, r2, lsl #28
    149c:	0000000c 	andeq	r0, r0, ip
}
    14a0:	000013ec 	andeq	r1, r0, ip, ror #7
    14a4:	000038a4 	andeq	r3, r0, r4, lsr #17
    14a8:	00000014 	andeq	r0, r0, r4, lsl r0
			mess++;
    14ac:	0000000c 	andeq	r0, r0, ip
		if (*mess == '%') {
    14b0:	000013ec 	andeq	r1, r0, ip, ror #7
			if (*mess == 'l') {
    14b4:	000038b8 			; <UNDEFINED> instruction: 0x000038b8
				mess++;
    14b8:	00000014 	andeq	r0, r0, r4, lsl r0
    14bc:	0000000c 	andeq	r0, r0, ip
				bc = 32;
    14c0:	000013ec 	andeq	r1, r0, ip, ror #7
				val = va_arg (ap, lword);
    14c4:	000038cc 	andeq	r3, r0, ip, asr #17
				bc = 16;
    14c8:	00000014 	andeq	r0, r0, r4, lsl r0
			switch (*mess) {
    14cc:	0000000c 	andeq	r0, r0, ip
    14d0:	000013ec 	andeq	r1, r0, ip, ror #7
    14d4:	000038e0 	andeq	r3, r0, r0, ror #17
    14d8:	00000028 	andeq	r0, r0, r8, lsr #32
				dgout ('%');
    14dc:	0000000c 	andeq	r0, r0, ip
    14e0:	000013ec 	andeq	r1, r0, ip, ror #7
				dgout (*mess);
    14e4:	00003908 	andeq	r3, r0, r8, lsl #18
    14e8:	00000010 	andeq	r0, r0, r0, lsl r0
			switch (*mess) {
    14ec:	0000000c 	andeq	r0, r0, ip
					v = __pi_hex_enc_table [
    14f0:	000013ec 	andeq	r1, r0, ip, ror #7
					i += 4;
    14f4:	00003918 	andeq	r3, r0, r8, lsl r9
					(val >> (bc - i)) & 0xf];
    14f8:	0000002c 	andeq	r0, r0, ip, lsr #32
    14fc:	0000000c 	andeq	r0, r0, ip
					dgout (v);
    1500:	000013ec 	andeq	r1, r0, ip, ror #7
    1504:	00003944 	andeq	r3, r0, r4, asr #18
				while (i < bc) {
    1508:	00000014 	andeq	r0, r0, r4, lsl r0
			mess++;
    150c:	0000000c 	andeq	r0, r0, ip
					d /= 10;
    1510:	000013ec 	andeq	r1, r0, ip, ror #7
				if ((val >> (bc - 1)) & 1) {
    1514:	00003958 	andeq	r3, r0, r8, asr r9
    1518:	00000014 	andeq	r0, r0, r4, lsl r0
					dgout ('-');
    151c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1520:	000013ec 	andeq	r1, r0, ip, ror #7
						val |= 0xffff0000;
    1524:	0000396c 	andeq	r3, r0, ip, ror #18
    1528:	00000110 	andeq	r0, r0, r0, lsl r1
    152c:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
				d = (bc == 16) ? 10000 : 1000000000;
    1530:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1534:	02018e02 	andeq	r8, r1, #2, 28
    1538:	00100e76 	andseq	r0, r0, r6, ror lr
					v = (word) (val / d);
    153c:	00000018 	andeq	r0, r0, r8, lsl r0
					if (v || d == 1) break;
    1540:	000013ec 	andeq	r1, r0, ip, ror #7
    1544:	00003a7c 	andeq	r3, r0, ip, ror sl
					d /= 10;
    1548:	00000064 	andeq	r0, r0, r4, rrx
				d = (bc == 16) ? 10000 : 1000000000;
    154c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
					dgout (v + '0');
    1550:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1554:	00000001 	andeq	r0, r0, r1
    1558:	0000000c 	andeq	r0, r0, ip
					d /= 10;
    155c:	000013ec 	andeq	r1, r0, ip, ror #7
					val = val - (v * d);
    1560:	00003ae0 	andeq	r3, r0, r0, ror #21
					if (d == 0) break;
    1564:	00000028 	andeq	r0, r0, r8, lsr #32
					v = (word) (val / d);
    1568:	00000014 	andeq	r0, r0, r4, lsl r0
    156c:	000013ec 	andeq	r1, r0, ip, ror #7
				if (bc == 16)
    1570:	00003b08 	andeq	r3, r0, r8, lsl #22
					val &= 0xffff;
    1574:	00000150 	andeq	r0, r0, r0, asr r1
				d = (bc == 16) ? 10000 : 1000000000;
    1578:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
					dgout (*s);
    157c:	00018e02 	andeq	r8, r1, r2, lsl #28
					s++;
    1580:	0000000c 	andeq	r0, r0, ip
				while (*s != '\0') {
    1584:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1588:	7c020001 	stcvc	0, cr0, [r2], {1}
			dgout (*mess++);
    158c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1590:	0000001c 	andeq	r0, r0, ip, lsl r0
    1594:	00001580 	andeq	r1, r0, r0, lsl #11
    1598:	00000000 	andeq	r0, r0, r0
	__pi_seed = __pi_seed * 1103515245 + 12345;
    159c:	000000f4 	strdeq	r0, [r0], -r4
    15a0:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xfffff1bc
    15a4:	86058506 	strhi	r8, [r5], -r6, lsl #10
    15a8:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
	^ entropy
    15ac:	00018e02 	andeq	r8, r1, r2, lsl #28
}
    15b0:	00000028 	andeq	r0, r0, r8, lsr #32
    15b4:	00001580 	andeq	r1, r0, r0, lsl #11
    15b8:	00003c58 	andeq	r3, r0, r8, asr ip
    15bc:	00000220 	andeq	r0, r0, r0, lsr #4
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    15c0:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
    15c4:	86088509 	strhi	r8, [r8], -r9, lsl #10
    15c8:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
	sysassert (p->attributes.b.queued == 0, "tcv01");
    15cc:	8a048905 	bhi	1239e8 <__ccfg+0x103a40>
    15d0:	8e028b03 	vmlahi.f64	d8, d2, d3
	if (q_empty (q))
    15d4:	0eee0201 	cdpeq	2, 14, cr0, cr14, cr1, {0}
    15d8:	00000024 	andeq	r0, r0, r4, lsr #32
		trigger (q);
    15dc:	00000014 	andeq	r0, r0, r4, lsl r0
	if (p->attributes.b.urgent) {
    15e0:	00001580 	andeq	r1, r0, r0, lsl #11
		p->u.bqueue.next = q->next;
    15e4:	00003e78 	andeq	r3, r0, r8, ror lr
		p->u.bqueue.prev = q;
    15e8:	00000060 	andeq	r0, r0, r0, rrx
		q->next->prev = (qitem_t*) p;
    15ec:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	p->attributes.b.queued = 1;
    15f0:	00018e02 	andeq	r8, r1, r2, lsl #28
    15f4:	00000014 	andeq	r0, r0, r4, lsl r0
}
    15f8:	00001580 	andeq	r1, r0, r0, lsl #11
		p->u.bqueue.prev = q->prev;
    15fc:	00000000 	andeq	r0, r0, r0
		q->prev->next = (qitem_t*) p;
    1600:	00000078 	andeq	r0, r0, r8, ror r0
		q->prev = (qitem_t*) p;
    1604:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1608:	00018e02 	andeq	r8, r1, r2, lsl #28
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    160c:	0000000c 	andeq	r0, r0, ip
	word cs = size + hblenb;
    1610:	00001580 	andeq	r1, r0, r0, lsl #11
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1614:	00003ed8 	ldrdeq	r3, [r0], -r8
    1618:	00000018 	andeq	r0, r0, r8, lsl r0
	p -> length = size;
    161c:	0000000c 	andeq	r0, r0, ip
}
    1620:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	if (p->attributes.b.queued) {
    1624:	7c020001 	stcvc	0, cr0, [r2], {1}
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1628:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    162c:	0000000c 	andeq	r0, r0, ip
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1630:	0000161c 	andeq	r1, r0, ip, lsl r6
		p->attributes.b.queued = 0;
    1634:	00000000 	andeq	r0, r0, r0
    1638:	00000010 	andeq	r0, r0, r0, lsl r0
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    163c:	0000000c 	andeq	r0, r0, ip
	deq (p);	// Remove from queue
    1640:	0000161c 	andeq	r1, r0, ip, lsl r6
}
    1644:	00000000 	andeq	r0, r0, r0
	tfree ((address)p);
    1648:	00000018 	andeq	r0, r0, r8, lsl r0
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    164c:	0000000c 	andeq	r0, r0, ip
    1650:	0000161c 	andeq	r1, r0, ip, lsl r6
	deq (p);	// Soft dequeue, timer and hook left intact
    1654:	00003ef0 	strdeq	r3, [r0], -r0
	switch (dv) {
    1658:	0000004c 	andeq	r0, r0, ip, asr #32
    165c:	00000014 	andeq	r0, r0, r4, lsl r0
    1660:	0000161c 	andeq	r1, r0, ip, lsl r6
			p->attributes.b.urgent = 1;
    1664:	00000000 	andeq	r0, r0, r0
    1668:	00000030 	andeq	r0, r0, r0, lsr r0
			verify_ses (p, "dispose ses");
    166c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1670:	00018e02 	andeq	r8, r1, r2, lsl #28
    1674:	00000018 	andeq	r0, r0, r8, lsl r0
    1678:	0000161c 	andeq	r1, r0, ip, lsl r6
    167c:	00003f3c 	andeq	r3, r0, ip, lsr pc
			verify_phy (p, "dispose phy");
    1680:	0000006c 	andeq	r0, r0, ip, rrx
    1684:	83100e41 	tsthi	r0, #1040	; 0x410
}
    1688:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			enq (oqueues [p->attributes.b.phys], p);
    168c:	00018e02 	andeq	r8, r1, r2, lsl #28
			p->attributes.b.urgent = 1;
    1690:	00000014 	andeq	r0, r0, r4, lsl r0
    1694:	0000161c 	andeq	r1, r0, ip, lsl r6
			verify_phy (p, "dispose phy");
    1698:	00003fa8 	andeq	r3, r0, r8, lsr #31
    169c:	00000016 	andeq	r0, r0, r6, lsl r0
    16a0:	83080e41 	movwhi	r0, #36417	; 0x8e41
    16a4:	00018e02 	andeq	r8, r1, r2, lsl #28
    16a8:	0000000c 	andeq	r0, r0, ip
    16ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			enq (oqueues [p->attributes.b.phys], p);
    16b0:	7c020001 	stcvc	0, cr0, [r2], {1}
    16b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    16b8:	00000024 	andeq	r0, r0, r4, lsr #32
			rlp (p);
    16bc:	000016a8 	andeq	r1, r0, r8, lsr #13
}
    16c0:	00003fc0 	andeq	r3, r0, r0, asr #31
    16c4:	00000028 	andeq	r0, r0, r8, lsr #32
    16c8:	83100e41 	tsthi	r0, #1040	; 0x410
    16cc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    16d0:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
    16d4:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    16d8:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
	if (b->attributes.b.outgoing) {
    16dc:	0000000b 	andeq	r0, r0, fp
	b = header (p);
    16e0:	0000000c 	andeq	r0, r0, ip
	if (b->attributes.b.outgoing) {
    16e4:	000016a8 	andeq	r1, r0, r8, lsr #13
		verify_ses (b, "tcv02");
    16e8:	00003fe8 	andeq	r3, r0, r8, ror #31
    16ec:	00000008 	andeq	r0, r0, r8
    16f0:	0000000c 	andeq	r0, r0, ip
    16f4:	000016a8 	andeq	r1, r0, r8, lsr #13
    16f8:	00000000 	andeq	r0, r0, r0
		verify_plg (b, tcv_out, "tcv03");
    16fc:	00000022 	andeq	r0, r0, r2, lsr #32
    1700:	00000018 	andeq	r0, r0, r8, lsl r0
    1704:	000016a8 	andeq	r1, r0, r8, lsr #13
    1708:	00000000 	andeq	r0, r0, r0
    170c:	0000002e 	andeq	r0, r0, lr, lsr #32
    1710:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1714:	54018e02 	strpl	r8, [r1], #-3586	; 0xfffff1fe
    1718:	000ec4ce 	andeq	ip, lr, lr, asr #9
    171c:	00000018 	andeq	r0, r0, r8, lsl r0
		dispose (b, plugins [b->attributes.b.plugin] ->
    1720:	000016a8 	andeq	r1, r0, r8, lsr #13
}
    1724:	00000000 	andeq	r0, r0, r0
		dispose (b, plugins [b->attributes.b.plugin] ->
    1728:	00000034 	andeq	r0, r0, r4, lsr r0
		rlp (b);
    172c:	83100e41 	tsthi	r0, #1040	; 0x410
}
    1730:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		rlp (b);
    1734:	00018e02 	andeq	r8, r1, r2, lsl #28
    1738:	00000018 	andeq	r0, r0, r8, lsl r0
    173c:	000016a8 	andeq	r1, r0, r8, lsr #13
    1740:	00000000 	andeq	r0, r0, r0
    1744:	00000040 	andeq	r0, r0, r0, asr #32
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1748:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    174c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1750:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1754:	0000000c 	andeq	r0, r0, ip
	va_start (ap, plid);
    1758:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    175c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1760:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1764:	00000020 	andeq	r0, r0, r0, lsr #32
    1768:	00001754 	andeq	r1, r0, r4, asr r7
    176c:	00003ff0 	strdeq	r3, [r0], -r0
    1770:	000000a6 	andeq	r0, r0, r6, lsr #1
			syserror (ENODEVICE, "tcv04");
    1774:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
		syserror (EMALLOC, "tcv05");
    1778:	86048505 	strhi	r8, [r4], -r5, lsl #10
	attp.b.outgoing = 1;
    177c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1780:	180e4201 	stmdane	lr, {r0, r9, lr}
    1784:	00000688 	andeq	r0, r0, r8, lsl #13
    1788:	0000000c 	andeq	r0, r0, ip
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    178c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		if (descriptors [fd] == NULL)
    1790:	7c020001 	stcvc	0, cr0, [r2], {1}
    1794:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1798:	0000001c 	andeq	r0, r0, ip, lsl r0
		return ERROR;
    179c:	00001788 	andeq	r1, r0, r8, lsl #15
}
    17a0:	00004098 	muleq	r0, r8, r0
    17a4:	000000ae 	andeq	r0, r0, lr, lsr #1
    17a8:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
	s->attpattern.b.session = fd;
    17ac:	86048505 	strhi	r8, [r4], -r5, lsl #10
    17b0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
	descriptors [fd] = s;
    17b4:	00000001 	andeq	r0, r0, r1
	q_init (&(s->rqueue));
    17b8:	0000000c 	andeq	r0, r0, ip
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    17bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    17c0:	7c020001 	stcvc	0, cr0, [r2], {1}
    17c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    17c8:	0000000c 	andeq	r0, r0, ip
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    17cc:	000017b8 			; <UNDEFINED> instruction: 0x000017b8
    17d0:	00004148 	andeq	r4, r0, r8, asr #2
    17d4:	00000014 	andeq	r0, r0, r4, lsl r0
